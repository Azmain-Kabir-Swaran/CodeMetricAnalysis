{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 376,
  "functionEndLine": 416,
  "numCommitsSeen": 34,
  "timeTaken": 4293,
  "changeHistory": [
    "d1c1dde3097eea6a46a39d0312f94949f6884002",
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "a0bde7d525911680f9e5fb0a939604865eb8e164",
    "27d60a16342fd39973d43b61008f54a8815a6237",
    "7467e8fe5a95230986fed9d748769304af3f2b61",
    "41b581012a83a17db785343362c718363e13e8f5",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "d1c1dde3097eea6a46a39d0312f94949f6884002": "Ybodychange",
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ybodychange",
    "a0bde7d525911680f9e5fb0a939604865eb8e164": "Ybodychange",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Ybodychange",
    "7467e8fe5a95230986fed9d748769304af3f2b61": "Ybodychange",
    "41b581012a83a17db785343362c718363e13e8f5": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1c1dde3097eea6a46a39d0312f94949f6884002": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8734. Readiness check for remote service belonging to the same user. Contributed by Eric Yang\n",
      "commitDate": "28/09/18 9:40 AM",
      "commitName": "d1c1dde3097eea6a46a39d0312f94949f6884002",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "28/08/18 10:55 AM",
      "commitNameOld": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 308,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     // When yarn.resourcemanager.placement-constraints.handler is set to\n     // placement-processor then constraints need to be added during\n     // registerApplicationMaster.\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n \n     // Update internal resource types according to response.\n     if (response.getResourceTypes() !\u003d null) {\n       ResourceUtils.reinitializeResources(response.getResourceTypes());\n     }\n \n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n     // Since AM has been started and registered, the service is in STARTED state\n     app.setState(ServiceState.STARTED);\n \n+    ServiceApiUtil.checkServiceDependencySatisified(context.service);\n+\n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    // When yarn.resourcemanager.placement-constraints.handler is set to\n    // placement-processor then constraints need to be added during\n    // registerApplicationMaster.\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n\n    // Update internal resource types according to response.\n    if (response.getResourceTypes() !\u003d null) {\n      ResourceUtils.reinitializeResources(response.getResourceTypes());\n    }\n\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n\n    ServiceApiUtil.checkServiceDependencySatisified(context.service);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8298.  Added express upgrade for YARN service.\n            Contributed by Chandni Singh\n",
      "commitDate": "21/08/18 4:49 PM",
      "commitName": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/07/18 3:01 PM",
      "commitNameOld": "c7ebcd76bf3dd14127336951f2be3de772e7826a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 21.08,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     // When yarn.resourcemanager.placement-constraints.handler is set to\n     // placement-processor then constraints need to be added during\n     // registerApplicationMaster.\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n \n     // Update internal resource types according to response.\n     if (response.getResourceTypes() !\u003d null) {\n       ResourceUtils.reinitializeResources(response.getResourceTypes());\n     }\n \n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n     // Since AM has been started and registered, the service is in STARTED state\n     app.setState(ServiceState.STARTED);\n-    serviceManager \u003d new ServiceManager(context);\n-    context.setServiceManager(serviceManager);\n \n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    // When yarn.resourcemanager.placement-constraints.handler is set to\n    // placement-processor then constraints need to be added during\n    // registerApplicationMaster.\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n\n    // Update internal resource types according to response.\n    if (response.getResourceTypes() !\u003d null) {\n      ResourceUtils.reinitializeResources(response.getResourceTypes());\n    }\n\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/04/18 11:24 AM",
      "commitNameOld": "2d0662cfd57bd438421f912dc172e79a15835442",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 10.1,
      "commitsBetweenForRepo": 579,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     // When yarn.resourcemanager.placement-constraints.handler is set to\n     // placement-processor then constraints need to be added during\n     // registerApplicationMaster.\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n \n     // Update internal resource types according to response.\n     if (response.getResourceTypes() !\u003d null) {\n       ResourceUtils.reinitializeResources(response.getResourceTypes());\n     }\n \n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n     // Since AM has been started and registered, the service is in STARTED state\n     app.setState(ServiceState.STARTED);\n     serviceManager \u003d new ServiceManager(context);\n+    context.setServiceManager(serviceManager);\n \n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    // When yarn.resourcemanager.placement-constraints.handler is set to\n    // placement-processor then constraints need to be added during\n    // registerApplicationMaster.\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n\n    // Update internal resource types according to response.\n    if (response.getResourceTypes() !\u003d null) {\n      ResourceUtils.reinitializeResources(response.getResourceTypes());\n    }\n\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n    serviceManager \u003d new ServiceManager(context);\n    context.setServiceManager(serviceManager);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "a0bde7d525911680f9e5fb0a939604865eb8e164": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7142. Support placement policy in yarn native services. (Gour Saha via wangda)\n\nChange-Id: I166c67a7a34430627c17365f60bac75b6da1b434\n",
      "commitDate": "02/04/18 7:26 AM",
      "commitName": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.65,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n+    // When yarn.resourcemanager.placement-constraints.handler is set to\n+    // placement-processor then constraints need to be added during\n+    // registerApplicationMaster.\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n \n     // Update internal resource types according to response.\n     if (response.getResourceTypes() !\u003d null) {\n       ResourceUtils.reinitializeResources(response.getResourceTypes());\n     }\n \n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n     // Since AM has been started and registered, the service is in STARTED state\n     app.setState(ServiceState.STARTED);\n     serviceManager \u003d new ServiceManager(context);\n \n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    // When yarn.resourcemanager.placement-constraints.handler is set to\n    // placement-processor then constraints need to be added during\n    // registerApplicationMaster.\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n\n    // Update internal resource types according to response.\n    if (response.getResourceTypes() !\u003d null) {\n      ResourceUtils.reinitializeResources(response.getResourceTypes());\n    }\n\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n    serviceManager \u003d new ServiceManager(context);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/03/18 8:00 AM",
      "commitNameOld": "5ed689e33ac0becfc36d5fa424466bb1732aa59b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 25.28,
      "commitsBetweenForRepo": 309,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n \n     // Update internal resource types according to response.\n     if (response.getResourceTypes() !\u003d null) {\n       ResourceUtils.reinitializeResources(response.getResourceTypes());\n     }\n \n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n     // Since AM has been started and registered, the service is in STARTED state\n     app.setState(ServiceState.STARTED);\n+    serviceManager \u003d new ServiceManager(context);\n \n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n\n    // Update internal resource types according to response.\n    if (response.getResourceTypes() !\u003d null) {\n      ResourceUtils.reinitializeResources(response.getResourceTypes());\n    }\n\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n    serviceManager \u003d new ServiceManager(context);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "7467e8fe5a95230986fed9d748769304af3f2b61": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7555. Support multiple resource types in YARN native services. (wangda)\n\nChange-Id: I330e6ee17a73962dcaadd766a3e72d2888681731\n",
      "commitDate": "29/12/17 3:34 PM",
      "commitName": "7467e8fe5a95230986fed9d748769304af3f2b61",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/12/17 4:14 PM",
      "commitNameOld": "41b581012a83a17db785343362c718363e13e8f5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n+\n+    // Update internal resource types according to response.\n+    if (response.getResourceTypes() !\u003d null) {\n+      ResourceUtils.reinitializeResources(response.getResourceTypes());\n+    }\n+\n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n     // Since AM has been started and registered, the service is in STARTED state\n     app.setState(ServiceState.STARTED);\n \n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n\n    // Update internal resource types according to response.\n    if (response.getResourceTypes() !\u003d null) {\n      ResourceUtils.reinitializeResources(response.getResourceTypes());\n    }\n\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "41b581012a83a17db785343362c718363e13e8f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7616. Map YARN application status to Service Status more accurately.  (Contributed by Gour Saha)\n",
      "commitDate": "19/12/17 4:14 PM",
      "commitName": "41b581012a83a17db785343362c718363e13e8f5",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/12/17 1:35 PM",
      "commitNameOld": "3ebe6a7819292ce6bd557e36137531b59890c845",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.11,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n+    // Since AM has been started and registered, the service is in STARTED state\n+    app.setState(ServiceState.STARTED);\n+\n     // recover components based on containers sent from RM\n     recoverComponents(response);\n \n     for (Component component : componentsById.values()) {\n       // Trigger initial evaluation of components\n       if (component.areDependenciesReady()) {\n         LOG.info(\"Triggering initial evaluation of component {}\",\n             component.getName());\n         ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n             .setDesired(component.getComponentSpec().getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // Since AM has been started and registered, the service is in STARTED state\n    app.setState(ServiceState.STARTED);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,27 @@\n   public void serviceStart() throws Exception {\n     super.serviceStart();\n     InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n     RegisterApplicationMasterResponse response \u003d amRMClient\n         .registerApplicationMaster(bindAddress.getHostName(),\n             bindAddress.getPort(), \"N/A\");\n     if (response.getClientToAMTokenMasterKey() !\u003d null\n         \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n       context.secretManager\n           .setMasterKey(response.getClientToAMTokenMasterKey().array());\n     }\n     registerServiceInstance(context.attemptId, app);\n \n-    //TODO handle containers recover\n+    // recover components based on containers sent from RM\n+    recoverComponents(response);\n+\n+    for (Component component : componentsById.values()) {\n+      // Trigger initial evaluation of components\n+      if (component.areDependenciesReady()) {\n+        LOG.info(\"Triggering initial evaluation of component {}\",\n+            component.getName());\n+        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n+            .setDesired(component.getComponentSpec().getNumberOfContainers());\n+        component.handle(event);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    // recover components based on containers sent from RM\n    recoverComponents(response);\n\n    for (Component component : componentsById.values()) {\n      // Trigger initial evaluation of components\n      if (component.areDependenciesReady()) {\n        LOG.info(\"Triggering initial evaluation of component {}\",\n            component.getName());\n        ComponentEvent event \u003d new ComponentEvent(component.getName(), FLEX)\n            .setDesired(component.getComponentSpec().getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    //TODO handle containers recover\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,15 @@\n+  public void serviceStart() throws Exception {\n+    super.serviceStart();\n+    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n+    RegisterApplicationMasterResponse response \u003d amRMClient\n+        .registerApplicationMaster(bindAddress.getHostName(),\n+            bindAddress.getPort(), \"N/A\");\n+    if (response.getClientToAMTokenMasterKey() !\u003d null\n+        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n+      context.secretManager\n+          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n+    }\n+    registerServiceInstance(context.attemptId, app);\n+\n+    //TODO handle containers recover\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStart() throws Exception {\n    super.serviceStart();\n    InetSocketAddress bindAddress \u003d context.clientAMService.getBindAddress();\n    RegisterApplicationMasterResponse response \u003d amRMClient\n        .registerApplicationMaster(bindAddress.getHostName(),\n            bindAddress.getPort(), \"N/A\");\n    if (response.getClientToAMTokenMasterKey() !\u003d null\n        \u0026\u0026 response.getClientToAMTokenMasterKey().remaining() !\u003d 0) {\n      context.secretManager\n          .setMasterKey(response.getClientToAMTokenMasterKey().array());\n    }\n    registerServiceInstance(context.attemptId, app);\n\n    //TODO handle containers recover\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}