{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TopCLI.java",
  "functionName": "getHeader",
  "functionId": "getHeader___queueMetrics-QueueMetrics__nodes-NodesInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
  "functionStartLine": 852,
  "functionEndLine": 918,
  "numCommitsSeen": 12,
  "timeTaken": 2341,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
    "ade7c2bc9ccf09d843ccb3dfa56c1453a9e87318",
    "154c9d2e421390c808dea3b2826cdaae492ea337",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": "Ybodychange",
    "ade7c2bc9ccf09d843ccb3dfa56c1453a9e87318": "Ybodychange",
    "154c9d2e421390c808dea3b2826cdaae492ea337": "Ybodychange",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "28/11/18 12:42 AM",
      "commitNameOld": "7dc272199ffea28c8597151e17d4606928a7f9f3",
      "commitAuthorOld": "Suma Shivaprasad",
      "daysBetweenCommits": 89.46,
      "commitsBetweenForRepo": 626,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,67 @@\n   String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n     StringBuilder ret \u003d new StringBuilder();\n     String queue \u003d \"root\";\n     if (!queues.isEmpty()) {\n       queue \u003d StringUtils.join(queues, \",\");\n     }\n     long now \u003d Time.now();\n     long uptime \u003d 0L;\n     if (rmStartTime !\u003d -1) {\n       uptime \u003d now - rmStartTime;\n     }\n     long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n     long hours \u003d\n         TimeUnit.MILLISECONDS.toHours(uptime)\n             - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n     long minutes \u003d\n         TimeUnit.MILLISECONDS.toMinutes(uptime)\n             - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n     String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n     String currentTime \u003d DateFormatUtils.ISO_8601_EXTENDED_TIME_FORMAT\n         .format(now);\n \n-    ret.append(CLEAR_LINE);\n-    ret.append(limitLineLength(String.format(\n-      \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n-      uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n+    ret.append(CLEAR_LINE)\n+        .append(limitLineLength(String.format(\n+            \"YARN top - %s, up %s, %d active users, queue(s): %s%n\",\n+            currentTime, uptimeStr, queueMetrics.activeUsers, queue),\n+            terminalWidth, true));\n \n-    ret.append(CLEAR_LINE);\n-    ret.append(limitLineLength(String.format(\n-      \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n-          + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n-      nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n-      nodes.rebootedNodes), terminalWidth, true));\n+    ret.append(CLEAR_LINE)\n+        .append(limitLineLength(String.format(\n+            \"NodeManager(s)\"\n+                + \": %d total, %d active, %d unhealthy, %d decommissioned,\"\n+                + \" %d lost, %d rebooted%n\",\n+            nodes.totalNodes, nodes.runningNodes, nodes.unhealthyNodes,\n+            nodes.decommissionedNodes, nodes.lostNodes,\n+            nodes.rebootedNodes), terminalWidth, true));\n \n-    ret.append(CLEAR_LINE);\n-    ret.append(limitLineLength(String.format(\n-        \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n-            + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n-        queueMetrics.appsSubmitted, queueMetrics.appsPending,\n-        queueMetrics.appsCompleted, queueMetrics.appsKilled,\n-        queueMetrics.appsFailed), terminalWidth, true));\n+    ret.append(CLEAR_LINE)\n+        .append(limitLineLength(String.format(\n+            \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n+                + \" %d completed, %d killed, %d failed%n\",\n+            queueMetrics.appsRunning, queueMetrics.appsSubmitted,\n+            queueMetrics.appsPending, queueMetrics.appsCompleted,\n+            queueMetrics.appsKilled, queueMetrics.appsFailed), terminalWidth,\n+            true));\n \n-    ret.append(CLEAR_LINE);\n-    ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n-        + \" %d allocated, %d pending, %d reserved%n\",\n-      queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n-      queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n-      terminalWidth, true));\n+    ret.append(CLEAR_LINE)\n+        .append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n+            + \" %d allocated, %d pending, %d reserved%n\",\n+            queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n+            queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n+            terminalWidth, true));\n \n-    ret.append(CLEAR_LINE);\n-    ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n-        + \" %d allocated, %d pending, %d reserved%n\",\n-      queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n-      queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n-      true));\n+    ret.append(CLEAR_LINE)\n+        .append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n+            + \" %d allocated, %d pending, %d reserved%n\",\n+            queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n+            queueMetrics.pendingVCores, queueMetrics.reservedVCores),\n+            terminalWidth, true));\n \n-    ret.append(CLEAR_LINE);\n-    ret.append(limitLineLength(String.format(\n-        \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n+    ret.append(CLEAR_LINE)\n+        .append(limitLineLength(String.format(\n+            \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n             queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n             queueMetrics.reservedContainers), terminalWidth, true));\n     return ret.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n    StringBuilder ret \u003d new StringBuilder();\n    String queue \u003d \"root\";\n    if (!queues.isEmpty()) {\n      queue \u003d StringUtils.join(queues, \",\");\n    }\n    long now \u003d Time.now();\n    long uptime \u003d 0L;\n    if (rmStartTime !\u003d -1) {\n      uptime \u003d now - rmStartTime;\n    }\n    long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n    long hours \u003d\n        TimeUnit.MILLISECONDS.toHours(uptime)\n            - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n    long minutes \u003d\n        TimeUnit.MILLISECONDS.toMinutes(uptime)\n            - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n    String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n    String currentTime \u003d DateFormatUtils.ISO_8601_EXTENDED_TIME_FORMAT\n        .format(now);\n\n    ret.append(CLEAR_LINE)\n        .append(limitLineLength(String.format(\n            \"YARN top - %s, up %s, %d active users, queue(s): %s%n\",\n            currentTime, uptimeStr, queueMetrics.activeUsers, queue),\n            terminalWidth, true));\n\n    ret.append(CLEAR_LINE)\n        .append(limitLineLength(String.format(\n            \"NodeManager(s)\"\n                + \": %d total, %d active, %d unhealthy, %d decommissioned,\"\n                + \" %d lost, %d rebooted%n\",\n            nodes.totalNodes, nodes.runningNodes, nodes.unhealthyNodes,\n            nodes.decommissionedNodes, nodes.lostNodes,\n            nodes.rebootedNodes), terminalWidth, true));\n\n    ret.append(CLEAR_LINE)\n        .append(limitLineLength(String.format(\n            \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n                + \" %d completed, %d killed, %d failed%n\",\n            queueMetrics.appsRunning, queueMetrics.appsSubmitted,\n            queueMetrics.appsPending, queueMetrics.appsCompleted,\n            queueMetrics.appsKilled, queueMetrics.appsFailed), terminalWidth,\n            true));\n\n    ret.append(CLEAR_LINE)\n        .append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n            + \" %d allocated, %d pending, %d reserved%n\",\n            queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n            queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n            terminalWidth, true));\n\n    ret.append(CLEAR_LINE)\n        .append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n            + \" %d allocated, %d pending, %d reserved%n\",\n            queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n            queueMetrics.pendingVCores, queueMetrics.reservedVCores),\n            terminalWidth, true));\n\n    ret.append(CLEAR_LINE)\n        .append(limitLineLength(String.format(\n            \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n            queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n            queueMetrics.reservedContainers), terminalWidth, true));\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
      "extendedDetails": {}
    },
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15531. Use commons-text instead of commons-lang in some classes to fix deprecation warnings. Contributed by Takanobu Asanuma.\n",
      "commitDate": "13/07/18 8:42 AM",
      "commitName": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 31.0,
      "commitsBetweenForRepo": 191,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,63 @@\n   String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n     StringBuilder ret \u003d new StringBuilder();\n     String queue \u003d \"root\";\n     if (!queues.isEmpty()) {\n       queue \u003d StringUtils.join(queues, \",\");\n     }\n     long now \u003d Time.now();\n     long uptime \u003d 0L;\n     if (rmStartTime !\u003d -1) {\n       uptime \u003d now - rmStartTime;\n     }\n     long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n     long hours \u003d\n         TimeUnit.MILLISECONDS.toHours(uptime)\n             - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n     long minutes \u003d\n         TimeUnit.MILLISECONDS.toMinutes(uptime)\n             - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n     String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n-    String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n+    String currentTime \u003d DateFormatUtils.ISO_8601_EXTENDED_TIME_FORMAT\n+        .format(now);\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n       \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n       uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n       \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n           + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n       nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n       nodes.rebootedNodes), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n         \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n             + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n         queueMetrics.appsSubmitted, queueMetrics.appsPending,\n         queueMetrics.appsCompleted, queueMetrics.appsKilled,\n         queueMetrics.appsFailed), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n         + \" %d allocated, %d pending, %d reserved%n\",\n       queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n       queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n       terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n         + \" %d allocated, %d pending, %d reserved%n\",\n       queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n       queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n       true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n         \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n             queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n             queueMetrics.reservedContainers), terminalWidth, true));\n     return ret.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n    StringBuilder ret \u003d new StringBuilder();\n    String queue \u003d \"root\";\n    if (!queues.isEmpty()) {\n      queue \u003d StringUtils.join(queues, \",\");\n    }\n    long now \u003d Time.now();\n    long uptime \u003d 0L;\n    if (rmStartTime !\u003d -1) {\n      uptime \u003d now - rmStartTime;\n    }\n    long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n    long hours \u003d\n        TimeUnit.MILLISECONDS.toHours(uptime)\n            - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n    long minutes \u003d\n        TimeUnit.MILLISECONDS.toMinutes(uptime)\n            - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n    String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n    String currentTime \u003d DateFormatUtils.ISO_8601_EXTENDED_TIME_FORMAT\n        .format(now);\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n      uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n          + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n      nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n      nodes.rebootedNodes), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n            + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n        queueMetrics.appsSubmitted, queueMetrics.appsPending,\n        queueMetrics.appsCompleted, queueMetrics.appsKilled,\n        queueMetrics.appsFailed), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n      queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n      terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n      queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n      true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n            queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n            queueMetrics.reservedContainers), terminalWidth, true));\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
      "extendedDetails": {}
    },
    "ade7c2bc9ccf09d843ccb3dfa56c1453a9e87318": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4232. TopCLI console support for HA mode. Contributed by Bibin A Chundatt\n",
      "commitDate": "16/09/16 9:22 PM",
      "commitName": "ade7c2bc9ccf09d843ccb3dfa56c1453a9e87318",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 110.52,
      "commitsBetweenForRepo": 835,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,62 @@\n   String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n     StringBuilder ret \u003d new StringBuilder();\n     String queue \u003d \"root\";\n     if (!queues.isEmpty()) {\n       queue \u003d StringUtils.join(queues, \",\");\n     }\n     long now \u003d Time.now();\n-    long uptime \u003d now - rmStartTime;\n+    long uptime \u003d 0L;\n+    if (rmStartTime !\u003d -1) {\n+      uptime \u003d now - rmStartTime;\n+    }\n     long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n     long hours \u003d\n         TimeUnit.MILLISECONDS.toHours(uptime)\n             - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n     long minutes \u003d\n         TimeUnit.MILLISECONDS.toMinutes(uptime)\n             - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n     String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n     String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n       \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n       uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n       \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n           + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n       nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n       nodes.rebootedNodes), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n         \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n             + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n         queueMetrics.appsSubmitted, queueMetrics.appsPending,\n         queueMetrics.appsCompleted, queueMetrics.appsKilled,\n         queueMetrics.appsFailed), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n         + \" %d allocated, %d pending, %d reserved%n\",\n       queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n       queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n       terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n         + \" %d allocated, %d pending, %d reserved%n\",\n       queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n       queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n       true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n         \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n             queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n             queueMetrics.reservedContainers), terminalWidth, true));\n     return ret.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n    StringBuilder ret \u003d new StringBuilder();\n    String queue \u003d \"root\";\n    if (!queues.isEmpty()) {\n      queue \u003d StringUtils.join(queues, \",\");\n    }\n    long now \u003d Time.now();\n    long uptime \u003d 0L;\n    if (rmStartTime !\u003d -1) {\n      uptime \u003d now - rmStartTime;\n    }\n    long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n    long hours \u003d\n        TimeUnit.MILLISECONDS.toHours(uptime)\n            - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n    long minutes \u003d\n        TimeUnit.MILLISECONDS.toMinutes(uptime)\n            - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n    String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n    String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n      uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n          + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n      nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n      nodes.rebootedNodes), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n            + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n        queueMetrics.appsSubmitted, queueMetrics.appsPending,\n        queueMetrics.appsCompleted, queueMetrics.appsKilled,\n        queueMetrics.appsFailed), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n      queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n      terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n      queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n      true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n            queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n            queueMetrics.reservedContainers), terminalWidth, true));\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
      "extendedDetails": {}
    },
    "154c9d2e421390c808dea3b2826cdaae492ea337": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3961. Expose pending, running and reserved containers of a queue in REST api and yarn top (adhoot via asuresh)\n",
      "commitDate": "05/08/15 11:14 PM",
      "commitName": "154c9d2e421390c808dea3b2826cdaae492ea337",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "10/04/15 9:57 AM",
      "commitNameOld": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 117.55,
      "commitsBetweenForRepo": 914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,59 @@\n   String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n     StringBuilder ret \u003d new StringBuilder();\n     String queue \u003d \"root\";\n     if (!queues.isEmpty()) {\n       queue \u003d StringUtils.join(queues, \",\");\n     }\n     long now \u003d Time.now();\n     long uptime \u003d now - rmStartTime;\n     long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n     long hours \u003d\n         TimeUnit.MILLISECONDS.toHours(uptime)\n             - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n     long minutes \u003d\n         TimeUnit.MILLISECONDS.toMinutes(uptime)\n             - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n     String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n     String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n       \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n       uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n       \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n           + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n       nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n       nodes.rebootedNodes), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\n         \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n             + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n         queueMetrics.appsSubmitted, queueMetrics.appsPending,\n         queueMetrics.appsCompleted, queueMetrics.appsKilled,\n         queueMetrics.appsFailed), terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n         + \" %d allocated, %d pending, %d reserved%n\",\n       queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n       queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n       terminalWidth, true));\n \n     ret.append(CLEAR_LINE);\n     ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n         + \" %d allocated, %d pending, %d reserved%n\",\n       queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n       queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n       true));\n+\n+    ret.append(CLEAR_LINE);\n+    ret.append(limitLineLength(String.format(\n+        \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n+            queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n+            queueMetrics.reservedContainers), terminalWidth, true));\n     return ret.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n    StringBuilder ret \u003d new StringBuilder();\n    String queue \u003d \"root\";\n    if (!queues.isEmpty()) {\n      queue \u003d StringUtils.join(queues, \",\");\n    }\n    long now \u003d Time.now();\n    long uptime \u003d now - rmStartTime;\n    long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n    long hours \u003d\n        TimeUnit.MILLISECONDS.toHours(uptime)\n            - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n    long minutes \u003d\n        TimeUnit.MILLISECONDS.toMinutes(uptime)\n            - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n    String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n    String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n      uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n          + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n      nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n      nodes.rebootedNodes), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n            + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n        queueMetrics.appsSubmitted, queueMetrics.appsPending,\n        queueMetrics.appsCompleted, queueMetrics.appsKilled,\n        queueMetrics.appsFailed), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n      queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n      terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n      queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n      true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\",\n            queueMetrics.allocatedContainers, queueMetrics.pendingContainers,\n            queueMetrics.reservedContainers), terminalWidth, true));\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
      "extendedDetails": {}
    },
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3348. Add a \u0027yarn top\u0027 tool to help understand cluster usage. Contributed by Varun Vasudev\n",
      "commitDate": "10/04/15 9:57 AM",
      "commitName": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,53 @@\n+  String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n+    StringBuilder ret \u003d new StringBuilder();\n+    String queue \u003d \"root\";\n+    if (!queues.isEmpty()) {\n+      queue \u003d StringUtils.join(queues, \",\");\n+    }\n+    long now \u003d Time.now();\n+    long uptime \u003d now - rmStartTime;\n+    long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n+    long hours \u003d\n+        TimeUnit.MILLISECONDS.toHours(uptime)\n+            - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n+    long minutes \u003d\n+        TimeUnit.MILLISECONDS.toMinutes(uptime)\n+            - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n+    String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n+    String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n+\n+    ret.append(CLEAR_LINE);\n+    ret.append(limitLineLength(String.format(\n+      \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n+      uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n+\n+    ret.append(CLEAR_LINE);\n+    ret.append(limitLineLength(String.format(\n+      \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n+          + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n+      nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n+      nodes.rebootedNodes), terminalWidth, true));\n+\n+    ret.append(CLEAR_LINE);\n+    ret.append(limitLineLength(String.format(\n+        \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n+            + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n+        queueMetrics.appsSubmitted, queueMetrics.appsPending,\n+        queueMetrics.appsCompleted, queueMetrics.appsKilled,\n+        queueMetrics.appsFailed), terminalWidth, true));\n+\n+    ret.append(CLEAR_LINE);\n+    ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n+        + \" %d allocated, %d pending, %d reserved%n\",\n+      queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n+      queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n+      terminalWidth, true));\n+\n+    ret.append(CLEAR_LINE);\n+    ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n+        + \" %d allocated, %d pending, %d reserved%n\",\n+      queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n+      queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n+      true));\n+    return ret.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  String getHeader(QueueMetrics queueMetrics, NodesInformation nodes) {\n    StringBuilder ret \u003d new StringBuilder();\n    String queue \u003d \"root\";\n    if (!queues.isEmpty()) {\n      queue \u003d StringUtils.join(queues, \",\");\n    }\n    long now \u003d Time.now();\n    long uptime \u003d now - rmStartTime;\n    long days \u003d TimeUnit.MILLISECONDS.toDays(uptime);\n    long hours \u003d\n        TimeUnit.MILLISECONDS.toHours(uptime)\n            - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\n    long minutes \u003d\n        TimeUnit.MILLISECONDS.toMinutes(uptime)\n            - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\n    String uptimeStr \u003d String.format(\"%dd, %d:%d\", days, hours, minutes);\n    String currentTime \u003d DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(now);\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime,\n      uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n      \"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,\"\n          + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes,\n      nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes,\n      nodes.rebootedNodes), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\n        \"Queue(s) Applications: %d running, %d submitted, %d pending,\"\n            + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning,\n        queueMetrics.appsSubmitted, queueMetrics.appsPending,\n        queueMetrics.appsCompleted, queueMetrics.appsKilled,\n        queueMetrics.appsFailed), terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB,\n      queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB),\n      terminalWidth, true));\n\n    ret.append(CLEAR_LINE);\n    ret.append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\"\n        + \" %d allocated, %d pending, %d reserved%n\",\n      queueMetrics.availableVCores, queueMetrics.allocatedVCores,\n      queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth,\n      true));\n    return ret.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java"
    }
  }
}