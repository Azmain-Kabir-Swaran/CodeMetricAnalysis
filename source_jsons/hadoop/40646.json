{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintsUtil.java",
  "functionName": "canSatisfySingleConstraintExpression",
  "functionId": "canSatisfySingleConstraintExpression___targetApplicationId-ApplicationId__sc-SingleConstraint__te-TargetExpression__node-SchedulerNode__tm-AllocationTagsManager",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
  "functionStartLine": 74,
  "functionEndLine": 116,
  "numCommitsSeen": 22,
  "timeTaken": 4571,
  "changeHistory": [
    "9b0955545174abe16fd81240db30f175145ee89b",
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
    "a08921ca6cb1dad98935808c8f474b654f861263",
    "1054b48c27f3158110bd0512afecded36eecb8ad",
    "28fe7f331837b36e78fa34ed990993677dddeaee",
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "29d9e4d5814900d5c59d77fe05d32186d4ad9385",
    "bdba01f73b58d2228e808c6f61377f101b6bac1c"
  ],
  "changeHistoryShort": {
    "9b0955545174abe16fd81240db30f175145ee89b": "Ybodychange",
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": "Ybodychange",
    "a08921ca6cb1dad98935808c8f474b654f861263": "Ybodychange",
    "1054b48c27f3158110bd0512afecded36eecb8ad": "Ybodychange",
    "28fe7f331837b36e78fa34ed990993677dddeaee": "Ybodychange",
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ymultichange(Yparameterchange,Ybodychange)",
    "29d9e4d5814900d5c59d77fe05d32186d4ad9385": "Ybodychange",
    "bdba01f73b58d2228e808c6f61377f101b6bac1c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9b0955545174abe16fd81240db30f175145ee89b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8195. Fix constraint cardinality check in the presence of multiple target allocation tags. Contributed by Weiwei Yang.\n",
      "commitDate": "30/04/18 11:54 AM",
      "commitName": "9b0955545174abe16fd81240db30f175145ee89b",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "04/04/18 10:51 AM",
      "commitNameOld": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 26.04,
      "commitsBetweenForRepo": 680,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private static boolean canSatisfySingleConstraintExpression(\n       ApplicationId targetApplicationId, SingleConstraint sc,\n       TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n     // Creates AllocationTags that will be further consumed by allocation\n     // tags manager for cardinality check.\n     AllocationTags allocationTags \u003d AllocationTags.createAllocationTags(\n         targetApplicationId, te.getTargetKey(), te.getTargetValues());\n \n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n \n     // Optimizations to only check cardinality if necessary.\n     int desiredMinCardinality \u003d sc.getMinCardinality();\n     int desiredMaxCardinality \u003d sc.getMaxCardinality();\n     boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n     boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n \n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n-            allocationTags, Long::max);\n+            allocationTags, Long::min);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n-            allocationTags, Long::min);\n+            allocationTags, Long::max);\n       }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n-            allocationTags, Long::max);\n+            allocationTags, Long::min);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n-            allocationTags, Long::min);\n+            allocationTags, Long::max);\n       }\n     }\n \n     return (desiredMinCardinality \u003c\u003d 0\n         || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n         desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n             || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    // Creates AllocationTags that will be further consumed by allocation\n    // tags manager for cardinality check.\n    AllocationTags allocationTags \u003d AllocationTags.createAllocationTags(\n        targetApplicationId, te.getTargetKey(), te.getTargetValues());\n\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n\n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            allocationTags, Long::min);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            allocationTags, Long::max);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            allocationTags, Long::min);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            allocationTags, Long::max);\n      }\n    }\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
      "commitDate": "04/04/18 10:51 AM",
      "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "19/03/18 11:04 AM",
      "commitNameOld": "a08921ca6cb1dad98935808c8f474b654f861263",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.99,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,43 @@\n   private static boolean canSatisfySingleConstraintExpression(\n       ApplicationId targetApplicationId, SingleConstraint sc,\n       TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n-    // Parse the allocation tag\u0027s namespace from the given target key,\n-    // then evaluate the namespace and get its scope,\n-    // which is represented by one or more application IDs.\n-    AllocationTagNamespace namespace \u003d getAllocationTagNamespace(\n-          targetApplicationId, te.getTargetKey(), tm);\n-    AllocationTags allocationTags \u003d AllocationTags\n-        .newAllocationTags(namespace, te.getTargetValues());\n+    // Creates AllocationTags that will be further consumed by allocation\n+    // tags manager for cardinality check.\n+    AllocationTags allocationTags \u003d AllocationTags.createAllocationTags(\n+        targetApplicationId, te.getTargetKey(), te.getTargetValues());\n \n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n \n     // Optimizations to only check cardinality if necessary.\n     int desiredMinCardinality \u003d sc.getMinCardinality();\n     int desiredMaxCardinality \u003d sc.getMaxCardinality();\n     boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n     boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n \n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n             allocationTags, Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n             allocationTags, Long::min);\n       }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n             allocationTags, Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n             allocationTags, Long::min);\n       }\n     }\n \n     return (desiredMinCardinality \u003c\u003d 0\n         || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n         desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n             || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    // Creates AllocationTags that will be further consumed by allocation\n    // tags manager for cardinality check.\n    AllocationTags allocationTags \u003d AllocationTags.createAllocationTags(\n        targetApplicationId, te.getTargetKey(), te.getTargetValues());\n\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n\n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            allocationTags, Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            allocationTags, Long::min);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            allocationTags, Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            allocationTags, Long::min);\n      }\n    }\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "a08921ca6cb1dad98935808c8f474b654f861263": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
      "commitDate": "19/03/18 11:04 AM",
      "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/03/18 11:24 AM",
      "commitNameOld": "1054b48c27f3158110bd0512afecded36eecb8ad",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 13.94,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,46 @@\n   private static boolean canSatisfySingleConstraintExpression(\n       ApplicationId targetApplicationId, SingleConstraint sc,\n       TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n     // Parse the allocation tag\u0027s namespace from the given target key,\n     // then evaluate the namespace and get its scope,\n     // which is represented by one or more application IDs.\n-    ApplicationId effectiveAppID;\n-    try {\n-      AllocationTagNamespace namespace \u003d getAllocationTagNamespace(\n+    AllocationTagNamespace namespace \u003d getAllocationTagNamespace(\n           targetApplicationId, te.getTargetKey(), tm);\n-      effectiveAppID \u003d getNamespaceScope(namespace);\n-    } catch (InvalidAllocationTagException e) {\n-      throw new InvalidAllocationTagsQueryException(e);\n-    }\n+    AllocationTags allocationTags \u003d AllocationTags\n+        .newAllocationTags(namespace, te.getTargetValues());\n \n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n \n     // Optimizations to only check cardinality if necessary.\n     int desiredMinCardinality \u003d sc.getMinCardinality();\n     int desiredMaxCardinality \u003d sc.getMaxCardinality();\n     boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n     boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n \n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n-            effectiveAppID, te.getTargetValues(), Long::max);\n+            allocationTags, Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n-            effectiveAppID, te.getTargetValues(), Long::min);\n+            allocationTags, Long::min);\n       }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n-            effectiveAppID, te.getTargetValues(), Long::max);\n+            allocationTags, Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n-            effectiveAppID, te.getTargetValues(), Long::min);\n+            allocationTags, Long::min);\n       }\n     }\n \n     return (desiredMinCardinality \u003c\u003d 0\n         || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n         desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n             || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    // Parse the allocation tag\u0027s namespace from the given target key,\n    // then evaluate the namespace and get its scope,\n    // which is represented by one or more application IDs.\n    AllocationTagNamespace namespace \u003d getAllocationTagNamespace(\n          targetApplicationId, te.getTargetKey(), tm);\n    AllocationTags allocationTags \u003d AllocationTags\n        .newAllocationTags(namespace, te.getTargetValues());\n\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n\n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            allocationTags, Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            allocationTags, Long::min);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            allocationTags, Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            allocationTags, Long::min);\n      }\n    }\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "1054b48c27f3158110bd0512afecded36eecb8ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7972. Support inter-app placement constraints for allocation tags by application ID. (Weiwei Yang via asuresh)\n",
      "commitDate": "05/03/18 11:24 AM",
      "commitName": "1054b48c27f3158110bd0512afecded36eecb8ad",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "02/02/18 2:46 PM",
      "commitNameOld": "50723889cc29e8dadfa6ab6afbb90ac798d66878",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 30.86,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,50 @@\n   private static boolean canSatisfySingleConstraintExpression(\n       ApplicationId targetApplicationId, SingleConstraint sc,\n       TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n+    // Parse the allocation tag\u0027s namespace from the given target key,\n+    // then evaluate the namespace and get its scope,\n+    // which is represented by one or more application IDs.\n+    ApplicationId effectiveAppID;\n+    try {\n+      AllocationTagNamespace namespace \u003d getAllocationTagNamespace(\n+          targetApplicationId, te.getTargetKey(), tm);\n+      effectiveAppID \u003d getNamespaceScope(namespace);\n+    } catch (InvalidAllocationTagException e) {\n+      throw new InvalidAllocationTagsQueryException(e);\n+    }\n+\n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n \n     // Optimizations to only check cardinality if necessary.\n     int desiredMinCardinality \u003d sc.getMinCardinality();\n     int desiredMaxCardinality \u003d sc.getMaxCardinality();\n     boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n     boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n \n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n-            targetApplicationId, te.getTargetValues(), Long::max);\n+            effectiveAppID, te.getTargetValues(), Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n-            targetApplicationId, te.getTargetValues(), Long::min);\n+            effectiveAppID, te.getTargetValues(), Long::min);\n       }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n-            targetApplicationId, te.getTargetValues(), Long::max);\n+            effectiveAppID, te.getTargetValues(), Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n-            targetApplicationId, te.getTargetValues(), Long::min);\n+            effectiveAppID, te.getTargetValues(), Long::min);\n       }\n     }\n \n     return (desiredMinCardinality \u003c\u003d 0\n         || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n         desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n             || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    // Parse the allocation tag\u0027s namespace from the given target key,\n    // then evaluate the namespace and get its scope,\n    // which is represented by one or more application IDs.\n    ApplicationId effectiveAppID;\n    try {\n      AllocationTagNamespace namespace \u003d getAllocationTagNamespace(\n          targetApplicationId, te.getTargetKey(), tm);\n      effectiveAppID \u003d getNamespaceScope(namespace);\n    } catch (InvalidAllocationTagException e) {\n      throw new InvalidAllocationTagsQueryException(e);\n    }\n\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n\n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            effectiveAppID, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            effectiveAppID, te.getTargetValues(), Long::min);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            effectiveAppID, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            effectiveAppID, te.getTargetValues(), Long::min);\n      }\n    }\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "28fe7f331837b36e78fa34ed990993677dddeaee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7774. Miscellaneous fixes to the PlacementProcessor. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "28fe7f331837b36e78fa34ed990993677dddeaee",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   private static boolean canSatisfySingleConstraintExpression(\n       ApplicationId targetApplicationId, SingleConstraint sc,\n       TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n     \n     // Optimizations to only check cardinality if necessary.\n     int desiredMinCardinality \u003d sc.getMinCardinality();\n     int desiredMaxCardinality \u003d sc.getMaxCardinality();\n     boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n     boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n \n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n             targetApplicationId, te.getTargetValues(), Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n             targetApplicationId, te.getTargetValues(), Long::min);\n       }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n       if (checkMinCardinality) {\n         minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n             targetApplicationId, te.getTargetValues(), Long::max);\n       }\n       if (checkMaxCardinality) {\n         maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n             targetApplicationId, te.getTargetValues(), Long::min);\n       }\n     }\n-    // Make sure Anti-affinity satisfies hard upper limit\n-    maxScopeCardinality \u003d desiredMaxCardinality \u003d\u003d 0 ? maxScopeCardinality - 1\n-        : maxScopeCardinality;\n \n     return (desiredMinCardinality \u003c\u003d 0\n         || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n         desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n-            || maxScopeCardinality \u003c desiredMaxCardinality);\n+            || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n    \n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            targetApplicationId, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            targetApplicationId, te.getTargetValues(), Long::min);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            targetApplicationId, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            targetApplicationId, te.getTargetValues(), Long::min);\n      }\n    }\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c\u003d desiredMaxCardinality);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8779a35742085fadddccc21342b55d4f17fae5c2",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,41 @@\n   private static boolean canSatisfySingleConstraintExpression(\n-      ApplicationId appId, SingleConstraint sc, TargetExpression te,\n-      SchedulerNode node, AllocationTagsManager tm)\n+      ApplicationId targetApplicationId, SingleConstraint sc,\n+      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n+    \n+    // Optimizations to only check cardinality if necessary.\n+    int desiredMinCardinality \u003d sc.getMinCardinality();\n+    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n+    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n+    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n+\n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n-      minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n-          te.getTargetValues(), Long::max);\n-      maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n-          te.getTargetValues(), Long::min);\n+      if (checkMinCardinality) {\n+        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n+            targetApplicationId, te.getTargetValues(), Long::max);\n+      }\n+      if (checkMaxCardinality) {\n+        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n+            targetApplicationId, te.getTargetValues(), Long::min);\n+      }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n-      minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n-          te.getTargetValues(), Long::max);\n-      maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n-          te.getTargetValues(), Long::min);\n+      if (checkMinCardinality) {\n+        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n+            targetApplicationId, te.getTargetValues(), Long::max);\n+      }\n+      if (checkMaxCardinality) {\n+        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n+            targetApplicationId, te.getTargetValues(), Long::min);\n+      }\n     }\n     // Make sure Anti-affinity satisfies hard upper limit\n-    maxScopeCardinality \u003d sc.getMaxCardinality() \u003d\u003d 0 ? maxScopeCardinality - 1\n+    maxScopeCardinality \u003d desiredMaxCardinality \u003d\u003d 0 ? maxScopeCardinality - 1\n         : maxScopeCardinality;\n \n-    return (minScopeCardinality \u003e\u003d sc.getMinCardinality()\n-        \u0026\u0026 maxScopeCardinality \u003c sc.getMaxCardinality());\n+    return (desiredMinCardinality \u003c\u003d 0\n+        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n+        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n+            || maxScopeCardinality \u003c desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n    \n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            targetApplicationId, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            targetApplicationId, te.getTargetValues(), Long::min);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            targetApplicationId, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            targetApplicationId, te.getTargetValues(), Long::min);\n      }\n    }\n    // Make sure Anti-affinity satisfies hard upper limit\n    maxScopeCardinality \u003d desiredMaxCardinality \u003d\u003d 0 ? maxScopeCardinality - 1\n        : maxScopeCardinality;\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c desiredMaxCardinality);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, sc-SingleConstraint, te-TargetExpression, node-SchedulerNode, tm-AllocationTagsManager]",
            "newValue": "[targetApplicationId-ApplicationId, sc-SingleConstraint, te-TargetExpression, node-SchedulerNode, tm-AllocationTagsManager]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "8779a35742085fadddccc21342b55d4f17fae5c2",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,41 @@\n   private static boolean canSatisfySingleConstraintExpression(\n-      ApplicationId appId, SingleConstraint sc, TargetExpression te,\n-      SchedulerNode node, AllocationTagsManager tm)\n+      ApplicationId targetApplicationId, SingleConstraint sc,\n+      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n+    \n+    // Optimizations to only check cardinality if necessary.\n+    int desiredMinCardinality \u003d sc.getMinCardinality();\n+    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n+    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n+    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n+\n     if (sc.getScope().equals(PlacementConstraints.NODE)) {\n-      minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n-          te.getTargetValues(), Long::max);\n-      maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n-          te.getTargetValues(), Long::min);\n+      if (checkMinCardinality) {\n+        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n+            targetApplicationId, te.getTargetValues(), Long::max);\n+      }\n+      if (checkMaxCardinality) {\n+        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n+            targetApplicationId, te.getTargetValues(), Long::min);\n+      }\n     } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n-      minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n-          te.getTargetValues(), Long::max);\n-      maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n-          te.getTargetValues(), Long::min);\n+      if (checkMinCardinality) {\n+        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n+            targetApplicationId, te.getTargetValues(), Long::max);\n+      }\n+      if (checkMaxCardinality) {\n+        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n+            targetApplicationId, te.getTargetValues(), Long::min);\n+      }\n     }\n     // Make sure Anti-affinity satisfies hard upper limit\n-    maxScopeCardinality \u003d sc.getMaxCardinality() \u003d\u003d 0 ? maxScopeCardinality - 1\n+    maxScopeCardinality \u003d desiredMaxCardinality \u003d\u003d 0 ? maxScopeCardinality - 1\n         : maxScopeCardinality;\n \n-    return (minScopeCardinality \u003e\u003d sc.getMinCardinality()\n-        \u0026\u0026 maxScopeCardinality \u003c sc.getMaxCardinality());\n+    return (desiredMinCardinality \u003c\u003d 0\n+        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n+        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n+            || maxScopeCardinality \u003c desiredMaxCardinality);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId targetApplicationId, SingleConstraint sc,\n      TargetExpression te, SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n    \n    // Optimizations to only check cardinality if necessary.\n    int desiredMinCardinality \u003d sc.getMinCardinality();\n    int desiredMaxCardinality \u003d sc.getMaxCardinality();\n    boolean checkMinCardinality \u003d desiredMinCardinality \u003e 0;\n    boolean checkMaxCardinality \u003d desiredMaxCardinality \u003c Integer.MAX_VALUE;\n\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            targetApplicationId, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(),\n            targetApplicationId, te.getTargetValues(), Long::min);\n      }\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      if (checkMinCardinality) {\n        minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            targetApplicationId, te.getTargetValues(), Long::max);\n      }\n      if (checkMaxCardinality) {\n        maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(),\n            targetApplicationId, te.getTargetValues(), Long::min);\n      }\n    }\n    // Make sure Anti-affinity satisfies hard upper limit\n    maxScopeCardinality \u003d desiredMaxCardinality \u003d\u003d 0 ? maxScopeCardinality - 1\n        : maxScopeCardinality;\n\n    return (desiredMinCardinality \u003c\u003d 0\n        || minScopeCardinality \u003e\u003d desiredMinCardinality) \u0026\u0026 (\n        desiredMaxCardinality \u003d\u003d Integer.MAX_VALUE\n            || maxScopeCardinality \u003c desiredMaxCardinality);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "29d9e4d5814900d5c59d77fe05d32186d4ad9385": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6619. AMRMClient Changes to use the PlacementConstraint and SchcedulingRequest objects. (Arun Suresh via wangda)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "29d9e4d5814900d5c59d77fe05d32186d4ad9385",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "bdba01f73b58d2228e808c6f61377f101b6bac1c",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private static boolean canSatisfySingleConstraintExpression(\n       ApplicationId appId, SingleConstraint sc, TargetExpression te,\n       SchedulerNode node, AllocationTagsManager tm)\n       throws InvalidAllocationTagsQueryException {\n     long minScopeCardinality \u003d 0;\n     long maxScopeCardinality \u003d 0;\n-    if (sc.getScope() \u003d\u003d PlacementConstraints.NODE) {\n+    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n       minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n           te.getTargetValues(), Long::max);\n       maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n           te.getTargetValues(), Long::min);\n-    } else if (sc.getScope() \u003d\u003d PlacementConstraints.RACK) {\n+    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n       minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n           te.getTargetValues(), Long::max);\n       maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n           te.getTargetValues(), Long::min);\n     }\n     // Make sure Anti-affinity satisfies hard upper limit\n     maxScopeCardinality \u003d sc.getMaxCardinality() \u003d\u003d 0 ? maxScopeCardinality - 1\n         : maxScopeCardinality;\n \n     return (minScopeCardinality \u003e\u003d sc.getMinCardinality()\n         \u0026\u0026 maxScopeCardinality \u003c sc.getMaxCardinality());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId appId, SingleConstraint sc, TargetExpression te,\n      SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n    if (sc.getScope().equals(PlacementConstraints.NODE)) {\n      minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n          te.getTargetValues(), Long::max);\n      maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n          te.getTargetValues(), Long::min);\n    } else if (sc.getScope().equals(PlacementConstraints.RACK)) {\n      minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n          te.getTargetValues(), Long::max);\n      maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n          te.getTargetValues(), Long::min);\n    }\n    // Make sure Anti-affinity satisfies hard upper limit\n    maxScopeCardinality \u003d sc.getMaxCardinality() \u003d\u003d 0 ? maxScopeCardinality - 1\n        : maxScopeCardinality;\n\n    return (minScopeCardinality \u003e\u003d sc.getMinCardinality()\n        \u0026\u0026 maxScopeCardinality \u003c sc.getMaxCardinality());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "bdba01f73b58d2228e808c6f61377f101b6bac1c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7682. Expose canSatisfyConstraints utility function to validate a placement against a constraint. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "bdba01f73b58d2228e808c6f61377f101b6bac1c",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,24 @@\n+  private static boolean canSatisfySingleConstraintExpression(\n+      ApplicationId appId, SingleConstraint sc, TargetExpression te,\n+      SchedulerNode node, AllocationTagsManager tm)\n+      throws InvalidAllocationTagsQueryException {\n+    long minScopeCardinality \u003d 0;\n+    long maxScopeCardinality \u003d 0;\n+    if (sc.getScope() \u003d\u003d PlacementConstraints.NODE) {\n+      minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n+          te.getTargetValues(), Long::max);\n+      maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n+          te.getTargetValues(), Long::min);\n+    } else if (sc.getScope() \u003d\u003d PlacementConstraints.RACK) {\n+      minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n+          te.getTargetValues(), Long::max);\n+      maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n+          te.getTargetValues(), Long::min);\n+    }\n+    // Make sure Anti-affinity satisfies hard upper limit\n+    maxScopeCardinality \u003d sc.getMaxCardinality() \u003d\u003d 0 ? maxScopeCardinality - 1\n+        : maxScopeCardinality;\n+\n+    return (minScopeCardinality \u003e\u003d sc.getMinCardinality()\n+        \u0026\u0026 maxScopeCardinality \u003c sc.getMaxCardinality());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfySingleConstraintExpression(\n      ApplicationId appId, SingleConstraint sc, TargetExpression te,\n      SchedulerNode node, AllocationTagsManager tm)\n      throws InvalidAllocationTagsQueryException {\n    long minScopeCardinality \u003d 0;\n    long maxScopeCardinality \u003d 0;\n    if (sc.getScope() \u003d\u003d PlacementConstraints.NODE) {\n      minScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n          te.getTargetValues(), Long::max);\n      maxScopeCardinality \u003d tm.getNodeCardinalityByOp(node.getNodeID(), appId,\n          te.getTargetValues(), Long::min);\n    } else if (sc.getScope() \u003d\u003d PlacementConstraints.RACK) {\n      minScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n          te.getTargetValues(), Long::max);\n      maxScopeCardinality \u003d tm.getRackCardinalityByOp(node.getRackName(), appId,\n          te.getTargetValues(), Long::min);\n    }\n    // Make sure Anti-affinity satisfies hard upper limit\n    maxScopeCardinality \u003d sc.getMaxCardinality() \u003d\u003d 0 ? maxScopeCardinality - 1\n        : maxScopeCardinality;\n\n    return (minScopeCardinality \u003e\u003d sc.getMinCardinality()\n        \u0026\u0026 maxScopeCardinality \u003c sc.getMaxCardinality());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java"
    }
  }
}