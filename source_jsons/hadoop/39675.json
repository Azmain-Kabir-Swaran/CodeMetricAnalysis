{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "allocateResource",
  "functionId": "allocateResource___clusterResource-Resource__application-SchedulerApplicationAttempt__resource-Resource__nodePartition-String__rmContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1694,
  "functionEndLine": 1742,
  "numCommitsSeen": 722,
  "timeTaken": 18842,
  "changeHistory": [
    "c30c23cb665761e997bcfc1dc00908f70b069fa2",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "444b2ea7afebf9f6c3d356154b71abfd0ea95b23",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "dfd807afab0fae3839c9cc5d552aa0304444f956",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "86358221fc85a7743052a0b4c1647353508bf308",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
    "9c22065109a77681bc2534063eabe8692fbcb3cd",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "cc523683cfa76c1255667a3aedc48b08e5daabc7",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "c7007a8a3508a24a6f023302516fe8fbe270eab1",
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
    "4a343c9d4ab4c993b545f0c1062c6b5449b065f0",
    "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": "Ybodychange",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ymultichange(Yparameterchange,Ybodychange)",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "444b2ea7afebf9f6c3d356154b71abfd0ea95b23": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ymultichange(Yparameterchange,Ybodychange)",
    "dfd807afab0fae3839c9cc5d552aa0304444f956": "Ybodychange",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ymultichange(Yparameterchange,Ybodychange)",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "86358221fc85a7743052a0b4c1647353508bf308": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ymultichange(Yparameterchange,Ybodychange)",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": "Ybodychange",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Yparameterchange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "cc523683cfa76c1255667a3aedc48b08e5daabc7": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "c7007a8a3508a24a6f023302516fe8fbe270eab1": "Ybodychange",
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba": "Ybodychange",
    "4a343c9d4ab4c993b545f0c1062c6b5449b065f0": "Ybodychange",
    "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6492. Generate queue metrics for each partition. Contributed by Manikandan R\n",
      "commitDate": "26/05/20 4:29 PM",
      "commitName": "c30c23cb665761e997bcfc1dc00908f70b069fa2",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "14/05/20 4:22 AM",
      "commitNameOld": "6ce295b78737aca8103912121d54f318cb5d36ef",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 12.51,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer) {\n     writeLock.lock();\n     try {\n       super.allocateResource(clusterResource, resource, nodePartition);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n       // Increment user\u0027s resource usage.\n       User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n           nodePartition, true);\n \n-      // Note this is a bit unconventional since it gets the object and modifies\n-      // it here, rather then using set routine\n-      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n-      metrics.setAvailableResourcesToUser(nodePartition,\n-          userName, application.getHeadroom());\n+      Resource partitionHeadroom \u003d Resources.createResource(0, 0);\n+      if (metrics.getUserMetrics(userName) !\u003d null) {\n+        partitionHeadroom \u003d getHeadroom(user,\n+            cachedResourceLimitsForHeadroom.getLimit(), clusterResource,\n+            getResourceLimitForActiveUsers(userName, clusterResource,\n+                nodePartition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),\n+            nodePartition);\n+      }\n+      metrics.setAvailableResourcesToUser(nodePartition, userName,\n+          partitionHeadroom);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(getQueuePath() + \" user\u003d\" + userName + \" used\u003d\"\n             + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n             + numContainers + \" headroom \u003d \" + application.getHeadroom()\n             + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    writeLock.lock();\n    try {\n      super.allocateResource(clusterResource, resource, nodePartition);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      Resource partitionHeadroom \u003d Resources.createResource(0, 0);\n      if (metrics.getUserMetrics(userName) !\u003d null) {\n        partitionHeadroom \u003d getHeadroom(user,\n            cachedResourceLimitsForHeadroom.getLimit(), clusterResource,\n            getResourceLimitForActiveUsers(userName, clusterResource,\n                nodePartition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),\n            nodePartition);\n      }\n      metrics.setAvailableResourcesToUser(nodePartition, userName,\n          partitionHeadroom);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueuePath() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 7:54 PM",
      "commitNameOld": "e578e52aae01248507e089b406fe038ab8e84207",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer) {\n     writeLock.lock();\n     try {\n       super.allocateResource(clusterResource, resource, nodePartition);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n       // Increment user\u0027s resource usage.\n       User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n           nodePartition, true);\n \n       // Note this is a bit unconventional since it gets the object and modifies\n       // it here, rather then using set routine\n       Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n       metrics.setAvailableResourcesToUser(nodePartition,\n           userName, application.getHeadroom());\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n+        LOG.debug(getQueuePath() + \" user\u003d\" + userName + \" used\u003d\"\n             + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n             + numContainers + \" headroom \u003d \" + application.getHeadroom()\n             + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    writeLock.lock();\n    try {\n      super.allocateResource(clusterResource, resource, nodePartition);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(nodePartition,\n          userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueuePath() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       super.allocateResource(clusterResource, resource, nodePartition);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n       // Increment user\u0027s resource usage.\n       User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n           nodePartition, true);\n \n       // Note this is a bit unconventional since it gets the object and modifies\n       // it here, rather then using set routine\n       Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n       metrics.setAvailableResourcesToUser(nodePartition,\n           userName, application.getHeadroom());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n             + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n             + numContainers + \" headroom \u003d \" + application.getHeadroom()\n             + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    writeLock.lock();\n    try {\n      super.allocateResource(clusterResource, resource, nodePartition);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(nodePartition,\n          userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "22/05/17 2:26 PM",
      "commitNameOld": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 27.77,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer) {\n     try {\n       writeLock.lock();\n       super.allocateResource(clusterResource, resource, nodePartition);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n       // Increment user\u0027s resource usage.\n       User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n           nodePartition, true);\n \n       // Note this is a bit unconventional since it gets the object and modifies\n       // it here, rather then using set routine\n       Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n-      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n+      metrics.setAvailableResourcesToUser(nodePartition,\n+          userName, application.getHeadroom());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n             + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n             + numContainers + \" headroom \u003d \" + application.getHeadroom()\n             + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      super.allocateResource(clusterResource, resource, nodePartition);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(nodePartition,\n          userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 19.01,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      String nodePartition, RMContainer rmContainer,\n-      boolean isIncreasedAllocation) {\n+      String nodePartition, RMContainer rmContainer) {\n     try {\n       writeLock.lock();\n-      super.allocateResource(clusterResource, resource, nodePartition,\n-          isIncreasedAllocation);\n+      super.allocateResource(clusterResource, resource, nodePartition);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n       // Increment user\u0027s resource usage.\n       User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n           nodePartition, true);\n \n       // Note this is a bit unconventional since it gets the object and modifies\n       // it here, rather then using set routine\n       Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n       metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n             + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n             + numContainers + \" headroom \u003d \" + application.getHeadroom()\n             + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      super.allocateResource(clusterResource, resource, nodePartition);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String, rmContainer-RMContainer, isIncreasedAllocation-boolean]",
            "newValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String, rmContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 19.01,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      String nodePartition, RMContainer rmContainer,\n-      boolean isIncreasedAllocation) {\n+      String nodePartition, RMContainer rmContainer) {\n     try {\n       writeLock.lock();\n-      super.allocateResource(clusterResource, resource, nodePartition,\n-          isIncreasedAllocation);\n+      super.allocateResource(clusterResource, resource, nodePartition);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n       // Increment user\u0027s resource usage.\n       User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n           nodePartition, true);\n \n       // Note this is a bit unconventional since it gets the object and modifies\n       // it here, rather then using set routine\n       Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n       metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n             + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n             + numContainers + \" headroom \u003d \" + application.getHeadroom()\n             + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n      super.allocateResource(clusterResource, resource, nodePartition);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,45 @@\n   void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer,\n       boolean isIncreasedAllocation) {\n     try {\n       writeLock.lock();\n       super.allocateResource(clusterResource, resource, nodePartition,\n           isIncreasedAllocation);\n-      Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n-          clusterResource);\n \n       // handle ignore exclusivity container\n       if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n           RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n           RMNodeLabelsManager.NO_LABEL)) {\n         TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n         if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n             nodePartition))) {\n           rmContainers \u003d new TreeSet\u003c\u003e();\n           ignorePartitionExclusivityRMContainers.put(nodePartition,\n               rmContainers);\n         }\n         rmContainers.add(rmContainer);\n       }\n \n       // Update user metrics\n       String userName \u003d application.getUser();\n \n-      // TODO, should use getUser, use this method just to avoid UT failure\n-      // which is caused by wrong invoking order, will fix UT separately\n-      User user \u003d getUserAndAddIfAbsent(userName);\n-\n-      user.assignContainer(resource, nodePartition);\n-\n-      // Update usage ratios\n-      updateQueueUsageRatio(nodePartition,\n-          user.updateUsageRatio(resourceCalculator, resourceByLabel,\n-              nodePartition));\n+      // Increment user\u0027s resource usage.\n+      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n+          nodePartition, true);\n \n       // Note this is a bit unconventional since it gets the object and modifies\n       // it here, rather then using set routine\n       Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n       metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\" + queueUsage\n-            .getUsed() + \" numContainers\u003d\" + numContainers + \" headroom \u003d \"\n-            + application.getHeadroom() + \" user-resources\u003d\" + user.getUsed());\n+        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n+            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n+            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n+            + \" user-resources\u003d\" + user.getUsed());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer,\n      boolean isIncreasedAllocation) {\n    try {\n      writeLock.lock();\n      super.allocateResource(clusterResource, resource, nodePartition,\n          isIncreasedAllocation);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // Increment user\u0027s resource usage.\n      User user \u003d usersManager.updateUserResourceUsage(userName, resource,\n          nodePartition, true);\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\"\n            + queueUsage.getUsed(nodePartition) + \" numContainers\u003d\"\n            + numContainers + \" headroom \u003d \" + application.getHeadroom()\n            + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,53 @@\n-  synchronized void allocateResource(Resource clusterResource,\n+  void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer,\n       boolean isIncreasedAllocation) {\n-    super.allocateResource(clusterResource, resource, nodePartition,\n-        isIncreasedAllocation);\n-    Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n-        clusterResource);\n-    \n-    // handle ignore exclusivity container\n-    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n-        RMNodeLabelsManager.NO_LABEL)\n-        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n-      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n-      if (null \u003d\u003d (rmContainers \u003d\n-          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n-        rmContainers \u003d new TreeSet\u003c\u003e();\n-        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n+    try {\n+      writeLock.lock();\n+      super.allocateResource(clusterResource, resource, nodePartition,\n+          isIncreasedAllocation);\n+      Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n+          clusterResource);\n+\n+      // handle ignore exclusivity container\n+      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n+          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n+          RMNodeLabelsManager.NO_LABEL)) {\n+        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n+        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n+            nodePartition))) {\n+          rmContainers \u003d new TreeSet\u003c\u003e();\n+          ignorePartitionExclusivityRMContainers.put(nodePartition,\n+              rmContainers);\n+        }\n+        rmContainers.add(rmContainer);\n       }\n-      rmContainers.add(rmContainer);\n-    }\n \n-    // Update user metrics\n-    String userName \u003d application.getUser();\n-    User user \u003d getUser(userName);\n-    user.assignContainer(resource, nodePartition);\n+      // Update user metrics\n+      String userName \u003d application.getUser();\n \n-    // Update usage ratios\n-    updateQueueUsageRatio(nodePartition,\n-        user.updateUsageRatio(resourceCalculator, resourceByLabel,\n-            nodePartition));\n+      // TODO, should use getUser, use this method just to avoid UT failure\n+      // which is caused by wrong invoking order, will fix UT separately\n+      User user \u003d getUserAndAddIfAbsent(userName);\n \n-    // Note this is a bit unconventional since it gets the object and modifies\n-    // it here, rather then using set routine\n-    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n-    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n-    \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(getQueueName() +\n-          \" user\u003d\" + userName +\n-          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n-          \" headroom \u003d \" + application.getHeadroom() +\n-          \" user-resources\u003d\" + user.getUsed()\n-          );\n+      user.assignContainer(resource, nodePartition);\n+\n+      // Update usage ratios\n+      updateQueueUsageRatio(nodePartition,\n+          user.updateUsageRatio(resourceCalculator, resourceByLabel,\n+              nodePartition));\n+\n+      // Note this is a bit unconventional since it gets the object and modifies\n+      // it here, rather then using set routine\n+      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n+      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\" + queueUsage\n+            .getUsed() + \" numContainers\u003d\" + numContainers + \" headroom \u003d \"\n+            + application.getHeadroom() + \" user-resources\u003d\" + user.getUsed());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer,\n      boolean isIncreasedAllocation) {\n    try {\n      writeLock.lock();\n      super.allocateResource(clusterResource, resource, nodePartition,\n          isIncreasedAllocation);\n      Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n          clusterResource);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d getUserAndAddIfAbsent(userName);\n\n      user.assignContainer(resource, nodePartition);\n\n      // Update usage ratios\n      updateQueueUsageRatio(nodePartition,\n          user.updateUsageRatio(resourceCalculator, resourceByLabel,\n              nodePartition));\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\" + queueUsage\n            .getUsed() + \" numContainers\u003d\" + numContainers + \" headroom \u003d \"\n            + application.getHeadroom() + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,53 @@\n-  synchronized void allocateResource(Resource clusterResource,\n+  void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer,\n       boolean isIncreasedAllocation) {\n-    super.allocateResource(clusterResource, resource, nodePartition,\n-        isIncreasedAllocation);\n-    Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n-        clusterResource);\n-    \n-    // handle ignore exclusivity container\n-    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n-        RMNodeLabelsManager.NO_LABEL)\n-        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n-      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n-      if (null \u003d\u003d (rmContainers \u003d\n-          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n-        rmContainers \u003d new TreeSet\u003c\u003e();\n-        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n+    try {\n+      writeLock.lock();\n+      super.allocateResource(clusterResource, resource, nodePartition,\n+          isIncreasedAllocation);\n+      Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n+          clusterResource);\n+\n+      // handle ignore exclusivity container\n+      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n+          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n+          RMNodeLabelsManager.NO_LABEL)) {\n+        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n+        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n+            nodePartition))) {\n+          rmContainers \u003d new TreeSet\u003c\u003e();\n+          ignorePartitionExclusivityRMContainers.put(nodePartition,\n+              rmContainers);\n+        }\n+        rmContainers.add(rmContainer);\n       }\n-      rmContainers.add(rmContainer);\n-    }\n \n-    // Update user metrics\n-    String userName \u003d application.getUser();\n-    User user \u003d getUser(userName);\n-    user.assignContainer(resource, nodePartition);\n+      // Update user metrics\n+      String userName \u003d application.getUser();\n \n-    // Update usage ratios\n-    updateQueueUsageRatio(nodePartition,\n-        user.updateUsageRatio(resourceCalculator, resourceByLabel,\n-            nodePartition));\n+      // TODO, should use getUser, use this method just to avoid UT failure\n+      // which is caused by wrong invoking order, will fix UT separately\n+      User user \u003d getUserAndAddIfAbsent(userName);\n \n-    // Note this is a bit unconventional since it gets the object and modifies\n-    // it here, rather then using set routine\n-    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n-    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n-    \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(getQueueName() +\n-          \" user\u003d\" + userName +\n-          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n-          \" headroom \u003d \" + application.getHeadroom() +\n-          \" user-resources\u003d\" + user.getUsed()\n-          );\n+      user.assignContainer(resource, nodePartition);\n+\n+      // Update usage ratios\n+      updateQueueUsageRatio(nodePartition,\n+          user.updateUsageRatio(resourceCalculator, resourceByLabel,\n+              nodePartition));\n+\n+      // Note this is a bit unconventional since it gets the object and modifies\n+      // it here, rather then using set routine\n+      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n+      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\" + queueUsage\n+            .getUsed() + \" numContainers\u003d\" + numContainers + \" headroom \u003d \"\n+            + application.getHeadroom() + \" user-resources\u003d\" + user.getUsed());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer,\n      boolean isIncreasedAllocation) {\n    try {\n      writeLock.lock();\n      super.allocateResource(clusterResource, resource, nodePartition,\n          isIncreasedAllocation);\n      Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n          clusterResource);\n\n      // handle ignore exclusivity container\n      if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n          RMNodeLabelsManager.NO_LABEL) \u0026\u0026 !nodePartition.equals(\n          RMNodeLabelsManager.NO_LABEL)) {\n        TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n        if (null \u003d\u003d (rmContainers \u003d ignorePartitionExclusivityRMContainers.get(\n            nodePartition))) {\n          rmContainers \u003d new TreeSet\u003c\u003e();\n          ignorePartitionExclusivityRMContainers.put(nodePartition,\n              rmContainers);\n        }\n        rmContainers.add(rmContainer);\n      }\n\n      // Update user metrics\n      String userName \u003d application.getUser();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d getUserAndAddIfAbsent(userName);\n\n      user.assignContainer(resource, nodePartition);\n\n      // Update usage ratios\n      updateQueueUsageRatio(nodePartition,\n          user.updateUsageRatio(resourceCalculator, resourceByLabel,\n              nodePartition));\n\n      // Note this is a bit unconventional since it gets the object and modifies\n      // it here, rather then using set routine\n      Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n      metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(getQueueName() + \" user\u003d\" + userName + \" used\u003d\" + queueUsage\n            .getUsed() + \" numContainers\u003d\" + numContainers + \" headroom \u003d \"\n            + application.getHeadroom() + \" user-resources\u003d\" + user.getUsed());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "444b2ea7afebf9f6c3d356154b71abfd0ea95b23": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3388. Allocation in LeafQueue could get stuck because DRF calculator isn\u0027t well supported when computing user-limit. (Nathan Roberts via wangda)\n",
      "commitDate": "19/08/16 4:28 PM",
      "commitName": "444b2ea7afebf9f6c3d356154b71abfd0ea95b23",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/08/16 5:00 AM",
      "commitNameOld": "091dd19e8636b8bd5668dbb3bcd8bbce7c952274",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,46 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer,\n       boolean isIncreasedAllocation) {\n     super.allocateResource(clusterResource, resource, nodePartition,\n         isIncreasedAllocation);\n+    Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n+        clusterResource);\n     \n     // handle ignore exclusivity container\n     if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n         RMNodeLabelsManager.NO_LABEL)\n         \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n       if (null \u003d\u003d (rmContainers \u003d\n           ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n         rmContainers \u003d new TreeSet\u003c\u003e();\n         ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n       }\n       rmContainers.add(rmContainer);\n     }\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodePartition);\n+\n+    // Update usage ratios\n+    updateQueueUsageRatio(nodePartition,\n+        user.updateUsageRatio(resourceCalculator, resourceByLabel,\n+            nodePartition));\n+\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(getQueueName() +\n           \" user\u003d\" + userName +\n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer,\n      boolean isIncreasedAllocation) {\n    super.allocateResource(clusterResource, resource, nodePartition,\n        isIncreasedAllocation);\n    Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodePartition,\n        clusterResource);\n    \n    // handle ignore exclusivity container\n    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n        RMNodeLabelsManager.NO_LABEL)\n        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n      if (null \u003d\u003d (rmContainers \u003d\n          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n        rmContainers \u003d new TreeSet\u003c\u003e();\n        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n      }\n      rmContainers.add(rmContainer);\n    }\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n\n    // Update usage ratios\n    updateQueueUsageRatio(nodePartition,\n        user.updateUsageRatio(resourceCalculator, resourceByLabel,\n            nodePartition));\n\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(getQueueName() +\n          \" user\u003d\" + userName +\n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "21/09/15 8:54 PM",
          "commitNameOld": "dfd807afab0fae3839c9cc5d552aa0304444f956",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 1.69,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      String nodePartition, RMContainer rmContainer) {\n-    super.allocateResource(clusterResource, resource, nodePartition);\n+      String nodePartition, RMContainer rmContainer,\n+      boolean isIncreasedAllocation) {\n+    super.allocateResource(clusterResource, resource, nodePartition,\n+        isIncreasedAllocation);\n     \n     // handle ignore exclusivity container\n     if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n         RMNodeLabelsManager.NO_LABEL)\n         \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n       if (null \u003d\u003d (rmContainers \u003d\n           ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n         rmContainers \u003d new TreeSet\u003c\u003e();\n         ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n       }\n       rmContainers.add(rmContainer);\n     }\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(getQueueName() +\n           \" user\u003d\" + userName +\n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer,\n      boolean isIncreasedAllocation) {\n    super.allocateResource(clusterResource, resource, nodePartition,\n        isIncreasedAllocation);\n    \n    // handle ignore exclusivity container\n    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n        RMNodeLabelsManager.NO_LABEL)\n        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n      if (null \u003d\u003d (rmContainers \u003d\n          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n        rmContainers \u003d new TreeSet\u003c\u003e();\n        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n      }\n      rmContainers.add(rmContainer);\n    }\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(getQueueName() +\n          \" user\u003d\" + userName +\n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String, rmContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String, rmContainer-RMContainer, isIncreasedAllocation-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "21/09/15 8:54 PM",
          "commitNameOld": "dfd807afab0fae3839c9cc5d552aa0304444f956",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 1.69,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      String nodePartition, RMContainer rmContainer) {\n-    super.allocateResource(clusterResource, resource, nodePartition);\n+      String nodePartition, RMContainer rmContainer,\n+      boolean isIncreasedAllocation) {\n+    super.allocateResource(clusterResource, resource, nodePartition,\n+        isIncreasedAllocation);\n     \n     // handle ignore exclusivity container\n     if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n         RMNodeLabelsManager.NO_LABEL)\n         \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n       if (null \u003d\u003d (rmContainers \u003d\n           ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n         rmContainers \u003d new TreeSet\u003c\u003e();\n         ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n       }\n       rmContainers.add(rmContainer);\n     }\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(getQueueName() +\n           \" user\u003d\" + userName +\n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer,\n      boolean isIncreasedAllocation) {\n    super.allocateResource(clusterResource, resource, nodePartition,\n        isIncreasedAllocation);\n    \n    // handle ignore exclusivity container\n    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n        RMNodeLabelsManager.NO_LABEL)\n        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n      if (null \u003d\u003d (rmContainers \u003d\n          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n        rmContainers \u003d new TreeSet\u003c\u003e();\n        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n      }\n      rmContainers.add(rmContainer);\n    }\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(getQueueName() +\n          \" user\u003d\" + userName +\n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "dfd807afab0fae3839c9cc5d552aa0304444f956": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12428. Fix inconsistency between log-level guards and statements. Contributed by Jagadesh Kiran N and Jackie Chang.\n",
      "commitDate": "21/09/15 8:54 PM",
      "commitName": "dfd807afab0fae3839c9cc5d552aa0304444f956",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "04/09/15 8:30 AM",
      "commitNameOld": "6eaca2e3634a88dc55689e8960352d6248c424d9",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 17.52,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       String nodePartition, RMContainer rmContainer) {\n     super.allocateResource(clusterResource, resource, nodePartition);\n     \n     // handle ignore exclusivity container\n     if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n         RMNodeLabelsManager.NO_LABEL)\n         \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n       if (null \u003d\u003d (rmContainers \u003d\n           ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n         rmContainers \u003d new TreeSet\u003c\u003e();\n         ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n       }\n       rmContainers.add(rmContainer);\n     }\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n-      LOG.info(getQueueName() + \n-          \" user\u003d\" + userName + \n+      LOG.debug(getQueueName() +\n+          \" user\u003d\" + userName +\n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    super.allocateResource(clusterResource, resource, nodePartition);\n    \n    // handle ignore exclusivity container\n    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n        RMNodeLabelsManager.NO_LABEL)\n        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n      if (null \u003d\u003d (rmContainers \u003d\n          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n        rmContainers \u003d new TreeSet\u003c\u003e();\n        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n      }\n      rmContainers.add(rmContainer);\n    }\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(getQueueName() +\n          \" user\u003d\" + userName +\n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/04/15 7:39 AM",
          "commitNameOld": "189a63a719c63b67a1783a280bfc2f72dcb55277",
          "commitAuthorOld": "tgraves",
          "daysBetweenCommits": 1.39,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,36 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      String nodePartition) {\n+      String nodePartition, RMContainer rmContainer) {\n     super.allocateResource(clusterResource, resource, nodePartition);\n     \n+    // handle ignore exclusivity container\n+    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n+        RMNodeLabelsManager.NO_LABEL)\n+        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n+      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n+      if (null \u003d\u003d (rmContainers \u003d\n+          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n+        rmContainers \u003d new TreeSet\u003c\u003e();\n+        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n+      }\n+      rmContainers.add(rmContainer);\n+    }\n+\n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    super.allocateResource(clusterResource, resource, nodePartition);\n    \n    // handle ignore exclusivity container\n    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n        RMNodeLabelsManager.NO_LABEL)\n        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n      if (null \u003d\u003d (rmContainers \u003d\n          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n        rmContainers \u003d new TreeSet\u003c\u003e();\n        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n      }\n      rmContainers.add(rmContainer);\n    }\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String]",
            "newValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String, rmContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/04/15 7:39 AM",
          "commitNameOld": "189a63a719c63b67a1783a280bfc2f72dcb55277",
          "commitAuthorOld": "tgraves",
          "daysBetweenCommits": 1.39,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,36 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      String nodePartition) {\n+      String nodePartition, RMContainer rmContainer) {\n     super.allocateResource(clusterResource, resource, nodePartition);\n     \n+    // handle ignore exclusivity container\n+    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n+        RMNodeLabelsManager.NO_LABEL)\n+        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n+      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n+      if (null \u003d\u003d (rmContainers \u003d\n+          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n+        rmContainers \u003d new TreeSet\u003c\u003e();\n+        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n+      }\n+      rmContainers.add(rmContainer);\n+    }\n+\n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition, RMContainer rmContainer) {\n    super.allocateResource(clusterResource, resource, nodePartition);\n    \n    // handle ignore exclusivity container\n    if (null !\u003d rmContainer \u0026\u0026 rmContainer.getNodeLabelExpression().equals(\n        RMNodeLabelsManager.NO_LABEL)\n        \u0026\u0026 !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      TreeSet\u003cRMContainer\u003e rmContainers \u003d null;\n      if (null \u003d\u003d (rmContainers \u003d\n          ignorePartitionExclusivityRMContainers.get(nodePartition))) {\n        rmContainers \u003d new TreeSet\u003c\u003e();\n        ignorePartitionExclusivityRMContainers.put(nodePartition, rmContainers);\n      }\n      rmContainers.add(rmContainer);\n    }\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
          "commitDate": "14/04/15 11:45 AM",
          "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/04/15 11:38 PM",
          "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 4.51,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      Set\u003cString\u003e nodeLabels) {\n-    super.allocateResource(clusterResource, resource, nodeLabels);\n+      String nodePartition) {\n+    super.allocateResource(clusterResource, resource, nodePartition);\n     \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n-    user.assignContainer(resource, nodeLabels);\n+    user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition) {\n    super.allocateResource(clusterResource, resource, nodePartition);\n    \n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodeLabels-Set\u003cString\u003e]",
            "newValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodePartition-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
          "commitDate": "14/04/15 11:45 AM",
          "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/04/15 11:38 PM",
          "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 4.51,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n-      Set\u003cString\u003e nodeLabels) {\n-    super.allocateResource(clusterResource, resource, nodeLabels);\n+      String nodePartition) {\n+    super.allocateResource(clusterResource, resource, nodePartition);\n     \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n-    user.assignContainer(resource, nodeLabels);\n+    user.assignContainer(resource, nodePartition);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      String nodePartition) {\n    super.allocateResource(clusterResource, resource, nodePartition);\n    \n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodePartition);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "86358221fc85a7743052a0b4c1647353508bf308": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3099. Capacity Scheduler LeafQueue/ParentQueue should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "30/01/15 3:15 PM",
      "commitName": "86358221fc85a7743052a0b4c1647353508bf308",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/01/15 3:36 PM",
      "commitNameOld": "18741adf97f4fda5f8743318b59c440928e51297",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.99,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   synchronized void allocateResource(Resource clusterResource,\n       SchedulerApplicationAttempt application, Resource resource,\n       Set\u003cString\u003e nodeLabels) {\n     super.allocateResource(clusterResource, resource, nodeLabels);\n     \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource, nodeLabels);\n     // Note this is a bit unconventional since it gets the object and modifies\n     // it here, rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n-          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n+          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n-          \" user-resources\u003d\" + user.getTotalConsumedResources()\n+          \" user-resources\u003d\" + user.getUsed()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      Set\u003cString\u003e nodeLabels) {\n    super.allocateResource(clusterResource, resource, nodeLabels);\n    \n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodeLabels);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + queueUsage.getUsed() + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getUsed()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/10/14 1:45 PM",
          "commitNameOld": "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 8.2,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  synchronized void allocateResource(Resource clusterResource, \n-      SchedulerApplicationAttempt application, Resource resource) {\n-    // Update queue metrics\n-    Resources.addTo(usedResources, resource);\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n-    ++numContainers;\n-\n+  synchronized void allocateResource(Resource clusterResource,\n+      SchedulerApplicationAttempt application, Resource resource,\n+      Set\u003cString\u003e nodeLabels) {\n+    super.allocateResource(clusterResource, resource, nodeLabels);\n+    \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n-    user.assignContainer(resource);\n+    user.assignContainer(resource, nodeLabels);\n+    // Note this is a bit unconventional since it gets the object and modifies\n+    // it here, rather then using set routine\n+    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n-          \" user-resources\u003d\" + user.getConsumedResources()\n+          \" user-resources\u003d\" + user.getTotalConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      Set\u003cString\u003e nodeLabels) {\n    super.allocateResource(clusterResource, resource, nodeLabels);\n    \n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodeLabels);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getTotalConsumedResources()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource]",
            "newValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource, nodeLabels-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/10/14 1:45 PM",
          "commitNameOld": "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 8.2,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  synchronized void allocateResource(Resource clusterResource, \n-      SchedulerApplicationAttempt application, Resource resource) {\n-    // Update queue metrics\n-    Resources.addTo(usedResources, resource);\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n-    ++numContainers;\n-\n+  synchronized void allocateResource(Resource clusterResource,\n+      SchedulerApplicationAttempt application, Resource resource,\n+      Set\u003cString\u003e nodeLabels) {\n+    super.allocateResource(clusterResource, resource, nodeLabels);\n+    \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n-    user.assignContainer(resource);\n+    user.assignContainer(resource, nodeLabels);\n+    // Note this is a bit unconventional since it gets the object and modifies\n+    // it here, rather then using set routine\n+    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n-          \" user-resources\u003d\" + user.getConsumedResources()\n+          \" user-resources\u003d\" + user.getTotalConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource,\n      SchedulerApplicationAttempt application, Resource resource,\n      Set\u003cString\u003e nodeLabels) {\n    super.allocateResource(clusterResource, resource, nodeLabels);\n    \n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource, nodeLabels);\n    // Note this is a bit unconventional since it gets the object and modifies\n    // it here, rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getTotalConsumedResources()\n          );\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2644. Fixed CapacityScheduler to return up-to-date headroom when AM allocates. Contributed by Craig Welch\n",
      "commitDate": "06/10/14 3:48 PM",
      "commitName": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/10/14 5:09 PM",
      "commitNameOld": "c8212bacb1b2a7e6ee83cc56f72297465ce99390",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 2.94,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n   synchronized void allocateResource(Resource clusterResource, \n       SchedulerApplicationAttempt application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n-    // Note this is a bit unconventional since it gets the object and modifies it here\n-    // rather then using set routine\n-    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApplicationAttempt application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/08/14 11:00 PM",
      "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 45.34,
      "commitsBetweenForRepo": 409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   synchronized void allocateResource(Resource clusterResource, \n       SchedulerApplicationAttempt application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n+    // Note this is a bit unconventional since it gets the object and modifies it here\n+    // rather then using set routine\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApplicationAttempt application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    // Note this is a bit unconventional since it gets the object and modifies it here\n    // rather then using set routine\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/05/14 10:32 PM",
      "commitNameOld": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.9,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   synchronized void allocateResource(Resource clusterResource, \n-      FiCaSchedulerApp application, Resource resource) {\n+      SchedulerApplicationAttempt application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApplicationAttempt application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[clusterResource-Resource, application-FiCaSchedulerApp, resource-Resource]",
        "newValue": "[clusterResource-Resource, application-SchedulerApplicationAttempt, resource-Resource]"
      }
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/11/12 1:56 PM",
      "commitNameOld": "fb5b96dfc324f999e8b3698288c110a1c3b71c30",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 62.3,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   synchronized void allocateResource(Resource clusterResource, \n       FiCaSchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     CSQueueUtils.updateQueueStatistics(\n-        this, getParent(), clusterResource, minimumAllocation);\n+        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      FiCaSchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cc523683cfa76c1255667a3aedc48b08e5daabc7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-177. CapacityScheduler - adding a queue while the RM is running has wacky results (acmurthy vai tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401668 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 6:21 AM",
      "commitName": "cc523683cfa76c1255667a3aedc48b08e5daabc7",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "26/09/12 8:43 PM",
      "commitNameOld": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 27.4,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   synchronized void allocateResource(Resource clusterResource, \n       FiCaSchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     CSQueueUtils.updateQueueStatistics(\n-        this, parent, clusterResource, minimumAllocation);\n+        this, getParent(), clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      FiCaSchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        this, getParent(), clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      FiCaSchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   synchronized void allocateResource(Resource clusterResource, \n-      SchedulerApp application, Resource resource) {\n+      FiCaSchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     CSQueueUtils.updateQueueStatistics(\n         this, parent, clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      FiCaSchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[clusterResource-Resource, application-SchedulerApp, resource-Resource]",
        "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, resource-Resource]"
      }
    },
    "c7007a8a3508a24a6f023302516fe8fbe270eab1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3747. Initialize queue metrics upfront and added start/finish time to RM Web-UI. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240886 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/12 7:38 PM",
      "commitName": "c7007a8a3508a24a6f023302516fe8fbe270eab1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "02/02/12 5:16 PM",
      "commitNameOld": "a5c46c91655acebccd1367706b05946eff90f744",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   synchronized void allocateResource(Resource clusterResource, \n       SchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n-    updateResource(clusterResource);\n+    CSQueueUtils.updateQueueStatistics(\n+        this, parent, clusterResource, minimumAllocation);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n     Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.info(getQueueName() + \n           \" user\u003d\" + userName + \n           \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n           \" headroom \u003d \" + application.getHeadroom() +\n           \" user-resources\u003d\" + user.getConsumedResources()\n           );\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3752. Modified application limits to include queue max-capacities besides the usual user limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239422 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 4:41 PM",
      "commitName": "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/01/12 5:32 PM",
      "commitNameOld": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,23 @@\n   synchronized void allocateResource(Resource clusterResource, \n       SchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     updateResource(clusterResource);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n+    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n-    LOG.info(getQueueName() + \n-        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n-        \" user\u003d\" + userName + \" user-resources\u003d\" + user.getConsumedResources());\n+    \n+    if (LOG.isDebugEnabled()) {\n+      LOG.info(getQueueName() + \n+          \" user\u003d\" + userName + \n+          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n+          \" headroom \u003d \" + application.getHeadroom() +\n+          \" user-resources\u003d\" + user.getConsumedResources()\n+          );\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    updateResource(clusterResource);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    Resources.subtractFrom(application.getHeadroom(), resource); // headroom\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.info(getQueueName() + \n          \" user\u003d\" + userName + \n          \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers +\n          \" headroom \u003d \" + application.getHeadroom() +\n          \" user-resources\u003d\" + user.getConsumedResources()\n          );\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "4a343c9d4ab4c993b545f0c1062c6b5449b065f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3641. Making CapacityScheduler more conservative so as to assign only one off-switch container in a single scheduling iteration. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1232182 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/12 1:56 PM",
      "commitName": "4a343c9d4ab4c993b545f0c1062c6b5449b065f0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/12/11 4:20 PM",
      "commitNameOld": "e52291ea8871e2de421692fdfd6fbaabeca60eb4",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 34.9,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   synchronized void allocateResource(Resource clusterResource, \n       SchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     updateResource(clusterResource);\n     ++numContainers;\n \n     // Update user metrics\n     String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n     metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     LOG.info(getQueueName() + \n         \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n-        \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n+        \" user\u003d\" + userName + \" user-resources\u003d\" + user.getConsumedResources());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    updateResource(clusterResource);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    LOG.info(getQueueName() + \n        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n        \" user\u003d\" + userName + \" user-resources\u003d\" + user.getConsumedResources());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2794. [MR-279] Incorrect metrics value for AvailableGB per queue per user. (John George via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/11 10:27 PM",
      "commitName": "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
      "commitAuthor": "Mahadev Konar",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2794. [MR-279] Incorrect metrics value for AvailableGB per queue per user. (John George via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/11 10:27 PM",
          "commitName": "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "05/10/11 4:56 AM",
          "commitNameOld": "f24dcb3449c77da665058427bc7fa480cad507fc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.73,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n   synchronized void allocateResource(Resource clusterResource, \n-      String userName, Resource resource) {\n+      SchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     updateResource(clusterResource);\n     ++numContainers;\n \n     // Update user metrics\n+    String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n-    \n+    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     LOG.info(getQueueName() + \n         \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n         \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    updateResource(clusterResource);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    LOG.info(getQueueName() + \n        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n        \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, userName-String, resource-Resource]",
            "newValue": "[clusterResource-Resource, application-SchedulerApp, resource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2794. [MR-279] Incorrect metrics value for AvailableGB per queue per user. (John George via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/11 10:27 PM",
          "commitName": "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "05/10/11 4:56 AM",
          "commitNameOld": "f24dcb3449c77da665058427bc7fa480cad507fc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.73,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n   synchronized void allocateResource(Resource clusterResource, \n-      String userName, Resource resource) {\n+      SchedulerApp application, Resource resource) {\n     // Update queue metrics\n     Resources.addTo(usedResources, resource);\n     updateResource(clusterResource);\n     ++numContainers;\n \n     // Update user metrics\n+    String userName \u003d application.getUser();\n     User user \u003d getUser(userName);\n     user.assignContainer(resource);\n-    \n+    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n     LOG.info(getQueueName() + \n         \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n         \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      SchedulerApp application, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    updateResource(clusterResource);\n    ++numContainers;\n\n    // Update user metrics\n    String userName \u003d application.getUser();\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    metrics.setAvailableResourcesToUser(userName, application.getHeadroom());\n    LOG.info(getQueueName() + \n        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n        \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      String userName, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    updateResource(clusterResource);\n    ++numContainers;\n\n    // Update user metrics\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    \n    LOG.info(getQueueName() + \n        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n        \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,15 @@\n+  synchronized void allocateResource(Resource clusterResource, \n+      String userName, Resource resource) {\n+    // Update queue metrics\n+    Resources.addTo(usedResources, resource);\n+    updateResource(clusterResource);\n+    ++numContainers;\n+\n+    // Update user metrics\n+    User user \u003d getUser(userName);\n+    user.assignContainer(resource);\n+    \n+    LOG.info(getQueueName() + \n+        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n+        \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void allocateResource(Resource clusterResource, \n      String userName, Resource resource) {\n    // Update queue metrics\n    Resources.addTo(usedResources, resource);\n    updateResource(clusterResource);\n    ++numContainers;\n\n    // Update user metrics\n    User user \u003d getUser(userName);\n    user.assignContainer(resource);\n    \n    LOG.info(getQueueName() + \n        \" used\u003d\" + usedResources + \" numContainers\u003d\" + numContainers + \n        \" user\u003d\" + userName + \" resources\u003d\" + user.getConsumedResources());\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}