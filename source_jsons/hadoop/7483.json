{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirRenameOp.java",
  "functionName": "validateOverwrite",
  "functionId": "validateOverwrite___src-String__dst-String__overwrite-boolean__srcInode-INode__dstInode-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
  "functionStartLine": 541,
  "functionEndLine": 568,
  "numCommitsSeen": 245,
  "timeTaken": 4105,
  "changeHistory": [
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7"
  ],
  "changeHistoryShort": {
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": "Ymultichange(Ymovefromfile,Yrename)"
  },
  "changeHistoryDetails": {
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": {
      "type": "Ymultichange(Ymovefromfile,Yrename)",
      "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "01/12/14 9:48 PM",
      "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  private static void validateRenameOverwrite(String src, String dst,\n-                                              boolean overwrite,\n-                                              INode srcInode, INode dstInode)\n-          throws IOException {\n+  private static void validateOverwrite(\n+      String src, String dst, boolean overwrite, INode srcInode, INode dstInode)\n+      throws IOException {\n     String error;// It\u0027s OK to rename a file to a symlink and vice versa\n     if (dstInode.isDirectory() !\u003d srcInode.isDirectory()) {\n       error \u003d \"Source \" + src + \" and destination \" + dst\n           + \" must both be directories\";\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new IOException(error);\n     }\n     if (!overwrite) { // If destination exists, overwrite flag must be true\n       error \u003d \"rename destination \" + dst + \" already exists\";\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new FileAlreadyExistsException(error);\n     }\n     if (dstInode.isDirectory()) {\n       final ReadOnlyList\u003cINode\u003e children \u003d dstInode.asDirectory()\n           .getChildrenList(Snapshot.CURRENT_STATE_ID);\n       if (!children.isEmpty()) {\n         error \u003d \"rename destination directory is not empty: \" + dst;\n-        NameNode.stateChangeLog.warn(\n-            \"DIR* FSDirectory.unprotectedRenameTo: \" + error);\n+        NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n+            + error);\n         throw new IOException(error);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateOverwrite(\n      String src, String dst, boolean overwrite, INode srcInode, INode dstInode)\n      throws IOException {\n    String error;// It\u0027s OK to rename a file to a symlink and vice versa\n    if (dstInode.isDirectory() !\u003d srcInode.isDirectory()) {\n      error \u003d \"Source \" + src + \" and destination \" + dst\n          + \" must both be directories\";\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new IOException(error);\n    }\n    if (!overwrite) { // If destination exists, overwrite flag must be true\n      error \u003d \"rename destination \" + dst + \" already exists\";\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new FileAlreadyExistsException(error);\n    }\n    if (dstInode.isDirectory()) {\n      final ReadOnlyList\u003cINode\u003e children \u003d dstInode.asDirectory()\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      if (!children.isEmpty()) {\n        error \u003d \"rename destination directory is not empty: \" + dst;\n        NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n            + error);\n        throw new IOException(error);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
            "oldMethodName": "validateRenameOverwrite",
            "newMethodName": "validateOverwrite"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  private static void validateRenameOverwrite(String src, String dst,\n-                                              boolean overwrite,\n-                                              INode srcInode, INode dstInode)\n-          throws IOException {\n+  private static void validateOverwrite(\n+      String src, String dst, boolean overwrite, INode srcInode, INode dstInode)\n+      throws IOException {\n     String error;// It\u0027s OK to rename a file to a symlink and vice versa\n     if (dstInode.isDirectory() !\u003d srcInode.isDirectory()) {\n       error \u003d \"Source \" + src + \" and destination \" + dst\n           + \" must both be directories\";\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new IOException(error);\n     }\n     if (!overwrite) { // If destination exists, overwrite flag must be true\n       error \u003d \"rename destination \" + dst + \" already exists\";\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new FileAlreadyExistsException(error);\n     }\n     if (dstInode.isDirectory()) {\n       final ReadOnlyList\u003cINode\u003e children \u003d dstInode.asDirectory()\n           .getChildrenList(Snapshot.CURRENT_STATE_ID);\n       if (!children.isEmpty()) {\n         error \u003d \"rename destination directory is not empty: \" + dst;\n-        NameNode.stateChangeLog.warn(\n-            \"DIR* FSDirectory.unprotectedRenameTo: \" + error);\n+        NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n+            + error);\n         throw new IOException(error);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateOverwrite(\n      String src, String dst, boolean overwrite, INode srcInode, INode dstInode)\n      throws IOException {\n    String error;// It\u0027s OK to rename a file to a symlink and vice versa\n    if (dstInode.isDirectory() !\u003d srcInode.isDirectory()) {\n      error \u003d \"Source \" + src + \" and destination \" + dst\n          + \" must both be directories\";\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new IOException(error);\n    }\n    if (!overwrite) { // If destination exists, overwrite flag must be true\n      error \u003d \"rename destination \" + dst + \" already exists\";\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new FileAlreadyExistsException(error);\n    }\n    if (dstInode.isDirectory()) {\n      final ReadOnlyList\u003cINode\u003e children \u003d dstInode.asDirectory()\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      if (!children.isEmpty()) {\n        error \u003d \"rename destination directory is not empty: \" + dst;\n        NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n            + error);\n        throw new IOException(error);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "validateRenameOverwrite",
            "newValue": "validateOverwrite"
          }
        }
      ]
    }
  }
}