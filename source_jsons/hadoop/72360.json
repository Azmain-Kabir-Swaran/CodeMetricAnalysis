{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleTcpServer.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java",
  "functionStartLine": 60,
  "functionEndLine": 95,
  "numCommitsSeen": 8,
  "timeTaken": 1427,
  "changeHistory": [
    "09ad8effb825eddbf0ee2ef591a0d16a58468f56",
    "1f9848dfe1fc9148cbbcfcc3dfed948b9e0f3c3c",
    "60ce825a71850fe0622d551159e8d66f32448bb5",
    "ec9ec0084eccdd45a8c3e37ef8121fb8bd44ecd0",
    "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891",
    "8ef140d38b16a18050e9e7901e8aadd424aef20f"
  ],
  "changeHistoryShort": {
    "09ad8effb825eddbf0ee2ef591a0d16a58468f56": "Ybodychange",
    "1f9848dfe1fc9148cbbcfcc3dfed948b9e0f3c3c": "Ybodychange",
    "60ce825a71850fe0622d551159e8d66f32448bb5": "Ybodychange",
    "ec9ec0084eccdd45a8c3e37ef8121fb8bd44ecd0": "Ybodychange",
    "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891": "Ybodychange",
    "8ef140d38b16a18050e9e7901e8aadd424aef20f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09ad8effb825eddbf0ee2ef591a0d16a58468f56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11533. reuseAddress option should be used for child channels in Portmap and SimpleTcpServer. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "16/03/17 12:20 PM",
      "commitName": "09ad8effb825eddbf0ee2ef591a0d16a58468f56",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "07/03/17 11:41 AM",
      "commitNameOld": "1f9848dfe1fc9148cbbcfcc3dfed948b9e0f3c3c",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public void run() {\n     // Configure the Server.\n     ChannelFactory factory;\n     if (workerCount \u003d\u003d 0) {\n       // Use default workers: 2 * the number of available processors\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n     } else {\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n           workerCount);\n     }\n \n     server \u003d new ServerBootstrap(factory);\n     server.setPipelineFactory(new ChannelPipelineFactory() {\n \n       @Override\n       public ChannelPipeline getPipeline() throws Exception {\n         return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n             RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n             RpcUtil.STAGE_RPC_TCP_RESPONSE);\n       }\n     });\n     server.setOption(\"child.tcpNoDelay\", true);\n     server.setOption(\"child.keepAlive\", true);\n+    server.setOption(\"child.reuseAddress\", true);\n     server.setOption(\"reuseAddress\", true);\n \n     // Listen to TCP port\n     ch \u003d server.bind(new InetSocketAddress(port));\n     InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n     boundPort \u003d socketAddr.getPort();\n \n     LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n         + rpcProgram + \" with workerCount \" + workerCount);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Configure the Server.\n    ChannelFactory factory;\n    if (workerCount \u003d\u003d 0) {\n      // Use default workers: 2 * the number of available processors\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n    } else {\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n          workerCount);\n    }\n\n    server \u003d new ServerBootstrap(factory);\n    server.setPipelineFactory(new ChannelPipelineFactory() {\n\n      @Override\n      public ChannelPipeline getPipeline() throws Exception {\n        return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n            RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n            RpcUtil.STAGE_RPC_TCP_RESPONSE);\n      }\n    });\n    server.setOption(\"child.tcpNoDelay\", true);\n    server.setOption(\"child.keepAlive\", true);\n    server.setOption(\"child.reuseAddress\", true);\n    server.setOption(\"reuseAddress\", true);\n\n    // Listen to TCP port\n    ch \u003d server.bind(new InetSocketAddress(port));\n    InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n    boundPort \u003d socketAddr.getPort();\n\n    LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n        + rpcProgram + \" with workerCount \" + workerCount);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java",
      "extendedDetails": {}
    },
    "1f9848dfe1fc9148cbbcfcc3dfed948b9e0f3c3c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11508. Fix bind failure in SimpleTCPServer \u0026 Portmap where bind fails because socket is in TIME_WAIT state. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "07/03/17 11:41 AM",
      "commitName": "1f9848dfe1fc9148cbbcfcc3dfed948b9e0f3c3c",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/04/15 5:04 PM",
      "commitNameOld": "60ce825a71850fe0622d551159e8d66f32448bb5",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 705.82,
      "commitsBetweenForRepo": 5071,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public void run() {\n     // Configure the Server.\n     ChannelFactory factory;\n     if (workerCount \u003d\u003d 0) {\n       // Use default workers: 2 * the number of available processors\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n     } else {\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n           workerCount);\n     }\n \n     server \u003d new ServerBootstrap(factory);\n     server.setPipelineFactory(new ChannelPipelineFactory() {\n \n       @Override\n       public ChannelPipeline getPipeline() throws Exception {\n         return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n             RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n             RpcUtil.STAGE_RPC_TCP_RESPONSE);\n       }\n     });\n     server.setOption(\"child.tcpNoDelay\", true);\n     server.setOption(\"child.keepAlive\", true);\n+    server.setOption(\"reuseAddress\", true);\n \n     // Listen to TCP port\n     ch \u003d server.bind(new InetSocketAddress(port));\n     InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n     boundPort \u003d socketAddr.getPort();\n \n     LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n         + rpcProgram + \" with workerCount \" + workerCount);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Configure the Server.\n    ChannelFactory factory;\n    if (workerCount \u003d\u003d 0) {\n      // Use default workers: 2 * the number of available processors\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n    } else {\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n          workerCount);\n    }\n\n    server \u003d new ServerBootstrap(factory);\n    server.setPipelineFactory(new ChannelPipelineFactory() {\n\n      @Override\n      public ChannelPipeline getPipeline() throws Exception {\n        return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n            RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n            RpcUtil.STAGE_RPC_TCP_RESPONSE);\n      }\n    });\n    server.setOption(\"child.tcpNoDelay\", true);\n    server.setOption(\"child.keepAlive\", true);\n    server.setOption(\"reuseAddress\", true);\n\n    // Listen to TCP port\n    ch \u003d server.bind(new InetSocketAddress(port));\n    InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n    boundPort \u003d socketAddr.getPort();\n\n    LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n        + rpcProgram + \" with workerCount \" + workerCount);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java",
      "extendedDetails": {}
    },
    "60ce825a71850fe0622d551159e8d66f32448bb5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11757. NFS gateway should shutdown when it can\u0027t start UDP or TCP server. Contributed by Brandon Li\n",
      "commitDate": "01/04/15 5:04 PM",
      "commitName": "60ce825a71850fe0622d551159e8d66f32448bb5",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "09/11/13 8:07 PM",
      "commitNameOld": "ec9ec0084eccdd45a8c3e37ef8121fb8bd44ecd0",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 507.83,
      "commitsBetweenForRepo": 3968,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public void run() {\n     // Configure the Server.\n     ChannelFactory factory;\n     if (workerCount \u003d\u003d 0) {\n       // Use default workers: 2 * the number of available processors\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n     } else {\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n           workerCount);\n     }\n-    \n-    ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n-    bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n+\n+    server \u003d new ServerBootstrap(factory);\n+    server.setPipelineFactory(new ChannelPipelineFactory() {\n \n       @Override\n       public ChannelPipeline getPipeline() throws Exception {\n         return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n             RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n             RpcUtil.STAGE_RPC_TCP_RESPONSE);\n       }\n     });\n-    bootstrap.setOption(\"child.tcpNoDelay\", true);\n-    bootstrap.setOption(\"child.keepAlive\", true);\n-    \n+    server.setOption(\"child.tcpNoDelay\", true);\n+    server.setOption(\"child.keepAlive\", true);\n+\n     // Listen to TCP port\n-    Channel ch \u003d bootstrap.bind(new InetSocketAddress(port));\n+    ch \u003d server.bind(new InetSocketAddress(port));\n     InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n     boundPort \u003d socketAddr.getPort();\n-    \n+\n     LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n         + rpcProgram + \" with workerCount \" + workerCount);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Configure the Server.\n    ChannelFactory factory;\n    if (workerCount \u003d\u003d 0) {\n      // Use default workers: 2 * the number of available processors\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n    } else {\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n          workerCount);\n    }\n\n    server \u003d new ServerBootstrap(factory);\n    server.setPipelineFactory(new ChannelPipelineFactory() {\n\n      @Override\n      public ChannelPipeline getPipeline() throws Exception {\n        return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n            RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n            RpcUtil.STAGE_RPC_TCP_RESPONSE);\n      }\n    });\n    server.setOption(\"child.tcpNoDelay\", true);\n    server.setOption(\"child.keepAlive\", true);\n\n    // Listen to TCP port\n    ch \u003d server.bind(new InetSocketAddress(port));\n    InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n    boundPort \u003d socketAddr.getPort();\n\n    LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n        + rpcProgram + \" with workerCount \" + workerCount);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java",
      "extendedDetails": {}
    },
    "ec9ec0084eccdd45a8c3e37ef8121fb8bd44ecd0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5469. Add configuration property for the sub-directroy export path. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540443 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/13 8:07 PM",
      "commitName": "ec9ec0084eccdd45a8c3e37ef8121fb8bd44ecd0",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/09/13 12:21 PM",
      "commitNameOld": "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 40.37,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public void run() {\n     // Configure the Server.\n     ChannelFactory factory;\n     if (workerCount \u003d\u003d 0) {\n       // Use default workers: 2 * the number of available processors\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n     } else {\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n           workerCount);\n     }\n     \n     ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n     bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n \n       @Override\n       public ChannelPipeline getPipeline() throws Exception {\n         return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n             RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n             RpcUtil.STAGE_RPC_TCP_RESPONSE);\n       }\n     });\n     bootstrap.setOption(\"child.tcpNoDelay\", true);\n     bootstrap.setOption(\"child.keepAlive\", true);\n     \n     // Listen to TCP port\n-    bootstrap.bind(new InetSocketAddress(port));\n-\n-    LOG.info(\"Started listening to TCP requests at port \" + port + \" for \"\n+    Channel ch \u003d bootstrap.bind(new InetSocketAddress(port));\n+    InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n+    boundPort \u003d socketAddr.getPort();\n+    \n+    LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n         + rpcProgram + \" with workerCount \" + workerCount);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Configure the Server.\n    ChannelFactory factory;\n    if (workerCount \u003d\u003d 0) {\n      // Use default workers: 2 * the number of available processors\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n    } else {\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n          workerCount);\n    }\n    \n    ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n    bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n\n      @Override\n      public ChannelPipeline getPipeline() throws Exception {\n        return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n            RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n            RpcUtil.STAGE_RPC_TCP_RESPONSE);\n      }\n    });\n    bootstrap.setOption(\"child.tcpNoDelay\", true);\n    bootstrap.setOption(\"child.keepAlive\", true);\n    \n    // Listen to TCP port\n    Channel ch \u003d bootstrap.bind(new InetSocketAddress(port));\n    InetSocketAddress socketAddr \u003d (InetSocketAddress) ch.getLocalAddress();\n    boundPort \u003d socketAddr.getPort();\n    \n    LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \"\n        + rpcProgram + \" with workerCount \" + workerCount);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java",
      "extendedDetails": {}
    },
    "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5230. Introduce RpcInfo to decouple XDR classes from the RPC API. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/09/13 12:21 PM",
      "commitName": "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "20/09/13 12:03 PM",
      "commitNameOld": "d8d3d3eaed15be21187698701f9ef56f2a546ba4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 10.01,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,32 @@\n   public void run() {\n     // Configure the Server.\n     ChannelFactory factory;\n     if (workerCount \u003d\u003d 0) {\n       // Use default workers: 2 * the number of available processors\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n     } else {\n       factory \u003d new NioServerSocketChannelFactory(\n           Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n           workerCount);\n     }\n     \n     ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n-    bootstrap.setPipelineFactory(pipelineFactory);\n+    bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n+\n+      @Override\n+      public ChannelPipeline getPipeline() throws Exception {\n+        return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n+            RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n+            RpcUtil.STAGE_RPC_TCP_RESPONSE);\n+      }\n+    });\n     bootstrap.setOption(\"child.tcpNoDelay\", true);\n     bootstrap.setOption(\"child.keepAlive\", true);\n     \n     // Listen to TCP port\n     bootstrap.bind(new InetSocketAddress(port));\n \n     LOG.info(\"Started listening to TCP requests at port \" + port + \" for \"\n         + rpcProgram + \" with workerCount \" + workerCount);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Configure the Server.\n    ChannelFactory factory;\n    if (workerCount \u003d\u003d 0) {\n      // Use default workers: 2 * the number of available processors\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n    } else {\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n          workerCount);\n    }\n    \n    ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n    bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n\n      @Override\n      public ChannelPipeline getPipeline() throws Exception {\n        return Channels.pipeline(RpcUtil.constructRpcFrameDecoder(),\n            RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram,\n            RpcUtil.STAGE_RPC_TCP_RESPONSE);\n      }\n    });\n    bootstrap.setOption(\"child.tcpNoDelay\", true);\n    bootstrap.setOption(\"child.keepAlive\", true);\n    \n    // Listen to TCP port\n    bootstrap.bind(new InetSocketAddress(port));\n\n    LOG.info(\"Started listening to TCP requests at port \" + port + \" for \"\n        + rpcProgram + \" with workerCount \" + workerCount);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java",
      "extendedDetails": {}
    },
    "8ef140d38b16a18050e9e7901e8aadd424aef20f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9509. Implement ONCRPC and XDR. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 2:45 PM",
      "commitName": "8ef140d38b16a18050e9e7901e8aadd424aef20f",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,24 @@\n+  public void run() {\n+    // Configure the Server.\n+    ChannelFactory factory;\n+    if (workerCount \u003d\u003d 0) {\n+      // Use default workers: 2 * the number of available processors\n+      factory \u003d new NioServerSocketChannelFactory(\n+          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n+    } else {\n+      factory \u003d new NioServerSocketChannelFactory(\n+          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n+          workerCount);\n+    }\n+    \n+    ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n+    bootstrap.setPipelineFactory(pipelineFactory);\n+    bootstrap.setOption(\"child.tcpNoDelay\", true);\n+    bootstrap.setOption(\"child.keepAlive\", true);\n+    \n+    // Listen to TCP port\n+    bootstrap.bind(new InetSocketAddress(port));\n+\n+    LOG.info(\"Started listening to TCP requests at port \" + port + \" for \"\n+        + rpcProgram + \" with workerCount \" + workerCount);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Configure the Server.\n    ChannelFactory factory;\n    if (workerCount \u003d\u003d 0) {\n      // Use default workers: 2 * the number of available processors\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n    } else {\n      factory \u003d new NioServerSocketChannelFactory(\n          Executors.newCachedThreadPool(), Executors.newCachedThreadPool(),\n          workerCount);\n    }\n    \n    ServerBootstrap bootstrap \u003d new ServerBootstrap(factory);\n    bootstrap.setPipelineFactory(pipelineFactory);\n    bootstrap.setOption(\"child.tcpNoDelay\", true);\n    bootstrap.setOption(\"child.keepAlive\", true);\n    \n    // Listen to TCP port\n    bootstrap.bind(new InetSocketAddress(port));\n\n    LOG.info(\"Started listening to TCP requests at port \" + port + \" for \"\n        + rpcProgram + \" with workerCount \" + workerCount);\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleTcpServer.java"
    }
  }
}