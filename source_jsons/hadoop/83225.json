{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MutableMetricsFactory.java",
  "functionName": "newForField",
  "functionId": "newForField___field-Field__annotation-Metric__registry-MetricsRegistry",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
  "functionStartLine": 40,
  "functionEndLine": 92,
  "numCommitsSeen": 12,
  "timeTaken": 2453,
  "changeHistory": [
    "962089ab5978291f609656fa1c8a685c683ed83f",
    "8633ef8e10a78883fbd6bf197007dc5191bf4535",
    "0e065f2edead41f6f894c9d70def389af1c0f239",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "77c13c385774c51766fe505397fa916754ac08d4",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de"
  ],
  "changeHistoryShort": {
    "962089ab5978291f609656fa1c8a685c683ed83f": "Ybodychange",
    "8633ef8e10a78883fbd6bf197007dc5191bf4535": "Ybodychange",
    "0e065f2edead41f6f894c9d70def389af1c0f239": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "77c13c385774c51766fe505397fa916754ac08d4": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "962089ab5978291f609656fa1c8a685c683ed83f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15657 Registering MutableQuantiles via Metric annotation. Contributed by Sushil Ks\n",
      "commitDate": "05/09/18 8:53 PM",
      "commitName": "962089ab5978291f609656fa1c8a685c683ed83f",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 69.93,
      "commitsBetweenForRepo": 499,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,53 @@\n   MutableMetric newForField(Field field, Metric annotation,\n                             MetricsRegistry registry) {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n     }\n     MetricsInfo info \u003d getInfo(annotation, field);\n     MutableMetric metric \u003d newForField(field, annotation);\n     if (metric !\u003d null) {\n       registry.add(info.name(), metric);\n       return metric;\n     }\n     final Class\u003c?\u003e cls \u003d field.getType();\n     if (cls \u003d\u003d MutableCounterInt.class) {\n       return registry.newCounter(info, 0);\n     }\n     if (cls \u003d\u003d MutableCounterLong.class) {\n       return registry.newCounter(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeInt.class) {\n       return registry.newGauge(info, 0);\n     }\n     if (cls \u003d\u003d MutableGaugeLong.class) {\n       return registry.newGauge(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeFloat.class) {\n       return registry.newGauge(info, 0f);\n     }\n     if (cls \u003d\u003d MutableRate.class) {\n       return registry.newRate(info.name(), info.description(),\n                               annotation.always());\n     }\n     if (cls \u003d\u003d MutableRates.class) {\n       return new MutableRates(registry);\n     }\n     if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n       return registry.newRatesWithAggregation(info.name());\n     }\n     if (cls \u003d\u003d MutableStat.class) {\n       return registry.newStat(info.name(), info.description(),\n                               annotation.sampleName(), annotation.valueName(),\n                               annotation.always());\n     }\n     if (cls \u003d\u003d MutableRollingAverages.class) {\n       return registry.newMutableRollingAverages(info.name(),\n           annotation.valueName());\n     }\n+    if (cls \u003d\u003d MutableQuantiles.class) {\n+      return registry.newQuantiles(info.name(), annotation.about(),\n+          annotation.sampleName(), annotation.valueName(), annotation.interval());\n+    }\n     throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                                \" of type \"+ field.getType().getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeFloat.class) {\n      return registry.newGauge(info, 0f);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n      return registry.newRatesWithAggregation(info.name());\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRollingAverages.class) {\n      return registry.newMutableRollingAverages(info.name(),\n          annotation.valueName());\n    }\n    if (cls \u003d\u003d MutableQuantiles.class) {\n      return registry.newQuantiles(info.name(), annotation.about(),\n          annotation.sampleName(), annotation.valueName(), annotation.interval());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {}
    },
    "8633ef8e10a78883fbd6bf197007dc5191bf4535": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14503. Make RollingAverages a mutable metric. Contributed by Hanisha Koneru.\n",
      "commitDate": "12/06/17 8:43 PM",
      "commitName": "8633ef8e10a78883fbd6bf197007dc5191bf4535",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "11/04/17 6:44 AM",
      "commitNameOld": "0e065f2edead41f6f894c9d70def389af1c0f239",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 62.58,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,49 @@\n   MutableMetric newForField(Field field, Metric annotation,\n                             MetricsRegistry registry) {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n     }\n     MetricsInfo info \u003d getInfo(annotation, field);\n     MutableMetric metric \u003d newForField(field, annotation);\n     if (metric !\u003d null) {\n       registry.add(info.name(), metric);\n       return metric;\n     }\n     final Class\u003c?\u003e cls \u003d field.getType();\n     if (cls \u003d\u003d MutableCounterInt.class) {\n       return registry.newCounter(info, 0);\n     }\n     if (cls \u003d\u003d MutableCounterLong.class) {\n       return registry.newCounter(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeInt.class) {\n       return registry.newGauge(info, 0);\n     }\n     if (cls \u003d\u003d MutableGaugeLong.class) {\n       return registry.newGauge(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeFloat.class) {\n       return registry.newGauge(info, 0f);\n     }\n     if (cls \u003d\u003d MutableRate.class) {\n       return registry.newRate(info.name(), info.description(),\n                               annotation.always());\n     }\n     if (cls \u003d\u003d MutableRates.class) {\n       return new MutableRates(registry);\n     }\n     if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n       return registry.newRatesWithAggregation(info.name());\n     }\n     if (cls \u003d\u003d MutableStat.class) {\n       return registry.newStat(info.name(), info.description(),\n                               annotation.sampleName(), annotation.valueName(),\n                               annotation.always());\n     }\n+    if (cls \u003d\u003d MutableRollingAverages.class) {\n+      return registry.newMutableRollingAverages(info.name(),\n+          annotation.valueName());\n+    }\n     throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                                \" of type \"+ field.getType().getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeFloat.class) {\n      return registry.newGauge(info, 0f);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n      return registry.newRatesWithAggregation(info.name());\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRollingAverages.class) {\n      return registry.newMutableRollingAverages(info.name(),\n          annotation.valueName());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {}
    },
    "0e065f2edead41f6f894c9d70def389af1c0f239": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6195. Export UsedCapacity and AbsoluteUsedCapacity to JMX. Contributed by Benson Qiu\n",
      "commitDate": "11/04/17 6:44 AM",
      "commitName": "0e065f2edead41f6f894c9d70def389af1c0f239",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/11/16 11:05 AM",
      "commitNameOld": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 147.78,
      "commitsBetweenForRepo": 805,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   MutableMetric newForField(Field field, Metric annotation,\n                             MetricsRegistry registry) {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n     }\n     MetricsInfo info \u003d getInfo(annotation, field);\n     MutableMetric metric \u003d newForField(field, annotation);\n     if (metric !\u003d null) {\n       registry.add(info.name(), metric);\n       return metric;\n     }\n     final Class\u003c?\u003e cls \u003d field.getType();\n     if (cls \u003d\u003d MutableCounterInt.class) {\n       return registry.newCounter(info, 0);\n     }\n     if (cls \u003d\u003d MutableCounterLong.class) {\n       return registry.newCounter(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeInt.class) {\n       return registry.newGauge(info, 0);\n     }\n     if (cls \u003d\u003d MutableGaugeLong.class) {\n       return registry.newGauge(info, 0L);\n     }\n+    if (cls \u003d\u003d MutableGaugeFloat.class) {\n+      return registry.newGauge(info, 0f);\n+    }\n     if (cls \u003d\u003d MutableRate.class) {\n       return registry.newRate(info.name(), info.description(),\n                               annotation.always());\n     }\n     if (cls \u003d\u003d MutableRates.class) {\n       return new MutableRates(registry);\n     }\n     if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n       return registry.newRatesWithAggregation(info.name());\n     }\n     if (cls \u003d\u003d MutableStat.class) {\n       return registry.newStat(info.name(), info.description(),\n                               annotation.sampleName(), annotation.valueName(),\n                               annotation.always());\n     }\n     throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                                \" of type \"+ field.getType().getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeFloat.class) {\n      return registry.newGauge(info, 0f);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n      return registry.newRatesWithAggregation(info.name());\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 4:07 PM",
      "commitNameOld": "77c13c385774c51766fe505397fa916754ac08d4",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 5.79,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,42 @@\n   MutableMetric newForField(Field field, Metric annotation,\n                             MetricsRegistry registry) {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n     }\n     MetricsInfo info \u003d getInfo(annotation, field);\n     MutableMetric metric \u003d newForField(field, annotation);\n     if (metric !\u003d null) {\n       registry.add(info.name(), metric);\n       return metric;\n     }\n     final Class\u003c?\u003e cls \u003d field.getType();\n     if (cls \u003d\u003d MutableCounterInt.class) {\n       return registry.newCounter(info, 0);\n     }\n     if (cls \u003d\u003d MutableCounterLong.class) {\n       return registry.newCounter(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeInt.class) {\n       return registry.newGauge(info, 0);\n     }\n     if (cls \u003d\u003d MutableGaugeLong.class) {\n       return registry.newGauge(info, 0L);\n     }\n     if (cls \u003d\u003d MutableRate.class) {\n       return registry.newRate(info.name(), info.description(),\n                               annotation.always());\n     }\n     if (cls \u003d\u003d MutableRates.class) {\n       return new MutableRates(registry);\n     }\n     if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n-      MutableRatesWithAggregation rates \u003d new MutableRatesWithAggregation();\n-      registry.add(info.name(), rates);\n-      return rates;\n+      return registry.newRatesWithAggregation(info.name());\n     }\n     if (cls \u003d\u003d MutableStat.class) {\n       return registry.newStat(info.name(), info.description(),\n                               annotation.sampleName(), annotation.valueName(),\n                               annotation.always());\n     }\n     throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                                \" of type \"+ field.getType().getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n      return registry.newRatesWithAggregation(info.name());\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {}
    },
    "77c13c385774c51766fe505397fa916754ac08d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13782. Make MutableRates metrics thread-local write, aggregate-on-read. Contributed by Erik Krogen.\n",
      "commitDate": "08/11/16 4:07 PM",
      "commitName": "77c13c385774c51766fe505397fa916754ac08d4",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "15/10/12 9:29 PM",
      "commitNameOld": "41eec8a32b7b4c43094f5e5d4b55725b1b3f1441",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1484.82,
      "commitsBetweenForRepo": 10729,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,44 @@\n   MutableMetric newForField(Field field, Metric annotation,\n                             MetricsRegistry registry) {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n     }\n     MetricsInfo info \u003d getInfo(annotation, field);\n     MutableMetric metric \u003d newForField(field, annotation);\n     if (metric !\u003d null) {\n       registry.add(info.name(), metric);\n       return metric;\n     }\n     final Class\u003c?\u003e cls \u003d field.getType();\n     if (cls \u003d\u003d MutableCounterInt.class) {\n       return registry.newCounter(info, 0);\n     }\n     if (cls \u003d\u003d MutableCounterLong.class) {\n       return registry.newCounter(info, 0L);\n     }\n     if (cls \u003d\u003d MutableGaugeInt.class) {\n       return registry.newGauge(info, 0);\n     }\n     if (cls \u003d\u003d MutableGaugeLong.class) {\n       return registry.newGauge(info, 0L);\n     }\n     if (cls \u003d\u003d MutableRate.class) {\n       return registry.newRate(info.name(), info.description(),\n                               annotation.always());\n     }\n     if (cls \u003d\u003d MutableRates.class) {\n       return new MutableRates(registry);\n     }\n+    if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n+      MutableRatesWithAggregation rates \u003d new MutableRatesWithAggregation();\n+      registry.add(info.name(), rates);\n+      return rates;\n+    }\n     if (cls \u003d\u003d MutableStat.class) {\n       return registry.newStat(info.name(), info.description(),\n                               annotation.sampleName(), annotation.valueName(),\n                               annotation.always());\n     }\n     throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                                \" of type \"+ field.getType().getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableRatesWithAggregation.class) {\n      MutableRatesWithAggregation rates \u003d new MutableRatesWithAggregation();\n      registry.add(info.name(), rates);\n      return rates;\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java"
      }
    },
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6919. New metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 12:28 AM",
      "commitName": "827401a9b1d85fe1f443d21ebe9d917ba23153de",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,39 @@\n+  MutableMetric newForField(Field field, Metric annotation,\n+                            MetricsRegistry registry) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n+    }\n+    MetricsInfo info \u003d getInfo(annotation, field);\n+    MutableMetric metric \u003d newForField(field, annotation);\n+    if (metric !\u003d null) {\n+      registry.add(info.name(), metric);\n+      return metric;\n+    }\n+    final Class\u003c?\u003e cls \u003d field.getType();\n+    if (cls \u003d\u003d MutableCounterInt.class) {\n+      return registry.newCounter(info, 0);\n+    }\n+    if (cls \u003d\u003d MutableCounterLong.class) {\n+      return registry.newCounter(info, 0L);\n+    }\n+    if (cls \u003d\u003d MutableGaugeInt.class) {\n+      return registry.newGauge(info, 0);\n+    }\n+    if (cls \u003d\u003d MutableGaugeLong.class) {\n+      return registry.newGauge(info, 0L);\n+    }\n+    if (cls \u003d\u003d MutableRate.class) {\n+      return registry.newRate(info.name(), info.description(),\n+                              annotation.always());\n+    }\n+    if (cls \u003d\u003d MutableRates.class) {\n+      return new MutableRates(registry);\n+    }\n+    if (cls \u003d\u003d MutableStat.class) {\n+      return registry.newStat(info.name(), info.description(),\n+                              annotation.sampleName(), annotation.valueName(),\n+                              annotation.always());\n+    }\n+    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n+                               \" of type \"+ field.getType().getName());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  MutableMetric newForField(Field field, Metric annotation,\n                            MetricsRegistry registry) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"field \"+ field +\" with annotation \"+ annotation);\n    }\n    MetricsInfo info \u003d getInfo(annotation, field);\n    MutableMetric metric \u003d newForField(field, annotation);\n    if (metric !\u003d null) {\n      registry.add(info.name(), metric);\n      return metric;\n    }\n    final Class\u003c?\u003e cls \u003d field.getType();\n    if (cls \u003d\u003d MutableCounterInt.class) {\n      return registry.newCounter(info, 0);\n    }\n    if (cls \u003d\u003d MutableCounterLong.class) {\n      return registry.newCounter(info, 0L);\n    }\n    if (cls \u003d\u003d MutableGaugeInt.class) {\n      return registry.newGauge(info, 0);\n    }\n    if (cls \u003d\u003d MutableGaugeLong.class) {\n      return registry.newGauge(info, 0L);\n    }\n    if (cls \u003d\u003d MutableRate.class) {\n      return registry.newRate(info.name(), info.description(),\n                              annotation.always());\n    }\n    if (cls \u003d\u003d MutableRates.class) {\n      return new MutableRates(registry);\n    }\n    if (cls \u003d\u003d MutableStat.class) {\n      return registry.newStat(info.name(), info.description(),\n                              annotation.sampleName(), annotation.valueName(),\n                              annotation.always());\n    }\n    throw new MetricsException(\"Unsupported metric field \"+ field.getName() +\n                               \" of type \"+ field.getType().getName());\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/lib/MutableMetricsFactory.java"
    }
  }
}