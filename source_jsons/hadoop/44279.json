{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractLauncher.java",
  "functionName": "completeContainerLaunch",
  "functionId": "completeContainerLaunch",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
  "functionStartLine": 111,
  "functionEndLine": 179,
  "numCommitsSeen": 17,
  "timeTaken": 5294,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "d45a0b7d73519acb78cd94ac3186bd8481f6c13e",
    "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "8d335e59cf9fa794a379b12f06d2d54f1b781118",
    "bce06ed1af8183865889e554c2b353836deb034a",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "d45a0b7d73519acb78cd94ac3186bd8481f6c13e": "Ybodychange",
    "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymovefromfile",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ybodychange",
    "8d335e59cf9fa794a379b12f06d2d54f1b781118": "Ybodychange",
    "bce06ed1af8183865889e554c2b353836deb034a": "Ybodychange",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "14/08/18 8:36 AM",
      "commitNameOld": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 195.17,
      "commitsBetweenForRepo": 1529,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(envVars);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     if (context.tokens !\u003d null) {\n       containerLaunchContext.setTokens(context.tokens.duplicate());\n     }\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n       if (ServiceUtils.isSet(dockerNetwork)) {\n         env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\",\n             dockerNetwork);\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n           dockerHostname);\n       if (runPrivilegedContainer) {\n         env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\",\n             \"true\");\n       }\n       if (!mountPaths.isEmpty()) {\n         StringBuilder sb \u003d new StringBuilder();\n         if (env.get(ENV_DOCKER_CONTAINER_MOUNTS) !\u003d null) {\n           // user specified mounts in the spec\n           sb.append(env.get(ENV_DOCKER_CONTAINER_MOUNTS));\n         }\n         for (Entry\u003cString, String\u003e mount : mountPaths.entrySet()) {\n           if (sb.length() \u003e 0) {\n             sb.append(\",\");\n           }\n-          sb.append(mount.getKey()).append(\":\");\n-          sb.append(mount.getValue()).append(\":ro\");\n+          sb.append(mount.getKey()).append(\":\")\n+              .append(mount.getValue()).append(\":ro\");\n         }\n         env.put(ENV_DOCKER_CONTAINER_MOUNTS, sb.toString());\n       }\n       log.info(\"yarn docker env var has been set {}\",\n           containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    if (context.tokens !\u003d null) {\n      containerLaunchContext.setTokens(context.tokens.duplicate());\n    }\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      if (ServiceUtils.isSet(dockerNetwork)) {\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\",\n            dockerNetwork);\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      if (runPrivilegedContainer) {\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\",\n            \"true\");\n      }\n      if (!mountPaths.isEmpty()) {\n        StringBuilder sb \u003d new StringBuilder();\n        if (env.get(ENV_DOCKER_CONTAINER_MOUNTS) !\u003d null) {\n          // user specified mounts in the spec\n          sb.append(env.get(ENV_DOCKER_CONTAINER_MOUNTS));\n        }\n        for (Entry\u003cString, String\u003e mount : mountPaths.entrySet()) {\n          if (sb.length() \u003e 0) {\n            sb.append(\",\");\n          }\n          sb.append(mount.getKey()).append(\":\")\n              .append(mount.getValue()).append(\":ro\");\n        }\n        env.put(ENV_DOCKER_CONTAINER_MOUNTS, sb.toString());\n      }\n      log.info(\"yarn docker env var has been set {}\",\n          containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "d45a0b7d73519acb78cd94ac3186bd8481f6c13e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8141.  Removed YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS flag.\n            Contributed by Chandni Singh\n",
      "commitDate": "17/05/18 2:29 PM",
      "commitName": "d45a0b7d73519acb78cd94ac3186bd8481f6c13e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "23/03/18 12:54 PM",
      "commitNameOld": "647058efc0c7a4442b3e64b4d743df1a589f26bc",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 55.07,
      "commitsBetweenForRepo": 879,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,69 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(envVars);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     if (context.tokens !\u003d null) {\n       containerLaunchContext.setTokens(context.tokens.duplicate());\n     }\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n       if (ServiceUtils.isSet(dockerNetwork)) {\n         env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\",\n             dockerNetwork);\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n           dockerHostname);\n       if (runPrivilegedContainer) {\n         env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\",\n             \"true\");\n       }\n-      StringBuilder sb \u003d new StringBuilder();\n-      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n-        if (sb.length() \u003e 0) {\n-          sb.append(\",\");\n+      if (!mountPaths.isEmpty()) {\n+        StringBuilder sb \u003d new StringBuilder();\n+        if (env.get(ENV_DOCKER_CONTAINER_MOUNTS) !\u003d null) {\n+          // user specified mounts in the spec\n+          sb.append(env.get(ENV_DOCKER_CONTAINER_MOUNTS));\n         }\n-        sb.append(mount.getKey());\n-        sb.append(\":\");\n-        sb.append(mount.getValue());\n+        for (Entry\u003cString, String\u003e mount : mountPaths.entrySet()) {\n+          if (sb.length() \u003e 0) {\n+            sb.append(\",\");\n+          }\n+          sb.append(mount.getKey()).append(\":\");\n+          sb.append(mount.getValue()).append(\":ro\");\n+        }\n+        env.put(ENV_DOCKER_CONTAINER_MOUNTS, sb.toString());\n       }\n-      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n-      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n+      log.info(\"yarn docker env var has been set {}\",\n+          containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    if (context.tokens !\u003d null) {\n      containerLaunchContext.setTokens(context.tokens.duplicate());\n    }\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      if (ServiceUtils.isSet(dockerNetwork)) {\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\",\n            dockerNetwork);\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      if (runPrivilegedContainer) {\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\",\n            \"true\");\n      }\n      if (!mountPaths.isEmpty()) {\n        StringBuilder sb \u003d new StringBuilder();\n        if (env.get(ENV_DOCKER_CONTAINER_MOUNTS) !\u003d null) {\n          // user specified mounts in the spec\n          sb.append(env.get(ENV_DOCKER_CONTAINER_MOUNTS));\n        }\n        for (Entry\u003cString, String\u003e mount : mountPaths.entrySet()) {\n          if (sb.length() \u003e 0) {\n            sb.append(\",\");\n          }\n          sb.append(mount.getKey()).append(\":\");\n          sb.append(mount.getValue()).append(\":ro\");\n        }\n        env.put(ENV_DOCKER_CONTAINER_MOUNTS, sb.toString());\n      }\n      log.info(\"yarn docker env var has been set {}\",\n          containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7811.  Fixed a bug in user defined docker network settings.  (Contributed by Billie Rinaldi)\n",
      "commitDate": "30/01/18 9:42 AM",
      "commitName": "f9dd5b61f4ed0288cc01cb1a676df8c9cd69cdd9",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 56.9,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,63 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(envVars);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     if (context.tokens !\u003d null) {\n       containerLaunchContext.setTokens(context.tokens.duplicate());\n     }\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n-      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n+      if (ServiceUtils.isSet(dockerNetwork)) {\n+        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\",\n+            dockerNetwork);\n+      }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n           dockerHostname);\n-      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n+      if (runPrivilegedContainer) {\n+        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\",\n+            \"true\");\n+      }\n       StringBuilder sb \u003d new StringBuilder();\n       for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n         if (sb.length() \u003e 0) {\n           sb.append(\",\");\n         }\n         sb.append(mount.getKey());\n         sb.append(\":\");\n         sb.append(mount.getValue());\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n       log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    if (context.tokens !\u003d null) {\n      containerLaunchContext.setTokens(context.tokens.duplicate());\n    }\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      if (ServiceUtils.isSet(dockerNetwork)) {\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\",\n            dockerNetwork);\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      if (runPrivilegedContainer) {\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\",\n            \"true\");\n      }\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 27.94,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(envVars);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n-    log.debug(\"{} tokens\", credentials.numberOfTokens());\n-    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n-        credentials));\n+    if (context.tokens !\u003d null) {\n+      containerLaunchContext.setTokens(context.tokens.duplicate());\n+    }\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n           dockerHostname);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n       StringBuilder sb \u003d new StringBuilder();\n       for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n         if (sb.length() \u003e 0) {\n           sb.append(\",\");\n         }\n         sb.append(mount.getKey());\n         sb.append(\":\");\n         sb.append(mount.getValue());\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n       log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    if (context.tokens !\u003d null) {\n      containerLaunchContext.setTokens(context.tokens.duplicate());\n    }\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n-    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n+    String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(envVars);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     log.debug(\"{} tokens\", credentials.numberOfTokens());\n     containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n         credentials));\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n           dockerHostname);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n       StringBuilder sb \u003d new StringBuilder();\n       for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n         if (sb.length() \u003e 0) {\n           sb.append(\",\");\n         }\n         sb.append(mount.getKey());\n         sb.append(\":\");\n         sb.append(mount.getValue());\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n       log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d ServiceUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/core/launch/AbstractLauncher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/containerlaunch/AbstractLauncher.java",
        "oldMethodName": "completeContainerLaunch",
        "newMethodName": "completeContainerLaunch"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n-    containerLaunchContext.setEnvironment(env);\n+    containerLaunchContext.setEnvironment(envVars);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     log.debug(\"{} tokens\", credentials.numberOfTokens());\n     containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n         credentials));\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n           dockerHostname);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n       StringBuilder sb \u003d new StringBuilder();\n       for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n         if (sb.length() \u003e 0) {\n           sb.append(\",\");\n         }\n         sb.append(mount.getKey());\n         sb.append(\":\");\n         sb.append(mount.getValue());\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n       log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(envVars);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/core/launch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "8d335e59cf9fa794a379b12f06d2d54f1b781118": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6804. [yarn-native-services changes] Allow custom hostname for docker containers in native services. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "384ee13eeccef6994b5f5b2ea8de4513e52c2124",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,57 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(env);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     log.debug(\"{} tokens\", credentials.numberOfTokens());\n     containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n         credentials));\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n+      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n+          dockerHostname);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n       StringBuilder sb \u003d new StringBuilder();\n       for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n         if (sb.length() \u003e 0) {\n           sb.append(\",\");\n         }\n         sb.append(mount.getKey());\n         sb.append(\":\");\n         sb.append(mount.getValue());\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n       log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(env);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\",\n          dockerHostname);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/core/launch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "bce06ed1af8183865889e554c2b353836deb034a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5505. Create an agent-less docker provider in the native-services framework. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "bce06ed1af8183865889e554c2b353836deb034a",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public ContainerLaunchContext completeContainerLaunch() throws IOException {\n     \n     String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n     log.debug(\"Completed setting up container command {}\", cmdStr);\n     containerLaunchContext.setCommands(commands);\n \n     //env variables\n     if (log.isDebugEnabled()) {\n       log.debug(\"Environment variables\");\n       for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n         log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n       }\n     }    \n     containerLaunchContext.setEnvironment(env);\n \n     //service data\n     if (log.isDebugEnabled()) {\n       log.debug(\"Service Data size\");\n       for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n         log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n             entry.getValue().array().length);\n       }\n     }\n     containerLaunchContext.setServiceData(serviceData);\n \n     // resources\n     dumpLocalResources();\n     containerLaunchContext.setLocalResources(localResources);\n \n     //tokens\n     log.debug(\"{} tokens\", credentials.numberOfTokens());\n     containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n         credentials));\n \n     if(yarnDockerMode){\n       Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n       env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n-      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);//if yarnDockerMode, then dockerImage is set\n+      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n+      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n       StringBuilder sb \u003d new StringBuilder();\n       for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n         if (sb.length() \u003e 0) {\n           sb.append(\",\");\n         }\n         sb.append(mount.getKey());\n         sb.append(\":\");\n         sb.append(mount.getValue());\n       }\n       env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n       log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n     }\n \n     return containerLaunchContext;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(env);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/core/launch/AbstractLauncher.java",
      "extendedDetails": {}
    },
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5461. Initial code ported from slider-core module. (jianhe)\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,54 @@\n+  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n+    \n+    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n+    log.debug(\"Completed setting up container command {}\", cmdStr);\n+    containerLaunchContext.setCommands(commands);\n+\n+    //env variables\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Environment variables\");\n+      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n+        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n+      }\n+    }    \n+    containerLaunchContext.setEnvironment(env);\n+\n+    //service data\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Service Data size\");\n+      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n+        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n+            entry.getValue().array().length);\n+      }\n+    }\n+    containerLaunchContext.setServiceData(serviceData);\n+\n+    // resources\n+    dumpLocalResources();\n+    containerLaunchContext.setLocalResources(localResources);\n+\n+    //tokens\n+    log.debug(\"{} tokens\", credentials.numberOfTokens());\n+    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n+        credentials));\n+\n+    if(yarnDockerMode){\n+      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n+      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n+      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);//if yarnDockerMode, then dockerImage is set\n+      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n+      StringBuilder sb \u003d new StringBuilder();\n+      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n+        if (sb.length() \u003e 0) {\n+          sb.append(\",\");\n+        }\n+        sb.append(mount.getKey());\n+        sb.append(\":\");\n+        sb.append(mount.getValue());\n+      }\n+      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n+      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n+    }\n+\n+    return containerLaunchContext;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerLaunchContext completeContainerLaunch() throws IOException {\n    \n    String cmdStr \u003d SliderUtils.join(commands, \" \", false);\n    log.debug(\"Completed setting up container command {}\", cmdStr);\n    containerLaunchContext.setCommands(commands);\n\n    //env variables\n    if (log.isDebugEnabled()) {\n      log.debug(\"Environment variables\");\n      for (Map.Entry\u003cString, String\u003e envPair : envVars.entrySet()) {\n        log.debug(\"    \\\"{}\\\"\u003d\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\n      }\n    }    \n    containerLaunchContext.setEnvironment(env);\n\n    //service data\n    if (log.isDebugEnabled()) {\n      log.debug(\"Service Data size\");\n      for (Map.Entry\u003cString, ByteBuffer\u003e entry : serviceData.entrySet()) {\n        log.debug(\"\\\"{}\\\"\u003d\u003e {} bytes of data\", entry.getKey(),\n            entry.getValue().array().length);\n      }\n    }\n    containerLaunchContext.setServiceData(serviceData);\n\n    // resources\n    dumpLocalResources();\n    containerLaunchContext.setLocalResources(localResources);\n\n    //tokens\n    log.debug(\"{} tokens\", credentials.numberOfTokens());\n    containerLaunchContext.setTokens(CredentialUtils.marshallCredentials(\n        credentials));\n\n    if(yarnDockerMode){\n      Map\u003cString, String\u003e env \u003d containerLaunchContext.getEnvironment();\n      env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);//if yarnDockerMode, then dockerImage is set\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", runPrivilegedContainer);\n      StringBuilder sb \u003d new StringBuilder();\n      for (Entry\u003cString,String\u003e mount : mountPaths.entrySet()) {\n        if (sb.length() \u003e 0) {\n          sb.append(\",\");\n        }\n        sb.append(mount.getKey());\n        sb.append(\":\");\n        sb.append(mount.getValue());\n      }\n      env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_LOCAL_RESOURCE_MOUNTS\", sb.toString());\n      log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\n    }\n\n    return containerLaunchContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/core/launch/AbstractLauncher.java"
    }
  }
}