{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSSchedulerNode.java",
  "functionName": "allocateContainer",
  "functionId": "allocateContainer___rmContainer-RMContainer__launchedOnNode-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java",
  "functionStartLine": 241,
  "functionEndLine": 272,
  "numCommitsSeen": 22,
  "timeTaken": 2022,
  "changeHistory": [
    "958e8c0e257216c82f68fee726e5280a919da94a",
    "c3375175d616e0380560f89d491b6b9753a8f3e1"
  ],
  "changeHistoryShort": {
    "958e8c0e257216c82f68fee726e5280a919da94a": "Ybodychange",
    "c3375175d616e0380560f89d491b6b9753a8f3e1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "958e8c0e257216c82f68fee726e5280a919da94a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6977. Node information is not provided for non am containers in RM logs. (Suma Shivaprasad via wangda)\n\nChange-Id: I0c44d09a560446dee2ba68c2b9ae69fce0ec1d3e\n(cherry picked from commit 8a42e922fad613f3cf1cc6cb0f3fa72546a9cc56)\n",
      "commitDate": "15/09/17 9:29 PM",
      "commitName": "958e8c0e257216c82f68fee726e5280a919da94a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/08/17 9:25 AM",
      "commitNameOld": "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 44.5,
      "commitsBetweenForRepo": 409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,32 @@\n   protected synchronized void allocateContainer(RMContainer rmContainer,\n                                                 boolean launchedOnNode) {\n     super.allocateContainer(rmContainer, launchedOnNode);\n+    if (LOG.isDebugEnabled()) {\n+      final Container container \u003d rmContainer.getContainer();\n+      LOG.debug(\"Assigned container \" + container.getId() + \" of capacity \"\n+          + container.getResource() + \" on host \" + getRMNode().getNodeAddress()\n+          + \", which has \" + getNumContainers() + \" containers, \"\n+          + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n+          + \" available after allocation\");\n+    }\n+\n     Resource allocated \u003d rmContainer.getAllocatedResource();\n     if (!Resources.isNone(allocated)) {\n       // check for satisfied preemption request and update bookkeeping\n       FSAppAttempt app \u003d\n           appIdToAppMap.get(rmContainer.getApplicationAttemptId());\n       if (app !\u003d null) {\n         Resource reserved \u003d resourcesPreemptedForApp.get(app);\n         Resource fulfilled \u003d Resources.componentwiseMin(reserved, allocated);\n         Resources.subtractFrom(reserved, fulfilled);\n         Resources.subtractFrom(totalResourcesPreempted, fulfilled);\n         if (Resources.isNone(reserved)) {\n           // No more preempted containers\n           resourcesPreemptedForApp.remove(app);\n           appIdToAppMap.remove(rmContainer.getApplicationAttemptId());\n         }\n       }\n     } else {\n       LOG.error(\"Allocated empty container\" + rmContainer.getContainerId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void allocateContainer(RMContainer rmContainer,\n                                                boolean launchedOnNode) {\n    super.allocateContainer(rmContainer, launchedOnNode);\n    if (LOG.isDebugEnabled()) {\n      final Container container \u003d rmContainer.getContainer();\n      LOG.debug(\"Assigned container \" + container.getId() + \" of capacity \"\n          + container.getResource() + \" on host \" + getRMNode().getNodeAddress()\n          + \", which has \" + getNumContainers() + \" containers, \"\n          + getAllocatedResource() + \" used and \" + getUnallocatedResource()\n          + \" available after allocation\");\n    }\n\n    Resource allocated \u003d rmContainer.getAllocatedResource();\n    if (!Resources.isNone(allocated)) {\n      // check for satisfied preemption request and update bookkeeping\n      FSAppAttempt app \u003d\n          appIdToAppMap.get(rmContainer.getApplicationAttemptId());\n      if (app !\u003d null) {\n        Resource reserved \u003d resourcesPreemptedForApp.get(app);\n        Resource fulfilled \u003d Resources.componentwiseMin(reserved, allocated);\n        Resources.subtractFrom(reserved, fulfilled);\n        Resources.subtractFrom(totalResourcesPreempted, fulfilled);\n        if (Resources.isNone(reserved)) {\n          // No more preempted containers\n          resourcesPreemptedForApp.remove(app);\n          appIdToAppMap.remove(rmContainer.getApplicationAttemptId());\n        }\n      }\n    } else {\n      LOG.error(\"Allocated empty container\" + rmContainer.getContainerId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java",
      "extendedDetails": {}
    },
    "c3375175d616e0380560f89d491b6b9753a8f3e1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
      "commitDate": "12/04/17 2:21 PM",
      "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,23 @@\n+  protected synchronized void allocateContainer(RMContainer rmContainer,\n+                                                boolean launchedOnNode) {\n+    super.allocateContainer(rmContainer, launchedOnNode);\n+    Resource allocated \u003d rmContainer.getAllocatedResource();\n+    if (!Resources.isNone(allocated)) {\n+      // check for satisfied preemption request and update bookkeeping\n+      FSAppAttempt app \u003d\n+          appIdToAppMap.get(rmContainer.getApplicationAttemptId());\n+      if (app !\u003d null) {\n+        Resource reserved \u003d resourcesPreemptedForApp.get(app);\n+        Resource fulfilled \u003d Resources.componentwiseMin(reserved, allocated);\n+        Resources.subtractFrom(reserved, fulfilled);\n+        Resources.subtractFrom(totalResourcesPreempted, fulfilled);\n+        if (Resources.isNone(reserved)) {\n+          // No more preempted containers\n+          resourcesPreemptedForApp.remove(app);\n+          appIdToAppMap.remove(rmContainer.getApplicationAttemptId());\n+        }\n+      }\n+    } else {\n+      LOG.error(\"Allocated empty container\" + rmContainer.getContainerId());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void allocateContainer(RMContainer rmContainer,\n                                                boolean launchedOnNode) {\n    super.allocateContainer(rmContainer, launchedOnNode);\n    Resource allocated \u003d rmContainer.getAllocatedResource();\n    if (!Resources.isNone(allocated)) {\n      // check for satisfied preemption request and update bookkeeping\n      FSAppAttempt app \u003d\n          appIdToAppMap.get(rmContainer.getApplicationAttemptId());\n      if (app !\u003d null) {\n        Resource reserved \u003d resourcesPreemptedForApp.get(app);\n        Resource fulfilled \u003d Resources.componentwiseMin(reserved, allocated);\n        Resources.subtractFrom(reserved, fulfilled);\n        Resources.subtractFrom(totalResourcesPreempted, fulfilled);\n        if (Resources.isNone(reserved)) {\n          // No more preempted containers\n          resourcesPreemptedForApp.remove(app);\n          appIdToAppMap.remove(rmContainer.getApplicationAttemptId());\n        }\n      }\n    } else {\n      LOG.error(\"Allocated empty container\" + rmContainer.getContainerId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java"
    }
  }
}