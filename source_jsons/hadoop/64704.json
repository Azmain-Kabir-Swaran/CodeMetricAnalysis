{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "innerListFiles",
  "functionId": "innerListFiles___f-Path(modifiers-final)__recursive-boolean(modifiers-final)__acceptor-Listing.FileStatusAcceptor(modifiers-final)__status-S3AFileStatus(modifiers-final)__collectTombstones-boolean(modifiers-final)__forceNonAuthoritativeMS-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 4173,
  "functionEndLine": 4255,
  "numCommitsSeen": 389,
  "timeTaken": 9166,
  "changeHistory": [
    "5977360878e6780bd04842c8a2156f9848e1d088",
    "ea25f4de236611d388e14a710ebe5d6872c421b6",
    "511df1e837b19ccb9271520589452d82d50ac69d",
    "34747c373f40a33d36a2e21ecb33fa791ccd939f",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
    "ef450df443f1dea1c52082cf281f25db7141972f",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "5977360878e6780bd04842c8a2156f9848e1d088": "Ymultichange(Yparameterchange,Ybodychange)",
    "ea25f4de236611d388e14a710ebe5d6872c421b6": "Ybodychange",
    "511df1e837b19ccb9271520589452d82d50ac69d": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "34747c373f40a33d36a2e21ecb33fa791ccd939f": "Ybodychange",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3": "Ybodychange",
    "ef450df443f1dea1c52082cf281f25db7141972f": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5977360878e6780bd04842c8a2156f9848e1d088": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16801. S3Guard listFiles will not query S3 if all listings are authoritative (#1815). Contributed by Mustafa İman.\n\n",
      "commitDate": "30/01/20 2:16 AM",
      "commitName": "5977360878e6780bd04842c8a2156f9848e1d088",
      "commitAuthor": "Mustafa İman",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16801. S3Guard listFiles will not query S3 if all listings are authoritative (#1815). Contributed by Mustafa İman.\n\n",
          "commitDate": "30/01/20 2:16 AM",
          "commitName": "5977360878e6780bd04842c8a2156f9848e1d088",
          "commitAuthor": "Mustafa İman",
          "commitDateOld": "25/01/20 10:35 AM",
          "commitNameOld": "7f40e6688a5716fca53e1090d8347a43064d6d43",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 4.65,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,83 @@\n   private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n       final Path f,\n       final boolean recursive,\n       final Listing.FileStatusAcceptor acceptor,\n       final S3AFileStatus status,\n-      final boolean collectTombstones) throws IOException {\n+      final boolean collectTombstones,\n+      final boolean forceNonAuthoritativeMS) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // if a status was given, that is used, otherwise\n       // call getFileStatus, which triggers an existence check\n       final S3AFileStatus fileStatus \u003d status !\u003d null\n           ? status\n           : (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         boolean allowAuthoritative \u003d allowAuthoritative(f);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n+          // if all of the below is true\n+          //  - authoritative access is allowed for this metadatastore for this directory,\n+          //  - all the directory listings are authoritative on the client\n+          //  - the caller does not force non-authoritative access\n+          // return the listing without any further s3 access\n+          if (!forceNonAuthoritativeMS \u0026\u0026\n+              allowAuthoritative \u0026\u0026\n+              metadataStoreListFilesIterator.isRecursivelyAuthoritative()) {\n+            S3AFileStatus[] statuses \u003d S3Guard.iteratorToStatuses(\n+                metadataStoreListFilesIterator, tombstones);\n+            cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n+                statuses, ACCEPT_ALL, acceptor);\n+            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n+          }\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider,\n                   allowAuthoritative);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             collectTombstones ? tombstones : null);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n      final Path f,\n      final boolean recursive,\n      final Listing.FileStatusAcceptor acceptor,\n      final S3AFileStatus status,\n      final boolean collectTombstones,\n      final boolean forceNonAuthoritativeMS) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // if a status was given, that is used, otherwise\n      // call getFileStatus, which triggers an existence check\n      final S3AFileStatus fileStatus \u003d status !\u003d null\n          ? status\n          : (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d allowAuthoritative(f);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          // if all of the below is true\n          //  - authoritative access is allowed for this metadatastore for this directory,\n          //  - all the directory listings are authoritative on the client\n          //  - the caller does not force non-authoritative access\n          // return the listing without any further s3 access\n          if (!forceNonAuthoritativeMS \u0026\u0026\n              allowAuthoritative \u0026\u0026\n              metadataStoreListFilesIterator.isRecursivelyAuthoritative()) {\n            S3AFileStatus[] statuses \u003d S3Guard.iteratorToStatuses(\n                metadataStoreListFilesIterator, tombstones);\n            cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n                statuses, ACCEPT_ALL, acceptor);\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider,\n                  allowAuthoritative);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            collectTombstones ? tombstones : null);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path(modifiers-final), recursive-boolean(modifiers-final), acceptor-Listing.FileStatusAcceptor(modifiers-final), status-S3AFileStatus(modifiers-final), collectTombstones-boolean(modifiers-final)]",
            "newValue": "[f-Path(modifiers-final), recursive-boolean(modifiers-final), acceptor-Listing.FileStatusAcceptor(modifiers-final), status-S3AFileStatus(modifiers-final), collectTombstones-boolean(modifiers-final), forceNonAuthoritativeMS-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16801. S3Guard listFiles will not query S3 if all listings are authoritative (#1815). Contributed by Mustafa İman.\n\n",
          "commitDate": "30/01/20 2:16 AM",
          "commitName": "5977360878e6780bd04842c8a2156f9848e1d088",
          "commitAuthor": "Mustafa İman",
          "commitDateOld": "25/01/20 10:35 AM",
          "commitNameOld": "7f40e6688a5716fca53e1090d8347a43064d6d43",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 4.65,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,83 @@\n   private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n       final Path f,\n       final boolean recursive,\n       final Listing.FileStatusAcceptor acceptor,\n       final S3AFileStatus status,\n-      final boolean collectTombstones) throws IOException {\n+      final boolean collectTombstones,\n+      final boolean forceNonAuthoritativeMS) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // if a status was given, that is used, otherwise\n       // call getFileStatus, which triggers an existence check\n       final S3AFileStatus fileStatus \u003d status !\u003d null\n           ? status\n           : (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         boolean allowAuthoritative \u003d allowAuthoritative(f);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n+          // if all of the below is true\n+          //  - authoritative access is allowed for this metadatastore for this directory,\n+          //  - all the directory listings are authoritative on the client\n+          //  - the caller does not force non-authoritative access\n+          // return the listing without any further s3 access\n+          if (!forceNonAuthoritativeMS \u0026\u0026\n+              allowAuthoritative \u0026\u0026\n+              metadataStoreListFilesIterator.isRecursivelyAuthoritative()) {\n+            S3AFileStatus[] statuses \u003d S3Guard.iteratorToStatuses(\n+                metadataStoreListFilesIterator, tombstones);\n+            cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n+                statuses, ACCEPT_ALL, acceptor);\n+            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n+          }\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider,\n                   allowAuthoritative);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             collectTombstones ? tombstones : null);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n      final Path f,\n      final boolean recursive,\n      final Listing.FileStatusAcceptor acceptor,\n      final S3AFileStatus status,\n      final boolean collectTombstones,\n      final boolean forceNonAuthoritativeMS) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // if a status was given, that is used, otherwise\n      // call getFileStatus, which triggers an existence check\n      final S3AFileStatus fileStatus \u003d status !\u003d null\n          ? status\n          : (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d allowAuthoritative(f);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          // if all of the below is true\n          //  - authoritative access is allowed for this metadatastore for this directory,\n          //  - all the directory listings are authoritative on the client\n          //  - the caller does not force non-authoritative access\n          // return the listing without any further s3 access\n          if (!forceNonAuthoritativeMS \u0026\u0026\n              allowAuthoritative \u0026\u0026\n              metadataStoreListFilesIterator.isRecursivelyAuthoritative()) {\n            S3AFileStatus[] statuses \u003d S3Guard.iteratorToStatuses(\n                metadataStoreListFilesIterator, tombstones);\n            cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n                statuses, ACCEPT_ALL, acceptor);\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider,\n                  allowAuthoritative);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            collectTombstones ? tombstones : null);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "ea25f4de236611d388e14a710ebe5d6872c421b6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16709. S3Guard: Make authoritative mode exclusive for metadata - don\u0027t check for expiry for authoritative paths (#1721). Contributed by Gabor Bota.\n\n",
      "commitDate": "26/11/19 7:36 AM",
      "commitName": "ea25f4de236611d388e14a710ebe5d6872c421b6",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "12/11/19 10:17 AM",
      "commitNameOld": "990063d2af0a37e9474949f33128805e34c3f016",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.89,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,68 @@\n   private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n       final Path f,\n       final boolean recursive,\n       final Listing.FileStatusAcceptor acceptor,\n       final S3AFileStatus status,\n       final boolean collectTombstones) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // if a status was given, that is used, otherwise\n       // call getFileStatus, which triggers an existence check\n       final S3AFileStatus fileStatus \u003d status !\u003d null\n           ? status\n           : (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         boolean allowAuthoritative \u003d allowAuthoritative(f);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n-              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n+              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider,\n+                  allowAuthoritative);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             collectTombstones ? tombstones : null);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n      final Path f,\n      final boolean recursive,\n      final Listing.FileStatusAcceptor acceptor,\n      final S3AFileStatus status,\n      final boolean collectTombstones) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // if a status was given, that is used, otherwise\n      // call getFileStatus, which triggers an existence check\n      final S3AFileStatus fileStatus \u003d status !\u003d null\n          ? status\n          : (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d allowAuthoritative(f);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider,\n                  allowAuthoritative);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            collectTombstones ? tombstones : null);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "511df1e837b19ccb9271520589452d82d50ac69d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
      "commitDate": "05/09/19 6:25 AM",
      "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
          "commitDate": "05/09/19 6:25 AM",
          "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "23/07/19 6:52 AM",
          "commitNameOld": "4317d332321778269a583e2223d433107fab82eb",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 43.98,
          "commitsBetweenForRepo": 415,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,67 @@\n-  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n-      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n+  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n+      final Path f,\n+      final boolean recursive,\n+      final Listing.FileStatusAcceptor acceptor,\n+      final S3AFileStatus status,\n+      final boolean collectTombstones) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n-      // lookup dir triggers existence check\n-      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n+      // if a status was given, that is used, otherwise\n+      // call getFileStatus, which triggers an existence check\n+      final S3AFileStatus fileStatus \u003d status !\u003d null\n+          ? status\n+          : (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n-        boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n-            allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n+        boolean allowAuthoritative \u003d allowAuthoritative(f);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n-            tombstones);\n+            collectTombstones ? tombstones : null);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n      final Path f,\n      final boolean recursive,\n      final Listing.FileStatusAcceptor acceptor,\n      final S3AFileStatus status,\n      final boolean collectTombstones) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // if a status was given, that is used, otherwise\n      // call getFileStatus, which triggers an existence check\n      final S3AFileStatus fileStatus \u003d status !\u003d null\n          ? status\n          : (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d allowAuthoritative(f);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            collectTombstones ? tombstones : null);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path, recursive-boolean, acceptor-Listing.FileStatusAcceptor]",
            "newValue": "[f-Path(modifiers-final), recursive-boolean(modifiers-final), acceptor-Listing.FileStatusAcceptor(modifiers-final), status-S3AFileStatus(modifiers-final), collectTombstones-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
          "commitDate": "05/09/19 6:25 AM",
          "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "23/07/19 6:52 AM",
          "commitNameOld": "4317d332321778269a583e2223d433107fab82eb",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 43.98,
          "commitsBetweenForRepo": 415,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,67 @@\n-  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n-      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n+  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n+      final Path f,\n+      final boolean recursive,\n+      final Listing.FileStatusAcceptor acceptor,\n+      final S3AFileStatus status,\n+      final boolean collectTombstones) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n-      // lookup dir triggers existence check\n-      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n+      // if a status was given, that is used, otherwise\n+      // call getFileStatus, which triggers an existence check\n+      final S3AFileStatus fileStatus \u003d status !\u003d null\n+          ? status\n+          : (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n-        boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n-            allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n+        boolean allowAuthoritative \u003d allowAuthoritative(f);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n-            tombstones);\n+            collectTombstones ? tombstones : null);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n      final Path f,\n      final boolean recursive,\n      final Listing.FileStatusAcceptor acceptor,\n      final S3AFileStatus status,\n      final boolean collectTombstones) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // if a status was given, that is used, otherwise\n      // call getFileStatus, which triggers an existence check\n      final S3AFileStatus fileStatus \u003d status !\u003d null\n          ? status\n          : (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d allowAuthoritative(f);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            collectTombstones ? tombstones : null);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
          "commitDate": "05/09/19 6:25 AM",
          "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "23/07/19 6:52 AM",
          "commitNameOld": "4317d332321778269a583e2223d433107fab82eb",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 43.98,
          "commitsBetweenForRepo": 415,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,67 @@\n-  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n-      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n+  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n+      final Path f,\n+      final boolean recursive,\n+      final Listing.FileStatusAcceptor acceptor,\n+      final S3AFileStatus status,\n+      final boolean collectTombstones) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n-      // lookup dir triggers existence check\n-      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n+      // if a status was given, that is used, otherwise\n+      // call getFileStatus, which triggers an existence check\n+      final S3AFileStatus fileStatus \u003d status !\u003d null\n+          ? status\n+          : (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n-        boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n-            allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n+        boolean allowAuthoritative \u003d allowAuthoritative(f);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n-            tombstones);\n+            collectTombstones ? tombstones : null);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(\n      final Path f,\n      final boolean recursive,\n      final Listing.FileStatusAcceptor acceptor,\n      final S3AFileStatus status,\n      final boolean collectTombstones) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // if a status was given, that is used, otherwise\n      // call getFileStatus, which triggers an existence check\n      final S3AFileStatus fileStatus \u003d status !\u003d null\n          ? status\n          : (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d allowAuthoritative(f);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            collectTombstones ? tombstones : null);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path, recursive-boolean, acceptor-Listing.FileStatusAcceptor]",
            "newValue": "[f-Path(modifiers-final), recursive-boolean(modifiers-final), acceptor-Listing.FileStatusAcceptor(modifiers-final), status-S3AFileStatus(modifiers-final), collectTombstones-boolean(modifiers-final)]"
          }
        }
      ]
    },
    "34747c373f40a33d36a2e21ecb33fa791ccd939f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16396. Allow authoritative mode on a subdirectory. (#1043)\n\n",
      "commitDate": "03/07/19 11:04 AM",
      "commitName": "34747c373f40a33d36a2e21ecb33fa791ccd939f",
      "commitAuthor": "Sean Mackrory",
      "commitDateOld": "20/06/19 1:56 AM",
      "commitNameOld": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.38,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,62 @@\n   private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n       recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // lookup dir triggers existence check\n       final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n+        boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n+            allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n+\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             tombstones);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // lookup dir triggers existence check\n      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        boolean allowAuthoritative \u003d S3Guard.allowAuthoritative(f, this,\n            allowAuthoritativeMetadataStore, allowAuthoritativePaths);\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            tombstones);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n-  private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n+  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n       recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // lookup dir triggers existence check\n-      final FileStatus fileStatus \u003d getFileStatus(path);\n+      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n-        final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n+        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             tombstones);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // lookup dir triggers existence check\n      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            tombstones);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "RemoteIterator\u003cLocatedFileStatus\u003e",
            "newValue": "RemoteIterator\u003cS3ALocatedFileStatus\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n-  private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n+  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n       recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // lookup dir triggers existence check\n-      final FileStatus fileStatus \u003d getFileStatus(path);\n+      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n-        final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n+        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d\n               S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             tombstones);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RemoteIterator\u003cS3ALocatedFileStatus\u003e innerListFiles(Path f, boolean\n      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // lookup dir triggers existence check\n      final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cS3AFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            tombstones);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15621 S3Guard: Implement time-based (TTL) expiry for Authoritative Directory Listing. Contributed by Gabor Bota\n",
      "commitDate": "02/10/18 9:22 PM",
      "commitName": "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "12/09/18 9:04 PM",
      "commitNameOld": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 20.01,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n       recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n     entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // lookup dir triggers existence check\n       final FileStatus fileStatus \u003d getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n-          DirListingMetadata meta \u003d metadataStore.listChildren(path);\n+          DirListingMetadata meta \u003d\n+              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             tombstones);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // lookup dir triggers existence check\n      final FileStatus fileStatus \u003d getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d\n              S3Guard.listChildrenWithTtl(metadataStore, path, ttlTimeProvider);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            tombstones);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "ef450df443f1dea1c52082cf281f25db7141972f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15113. NPE in S3A getFileStatus: null instrumentation on using closed instance.\nContributed by Steve Loughran.\n",
      "commitDate": "21/12/17 6:15 AM",
      "commitName": "ef450df443f1dea1c52082cf281f25db7141972f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/12/17 1:19 PM",
      "commitNameOld": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n       recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n-    incrementStatistic(INVOCATION_LIST_FILES);\n+    entryPoint(INVOCATION_LIST_FILES);\n     Path path \u003d qualify(f);\n     LOG.debug(\"listFiles({}, {})\", path, recursive);\n     try {\n       // lookup dir triggers existence check\n       final FileStatus fileStatus \u003d getFileStatus(path);\n       if (fileStatus.isFile()) {\n         // simple case: File\n         LOG.debug(\"Path is a file\");\n         return new Listing.SingleStatusRemoteIterator(\n             toLocatedFileStatus(fileStatus));\n       } else {\n         // directory: do a bulk operation\n         String key \u003d maybeAddTrailingSlash(pathToKey(path));\n         String delimiter \u003d recursive ? null : \"/\";\n         LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n             key, delimiter);\n         final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n         final Set\u003cPath\u003e tombstones;\n         if (recursive) {\n           final PathMetadata pm \u003d metadataStore.get(path, true);\n           // shouldn\u0027t need to check pm.isDeleted() because that will have\n           // been caught by getFileStatus above.\n           MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n               new MetadataStoreListFilesIterator(metadataStore, pm,\n                   allowAuthoritative);\n           tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n           cachedFilesIterator \u003d metadataStoreListFilesIterator;\n         } else {\n           DirListingMetadata meta \u003d metadataStore.listChildren(path);\n           if (meta !\u003d null) {\n             tombstones \u003d meta.listTombstones();\n           } else {\n             tombstones \u003d null;\n           }\n           cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n               S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n           if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n             // metadata listing is authoritative, so return it directly\n             return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n           }\n         }\n         return listing.createTombstoneReconcilingIterator(\n             listing.createLocatedFileStatusIterator(\n                 listing.createFileStatusListingIterator(path,\n                     createListObjectsRequest(key, delimiter),\n                     ACCEPT_ALL,\n                     acceptor,\n                     cachedFilesIterator)),\n             tombstones);\n       }\n     } catch (AmazonClientException e) {\n       // TODO S3Guard: retry on file not found exception\n       throw translateException(\"listFiles\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n    entryPoint(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // lookup dir triggers existence check\n      final FileStatus fileStatus \u003d getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d metadataStore.listChildren(path);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            tombstones);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,58 @@\n+  private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n+      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n+    incrementStatistic(INVOCATION_LIST_FILES);\n+    Path path \u003d qualify(f);\n+    LOG.debug(\"listFiles({}, {})\", path, recursive);\n+    try {\n+      // lookup dir triggers existence check\n+      final FileStatus fileStatus \u003d getFileStatus(path);\n+      if (fileStatus.isFile()) {\n+        // simple case: File\n+        LOG.debug(\"Path is a file\");\n+        return new Listing.SingleStatusRemoteIterator(\n+            toLocatedFileStatus(fileStatus));\n+      } else {\n+        // directory: do a bulk operation\n+        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n+        String delimiter \u003d recursive ? null : \"/\";\n+        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n+            key, delimiter);\n+        final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n+        final Set\u003cPath\u003e tombstones;\n+        if (recursive) {\n+          final PathMetadata pm \u003d metadataStore.get(path, true);\n+          // shouldn\u0027t need to check pm.isDeleted() because that will have\n+          // been caught by getFileStatus above.\n+          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n+              new MetadataStoreListFilesIterator(metadataStore, pm,\n+                  allowAuthoritative);\n+          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n+          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n+        } else {\n+          DirListingMetadata meta \u003d metadataStore.listChildren(path);\n+          if (meta !\u003d null) {\n+            tombstones \u003d meta.listTombstones();\n+          } else {\n+            tombstones \u003d null;\n+          }\n+          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n+              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n+          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n+            // metadata listing is authoritative, so return it directly\n+            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n+          }\n+        }\n+        return listing.createTombstoneReconcilingIterator(\n+            listing.createLocatedFileStatusIterator(\n+                listing.createFileStatusListingIterator(path,\n+                    createListObjectsRequest(key, delimiter),\n+                    ACCEPT_ALL,\n+                    acceptor,\n+                    cachedFilesIterator)),\n+            tombstones);\n+      }\n+    } catch (AmazonClientException e) {\n+      // TODO S3Guard: retry on file not found exception\n+      throw translateException(\"listFiles\", path, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private RemoteIterator\u003cLocatedFileStatus\u003e innerListFiles(Path f, boolean\n      recursive, Listing.FileStatusAcceptor acceptor) throws IOException {\n    incrementStatistic(INVOCATION_LIST_FILES);\n    Path path \u003d qualify(f);\n    LOG.debug(\"listFiles({}, {})\", path, recursive);\n    try {\n      // lookup dir triggers existence check\n      final FileStatus fileStatus \u003d getFileStatus(path);\n      if (fileStatus.isFile()) {\n        // simple case: File\n        LOG.debug(\"Path is a file\");\n        return new Listing.SingleStatusRemoteIterator(\n            toLocatedFileStatus(fileStatus));\n      } else {\n        // directory: do a bulk operation\n        String key \u003d maybeAddTrailingSlash(pathToKey(path));\n        String delimiter \u003d recursive ? null : \"/\";\n        LOG.debug(\"Requesting all entries under {} with delimiter \u0027{}\u0027\",\n            key, delimiter);\n        final RemoteIterator\u003cFileStatus\u003e cachedFilesIterator;\n        final Set\u003cPath\u003e tombstones;\n        if (recursive) {\n          final PathMetadata pm \u003d metadataStore.get(path, true);\n          // shouldn\u0027t need to check pm.isDeleted() because that will have\n          // been caught by getFileStatus above.\n          MetadataStoreListFilesIterator metadataStoreListFilesIterator \u003d\n              new MetadataStoreListFilesIterator(metadataStore, pm,\n                  allowAuthoritative);\n          tombstones \u003d metadataStoreListFilesIterator.listTombstones();\n          cachedFilesIterator \u003d metadataStoreListFilesIterator;\n        } else {\n          DirListingMetadata meta \u003d metadataStore.listChildren(path);\n          if (meta !\u003d null) {\n            tombstones \u003d meta.listTombstones();\n          } else {\n            tombstones \u003d null;\n          }\n          cachedFilesIterator \u003d listing.createProvidedFileStatusIterator(\n              S3Guard.dirMetaToStatuses(meta), ACCEPT_ALL, acceptor);\n          if (allowAuthoritative \u0026\u0026 meta !\u003d null \u0026\u0026 meta.isAuthoritative()) {\n            // metadata listing is authoritative, so return it directly\n            return listing.createLocatedFileStatusIterator(cachedFilesIterator);\n          }\n        }\n        return listing.createTombstoneReconcilingIterator(\n            listing.createLocatedFileStatusIterator(\n                listing.createFileStatusListingIterator(path,\n                    createListObjectsRequest(key, delimiter),\n                    ACCEPT_ALL,\n                    acceptor,\n                    cachedFilesIterator)),\n            tombstones);\n      }\n    } catch (AmazonClientException e) {\n      // TODO S3Guard: retry on file not found exception\n      throw translateException(\"listFiles\", path, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}