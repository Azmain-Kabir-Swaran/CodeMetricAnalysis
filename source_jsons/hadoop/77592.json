{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RetryInvocationHandler.java",
  "functionName": "processWaitTimeAndRetryInfo",
  "functionId": "processWaitTimeAndRetryInfo",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
  "functionStartLine": 124,
  "functionEndLine": 144,
  "numCommitsSeen": 39,
  "timeTaken": 1276,
  "changeHistory": [
    "eec52e158b7bc14b2d3d53512323ba05e15e09e3",
    "d328e667067743f723e332d92154da8e84e65742"
  ],
  "changeHistoryShort": {
    "eec52e158b7bc14b2d3d53512323ba05e15e09e3": "Ybodychange",
    "d328e667067743f723e332d92154da8e84e65742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eec52e158b7bc14b2d3d53512323ba05e15e09e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6145. Improve log message on fail over. Contributed by Jian He.\n",
      "commitDate": "08/02/17 2:11 AM",
      "commitName": "eec52e158b7bc14b2d3d53512323ba05e15e09e3",
      "commitAuthor": "Junping Du",
      "commitDateOld": "29/08/16 8:55 AM",
      "commitNameOld": "92d8f371553b88e5b3a9d3354e93f75d60d81368",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 162.76,
      "commitsBetweenForRepo": 1022,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n     CallReturn processWaitTimeAndRetryInfo() throws InterruptedIOException {\n       final Long waitTime \u003d getWaitTime(Time.monotonicNow());\n       LOG.trace(\"#{} processRetryInfo: retryInfo\u003d{}, waitTime\u003d{}\",\n           callId, retryInfo, waitTime);\n       if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0) {\n         try {\n           Thread.sleep(retryInfo.delay);\n         } catch (InterruptedException e) {\n           Thread.currentThread().interrupt();\n-          LOG.warn(\"Interrupted while waiting to retry\", e);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Interrupted while waiting to retry\", e);\n+          }\n           InterruptedIOException intIOE \u003d new InterruptedIOException(\n               \"Retry interrupted\");\n           intIOE.initCause(e);\n           throw intIOE;\n         }\n       }\n       processRetryInfo();\n       return CallReturn.RETRY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    CallReturn processWaitTimeAndRetryInfo() throws InterruptedIOException {\n      final Long waitTime \u003d getWaitTime(Time.monotonicNow());\n      LOG.trace(\"#{} processRetryInfo: retryInfo\u003d{}, waitTime\u003d{}\",\n          callId, retryInfo, waitTime);\n      if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0) {\n        try {\n          Thread.sleep(retryInfo.delay);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Interrupted while waiting to retry\", e);\n          }\n          InterruptedIOException intIOE \u003d new InterruptedIOException(\n              \"Retry interrupted\");\n          intIOE.initCause(e);\n          throw intIOE;\n        }\n      }\n      processRetryInfo();\n      return CallReturn.RETRY;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
      "extendedDetails": {}
    },
    "d328e667067743f723e332d92154da8e84e65742": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
      "commitDate": "25/06/16 12:45 AM",
      "commitName": "d328e667067743f723e332d92154da8e84e65742",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,19 @@\n+    CallReturn processWaitTimeAndRetryInfo() throws InterruptedIOException {\n+      final Long waitTime \u003d getWaitTime(Time.monotonicNow());\n+      LOG.trace(\"#{} processRetryInfo: retryInfo\u003d{}, waitTime\u003d{}\",\n+          callId, retryInfo, waitTime);\n+      if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0) {\n+        try {\n+          Thread.sleep(retryInfo.delay);\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          LOG.warn(\"Interrupted while waiting to retry\", e);\n+          InterruptedIOException intIOE \u003d new InterruptedIOException(\n+              \"Retry interrupted\");\n+          intIOE.initCause(e);\n+          throw intIOE;\n+        }\n+      }\n+      processRetryInfo();\n+      return CallReturn.RETRY;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    CallReturn processWaitTimeAndRetryInfo() throws InterruptedIOException {\n      final Long waitTime \u003d getWaitTime(Time.monotonicNow());\n      LOG.trace(\"#{} processRetryInfo: retryInfo\u003d{}, waitTime\u003d{}\",\n          callId, retryInfo, waitTime);\n      if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0) {\n        try {\n          Thread.sleep(retryInfo.delay);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          LOG.warn(\"Interrupted while waiting to retry\", e);\n          InterruptedIOException intIOE \u003d new InterruptedIOException(\n              \"Retry interrupted\");\n          intIOE.initCause(e);\n          throw intIOE;\n        }\n      }\n      processRetryInfo();\n      return CallReturn.RETRY;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java"
    }
  }
}