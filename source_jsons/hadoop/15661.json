{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReadOnlyList.java",
  "functionName": "asList",
  "functionId": "asList___list-ReadOnlyList__E__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/ReadOnlyList.java",
  "functionStartLine": 120,
  "functionEndLine": 256,
  "numCommitsSeen": 3,
  "timeTaken": 1336,
  "changeHistory": [
    "96e8f260ab90cc7b5a5aa2a59c182ef20a028238",
    "099762a0bc960066f8157fdd1e495b6752a6f802"
  ],
  "changeHistoryShort": {
    "96e8f260ab90cc7b5a5aa2a59c182ef20a028238": "Ybodychange",
    "099762a0bc960066f8157fdd1e495b6752a6f802": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96e8f260ab90cc7b5a5aa2a59c182ef20a028238": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13211. Fix a bug in DirectoryDiffList.getMinListForRange.  Contributed by Shashikant Banerjee\n",
      "commitDate": "01/03/18 2:12 PM",
      "commitName": "96e8f260ab90cc7b5a5aa2a59c182ef20a028238",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "15/11/12 1:34 PM",
      "commitNameOld": "8ca8687fb2fc74ab7c5199a93c70661996ad9e72",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1932.03,
      "commitsBetweenForRepo": 13516,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,137 @@\n     public static \u003cE\u003e List\u003cE\u003e asList(final ReadOnlyList\u003cE\u003e list) {\n       return new List\u003cE\u003e() {\n         @Override\n         public Iterator\u003cE\u003e iterator() {\n           return list.iterator();\n         }\n \n         @Override\n         public boolean isEmpty() {\n           return list.isEmpty();\n         }\n \n         @Override\n         public int size() {\n           return list.size();\n         }\n \n         @Override\n         public E get(int i) {\n           return list.get(i);\n         }\n \n         @Override\n         public Object[] toArray() {\n           final Object[] a \u003d new Object[size()];\n           for(int i \u003d 0; i \u003c a.length; i++) {\n             a[i] \u003d get(i);\n           }\n           return a;\n         }\n \n         //All methods below are not supported.\n \n         @Override\n         public boolean add(E e) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public void add(int index, E element) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean addAll(Collection\u003c? extends E\u003e c) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public void clear() {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean contains(Object o) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean containsAll(Collection\u003c?\u003e c) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public int indexOf(Object o) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public int lastIndexOf(Object o) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public ListIterator\u003cE\u003e listIterator() {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public ListIterator\u003cE\u003e listIterator(int index) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean remove(Object o) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public E remove(int index) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean removeAll(Collection\u003c?\u003e c) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public boolean retainAll(Collection\u003c?\u003e c) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public E set(int index, E element) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public List\u003cE\u003e subList(int fromIndex, int toIndex) {\n           throw new UnsupportedOperationException();\n         }\n \n         @Override\n         public \u003cT\u003e T[] toArray(T[] a) {\n           throw new UnsupportedOperationException();\n         }\n+\n+        @Override\n+        public String toString() {\n+          if (list.isEmpty()) {\n+            return \"[]\";\n+          }\n+          final Iterator\u003cE\u003e i \u003d list.iterator();\n+          final StringBuilder b \u003d new StringBuilder(\"[\").append(i.next());\n+          for(; i.hasNext();) {\n+            b.append(\", \").append(i.next());\n+          }\n+          return b + \"]\";\n+        }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static \u003cE\u003e List\u003cE\u003e asList(final ReadOnlyList\u003cE\u003e list) {\n      return new List\u003cE\u003e() {\n        @Override\n        public Iterator\u003cE\u003e iterator() {\n          return list.iterator();\n        }\n\n        @Override\n        public boolean isEmpty() {\n          return list.isEmpty();\n        }\n\n        @Override\n        public int size() {\n          return list.size();\n        }\n\n        @Override\n        public E get(int i) {\n          return list.get(i);\n        }\n\n        @Override\n        public Object[] toArray() {\n          final Object[] a \u003d new Object[size()];\n          for(int i \u003d 0; i \u003c a.length; i++) {\n            a[i] \u003d get(i);\n          }\n          return a;\n        }\n\n        //All methods below are not supported.\n\n        @Override\n        public boolean add(E e) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void add(int index, E element) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean addAll(Collection\u003c? extends E\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void clear() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean contains(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean containsAll(Collection\u003c?\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int indexOf(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int lastIndexOf(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public ListIterator\u003cE\u003e listIterator() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public ListIterator\u003cE\u003e listIterator(int index) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean remove(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public E remove(int index) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean removeAll(Collection\u003c?\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean retainAll(Collection\u003c?\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public E set(int index, E element) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public List\u003cE\u003e subList(int fromIndex, int toIndex) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public \u003cT\u003e T[] toArray(T[] a) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public String toString() {\n          if (list.isEmpty()) {\n            return \"[]\";\n          }\n          final Iterator\u003cE\u003e i \u003d list.iterator();\n          final StringBuilder b \u003d new StringBuilder(\"[\").append(i.next());\n          for(; i.hasNext();) {\n            b.append(\", \").append(i.next());\n          }\n          return b + \"]\";\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/ReadOnlyList.java",
      "extendedDetails": {}
    },
    "099762a0bc960066f8157fdd1e495b6752a6f802": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4177. Add a snapshot parameter to INodeDirectory.getChildrenList() for selecting particular snapshot children list views.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1408923 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/12 11:59 AM",
      "commitName": "099762a0bc960066f8157fdd1e495b6752a6f802",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,124 @@\n+    public static \u003cE\u003e List\u003cE\u003e asList(final ReadOnlyList\u003cE\u003e list) {\n+      return new List\u003cE\u003e() {\n+        @Override\n+        public Iterator\u003cE\u003e iterator() {\n+          return list.iterator();\n+        }\n+\n+        @Override\n+        public boolean isEmpty() {\n+          return list.isEmpty();\n+        }\n+\n+        @Override\n+        public int size() {\n+          return list.size();\n+        }\n+\n+        @Override\n+        public E get(int i) {\n+          return list.get(i);\n+        }\n+\n+        @Override\n+        public Object[] toArray() {\n+          final Object[] a \u003d new Object[size()];\n+          for(int i \u003d 0; i \u003c a.length; i++) {\n+            a[i] \u003d get(i);\n+          }\n+          return a;\n+        }\n+\n+        //All methods below are not supported.\n+\n+        @Override\n+        public boolean add(E e) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void add(int index, E element) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean addAll(Collection\u003c? extends E\u003e c) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public void clear() {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean contains(Object o) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean containsAll(Collection\u003c?\u003e c) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public int indexOf(Object o) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public int lastIndexOf(Object o) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public ListIterator\u003cE\u003e listIterator() {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public ListIterator\u003cE\u003e listIterator(int index) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean remove(Object o) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public E remove(int index) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean removeAll(Collection\u003c?\u003e c) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public boolean retainAll(Collection\u003c?\u003e c) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public E set(int index, E element) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public List\u003cE\u003e subList(int fromIndex, int toIndex) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public \u003cT\u003e T[] toArray(T[] a) {\n+          throw new UnsupportedOperationException();\n+        }\n+      };\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static \u003cE\u003e List\u003cE\u003e asList(final ReadOnlyList\u003cE\u003e list) {\n      return new List\u003cE\u003e() {\n        @Override\n        public Iterator\u003cE\u003e iterator() {\n          return list.iterator();\n        }\n\n        @Override\n        public boolean isEmpty() {\n          return list.isEmpty();\n        }\n\n        @Override\n        public int size() {\n          return list.size();\n        }\n\n        @Override\n        public E get(int i) {\n          return list.get(i);\n        }\n\n        @Override\n        public Object[] toArray() {\n          final Object[] a \u003d new Object[size()];\n          for(int i \u003d 0; i \u003c a.length; i++) {\n            a[i] \u003d get(i);\n          }\n          return a;\n        }\n\n        //All methods below are not supported.\n\n        @Override\n        public boolean add(E e) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void add(int index, E element) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean addAll(Collection\u003c? extends E\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean addAll(int index, Collection\u003c? extends E\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void clear() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean contains(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean containsAll(Collection\u003c?\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int indexOf(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int lastIndexOf(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public ListIterator\u003cE\u003e listIterator() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public ListIterator\u003cE\u003e listIterator(int index) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean remove(Object o) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public E remove(int index) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean removeAll(Collection\u003c?\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean retainAll(Collection\u003c?\u003e c) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public E set(int index, E element) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public List\u003cE\u003e subList(int fromIndex, int toIndex) {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public \u003cT\u003e T[] toArray(T[] a) {\n          throw new UnsupportedOperationException();\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/ReadOnlyList.java"
    }
  }
}