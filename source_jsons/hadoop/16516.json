{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterAdminServer.java",
  "functionName": "getDestination",
  "functionId": "getDestination___request-GetDestinationRequest",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
  "functionStartLine": 543,
  "functionEndLine": 570,
  "numCommitsSeen": 24,
  "timeTaken": 814,
  "changeHistory": [
    "8b8ff5ccbc677d98a91092b2fa64999a99d1595d"
  ],
  "changeHistoryShort": {
    "8b8ff5ccbc677d98a91092b2fa64999a99d1595d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b8ff5ccbc677d98a91092b2fa64999a99d1595d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14249. RBF: Tooling to identify the subcluster location of a file. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "8b8ff5ccbc677d98a91092b2fa64999a99d1595d",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "diff": "@@ -0,0 +1,28 @@\n+  public GetDestinationResponse getDestination(\n+      GetDestinationRequest request) throws IOException {\n+    final String src \u003d request.getSrcPath();\n+    final List\u003cString\u003e nsIds \u003d new ArrayList\u003c\u003e();\n+    RouterRpcServer rpcServer \u003d this.router.getRpcServer();\n+    List\u003cRemoteLocation\u003e locations \u003d rpcServer.getLocationsForPath(src, false);\n+    RouterRpcClient rpcClient \u003d rpcServer.getRPCClient();\n+    RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n+        new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n+    try {\n+      Map\u003cRemoteLocation, HdfsFileStatus\u003e responses \u003d\n+          rpcClient.invokeConcurrent(\n+              locations, method, false, false, HdfsFileStatus.class);\n+      for (RemoteLocation location : locations) {\n+        if (responses.get(location) !\u003d null) {\n+          nsIds.add(location.getNameserviceId());\n+        }\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Cannot get location for {}: {}\",\n+          src, ioe.getMessage());\n+    }\n+    if (nsIds.isEmpty() \u0026\u0026 !locations.isEmpty()) {\n+      String nsId \u003d locations.get(0).getNameserviceId();\n+      nsIds.add(nsId);\n+    }\n+    return GetDestinationResponse.newInstance(nsIds);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetDestinationResponse getDestination(\n      GetDestinationRequest request) throws IOException {\n    final String src \u003d request.getSrcPath();\n    final List\u003cString\u003e nsIds \u003d new ArrayList\u003c\u003e();\n    RouterRpcServer rpcServer \u003d this.router.getRpcServer();\n    List\u003cRemoteLocation\u003e locations \u003d rpcServer.getLocationsForPath(src, false);\n    RouterRpcClient rpcClient \u003d rpcServer.getRPCClient();\n    RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n        new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n    try {\n      Map\u003cRemoteLocation, HdfsFileStatus\u003e responses \u003d\n          rpcClient.invokeConcurrent(\n              locations, method, false, false, HdfsFileStatus.class);\n      for (RemoteLocation location : locations) {\n        if (responses.get(location) !\u003d null) {\n          nsIds.add(location.getNameserviceId());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get location for {}: {}\",\n          src, ioe.getMessage());\n    }\n    if (nsIds.isEmpty() \u0026\u0026 !locations.isEmpty()) {\n      String nsId \u003d locations.get(0).getNameserviceId();\n      nsIds.add(nsId);\n    }\n    return GetDestinationResponse.newInstance(nsIds);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java"
    }
  }
}