{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawLocalFileSystem.java",
  "functionName": "listStatus",
  "functionId": "listStatus___f-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
  "functionStartLine": 486,
  "functionEndLine": 522,
  "numCommitsSeen": 73,
  "timeTaken": 3259,
  "changeHistory": [
    "efdf810cf9f72d78e97e860576c64a382ece437c",
    "5f6bc65bb31270f2b5dfdfd941a0568fc1f3337f",
    "97056c3355810a803f07baca89b89e2bf6bb7201",
    "d96bbe152cf536304208f2e8f35deb3b2aa91d2b",
    "2088309d66541d74f2abde4e28bbf301aad7c0be",
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
    "f593d5729687ec1acc6b6a253303a2b5481dc962",
    "16fe97bebf8a8ee806df5012b0254d261d6ed17a",
    "b73903f6a7d0f7cc89c94d1c8e4e04fa60aeaf13",
    "22cb0ec82a663137dfbaef7a088fb1ac76df6568",
    "07c5741c9a5ebec78a0db046e7fefcae2ca4b6af",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "566597503ce7b00c5c62ece919eb2e33c84bfc6b",
    "76a77aea78301c6b632d06d20520abc8a21d4cb0",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "efdf810cf9f72d78e97e860576c64a382ece437c": "Ybodychange",
    "5f6bc65bb31270f2b5dfdfd941a0568fc1f3337f": "Ybodychange",
    "97056c3355810a803f07baca89b89e2bf6bb7201": "Ybodychange",
    "d96bbe152cf536304208f2e8f35deb3b2aa91d2b": "Ybodychange",
    "2088309d66541d74f2abde4e28bbf301aad7c0be": "Ybodychange",
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": "Ybodychange",
    "f593d5729687ec1acc6b6a253303a2b5481dc962": "Ybodychange",
    "16fe97bebf8a8ee806df5012b0254d261d6ed17a": "Ybodychange",
    "b73903f6a7d0f7cc89c94d1c8e4e04fa60aeaf13": "Ybodychange",
    "22cb0ec82a663137dfbaef7a088fb1ac76df6568": "Ybodychange",
    "07c5741c9a5ebec78a0db046e7fefcae2ca4b6af": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "566597503ce7b00c5c62ece919eb2e33c84bfc6b": "Ybodychange",
    "76a77aea78301c6b632d06d20520abc8a21d4cb0": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efdf810cf9f72d78e97e860576c64a382ece437c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7352. FileSystem#listStatus should throw IOE upon access error. Contributed by John Zhuge.\n",
      "commitDate": "18/10/16 6:18 PM",
      "commitName": "efdf810cf9f72d78e97e860576c64a382ece437c",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "18/07/16 6:38 AM",
      "commitNameOld": "76be82bc0419affbe0103bc4f45c90926f08d0cc",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 92.49,
      "commitsBetweenForRepo": 617,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n \n     if (localf.isDirectory()) {\n-      String[] names \u003d localf.list();\n-      if (names \u003d\u003d null) {\n-        return null;\n-      }\n+      String[] names \u003d FileUtil.list(localf);\n       results \u003d new FileStatus[names.length];\n       int j \u003d 0;\n       for (int i \u003d 0; i \u003c names.length; i++) {\n         try {\n           // Assemble the path using the Path 3 arg constructor to make sure\n           // paths with colon are properly resolved on Linux\n           results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                           names[i])));\n           j++;\n         } catch (FileNotFoundException e) {\n           // ignore the files not found since the dir list may have have\n           // changed since the names[] list was generated.\n         }\n       }\n       if (j \u003d\u003d names.length) {\n         return results;\n       }\n       return Arrays.copyOf(results, j);\n     }\n \n     if (!useDeprecatedFileStatus) {\n       return new FileStatus[] { getFileStatus(f) };\n     }\n     return new FileStatus[] {\n         new DeprecatedRawLocalFileStatus(localf,\n         getDefaultBlockSize(f), this) };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n\n    if (localf.isDirectory()) {\n      String[] names \u003d FileUtil.list(localf);\n      results \u003d new FileStatus[names.length];\n      int j \u003d 0;\n      for (int i \u003d 0; i \u003c names.length; i++) {\n        try {\n          // Assemble the path using the Path 3 arg constructor to make sure\n          // paths with colon are properly resolved on Linux\n          results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                          names[i])));\n          j++;\n        } catch (FileNotFoundException e) {\n          // ignore the files not found since the dir list may have have\n          // changed since the names[] list was generated.\n        }\n      }\n      if (j \u003d\u003d names.length) {\n        return results;\n      }\n      return Arrays.copyOf(results, j);\n    }\n\n    if (!useDeprecatedFileStatus) {\n      return new FileStatus[] { getFileStatus(f) };\n    }\n    return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf,\n        getDefaultBlockSize(f), this) };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "5f6bc65bb31270f2b5dfdfd941a0568fc1f3337f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-12718. Incorrect error message by fs -put local dir without permission. (John Zhuge via Yongjun Zhang)\"\n\nThis reverts commit 97056c3355810a803f07baca89b89e2bf6bb7201.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n",
      "commitDate": "17/06/16 11:50 PM",
      "commitName": "5f6bc65bb31270f2b5dfdfd941a0568fc1f3337f",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "08/04/16 1:36 PM",
      "commitNameOld": "843ee8d59d8bacbca0d87ccf0790772e39d16138",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 70.43,
      "commitsBetweenForRepo": 458,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,40 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n \n     if (localf.isDirectory()) {\n       String[] names \u003d localf.list();\n       if (names \u003d\u003d null) {\n-        if (!localf.canRead()) {\n-          throw new AccessDeniedException(\"cannot open directory \" + f +\n-              \": Permission denied\");\n-        }\n         return null;\n       }\n       results \u003d new FileStatus[names.length];\n       int j \u003d 0;\n       for (int i \u003d 0; i \u003c names.length; i++) {\n         try {\n           // Assemble the path using the Path 3 arg constructor to make sure\n           // paths with colon are properly resolved on Linux\n           results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                           names[i])));\n           j++;\n         } catch (FileNotFoundException e) {\n           // ignore the files not found since the dir list may have have\n           // changed since the names[] list was generated.\n         }\n       }\n       if (j \u003d\u003d names.length) {\n         return results;\n       }\n       return Arrays.copyOf(results, j);\n     }\n \n     if (!useDeprecatedFileStatus) {\n       return new FileStatus[] { getFileStatus(f) };\n     }\n     return new FileStatus[] {\n         new DeprecatedRawLocalFileStatus(localf,\n         getDefaultBlockSize(f), this) };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n\n    if (localf.isDirectory()) {\n      String[] names \u003d localf.list();\n      if (names \u003d\u003d null) {\n        return null;\n      }\n      results \u003d new FileStatus[names.length];\n      int j \u003d 0;\n      for (int i \u003d 0; i \u003c names.length; i++) {\n        try {\n          // Assemble the path using the Path 3 arg constructor to make sure\n          // paths with colon are properly resolved on Linux\n          results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                          names[i])));\n          j++;\n        } catch (FileNotFoundException e) {\n          // ignore the files not found since the dir list may have have\n          // changed since the names[] list was generated.\n        }\n      }\n      if (j \u003d\u003d names.length) {\n        return results;\n      }\n      return Arrays.copyOf(results, j);\n    }\n\n    if (!useDeprecatedFileStatus) {\n      return new FileStatus[] { getFileStatus(f) };\n    }\n    return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf,\n        getDefaultBlockSize(f), this) };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "97056c3355810a803f07baca89b89e2bf6bb7201": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12718. Incorrect error message by fs -put local dir without permission. (John Zhuge via Yongjun Zhang)\n",
      "commitDate": "27/01/16 8:04 AM",
      "commitName": "97056c3355810a803f07baca89b89e2bf6bb7201",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "28/09/15 3:31 PM",
      "commitNameOld": "3abbdc929bde05f8819f5410cef1eaeb8940203f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 120.73,
      "commitsBetweenForRepo": 823,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n \n     if (localf.isDirectory()) {\n       String[] names \u003d localf.list();\n       if (names \u003d\u003d null) {\n+        if (!localf.canRead()) {\n+          throw new AccessDeniedException(\"cannot open directory \" + f +\n+              \": Permission denied\");\n+        }\n         return null;\n       }\n       results \u003d new FileStatus[names.length];\n       int j \u003d 0;\n       for (int i \u003d 0; i \u003c names.length; i++) {\n         try {\n           // Assemble the path using the Path 3 arg constructor to make sure\n           // paths with colon are properly resolved on Linux\n           results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                           names[i])));\n           j++;\n         } catch (FileNotFoundException e) {\n           // ignore the files not found since the dir list may have have\n           // changed since the names[] list was generated.\n         }\n       }\n       if (j \u003d\u003d names.length) {\n         return results;\n       }\n       return Arrays.copyOf(results, j);\n     }\n \n     if (!useDeprecatedFileStatus) {\n       return new FileStatus[] { getFileStatus(f) };\n     }\n     return new FileStatus[] {\n         new DeprecatedRawLocalFileStatus(localf,\n         getDefaultBlockSize(f), this) };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n\n    if (localf.isDirectory()) {\n      String[] names \u003d localf.list();\n      if (names \u003d\u003d null) {\n        if (!localf.canRead()) {\n          throw new AccessDeniedException(\"cannot open directory \" + f +\n              \": Permission denied\");\n        }\n        return null;\n      }\n      results \u003d new FileStatus[names.length];\n      int j \u003d 0;\n      for (int i \u003d 0; i \u003c names.length; i++) {\n        try {\n          // Assemble the path using the Path 3 arg constructor to make sure\n          // paths with colon are properly resolved on Linux\n          results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                          names[i])));\n          j++;\n        } catch (FileNotFoundException e) {\n          // ignore the files not found since the dir list may have have\n          // changed since the names[] list was generated.\n        }\n      }\n      if (j \u003d\u003d names.length) {\n        return results;\n      }\n      return Arrays.copyOf(results, j);\n    }\n\n    if (!useDeprecatedFileStatus) {\n      return new FileStatus[] { getFileStatus(f) };\n    }\n    return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf,\n        getDefaultBlockSize(f), this) };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "d96bbe152cf536304208f2e8f35deb3b2aa91d2b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8767. RawLocalFileSystem.listStatus() returns null for UNIX pipefile. Contributed by kanaka kumar avvaru.\n",
      "commitDate": "16/07/15 3:21 PM",
      "commitName": "d96bbe152cf536304208f2e8f35deb3b2aa91d2b",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/07/15 1:40 PM",
      "commitNameOld": "ed1e3ce482f679ae2fad43a203f6578d7af59327",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 10.07,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n-    if (localf.isFile()) {\n-      if (!useDeprecatedFileStatus) {\n-        return new FileStatus[] { getFileStatus(f) };\n+\n+    if (localf.isDirectory()) {\n+      String[] names \u003d localf.list();\n+      if (names \u003d\u003d null) {\n+        return null;\n       }\n-      return new FileStatus[] {\n-        new DeprecatedRawLocalFileStatus(localf, getDefaultBlockSize(f), this)};\n+      results \u003d new FileStatus[names.length];\n+      int j \u003d 0;\n+      for (int i \u003d 0; i \u003c names.length; i++) {\n+        try {\n+          // Assemble the path using the Path 3 arg constructor to make sure\n+          // paths with colon are properly resolved on Linux\n+          results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n+                                                          names[i])));\n+          j++;\n+        } catch (FileNotFoundException e) {\n+          // ignore the files not found since the dir list may have have\n+          // changed since the names[] list was generated.\n+        }\n+      }\n+      if (j \u003d\u003d names.length) {\n+        return results;\n+      }\n+      return Arrays.copyOf(results, j);\n     }\n \n-    String[] names \u003d localf.list();\n-    if (names \u003d\u003d null) {\n-      return null;\n+    if (!useDeprecatedFileStatus) {\n+      return new FileStatus[] { getFileStatus(f) };\n     }\n-    results \u003d new FileStatus[names.length];\n-    int j \u003d 0;\n-    for (int i \u003d 0; i \u003c names.length; i++) {\n-      try {\n-        // Assemble the path using the Path 3 arg constructor to make sure\n-        // paths with colon are properly resolved on Linux\n-        results[j] \u003d getFileStatus(new Path(f, new Path(null, null, names[i])));\n-        j++;\n-      } catch (FileNotFoundException e) {\n-        // ignore the files not found since the dir list may have have changed\n-        // since the names[] list was generated.\n-      }\n-    }\n-    if (j \u003d\u003d names.length) {\n-      return results;\n-    }\n-    return Arrays.copyOf(results, j);\n+    return new FileStatus[] {\n+        new DeprecatedRawLocalFileStatus(localf,\n+        getDefaultBlockSize(f), this) };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n\n    if (localf.isDirectory()) {\n      String[] names \u003d localf.list();\n      if (names \u003d\u003d null) {\n        return null;\n      }\n      results \u003d new FileStatus[names.length];\n      int j \u003d 0;\n      for (int i \u003d 0; i \u003c names.length; i++) {\n        try {\n          // Assemble the path using the Path 3 arg constructor to make sure\n          // paths with colon are properly resolved on Linux\n          results[j] \u003d getFileStatus(new Path(f, new Path(null, null,\n                                                          names[i])));\n          j++;\n        } catch (FileNotFoundException e) {\n          // ignore the files not found since the dir list may have have\n          // changed since the names[] list was generated.\n        }\n      }\n      if (j \u003d\u003d names.length) {\n        return results;\n      }\n      return Arrays.copyOf(results, j);\n    }\n\n    if (!useDeprecatedFileStatus) {\n      return new FileStatus[] { getFileStatus(f) };\n    }\n    return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf,\n        getDefaultBlockSize(f), this) };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "2088309d66541d74f2abde4e28bbf301aad7c0be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9774. RawLocalFileSystem.listStatus() return absolute paths when input path is relative on Windows. Contributed by Shanyu Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518865 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/08/13 6:04 PM",
      "commitName": "2088309d66541d74f2abde4e28bbf301aad7c0be",
      "commitAuthor": "Ivan Mitic",
      "commitDateOld": "14/08/13 4:12 PM",
      "commitNameOld": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 15.08,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n       if (!useDeprecatedFileStatus) {\n         return new FileStatus[] { getFileStatus(f) };\n       }\n       return new FileStatus[] {\n         new DeprecatedRawLocalFileStatus(localf, getDefaultBlockSize(f), this)};\n     }\n \n-    File[] names \u003d localf.listFiles();\n+    String[] names \u003d localf.list();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n-        results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n+        // Assemble the path using the Path 3 arg constructor to make sure\n+        // paths with colon are properly resolved on Linux\n+        results[j] \u003d getFileStatus(new Path(f, new Path(null, null, names[i])));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      if (!useDeprecatedFileStatus) {\n        return new FileStatus[] { getFileStatus(f) };\n      }\n      return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf, getDefaultBlockSize(f), this)};\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        // Assemble the path using the Path 3 arg constructor to make sure\n        // paths with colon are properly resolved on Linux\n        results[j] \u003d getFileStatus(new Path(f, new Path(null, null, names[i])));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514088 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/13 4:12 PM",
      "commitName": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "06/08/13 1:35 PM",
      "commitNameOld": "f2942687d44caaaedae98132024f8fc1dc4a884a",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 8.11,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n+      if (!useDeprecatedFileStatus) {\n+        return new FileStatus[] { getFileStatus(f) };\n+      }\n       return new FileStatus[] {\n-        new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n+        new DeprecatedRawLocalFileStatus(localf, getDefaultBlockSize(f), this)};\n     }\n \n     File[] names \u003d localf.listFiles();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n         results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      if (!useDeprecatedFileStatus) {\n        return new FileStatus[] { getFileStatus(f) };\n      }\n      return new FileStatus[] {\n        new DeprecatedRawLocalFileStatus(localf, getDefaultBlockSize(f), this)};\n    }\n\n    File[] names \u003d localf.listFiles();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "f593d5729687ec1acc6b6a253303a2b5481dc962": {
      "type": "Ybodychange",
      "commitMessage": "revert HADOOP-9652\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508248 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 4:56 PM",
      "commitName": "f593d5729687ec1acc6b6a253303a2b5481dc962",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "26/07/13 4:02 PM",
      "commitNameOld": "16fe97bebf8a8ee806df5012b0254d261d6ed17a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 3.04,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,32 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n-      if (!Shell.WINDOWS) {\n-        return new FileStatus[] { getFileStatus(f) };\n-      }\n       return new FileStatus[] {\n         new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n     }\n \n     File[] names \u003d localf.listFiles();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n         results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n    }\n\n    File[] names \u003d localf.listFiles();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "16fe97bebf8a8ee806df5012b0254d261d6ed17a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507506 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/13 4:02 PM",
      "commitName": "16fe97bebf8a8ee806df5012b0254d261d6ed17a",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "26/07/13 1:47 PM",
      "commitNameOld": "38adf46c02c8c76f8b5c27d10a76efcc6a0533ca",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n+      if (!Shell.WINDOWS) {\n+        return new FileStatus[] { getFileStatus(f) };\n+      }\n       return new FileStatus[] {\n         new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n     }\n \n     File[] names \u003d localf.listFiles();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n         results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      if (!Shell.WINDOWS) {\n        return new FileStatus[] { getFileStatus(f) };\n      }\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n    }\n\n    File[] names \u003d localf.listFiles();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "b73903f6a7d0f7cc89c94d1c8e4e04fa60aeaf13": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8962. RawLocalFileSystem.listStatus fails when a child filename contains a colon (jlowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401325 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/10/12 8:47 AM",
      "commitName": "b73903f6a7d0f7cc89c94d1c8e4e04fa60aeaf13",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/09/12 9:06 PM",
      "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 33.49,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n       return new FileStatus[] {\n         new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n     }\n \n-    String[] names \u003d localf.list();\n+    File[] names \u003d localf.listFiles();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n-        results[j] \u003d getFileStatus(new Path(f, names[i]));\n+        results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n    }\n\n    File[] names \u003d localf.listFiles();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(names[i].getAbsolutePath()));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "22cb0ec82a663137dfbaef7a088fb1ac76df6568": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8422. Deprecate FileSystem#getDefault* and getServerDefault methods that don\u0027t take a Path argument. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342495 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/05/12 9:10 PM",
      "commitName": "22cb0ec82a663137dfbaef7a088fb1ac76df6568",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "08/12/11 11:57 AM",
      "commitNameOld": "2deaca4415863fb20cee539878fd9acc3fc2fa82",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 168.34,
      "commitsBetweenForRepo": 1213,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n       return new FileStatus[] {\n-        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n+        new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n     }\n \n     String[] names \u003d localf.list();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n         results[j] \u003d getFileStatus(new Path(f, names[i]));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(f), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(f, names[i]));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "07c5741c9a5ebec78a0db046e7fefcae2ca4b6af": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7552. FileUtil#fullyDelete doesn\u0027t throw IOE but lists it in the throws clause. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164339 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/09/11 8:20 PM",
      "commitName": "07c5741c9a5ebec78a0db046e7fefcae2ca4b6af",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 8.13,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n-      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n+      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n     }\n     if (localf.isFile()) {\n       return new FileStatus[] {\n         new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n     }\n \n     String[] names \u003d localf.list();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       try {\n         results[j] \u003d getFileStatus(new Path(f, names[i]));\n         j++;\n       } catch (FileNotFoundException e) {\n         // ignore the files not found since the dir list may have have changed\n         // since the names[] list was generated.\n       }\n     }\n     if (j \u003d\u003d names.length) {\n       return results;\n     }\n     return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(f, names[i]));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(f, names[i]));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(f, names[i]));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(f, names[i]));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
      }
    },
    "566597503ce7b00c5c62ece919eb2e33c84bfc6b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7015. RawLocalFileSystem#listStatus does not deal with a directory whose entries are changing (e.g. in a multi-thread or multi-process environment). Contributed by Sanjay Radia \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1036729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/10 7:56 PM",
      "commitName": "566597503ce7b00c5c62ece919eb2e33c84bfc6b",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "08/11/10 1:29 PM",
      "commitNameOld": "c979e30875b84c13c1c498a48eb71a67592f336a",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 10.27,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,32 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n       throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n     }\n     if (localf.isFile()) {\n       return new FileStatus[] {\n         new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n     }\n \n     String[] names \u003d localf.list();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n+    int j \u003d 0;\n     for (int i \u003d 0; i \u003c names.length; i++) {\n-      results[i] \u003d getFileStatus(new Path(f, names[i]));\n+      try {\n+        results[j] \u003d getFileStatus(new Path(f, names[i]));\n+        j++;\n+      } catch (FileNotFoundException e) {\n+        // ignore the files not found since the dir list may have have changed\n+        // since the names[] list was generated.\n+      }\n     }\n-    return results;\n+    if (j \u003d\u003d names.length) {\n+      return results;\n+    }\n+    return Arrays.copyOf(results, j);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n        new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    int j \u003d 0;\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      try {\n        results[j] \u003d getFileStatus(new Path(f, names[i]));\n        j++;\n      } catch (FileNotFoundException e) {\n        // ignore the files not found since the dir list may have have changed\n        // since the names[] list was generated.\n      }\n    }\n    if (j \u003d\u003d names.length) {\n      return results;\n    }\n    return Arrays.copyOf(results, j);\n  }",
      "path": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "76a77aea78301c6b632d06d20520abc8a21d4cb0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6201. Change FileSystem::listStatus contract to throw\nFileNotFoundException if the directory does not exist, rather than letting\nthis be implementation-specific. Contributed by Jakob Homan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@806745 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/09 3:50 PM",
      "commitName": "76a77aea78301c6b632d06d20520abc8a21d4cb0",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "15/06/09 1:28 PM",
      "commitNameOld": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 67.1,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public FileStatus[] listStatus(Path f) throws IOException {\n     File localf \u003d pathToFile(f);\n     FileStatus[] results;\n \n     if (!localf.exists()) {\n-      return null;\n+      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n     }\n     if (localf.isFile()) {\n       return new FileStatus[] {\n           new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n     }\n \n     String[] names \u003d localf.list();\n     if (names \u003d\u003d null) {\n       return null;\n     }\n     results \u003d new FileStatus[names.length];\n     for (int i \u003d 0; i \u003c names.length; i++) {\n       results[i] \u003d getFileStatus(new Path(f, names[i]));\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n          new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      results[i] \u003d getFileStatus(new Path(f, names[i]));\n    }\n    return results;\n  }",
      "path": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,22 @@\n+  public FileStatus[] listStatus(Path f) throws IOException {\n+    File localf \u003d pathToFile(f);\n+    FileStatus[] results;\n+\n+    if (!localf.exists()) {\n+      return null;\n+    }\n+    if (localf.isFile()) {\n+      return new FileStatus[] {\n+          new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n+    }\n+\n+    String[] names \u003d localf.list();\n+    if (names \u003d\u003d null) {\n+      return null;\n+    }\n+    results \u003d new FileStatus[names.length];\n+    for (int i \u003d 0; i \u003c names.length; i++) {\n+      results[i] \u003d getFileStatus(new Path(f, names[i]));\n+    }\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws IOException {\n    File localf \u003d pathToFile(f);\n    FileStatus[] results;\n\n    if (!localf.exists()) {\n      return null;\n    }\n    if (localf.isFile()) {\n      return new FileStatus[] {\n          new RawLocalFileStatus(localf, getDefaultBlockSize(), this) };\n    }\n\n    String[] names \u003d localf.list();\n    if (names \u003d\u003d null) {\n      return null;\n    }\n    results \u003d new FileStatus[names.length];\n    for (int i \u003d 0; i \u003c names.length; i++) {\n      results[i] \u003d getFileStatus(new Path(f, names[i]));\n    }\n    return results;\n  }",
      "path": "src/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
    }
  }
}