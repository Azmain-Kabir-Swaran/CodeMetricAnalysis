{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___f-Path(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 2770,
  "functionEndLine": 2773,
  "numCommitsSeen": 180,
  "timeTaken": 8091,
  "changeHistory": [
    "9221704f857e33a5f9e00c19d3705e46e94f427b",
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "3372e940303149d6258e0b72c54d72f080f0daa2",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
    "c58a59f7081d55dd2108545ebf9ee48cf43ca944",
    "39ec1515a205952eda7e171408a8b83eceb4abde",
    "27c4e90efce04e1b1302f668b5eb22412e00d033",
    "7fe521b1dd49f81ae325f78cf531cfff15be6641",
    "709ff99cff4124823bde631e272af7be9a22f83b",
    "6ba52d88ec11444cbac946ffadbc645acd0657de",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0"
  ],
  "changeHistoryShort": {
    "9221704f857e33a5f9e00c19d3705e46e94f427b": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3372e940303149d6258e0b72c54d72f080f0daa2": "Ybodychange",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": "Ymultichange(Ybodychange,Yparametermetachange)",
    "c58a59f7081d55dd2108545ebf9ee48cf43ca944": "Ybodychange",
    "39ec1515a205952eda7e171408a8b83eceb4abde": "Ybodychange",
    "27c4e90efce04e1b1302f668b5eb22412e00d033": "Ybodychange",
    "7fe521b1dd49f81ae325f78cf531cfff15be6641": "Ybodychange",
    "709ff99cff4124823bde631e272af7be9a22f83b": "Ybodychange",
    "6ba52d88ec11444cbac946ffadbc645acd0657de": "Ybodychange",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9221704f857e33a5f9e00c19d3705e46e94f427b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16490. Avoid/handle cached 404s during S3A file creation.\n\nContributed by Steve Loughran.\n\nThis patch avoids issuing any HEAD path request when creating a file with overwrite\u003dtrue,\nso 404s will not end up in the S3 load balancers unless someone calls getFileStatus/exists/isFile\nin their own code.\n\nThe Hadoop FsShell CommandWithDestination class is modified to not register uncreated files\nfor deleteOnExit(), because that calls exists() and so can place the 404 in the cache, even\nafter S3A is patched to not do it itself.\n\nBecause S3Guard knows when a file should be present, it adds a special FileNotFound retry policy\nindependently configurable from other retry policies; it is also exponential, but with\ndifferent parameters. This is because every HEAD request will refresh any 404 cached in\nthe S3 Load Balancers. It\u0027s not enough to retry: we have to have a suitable gap between\nattempts to (hopefully) ensure any cached entry wil be gone.\n\nThe options and values are:\n\nfs.s3a.s3guard.consistency.retry.interval: 2s\nfs.s3a.s3guard.consistency.retry.limit: 7\n\nThe S3A copy() method used during rename() raises a RemoteFileChangedException which is not caught\nso not downgraded to false. Thus: when a rename is unrecoverable, this fact is propagated.\n\nCopy operations without S3Guard lack the confidence that the file exists, so don\u0027t retry the same way:\nit will fail fast with a different error message. However, because create(path, overwrite\u003dfalse) no\nlonger does HEAD path, we can at least be confident that S3A itself is not creating those cached\n404 markers.\n\nChange-Id: Ia7807faad8b9a8546836cb19f816cccf17cca26d\n",
      "commitDate": "11/09/19 8:46 AM",
      "commitName": "9221704f857e33a5f9e00c19d3705e46e94f427b",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/09/19 6:25 AM",
      "commitNameOld": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.1,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,4 @@\n   public FileStatus getFileStatus(final Path f) throws IOException {\n-    return innerGetFileStatus(f, false);\n+    entryPoint(INVOCATION_GET_FILE_STATUS);\n+    return innerGetFileStatus(f, false, StatusProbeEnum.ALL);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path f) throws IOException {\n    entryPoint(INVOCATION_GET_FILE_STATUS);\n    return innerGetFileStatus(f, false, StatusProbeEnum.ALL);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
          "commitDate": "01/09/17 6:13 AM",
          "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/06/17 11:26 AM",
          "commitNameOld": "6aeda55bb8f741d9dafd41f6dfbf1a88acdd4003",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 87.78,
          "commitsBetweenForRepo": 591,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,98 +1,3 @@\n-  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n-    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n-    final Path path \u003d qualify(f);\n-    String key \u003d pathToKey(path);\n-    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n-    if (!key.isEmpty()) {\n-      try {\n-        ObjectMetadata meta \u003d getObjectMetadata(key);\n-\n-        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-          LOG.debug(\"Found exact file: fake directory\");\n-          return new S3AFileStatus(true, path, username);\n-        } else {\n-          LOG.debug(\"Found exact file: normal file\");\n-          return new S3AFileStatus(meta.getContentLength(),\n-              dateToLong(meta.getLastModified()),\n-              path,\n-              getDefaultBlockSize(path),\n-              username);\n-        }\n-      } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d 404) {\n-          throw translateException(\"getFileStatus\", path, e);\n-        }\n-      } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", path, e);\n-      }\n-\n-      // Necessary?\n-      if (!key.endsWith(\"/\")) {\n-        String newKey \u003d key + \"/\";\n-        try {\n-          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n-\n-          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n-            LOG.debug(\"Found file (with /): fake directory\");\n-            return new S3AFileStatus(true, path, username);\n-          } else {\n-            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n-                key);\n-\n-            return new S3AFileStatus(meta.getContentLength(),\n-                dateToLong(meta.getLastModified()),\n-                path,\n-                getDefaultBlockSize(path),\n-                username);\n-          }\n-        } catch (AmazonServiceException e) {\n-          if (e.getStatusCode() !\u003d 404) {\n-            throw translateException(\"getFileStatus\", newKey, e);\n-          }\n-        } catch (AmazonClientException e) {\n-          throw translateException(\"getFileStatus\", newKey, e);\n-        }\n-      }\n-    }\n-\n-    try {\n-      key \u003d maybeAddTrailingSlash(key);\n-      ListObjectsRequest request \u003d new ListObjectsRequest();\n-      request.setBucketName(bucket);\n-      request.setPrefix(key);\n-      request.setDelimiter(\"/\");\n-      request.setMaxKeys(1);\n-\n-      ObjectListing objects \u003d listObjects(request);\n-\n-      if (!objects.getCommonPrefixes().isEmpty()\n-          || !objects.getObjectSummaries().isEmpty()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Found path as directory (with /): {}/{}\",\n-              objects.getCommonPrefixes().size() ,\n-              objects.getObjectSummaries().size());\n-\n-          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n-            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n-          }\n-          for (String prefix : objects.getCommonPrefixes()) {\n-            LOG.debug(\"Prefix: {}\", prefix);\n-          }\n-        }\n-\n-        return new S3AFileStatus(false, path, username);\n-      } else if (key.isEmpty()) {\n-        LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(true, path, username);\n-      }\n-    } catch (AmazonServiceException e) {\n-      if (e.getStatusCode() !\u003d 404) {\n-        throw translateException(\"getFileStatus\", key, e);\n-      }\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"getFileStatus\", key, e);\n-    }\n-\n-    LOG.debug(\"Not Found: {}\", path);\n-    throw new FileNotFoundException(\"No such file or directory: \" + path);\n+  public FileStatus getFileStatus(final Path f) throws IOException {\n+    return innerGetFileStatus(f, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(final Path f) throws IOException {\n    return innerGetFileStatus(f, false);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "S3AFileStatus",
            "newValue": "FileStatus"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
          "commitDate": "01/09/17 6:13 AM",
          "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "05/06/17 11:26 AM",
          "commitNameOld": "6aeda55bb8f741d9dafd41f6dfbf1a88acdd4003",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 87.78,
          "commitsBetweenForRepo": 591,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,98 +1,3 @@\n-  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n-    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n-    final Path path \u003d qualify(f);\n-    String key \u003d pathToKey(path);\n-    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n-    if (!key.isEmpty()) {\n-      try {\n-        ObjectMetadata meta \u003d getObjectMetadata(key);\n-\n-        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-          LOG.debug(\"Found exact file: fake directory\");\n-          return new S3AFileStatus(true, path, username);\n-        } else {\n-          LOG.debug(\"Found exact file: normal file\");\n-          return new S3AFileStatus(meta.getContentLength(),\n-              dateToLong(meta.getLastModified()),\n-              path,\n-              getDefaultBlockSize(path),\n-              username);\n-        }\n-      } catch (AmazonServiceException e) {\n-        if (e.getStatusCode() !\u003d 404) {\n-          throw translateException(\"getFileStatus\", path, e);\n-        }\n-      } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", path, e);\n-      }\n-\n-      // Necessary?\n-      if (!key.endsWith(\"/\")) {\n-        String newKey \u003d key + \"/\";\n-        try {\n-          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n-\n-          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n-            LOG.debug(\"Found file (with /): fake directory\");\n-            return new S3AFileStatus(true, path, username);\n-          } else {\n-            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n-                key);\n-\n-            return new S3AFileStatus(meta.getContentLength(),\n-                dateToLong(meta.getLastModified()),\n-                path,\n-                getDefaultBlockSize(path),\n-                username);\n-          }\n-        } catch (AmazonServiceException e) {\n-          if (e.getStatusCode() !\u003d 404) {\n-            throw translateException(\"getFileStatus\", newKey, e);\n-          }\n-        } catch (AmazonClientException e) {\n-          throw translateException(\"getFileStatus\", newKey, e);\n-        }\n-      }\n-    }\n-\n-    try {\n-      key \u003d maybeAddTrailingSlash(key);\n-      ListObjectsRequest request \u003d new ListObjectsRequest();\n-      request.setBucketName(bucket);\n-      request.setPrefix(key);\n-      request.setDelimiter(\"/\");\n-      request.setMaxKeys(1);\n-\n-      ObjectListing objects \u003d listObjects(request);\n-\n-      if (!objects.getCommonPrefixes().isEmpty()\n-          || !objects.getObjectSummaries().isEmpty()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Found path as directory (with /): {}/{}\",\n-              objects.getCommonPrefixes().size() ,\n-              objects.getObjectSummaries().size());\n-\n-          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n-            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n-          }\n-          for (String prefix : objects.getCommonPrefixes()) {\n-            LOG.debug(\"Prefix: {}\", prefix);\n-          }\n-        }\n-\n-        return new S3AFileStatus(false, path, username);\n-      } else if (key.isEmpty()) {\n-        LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(true, path, username);\n-      }\n-    } catch (AmazonServiceException e) {\n-      if (e.getStatusCode() !\u003d 404) {\n-        throw translateException(\"getFileStatus\", key, e);\n-      }\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"getFileStatus\", key, e);\n-    }\n-\n-    LOG.debug(\"Not Found: {}\", path);\n-    throw new FileNotFoundException(\"No such file or directory: \" + path);\n+  public FileStatus getFileStatus(final Path f) throws IOException {\n+    return innerGetFileStatus(f, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(final Path f) throws IOException {\n    return innerGetFileStatus(f, false);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "3372e940303149d6258e0b72c54d72f080f0daa2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12774. s3a should use UGI.getCurrentUser.getShortname() for username. Contributed by Steve Loughran.\n",
      "commitDate": "24/10/16 9:54 PM",
      "commitName": "3372e940303149d6258e0b72c54d72f080f0daa2",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/10/16 6:50 AM",
      "commitNameOld": "9ae270af02c243993f853513c731cb268430e492",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 4.63,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,98 @@\n   public S3AFileStatus getFileStatus(final Path f) throws IOException {\n     incrementStatistic(INVOCATION_GET_FILE_STATUS);\n     final Path path \u003d qualify(f);\n     String key \u003d pathToKey(path);\n     LOG.debug(\"Getting path status for {}  ({})\", path , key);\n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n-          return new S3AFileStatus(true, true,\n-              path);\n+          return new S3AFileStatus(true, path, username);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               path,\n-              getDefaultBlockSize(path));\n+              getDefaultBlockSize(path),\n+              username);\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", path, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n-            return new S3AFileStatus(true, true, path);\n+            return new S3AFileStatus(true, path, username);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                 key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n                 path,\n-                getDefaultBlockSize(path));\n+                getDefaultBlockSize(path),\n+                username);\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n       key \u003d maybeAddTrailingSlash(key);\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d listObjects(request);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || !objects.getObjectSummaries().isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               objects.getCommonPrefixes().size() ,\n               objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n-        return new S3AFileStatus(true, false, path);\n+        return new S3AFileStatus(false, path, username);\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(true, true, path);\n+        return new S3AFileStatus(true, path, username);\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         throw translateException(\"getFileStatus\", key, e);\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"getFileStatus\", key, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", path);\n     throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n    final Path path \u003d qualify(f);\n    String key \u003d pathToKey(path);\n    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(true, path, username);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path),\n              username);\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(true, path, username);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\",\n                key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                path,\n                getDefaultBlockSize(path),\n                username);\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d listObjects(request);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || !objects.getObjectSummaries().isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              objects.getCommonPrefixes().size() ,\n              objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(false, path, username);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, path, username);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-13208. S3A listFiles(recursive\u003dtrue) to do a bulk listObjects instead of walking the pseudo-tree of directories. Contributed by Steve Loughran.\n",
      "commitDate": "17/08/16 2:54 PM",
      "commitName": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13208. S3A listFiles(recursive\u003dtrue) to do a bulk listObjects instead of walking the pseudo-tree of directories. Contributed by Steve Loughran.\n",
          "commitDate": "17/08/16 2:54 PM",
          "commitName": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "25/07/16 7:50 AM",
          "commitNameOld": "86ae218893d018638e937c2528c8e84336254da7",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 23.29,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,99 +1,96 @@\n-  public S3AFileStatus getFileStatus(Path f) throws IOException {\n-    String key \u003d pathToKey(f);\n+  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n     incrementStatistic(INVOCATION_GET_FILE_STATUS);\n-    LOG.debug(\"Getting path status for {}  ({})\", f , key);\n-\n+    final Path path \u003d qualify(f);\n+    String key \u003d pathToKey(path);\n+    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(true, true,\n-              f.makeQualified(uri, workingDir));\n+              path);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n-              f.makeQualified(uri, workingDir),\n-              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n+              path,\n+              getDefaultBlockSize(path));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n-          throw translateException(\"getFileStatus\", f, e);\n+          throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", f, e);\n+        throw translateException(\"getFileStatus\", path, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n-            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+            return new S3AFileStatus(true, true, path);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n-                f.makeQualified(uri, workingDir),\n-                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n+                path,\n+                getDefaultBlockSize(path));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n-      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n-        key \u003d key + \"/\";\n-      }\n+      key \u003d maybeAddTrailingSlash(key);\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d listObjects(request);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || !objects.getObjectSummaries().isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               objects.getCommonPrefixes().size() ,\n               objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n-        return new S3AFileStatus(true, false,\n-            f.makeQualified(uri, workingDir));\n+        return new S3AFileStatus(true, false, path);\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+        return new S3AFileStatus(true, true, path);\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         throw translateException(\"getFileStatus\", key, e);\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"getFileStatus\", key, e);\n     }\n \n-    LOG.debug(\"Not Found: {}\", f);\n-    throw new FileNotFoundException(\"No such file or directory: \" + f);\n+    LOG.debug(\"Not Found: {}\", path);\n+    throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n    final Path path \u003d qualify(f);\n    String key \u003d pathToKey(path);\n    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(true, true,\n              path);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(true, true, path);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                path,\n                getDefaultBlockSize(path));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d listObjects(request);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || !objects.getObjectSummaries().isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              objects.getCommonPrefixes().size() ,\n              objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false, path);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, true, path);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-13208. S3A listFiles(recursive\u003dtrue) to do a bulk listObjects instead of walking the pseudo-tree of directories. Contributed by Steve Loughran.\n",
          "commitDate": "17/08/16 2:54 PM",
          "commitName": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "25/07/16 7:50 AM",
          "commitNameOld": "86ae218893d018638e937c2528c8e84336254da7",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 23.29,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,99 +1,96 @@\n-  public S3AFileStatus getFileStatus(Path f) throws IOException {\n-    String key \u003d pathToKey(f);\n+  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n     incrementStatistic(INVOCATION_GET_FILE_STATUS);\n-    LOG.debug(\"Getting path status for {}  ({})\", f , key);\n-\n+    final Path path \u003d qualify(f);\n+    String key \u003d pathToKey(path);\n+    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(true, true,\n-              f.makeQualified(uri, workingDir));\n+              path);\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n-              f.makeQualified(uri, workingDir),\n-              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n+              path,\n+              getDefaultBlockSize(path));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n-          throw translateException(\"getFileStatus\", f, e);\n+          throw translateException(\"getFileStatus\", path, e);\n         }\n       } catch (AmazonClientException e) {\n-        throw translateException(\"getFileStatus\", f, e);\n+        throw translateException(\"getFileStatus\", path, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n-            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+            return new S3AFileStatus(true, true, path);\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n-                f.makeQualified(uri, workingDir),\n-                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n+                path,\n+                getDefaultBlockSize(path));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n-      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n-        key \u003d key + \"/\";\n-      }\n+      key \u003d maybeAddTrailingSlash(key);\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d listObjects(request);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || !objects.getObjectSummaries().isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               objects.getCommonPrefixes().size() ,\n               objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n-        return new S3AFileStatus(true, false,\n-            f.makeQualified(uri, workingDir));\n+        return new S3AFileStatus(true, false, path);\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n-        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+        return new S3AFileStatus(true, true, path);\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         throw translateException(\"getFileStatus\", key, e);\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"getFileStatus\", key, e);\n     }\n \n-    LOG.debug(\"Not Found: {}\", f);\n-    throw new FileNotFoundException(\"No such file or directory: \" + f);\n+    LOG.debug(\"Not Found: {}\", path);\n+    throw new FileNotFoundException(\"No such file or directory: \" + path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public S3AFileStatus getFileStatus(final Path f) throws IOException {\n    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n    final Path path \u003d qualify(f);\n    String key \u003d pathToKey(path);\n    LOG.debug(\"Getting path status for {}  ({})\", path , key);\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(true, true,\n              path);\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              path,\n              getDefaultBlockSize(path));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", path, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", path, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(true, true, path);\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                path,\n                getDefaultBlockSize(path));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      key \u003d maybeAddTrailingSlash(key);\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d listObjects(request);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || !objects.getObjectSummaries().isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              objects.getCommonPrefixes().size() ,\n              objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false, path);\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, true, path);\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", path);\n    throw new FileNotFoundException(\"No such file or directory: \" + path);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path]",
            "newValue": "[f-Path(modifiers-final)]"
          }
        }
      ]
    },
    "c58a59f7081d55dd2108545ebf9ee48cf43ca944": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13171. Add StorageStatistics to S3A; instrument some more operations. Contributed by Steve Loughran.\n",
      "commitDate": "03/06/16 8:55 AM",
      "commitName": "c58a59f7081d55dd2108545ebf9ee48cf43ca944",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "01/06/16 2:49 PM",
      "commitNameOld": "16b1cc7af9bd63b65ef50e1056f275a7baf111a2",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,99 @@\n   public S3AFileStatus getFileStatus(Path f) throws IOException {\n     String key \u003d pathToKey(f);\n+    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n     LOG.debug(\"Getting path status for {}  ({})\", f , key);\n \n     if (!key.isEmpty()) {\n       try {\n-        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n-        statistics.incrementReadOps(1);\n+        ObjectMetadata meta \u003d getObjectMetadata(key);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(true, true,\n               f.makeQualified(uri, workingDir));\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               f.makeQualified(uri, workingDir),\n               getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           throw translateException(\"getFileStatus\", f, e);\n         }\n       } catch (AmazonClientException e) {\n         throw translateException(\"getFileStatus\", f, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n-          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n-          statistics.incrementReadOps(1);\n+          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n                 f.makeQualified(uri, workingDir),\n                 getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n           throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n       if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n-      ObjectListing objects \u003d s3.listObjects(request);\n-      statistics.incrementReadOps(1);\n+      ObjectListing objects \u003d listObjects(request);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || !objects.getObjectSummaries().isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               objects.getCommonPrefixes().size() ,\n               objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n         return new S3AFileStatus(true, false,\n             f.makeQualified(uri, workingDir));\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n         return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         throw translateException(\"getFileStatus\", key, e);\n       }\n     } catch (AmazonClientException e) {\n       throw translateException(\"getFileStatus\", key, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", f);\n     throw new FileNotFoundException(\"No such file or directory: \" + f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n    incrementStatistic(INVOCATION_GET_FILE_STATUS);\n    LOG.debug(\"Getting path status for {}  ({})\", f , key);\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d getObjectMetadata(key);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(true, true,\n              f.makeQualified(uri, workingDir));\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir),\n              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", f, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", f, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d getObjectMetadata(newKey);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir),\n                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d listObjects(request);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || !objects.getObjectSummaries().isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              objects.getCommonPrefixes().size() ,\n              objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false,\n            f.makeQualified(uri, workingDir));\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", f);\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "39ec1515a205952eda7e171408a8b83eceb4abde": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
      "commitDate": "21/05/16 8:39 AM",
      "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "20/05/16 5:52 AM",
      "commitNameOld": "757050ff355d40bc28f9dbfd0c0083c5f337d270",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,101 @@\n   public S3AFileStatus getFileStatus(Path f) throws IOException {\n     String key \u003d pathToKey(f);\n     LOG.debug(\"Getting path status for {}  ({})\", f , key);\n \n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n         statistics.incrementReadOps(1);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(true, true,\n               f.makeQualified(uri, workingDir));\n         } else {\n           LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               f.makeQualified(uri, workingDir),\n               getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n-          printAmazonServiceException(f.toString(), e);\n-          throw e;\n+          throw translateException(\"getFileStatus\", f, e);\n         }\n       } catch (AmazonClientException e) {\n-        printAmazonClientException(f.toString(), e);\n-        throw e;\n+        throw translateException(\"getFileStatus\", f, e);\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         String newKey \u003d key + \"/\";\n         try {\n           ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n           statistics.incrementReadOps(1);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n                 f.makeQualified(uri, workingDir),\n                 getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n-            printAmazonServiceException(newKey, e);\n-            throw e;\n+            throw translateException(\"getFileStatus\", newKey, e);\n           }\n         } catch (AmazonClientException e) {\n-          printAmazonClientException(newKey, e);\n-          throw e;\n+          throw translateException(\"getFileStatus\", newKey, e);\n         }\n       }\n     }\n \n     try {\n       if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d s3.listObjects(request);\n       statistics.incrementReadOps(1);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || !objects.getObjectSummaries().isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): {}/{}\",\n               objects.getCommonPrefixes().size() ,\n               objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n         return new S3AFileStatus(true, false,\n             f.makeQualified(uri, workingDir));\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n         return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n-        printAmazonServiceException(key, e);\n-        throw e;\n+        throw translateException(\"getFileStatus\", key, e);\n       }\n     } catch (AmazonClientException e) {\n-      printAmazonClientException(key, e);\n-      throw e;\n+      throw translateException(\"getFileStatus\", key, e);\n     }\n \n     LOG.debug(\"Not Found: {}\", f);\n     throw new FileNotFoundException(\"No such file or directory: \" + f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n    LOG.debug(\"Getting path status for {}  ({})\", f , key);\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n        statistics.incrementReadOps(1);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(true, true,\n              f.makeQualified(uri, workingDir));\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir),\n              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          throw translateException(\"getFileStatus\", f, e);\n        }\n      } catch (AmazonClientException e) {\n        throw translateException(\"getFileStatus\", f, e);\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n          statistics.incrementReadOps(1);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir),\n                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            throw translateException(\"getFileStatus\", newKey, e);\n          }\n        } catch (AmazonClientException e) {\n          throw translateException(\"getFileStatus\", newKey, e);\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d s3.listObjects(request);\n      statistics.incrementReadOps(1);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || !objects.getObjectSummaries().isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              objects.getCommonPrefixes().size() ,\n              objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false,\n            f.makeQualified(uri, workingDir));\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        throw translateException(\"getFileStatus\", key, e);\n      }\n    } catch (AmazonClientException e) {\n      throw translateException(\"getFileStatus\", key, e);\n    }\n\n    LOG.debug(\"Not Found: {}\", f);\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "27c4e90efce04e1b1302f668b5eb22412e00d033": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel\npatch includes\nHADOOP-12844 Recover when S3A fails on IOException in read()\nHADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge\nHADOOP-13047 S3a Forward seek in stream length to be configurable\n",
      "commitDate": "12/05/16 11:24 AM",
      "commitName": "27c4e90efce04e1b1302f668b5eb22412e00d033",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/05/16 5:57 AM",
      "commitNameOld": "def2a6d3856452d5c804f04e5bf485541a3bc53a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,107 @@\n   public S3AFileStatus getFileStatus(Path f) throws IOException {\n     String key \u003d pathToKey(f);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n-    }\n-\n+    LOG.debug(\"Getting path status for {}  ({})\", f , key);\n \n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n         statistics.incrementReadOps(1);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found exact file: fake directory\");\n-          }\n+          LOG.debug(\"Found exact file: fake directory\");\n           return new S3AFileStatus(true, true,\n               f.makeQualified(uri, workingDir));\n         } else {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found exact file: normal file\");\n-          }\n+          LOG.debug(\"Found exact file: normal file\");\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               f.makeQualified(uri, workingDir),\n               getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n-          printAmazonServiceException(e);\n+          printAmazonServiceException(f.toString(), e);\n           throw e;\n         }\n       } catch (AmazonClientException e) {\n-        printAmazonClientException(e);\n+        printAmazonClientException(f.toString(), e);\n         throw e;\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n+        String newKey \u003d key + \"/\";\n         try {\n-          String newKey \u003d key + \"/\";\n           ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n           statistics.incrementReadOps(1);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Found file (with /): fake directory\");\n-            }\n+            LOG.debug(\"Found file (with /): fake directory\");\n             return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n                 f.makeQualified(uri, workingDir),\n                 getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n-            printAmazonServiceException(e);\n+            printAmazonServiceException(newKey, e);\n             throw e;\n           }\n         } catch (AmazonClientException e) {\n-          printAmazonClientException(e);\n+          printAmazonClientException(newKey, e);\n           throw e;\n         }\n       }\n     }\n \n     try {\n       if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d s3.listObjects(request);\n       statistics.incrementReadOps(1);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n-          || objects.getObjectSummaries().size() \u003e 0) {\n+          || !objects.getObjectSummaries().isEmpty()) {\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Found path as directory (with /): \" +\n-              objects.getCommonPrefixes().size() + \"/\" +\n+          LOG.debug(\"Found path as directory (with /): {}/{}\",\n+              objects.getCommonPrefixes().size() ,\n               objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n-            LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n+            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n-            LOG.debug(\"Prefix: \" + prefix);\n+            LOG.debug(\"Prefix: {}\", prefix);\n           }\n         }\n \n         return new S3AFileStatus(true, false,\n             f.makeQualified(uri, workingDir));\n       } else if (key.isEmpty()) {\n         LOG.debug(\"Found root directory\");\n         return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n-        printAmazonServiceException(e);\n+        printAmazonServiceException(key, e);\n         throw e;\n       }\n     } catch (AmazonClientException e) {\n-      printAmazonClientException(e);\n+      printAmazonClientException(key, e);\n       throw e;\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Not Found: \" + f);\n-    }\n+    LOG.debug(\"Not Found: {}\", f);\n     throw new FileNotFoundException(\"No such file or directory: \" + f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n    LOG.debug(\"Getting path status for {}  ({})\", f , key);\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n        statistics.incrementReadOps(1);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          LOG.debug(\"Found exact file: fake directory\");\n          return new S3AFileStatus(true, true,\n              f.makeQualified(uri, workingDir));\n        } else {\n          LOG.debug(\"Found exact file: normal file\");\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir),\n              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          printAmazonServiceException(f.toString(), e);\n          throw e;\n        }\n      } catch (AmazonClientException e) {\n        printAmazonClientException(f.toString(), e);\n        throw e;\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        String newKey \u003d key + \"/\";\n        try {\n          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n          statistics.incrementReadOps(1);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            LOG.debug(\"Found file (with /): fake directory\");\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir),\n                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            printAmazonServiceException(newKey, e);\n            throw e;\n          }\n        } catch (AmazonClientException e) {\n          printAmazonClientException(newKey, e);\n          throw e;\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d s3.listObjects(request);\n      statistics.incrementReadOps(1);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || !objects.getObjectSummaries().isEmpty()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): {}/{}\",\n              objects.getCommonPrefixes().size() ,\n              objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: {} {}\", summary.getKey(), summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: {}\", prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false,\n            f.makeQualified(uri, workingDir));\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        printAmazonServiceException(key, e);\n        throw e;\n      }\n    } catch (AmazonClientException e) {\n      printAmazonClientException(key, e);\n      throw e;\n    }\n\n    LOG.debug(\"Not Found: {}\", f);\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "7fe521b1dd49f81ae325f78cf531cfff15be6641": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11918. Listing an empty s3a root directory throws FileNotFound. Contributed by Lei (Eddy) Xu.\n",
      "commitDate": "25/09/15 10:33 PM",
      "commitName": "7fe521b1dd49f81ae325f78cf531cfff15be6641",
      "commitAuthor": "cnauroth",
      "commitDateOld": "04/08/15 6:51 PM",
      "commitNameOld": "d5403747b57b1e294e533ce17f197e7be8f5339c",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 52.15,
      "commitsBetweenForRepo": 301,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,115 +1,118 @@\n   public S3AFileStatus getFileStatus(Path f) throws IOException {\n     String key \u003d pathToKey(f);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n     }\n \n \n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n         statistics.incrementReadOps(1);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found exact file: fake directory\");\n           }\n           return new S3AFileStatus(true, true,\n               f.makeQualified(uri, workingDir));\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found exact file: normal file\");\n           }\n           return new S3AFileStatus(meta.getContentLength(),\n               dateToLong(meta.getLastModified()),\n               f.makeQualified(uri, workingDir),\n               getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           printAmazonServiceException(e);\n           throw e;\n         }\n       } catch (AmazonClientException e) {\n         printAmazonClientException(e);\n         throw e;\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         try {\n           String newKey \u003d key + \"/\";\n           ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n           statistics.incrementReadOps(1);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Found file (with /): fake directory\");\n             }\n             return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(),\n                 dateToLong(meta.getLastModified()),\n                 f.makeQualified(uri, workingDir),\n                 getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             printAmazonServiceException(e);\n             throw e;\n           }\n         } catch (AmazonClientException e) {\n           printAmazonClientException(e);\n           throw e;\n         }\n       }\n     }\n \n     try {\n       if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d s3.listObjects(request);\n       statistics.incrementReadOps(1);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || objects.getObjectSummaries().size() \u003e 0) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): \" + \n             objects.getCommonPrefixes().size() + \"/\" + \n             objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: \" + prefix);\n           }\n         }\n \n         return new S3AFileStatus(true, false,\n             f.makeQualified(uri, workingDir));\n+      } else if (key.isEmpty()) {\n+        LOG.debug(\"Found root directory\");\n+        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         printAmazonServiceException(e);\n         throw e;\n       }\n     } catch (AmazonClientException e) {\n       printAmazonClientException(e);\n       throw e;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Not Found: \" + f);\n     }\n     throw new FileNotFoundException(\"No such file or directory: \" + f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n    }\n\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n        statistics.incrementReadOps(1);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: fake directory\");\n          }\n          return new S3AFileStatus(true, true,\n              f.makeQualified(uri, workingDir));\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: normal file\");\n          }\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir),\n              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          printAmazonServiceException(e);\n          throw e;\n        }\n      } catch (AmazonClientException e) {\n        printAmazonClientException(e);\n        throw e;\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        try {\n          String newKey \u003d key + \"/\";\n          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n          statistics.incrementReadOps(1);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Found file (with /): fake directory\");\n            }\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir),\n                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            printAmazonServiceException(e);\n            throw e;\n          }\n        } catch (AmazonClientException e) {\n          printAmazonClientException(e);\n          throw e;\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d s3.listObjects(request);\n      statistics.incrementReadOps(1);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || objects.getObjectSummaries().size() \u003e 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): \" + \n            objects.getCommonPrefixes().size() + \"/\" + \n            objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: \" + prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false,\n            f.makeQualified(uri, workingDir));\n      } else if (key.isEmpty()) {\n        LOG.debug(\"Found root directory\");\n        return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        printAmazonServiceException(e);\n        throw e;\n      }\n    } catch (AmazonClientException e) {\n      printAmazonClientException(e);\n      throw e;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Not Found: \" + f);\n    }\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "709ff99cff4124823bde631e272af7be9a22f83b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11584 s3a file block size set to 0 in getFileStatus. (Brahma Reddy Battula via stevel)\n",
      "commitDate": "21/02/15 4:03 AM",
      "commitName": "709ff99cff4124823bde631e272af7be9a22f83b",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "20/02/15 12:51 PM",
      "commitNameOld": "aa1c437b6a806de612f030a68984c606c623f1d9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,115 @@\n   public S3AFileStatus getFileStatus(Path f) throws IOException {\n     String key \u003d pathToKey(f);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n     }\n \n \n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n         statistics.incrementReadOps(1);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found exact file: fake directory\");\n           }\n-          return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+          return new S3AFileStatus(true, true,\n+              f.makeQualified(uri, workingDir));\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found exact file: normal file\");\n           }\n-          return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n-              f.makeQualified(uri, workingDir));\n+          return new S3AFileStatus(meta.getContentLength(),\n+              dateToLong(meta.getLastModified()),\n+              f.makeQualified(uri, workingDir),\n+              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           printAmazonServiceException(e);\n           throw e;\n         }\n       } catch (AmazonClientException e) {\n         printAmazonClientException(e);\n         throw e;\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         try {\n           String newKey \u003d key + \"/\";\n           ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n           statistics.incrementReadOps(1);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Found file (with /): fake directory\");\n             }\n             return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n           } else {\n             LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n-            return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n-                f.makeQualified(uri, workingDir));\n+            return new S3AFileStatus(meta.getContentLength(),\n+                dateToLong(meta.getLastModified()),\n+                f.makeQualified(uri, workingDir),\n+                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             printAmazonServiceException(e);\n             throw e;\n           }\n         } catch (AmazonClientException e) {\n           printAmazonClientException(e);\n           throw e;\n         }\n       }\n     }\n \n     try {\n       if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d s3.listObjects(request);\n       statistics.incrementReadOps(1);\n \n       if (!objects.getCommonPrefixes().isEmpty()\n           || objects.getObjectSummaries().size() \u003e 0) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): \" + \n             objects.getCommonPrefixes().size() + \"/\" + \n             objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: \" + prefix);\n           }\n         }\n \n-        return new S3AFileStatus(true, false, f.makeQualified(uri, workingDir));\n+        return new S3AFileStatus(true, false,\n+            f.makeQualified(uri, workingDir));\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         printAmazonServiceException(e);\n         throw e;\n       }\n     } catch (AmazonClientException e) {\n       printAmazonClientException(e);\n       throw e;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Not Found: \" + f);\n     }\n     throw new FileNotFoundException(\"No such file or directory: \" + f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n    }\n\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n        statistics.incrementReadOps(1);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: fake directory\");\n          }\n          return new S3AFileStatus(true, true,\n              f.makeQualified(uri, workingDir));\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: normal file\");\n          }\n          return new S3AFileStatus(meta.getContentLength(),\n              dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir),\n              getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          printAmazonServiceException(e);\n          throw e;\n        }\n      } catch (AmazonClientException e) {\n        printAmazonClientException(e);\n        throw e;\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        try {\n          String newKey \u003d key + \"/\";\n          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n          statistics.incrementReadOps(1);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Found file (with /): fake directory\");\n            }\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(),\n                dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir),\n                getDefaultBlockSize(f.makeQualified(uri, workingDir)));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            printAmazonServiceException(e);\n            throw e;\n          }\n        } catch (AmazonClientException e) {\n          printAmazonClientException(e);\n          throw e;\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d s3.listObjects(request);\n      statistics.incrementReadOps(1);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || objects.getObjectSummaries().size() \u003e 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): \" + \n            objects.getCommonPrefixes().size() + \"/\" + \n            objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: \" + prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false,\n            f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        printAmazonServiceException(e);\n        throw e;\n      }\n    } catch (AmazonClientException e) {\n      printAmazonClientException(e);\n      throw e;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Not Found: \" + f);\n    }\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6ba52d88ec11444cbac946ffadbc645acd0657de": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10714. AmazonS3Client.deleteObjects() need to be limited to 1000 entries per call. Contributed by Juan Yu.\n",
      "commitDate": "05/11/14 5:17 PM",
      "commitName": "6ba52d88ec11444cbac946ffadbc645acd0657de",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "15/09/14 4:49 PM",
      "commitNameOld": "0ac760a58d96b36ab30e9d60679bbea6365ef120",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 51.06,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,109 @@\n   public S3AFileStatus getFileStatus(Path f) throws IOException {\n     String key \u003d pathToKey(f);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n+    }\n \n-    LOG.info(\"Getting path status for \" + f + \" (\" + key + \")\");\n \n     if (!key.isEmpty()) {\n       try {\n         ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n         statistics.incrementReadOps(1);\n \n         if (objectRepresentsDirectory(key, meta.getContentLength())) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found exact file: fake directory\");\n           }\n           return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n         } else {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found exact file: normal file\");\n           }\n           return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n               f.makeQualified(uri, workingDir));\n         }\n       } catch (AmazonServiceException e) {\n         if (e.getStatusCode() !\u003d 404) {\n           printAmazonServiceException(e);\n           throw e;\n         }\n       } catch (AmazonClientException e) {\n         printAmazonClientException(e);\n         throw e;\n       }\n \n       // Necessary?\n       if (!key.endsWith(\"/\")) {\n         try {\n           String newKey \u003d key + \"/\";\n           ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n           statistics.incrementReadOps(1);\n \n           if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Found file (with /): fake directory\");\n             }\n             return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n           } else {\n-            LOG.warn(\"Found file (with /): real file? should not happen: \" + key);\n+            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n \n             return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n                 f.makeQualified(uri, workingDir));\n           }\n         } catch (AmazonServiceException e) {\n           if (e.getStatusCode() !\u003d 404) {\n             printAmazonServiceException(e);\n             throw e;\n           }\n         } catch (AmazonClientException e) {\n           printAmazonClientException(e);\n           throw e;\n         }\n       }\n     }\n \n     try {\n       if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n       ListObjectsRequest request \u003d new ListObjectsRequest();\n       request.setBucketName(bucket);\n       request.setPrefix(key);\n       request.setDelimiter(\"/\");\n       request.setMaxKeys(1);\n \n       ObjectListing objects \u003d s3.listObjects(request);\n       statistics.incrementReadOps(1);\n \n-      if (objects.getCommonPrefixes().size() \u003e 0 || objects.getObjectSummaries().size() \u003e 0) {\n+      if (!objects.getCommonPrefixes().isEmpty()\n+          || objects.getObjectSummaries().size() \u003e 0) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Found path as directory (with /): \" + \n             objects.getCommonPrefixes().size() + \"/\" + \n             objects.getObjectSummaries().size());\n \n           for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n             LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n           }\n           for (String prefix : objects.getCommonPrefixes()) {\n             LOG.debug(\"Prefix: \" + prefix);\n           }\n         }\n \n         return new S3AFileStatus(true, false, f.makeQualified(uri, workingDir));\n       }\n     } catch (AmazonServiceException e) {\n       if (e.getStatusCode() !\u003d 404) {\n         printAmazonServiceException(e);\n         throw e;\n       }\n     } catch (AmazonClientException e) {\n       printAmazonClientException(e);\n       throw e;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Not Found: \" + f);\n     }\n     throw new FileNotFoundException(\"No such file or directory: \" + f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting path status for \" + f + \" (\" + key + \")\");\n    }\n\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n        statistics.incrementReadOps(1);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: fake directory\");\n          }\n          return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: normal file\");\n          }\n          return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          printAmazonServiceException(e);\n          throw e;\n        }\n      } catch (AmazonClientException e) {\n        printAmazonClientException(e);\n        throw e;\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        try {\n          String newKey \u003d key + \"/\";\n          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n          statistics.incrementReadOps(1);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Found file (with /): fake directory\");\n            }\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: {}\", key);\n\n            return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            printAmazonServiceException(e);\n            throw e;\n          }\n        } catch (AmazonClientException e) {\n          printAmazonClientException(e);\n          throw e;\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d s3.listObjects(request);\n      statistics.incrementReadOps(1);\n\n      if (!objects.getCommonPrefixes().isEmpty()\n          || objects.getObjectSummaries().size() \u003e 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): \" + \n            objects.getCommonPrefixes().size() + \"/\" + \n            objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: \" + prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false, f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        printAmazonServiceException(e);\n        throw e;\n      }\n    } catch (AmazonClientException e) {\n      printAmazonClientException(e);\n      throw e;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Not Found: \" + f);\n    }\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10400. Incorporate new S3A FileSystem implementation. Contributed by Jordan Mendelson and Dave Wang.\n",
      "commitDate": "15/09/14 8:27 AM",
      "commitName": "24d920b80eb3626073925a1d0b6dcf148add8cc0",
      "commitAuthor": "Aaron T. Myers",
      "diff": "@@ -0,0 +1,106 @@\n+  public S3AFileStatus getFileStatus(Path f) throws IOException {\n+    String key \u003d pathToKey(f);\n+\n+    LOG.info(\"Getting path status for \" + f + \" (\" + key + \")\");\n+\n+    if (!key.isEmpty()) {\n+      try {\n+        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n+        statistics.incrementReadOps(1);\n+\n+        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found exact file: fake directory\");\n+          }\n+          return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+        } else {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found exact file: normal file\");\n+          }\n+          return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n+              f.makeQualified(uri, workingDir));\n+        }\n+      } catch (AmazonServiceException e) {\n+        if (e.getStatusCode() !\u003d 404) {\n+          printAmazonServiceException(e);\n+          throw e;\n+        }\n+      } catch (AmazonClientException e) {\n+        printAmazonClientException(e);\n+        throw e;\n+      }\n+\n+      // Necessary?\n+      if (!key.endsWith(\"/\")) {\n+        try {\n+          String newKey \u003d key + \"/\";\n+          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n+          statistics.incrementReadOps(1);\n+\n+          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Found file (with /): fake directory\");\n+            }\n+            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n+          } else {\n+            LOG.warn(\"Found file (with /): real file? should not happen: \" + key);\n+\n+            return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n+                f.makeQualified(uri, workingDir));\n+          }\n+        } catch (AmazonServiceException e) {\n+          if (e.getStatusCode() !\u003d 404) {\n+            printAmazonServiceException(e);\n+            throw e;\n+          }\n+        } catch (AmazonClientException e) {\n+          printAmazonClientException(e);\n+          throw e;\n+        }\n+      }\n+    }\n+\n+    try {\n+      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n+        key \u003d key + \"/\";\n+      }\n+      ListObjectsRequest request \u003d new ListObjectsRequest();\n+      request.setBucketName(bucket);\n+      request.setPrefix(key);\n+      request.setDelimiter(\"/\");\n+      request.setMaxKeys(1);\n+\n+      ObjectListing objects \u003d s3.listObjects(request);\n+      statistics.incrementReadOps(1);\n+\n+      if (objects.getCommonPrefixes().size() \u003e 0 || objects.getObjectSummaries().size() \u003e 0) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Found path as directory (with /): \" + \n+            objects.getCommonPrefixes().size() + \"/\" + \n+            objects.getObjectSummaries().size());\n+\n+          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n+            LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n+          }\n+          for (String prefix : objects.getCommonPrefixes()) {\n+            LOG.debug(\"Prefix: \" + prefix);\n+          }\n+        }\n+\n+        return new S3AFileStatus(true, false, f.makeQualified(uri, workingDir));\n+      }\n+    } catch (AmazonServiceException e) {\n+      if (e.getStatusCode() !\u003d 404) {\n+        printAmazonServiceException(e);\n+        throw e;\n+      }\n+    } catch (AmazonClientException e) {\n+      printAmazonClientException(e);\n+      throw e;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Not Found: \" + f);\n+    }\n+    throw new FileNotFoundException(\"No such file or directory: \" + f);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public S3AFileStatus getFileStatus(Path f) throws IOException {\n    String key \u003d pathToKey(f);\n\n    LOG.info(\"Getting path status for \" + f + \" (\" + key + \")\");\n\n    if (!key.isEmpty()) {\n      try {\n        ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, key);\n        statistics.incrementReadOps(1);\n\n        if (objectRepresentsDirectory(key, meta.getContentLength())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: fake directory\");\n          }\n          return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found exact file: normal file\");\n          }\n          return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n              f.makeQualified(uri, workingDir));\n        }\n      } catch (AmazonServiceException e) {\n        if (e.getStatusCode() !\u003d 404) {\n          printAmazonServiceException(e);\n          throw e;\n        }\n      } catch (AmazonClientException e) {\n        printAmazonClientException(e);\n        throw e;\n      }\n\n      // Necessary?\n      if (!key.endsWith(\"/\")) {\n        try {\n          String newKey \u003d key + \"/\";\n          ObjectMetadata meta \u003d s3.getObjectMetadata(bucket, newKey);\n          statistics.incrementReadOps(1);\n\n          if (objectRepresentsDirectory(newKey, meta.getContentLength())) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Found file (with /): fake directory\");\n            }\n            return new S3AFileStatus(true, true, f.makeQualified(uri, workingDir));\n          } else {\n            LOG.warn(\"Found file (with /): real file? should not happen: \" + key);\n\n            return new S3AFileStatus(meta.getContentLength(), dateToLong(meta.getLastModified()),\n                f.makeQualified(uri, workingDir));\n          }\n        } catch (AmazonServiceException e) {\n          if (e.getStatusCode() !\u003d 404) {\n            printAmazonServiceException(e);\n            throw e;\n          }\n        } catch (AmazonClientException e) {\n          printAmazonClientException(e);\n          throw e;\n        }\n      }\n    }\n\n    try {\n      if (!key.isEmpty() \u0026\u0026 !key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n      ListObjectsRequest request \u003d new ListObjectsRequest();\n      request.setBucketName(bucket);\n      request.setPrefix(key);\n      request.setDelimiter(\"/\");\n      request.setMaxKeys(1);\n\n      ObjectListing objects \u003d s3.listObjects(request);\n      statistics.incrementReadOps(1);\n\n      if (objects.getCommonPrefixes().size() \u003e 0 || objects.getObjectSummaries().size() \u003e 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found path as directory (with /): \" + \n            objects.getCommonPrefixes().size() + \"/\" + \n            objects.getObjectSummaries().size());\n\n          for (S3ObjectSummary summary : objects.getObjectSummaries()) {\n            LOG.debug(\"Summary: \" + summary.getKey() + \" \" + summary.getSize());\n          }\n          for (String prefix : objects.getCommonPrefixes()) {\n            LOG.debug(\"Prefix: \" + prefix);\n          }\n        }\n\n        return new S3AFileStatus(true, false, f.makeQualified(uri, workingDir));\n      }\n    } catch (AmazonServiceException e) {\n      if (e.getStatusCode() !\u003d 404) {\n        printAmazonServiceException(e);\n        throw e;\n      }\n    } catch (AmazonClientException e) {\n      printAmazonClientException(e);\n      throw e;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Not Found: \" + f);\n    }\n    throw new FileNotFoundException(\"No such file or directory: \" + f);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}