{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FpgaResourceAllocator.java",
  "functionName": "assignFpga",
  "functionId": "assignFpga___type-String__count-long__container-Container__ipidHash-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java",
  "functionStartLine": 185,
  "functionEndLine": 235,
  "numCommitsSeen": 8,
  "timeTaken": 2634,
  "changeHistory": [
    "a4cd75e09c934699ec5e2fa969f1c8d0a14c1d49",
    "a99eb80659835107f4015c859b3319bf3a70c281",
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "a4cd75e09c934699ec5e2fa969f1c8d0a14c1d49": "Ybodychange",
    "a99eb80659835107f4015c859b3319bf3a70c281": "Ymultichange(Yparameterchange,Ybodychange)",
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a4cd75e09c934699ec5e2fa969f1c8d0a14c1d49": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9269. Minor cleanup in FpgaResourceAllocator. Contributed by Peter Bacsko.\n",
      "commitDate": "27/03/19 10:08 AM",
      "commitName": "a4cd75e09c934699ec5e2fa969f1c8d0a14c1d49",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "25/03/19 1:22 PM",
      "commitNameOld": "eeda6891e49bc13ae86d0193f94238b7109e291d",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   public synchronized FpgaAllocation assignFpga(String type, long count,\n       Container container, String ipidHash) throws ResourceHandlerException {\n-    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n+    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpgas.get(type);\n+\n     String requestor \u003d container.getContainerId().toString();\n     if (null \u003d\u003d currentAvailableFpga) {\n       throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n     }\n     if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n       throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n           count + \", available:\" + getAvailableFpgaCount());\n     }\n     if (count \u003e 0) {\n       // Allocate devices with matching IP first, then any device is ok\n       List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n       int matchIPCount \u003d 0;\n       for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n         String deviceIPIDhash \u003d currentAvailableFpga.get(i).getAocxHash();\n         if (deviceIPIDhash !\u003d null \u0026\u0026\n             deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\n           assignedFpgas.add(currentAvailableFpga.get(i));\n           currentAvailableFpga.remove(i);\n           matchIPCount++;\n         }\n       }\n       int remaining \u003d (int) count - matchIPCount;\n       while (remaining \u003e 0) {\n         assignedFpgas.add(currentAvailableFpga.remove(0));\n         remaining--;\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedFpgas.isEmpty()) {\n         try {\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n         } catch (IOException e) {\n           // failed, give the allocation back\n           currentAvailableFpga.addAll(assignedFpgas);\n           throw new ResourceHandlerException(e);\n         }\n \n         // update state store success, update internal used FPGAs\n-        usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n-        usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n+        containerToFpgaMapping.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n+        containerToFpgaMapping.get(requestor).addAll(assignedFpgas);\n       }\n \n       return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n     }\n     return new FpgaAllocation(null, allowedFpgas);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized FpgaAllocation assignFpga(String type, long count,\n      Container container, String ipidHash) throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpgas.get(type);\n\n    String requestor \u003d container.getContainerId().toString();\n    if (null \u003d\u003d currentAvailableFpga) {\n      throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n    }\n    if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n      throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n          count + \", available:\" + getAvailableFpgaCount());\n    }\n    if (count \u003e 0) {\n      // Allocate devices with matching IP first, then any device is ok\n      List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n      int matchIPCount \u003d 0;\n      for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n        String deviceIPIDhash \u003d currentAvailableFpga.get(i).getAocxHash();\n        if (deviceIPIDhash !\u003d null \u0026\u0026\n            deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\n          assignedFpgas.add(currentAvailableFpga.get(i));\n          currentAvailableFpga.remove(i);\n          matchIPCount++;\n        }\n      }\n      int remaining \u003d (int) count - matchIPCount;\n      while (remaining \u003e 0) {\n        assignedFpgas.add(currentAvailableFpga.remove(0));\n        remaining--;\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedFpgas.isEmpty()) {\n        try {\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n        } catch (IOException e) {\n          // failed, give the allocation back\n          currentAvailableFpga.addAll(assignedFpgas);\n          throw new ResourceHandlerException(e);\n        }\n\n        // update state store success, update internal used FPGAs\n        containerToFpgaMapping.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n        containerToFpgaMapping.get(requestor).addAll(assignedFpgas);\n      }\n\n      return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n    }\n    return new FpgaAllocation(null, allowedFpgas);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java",
      "extendedDetails": {}
    },
    "a99eb80659835107f4015c859b3319bf3a70c281": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9267. General improvements in FpgaResourceHandlerImpl. Contributed by Peter Bacsko.\n",
      "commitDate": "21/03/19 11:15 AM",
      "commitName": "a99eb80659835107f4015c859b3319bf3a70c281",
      "commitAuthor": "Devaraj K",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9267. General improvements in FpgaResourceHandlerImpl. Contributed by Peter Bacsko.\n",
          "commitDate": "21/03/19 11:15 AM",
          "commitName": "a99eb80659835107f4015c859b3319bf3a70c281",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "18/03/19 10:57 AM",
          "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n   public synchronized FpgaAllocation assignFpga(String type, long count,\n-      Container container, String IPIDPreference) throws ResourceHandlerException {\n+      Container container, String ipidHash) throws ResourceHandlerException {\n     List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n     String requestor \u003d container.getContainerId().toString();\n     if (null \u003d\u003d currentAvailableFpga) {\n       throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n     }\n     if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n       throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n           count + \", available:\" + getAvailableFpgaCount());\n     }\n     if (count \u003e 0) {\n       // Allocate devices with matching IP first, then any device is ok\n       List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n       int matchIPCount \u003d 0;\n       for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n-        if ( null !\u003d currentAvailableFpga.get(i).getIPID() \u0026\u0026\n-            currentAvailableFpga.get(i).getIPID().equalsIgnoreCase(IPIDPreference)) {\n+        String deviceIPIDhash \u003d currentAvailableFpga.get(i).getAocxHash();\n+        if (deviceIPIDhash !\u003d null \u0026\u0026\n+            deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\n           assignedFpgas.add(currentAvailableFpga.get(i));\n           currentAvailableFpga.remove(i);\n           matchIPCount++;\n         }\n       }\n       int remaining \u003d (int) count - matchIPCount;\n       while (remaining \u003e 0) {\n         assignedFpgas.add(currentAvailableFpga.remove(0));\n         remaining--;\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedFpgas.isEmpty()) {\n         try {\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n         } catch (IOException e) {\n           // failed, give the allocation back\n           currentAvailableFpga.addAll(assignedFpgas);\n           throw new ResourceHandlerException(e);\n         }\n \n         // update state store success, update internal used FPGAs\n         usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n         usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n       }\n \n       return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n     }\n     return new FpgaAllocation(null, allowedFpgas);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized FpgaAllocation assignFpga(String type, long count,\n      Container container, String ipidHash) throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n    String requestor \u003d container.getContainerId().toString();\n    if (null \u003d\u003d currentAvailableFpga) {\n      throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n    }\n    if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n      throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n          count + \", available:\" + getAvailableFpgaCount());\n    }\n    if (count \u003e 0) {\n      // Allocate devices with matching IP first, then any device is ok\n      List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n      int matchIPCount \u003d 0;\n      for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n        String deviceIPIDhash \u003d currentAvailableFpga.get(i).getAocxHash();\n        if (deviceIPIDhash !\u003d null \u0026\u0026\n            deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\n          assignedFpgas.add(currentAvailableFpga.get(i));\n          currentAvailableFpga.remove(i);\n          matchIPCount++;\n        }\n      }\n      int remaining \u003d (int) count - matchIPCount;\n      while (remaining \u003e 0) {\n        assignedFpgas.add(currentAvailableFpga.remove(0));\n        remaining--;\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedFpgas.isEmpty()) {\n        try {\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n        } catch (IOException e) {\n          // failed, give the allocation back\n          currentAvailableFpga.addAll(assignedFpgas);\n          throw new ResourceHandlerException(e);\n        }\n\n        // update state store success, update internal used FPGAs\n        usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n        usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n      }\n\n      return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n    }\n    return new FpgaAllocation(null, allowedFpgas);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java",
          "extendedDetails": {
            "oldValue": "[type-String, count-long, container-Container, IPIDPreference-String]",
            "newValue": "[type-String, count-long, container-Container, ipidHash-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9267. General improvements in FpgaResourceHandlerImpl. Contributed by Peter Bacsko.\n",
          "commitDate": "21/03/19 11:15 AM",
          "commitName": "a99eb80659835107f4015c859b3319bf3a70c281",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "18/03/19 10:57 AM",
          "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n   public synchronized FpgaAllocation assignFpga(String type, long count,\n-      Container container, String IPIDPreference) throws ResourceHandlerException {\n+      Container container, String ipidHash) throws ResourceHandlerException {\n     List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n     String requestor \u003d container.getContainerId().toString();\n     if (null \u003d\u003d currentAvailableFpga) {\n       throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n     }\n     if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n       throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n           count + \", available:\" + getAvailableFpgaCount());\n     }\n     if (count \u003e 0) {\n       // Allocate devices with matching IP first, then any device is ok\n       List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n       int matchIPCount \u003d 0;\n       for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n-        if ( null !\u003d currentAvailableFpga.get(i).getIPID() \u0026\u0026\n-            currentAvailableFpga.get(i).getIPID().equalsIgnoreCase(IPIDPreference)) {\n+        String deviceIPIDhash \u003d currentAvailableFpga.get(i).getAocxHash();\n+        if (deviceIPIDhash !\u003d null \u0026\u0026\n+            deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\n           assignedFpgas.add(currentAvailableFpga.get(i));\n           currentAvailableFpga.remove(i);\n           matchIPCount++;\n         }\n       }\n       int remaining \u003d (int) count - matchIPCount;\n       while (remaining \u003e 0) {\n         assignedFpgas.add(currentAvailableFpga.remove(0));\n         remaining--;\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedFpgas.isEmpty()) {\n         try {\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n         } catch (IOException e) {\n           // failed, give the allocation back\n           currentAvailableFpga.addAll(assignedFpgas);\n           throw new ResourceHandlerException(e);\n         }\n \n         // update state store success, update internal used FPGAs\n         usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n         usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n       }\n \n       return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n     }\n     return new FpgaAllocation(null, allowedFpgas);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized FpgaAllocation assignFpga(String type, long count,\n      Container container, String ipidHash) throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n    String requestor \u003d container.getContainerId().toString();\n    if (null \u003d\u003d currentAvailableFpga) {\n      throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n    }\n    if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n      throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n          count + \", available:\" + getAvailableFpgaCount());\n    }\n    if (count \u003e 0) {\n      // Allocate devices with matching IP first, then any device is ok\n      List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n      int matchIPCount \u003d 0;\n      for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n        String deviceIPIDhash \u003d currentAvailableFpga.get(i).getAocxHash();\n        if (deviceIPIDhash !\u003d null \u0026\u0026\n            deviceIPIDhash.equalsIgnoreCase(ipidHash)) {\n          assignedFpgas.add(currentAvailableFpga.get(i));\n          currentAvailableFpga.remove(i);\n          matchIPCount++;\n        }\n      }\n      int remaining \u003d (int) count - matchIPCount;\n      while (remaining \u003e 0) {\n        assignedFpgas.add(currentAvailableFpga.remove(0));\n        remaining--;\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedFpgas.isEmpty()) {\n        try {\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n        } catch (IOException e) {\n          // failed, give the allocation back\n          currentAvailableFpga.addAll(assignedFpgas);\n          throw new ResourceHandlerException(e);\n        }\n\n        // update state store success, update internal used FPGAs\n        usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n        usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n      }\n\n      return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n    }\n    return new FpgaAllocation(null, allowedFpgas);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,49 @@\n+  public synchronized FpgaAllocation assignFpga(String type, long count,\n+      Container container, String IPIDPreference) throws ResourceHandlerException {\n+    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n+    String requestor \u003d container.getContainerId().toString();\n+    if (null \u003d\u003d currentAvailableFpga) {\n+      throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n+    }\n+    if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n+      throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n+          count + \", available:\" + getAvailableFpgaCount());\n+    }\n+    if (count \u003e 0) {\n+      // Allocate devices with matching IP first, then any device is ok\n+      List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n+      int matchIPCount \u003d 0;\n+      for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n+        if ( null !\u003d currentAvailableFpga.get(i).getIPID() \u0026\u0026\n+            currentAvailableFpga.get(i).getIPID().equalsIgnoreCase(IPIDPreference)) {\n+          assignedFpgas.add(currentAvailableFpga.get(i));\n+          currentAvailableFpga.remove(i);\n+          matchIPCount++;\n+        }\n+      }\n+      int remaining \u003d (int) count - matchIPCount;\n+      while (remaining \u003e 0) {\n+        assignedFpgas.add(currentAvailableFpga.remove(0));\n+        remaining--;\n+      }\n+\n+      // Record in state store if we allocated anything\n+      if (!assignedFpgas.isEmpty()) {\n+        try {\n+          nmContext.getNMStateStore().storeAssignedResources(container,\n+              FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n+        } catch (IOException e) {\n+          // failed, give the allocation back\n+          currentAvailableFpga.addAll(assignedFpgas);\n+          throw new ResourceHandlerException(e);\n+        }\n+\n+        // update state store success, update internal used FPGAs\n+        usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n+        usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n+      }\n+\n+      return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n+    }\n+    return new FpgaAllocation(null, allowedFpgas);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized FpgaAllocation assignFpga(String type, long count,\n      Container container, String IPIDPreference) throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e currentAvailableFpga \u003d availableFpga.get(type);\n    String requestor \u003d container.getContainerId().toString();\n    if (null \u003d\u003d currentAvailableFpga) {\n      throw new ResourceHandlerException(\"No such type of FPGA resource available: \" + type);\n    }\n    if (count \u003c 0 || count \u003e currentAvailableFpga.size()) {\n      throw new ResourceHandlerException(\"Invalid FPGA request count or not enough, requested:\" +\n          count + \", available:\" + getAvailableFpgaCount());\n    }\n    if (count \u003e 0) {\n      // Allocate devices with matching IP first, then any device is ok\n      List\u003cFpgaDevice\u003e assignedFpgas \u003d new LinkedList\u003c\u003e();\n      int matchIPCount \u003d 0;\n      for (int i \u003d 0; i \u003c currentAvailableFpga.size(); i++) {\n        if ( null !\u003d currentAvailableFpga.get(i).getIPID() \u0026\u0026\n            currentAvailableFpga.get(i).getIPID().equalsIgnoreCase(IPIDPreference)) {\n          assignedFpgas.add(currentAvailableFpga.get(i));\n          currentAvailableFpga.remove(i);\n          matchIPCount++;\n        }\n      }\n      int remaining \u003d (int) count - matchIPCount;\n      while (remaining \u003e 0) {\n        assignedFpgas.add(currentAvailableFpga.remove(0));\n        remaining--;\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedFpgas.isEmpty()) {\n        try {\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              FPGA_URI, new LinkedList\u003c\u003e(assignedFpgas));\n        } catch (IOException e) {\n          // failed, give the allocation back\n          currentAvailableFpga.addAll(assignedFpgas);\n          throw new ResourceHandlerException(e);\n        }\n\n        // update state store success, update internal used FPGAs\n        usedFpgaByRequestor.putIfAbsent(requestor, new LinkedList\u003c\u003e());\n        usedFpgaByRequestor.get(requestor).addAll(assignedFpgas);\n      }\n\n      return new FpgaAllocation(assignedFpgas, currentAvailableFpga);\n    }\n    return new FpgaAllocation(null, allowedFpgas);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java"
    }
  }
}