{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowScanner.java",
  "functionName": "compareCellValues",
  "functionId": "compareCellValues___previouslyChosenCell-Cell__currentCell-Cell__currentAggOp-AggregationOperation__converter-NumericValueConverter",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
  "functionStartLine": 541,
  "functionEndLine": 578,
  "numCommitsSeen": 25,
  "timeTaken": 4863,
  "changeHistory": [
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
    "10663b78c8596693322dc3636f173035195bf607",
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "9bdd455dced15c84430ea0a0a59410df924f02a7",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60"
  ],
  "changeHistoryShort": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": "Yfilerename",
    "10663b78c8596693322dc3636f173035195bf607": "Yfilerename",
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c": "Yfilerename",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "9bdd455dced15c84430ea0a0a59410df924f02a7": "Ybodychange",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": "Ymultichange(Yparameterchange,Ybodychange)",
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
      "commitDate": "05/03/18 10:25 PM",
      "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "05/03/18 6:15 PM",
      "commitNameOld": "745190ecdca8f7dfc5eebffdd1c1aa4f86229120",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
      }
    },
    "10663b78c8596693322dc3636f173035195bf607": {
      "type": "Yfilerename",
      "commitMessage": "Revert \"yarn-7346.07.patch\"\n\nThis reverts commit 5e37ca5bb49f945e27f49a413d08baab562dfa9c.\n",
      "commitDate": "28/02/18 9:11 PM",
      "commitName": "10663b78c8596693322dc3636f173035195bf607",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "28/02/18 9:10 PM",
      "commitNameOld": "d1274c3b71549cb000868500c293cafd880b3713",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
      }
    },
    "5e37ca5bb49f945e27f49a413d08baab562dfa9c": {
      "type": "Yfilerename",
      "commitMessage": "yarn-7346.07.patch\n",
      "commitDate": "28/02/18 9:04 PM",
      "commitName": "5e37ca5bb49f945e27f49a413d08baab562dfa9c",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "28/02/18 6:18 PM",
      "commitNameOld": "6e6945cd78d76c6beaec85c963f27e28bf96c0f2",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-1/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
      }
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
      }
    },
    "9bdd455dced15c84430ea0a0a59410df924f02a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4062. Add the flush and compaction functionality via coprocessors and scanners for flow run table (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9bdd455dced15c84430ea0a0a59410df924f02a7",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n       AggregationOperation currentAggOp, NumericValueConverter converter)\n       throws IOException {\n     if (previouslyChosenCell \u003d\u003d null) {\n       return currentCell;\n     }\n     try {\n       Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n           CellUtil.cloneValue(previouslyChosenCell));\n       Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n           .cloneValue(currentCell));\n       switch (currentAggOp) {\n-      case MIN:\n+      case GLOBAL_MIN:\n         if (converter.compare(\n             currentCellValue, previouslyChosenCellValue) \u003c 0) {\n           // new value is minimum, hence return this cell\n           return currentCell;\n         } else {\n           // previously chosen value is miniumum, hence return previous min cell\n           return previouslyChosenCell;\n         }\n-      case MAX:\n+      case GLOBAL_MAX:\n         if (converter.compare(\n             currentCellValue, previouslyChosenCellValue) \u003e 0) {\n           // new value is max, hence return this cell\n           return currentCell;\n         } else {\n           // previously chosen value is max, hence return previous max cell\n           return previouslyChosenCell;\n         }\n       default:\n         return currentCell;\n       }\n     } catch (IllegalArgumentException iae) {\n       LOG.error(\"caught iae during conversion to long \", iae);\n       return currentCell;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
      "extendedDetails": {}
    },
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "b51d0fef56a59b15489f5b932025718b4e9613d2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n   private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n-      AggregationOperation currentAggOp) throws IOException {\n+      AggregationOperation currentAggOp, NumericValueConverter converter)\n+      throws IOException {\n     if (previouslyChosenCell \u003d\u003d null) {\n       return currentCell;\n     }\n     try {\n-      long previouslyChosenCellValue \u003d ((Number) GenericObjectMapper\n-          .read(CellUtil.cloneValue(previouslyChosenCell))).longValue();\n-      long currentCellValue \u003d ((Number) GenericObjectMapper.read(CellUtil\n-          .cloneValue(currentCell))).longValue();\n+      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n+          CellUtil.cloneValue(previouslyChosenCell));\n+      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n+          .cloneValue(currentCell));\n       switch (currentAggOp) {\n       case MIN:\n-        if (currentCellValue \u003c previouslyChosenCellValue) {\n+        if (converter.compare(\n+            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n           // new value is minimum, hence return this cell\n           return currentCell;\n         } else {\n           // previously chosen value is miniumum, hence return previous min cell\n           return previouslyChosenCell;\n         }\n       case MAX:\n-        if (currentCellValue \u003e previouslyChosenCellValue) {\n+        if (converter.compare(\n+            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n           // new value is max, hence return this cell\n           return currentCell;\n         } else {\n           // previously chosen value is max, hence return previous max cell\n           return previouslyChosenCell;\n         }\n       default:\n         return currentCell;\n       }\n     } catch (IllegalArgumentException iae) {\n       LOG.error(\"caught iae during conversion to long \", iae);\n       return currentCell;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {
            "oldValue": "[previouslyChosenCell-Cell, currentCell-Cell, currentAggOp-AggregationOperation]",
            "newValue": "[previouslyChosenCell-Cell, currentCell-Cell, currentAggOp-AggregationOperation, converter-NumericValueConverter]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "b51d0fef56a59b15489f5b932025718b4e9613d2",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n   private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n-      AggregationOperation currentAggOp) throws IOException {\n+      AggregationOperation currentAggOp, NumericValueConverter converter)\n+      throws IOException {\n     if (previouslyChosenCell \u003d\u003d null) {\n       return currentCell;\n     }\n     try {\n-      long previouslyChosenCellValue \u003d ((Number) GenericObjectMapper\n-          .read(CellUtil.cloneValue(previouslyChosenCell))).longValue();\n-      long currentCellValue \u003d ((Number) GenericObjectMapper.read(CellUtil\n-          .cloneValue(currentCell))).longValue();\n+      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n+          CellUtil.cloneValue(previouslyChosenCell));\n+      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n+          .cloneValue(currentCell));\n       switch (currentAggOp) {\n       case MIN:\n-        if (currentCellValue \u003c previouslyChosenCellValue) {\n+        if (converter.compare(\n+            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n           // new value is minimum, hence return this cell\n           return currentCell;\n         } else {\n           // previously chosen value is miniumum, hence return previous min cell\n           return previouslyChosenCell;\n         }\n       case MAX:\n-        if (currentCellValue \u003e previouslyChosenCellValue) {\n+        if (converter.compare(\n+            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n           // new value is max, hence return this cell\n           return currentCell;\n         } else {\n           // previously chosen value is max, hence return previous max cell\n           return previouslyChosenCell;\n         }\n       default:\n         return currentCell;\n       }\n     } catch (IllegalArgumentException iae) {\n       LOG.error(\"caught iae during conversion to long \", iae);\n       return currentCell;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "a68e3839218523403f42acd7bdd7ce1da59a5e60": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3901. Populate flow run data in the flow_run \u0026 flow activity tables (Vrushali C via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,35 @@\n+  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n+      AggregationOperation currentAggOp) throws IOException {\n+    if (previouslyChosenCell \u003d\u003d null) {\n+      return currentCell;\n+    }\n+    try {\n+      long previouslyChosenCellValue \u003d ((Number) GenericObjectMapper\n+          .read(CellUtil.cloneValue(previouslyChosenCell))).longValue();\n+      long currentCellValue \u003d ((Number) GenericObjectMapper.read(CellUtil\n+          .cloneValue(currentCell))).longValue();\n+      switch (currentAggOp) {\n+      case MIN:\n+        if (currentCellValue \u003c previouslyChosenCellValue) {\n+          // new value is minimum, hence return this cell\n+          return currentCell;\n+        } else {\n+          // previously chosen value is miniumum, hence return previous min cell\n+          return previouslyChosenCell;\n+        }\n+      case MAX:\n+        if (currentCellValue \u003e previouslyChosenCellValue) {\n+          // new value is max, hence return this cell\n+          return currentCell;\n+        } else {\n+          // previously chosen value is max, hence return previous max cell\n+          return previouslyChosenCell;\n+        }\n+      default:\n+        return currentCell;\n+      }\n+    } catch (IllegalArgumentException iae) {\n+      LOG.error(\"caught iae during conversion to long \", iae);\n+      return currentCell;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp) throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      long previouslyChosenCellValue \u003d ((Number) GenericObjectMapper\n          .read(CellUtil.cloneValue(previouslyChosenCell))).longValue();\n      long currentCellValue \u003d ((Number) GenericObjectMapper.read(CellUtil\n          .cloneValue(currentCell))).longValue();\n      switch (currentAggOp) {\n      case MIN:\n        if (currentCellValue \u003c previouslyChosenCellValue) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case MAX:\n        if (currentCellValue \u003e previouslyChosenCellValue) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
    }
  }
}