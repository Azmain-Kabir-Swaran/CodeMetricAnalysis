{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "getConnectionId",
  "functionId": "getConnectionId___addr-InetSocketAddress__protocol-Class__?____ticket-UserGroupInformation__rpcTimeout-int__connectionRetryPolicy-RetryPolicy__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 1760,
  "functionEndLine": 1779,
  "numCommitsSeen": 173,
  "timeTaken": 4029,
  "changeHistory": [
    "e69614d6508c279f34a32160e1fab4aee9f49b2a",
    "f7fe50d55f51257c7b38724b37b9976a96f98c38",
    "65be21267587f04a2c33af65b951211cc9085b15",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
    "20af88280a83ac1c7df97f476849303d662efe48",
    "85c4158074e53d60c8682d76eaf952afbe499d67",
    "009dfed8d7b3056cd8915f74d84dc06850cb8a05",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "becf8e919a21a04aacd157dd5ee0d2ac8ae1544b",
    "1c75bcc76baf6bcd2cb700d3efb4e2489b19cae7"
  ],
  "changeHistoryShort": {
    "e69614d6508c279f34a32160e1fab4aee9f49b2a": "Ybodychange",
    "f7fe50d55f51257c7b38724b37b9976a96f98c38": "Ybodychange",
    "65be21267587f04a2c33af65b951211cc9085b15": "Ybodychange",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "20af88280a83ac1c7df97f476849303d662efe48": "Ybodychange",
    "85c4158074e53d60c8682d76eaf952afbe499d67": "Ybodychange",
    "009dfed8d7b3056cd8915f74d84dc06850cb8a05": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "817df4d5d3687a1fa51b5272b7ace57a51fe6643": "Ymodifierchange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "becf8e919a21a04aacd157dd5ee0d2ac8ae1544b": "Ybodychange",
    "1c75bcc76baf6bcd2cb700d3efb4e2489b19cae7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e69614d6508c279f34a32160e1fab4aee9f49b2a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10070. RPC client doesn\u0027t use per-connection conf to determine server\u0027s expected Kerberos principal name. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570776 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/02/14 5:09 PM",
      "commitName": "e69614d6508c279f34a32160e1fab4aee9f49b2a",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "14/02/14 1:25 PM",
      "commitNameOld": "943d3f641cd7256ee6c9c0fe72314aee7ce15e91",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,20 @@\n     static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n \n       if (connectionRetryPolicy \u003d\u003d null) {\n         final int max \u003d conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n         final int retryInterval \u003d conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY,\n             CommonConfigurationKeysPublic\n                 .IPC_CLIENT_CONNECT_RETRY_INTERVAL_DEFAULT);\n \n         connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n             max, retryInterval, TimeUnit.MILLISECONDS);\n       }\n \n-      boolean doPing \u003d\n-        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket, rpcTimeout,\n-          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n-              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n-          connectionRetryPolicy,\n-          conf.getInt(\n-            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n-            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n-          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n-              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n-          doPing, \n-          (doPing ? Client.getPingInterval(conf) : 0));\n+          connectionRetryPolicy, conf);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n\n      if (connectionRetryPolicy \u003d\u003d null) {\n        final int max \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n        final int retryInterval \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY,\n            CommonConfigurationKeysPublic\n                .IPC_CLIENT_CONNECT_RETRY_INTERVAL_DEFAULT);\n\n        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n            max, retryInterval, TimeUnit.MILLISECONDS);\n      }\n\n      return new ConnectionId(addr, protocol, ticket, rpcTimeout,\n          connectionRetryPolicy, conf);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "f7fe50d55f51257c7b38724b37b9976a96f98c38": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10127. Add ipc.client.connect.retry.interval to control the frequency of connection retries (Karthik Kambatla via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547626 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/13 2:44 PM",
      "commitName": "f7fe50d55f51257c7b38724b37b9976a96f98c38",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "31/10/13 1:55 PM",
      "commitNameOld": "9aa2f51812e28c0f30299b17f6bbc181fbfa30d4",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 33.08,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n     static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n \n       if (connectionRetryPolicy \u003d\u003d null) {\n         final int max \u003d conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n+        final int retryInterval \u003d conf.getInt(\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY,\n+            CommonConfigurationKeysPublic\n+                .IPC_CLIENT_CONNECT_RETRY_INTERVAL_DEFAULT);\n+\n         connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n-            max, 1, TimeUnit.SECONDS);\n+            max, retryInterval, TimeUnit.MILLISECONDS);\n       }\n \n       boolean doPing \u003d\n         conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket, rpcTimeout,\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n           connectionRetryPolicy,\n           conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n\n      if (connectionRetryPolicy \u003d\u003d null) {\n        final int max \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n        final int retryInterval \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY,\n            CommonConfigurationKeysPublic\n                .IPC_CLIENT_CONNECT_RETRY_INTERVAL_DEFAULT);\n\n        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n            max, retryInterval, TimeUnit.MILLISECONDS);\n      }\n\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket, rpcTimeout,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          connectionRetryPolicy,\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "65be21267587f04a2c33af65b951211cc9085b15": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9698. [RPC v9] Client must honor server\u0027s SASL negotiate response (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 7:44 AM",
      "commitName": "65be21267587f04a2c33af65b951211cc9085b15",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "22/07/13 12:22 AM",
      "commitNameOld": "3eb61be352589491117ac2781bb18f55988a8084",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n     static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n \n       if (connectionRetryPolicy \u003d\u003d null) {\n         final int max \u003d conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n         connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n             max, 1, TimeUnit.SECONDS);\n       }\n \n-      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d\n         conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n-      return new ConnectionId(addr, protocol, ticket,\n-          rpcTimeout, remotePrincipal,\n+      return new ConnectionId(addr, protocol, ticket, rpcTimeout,\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n           connectionRetryPolicy,\n           conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n\n      if (connectionRetryPolicy \u003d\u003d null) {\n        final int max \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n            max, 1, TimeUnit.SECONDS);\n      }\n\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket, rpcTimeout,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          connectionRetryPolicy,\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 10:27 PM",
      "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/12 10:27 PM",
          "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "11/05/12 9:56 AM",
          "commitNameOld": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 31.52,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-    public static ConnectionId getConnectionId(InetSocketAddress addr,\n+    static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n-        Configuration conf) throws IOException {\n+        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n+\n+      if (connectionRetryPolicy \u003d\u003d null) {\n+        final int max \u003d conf.getInt(\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n+        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+            max, 1, TimeUnit.SECONDS);\n+      }\n+\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d\n         conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n-          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n-              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n+          connectionRetryPolicy,\n           conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n\n      if (connectionRetryPolicy \u003d\u003d null) {\n        final int max \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n            max, 1, TimeUnit.SECONDS);\n      }\n\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          connectionRetryPolicy,\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[addr-InetSocketAddress, protocol-Class\u003c?\u003e, ticket-UserGroupInformation, rpcTimeout-int, conf-Configuration]",
            "newValue": "[addr-InetSocketAddress, protocol-Class\u003c?\u003e, ticket-UserGroupInformation, rpcTimeout-int, connectionRetryPolicy-RetryPolicy, conf-Configuration]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/12 10:27 PM",
          "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "11/05/12 9:56 AM",
          "commitNameOld": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 31.52,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-    public static ConnectionId getConnectionId(InetSocketAddress addr,\n+    static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n-        Configuration conf) throws IOException {\n+        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n+\n+      if (connectionRetryPolicy \u003d\u003d null) {\n+        final int max \u003d conf.getInt(\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n+        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+            max, 1, TimeUnit.SECONDS);\n+      }\n+\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d\n         conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n-          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n-              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n+          connectionRetryPolicy,\n           conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n\n      if (connectionRetryPolicy \u003d\u003d null) {\n        final int max \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n            max, 1, TimeUnit.SECONDS);\n      }\n\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          connectionRetryPolicy,\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/12 10:27 PM",
          "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "11/05/12 9:56 AM",
          "commitNameOld": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 31.52,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-    public static ConnectionId getConnectionId(InetSocketAddress addr,\n+    static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n-        Configuration conf) throws IOException {\n+        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n+\n+      if (connectionRetryPolicy \u003d\u003d null) {\n+        final int max \u003d conf.getInt(\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n+        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n+            max, 1, TimeUnit.SECONDS);\n+      }\n+\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d\n         conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n-          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n-              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n+          connectionRetryPolicy,\n           conf.getInt(\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n             CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        RetryPolicy connectionRetryPolicy, Configuration conf) throws IOException {\n\n      if (connectionRetryPolicy \u003d\u003d null) {\n        final int max \u003d conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT);\n        connectionRetryPolicy \u003d RetryPolicies.retryUpToMaximumCountWithFixedSleep(\n            max, 1, TimeUnit.SECONDS);\n      }\n\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          connectionRetryPolicy,\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "20af88280a83ac1c7df97f476849303d662efe48": {
      "type": "Ybodychange",
      "commitMessage": "Fix bad merge which mixed up two configuration options.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227962 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 9:37 PM",
      "commitName": "20af88280a83ac1c7df97f476849303d662efe48",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "05/01/12 11:21 AM",
      "commitNameOld": "3187a3ae05aff7ee38bd0c875db4fa8eb6c02f0a",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     public static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         Configuration conf) throws IOException {\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d\n         conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n-          conf.getInt(\n-            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n-            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n           conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n+          conf.getInt(\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n               CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "85c4158074e53d60c8682d76eaf952afbe499d67": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7949. Updated maxIdleTime default in the code to match core-default.xml. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227423 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/12 5:31 PM",
      "commitName": "85c4158074e53d60c8682d76eaf952afbe499d67",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "04/12/11 12:44 PM",
      "commitNameOld": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 31.2,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,17 @@\n     public static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         Configuration conf) throws IOException {\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n-      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n+      boolean doPing \u003d\n+        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n-          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n-          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n-          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n+          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n+              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n+          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n+              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n+          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n+              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d\n        conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_PING_KEY, true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT),\n          conf.getInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT),\n          conf.getBoolean(CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n              CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_DEFAULT),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "009dfed8d7b3056cd8915f74d84dc06850cb8a05": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7932. Make client connection retries on socket time outs configurable. Contributed by Uma Maheswara Rao G.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1220957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/11 1:32 PM",
      "commitName": "009dfed8d7b3056cd8915f74d84dc06850cb8a05",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/12/11 12:44 PM",
      "commitNameOld": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 15.03,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,16 @@\n     public static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         Configuration conf) throws IOException {\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n           conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n           conf.getInt(\"ipc.client.connect.max.retries\", 10),\n+          conf.getInt(\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n+            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n           conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getInt(\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,\n            CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "817df4d5d3687a1fa51b5272b7ace57a51fe6643": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-7474. Refactor ClientCache out of WritableRpcEngine. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151978 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/07/11 12:28 PM",
      "commitName": "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "25/07/11 12:48 AM",
      "commitNameOld": "85461fb0fa36c82a85b7787162541cdc83e9c237",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.49,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n-    static ConnectionId getConnectionId(InetSocketAddress addr,\n+    public static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         Configuration conf) throws IOException {\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n       boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n           conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n           conf.getInt(\"ipc.client.connect.max.retries\", 10),\n           conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n           doPing, \n           (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldValue": "[static]",
        "newValue": "[public, static]"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "becf8e919a21a04aacd157dd5ee0d2ac8ae1544b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6938. ConnectionId.getRemotePrincipal() should check if security is enabled. Contributed by Kan Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@992479 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/09/10 2:24 PM",
      "commitName": "becf8e919a21a04aacd157dd5ee0d2ac8ae1544b",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "01/09/10 5:35 PM",
      "commitNameOld": "1c75bcc76baf6bcd2cb700d3efb4e2489b19cae7",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,13 @@\n     static ConnectionId getConnectionId(InetSocketAddress addr,\n         Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n         Configuration conf) throws IOException {\n       String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n+      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n       return new ConnectionId(addr, protocol, ticket,\n           rpcTimeout, remotePrincipal,\n           conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n           conf.getInt(\"ipc.client.connect.max.retries\", 10),\n           conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n-          conf.getBoolean(\"ipc.client.ping\", true),\n-          Client.getPingInterval(conf));\n+          doPing, \n+          (doPing ? Client.getPingInterval(conf) : 0));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      boolean doPing \u003d conf.getBoolean(\"ipc.client.ping\", true);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          doPing, \n          (doPing ? Client.getPingInterval(conf) : 0));\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "1c75bcc76baf6bcd2cb700d3efb4e2489b19cae7": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6907. Rpc client doesn\u0027t use the per-connection conf to figure out server\u0027s Kerberos principal. Contributed by Kan Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@991780 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/09/10 5:35 PM",
      "commitName": "1c75bcc76baf6bcd2cb700d3efb4e2489b19cae7",
      "commitAuthor": "Hairong Kuang",
      "diff": "@@ -0,0 +1,12 @@\n+    static ConnectionId getConnectionId(InetSocketAddress addr,\n+        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n+        Configuration conf) throws IOException {\n+      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n+      return new ConnectionId(addr, protocol, ticket,\n+          rpcTimeout, remotePrincipal,\n+          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n+          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n+          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n+          conf.getBoolean(\"ipc.client.ping\", true),\n+          Client.getPingInterval(conf));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static ConnectionId getConnectionId(InetSocketAddress addr,\n        Class\u003c?\u003e protocol, UserGroupInformation ticket, int rpcTimeout,\n        Configuration conf) throws IOException {\n      String remotePrincipal \u003d getRemotePrincipal(conf, addr, protocol);\n      return new ConnectionId(addr, protocol, ticket,\n          rpcTimeout, remotePrincipal,\n          conf.getInt(\"ipc.client.connection.maxidletime\", 10000), // 10s\n          conf.getInt(\"ipc.client.connect.max.retries\", 10),\n          conf.getBoolean(\"ipc.client.tcpnodelay\", false),\n          conf.getBoolean(\"ipc.client.ping\", true),\n          Client.getPingInterval(conf));\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}