{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebAppFilter.java",
  "functionName": "doFilter",
  "functionId": "doFilter___request-HttpServletRequest__response-HttpServletResponse__chain-FilterChain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
  "functionStartLine": 107,
  "functionEndLine": 181,
  "numCommitsSeen": 13,
  "timeTaken": 2576,
  "changeHistory": [
    "d0162f2040a4d98fbac51527dfc9447888cb32ab",
    "19b645c93801a53d4486f9a7639186525e51f723",
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36",
    "09c64ba1ba8be7a2ac31f4e42efb8c99b682399f",
    "a3fd2ccc869dfc1f04d1cf0a8678d4d90a43a80f",
    "d9bcf99aef23f71391c728279698f4265a8d1243",
    "b0180afc9c87f6b6ea2cae6fb9e420295e961a21",
    "d9cdcb9474528733c488d4a5c73d2e4abb1af6fb"
  ],
  "changeHistoryShort": {
    "d0162f2040a4d98fbac51527dfc9447888cb32ab": "Ybodychange",
    "19b645c93801a53d4486f9a7639186525e51f723": "Ybodychange",
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36": "Ybodychange",
    "09c64ba1ba8be7a2ac31f4e42efb8c99b682399f": "Ybodychange",
    "a3fd2ccc869dfc1f04d1cf0a8678d4d90a43a80f": "Ybodychange",
    "d9bcf99aef23f71391c728279698f4265a8d1243": "Ybodychange",
    "b0180afc9c87f6b6ea2cae6fb9e420295e961a21": "Ybodychange",
    "d9cdcb9474528733c488d4a5c73d2e4abb1af6fb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d0162f2040a4d98fbac51527dfc9447888cb32ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5246. NMWebAppFilter web redirects drop query parameters. Contributed by Varun Vasudev.\n",
      "commitDate": "19/06/16 5:44 PM",
      "commitName": "d0162f2040a4d98fbac51527dfc9447888cb32ab",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 5.11,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,75 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n     String htmlEscapedUri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n     if (htmlEscapedUri \u003d\u003d null) {\n       htmlEscapedUri \u003d \"/\";\n     }\n \n-    String uriWithQueryString \u003d htmlEscapedUri;\n-    String htmlEscapedUriWithQueryString \u003d htmlEscapedUri;\n-\n-    String queryString \u003d request.getQueryString();\n-    if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n-      String reqEncoding \u003d request.getCharacterEncoding();\n-      if (reqEncoding \u003d\u003d null || reqEncoding.isEmpty()) {\n-        reqEncoding \u003d \"ISO-8859-1\";\n-      }\n-      Charset encoding \u003d Charset.forName(reqEncoding);\n-      List\u003cNameValuePair\u003e params \u003d URLEncodedUtils.parse(queryString, encoding);\n-      String urlEncodedQueryString \u003d URLEncodedUtils.format(params, encoding);\n-      uriWithQueryString +\u003d \"?\" + urlEncodedQueryString;\n-      htmlEscapedUriWithQueryString \u003d HtmlQuoting.quoteHtmlChars(\n-          request.getRequestURI() + \"?\" + urlEncodedQueryString);\n-    }\n+    String uriWithQueryString \u003d\n+        WebAppUtils.appendQueryParams(request, htmlEscapedUri);\n+    String htmlEscapedUriWithQueryString \u003d\n+        WebAppUtils.getHtmlEscapedURIWithQueryString(request);\n \n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n         \u0026\u0026 shouldRedirect(rmWebApp, htmlEscapedUri)) {\n \n       String redirectPath \u003d rmWebApp.getRedirectPath();\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         redirectPath +\u003d uriWithQueryString;\n         String redirectMsg \u003d \"This is standby RM. The redirect url is: \"\n             + htmlEscapedUriWithQueryString;\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         response.setHeader(\"Location\", redirectPath);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       } else {\n         boolean doRetry \u003d true;\n         String retryIntervalStr \u003d\n             request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n         int retryInterval \u003d 0;\n         if (retryIntervalStr !\u003d null) {\n           try {\n             retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n           } catch (NumberFormatException ex) {\n             doRetry \u003d false;\n           }\n         }\n         int next \u003d calculateExponentialTime(retryInterval);\n \n         String redirectUrl \u003d\n             appendOrReplaceParamter(path + uriWithQueryString,\n               YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n         if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n           doRetry \u003d false;\n         }\n         String redirectMsg \u003d\n             doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                 + \" seconds.\" : \"There is no active RM right now.\";\n         redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n             + rmWebApp.getHAZookeeperConnectionState();\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         if (doRetry) {\n           response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n           response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         }\n       }\n       return;\n     } else if (ahsEnabled) {\n       String ahsRedirectUrl \u003d ahsRedirectPath(uriWithQueryString, rmWebApp);\n       if(ahsRedirectUrl !\u003d null) {\n         response.setHeader(\"Location\", ahsRedirectUrl);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       }\n     }\n \n     super.doFilter(request, response, chain);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String htmlEscapedUri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (htmlEscapedUri \u003d\u003d null) {\n      htmlEscapedUri \u003d \"/\";\n    }\n\n    String uriWithQueryString \u003d\n        WebAppUtils.appendQueryParams(request, htmlEscapedUri);\n    String htmlEscapedUriWithQueryString \u003d\n        WebAppUtils.getHtmlEscapedURIWithQueryString(request);\n\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, htmlEscapedUri)) {\n\n      String redirectPath \u003d rmWebApp.getRedirectPath();\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        redirectPath +\u003d uriWithQueryString;\n        String redirectMsg \u003d \"This is standby RM. The redirect url is: \"\n            + htmlEscapedUriWithQueryString;\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        response.setHeader(\"Location\", redirectPath);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      } else {\n        boolean doRetry \u003d true;\n        String retryIntervalStr \u003d\n            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n        int retryInterval \u003d 0;\n        if (retryIntervalStr !\u003d null) {\n          try {\n            retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n          } catch (NumberFormatException ex) {\n            doRetry \u003d false;\n          }\n        }\n        int next \u003d calculateExponentialTime(retryInterval);\n\n        String redirectUrl \u003d\n            appendOrReplaceParamter(path + uriWithQueryString,\n              YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n        if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n          doRetry \u003d false;\n        }\n        String redirectMsg \u003d\n            doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                + \" seconds.\" : \"There is no active RM right now.\";\n        redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n            + rmWebApp.getHAZookeeperConnectionState();\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        if (doRetry) {\n          response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        }\n      }\n      return;\n    } else if (ahsEnabled) {\n      String ahsRedirectUrl \u003d ahsRedirectPath(uriWithQueryString, rmWebApp);\n      if(ahsRedirectUrl !\u003d null) {\n        response.setHeader(\"Location\", ahsRedirectUrl);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      }\n    }\n\n    super.doFilter(request, response, chain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "19b645c93801a53d4486f9a7639186525e51f723": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4820. ResourceManager web redirects in HA mode drops query parameters. Contributed by Varun Vasudev.\n",
      "commitDate": "23/03/16 7:34 PM",
      "commitName": "19b645c93801a53d4486f9a7639186525e51f723",
      "commitAuthor": "Junping Du",
      "commitDateOld": "29/01/16 1:48 PM",
      "commitNameOld": "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 54.2,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,87 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n-    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n+    String htmlEscapedUri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n-    if (uri \u003d\u003d null) {\n-      uri \u003d \"/\";\n+    if (htmlEscapedUri \u003d\u003d null) {\n+      htmlEscapedUri \u003d \"/\";\n     }\n+\n+    String uriWithQueryString \u003d htmlEscapedUri;\n+    String htmlEscapedUriWithQueryString \u003d htmlEscapedUri;\n+\n+    String queryString \u003d request.getQueryString();\n+    if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n+      String reqEncoding \u003d request.getCharacterEncoding();\n+      if (reqEncoding \u003d\u003d null || reqEncoding.isEmpty()) {\n+        reqEncoding \u003d \"ISO-8859-1\";\n+      }\n+      Charset encoding \u003d Charset.forName(reqEncoding);\n+      List\u003cNameValuePair\u003e params \u003d URLEncodedUtils.parse(queryString, encoding);\n+      String urlEncodedQueryString \u003d URLEncodedUtils.format(params, encoding);\n+      uriWithQueryString +\u003d \"?\" + urlEncodedQueryString;\n+      htmlEscapedUriWithQueryString \u003d HtmlQuoting.quoteHtmlChars(\n+          request.getRequestURI() + \"?\" + urlEncodedQueryString);\n+    }\n+\n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n-        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n+        \u0026\u0026 shouldRedirect(rmWebApp, htmlEscapedUri)) {\n \n       String redirectPath \u003d rmWebApp.getRedirectPath();\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n-        redirectPath +\u003d uri;\n-        String redirectMsg \u003d\n-            \"This is standby RM. The redirect url is: \" + redirectPath;\n+        redirectPath +\u003d uriWithQueryString;\n+        String redirectMsg \u003d \"This is standby RM. The redirect url is: \"\n+            + htmlEscapedUriWithQueryString;\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         response.setHeader(\"Location\", redirectPath);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       } else {\n         boolean doRetry \u003d true;\n         String retryIntervalStr \u003d\n             request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n         int retryInterval \u003d 0;\n         if (retryIntervalStr !\u003d null) {\n           try {\n             retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n           } catch (NumberFormatException ex) {\n             doRetry \u003d false;\n           }\n         }\n         int next \u003d calculateExponentialTime(retryInterval);\n \n         String redirectUrl \u003d\n-            appendOrReplaceParamter(path + uri,\n+            appendOrReplaceParamter(path + uriWithQueryString,\n               YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n         if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n           doRetry \u003d false;\n         }\n         String redirectMsg \u003d\n             doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                 + \" seconds.\" : \"There is no active RM right now.\";\n         redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n             + rmWebApp.getHAZookeeperConnectionState();\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         if (doRetry) {\n           response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n           response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         }\n       }\n       return;\n     } else if (ahsEnabled) {\n-      String ahsRedirectUrl \u003d ahsRedirectPath(uri, rmWebApp);\n+      String ahsRedirectUrl \u003d ahsRedirectPath(uriWithQueryString, rmWebApp);\n       if(ahsRedirectUrl !\u003d null) {\n         response.setHeader(\"Location\", ahsRedirectUrl);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       }\n     }\n \n     super.doFilter(request, response, chain);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String htmlEscapedUri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (htmlEscapedUri \u003d\u003d null) {\n      htmlEscapedUri \u003d \"/\";\n    }\n\n    String uriWithQueryString \u003d htmlEscapedUri;\n    String htmlEscapedUriWithQueryString \u003d htmlEscapedUri;\n\n    String queryString \u003d request.getQueryString();\n    if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n      String reqEncoding \u003d request.getCharacterEncoding();\n      if (reqEncoding \u003d\u003d null || reqEncoding.isEmpty()) {\n        reqEncoding \u003d \"ISO-8859-1\";\n      }\n      Charset encoding \u003d Charset.forName(reqEncoding);\n      List\u003cNameValuePair\u003e params \u003d URLEncodedUtils.parse(queryString, encoding);\n      String urlEncodedQueryString \u003d URLEncodedUtils.format(params, encoding);\n      uriWithQueryString +\u003d \"?\" + urlEncodedQueryString;\n      htmlEscapedUriWithQueryString \u003d HtmlQuoting.quoteHtmlChars(\n          request.getRequestURI() + \"?\" + urlEncodedQueryString);\n    }\n\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, htmlEscapedUri)) {\n\n      String redirectPath \u003d rmWebApp.getRedirectPath();\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        redirectPath +\u003d uriWithQueryString;\n        String redirectMsg \u003d \"This is standby RM. The redirect url is: \"\n            + htmlEscapedUriWithQueryString;\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        response.setHeader(\"Location\", redirectPath);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      } else {\n        boolean doRetry \u003d true;\n        String retryIntervalStr \u003d\n            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n        int retryInterval \u003d 0;\n        if (retryIntervalStr !\u003d null) {\n          try {\n            retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n          } catch (NumberFormatException ex) {\n            doRetry \u003d false;\n          }\n        }\n        int next \u003d calculateExponentialTime(retryInterval);\n\n        String redirectUrl \u003d\n            appendOrReplaceParamter(path + uriWithQueryString,\n              YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n        if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n          doRetry \u003d false;\n        }\n        String redirectMsg \u003d\n            doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                + \" seconds.\" : \"There is no active RM right now.\";\n        redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n            + rmWebApp.getHAZookeeperConnectionState();\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        if (doRetry) {\n          response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        }\n      }\n      return;\n    } else if (ahsEnabled) {\n      String ahsRedirectUrl \u003d ahsRedirectPath(uriWithQueryString, rmWebApp);\n      if(ahsRedirectUrl !\u003d null) {\n        response.setHeader(\"Location\", ahsRedirectUrl);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      }\n    }\n\n    super.doFilter(request, response, chain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4428. Redirect RM page to AHS page when AHS turned on and RM page is not available. Contributed by Chang Li\n",
      "commitDate": "29/01/16 1:48 PM",
      "commitName": "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "02/09/15 5:45 PM",
      "commitNameOld": "09c64ba1ba8be7a2ac31f4e42efb8c99b682399f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 148.88,
      "commitsBetweenForRepo": 1035,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,69 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n         \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n \n       String redirectPath \u003d rmWebApp.getRedirectPath();\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         redirectPath +\u003d uri;\n         String redirectMsg \u003d\n             \"This is standby RM. The redirect url is: \" + redirectPath;\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         response.setHeader(\"Location\", redirectPath);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       } else {\n         boolean doRetry \u003d true;\n         String retryIntervalStr \u003d\n             request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n         int retryInterval \u003d 0;\n         if (retryIntervalStr !\u003d null) {\n           try {\n             retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n           } catch (NumberFormatException ex) {\n             doRetry \u003d false;\n           }\n         }\n         int next \u003d calculateExponentialTime(retryInterval);\n \n         String redirectUrl \u003d\n             appendOrReplaceParamter(path + uri,\n               YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n         if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n           doRetry \u003d false;\n         }\n         String redirectMsg \u003d\n             doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                 + \" seconds.\" : \"There is no active RM right now.\";\n         redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n             + rmWebApp.getHAZookeeperConnectionState();\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         if (doRetry) {\n           response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n           response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         }\n       }\n       return;\n+    } else if (ahsEnabled) {\n+      String ahsRedirectUrl \u003d ahsRedirectPath(uri, rmWebApp);\n+      if(ahsRedirectUrl !\u003d null) {\n+        response.setHeader(\"Location\", ahsRedirectUrl);\n+        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+        return;\n+      }\n     }\n \n     super.doFilter(request, response, chain);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n\n      String redirectPath \u003d rmWebApp.getRedirectPath();\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        redirectPath +\u003d uri;\n        String redirectMsg \u003d\n            \"This is standby RM. The redirect url is: \" + redirectPath;\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        response.setHeader(\"Location\", redirectPath);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      } else {\n        boolean doRetry \u003d true;\n        String retryIntervalStr \u003d\n            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n        int retryInterval \u003d 0;\n        if (retryIntervalStr !\u003d null) {\n          try {\n            retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n          } catch (NumberFormatException ex) {\n            doRetry \u003d false;\n          }\n        }\n        int next \u003d calculateExponentialTime(retryInterval);\n\n        String redirectUrl \u003d\n            appendOrReplaceParamter(path + uri,\n              YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n        if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n          doRetry \u003d false;\n        }\n        String redirectMsg \u003d\n            doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                + \" seconds.\" : \"There is no active RM right now.\";\n        redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n            + rmWebApp.getHAZookeeperConnectionState();\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        if (doRetry) {\n          response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        }\n      }\n      return;\n    } else if (ahsEnabled) {\n      String ahsRedirectUrl \u003d ahsRedirectPath(uri, rmWebApp);\n      if(ahsRedirectUrl !\u003d null) {\n        response.setHeader(\"Location\", ahsRedirectUrl);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      }\n    }\n\n    super.doFilter(request, response, chain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "09c64ba1ba8be7a2ac31f4e42efb8c99b682399f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4101. RM should print alert messages if Zookeeper and Resourcemanager gets connection issue. Contributed by Xuan Gong\n",
      "commitDate": "02/09/15 5:45 PM",
      "commitName": "09c64ba1ba8be7a2ac31f4e42efb8c99b682399f",
      "commitAuthor": "Jian He",
      "commitDateOld": "31/08/15 5:33 PM",
      "commitNameOld": "a3fd2ccc869dfc1f04d1cf0a8678d4d90a43a80f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,62 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n         \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n \n       String redirectPath \u003d rmWebApp.getRedirectPath();\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         redirectPath +\u003d uri;\n         String redirectMsg \u003d\n             \"This is standby RM. The redirect url is: \" + redirectPath;\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         response.setHeader(\"Location\", redirectPath);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       } else {\n         boolean doRetry \u003d true;\n         String retryIntervalStr \u003d\n             request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n         int retryInterval \u003d 0;\n         if (retryIntervalStr !\u003d null) {\n           try {\n             retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n           } catch (NumberFormatException ex) {\n             doRetry \u003d false;\n           }\n         }\n         int next \u003d calculateExponentialTime(retryInterval);\n \n         String redirectUrl \u003d\n             appendOrReplaceParamter(path + uri,\n               YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n         if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n           doRetry \u003d false;\n         }\n         String redirectMsg \u003d\n             doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                 + \" seconds.\" : \"There is no active RM right now.\";\n+        redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n+            + rmWebApp.getHAZookeeperConnectionState();\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         if (doRetry) {\n           response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n           response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         }\n       }\n       return;\n     }\n \n     super.doFilter(request, response, chain);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n\n      String redirectPath \u003d rmWebApp.getRedirectPath();\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        redirectPath +\u003d uri;\n        String redirectMsg \u003d\n            \"This is standby RM. The redirect url is: \" + redirectPath;\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        response.setHeader(\"Location\", redirectPath);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      } else {\n        boolean doRetry \u003d true;\n        String retryIntervalStr \u003d\n            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n        int retryInterval \u003d 0;\n        if (retryIntervalStr !\u003d null) {\n          try {\n            retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n          } catch (NumberFormatException ex) {\n            doRetry \u003d false;\n          }\n        }\n        int next \u003d calculateExponentialTime(retryInterval);\n\n        String redirectUrl \u003d\n            appendOrReplaceParamter(path + uri,\n              YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n        if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n          doRetry \u003d false;\n        }\n        String redirectMsg \u003d\n            doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                + \" seconds.\" : \"There is no active RM right now.\";\n        redirectMsg +\u003d \"\\nHA Zookeeper Connection State: \"\n            + rmWebApp.getHAZookeeperConnectionState();\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        if (doRetry) {\n          response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        }\n      }\n      return;\n    }\n\n    super.doFilter(request, response, chain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "a3fd2ccc869dfc1f04d1cf0a8678d4d90a43a80f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4092. Fixed UI redirection to print useful messages when both RMs are in standby mode. Contributed by Xuan Gong\n",
      "commitDate": "31/08/15 5:33 PM",
      "commitName": "a3fd2ccc869dfc1f04d1cf0a8678d4d90a43a80f",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/05/15 10:39 PM",
      "commitNameOld": "b0ad644083a0dfae3a39159ac88b6fc09d846371",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 107.79,
      "commitsBetweenForRepo": 661,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,60 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n         \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n-      String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n+\n+      String redirectPath \u003d rmWebApp.getRedirectPath();\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n+        redirectPath +\u003d uri;\n         String redirectMsg \u003d\n             \"This is standby RM. The redirect url is: \" + redirectPath;\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         response.setHeader(\"Location\", redirectPath);\n         response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n+      } else {\n+        boolean doRetry \u003d true;\n+        String retryIntervalStr \u003d\n+            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n+        int retryInterval \u003d 0;\n+        if (retryIntervalStr !\u003d null) {\n+          try {\n+            retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n+          } catch (NumberFormatException ex) {\n+            doRetry \u003d false;\n+          }\n+        }\n+        int next \u003d calculateExponentialTime(retryInterval);\n+\n+        String redirectUrl \u003d\n+            appendOrReplaceParamter(path + uri,\n+              YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n+        if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n+          doRetry \u003d false;\n+        }\n+        String redirectMsg \u003d\n+            doRetry ? \"Can not find any active RM. Will retry in next \" + next\n+                + \" seconds.\" : \"There is no active RM right now.\";\n+        PrintWriter out \u003d response.getWriter();\n+        out.println(redirectMsg);\n+        if (doRetry) {\n+          response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n+          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+        }\n       }\n+      return;\n     }\n \n     super.doFilter(request, response, chain);\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n\n      String redirectPath \u003d rmWebApp.getRedirectPath();\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        redirectPath +\u003d uri;\n        String redirectMsg \u003d\n            \"This is standby RM. The redirect url is: \" + redirectPath;\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        response.setHeader(\"Location\", redirectPath);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      } else {\n        boolean doRetry \u003d true;\n        String retryIntervalStr \u003d\n            request.getParameter(YarnWebParams.NEXT_REFRESH_INTERVAL);\n        int retryInterval \u003d 0;\n        if (retryIntervalStr !\u003d null) {\n          try {\n            retryInterval \u003d Integer.parseInt(retryIntervalStr.trim());\n          } catch (NumberFormatException ex) {\n            doRetry \u003d false;\n          }\n        }\n        int next \u003d calculateExponentialTime(retryInterval);\n\n        String redirectUrl \u003d\n            appendOrReplaceParamter(path + uri,\n              YarnWebParams.NEXT_REFRESH_INTERVAL + \"\u003d\" + (retryInterval + 1));\n        if (redirectUrl \u003d\u003d null || next \u003e MAX_SLEEP_TIME) {\n          doRetry \u003d false;\n        }\n        String redirectMsg \u003d\n            doRetry ? \"Can not find any active RM. Will retry in next \" + next\n                + \" seconds.\" : \"There is no active RM right now.\";\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        if (doRetry) {\n          response.setHeader(\"Refresh\", next + \";url\u003d\" + redirectUrl);\n          response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        }\n      }\n      return;\n    }\n\n    super.doFilter(request, response, chain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "d9bcf99aef23f71391c728279698f4265a8d1243": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2605. [RM HA] Rest api endpoints doing redirect incorrectly. (Xuan Gong via stevel)\n",
      "commitDate": "23/04/15 1:22 AM",
      "commitName": "d9bcf99aef23f71391c728279698f4265a8d1243",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "04/04/14 7:51 PM",
      "commitNameOld": "05da90ee2f8e58d836af2246a226e728475b23da",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 383.23,
      "commitsBetweenForRepo": 3094,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n         \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n       String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         String redirectMsg \u003d\n-            \"This is standby RM. Redirecting to the current active RM: \"\n-                + redirectPath;\n-        response.addHeader(\"Refresh\", \"3; url\u003d\" + redirectPath);\n+            \"This is standby RM. The redirect url is: \" + redirectPath;\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n+        response.setHeader(\"Location\", redirectPath);\n+        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n         return;\n       }\n     }\n \n     super.doFilter(request, response, chain);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n      String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        String redirectMsg \u003d\n            \"This is standby RM. The redirect url is: \" + redirectPath;\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        response.setHeader(\"Location\", redirectPath);\n        response.setStatus(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n        return;\n      }\n    }\n\n    super.doFilter(request, response, chain);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "b0180afc9c87f6b6ea2cae6fb9e420295e961a21": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1898. Made Standby RM links conf, stacks, logLevel, metrics, jmx, logs and static not be redirected to Active RM. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583833 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 5:01 PM",
      "commitName": "b0180afc9c87f6b6ea2cae6fb9e420295e961a21",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "13/03/14 7:39 PM",
      "commitNameOld": "d9cdcb9474528733c488d4a5c73d2e4abb1af6fb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 18.89,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public void doFilter(HttpServletRequest request,\n       HttpServletResponse response, FilterChain chain) throws IOException,\n       ServletException {\n     response.setCharacterEncoding(\"UTF-8\");\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n \n     if (uri \u003d\u003d null) {\n       uri \u003d \"/\";\n     }\n     RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n     rmWebApp.checkIfStandbyRM();\n     if (rmWebApp.isStandby()\n-        \u0026\u0026 !uri.equals(\"/\" + rmWebApp.wsName() + \"/v1/cluster/info\")\n-        \u0026\u0026 !uri.equals(\"/\" + rmWebApp.name() + \"/cluster\")) {\n+        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n       String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n \n       if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n         String redirectMsg \u003d\n             \"This is standby RM. Redirecting to the current active RM: \"\n                 + redirectPath;\n         response.addHeader(\"Refresh\", \"3; url\u003d\" + redirectPath);\n         PrintWriter out \u003d response.getWriter();\n         out.println(redirectMsg);\n         return;\n       }\n     }\n \n     super.doFilter(request, response, chain);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 shouldRedirect(rmWebApp, uri)) {\n      String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        String redirectMsg \u003d\n            \"This is standby RM. Redirecting to the current active RM: \"\n                + redirectPath;\n        response.addHeader(\"Refresh\", \"3; url\u003d\" + redirectPath);\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        return;\n      }\n    }\n\n    super.doFilter(request, response, chain);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "d9cdcb9474528733c488d4a5c73d2e4abb1af6fb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1658. Modified web-app framework to let standby RMs redirect web-service calls to the active RM. Contributed by Cindy Li.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 7:39 PM",
      "commitName": "d9cdcb9474528733c488d4a5c73d2e4abb1af6fb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  public void doFilter(HttpServletRequest request,\n+      HttpServletResponse response, FilterChain chain) throws IOException,\n+      ServletException {\n+    response.setCharacterEncoding(\"UTF-8\");\n+    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n+\n+    if (uri \u003d\u003d null) {\n+      uri \u003d \"/\";\n+    }\n+    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n+    rmWebApp.checkIfStandbyRM();\n+    if (rmWebApp.isStandby()\n+        \u0026\u0026 !uri.equals(\"/\" + rmWebApp.wsName() + \"/v1/cluster/info\")\n+        \u0026\u0026 !uri.equals(\"/\" + rmWebApp.name() + \"/cluster\")) {\n+      String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n+\n+      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n+        String redirectMsg \u003d\n+            \"This is standby RM. Redirecting to the current active RM: \"\n+                + redirectPath;\n+        response.addHeader(\"Refresh\", \"3; url\u003d\" + redirectPath);\n+        PrintWriter out \u003d response.getWriter();\n+        out.println(redirectMsg);\n+        return;\n+      }\n+    }\n+\n+    super.doFilter(request, response, chain);\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(HttpServletRequest request,\n      HttpServletResponse response, FilterChain chain) throws IOException,\n      ServletException {\n    response.setCharacterEncoding(\"UTF-8\");\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n\n    if (uri \u003d\u003d null) {\n      uri \u003d \"/\";\n    }\n    RMWebApp rmWebApp \u003d injector.getInstance(RMWebApp.class);\n    rmWebApp.checkIfStandbyRM();\n    if (rmWebApp.isStandby()\n        \u0026\u0026 !uri.equals(\"/\" + rmWebApp.wsName() + \"/v1/cluster/info\")\n        \u0026\u0026 !uri.equals(\"/\" + rmWebApp.name() + \"/cluster\")) {\n      String redirectPath \u003d rmWebApp.getRedirectPath() + uri;\n\n      if (redirectPath !\u003d null \u0026\u0026 !redirectPath.isEmpty()) {\n        String redirectMsg \u003d\n            \"This is standby RM. Redirecting to the current active RM: \"\n                + redirectPath;\n        response.addHeader(\"Refresh\", \"3; url\u003d\" + redirectPath);\n        PrintWriter out \u003d response.getWriter();\n        out.println(redirectMsg);\n        return;\n      }\n    }\n\n    super.doFilter(request, response, chain);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java"
    }
  }
}