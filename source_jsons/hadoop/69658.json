{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystem.java",
  "functionName": "checkException",
  "functionId": "checkException___path-Path(modifiers-final)__exception-AzureBlobFileSystemException(modifiers-final)__allowedErrorCodesList-AzureServiceErrorCode(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
  "functionStartLine": 1065,
  "functionEndLine": 1095,
  "numCommitsSeen": 34,
  "timeTaken": 1866,
  "changeHistory": [
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.\n",
      "commitDate": "27/02/20 10:27 AM",
      "commitName": "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "14/01/20 5:28 PM",
      "commitNameOld": "c36f09deb91454c086926c01f872d8ca4419aee0",
      "commitAuthorOld": "Clemens Wolff",
      "daysBetweenCommits": 43.71,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   private void checkException(final Path path,\n                               final AzureBlobFileSystemException exception,\n                               final AzureServiceErrorCode... allowedErrorCodesList) throws IOException {\n     if (exception instanceof AbfsRestOperationException) {\n       AbfsRestOperationException ere \u003d (AbfsRestOperationException) exception;\n \n       if (ArrayUtils.contains(allowedErrorCodesList, ere.getErrorCode())) {\n         return;\n       }\n       int statusCode \u003d ere.getStatusCode();\n \n       //AbfsRestOperationException.getMessage() contains full error info including path/uri.\n       if (statusCode \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n         throw (IOException) new FileNotFoundException(ere.getMessage())\n             .initCause(exception);\n       } else if (statusCode \u003d\u003d HttpURLConnection.HTTP_CONFLICT) {\n         throw (IOException) new FileAlreadyExistsException(ere.getMessage())\n             .initCause(exception);\n       } else {\n         throw ere;\n       }\n+    } else if (exception instanceof SASTokenProviderException) {\n+      throw exception;\n     } else {\n       if (path \u003d\u003d null) {\n         throw exception;\n       }\n       // record info of path\n       throw new PathIOException(path.toString(), exception);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkException(final Path path,\n                              final AzureBlobFileSystemException exception,\n                              final AzureServiceErrorCode... allowedErrorCodesList) throws IOException {\n    if (exception instanceof AbfsRestOperationException) {\n      AbfsRestOperationException ere \u003d (AbfsRestOperationException) exception;\n\n      if (ArrayUtils.contains(allowedErrorCodesList, ere.getErrorCode())) {\n        return;\n      }\n      int statusCode \u003d ere.getStatusCode();\n\n      //AbfsRestOperationException.getMessage() contains full error info including path/uri.\n      if (statusCode \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n        throw (IOException) new FileNotFoundException(ere.getMessage())\n            .initCause(exception);\n      } else if (statusCode \u003d\u003d HttpURLConnection.HTTP_CONFLICT) {\n        throw (IOException) new FileAlreadyExistsException(ere.getMessage())\n            .initCause(exception);\n      } else {\n        throw ere;\n      }\n    } else if (exception instanceof SASTokenProviderException) {\n      throw exception;\n    } else {\n      if (path \u003d\u003d null) {\n        throw exception;\n      }\n      // record info of path\n      throw new PathIOException(path.toString(), exception);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   private void checkException(final Path path,\n                               final AzureBlobFileSystemException exception,\n                               final AzureServiceErrorCode... allowedErrorCodesList) throws IOException {\n     if (exception instanceof AbfsRestOperationException) {\n       AbfsRestOperationException ere \u003d (AbfsRestOperationException) exception;\n \n       if (ArrayUtils.contains(allowedErrorCodesList, ere.getErrorCode())) {\n         return;\n       }\n       int statusCode \u003d ere.getStatusCode();\n \n       //AbfsRestOperationException.getMessage() contains full error info including path/uri.\n       if (statusCode \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n-        throw new FileNotFoundException(ere.getMessage());\n+        throw (IOException)new FileNotFoundException(ere.getMessage())\n+            .initCause(exception);\n       } else if (statusCode \u003d\u003d HttpURLConnection.HTTP_CONFLICT) {\n-        throw new FileAlreadyExistsException(ere.getMessage());\n+        throw (IOException)new FileAlreadyExistsException(ere.getMessage())\n+            .initCause(exception);\n       } else {\n         throw ere;\n       }\n     } else {\n       if (path \u003d\u003d null) {\n         throw exception;\n       }\n       // record info of path\n       throw new PathIOException(path.toString(), exception);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkException(final Path path,\n                              final AzureBlobFileSystemException exception,\n                              final AzureServiceErrorCode... allowedErrorCodesList) throws IOException {\n    if (exception instanceof AbfsRestOperationException) {\n      AbfsRestOperationException ere \u003d (AbfsRestOperationException) exception;\n\n      if (ArrayUtils.contains(allowedErrorCodesList, ere.getErrorCode())) {\n        return;\n      }\n      int statusCode \u003d ere.getStatusCode();\n\n      //AbfsRestOperationException.getMessage() contains full error info including path/uri.\n      if (statusCode \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n        throw (IOException)new FileNotFoundException(ere.getMessage())\n            .initCause(exception);\n      } else if (statusCode \u003d\u003d HttpURLConnection.HTTP_CONFLICT) {\n        throw (IOException)new FileAlreadyExistsException(ere.getMessage())\n            .initCause(exception);\n      } else {\n        throw ere;\n      }\n    } else {\n      if (path \u003d\u003d null) {\n        throw exception;\n      }\n      // record info of path\n      throw new PathIOException(path.toString(), exception);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,27 @@\n+  private void checkException(final Path path,\n+                              final AzureBlobFileSystemException exception,\n+                              final AzureServiceErrorCode... allowedErrorCodesList) throws IOException {\n+    if (exception instanceof AbfsRestOperationException) {\n+      AbfsRestOperationException ere \u003d (AbfsRestOperationException) exception;\n+\n+      if (ArrayUtils.contains(allowedErrorCodesList, ere.getErrorCode())) {\n+        return;\n+      }\n+      int statusCode \u003d ere.getStatusCode();\n+\n+      //AbfsRestOperationException.getMessage() contains full error info including path/uri.\n+      if (statusCode \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n+        throw new FileNotFoundException(ere.getMessage());\n+      } else if (statusCode \u003d\u003d HttpURLConnection.HTTP_CONFLICT) {\n+        throw new FileAlreadyExistsException(ere.getMessage());\n+      } else {\n+        throw ere;\n+      }\n+    } else {\n+      if (path \u003d\u003d null) {\n+        throw exception;\n+      }\n+      // record info of path\n+      throw new PathIOException(path.toString(), exception);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkException(final Path path,\n                              final AzureBlobFileSystemException exception,\n                              final AzureServiceErrorCode... allowedErrorCodesList) throws IOException {\n    if (exception instanceof AbfsRestOperationException) {\n      AbfsRestOperationException ere \u003d (AbfsRestOperationException) exception;\n\n      if (ArrayUtils.contains(allowedErrorCodesList, ere.getErrorCode())) {\n        return;\n      }\n      int statusCode \u003d ere.getStatusCode();\n\n      //AbfsRestOperationException.getMessage() contains full error info including path/uri.\n      if (statusCode \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n        throw new FileNotFoundException(ere.getMessage());\n      } else if (statusCode \u003d\u003d HttpURLConnection.HTTP_CONFLICT) {\n        throw new FileAlreadyExistsException(ere.getMessage());\n      } else {\n        throw ere;\n      }\n    } else {\n      if (path \u003d\u003d null) {\n        throw exception;\n      }\n      // record info of path\n      throw new PathIOException(path.toString(), exception);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java"
    }
  }
}