{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "getSchedulerContainersToRelease",
  "functionId": "getSchedulerContainersToRelease___csAssignment-CSAssignment",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2802,
  "functionEndLine": 2833,
  "numCommitsSeen": 239,
  "timeTaken": 5086,
  "changeHistory": [
    "951c98f89059d64fda8456366f680eff4a7a6785",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "951c98f89059d64fda8456366f680eff4a7a6785": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "951c98f89059d64fda8456366f680eff4a7a6785": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8233. NPE in CapacityScheduler#tryCommit when handling allocate/reserve proposal whose allocatedOrReservedContainer is null. Contributed by Tao Yang.\n",
      "commitDate": "06/11/18 6:17 PM",
      "commitName": "951c98f89059d64fda8456366f680eff4a7a6785",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/11/18 10:50 PM",
      "commitNameOld": "5d6554c722f08f79bce904e021243605ee75bae3",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,32 @@\n       getSchedulerContainersToRelease(\n       CSAssignment csAssignment) {\n     List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e list \u003d null;\n \n     if (csAssignment.getContainersToKill() !\u003d null \u0026\u0026 !csAssignment\n         .getContainersToKill().isEmpty()) {\n       list \u003d new ArrayList\u003c\u003e();\n       for (RMContainer rmContainer : csAssignment.getContainersToKill()) {\n-        list.add(getSchedulerContainer(rmContainer, false));\n+        SchedulerContainer schedulerContainer \u003d\n+            getSchedulerContainer(rmContainer, false);\n+        if (schedulerContainer !\u003d null) {\n+          list.add(schedulerContainer);\n+        }\n       }\n     }\n \n     if (csAssignment.getExcessReservation() !\u003d null) {\n       if (null \u003d\u003d list) {\n         list \u003d new ArrayList\u003c\u003e();\n       }\n-      list.add(\n-          getSchedulerContainer(csAssignment.getExcessReservation(), false));\n+      SchedulerContainer schedulerContainer \u003d\n+          getSchedulerContainer(csAssignment.getExcessReservation(), false);\n+      if (schedulerContainer !\u003d null) {\n+        list.add(schedulerContainer);\n+      }\n     }\n \n+    if (list !\u003d null \u0026\u0026 list.isEmpty()) {\n+      list \u003d null;\n+    }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getSchedulerContainersToRelease(\n      CSAssignment csAssignment) {\n    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e list \u003d null;\n\n    if (csAssignment.getContainersToKill() !\u003d null \u0026\u0026 !csAssignment\n        .getContainersToKill().isEmpty()) {\n      list \u003d new ArrayList\u003c\u003e();\n      for (RMContainer rmContainer : csAssignment.getContainersToKill()) {\n        SchedulerContainer schedulerContainer \u003d\n            getSchedulerContainer(rmContainer, false);\n        if (schedulerContainer !\u003d null) {\n          list.add(schedulerContainer);\n        }\n      }\n    }\n\n    if (csAssignment.getExcessReservation() !\u003d null) {\n      if (null \u003d\u003d list) {\n        list \u003d new ArrayList\u003c\u003e();\n      }\n      SchedulerContainer schedulerContainer \u003d\n          getSchedulerContainer(csAssignment.getExcessReservation(), false);\n      if (schedulerContainer !\u003d null) {\n        list.add(schedulerContainer);\n      }\n    }\n\n    if (list !\u003d null \u0026\u0026 list.isEmpty()) {\n      list \u003d null;\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,22 @@\n+      getSchedulerContainersToRelease(\n+      CSAssignment csAssignment) {\n+    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e list \u003d null;\n+\n+    if (csAssignment.getContainersToKill() !\u003d null \u0026\u0026 !csAssignment\n+        .getContainersToKill().isEmpty()) {\n+      list \u003d new ArrayList\u003c\u003e();\n+      for (RMContainer rmContainer : csAssignment.getContainersToKill()) {\n+        list.add(getSchedulerContainer(rmContainer, false));\n+      }\n+    }\n+\n+    if (csAssignment.getExcessReservation() !\u003d null) {\n+      if (null \u003d\u003d list) {\n+        list \u003d new ArrayList\u003c\u003e();\n+      }\n+      list.add(\n+          getSchedulerContainer(csAssignment.getExcessReservation(), false));\n+    }\n+\n+    return list;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getSchedulerContainersToRelease(\n      CSAssignment csAssignment) {\n    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e list \u003d null;\n\n    if (csAssignment.getContainersToKill() !\u003d null \u0026\u0026 !csAssignment\n        .getContainersToKill().isEmpty()) {\n      list \u003d new ArrayList\u003c\u003e();\n      for (RMContainer rmContainer : csAssignment.getContainersToKill()) {\n        list.add(getSchedulerContainer(rmContainer, false));\n      }\n    }\n\n    if (csAssignment.getExcessReservation() !\u003d null) {\n      if (null \u003d\u003d list) {\n        list \u003d new ArrayList\u003c\u003e();\n      }\n      list.add(\n          getSchedulerContainer(csAssignment.getExcessReservation(), false));\n    }\n\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}