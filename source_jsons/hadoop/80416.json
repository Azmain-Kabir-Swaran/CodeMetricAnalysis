{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "listFiles",
  "functionId": "listFiles___f-Path(modifiers-final)__recursive-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 2250,
  "functionEndLine": 2300,
  "numCommitsSeen": 188,
  "timeTaken": 5026,
  "changeHistory": [
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
    "666a8e160035d60b7fd3634e4d703d8e28a1af6c",
    "d0ba178800d04e6e9842a1823b2205732608c0b5",
    "19eea554e3fafb46f39a37b7b1be0f20e09aa52e"
  ],
  "changeHistoryShort": {
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081": "Ymultichange(Yreturntypechange,Ybodychange)",
    "666a8e160035d60b7fd3634e4d703d8e28a1af6c": "Ybodychange",
    "d0ba178800d04e6e9842a1823b2205732608c0b5": "Ybodychange",
    "19eea554e3fafb46f39a37b7b1be0f20e09aa52e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13605. Clean up FileSystem javadocs, logging; improve diagnostics on FS load. Contributed by Steve Loughran\n",
      "commitDate": "23/11/16 4:42 PM",
      "commitName": "860d49aa6ae7790d970d7f2322fed890b0e5cda2",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "16/11/16 8:08 PM",
      "commitNameOld": "aab9737a058c0bdeeb17c173e530b7e571315a56",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n       final Path f, final boolean recursive)\n   throws FileNotFoundException, IOException {\n     return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n-      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n-        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n+      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d new Stack\u003c\u003e();\n       private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n         listLocatedStatus(f);\n       private LocatedFileStatus curFile;\n-     \n+\n       @Override\n       public boolean hasNext() throws IOException {\n         while (curFile \u003d\u003d null) {\n           if (curItor.hasNext()) {\n             handleFileStat(curItor.next());\n           } else if (!itors.empty()) {\n             curItor \u003d itors.pop();\n           } else {\n             return false;\n           }\n         }\n         return true;\n       }\n \n       /**\n        * Process the input stat.\n        * If it is a file, return the file stat.\n        * If it is a directory, traverse the directory if recursive is true;\n        * ignore it if recursive is false.\n        * @param stat input status\n        * @throws IOException if any IO error occurs\n        */\n       private void handleFileStat(LocatedFileStatus stat) throws IOException {\n         if (stat.isFile()) { // file\n           curFile \u003d stat;\n         } else if (recursive) { // directory\n           itors.push(curItor);\n           curItor \u003d listLocatedStatus(stat.getPath());\n         }\n       }\n \n       @Override\n       public LocatedFileStatus next() throws IOException {\n         if (hasNext()) {\n           LocatedFileStatus result \u003d curFile;\n           curFile \u003d null;\n           return result;\n-        } \n+        }\n         throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d new Stack\u003c\u003e();\n      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n        listLocatedStatus(f);\n      private LocatedFileStatus curFile;\n\n      @Override\n      public boolean hasNext() throws IOException {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, traverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws IOException if any IO error occurs\n       */\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (recursive) { // directory\n          itors.push(curItor);\n          curItor \u003d listLocatedStatus(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        }\n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n    };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n        listLocatedStatus(f);\n      private LocatedFileStatus curFile;\n     \n      @Override\n      public boolean hasNext() throws IOException {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, traverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws IOException if any IO error occurs\n       */\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (recursive) { // directory\n          itors.push(curItor);\n          curItor \u003d listLocatedStatus(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n    };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n        listLocatedStatus(f);\n      private LocatedFileStatus curFile;\n     \n      @Override\n      public boolean hasNext() throws IOException {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, traverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws IOException if any IO error occurs\n       */\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (recursive) { // directory\n          itors.push(curItor);\n          curItor \u003d listLocatedStatus(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n    };\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n        listLocatedStatus(f);\n      private LocatedFileStatus curFile;\n     \n      @Override\n      public boolean hasNext() throws IOException {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, traverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws IOException if any IO error occurs\n       */\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (recursive) { // directory\n          itors.push(curItor);\n          curItor \u003d listLocatedStatus(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n    };\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/10 9:43 PM",
      "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
      "commitAuthor": "Hairong Kuang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/08/10 9:43 PM",
          "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
          "commitAuthor": "Hairong Kuang",
          "commitDateOld": "02/08/10 1:25 PM",
          "commitNameOld": "666a8e160035d60b7fd3634e4d703d8e28a1af6c",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 8.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,52 @@\n-  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n       final Path f, final boolean recursive)\n   throws FileNotFoundException, IOException {\n-    return new Iterator\u003cLocatedFileStatus\u003e() {\n-      private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n-        new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n-      Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n-      LocatedFileStatus curFile;\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n+        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n+      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n+        listLocatedStatus(f);\n+      private LocatedFileStatus curFile;\n      \n-      /**\n-       *  {@inheritDoc}\n-       *  @return {@inheritDog} \n-       *  @throws Runtimeexception if any IOException occurs during traversal;\n-       *  the IOException is set as the cause of the RuntimeException\n-       */\n       @Override\n-      public boolean hasNext() {\n+      public boolean hasNext() throws IOException {\n         while (curFile \u003d\u003d null) {\n           if (curItor.hasNext()) {\n             handleFileStat(curItor.next());\n           } else if (!itors.empty()) {\n             curItor \u003d itors.pop();\n           } else {\n             return false;\n           }\n         }\n         return true;\n       }\n \n       /**\n        * Process the input stat.\n        * If it is a file, return the file stat.\n-       * If it is a directory, tranverse the directory if recursive is true;\n+       * If it is a directory, traverse the directory if recursive is true;\n        * ignore it if recursive is false.\n        * @param stat input status\n-       * @throws RuntimeException if any io error occurs; the io exception\n-       * is set as the cause of RuntimeException\n+       * @throws IOException if any IO error occurs\n        */\n-      private void handleFileStat(LocatedFileStatus stat) {\n-        try {\n-          if (stat.isFile()) { // file\n-            curFile \u003d stat;\n-          } else if (recursive) { // directory\n-            itors.push(curItor);\n-            curItor \u003d listLocatedStatus(stat.getPath());\n-          }\n-        } catch (IOException ioe) {\n-          throw (RuntimeException)new RuntimeException().initCause(ioe);\n+      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n+        if (stat.isFile()) { // file\n+          curFile \u003d stat;\n+        } else if (recursive) { // directory\n+          itors.push(curItor);\n+          curItor \u003d listLocatedStatus(stat.getPath());\n         }\n       }\n \n-      /**\n-       *  {@inheritDoc}\n-       *  @return {@inheritDoc} \n-       *  @throws Runtimeexception if any IOException occurs during traversal;\n-       *  the IOException is set as the cause of the RuntimeException\n-       *  @exception {@inheritDoc}\n-       */\n       @Override\n-      public LocatedFileStatus next() {\n+      public LocatedFileStatus next() throws IOException {\n         if (hasNext()) {\n           LocatedFileStatus result \u003d curFile;\n           curFile \u003d null;\n           return result;\n         } \n         throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n       }\n-\n-      @Override\n-      public void remove() {\n-        throw new UnsupportedOperationException(\"Remove is not supported\");\n-      }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n        listLocatedStatus(f);\n      private LocatedFileStatus curFile;\n     \n      @Override\n      public boolean hasNext() throws IOException {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, traverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws IOException if any IO error occurs\n       */\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (recursive) { // directory\n          itors.push(curItor);\n          curItor \u003d listLocatedStatus(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n    };\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {
            "oldValue": "Iterator\u003cLocatedFileStatus\u003e",
            "newValue": "RemoteIterator\u003cLocatedFileStatus\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/08/10 9:43 PM",
          "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
          "commitAuthor": "Hairong Kuang",
          "commitDateOld": "02/08/10 1:25 PM",
          "commitNameOld": "666a8e160035d60b7fd3634e4d703d8e28a1af6c",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 8.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,52 @@\n-  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n       final Path f, final boolean recursive)\n   throws FileNotFoundException, IOException {\n-    return new Iterator\u003cLocatedFileStatus\u003e() {\n-      private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n-        new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n-      Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n-      LocatedFileStatus curFile;\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n+        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n+      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n+        listLocatedStatus(f);\n+      private LocatedFileStatus curFile;\n      \n-      /**\n-       *  {@inheritDoc}\n-       *  @return {@inheritDog} \n-       *  @throws Runtimeexception if any IOException occurs during traversal;\n-       *  the IOException is set as the cause of the RuntimeException\n-       */\n       @Override\n-      public boolean hasNext() {\n+      public boolean hasNext() throws IOException {\n         while (curFile \u003d\u003d null) {\n           if (curItor.hasNext()) {\n             handleFileStat(curItor.next());\n           } else if (!itors.empty()) {\n             curItor \u003d itors.pop();\n           } else {\n             return false;\n           }\n         }\n         return true;\n       }\n \n       /**\n        * Process the input stat.\n        * If it is a file, return the file stat.\n-       * If it is a directory, tranverse the directory if recursive is true;\n+       * If it is a directory, traverse the directory if recursive is true;\n        * ignore it if recursive is false.\n        * @param stat input status\n-       * @throws RuntimeException if any io error occurs; the io exception\n-       * is set as the cause of RuntimeException\n+       * @throws IOException if any IO error occurs\n        */\n-      private void handleFileStat(LocatedFileStatus stat) {\n-        try {\n-          if (stat.isFile()) { // file\n-            curFile \u003d stat;\n-          } else if (recursive) { // directory\n-            itors.push(curItor);\n-            curItor \u003d listLocatedStatus(stat.getPath());\n-          }\n-        } catch (IOException ioe) {\n-          throw (RuntimeException)new RuntimeException().initCause(ioe);\n+      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n+        if (stat.isFile()) { // file\n+          curFile \u003d stat;\n+        } else if (recursive) { // directory\n+          itors.push(curItor);\n+          curItor \u003d listLocatedStatus(stat.getPath());\n         }\n       }\n \n-      /**\n-       *  {@inheritDoc}\n-       *  @return {@inheritDoc} \n-       *  @throws Runtimeexception if any IOException occurs during traversal;\n-       *  the IOException is set as the cause of the RuntimeException\n-       *  @exception {@inheritDoc}\n-       */\n       @Override\n-      public LocatedFileStatus next() {\n+      public LocatedFileStatus next() throws IOException {\n         if (hasNext()) {\n           LocatedFileStatus result \u003d curFile;\n           curFile \u003d null;\n           return result;\n         } \n         throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n       }\n-\n-      @Override\n-      public void remove() {\n-        throw new UnsupportedOperationException(\"Remove is not supported\");\n-      }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n        new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n      private RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d\n        listLocatedStatus(f);\n      private LocatedFileStatus curFile;\n     \n      @Override\n      public boolean hasNext() throws IOException {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, traverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws IOException if any IO error occurs\n       */\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (recursive) { // directory\n          itors.push(curItor);\n          curItor \u003d listLocatedStatus(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n    };\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "666a8e160035d60b7fd3634e4d703d8e28a1af6c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6890. Part 2: Incoport the change made in FileContext into FileSystem. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@981676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/10 1:25 PM",
      "commitName": "666a8e160035d60b7fd3634e4d703d8e28a1af6c",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "30/07/10 1:52 PM",
      "commitNameOld": "d0ba178800d04e6e9842a1823b2205732608c0b5",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,74 @@\n   public Iterator\u003cLocatedFileStatus\u003e listFiles(\n       final Path f, final boolean recursive)\n   throws FileNotFoundException, IOException {\n     return new Iterator\u003cLocatedFileStatus\u003e() {\n-      private LinkedList\u003cFileStatus\u003e fileStats \u003d new LinkedList\u003cFileStatus\u003e();\n-      private Stack\u003cFileStatus\u003e dirStats \u003d new Stack\u003cFileStatus\u003e();\n-      \n-      { // initializer\n-        list(f);\n-      }\n-      \n+      private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n+        new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n+      Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n+      LocatedFileStatus curFile;\n+     \n       /**\n        *  {@inheritDoc}\n        *  @return {@inheritDog} \n        *  @throws Runtimeexception if any IOException occurs during traversal;\n        *  the IOException is set as the cause of the RuntimeException\n        */\n       @Override\n       public boolean hasNext() {\n-        if (fileStats.isEmpty()) {\n-          listDir();\n+        while (curFile \u003d\u003d null) {\n+          if (curItor.hasNext()) {\n+            handleFileStat(curItor.next());\n+          } else if (!itors.empty()) {\n+            curItor \u003d itors.pop();\n+          } else {\n+            return false;\n+          }\n         }\n-        return !fileStats.isEmpty();\n-      }\n-      \n-      /**\n-       * list at least one directory until file list is not empty\n-       */\n-      private void listDir() {\n-        while (fileStats.isEmpty() \u0026\u0026 !dirStats.isEmpty()) {\n-          FileStatus dir \u003d dirStats.pop();\n-          list(dir.getPath());\n-        }\n+        return true;\n       }\n \n       /**\n-       * List the given path\n-       * \n-       * @param dirPath a path\n+       * Process the input stat.\n+       * If it is a file, return the file stat.\n+       * If it is a directory, tranverse the directory if recursive is true;\n+       * ignore it if recursive is false.\n+       * @param stat input status\n+       * @throws RuntimeException if any io error occurs; the io exception\n+       * is set as the cause of RuntimeException\n        */\n-      private void list(Path dirPath) {\n+      private void handleFileStat(LocatedFileStatus stat) {\n         try {\n-          FileStatus[] stats \u003d listStatus(dirPath);\n-          for (FileStatus stat : stats) {\n-            if (stat.isFile()) {\n-              fileStats.add(stat);\n-            } else if (recursive) { // directory \u0026 recursive\n-              dirStats.push(stat);\n-            }\n+          if (stat.isFile()) { // file\n+            curFile \u003d stat;\n+          } else if (recursive) { // directory\n+            itors.push(curItor);\n+            curItor \u003d listLocatedStatus(stat.getPath());\n           }\n         } catch (IOException ioe) {\n-          throw (RuntimeException) new RuntimeException().initCause(ioe);\n-        }        \n+          throw (RuntimeException)new RuntimeException().initCause(ioe);\n+        }\n       }\n-      \n+\n       /**\n        *  {@inheritDoc}\n        *  @return {@inheritDoc} \n        *  @throws Runtimeexception if any IOException occurs during traversal;\n        *  the IOException is set as the cause of the RuntimeException\n        *  @exception {@inheritDoc}\n        */\n       @Override\n       public LocatedFileStatus next() {\n-        if (!hasNext()) {\n-          throw new NoSuchElementException();\n-        }\n-        FileStatus status \u003d fileStats.remove();\n-        try {\n-          BlockLocation[] locs \u003d getFileBlockLocations(\n-              status, 0, status.getLen());\n-          return new LocatedFileStatus(status, locs);\n-        } catch (IOException ioe) {\n-          throw (RuntimeException) new RuntimeException().initCause(ioe);\n-        }\n+        if (hasNext()) {\n+          LocatedFileStatus result \u003d curFile;\n+          curFile \u003d null;\n+          return result;\n+        } \n+        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n       }\n-      \n+\n       @Override\n       public void remove() {\n         throw new UnsupportedOperationException(\"Remove is not supported\");\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new Iterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n        new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n      Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n      LocatedFileStatus curFile;\n     \n      /**\n       *  {@inheritDoc}\n       *  @return {@inheritDog} \n       *  @throws Runtimeexception if any IOException occurs during traversal;\n       *  the IOException is set as the cause of the RuntimeException\n       */\n      @Override\n      public boolean hasNext() {\n        while (curFile \u003d\u003d null) {\n          if (curItor.hasNext()) {\n            handleFileStat(curItor.next());\n          } else if (!itors.empty()) {\n            curItor \u003d itors.pop();\n          } else {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      /**\n       * Process the input stat.\n       * If it is a file, return the file stat.\n       * If it is a directory, tranverse the directory if recursive is true;\n       * ignore it if recursive is false.\n       * @param stat input status\n       * @throws RuntimeException if any io error occurs; the io exception\n       * is set as the cause of RuntimeException\n       */\n      private void handleFileStat(LocatedFileStatus stat) {\n        try {\n          if (stat.isFile()) { // file\n            curFile \u003d stat;\n          } else if (recursive) { // directory\n            itors.push(curItor);\n            curItor \u003d listLocatedStatus(stat.getPath());\n          }\n        } catch (IOException ioe) {\n          throw (RuntimeException)new RuntimeException().initCause(ioe);\n        }\n      }\n\n      /**\n       *  {@inheritDoc}\n       *  @return {@inheritDoc} \n       *  @throws Runtimeexception if any IOException occurs during traversal;\n       *  the IOException is set as the cause of the RuntimeException\n       *  @exception {@inheritDoc}\n       */\n      @Override\n      public LocatedFileStatus next() {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Remove is not supported\");\n      }\n    };\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "d0ba178800d04e6e9842a1823b2205732608c0b5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6890. Improve listFiles API introduced by HADOOP-6870. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/10 1:52 PM",
      "commitName": "d0ba178800d04e6e9842a1823b2205732608c0b5",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "29/07/10 9:55 PM",
      "commitNameOld": "c15ae29a906cd2ee8ee526cc67f1cc992c673534",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,83 @@\n   public Iterator\u003cLocatedFileStatus\u003e listFiles(\n       final Path f, final boolean recursive)\n   throws FileNotFoundException, IOException {\n     return new Iterator\u003cLocatedFileStatus\u003e() {\n       private LinkedList\u003cFileStatus\u003e fileStats \u003d new LinkedList\u003cFileStatus\u003e();\n       private Stack\u003cFileStatus\u003e dirStats \u003d new Stack\u003cFileStatus\u003e();\n       \n       { // initializer\n         list(f);\n       }\n       \n+      /**\n+       *  {@inheritDoc}\n+       *  @return {@inheritDog} \n+       *  @throws Runtimeexception if any IOException occurs during traversal;\n+       *  the IOException is set as the cause of the RuntimeException\n+       */\n       @Override\n       public boolean hasNext() {\n         if (fileStats.isEmpty()) {\n           listDir();\n         }\n         return !fileStats.isEmpty();\n       }\n       \n       /**\n        * list at least one directory until file list is not empty\n        */\n       private void listDir() {\n         while (fileStats.isEmpty() \u0026\u0026 !dirStats.isEmpty()) {\n           FileStatus dir \u003d dirStats.pop();\n           list(dir.getPath());\n         }\n       }\n \n       /**\n        * List the given path\n        * \n        * @param dirPath a path\n        */\n       private void list(Path dirPath) {\n         try {\n           FileStatus[] stats \u003d listStatus(dirPath);\n           for (FileStatus stat : stats) {\n             if (stat.isFile()) {\n               fileStats.add(stat);\n             } else if (recursive) { // directory \u0026 recursive\n               dirStats.push(stat);\n             }\n           }\n         } catch (IOException ioe) {\n           throw (RuntimeException) new RuntimeException().initCause(ioe);\n         }        \n       }\n       \n+      /**\n+       *  {@inheritDoc}\n+       *  @return {@inheritDoc} \n+       *  @throws Runtimeexception if any IOException occurs during traversal;\n+       *  the IOException is set as the cause of the RuntimeException\n+       *  @exception {@inheritDoc}\n+       */\n       @Override\n       public LocatedFileStatus next() {\n         if (!hasNext()) {\n           throw new NoSuchElementException();\n         }\n         FileStatus status \u003d fileStats.remove();\n         try {\n           BlockLocation[] locs \u003d getFileBlockLocations(\n               status, 0, status.getLen());\n           return new LocatedFileStatus(status, locs);\n         } catch (IOException ioe) {\n           throw (RuntimeException) new RuntimeException().initCause(ioe);\n         }\n       }\n       \n       @Override\n       public void remove() {\n         throw new UnsupportedOperationException(\"Remove is not supported\");\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new Iterator\u003cLocatedFileStatus\u003e() {\n      private LinkedList\u003cFileStatus\u003e fileStats \u003d new LinkedList\u003cFileStatus\u003e();\n      private Stack\u003cFileStatus\u003e dirStats \u003d new Stack\u003cFileStatus\u003e();\n      \n      { // initializer\n        list(f);\n      }\n      \n      /**\n       *  {@inheritDoc}\n       *  @return {@inheritDog} \n       *  @throws Runtimeexception if any IOException occurs during traversal;\n       *  the IOException is set as the cause of the RuntimeException\n       */\n      @Override\n      public boolean hasNext() {\n        if (fileStats.isEmpty()) {\n          listDir();\n        }\n        return !fileStats.isEmpty();\n      }\n      \n      /**\n       * list at least one directory until file list is not empty\n       */\n      private void listDir() {\n        while (fileStats.isEmpty() \u0026\u0026 !dirStats.isEmpty()) {\n          FileStatus dir \u003d dirStats.pop();\n          list(dir.getPath());\n        }\n      }\n\n      /**\n       * List the given path\n       * \n       * @param dirPath a path\n       */\n      private void list(Path dirPath) {\n        try {\n          FileStatus[] stats \u003d listStatus(dirPath);\n          for (FileStatus stat : stats) {\n            if (stat.isFile()) {\n              fileStats.add(stat);\n            } else if (recursive) { // directory \u0026 recursive\n              dirStats.push(stat);\n            }\n          }\n        } catch (IOException ioe) {\n          throw (RuntimeException) new RuntimeException().initCause(ioe);\n        }        \n      }\n      \n      /**\n       *  {@inheritDoc}\n       *  @return {@inheritDoc} \n       *  @throws Runtimeexception if any IOException occurs during traversal;\n       *  the IOException is set as the cause of the RuntimeException\n       *  @exception {@inheritDoc}\n       */\n      @Override\n      public LocatedFileStatus next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        FileStatus status \u003d fileStats.remove();\n        try {\n          BlockLocation[] locs \u003d getFileBlockLocations(\n              status, 0, status.getLen());\n          return new LocatedFileStatus(status, locs);\n        } catch (IOException ioe) {\n          throw (RuntimeException) new RuntimeException().initCause(ioe);\n        }\n      }\n      \n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Remove is not supported\");\n      }\n    };\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "19eea554e3fafb46f39a37b7b1be0f20e09aa52e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6870. Add a new API getFiles to FileSystem and FileContext. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/07/10 5:14 PM",
      "commitName": "19eea554e3fafb46f39a37b7b1be0f20e09aa52e",
      "commitAuthor": "Hairong Kuang",
      "diff": "@@ -0,0 +1,70 @@\n+  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+      final Path f, final boolean recursive)\n+  throws FileNotFoundException, IOException {\n+    return new Iterator\u003cLocatedFileStatus\u003e() {\n+      private LinkedList\u003cFileStatus\u003e fileStats \u003d new LinkedList\u003cFileStatus\u003e();\n+      private Stack\u003cFileStatus\u003e dirStats \u003d new Stack\u003cFileStatus\u003e();\n+      \n+      { // initializer\n+        list(f);\n+      }\n+      \n+      @Override\n+      public boolean hasNext() {\n+        if (fileStats.isEmpty()) {\n+          listDir();\n+        }\n+        return !fileStats.isEmpty();\n+      }\n+      \n+      /**\n+       * list at least one directory until file list is not empty\n+       */\n+      private void listDir() {\n+        while (fileStats.isEmpty() \u0026\u0026 !dirStats.isEmpty()) {\n+          FileStatus dir \u003d dirStats.pop();\n+          list(dir.getPath());\n+        }\n+      }\n+\n+      /**\n+       * List the given path\n+       * \n+       * @param dirPath a path\n+       */\n+      private void list(Path dirPath) {\n+        try {\n+          FileStatus[] stats \u003d listStatus(dirPath);\n+          for (FileStatus stat : stats) {\n+            if (stat.isFile()) {\n+              fileStats.add(stat);\n+            } else if (recursive) { // directory \u0026 recursive\n+              dirStats.push(stat);\n+            }\n+          }\n+        } catch (IOException ioe) {\n+          throw (RuntimeException) new RuntimeException().initCause(ioe);\n+        }        \n+      }\n+      \n+      @Override\n+      public LocatedFileStatus next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        FileStatus status \u003d fileStats.remove();\n+        try {\n+          BlockLocation[] locs \u003d getFileBlockLocations(\n+              status, 0, status.getLen());\n+          return new LocatedFileStatus(status, locs);\n+        } catch (IOException ioe) {\n+          throw (RuntimeException) new RuntimeException().initCause(ioe);\n+        }\n+      }\n+      \n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\"Remove is not supported\");\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive)\n  throws FileNotFoundException, IOException {\n    return new Iterator\u003cLocatedFileStatus\u003e() {\n      private LinkedList\u003cFileStatus\u003e fileStats \u003d new LinkedList\u003cFileStatus\u003e();\n      private Stack\u003cFileStatus\u003e dirStats \u003d new Stack\u003cFileStatus\u003e();\n      \n      { // initializer\n        list(f);\n      }\n      \n      @Override\n      public boolean hasNext() {\n        if (fileStats.isEmpty()) {\n          listDir();\n        }\n        return !fileStats.isEmpty();\n      }\n      \n      /**\n       * list at least one directory until file list is not empty\n       */\n      private void listDir() {\n        while (fileStats.isEmpty() \u0026\u0026 !dirStats.isEmpty()) {\n          FileStatus dir \u003d dirStats.pop();\n          list(dir.getPath());\n        }\n      }\n\n      /**\n       * List the given path\n       * \n       * @param dirPath a path\n       */\n      private void list(Path dirPath) {\n        try {\n          FileStatus[] stats \u003d listStatus(dirPath);\n          for (FileStatus stat : stats) {\n            if (stat.isFile()) {\n              fileStats.add(stat);\n            } else if (recursive) { // directory \u0026 recursive\n              dirStats.push(stat);\n            }\n          }\n        } catch (IOException ioe) {\n          throw (RuntimeException) new RuntimeException().initCause(ioe);\n        }        \n      }\n      \n      @Override\n      public LocatedFileStatus next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        FileStatus status \u003d fileStats.remove();\n        try {\n          BlockLocation[] locs \u003d getFileBlockLocations(\n              status, 0, status.getLen());\n          return new LocatedFileStatus(status, locs);\n        } catch (IOException ioe) {\n          throw (RuntimeException) new RuntimeException().initCause(ioe);\n        }\n      }\n      \n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Remove is not supported\");\n      }\n    };\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}