{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuthenticationFilterInitializer.java",
  "functionName": "initFilter",
  "functionId": "initFilter___container-FilterContainer__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
  "functionStartLine": 58,
  "functionEndLine": 64,
  "numCommitsSeen": 18,
  "timeTaken": 2413,
  "changeHistory": [
    "fa6a8b78d481d3b4d355e1bf078f30dd5e09850d",
    "a847903b6e64c6edb11d852b91f2c816b1253eb3",
    "90e07d55ace7221081a58a90e54b360ad68fa1ef",
    "e4b8d9e72d54d4725bf2a902452459b6b243b2e9",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "e43656c711e952dcf85e3c0213dd7c8959f9c85f",
    "83e4b2b46962ba2f799ea5c92aa328a5f01e21b7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af"
  ],
  "changeHistoryShort": {
    "fa6a8b78d481d3b4d355e1bf078f30dd5e09850d": "Ybodychange",
    "a847903b6e64c6edb11d852b91f2c816b1253eb3": "Ybodychange",
    "90e07d55ace7221081a58a90e54b360ad68fa1ef": "Ybodychange",
    "e4b8d9e72d54d4725bf2a902452459b6b243b2e9": "Ybodychange",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "e43656c711e952dcf85e3c0213dd7c8959f9c85f": "Ybodychange",
    "83e4b2b46962ba2f799ea5c92aa328a5f01e21b7": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fa6a8b78d481d3b4d355e1bf078f30dd5e09850d": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13119. Add ability to secure log servlet using proxy users.  Contribute by Yuanbo Liu.\"\n\nThis reverts commit a847903b6e64c6edb11d852b91f2c816b1253eb3.\n\nChange-Id: I3122a2142f5bdf8507dece930e447556a43cd9ae\n(cherry picked from commit 8fad3ec76070ccfcd3ed80feaba4355077bc6f5c)\n",
      "commitDate": "09/03/18 10:46 PM",
      "commitName": "fa6a8b78d481d3b4d355e1bf078f30dd5e09850d",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "21/01/17 3:43 PM",
      "commitNameOld": "a847903b6e64c6edb11d852b91f2c816b1253eb3",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 412.29,
      "commitsBetweenForRepo": 2669,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,7 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d getFilterConfigMap(conf, PREFIX);\n \n-    // extend AuthenticationFilter\u0027s feature to\n-    // support proxy user operation.\n     container.addFilter(\"authentication\",\n-                        AuthenticationWithProxyUserFilter.class.getName(),\n+                        AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d getFilterConfigMap(conf, PREFIX);\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "a847903b6e64c6edb11d852b91f2c816b1253eb3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13119. Add ability to secure log servlet using proxy users.  Contribute by Yuanbo Liu.\n",
      "commitDate": "21/01/17 3:43 PM",
      "commitName": "a847903b6e64c6edb11d852b91f2c816b1253eb3",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/03/15 11:44 AM",
      "commitNameOld": "90e07d55ace7221081a58a90e54b360ad68fa1ef",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 663.21,
      "commitsBetweenForRepo": 4873,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,9 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d getFilterConfigMap(conf, PREFIX);\n \n+    // extend AuthenticationFilter\u0027s feature to\n+    // support proxy user operation.\n     container.addFilter(\"authentication\",\n-                        AuthenticationFilter.class.getName(),\n+                        AuthenticationWithProxyUserFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d getFilterConfigMap(conf, PREFIX);\n\n    // extend AuthenticationFilter\u0027s feature to\n    // support proxy user operation.\n    container.addFilter(\"authentication\",\n                        AuthenticationWithProxyUserFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "90e07d55ace7221081a58a90e54b360ad68fa1ef": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11754. RM fails to start in non-secure mode due to authentication filter failure. Contributed by Haohui Mai.\n",
      "commitDate": "30/03/15 11:44 AM",
      "commitName": "90e07d55ace7221081a58a90e54b360ad68fa1ef",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/03/15 11:12 AM",
      "commitNameOld": "e4b8d9e72d54d4725bf2a902452459b6b243b2e9",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 5.02,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,7 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n-    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n-\n-    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n-    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n-\n-    for (Map.Entry\u003cString, String\u003e entry : conf) {\n-      String name \u003d entry.getKey();\n-      if (name.startsWith(PREFIX)) {\n-        String value \u003d conf.get(name);\n-        name \u003d name.substring(PREFIX.length());\n-        filterConfig.put(name, value);\n-      }\n-    }\n-\n-    //Resolve _HOST into bind address\n-    String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n-    String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n-    if (principal !\u003d null) {\n-      try {\n-        principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n-      }\n-      catch (IOException ex) {\n-        throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n-      }\n-      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n-    }\n+    Map\u003cString, String\u003e filterConfig \u003d getFilterConfigMap(conf, PREFIX);\n \n     container.addFilter(\"authentication\",\n                         AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d getFilterConfigMap(conf, PREFIX);\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "e4b8d9e72d54d4725bf2a902452459b6b243b2e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10670. Allow AuthenticationFilters to load secret from signature secret files. Contributed by Kai Zheng.\n",
      "commitDate": "25/03/15 11:12 AM",
      "commitName": "e4b8d9e72d54d4725bf2a902452459b6b243b2e9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 103.73,
      "commitsBetweenForRepo": 819,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,32 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n \n     //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n     filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n \n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(PREFIX.length());\n         filterConfig.put(name, value);\n       }\n     }\n \n-    String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n-    if (signatureSecretFile \u003d\u003d null) {\n-      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n-    }\n-\n-    StringBuilder secret \u003d new StringBuilder();\n-    try (Reader reader \u003d new InputStreamReader(\n-        new FileInputStream(signatureSecretFile), Charsets.UTF_8)) {\n-      int c \u003d reader.read();\n-      while (c \u003e -1) {\n-        secret.append((char)c);\n-        c \u003d reader.read();\n-      }\n-      reader.close();\n-      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n-    } catch (IOException ex) {\n-      throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n-    }\n-\n     //Resolve _HOST into bind address\n     String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n     String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n     if (principal !\u003d null) {\n       try {\n         principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n       }\n       catch (IOException ex) {\n         throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n       }\n       filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n     }\n \n     container.addFilter(\"authentication\",\n                         AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    //Resolve _HOST into bind address\n    String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n    String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n    if (principal !\u003d null) {\n      try {\n        principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n      }\n      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n    }\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 317.72,
      "commitsBetweenForRepo": 2628,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n \n     //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n     filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n \n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(PREFIX.length());\n         filterConfig.put(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n     }\n-    \n-    try {\n-      StringBuilder secret \u003d new StringBuilder();\n-      Reader reader \u003d new FileReader(signatureSecretFile);\n+\n+    StringBuilder secret \u003d new StringBuilder();\n+    try (Reader reader \u003d new InputStreamReader(\n+        new FileInputStream(signatureSecretFile), Charsets.UTF_8)) {\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n     }\n \n     //Resolve _HOST into bind address\n     String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n     String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n     if (principal !\u003d null) {\n       try {\n         principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n       }\n       catch (IOException ex) {\n         throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n       }\n       filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n     }\n \n     container.addFilter(\"authentication\",\n                         AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n    }\n\n    StringBuilder secret \u003d new StringBuilder();\n    try (Reader reader \u003d new InputStreamReader(\n        new FileInputStream(signatureSecretFile), Charsets.UTF_8)) {\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n    }\n\n    //Resolve _HOST into bind address\n    String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n    String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n    if (principal !\u003d null) {\n      try {\n        principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n      }\n      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n    }\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/07/12 1:21 AM",
      "commitNameOld": "43e37b96f86881097d68925a92b65ae06e896d6f",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 565.97,
      "commitsBetweenForRepo": 3332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n \n     //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n     filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n \n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(PREFIX.length());\n         filterConfig.put(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n     }\n     \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new FileReader(signatureSecretFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n     }\n \n     //Resolve _HOST into bind address\n-    String bindAddress \u003d conf.get(HttpServer.BIND_ADDRESS);\n+    String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n     String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n     if (principal !\u003d null) {\n       try {\n         principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n       }\n       catch (IOException ex) {\n         throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n       }\n       filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n     }\n \n     container.addFilter(\"authentication\",\n                         AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n    }\n    \n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n    }\n\n    //Resolve _HOST into bind address\n    String bindAddress \u003d conf.get(HttpServer2.BIND_ADDRESS);\n    String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n    if (principal !\u003d null) {\n      try {\n        principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n      }\n      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n    }\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "e43656c711e952dcf85e3c0213dd7c8959f9c85f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8098. KerberosAuthenticatorHandler should use _HOST replacement to resolve principal name (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1294757 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 10:26 AM",
      "commitName": "e43656c711e952dcf85e3c0213dd7c8959f9c85f",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "26/12/11 11:37 AM",
      "commitNameOld": "ae0d48854d5ee0d1281c630263762e1cdeb781ff",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 63.95,
      "commitsBetweenForRepo": 365,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,51 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n \n     //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n     filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n \n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(PREFIX.length());\n         filterConfig.put(name, value);\n       }\n     }\n \n     String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n     }\n     \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new FileReader(signatureSecretFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n     }\n-    \n+\n+    //Resolve _HOST into bind address\n+    String bindAddress \u003d conf.get(HttpServer.BIND_ADDRESS);\n+    String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n+    if (principal !\u003d null) {\n+      try {\n+        principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n+      }\n+      catch (IOException ex) {\n+        throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n+      }\n+      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n+    }\n+\n     container.addFilter(\"authentication\",\n                         AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n    }\n    \n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n    }\n\n    //Resolve _HOST into bind address\n    String bindAddress \u003d conf.get(HttpServer.BIND_ADDRESS);\n    String principal \u003d filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);\n    if (principal !\u003d null) {\n      try {\n        principal \u003d SecurityUtil.getServerPrincipal(principal, bindAddress);\n      }\n      catch (IOException ex) {\n        throw new RuntimeException(\"Could not resolve Kerberos principal name: \" + ex.toString(), ex);\n      }\n      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal);\n    }\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "83e4b2b46962ba2f799ea5c92aa328a5f01e21b7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7621. alfredo config should be in a file not readable by users (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 9:09 AM",
      "commitName": "83e4b2b46962ba2f799ea5c92aa328a5f01e21b7",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "31/08/11 3:40 PM",
      "commitNameOld": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 20.73,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,38 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n \n     //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n     filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n \n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(PREFIX.length());\n         filterConfig.put(name, value);\n       }\n     }\n \n+    String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n+    if (signatureSecretFile \u003d\u003d null) {\n+      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n+    }\n+    \n+    try {\n+      StringBuilder secret \u003d new StringBuilder();\n+      Reader reader \u003d new FileReader(signatureSecretFile);\n+      int c \u003d reader.read();\n+      while (c \u003e -1) {\n+        secret.append((char)c);\n+        c \u003d reader.read();\n+      }\n+      reader.close();\n+      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n+    } catch (IOException ex) {\n+      throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n+    }\n+    \n     container.addFilter(\"authentication\",\n                         AuthenticationFilter.class.getName(),\n                         filterConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d filterConfig.get(SIGNATURE_SECRET_FILE);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);      \n    }\n    \n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HTTP signature secret file: \" + signatureSecretFile);            \n    }\n    \n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,19 @@\n+  public void initFilter(FilterContainer container, Configuration conf) {\n+    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n+\n+    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n+    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n+\n+    for (Map.Entry\u003cString, String\u003e entry : conf) {\n+      String name \u003d entry.getKey();\n+      if (name.startsWith(PREFIX)) {\n+        String value \u003d conf.get(name);\n+        name \u003d name.substring(PREFIX.length());\n+        filterConfig.put(name, value);\n+      }\n+    }\n+\n+    container.addFilter(\"authentication\",\n+                        AuthenticationFilter.class.getName(),\n+                        filterConfig);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e filterConfig \u003d new HashMap\u003cString, String\u003e();\n\n    //setting the cookie path to root \u0027/\u0027 so it is used for all resources.\n    filterConfig.put(AuthenticationFilter.COOKIE_PATH, \"/\");\n\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(PREFIX.length());\n        filterConfig.put(name, value);\n      }\n    }\n\n    container.addFilter(\"authentication\",\n                        AuthenticationFilter.class.getName(),\n                        filterConfig);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/AuthenticationFilterInitializer.java"
    }
  }
}