{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapFile.java",
  "functionName": "fix",
  "functionId": "fix___fs-FileSystem__dir-Path__keyClass-Class__? extends Writable____valueClass-Class__? extends Writable____dryrun-boolean__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
  "functionStartLine": 775,
  "functionEndLine": 855,
  "numCommitsSeen": 18,
  "timeTaken": 1523,
  "changeHistory": [
    "56872cff92f543bf77206a1324968559dceb7bc2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "3460a5e345f50ffcdd03a896b4410acbbe3b7711",
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "56872cff92f543bf77206a1324968559dceb7bc2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "3460a5e345f50ffcdd03a896b4410acbbe3b7711": "Ybodychange",
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "56872cff92f543bf77206a1324968559dceb7bc2": {
      "type": "Ybodychange",
      "commitMessage": "MapFile.fix creates a wrong index file in case of block-compressed data file. Contributed by Grigori Rybkine\n",
      "commitDate": "26/01/18 9:18 AM",
      "commitName": "56872cff92f543bf77206a1324968559dceb7bc2",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "14/12/17 8:18 AM",
      "commitNameOld": "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 43.04,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,81 @@\n   public static long fix(FileSystem fs, Path dir,\n                          Class\u003c? extends Writable\u003e keyClass,\n                          Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                          Configuration conf) throws Exception {\n     String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n     Path data \u003d new Path(dir, DATA_FILE_NAME);\n     Path index \u003d new Path(dir, INDEX_FILE_NAME);\n     int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n     if (!fs.exists(data)) {\n       // there\u0027s nothing we can do to fix this!\n       throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n     }\n     if (fs.exists(index)) {\n       // no fixing needed\n       return -1;\n     }\n     SequenceFile.Reader dataReader \u003d \n       new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n     if (!dataReader.getKeyClass().equals(keyClass)) {\n       throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                           \", got \" + dataReader.getKeyClass().getName());\n     }\n     if (!dataReader.getValueClass().equals(valueClass)) {\n       throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                           \", got \" + dataReader.getValueClass().getName());\n     }\n     long cnt \u003d 0L;\n     Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n     Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n     SequenceFile.Writer indexWriter \u003d null;\n     if (!dryrun) {\n       indexWriter \u003d \n         SequenceFile.createWriter(conf, \n                                   SequenceFile.Writer.file(index), \n                                   SequenceFile.Writer.keyClass(keyClass), \n                                   SequenceFile.Writer.valueClass\n                                     (LongWritable.class));\n     }\n     try {\n-      long pos \u003d 0L;\n+      /** What\u0027s the position (in bytes) we wrote when we got the last index */\n+      long lastIndexPos \u003d -1;\n+      /**\n+       * What was size when we last wrote an index. Set to MIN_VALUE to ensure\n+       * that we have an index at position zero - midKey will throw an exception\n+       * if this is not the case\n+       */\n+      long lastIndexKeyCount \u003d Long.MIN_VALUE;\n+      long pos \u003d dataReader.getPosition();\n       LongWritable position \u003d new LongWritable();\n+      long nextBlock \u003d pos;\n+      boolean blockCompressed \u003d dataReader.isBlockCompressed();\n       while(dataReader.next(key, value)) {\n-        cnt++;\n-        if (cnt % indexInterval \u003d\u003d 0) {\n-          position.set(pos);\n-          if (!dryrun) indexWriter.append(key, position);\n+        if (blockCompressed) {\n+          long curPos \u003d dataReader.getPosition();\n+          if (curPos \u003e nextBlock) {\n+            pos \u003d nextBlock;                       // current block position\n+            nextBlock \u003d curPos;\n+          }\n         }\n-        pos \u003d dataReader.getPosition();\n+        // Follow the same logic as in\n+        // {@link MapFile.Writer#append(WritableComparable, Writable)}\n+        if (cnt \u003e\u003d lastIndexKeyCount + indexInterval \u0026\u0026 pos \u003e lastIndexPos) {\n+          position.set(pos);\n+          if (!dryrun) {\n+            indexWriter.append(key, position);\n+          }\n+          lastIndexPos \u003d pos;\n+          lastIndexKeyCount \u003d cnt;\n+        }\n+        if (!blockCompressed) {\n+          pos \u003d dataReader.getPosition();         // next record position\n+        }\n+        cnt++;\n       }\n     } catch(Throwable t) {\n       // truncated data file. swallow it.\n     }\n     dataReader.close();\n     if (!dryrun) indexWriter.close();\n     return cnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d \n      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) {\n      indexWriter \u003d \n        SequenceFile.createWriter(conf, \n                                  SequenceFile.Writer.file(index), \n                                  SequenceFile.Writer.keyClass(keyClass), \n                                  SequenceFile.Writer.valueClass\n                                    (LongWritable.class));\n    }\n    try {\n      /** What\u0027s the position (in bytes) we wrote when we got the last index */\n      long lastIndexPos \u003d -1;\n      /**\n       * What was size when we last wrote an index. Set to MIN_VALUE to ensure\n       * that we have an index at position zero - midKey will throw an exception\n       * if this is not the case\n       */\n      long lastIndexKeyCount \u003d Long.MIN_VALUE;\n      long pos \u003d dataReader.getPosition();\n      LongWritable position \u003d new LongWritable();\n      long nextBlock \u003d pos;\n      boolean blockCompressed \u003d dataReader.isBlockCompressed();\n      while(dataReader.next(key, value)) {\n        if (blockCompressed) {\n          long curPos \u003d dataReader.getPosition();\n          if (curPos \u003e nextBlock) {\n            pos \u003d nextBlock;                       // current block position\n            nextBlock \u003d curPos;\n          }\n        }\n        // Follow the same logic as in\n        // {@link MapFile.Writer#append(WritableComparable, Writable)}\n        if (cnt \u003e\u003d lastIndexKeyCount + indexInterval \u0026\u0026 pos \u003e lastIndexPos) {\n          position.set(pos);\n          if (!dryrun) {\n            indexWriter.append(key, position);\n          }\n          lastIndexPos \u003d pos;\n          lastIndexKeyCount \u003d cnt;\n        }\n        if (!blockCompressed) {\n          pos \u003d dataReader.getPosition();         // next record position\n        }\n        cnt++;\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d \n      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) {\n      indexWriter \u003d \n        SequenceFile.createWriter(conf, \n                                  SequenceFile.Writer.file(index), \n                                  SequenceFile.Writer.keyClass(keyClass), \n                                  SequenceFile.Writer.valueClass\n                                    (LongWritable.class));\n    }\n    try {\n      long pos \u003d 0L;\n      LongWritable position \u003d new LongWritable();\n      while(dataReader.next(key, value)) {\n        cnt++;\n        if (cnt % indexInterval \u003d\u003d 0) {\n          position.set(pos);\n          if (!dryrun) indexWriter.append(key, position);\n        }\n        pos \u003d dataReader.getPosition();\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d \n      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) {\n      indexWriter \u003d \n        SequenceFile.createWriter(conf, \n                                  SequenceFile.Writer.file(index), \n                                  SequenceFile.Writer.keyClass(keyClass), \n                                  SequenceFile.Writer.valueClass\n                                    (LongWritable.class));\n    }\n    try {\n      long pos \u003d 0L;\n      LongWritable position \u003d new LongWritable();\n      while(dataReader.next(key, value)) {\n        cnt++;\n        if (cnt % indexInterval \u003d\u003d 0) {\n          position.set(pos);\n          if (!dryrun) indexWriter.append(key, position);\n        }\n        pos \u003d dataReader.getPosition();\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d \n      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) {\n      indexWriter \u003d \n        SequenceFile.createWriter(conf, \n                                  SequenceFile.Writer.file(index), \n                                  SequenceFile.Writer.keyClass(keyClass), \n                                  SequenceFile.Writer.valueClass\n                                    (LongWritable.class));\n    }\n    try {\n      long pos \u003d 0L;\n      LongWritable position \u003d new LongWritable();\n      while(dataReader.next(key, value)) {\n        cnt++;\n        if (cnt % indexInterval \u003d\u003d 0) {\n          position.set(pos);\n          if (!dryrun) indexWriter.append(key, position);\n        }\n        pos \u003d dataReader.getPosition();\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/MapFile.java",
        "newPath": "common/src/java/org/apache/hadoop/io/MapFile.java"
      }
    },
    "3460a5e345f50ffcdd03a896b4410acbbe3b7711": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6758. MapFile.fix does not allow index interval definition. Contributed by Gianmarco De Francisci Morales.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1031743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/11/10 12:36 PM",
      "commitName": "3460a5e345f50ffcdd03a896b4410acbbe3b7711",
      "commitAuthor": "Thomas White",
      "commitDateOld": "05/10/10 11:16 PM",
      "commitNameOld": "5001565459796698a1038cfbff31f4e0d56644c4",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 30.56,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public static long fix(FileSystem fs, Path dir,\n                          Class\u003c? extends Writable\u003e keyClass,\n                          Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                          Configuration conf) throws Exception {\n     String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n     Path data \u003d new Path(dir, DATA_FILE_NAME);\n     Path index \u003d new Path(dir, INDEX_FILE_NAME);\n-    int indexInterval \u003d 128;\n+    int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n     if (!fs.exists(data)) {\n       // there\u0027s nothing we can do to fix this!\n       throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n     }\n     if (fs.exists(index)) {\n       // no fixing needed\n       return -1;\n     }\n     SequenceFile.Reader dataReader \u003d \n       new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n     if (!dataReader.getKeyClass().equals(keyClass)) {\n       throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                           \", got \" + dataReader.getKeyClass().getName());\n     }\n     if (!dataReader.getValueClass().equals(valueClass)) {\n       throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                           \", got \" + dataReader.getValueClass().getName());\n     }\n     long cnt \u003d 0L;\n     Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n     Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n     SequenceFile.Writer indexWriter \u003d null;\n     if (!dryrun) {\n       indexWriter \u003d \n         SequenceFile.createWriter(conf, \n                                   SequenceFile.Writer.file(index), \n                                   SequenceFile.Writer.keyClass(keyClass), \n                                   SequenceFile.Writer.valueClass\n                                     (LongWritable.class));\n     }\n     try {\n       long pos \u003d 0L;\n       LongWritable position \u003d new LongWritable();\n       while(dataReader.next(key, value)) {\n         cnt++;\n         if (cnt % indexInterval \u003d\u003d 0) {\n           position.set(pos);\n           if (!dryrun) indexWriter.append(key, position);\n         }\n         pos \u003d dataReader.getPosition();\n       }\n     } catch(Throwable t) {\n       // truncated data file. swallow it.\n     }\n     dataReader.close();\n     if (!dryrun) indexWriter.close();\n     return cnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d conf.getInt(Writer.INDEX_INTERVAL, 128);\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d \n      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) {\n      indexWriter \u003d \n        SequenceFile.createWriter(conf, \n                                  SequenceFile.Writer.file(index), \n                                  SequenceFile.Writer.keyClass(keyClass), \n                                  SequenceFile.Writer.valueClass\n                                    (LongWritable.class));\n    }\n    try {\n      long pos \u003d 0L;\n      LongWritable position \u003d new LongWritable();\n      while(dataReader.next(key, value)) {\n        cnt++;\n        if (cnt % indexInterval \u003d\u003d 0) {\n          position.set(pos);\n          if (!dryrun) indexWriter.append(key, position);\n        }\n        pos \u003d dataReader.getPosition();\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "src/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6856. Simplify constructors for SequenceFile, and MapFile. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1002937 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/10 7:59 PM",
      "commitName": "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 110.23,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,56 @@\n   public static long fix(FileSystem fs, Path dir,\n                          Class\u003c? extends Writable\u003e keyClass,\n                          Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                          Configuration conf) throws Exception {\n     String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n     Path data \u003d new Path(dir, DATA_FILE_NAME);\n     Path index \u003d new Path(dir, INDEX_FILE_NAME);\n     int indexInterval \u003d 128;\n     if (!fs.exists(data)) {\n       // there\u0027s nothing we can do to fix this!\n       throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n     }\n     if (fs.exists(index)) {\n       // no fixing needed\n       return -1;\n     }\n-    SequenceFile.Reader dataReader \u003d new SequenceFile.Reader(fs, data, conf);\n+    SequenceFile.Reader dataReader \u003d \n+      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n     if (!dataReader.getKeyClass().equals(keyClass)) {\n       throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                           \", got \" + dataReader.getKeyClass().getName());\n     }\n     if (!dataReader.getValueClass().equals(valueClass)) {\n       throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                           \", got \" + dataReader.getValueClass().getName());\n     }\n     long cnt \u003d 0L;\n     Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n     Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n     SequenceFile.Writer indexWriter \u003d null;\n-    if (!dryrun) indexWriter \u003d SequenceFile.createWriter(fs, conf, index, keyClass, LongWritable.class);\n+    if (!dryrun) {\n+      indexWriter \u003d \n+        SequenceFile.createWriter(conf, \n+                                  SequenceFile.Writer.file(index), \n+                                  SequenceFile.Writer.keyClass(keyClass), \n+                                  SequenceFile.Writer.valueClass\n+                                    (LongWritable.class));\n+    }\n     try {\n       long pos \u003d 0L;\n       LongWritable position \u003d new LongWritable();\n       while(dataReader.next(key, value)) {\n         cnt++;\n         if (cnt % indexInterval \u003d\u003d 0) {\n           position.set(pos);\n           if (!dryrun) indexWriter.append(key, position);\n         }\n         pos \u003d dataReader.getPosition();\n       }\n     } catch(Throwable t) {\n       // truncated data file. swallow it.\n     }\n     dataReader.close();\n     if (!dryrun) indexWriter.close();\n     return cnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d 128;\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d \n      new SequenceFile.Reader(conf, SequenceFile.Reader.file(data));\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) {\n      indexWriter \u003d \n        SequenceFile.createWriter(conf, \n                                  SequenceFile.Writer.file(index), \n                                  SequenceFile.Writer.keyClass(keyClass), \n                                  SequenceFile.Writer.valueClass\n                                    (LongWritable.class));\n    }\n    try {\n      long pos \u003d 0L;\n      LongWritable position \u003d new LongWritable();\n      while(dataReader.next(key, value)) {\n        cnt++;\n        if (cnt % indexInterval \u003d\u003d 0) {\n          position.set(pos);\n          if (!dryrun) indexWriter.append(key, position);\n        }\n        pos \u003d dataReader.getPosition();\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "src/java/org/apache/hadoop/io/MapFile.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,48 @@\n+  public static long fix(FileSystem fs, Path dir,\n+                         Class\u003c? extends Writable\u003e keyClass,\n+                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n+                         Configuration conf) throws Exception {\n+    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n+    Path data \u003d new Path(dir, DATA_FILE_NAME);\n+    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n+    int indexInterval \u003d 128;\n+    if (!fs.exists(data)) {\n+      // there\u0027s nothing we can do to fix this!\n+      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n+    }\n+    if (fs.exists(index)) {\n+      // no fixing needed\n+      return -1;\n+    }\n+    SequenceFile.Reader dataReader \u003d new SequenceFile.Reader(fs, data, conf);\n+    if (!dataReader.getKeyClass().equals(keyClass)) {\n+      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n+                          \", got \" + dataReader.getKeyClass().getName());\n+    }\n+    if (!dataReader.getValueClass().equals(valueClass)) {\n+      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n+                          \", got \" + dataReader.getValueClass().getName());\n+    }\n+    long cnt \u003d 0L;\n+    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n+    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n+    SequenceFile.Writer indexWriter \u003d null;\n+    if (!dryrun) indexWriter \u003d SequenceFile.createWriter(fs, conf, index, keyClass, LongWritable.class);\n+    try {\n+      long pos \u003d 0L;\n+      LongWritable position \u003d new LongWritable();\n+      while(dataReader.next(key, value)) {\n+        cnt++;\n+        if (cnt % indexInterval \u003d\u003d 0) {\n+          position.set(pos);\n+          if (!dryrun) indexWriter.append(key, position);\n+        }\n+        pos \u003d dataReader.getPosition();\n+      }\n+    } catch(Throwable t) {\n+      // truncated data file. swallow it.\n+    }\n+    dataReader.close();\n+    if (!dryrun) indexWriter.close();\n+    return cnt;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static long fix(FileSystem fs, Path dir,\n                         Class\u003c? extends Writable\u003e keyClass,\n                         Class\u003c? extends Writable\u003e valueClass, boolean dryrun,\n                         Configuration conf) throws Exception {\n    String dr \u003d (dryrun ? \"[DRY RUN ] \" : \"\");\n    Path data \u003d new Path(dir, DATA_FILE_NAME);\n    Path index \u003d new Path(dir, INDEX_FILE_NAME);\n    int indexInterval \u003d 128;\n    if (!fs.exists(data)) {\n      // there\u0027s nothing we can do to fix this!\n      throw new Exception(dr + \"Missing data file in \" + dir + \", impossible to fix this.\");\n    }\n    if (fs.exists(index)) {\n      // no fixing needed\n      return -1;\n    }\n    SequenceFile.Reader dataReader \u003d new SequenceFile.Reader(fs, data, conf);\n    if (!dataReader.getKeyClass().equals(keyClass)) {\n      throw new Exception(dr + \"Wrong key class in \" + dir + \", expected\" + keyClass.getName() +\n                          \", got \" + dataReader.getKeyClass().getName());\n    }\n    if (!dataReader.getValueClass().equals(valueClass)) {\n      throw new Exception(dr + \"Wrong value class in \" + dir + \", expected\" + valueClass.getName() +\n                          \", got \" + dataReader.getValueClass().getName());\n    }\n    long cnt \u003d 0L;\n    Writable key \u003d ReflectionUtils.newInstance(keyClass, conf);\n    Writable value \u003d ReflectionUtils.newInstance(valueClass, conf);\n    SequenceFile.Writer indexWriter \u003d null;\n    if (!dryrun) indexWriter \u003d SequenceFile.createWriter(fs, conf, index, keyClass, LongWritable.class);\n    try {\n      long pos \u003d 0L;\n      LongWritable position \u003d new LongWritable();\n      while(dataReader.next(key, value)) {\n        cnt++;\n        if (cnt % indexInterval \u003d\u003d 0) {\n          position.set(pos);\n          if (!dryrun) indexWriter.append(key, position);\n        }\n        pos \u003d dataReader.getPosition();\n      }\n    } catch(Throwable t) {\n      // truncated data file. swallow it.\n    }\n    dataReader.close();\n    if (!dryrun) indexWriter.close();\n    return cnt;\n  }",
      "path": "src/java/org/apache/hadoop/io/MapFile.java"
    }
  }
}