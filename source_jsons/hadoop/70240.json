{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SendRequestIntercept.java",
  "functionName": "eventOccurred",
  "functionId": "eventOccurred___sendEvent-SendingRequestEvent",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SendRequestIntercept.java",
  "functionStartLine": 73,
  "functionEndLine": 95,
  "numCommitsSeen": 5,
  "timeTaken": 1195,
  "changeHistory": [
    "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28",
    "b43de80031d1272e8a08ea5bd31027efe45e9d70",
    "608ebd52bafecf980e9726d397c786a9c2422eba",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28": "Ybodychange",
    "b43de80031d1272e8a08ea5bd31027efe45e9d70": "Ybodychange",
    "608ebd52bafecf980e9726d397c786a9c2422eba": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14546. Azure: Concurrent I/O does not work when secure.mode is enabled. Contributed by Thomas\n",
      "commitDate": "27/06/17 5:32 PM",
      "commitName": "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 180.01,
      "commitsBetweenForRepo": 948,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,23 @@\n   public void eventOccurred(SendingRequestEvent sendEvent) {\n \n     if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n       // Pass if there is no HTTP connection associated with this send\n       // request.\n       return;\n     }\n \n     // Capture the HTTP URL connection object and get size of the payload for\n     // the request.\n     HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n         .getConnectionObject();\n \n     // Determine whether this is a download request by checking that the request\n     // method\n     // is a \"GET\" operation.\n-    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n-        \u0026\u0026 isOutOfBandIoAllowed()) {\n+    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")) {\n       // If concurrent reads on OOB writes are allowed, reset the if-match\n       // condition on the conditional header.\n       urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n           ALLOW_ALL_REQUEST_PRECONDITIONS);\n-\n-      // In the Java AzureSDK the packet is signed before firing the\n-      // SendRequest. Setting\n-      // the conditional packet header property changes the contents of the\n-      // packet, therefore the packet has to be re-signed.\n-      try {\n-        // Sign the request. GET\u0027s have no payload so the content length is\n-        // zero.\n-        StorageCredentialsHelper.signBlobQueueAndFileRequest(getCredentials(),\n-          urlConnection, -1L, getOperationContext());\n-      } catch (InvalidKeyException e) {\n-        // Log invalid key exception to track signing error before the send\n-        // fails.\n-        String errString \u003d String.format(\n-            \"Received invalid key exception when attempting sign packet.\"\n-                + \" Cause: %s\", e.getCause().toString());\n-        LOG.error(errString);\n-      } catch (StorageException e) {\n-        // Log storage exception to track signing error before the call fails.\n-        String errString \u003d String.format(\n-            \"Received storage exception when attempting to sign packet.\"\n-                + \" Cause: %s\", e.getCause().toString());\n-        LOG.error(errString);\n-      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void eventOccurred(SendingRequestEvent sendEvent) {\n\n    if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n      // Pass if there is no HTTP connection associated with this send\n      // request.\n      return;\n    }\n\n    // Capture the HTTP URL connection object and get size of the payload for\n    // the request.\n    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n        .getConnectionObject();\n\n    // Determine whether this is a download request by checking that the request\n    // method\n    // is a \"GET\" operation.\n    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")) {\n      // If concurrent reads on OOB writes are allowed, reset the if-match\n      // condition on the conditional header.\n      urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n          ALLOW_ALL_REQUEST_PRECONDITIONS);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SendRequestIntercept.java",
      "extendedDetails": {}
    },
    "b43de80031d1272e8a08ea5bd31027efe45e9d70": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13354. Update WASB driver to use the latest version (4.2.0) of SDK for Microsoft Azure Storage Clients. Contributed by Sivaguru Sankaridurg.\n",
      "commitDate": "27/07/16 3:50 PM",
      "commitName": "b43de80031d1272e8a08ea5bd31027efe45e9d70",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "06/03/15 3:25 PM",
      "commitNameOld": "608ebd52bafecf980e9726d397c786a9c2422eba",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 508.98,
      "commitsBetweenForRepo": 3890,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public void eventOccurred(SendingRequestEvent sendEvent) {\n \n     if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n       // Pass if there is no HTTP connection associated with this send\n       // request.\n       return;\n     }\n \n     // Capture the HTTP URL connection object and get size of the payload for\n     // the request.\n     HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n         .getConnectionObject();\n \n     // Determine whether this is a download request by checking that the request\n     // method\n     // is a \"GET\" operation.\n     if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n         \u0026\u0026 isOutOfBandIoAllowed()) {\n       // If concurrent reads on OOB writes are allowed, reset the if-match\n       // condition on the conditional header.\n       urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n           ALLOW_ALL_REQUEST_PRECONDITIONS);\n \n       // In the Java AzureSDK the packet is signed before firing the\n       // SendRequest. Setting\n       // the conditional packet header property changes the contents of the\n       // packet, therefore the packet has to be re-signed.\n       try {\n         // Sign the request. GET\u0027s have no payload so the content length is\n         // zero.\n-        StorageCredentialsHelper.signBlobAndQueueRequest(getCredentials(),\n+        StorageCredentialsHelper.signBlobQueueAndFileRequest(getCredentials(),\n           urlConnection, -1L, getOperationContext());\n       } catch (InvalidKeyException e) {\n         // Log invalid key exception to track signing error before the send\n         // fails.\n         String errString \u003d String.format(\n             \"Received invalid key exception when attempting sign packet.\"\n                 + \" Cause: %s\", e.getCause().toString());\n         LOG.error(errString);\n       } catch (StorageException e) {\n         // Log storage exception to track signing error before the call fails.\n         String errString \u003d String.format(\n             \"Received storage exception when attempting to sign packet.\"\n                 + \" Cause: %s\", e.getCause().toString());\n         LOG.error(errString);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void eventOccurred(SendingRequestEvent sendEvent) {\n\n    if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n      // Pass if there is no HTTP connection associated with this send\n      // request.\n      return;\n    }\n\n    // Capture the HTTP URL connection object and get size of the payload for\n    // the request.\n    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n        .getConnectionObject();\n\n    // Determine whether this is a download request by checking that the request\n    // method\n    // is a \"GET\" operation.\n    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n        \u0026\u0026 isOutOfBandIoAllowed()) {\n      // If concurrent reads on OOB writes are allowed, reset the if-match\n      // condition on the conditional header.\n      urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n          ALLOW_ALL_REQUEST_PRECONDITIONS);\n\n      // In the Java AzureSDK the packet is signed before firing the\n      // SendRequest. Setting\n      // the conditional packet header property changes the contents of the\n      // packet, therefore the packet has to be re-signed.\n      try {\n        // Sign the request. GET\u0027s have no payload so the content length is\n        // zero.\n        StorageCredentialsHelper.signBlobQueueAndFileRequest(getCredentials(),\n          urlConnection, -1L, getOperationContext());\n      } catch (InvalidKeyException e) {\n        // Log invalid key exception to track signing error before the send\n        // fails.\n        String errString \u003d String.format(\n            \"Received invalid key exception when attempting sign packet.\"\n                + \" Cause: %s\", e.getCause().toString());\n        LOG.error(errString);\n      } catch (StorageException e) {\n        // Log storage exception to track signing error before the call fails.\n        String errString \u003d String.format(\n            \"Received storage exception when attempting to sign packet.\"\n                + \" Cause: %s\", e.getCause().toString());\n        LOG.error(errString);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SendRequestIntercept.java",
      "extendedDetails": {}
    },
    "608ebd52bafecf980e9726d397c786a9c2422eba": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11642. Upgrade azure sdk version from 0.6.0 to 2.0.0. Contributed by Shashank Khandelwal and Ivan Mitic.\n",
      "commitDate": "06/03/15 3:25 PM",
      "commitName": "608ebd52bafecf980e9726d397c786a9c2422eba",
      "commitAuthor": "cnauroth",
      "commitDateOld": "10/06/14 3:26 PM",
      "commitNameOld": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 269.04,
      "commitsBetweenForRepo": 2303,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public void eventOccurred(SendingRequestEvent sendEvent) {\n \n     if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n       // Pass if there is no HTTP connection associated with this send\n       // request.\n       return;\n     }\n \n     // Capture the HTTP URL connection object and get size of the payload for\n     // the request.\n     HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n         .getConnectionObject();\n \n     // Determine whether this is a download request by checking that the request\n     // method\n     // is a \"GET\" operation.\n     if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n         \u0026\u0026 isOutOfBandIoAllowed()) {\n       // If concurrent reads on OOB writes are allowed, reset the if-match\n       // condition on the conditional header.\n       urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n           ALLOW_ALL_REQUEST_PRECONDITIONS);\n \n       // In the Java AzureSDK the packet is signed before firing the\n       // SendRequest. Setting\n       // the conditional packet header property changes the contents of the\n       // packet, therefore the packet has to be re-signed.\n       try {\n         // Sign the request. GET\u0027s have no payload so the content length is\n         // zero.\n-        getCredentials().signBlobAndQueueRequest(urlConnection, -1L, getOperationContext());\n+        StorageCredentialsHelper.signBlobAndQueueRequest(getCredentials(),\n+          urlConnection, -1L, getOperationContext());\n       } catch (InvalidKeyException e) {\n         // Log invalid key exception to track signing error before the send\n         // fails.\n         String errString \u003d String.format(\n             \"Received invalid key exception when attempting sign packet.\"\n                 + \" Cause: %s\", e.getCause().toString());\n         LOG.error(errString);\n       } catch (StorageException e) {\n         // Log storage exception to track signing error before the call fails.\n         String errString \u003d String.format(\n             \"Received storage exception when attempting to sign packet.\"\n                 + \" Cause: %s\", e.getCause().toString());\n         LOG.error(errString);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void eventOccurred(SendingRequestEvent sendEvent) {\n\n    if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n      // Pass if there is no HTTP connection associated with this send\n      // request.\n      return;\n    }\n\n    // Capture the HTTP URL connection object and get size of the payload for\n    // the request.\n    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n        .getConnectionObject();\n\n    // Determine whether this is a download request by checking that the request\n    // method\n    // is a \"GET\" operation.\n    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n        \u0026\u0026 isOutOfBandIoAllowed()) {\n      // If concurrent reads on OOB writes are allowed, reset the if-match\n      // condition on the conditional header.\n      urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n          ALLOW_ALL_REQUEST_PRECONDITIONS);\n\n      // In the Java AzureSDK the packet is signed before firing the\n      // SendRequest. Setting\n      // the conditional packet header property changes the contents of the\n      // packet, therefore the packet has to be re-signed.\n      try {\n        // Sign the request. GET\u0027s have no payload so the content length is\n        // zero.\n        StorageCredentialsHelper.signBlobAndQueueRequest(getCredentials(),\n          urlConnection, -1L, getOperationContext());\n      } catch (InvalidKeyException e) {\n        // Log invalid key exception to track signing error before the send\n        // fails.\n        String errString \u003d String.format(\n            \"Received invalid key exception when attempting sign packet.\"\n                + \" Cause: %s\", e.getCause().toString());\n        LOG.error(errString);\n      } catch (StorageException e) {\n        // Log storage exception to track signing error before the call fails.\n        String errString \u003d String.format(\n            \"Received storage exception when attempting to sign packet.\"\n                + \" Cause: %s\", e.getCause().toString());\n        LOG.error(errString);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SendRequestIntercept.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,47 @@\n+  public void eventOccurred(SendingRequestEvent sendEvent) {\n+\n+    if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n+      // Pass if there is no HTTP connection associated with this send\n+      // request.\n+      return;\n+    }\n+\n+    // Capture the HTTP URL connection object and get size of the payload for\n+    // the request.\n+    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n+        .getConnectionObject();\n+\n+    // Determine whether this is a download request by checking that the request\n+    // method\n+    // is a \"GET\" operation.\n+    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n+        \u0026\u0026 isOutOfBandIoAllowed()) {\n+      // If concurrent reads on OOB writes are allowed, reset the if-match\n+      // condition on the conditional header.\n+      urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n+          ALLOW_ALL_REQUEST_PRECONDITIONS);\n+\n+      // In the Java AzureSDK the packet is signed before firing the\n+      // SendRequest. Setting\n+      // the conditional packet header property changes the contents of the\n+      // packet, therefore the packet has to be re-signed.\n+      try {\n+        // Sign the request. GET\u0027s have no payload so the content length is\n+        // zero.\n+        getCredentials().signBlobAndQueueRequest(urlConnection, -1L, getOperationContext());\n+      } catch (InvalidKeyException e) {\n+        // Log invalid key exception to track signing error before the send\n+        // fails.\n+        String errString \u003d String.format(\n+            \"Received invalid key exception when attempting sign packet.\"\n+                + \" Cause: %s\", e.getCause().toString());\n+        LOG.error(errString);\n+      } catch (StorageException e) {\n+        // Log storage exception to track signing error before the call fails.\n+        String errString \u003d String.format(\n+            \"Received storage exception when attempting to sign packet.\"\n+                + \" Cause: %s\", e.getCause().toString());\n+        LOG.error(errString);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void eventOccurred(SendingRequestEvent sendEvent) {\n\n    if (!(sendEvent.getConnectionObject() instanceof HttpURLConnection)) {\n      // Pass if there is no HTTP connection associated with this send\n      // request.\n      return;\n    }\n\n    // Capture the HTTP URL connection object and get size of the payload for\n    // the request.\n    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n        .getConnectionObject();\n\n    // Determine whether this is a download request by checking that the request\n    // method\n    // is a \"GET\" operation.\n    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"GET\")\n        \u0026\u0026 isOutOfBandIoAllowed()) {\n      // If concurrent reads on OOB writes are allowed, reset the if-match\n      // condition on the conditional header.\n      urlConnection.setRequestProperty(HeaderConstants.IF_MATCH,\n          ALLOW_ALL_REQUEST_PRECONDITIONS);\n\n      // In the Java AzureSDK the packet is signed before firing the\n      // SendRequest. Setting\n      // the conditional packet header property changes the contents of the\n      // packet, therefore the packet has to be re-signed.\n      try {\n        // Sign the request. GET\u0027s have no payload so the content length is\n        // zero.\n        getCredentials().signBlobAndQueueRequest(urlConnection, -1L, getOperationContext());\n      } catch (InvalidKeyException e) {\n        // Log invalid key exception to track signing error before the send\n        // fails.\n        String errString \u003d String.format(\n            \"Received invalid key exception when attempting sign packet.\"\n                + \" Cause: %s\", e.getCause().toString());\n        LOG.error(errString);\n      } catch (StorageException e) {\n        // Log storage exception to track signing error before the call fails.\n        String errString \u003d String.format(\n            \"Received storage exception when attempting to sign packet.\"\n                + \" Cause: %s\", e.getCause().toString());\n        LOG.error(errString);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SendRequestIntercept.java"
    }
  }
}