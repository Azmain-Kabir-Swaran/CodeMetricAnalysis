{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerApp.java",
  "functionName": "getResourceUsageReport",
  "functionId": "getResourceUsageReport",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
  "functionStartLine": 1098,
  "functionEndLine": 1125,
  "numCommitsSeen": 93,
  "timeTaken": 4069,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "c2d6fa36560d122ff24dd7db84f68f4ba3fb8123",
    "d52627a7cbddfd981db973e223aefffde1ebf82d",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "05f5c0f631680cffc36a79550c351620615445db"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "c2d6fa36560d122ff24dd7db84f68f4ba3fb8123": "Ybodychange",
    "d52627a7cbddfd981db973e223aefffde1ebf82d": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "05f5c0f631680cffc36a79550c351620615445db": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n+    writeLock.lock();\n     try {\n       // Use write lock here because\n       // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n       // TODO: improve this\n-      writeLock.lock();\n       ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       Resource totalPartitionRes \u003d\n           rmContext.getNodeLabelManager().getResourceByLabel(\n               getAppAMNodePartitionName(), cluster);\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n       float queueUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(totalPartitionRes)) {\n         Resource effCap \u003d ((AbstractCSQueue) getQueue())\n             .getEffectiveCapacity(getAppAMNodePartitionName());\n         if (!effCap.equals(Resources.none())) {\n           queueUsagePerc \u003d calc.divide(totalPartitionRes,\n               report.getUsedResources(), effCap) * 100;\n         }\n         report.setQueueUsagePercentage(queueUsagePerc);\n       }\n       return report;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    writeLock.lock();\n    try {\n      // Use write lock here because\n      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n      // TODO: improve this\n      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      Resource totalPartitionRes \u003d\n          rmContext.getNodeLabelManager().getResourceByLabel(\n              getAppAMNodePartitionName(), cluster);\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      float queueUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n        Resource effCap \u003d ((AbstractCSQueue) getQueue())\n            .getEffectiveCapacity(getAppAMNodePartitionName());\n        if (!effCap.equals(Resources.none())) {\n          queueUsagePerc \u003d calc.divide(totalPartitionRes,\n              report.getUsedResources(), effCap) * 100;\n        }\n        report.setQueueUsagePercentage(queueUsagePerc);\n      }\n      return report;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "c2d6fa36560d122ff24dd7db84f68f4ba3fb8123": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7699. queueUsagePercentage is coming as INF for getApp REST api call. Contributed by Sunil G.\n",
      "commitDate": "07/01/18 9:09 PM",
      "commitName": "c2d6fa36560d122ff24dd7db84f68f4ba3fb8123",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "08/12/17 3:17 PM",
      "commitNameOld": "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 30.24,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n     try {\n       // Use write lock here because\n       // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n       // TODO: improve this\n       writeLock.lock();\n       ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       Resource totalPartitionRes \u003d\n           rmContext.getNodeLabelManager().getResourceByLabel(\n               getAppAMNodePartitionName(), cluster);\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n+      float queueUsagePerc \u003d 0.0f;\n       if (!calc.isInvalidDivisor(totalPartitionRes)) {\n         Resource effCap \u003d ((AbstractCSQueue) getQueue())\n             .getEffectiveCapacity(getAppAMNodePartitionName());\n-        float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n-            report.getUsedResources(), effCap) * 100;\n+        if (!effCap.equals(Resources.none())) {\n+          queueUsagePerc \u003d calc.divide(totalPartitionRes,\n+              report.getUsedResources(), effCap) * 100;\n+        }\n         report.setQueueUsagePercentage(queueUsagePerc);\n       }\n       return report;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      // Use write lock here because\n      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n      // TODO: improve this\n      writeLock.lock();\n      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      Resource totalPartitionRes \u003d\n          rmContext.getNodeLabelManager().getResourceByLabel(\n              getAppAMNodePartitionName(), cluster);\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      float queueUsagePerc \u003d 0.0f;\n      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n        Resource effCap \u003d ((AbstractCSQueue) getQueue())\n            .getEffectiveCapacity(getAppAMNodePartitionName());\n        if (!effCap.equals(Resources.none())) {\n          queueUsagePerc \u003d calc.divide(totalPartitionRes,\n              report.getUsedResources(), effCap) * 100;\n        }\n        report.setQueueUsagePercentage(queueUsagePerc);\n      }\n      return report;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "d52627a7cbddfd981db973e223aefffde1ebf82d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7254. UI and metrics changes related to absolute resource configuration. (Sunil G via wangda)\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "d52627a7cbddfd981db973e223aefffde1ebf82d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/12/17 9:20 AM",
      "commitNameOld": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n   public ApplicationResourceUsageReport getResourceUsageReport() {\n     try {\n       // Use write lock here because\n       // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n       // TODO: improve this\n       writeLock.lock();\n       ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n       Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n       Resource totalPartitionRes \u003d\n           rmContext.getNodeLabelManager().getResourceByLabel(\n               getAppAMNodePartitionName(), cluster);\n       ResourceCalculator calc \u003d\n           rmContext.getScheduler().getResourceCalculator();\n       if (!calc.isInvalidDivisor(totalPartitionRes)) {\n-        float queueAbsMaxCapPerPartition \u003d\n-            ((AbstractCSQueue) getQueue()).getQueueCapacities()\n-                .getAbsoluteCapacity(getAppAMNodePartitionName());\n+        Resource effCap \u003d ((AbstractCSQueue) getQueue())\n+            .getEffectiveCapacity(getAppAMNodePartitionName());\n         float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n-            report.getUsedResources(),\n-            Resources.multiply(totalPartitionRes, queueAbsMaxCapPerPartition))\n-            * 100;\n+            report.getUsedResources(), effCap) * 100;\n         report.setQueueUsagePercentage(queueUsagePerc);\n       }\n       return report;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      // Use write lock here because\n      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n      // TODO: improve this\n      writeLock.lock();\n      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      Resource totalPartitionRes \u003d\n          rmContext.getNodeLabelManager().getResourceByLabel(\n              getAppAMNodePartitionName(), cluster);\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n        Resource effCap \u003d ((AbstractCSQueue) getQueue())\n            .getEffectiveCapacity(getAppAMNodePartitionName());\n        float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n            report.getUsedResources(), effCap) * 100;\n        report.setQueueUsagePercentage(queueUsagePerc);\n      }\n      return report;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,29 @@\n-  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n-    ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n-    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n-    Resource totalPartitionRes \u003d\n-        rmContext.getNodeLabelManager()\n-          .getResourceByLabel(getAppAMNodePartitionName(), cluster);\n-    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n-    if (!calc.isInvalidDivisor(totalPartitionRes)) {\n-      float queueAbsMaxCapPerPartition \u003d\n-          ((AbstractCSQueue)getQueue()).getQueueCapacities()\n-            .getAbsoluteCapacity(getAppAMNodePartitionName());\n-      float queueUsagePerc \u003d\n-          calc.divide(totalPartitionRes, report.getUsedResources(),\n-              Resources.multiply(totalPartitionRes,\n-                  queueAbsMaxCapPerPartition)) * 100;\n-      report.setQueueUsagePercentage(queueUsagePerc);\n+  public ApplicationResourceUsageReport getResourceUsageReport() {\n+    try {\n+      // Use write lock here because\n+      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n+      // TODO: improve this\n+      writeLock.lock();\n+      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n+      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n+      Resource totalPartitionRes \u003d\n+          rmContext.getNodeLabelManager().getResourceByLabel(\n+              getAppAMNodePartitionName(), cluster);\n+      ResourceCalculator calc \u003d\n+          rmContext.getScheduler().getResourceCalculator();\n+      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n+        float queueAbsMaxCapPerPartition \u003d\n+            ((AbstractCSQueue) getQueue()).getQueueCapacities()\n+                .getAbsoluteCapacity(getAppAMNodePartitionName());\n+        float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n+            report.getUsedResources(),\n+            Resources.multiply(totalPartitionRes, queueAbsMaxCapPerPartition))\n+            * 100;\n+        report.setQueueUsagePercentage(queueUsagePerc);\n+      }\n+      return report;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return report;\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      // Use write lock here because\n      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n      // TODO: improve this\n      writeLock.lock();\n      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      Resource totalPartitionRes \u003d\n          rmContext.getNodeLabelManager().getResourceByLabel(\n              getAppAMNodePartitionName(), cluster);\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n        float queueAbsMaxCapPerPartition \u003d\n            ((AbstractCSQueue) getQueue()).getQueueCapacities()\n                .getAbsoluteCapacity(getAppAMNodePartitionName());\n        float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n            report.getUsedResources(),\n            Resources.multiply(totalPartitionRes, queueAbsMaxCapPerPartition))\n            * 100;\n        report.setQueueUsagePercentage(queueUsagePerc);\n      }\n      return report;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,29 @@\n-  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n-    ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n-    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n-    Resource totalPartitionRes \u003d\n-        rmContext.getNodeLabelManager()\n-          .getResourceByLabel(getAppAMNodePartitionName(), cluster);\n-    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n-    if (!calc.isInvalidDivisor(totalPartitionRes)) {\n-      float queueAbsMaxCapPerPartition \u003d\n-          ((AbstractCSQueue)getQueue()).getQueueCapacities()\n-            .getAbsoluteCapacity(getAppAMNodePartitionName());\n-      float queueUsagePerc \u003d\n-          calc.divide(totalPartitionRes, report.getUsedResources(),\n-              Resources.multiply(totalPartitionRes,\n-                  queueAbsMaxCapPerPartition)) * 100;\n-      report.setQueueUsagePercentage(queueUsagePerc);\n+  public ApplicationResourceUsageReport getResourceUsageReport() {\n+    try {\n+      // Use write lock here because\n+      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n+      // TODO: improve this\n+      writeLock.lock();\n+      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n+      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n+      Resource totalPartitionRes \u003d\n+          rmContext.getNodeLabelManager().getResourceByLabel(\n+              getAppAMNodePartitionName(), cluster);\n+      ResourceCalculator calc \u003d\n+          rmContext.getScheduler().getResourceCalculator();\n+      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n+        float queueAbsMaxCapPerPartition \u003d\n+            ((AbstractCSQueue) getQueue()).getQueueCapacities()\n+                .getAbsoluteCapacity(getAppAMNodePartitionName());\n+        float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n+            report.getUsedResources(),\n+            Resources.multiply(totalPartitionRes, queueAbsMaxCapPerPartition))\n+            * 100;\n+        report.setQueueUsagePercentage(queueUsagePerc);\n+      }\n+      return report;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    return report;\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ApplicationResourceUsageReport getResourceUsageReport() {\n    try {\n      // Use write lock here because\n      // SchedulerApplicationAttempt#getResourceUsageReport updated fields\n      // TODO: improve this\n      writeLock.lock();\n      ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n      Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n      Resource totalPartitionRes \u003d\n          rmContext.getNodeLabelManager().getResourceByLabel(\n              getAppAMNodePartitionName(), cluster);\n      ResourceCalculator calc \u003d\n          rmContext.getScheduler().getResourceCalculator();\n      if (!calc.isInvalidDivisor(totalPartitionRes)) {\n        float queueAbsMaxCapPerPartition \u003d\n            ((AbstractCSQueue) getQueue()).getQueueCapacities()\n                .getAbsoluteCapacity(getAppAMNodePartitionName());\n        float queueUsagePerc \u003d calc.divide(totalPartitionRes,\n            report.getUsedResources(),\n            Resources.multiply(totalPartitionRes, queueAbsMaxCapPerPartition))\n            * 100;\n        report.setQueueUsagePercentage(queueUsagePerc);\n      }\n      return report;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "05f5c0f631680cffc36a79550c351620615445db": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5555. Scheduler UI: \"% of Queue\" is inaccurate if leaf queue is hierarchically nested. Contributed by Eric Payne.\n",
      "commitDate": "02/09/16 3:32 AM",
      "commitName": "05f5c0f631680cffc36a79550c351620615445db",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,19 @@\n+  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n+    ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n+    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n+    Resource totalPartitionRes \u003d\n+        rmContext.getNodeLabelManager()\n+          .getResourceByLabel(getAppAMNodePartitionName(), cluster);\n+    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n+    if (!calc.isInvalidDivisor(totalPartitionRes)) {\n+      float queueAbsMaxCapPerPartition \u003d\n+          ((AbstractCSQueue)getQueue()).getQueueCapacities()\n+            .getAbsoluteCapacity(getAppAMNodePartitionName());\n+      float queueUsagePerc \u003d\n+          calc.divide(totalPartitionRes, report.getUsedResources(),\n+              Resources.multiply(totalPartitionRes,\n+                  queueAbsMaxCapPerPartition)) * 100;\n+      report.setQueueUsagePercentage(queueUsagePerc);\n+    }\n+    return report;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationResourceUsageReport getResourceUsageReport() {\n    ApplicationResourceUsageReport report \u003d super.getResourceUsageReport();\n    Resource cluster \u003d rmContext.getScheduler().getClusterResource();\n    Resource totalPartitionRes \u003d\n        rmContext.getNodeLabelManager()\n          .getResourceByLabel(getAppAMNodePartitionName(), cluster);\n    ResourceCalculator calc \u003d rmContext.getScheduler().getResourceCalculator();\n    if (!calc.isInvalidDivisor(totalPartitionRes)) {\n      float queueAbsMaxCapPerPartition \u003d\n          ((AbstractCSQueue)getQueue()).getQueueCapacities()\n            .getAbsoluteCapacity(getAppAMNodePartitionName());\n      float queueUsagePerc \u003d\n          calc.divide(totalPartitionRes, report.getUsedResources(),\n              Resources.multiply(totalPartitionRes,\n                  queueAbsMaxCapPerPartition)) * 100;\n      report.setQueueUsagePercentage(queueUsagePerc);\n    }\n    return report;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
    }
  }
}