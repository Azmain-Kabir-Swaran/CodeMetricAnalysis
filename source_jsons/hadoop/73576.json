{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "close",
  "functionId": "close",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 1912,
  "functionEndLine": 1915,
  "numCommitsSeen": 159,
  "timeTaken": 5357,
  "changeHistory": [
    "d4d076876a8d0002bd3a73491d8459d11cb4896c",
    "a62637a413ad88c4273d3251892b8fc1c05afa34",
    "8d2d3eb7bb938cc06ea3cc74040cfe0be13a2ba8",
    "fb6b38d67d8b997eca498fc5010b037e3081ace7",
    "419783d99294cc153fe819d69fa28f6b6e556ba9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "940389afce6a1b9b9e1519aed528cbc444786756",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "d4d076876a8d0002bd3a73491d8459d11cb4896c": "Ymultichange(Yexceptionschange,Ybodychange)",
    "a62637a413ad88c4273d3251892b8fc1c05afa34": "Ymultichange(Ymodifierchange,Yexceptionschange,Ybodychange)",
    "8d2d3eb7bb938cc06ea3cc74040cfe0be13a2ba8": "Ybodychange",
    "fb6b38d67d8b997eca498fc5010b037e3081ace7": "Ybodychange",
    "419783d99294cc153fe819d69fa28f6b6e556ba9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "940389afce6a1b9b9e1519aed528cbc444786756": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d4d076876a8d0002bd3a73491d8459d11cb4896c": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-10940. RPC client does no bounds checking of responses. Contributed by Daryn Sharp.\n",
      "commitDate": "09/09/16 8:39 AM",
      "commitName": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-10940. RPC client does no bounds checking of responses. Contributed by Daryn Sharp.\n",
          "commitDate": "09/09/16 8:39 AM",
          "commitName": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/09/16 9:03 AM",
          "commitNameOld": "23abb09c1f979d8c18ece81e32630a35ed569399",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.98,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,4 @@\n-  public void close() throws Exception {\n-    stop();\n-  }\n\\ No newline at end of file\n+    public void close() {\n+      IOUtils.closeStream(out);\n+      IOUtils.closeStream(in);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void close() {\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[Exception]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10940. RPC client does no bounds checking of responses. Contributed by Daryn Sharp.\n",
          "commitDate": "09/09/16 8:39 AM",
          "commitName": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/09/16 9:03 AM",
          "commitNameOld": "23abb09c1f979d8c18ece81e32630a35ed569399",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.98,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,4 @@\n-  public void close() throws Exception {\n-    stop();\n-  }\n\\ No newline at end of file\n+    public void close() {\n+      IOUtils.closeStream(out);\n+      IOUtils.closeStream(in);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void close() {\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "a62637a413ad88c4273d3251892b8fc1c05afa34": {
      "type": "Ymultichange(Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-12909. Change ipc.Client to support asynchronous calls.  Contributed by  Xiaobing Zhou\n",
      "commitDate": "06/04/16 11:02 PM",
      "commitName": "a62637a413ad88c4273d3251892b8fc1c05afa34",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-12909. Change ipc.Client to support asynchronous calls.  Contributed by  Xiaobing Zhou\n",
          "commitDate": "06/04/16 11:02 PM",
          "commitName": "a62637a413ad88c4273d3251892b8fc1c05afa34",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/04/16 11:22 AM",
          "commitNameOld": "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,3 @@\n-    private synchronized void close() {\n-      if (!shouldCloseConnection.get()) {\n-        LOG.error(\"The connection is not in the closed state\");\n-        return;\n-      }\n-\n-      // We have marked this connection as closed. Other thread could have\n-      // already known it and replace this closedConnection with a new one.\n-      // We should only remove this closedConnection.\n-      connections.remove(remoteId, this);\n-\n-      // close the streams and therefore the socket\n-      IOUtils.closeStream(out);\n-      IOUtils.closeStream(in);\n-      disposeSasl();\n-\n-      // clean up all calls\n-      if (closeException \u003d\u003d null) {\n-        if (!calls.isEmpty()) {\n-          LOG.warn(\n-              \"A connection is closed for no cause and calls are not empty\");\n-\n-          // clean up calls anyway\n-          closeException \u003d new IOException(\"Unexpected closed connection\");\n-          cleanupCalls();\n-        }\n-      } else {\n-        // log the info\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n-              closeException.getMessage(),closeException);\n-        }\n-\n-        // cleanup calls\n-        cleanupCalls();\n-      }\n-      closeConnection();\n-      if (LOG.isDebugEnabled())\n-        LOG.debug(getName() + \": closed\");\n-    }\n\\ No newline at end of file\n+  public void close() throws Exception {\n+    stop();\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() throws Exception {\n    stop();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-12909. Change ipc.Client to support asynchronous calls.  Contributed by  Xiaobing Zhou\n",
          "commitDate": "06/04/16 11:02 PM",
          "commitName": "a62637a413ad88c4273d3251892b8fc1c05afa34",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/04/16 11:22 AM",
          "commitNameOld": "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,3 @@\n-    private synchronized void close() {\n-      if (!shouldCloseConnection.get()) {\n-        LOG.error(\"The connection is not in the closed state\");\n-        return;\n-      }\n-\n-      // We have marked this connection as closed. Other thread could have\n-      // already known it and replace this closedConnection with a new one.\n-      // We should only remove this closedConnection.\n-      connections.remove(remoteId, this);\n-\n-      // close the streams and therefore the socket\n-      IOUtils.closeStream(out);\n-      IOUtils.closeStream(in);\n-      disposeSasl();\n-\n-      // clean up all calls\n-      if (closeException \u003d\u003d null) {\n-        if (!calls.isEmpty()) {\n-          LOG.warn(\n-              \"A connection is closed for no cause and calls are not empty\");\n-\n-          // clean up calls anyway\n-          closeException \u003d new IOException(\"Unexpected closed connection\");\n-          cleanupCalls();\n-        }\n-      } else {\n-        // log the info\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n-              closeException.getMessage(),closeException);\n-        }\n-\n-        // cleanup calls\n-        cleanupCalls();\n-      }\n-      closeConnection();\n-      if (LOG.isDebugEnabled())\n-        LOG.debug(getName() + \": closed\");\n-    }\n\\ No newline at end of file\n+  public void close() throws Exception {\n+    stop();\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() throws Exception {\n    stop();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12909. Change ipc.Client to support asynchronous calls.  Contributed by  Xiaobing Zhou\n",
          "commitDate": "06/04/16 11:02 PM",
          "commitName": "a62637a413ad88c4273d3251892b8fc1c05afa34",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/04/16 11:22 AM",
          "commitNameOld": "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,3 @@\n-    private synchronized void close() {\n-      if (!shouldCloseConnection.get()) {\n-        LOG.error(\"The connection is not in the closed state\");\n-        return;\n-      }\n-\n-      // We have marked this connection as closed. Other thread could have\n-      // already known it and replace this closedConnection with a new one.\n-      // We should only remove this closedConnection.\n-      connections.remove(remoteId, this);\n-\n-      // close the streams and therefore the socket\n-      IOUtils.closeStream(out);\n-      IOUtils.closeStream(in);\n-      disposeSasl();\n-\n-      // clean up all calls\n-      if (closeException \u003d\u003d null) {\n-        if (!calls.isEmpty()) {\n-          LOG.warn(\n-              \"A connection is closed for no cause and calls are not empty\");\n-\n-          // clean up calls anyway\n-          closeException \u003d new IOException(\"Unexpected closed connection\");\n-          cleanupCalls();\n-        }\n-      } else {\n-        // log the info\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n-              closeException.getMessage(),closeException);\n-        }\n-\n-        // cleanup calls\n-        cleanupCalls();\n-      }\n-      closeConnection();\n-      if (LOG.isDebugEnabled())\n-        LOG.debug(getName() + \": closed\");\n-    }\n\\ No newline at end of file\n+  public void close() throws Exception {\n+    stop();\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void close() throws Exception {\n    stop();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "8d2d3eb7bb938cc06ea3cc74040cfe0be13a2ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12475. Replace guava Cache with ConcurrentHashMap for caching Connection in ipc Client (Walter Su via sjlee)\n",
      "commitDate": "15/10/15 11:43 AM",
      "commitName": "8d2d3eb7bb938cc06ea3cc74040cfe0be13a2ba8",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 17.17,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n     private synchronized void close() {\n       if (!shouldCloseConnection.get()) {\n         LOG.error(\"The connection is not in the closed state\");\n         return;\n       }\n \n-      connections.invalidate(remoteId);\n+      // We have marked this connection as closed. Other thread could have\n+      // already known it and replace this closedConnection with a new one.\n+      // We should only remove this closedConnection.\n+      connections.remove(remoteId, this);\n \n       // close the streams and therefore the socket\n       IOUtils.closeStream(out);\n       IOUtils.closeStream(in);\n       disposeSasl();\n \n       // clean up all calls\n       if (closeException \u003d\u003d null) {\n         if (!calls.isEmpty()) {\n           LOG.warn(\n               \"A connection is closed for no cause and calls are not empty\");\n \n           // clean up calls anyway\n           closeException \u003d new IOException(\"Unexpected closed connection\");\n           cleanupCalls();\n         }\n       } else {\n         // log the info\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"closing ipc connection to \" + server + \": \" +\n               closeException.getMessage(),closeException);\n         }\n \n         // cleanup calls\n         cleanupCalls();\n       }\n       closeConnection();\n       if (LOG.isDebugEnabled())\n         LOG.debug(getName() + \": closed\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // We have marked this connection as closed. Other thread could have\n      // already known it and replace this closedConnection with a new one.\n      // We should only remove this closedConnection.\n      connections.remove(remoteId, this);\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      closeConnection();\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "fb6b38d67d8b997eca498fc5010b037e3081ace7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11772. RPC Invoker relies on static ClientCache which has synchronized(this) blocks. Contributed by Haohui Mai.\n",
      "commitDate": "20/05/15 8:10 PM",
      "commitName": "fb6b38d67d8b997eca498fc5010b037e3081ace7",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "19/05/15 2:11 AM",
      "commitNameOld": "d4a2830b63f0819979b592f4ea6ea3abd5885b71",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,37 @@\n     private synchronized void close() {\n       if (!shouldCloseConnection.get()) {\n         LOG.error(\"The connection is not in the closed state\");\n         return;\n       }\n \n-      // release the resources\n-      // first thing to do;take the connection out of the connection list\n-      synchronized (connections) {\n-        if (connections.get(remoteId) \u003d\u003d this) {\n-          connections.remove(remoteId);\n-        }\n-      }\n+      connections.invalidate(remoteId);\n \n       // close the streams and therefore the socket\n       IOUtils.closeStream(out);\n       IOUtils.closeStream(in);\n       disposeSasl();\n \n       // clean up all calls\n       if (closeException \u003d\u003d null) {\n         if (!calls.isEmpty()) {\n           LOG.warn(\n               \"A connection is closed for no cause and calls are not empty\");\n \n           // clean up calls anyway\n           closeException \u003d new IOException(\"Unexpected closed connection\");\n           cleanupCalls();\n         }\n       } else {\n         // log the info\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"closing ipc connection to \" + server + \": \" +\n               closeException.getMessage(),closeException);\n         }\n \n         // cleanup calls\n         cleanupCalls();\n       }\n       closeConnection();\n       if (LOG.isDebugEnabled())\n         LOG.debug(getName() + \": closed\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      connections.invalidate(remoteId);\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      closeConnection();\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "419783d99294cc153fe819d69fa28f6b6e556ba9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10081. Client.setupIOStreams can leak socket resources on exception or error. Contributed by Tsuyoshi OZAWA\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/12/13 8:00 AM",
      "commitName": "419783d99294cc153fe819d69fa28f6b6e556ba9",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "03/12/13 2:44 PM",
      "commitNameOld": "f7fe50d55f51257c7b38724b37b9976a96f98c38",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n     private synchronized void close() {\n       if (!shouldCloseConnection.get()) {\n         LOG.error(\"The connection is not in the closed state\");\n         return;\n       }\n \n       // release the resources\n       // first thing to do;take the connection out of the connection list\n       synchronized (connections) {\n         if (connections.get(remoteId) \u003d\u003d this) {\n           connections.remove(remoteId);\n         }\n       }\n \n       // close the streams and therefore the socket\n       IOUtils.closeStream(out);\n       IOUtils.closeStream(in);\n       disposeSasl();\n \n       // clean up all calls\n       if (closeException \u003d\u003d null) {\n         if (!calls.isEmpty()) {\n           LOG.warn(\n               \"A connection is closed for no cause and calls are not empty\");\n \n           // clean up calls anyway\n           closeException \u003d new IOException(\"Unexpected closed connection\");\n           cleanupCalls();\n         }\n       } else {\n         // log the info\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"closing ipc connection to \" + server + \": \" +\n               closeException.getMessage(),closeException);\n         }\n \n         // cleanup calls\n         cleanupCalls();\n       }\n+      closeConnection();\n       if (LOG.isDebugEnabled())\n         LOG.debug(getName() + \": closed\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // release the resources\n      // first thing to do;take the connection out of the connection list\n      synchronized (connections) {\n        if (connections.get(remoteId) \u003d\u003d this) {\n          connections.remove(remoteId);\n        }\n      }\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      closeConnection();\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // release the resources\n      // first thing to do;take the connection out of the connection list\n      synchronized (connections) {\n        if (connections.get(remoteId) \u003d\u003d this) {\n          connections.remove(remoteId);\n        }\n      }\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // release the resources\n      // first thing to do;take the connection out of the connection list\n      synchronized (connections) {\n        if (connections.get(remoteId) \u003d\u003d this) {\n          connections.remove(remoteId);\n        }\n      }\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // release the resources\n      // first thing to do;take the connection out of the connection list\n      synchronized (connections) {\n        if (connections.get(remoteId) \u003d\u003d this) {\n          connections.remove(remoteId);\n        }\n      }\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "940389afce6a1b9b9e1519aed528cbc444786756": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/10 5:30 PM",
      "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "26/01/10 2:55 PM",
      "commitNameOld": "34d1b39c7525898b43e44a7c5cbd86768714baf0",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 7.11,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n     private synchronized void close() {\n       if (!shouldCloseConnection.get()) {\n         LOG.error(\"The connection is not in the closed state\");\n         return;\n       }\n \n       // release the resources\n       // first thing to do;take the connection out of the connection list\n       synchronized (connections) {\n         if (connections.get(remoteId) \u003d\u003d this) {\n           connections.remove(remoteId);\n         }\n       }\n \n       // close the streams and therefore the socket\n       IOUtils.closeStream(out);\n       IOUtils.closeStream(in);\n+      disposeSasl();\n \n       // clean up all calls\n       if (closeException \u003d\u003d null) {\n         if (!calls.isEmpty()) {\n           LOG.warn(\n               \"A connection is closed for no cause and calls are not empty\");\n \n           // clean up calls anyway\n           closeException \u003d new IOException(\"Unexpected closed connection\");\n           cleanupCalls();\n         }\n       } else {\n         // log the info\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"closing ipc connection to \" + server + \": \" +\n               closeException.getMessage(),closeException);\n         }\n \n         // cleanup calls\n         cleanupCalls();\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(getName() + \": closed\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // release the resources\n      // first thing to do;take the connection out of the connection list\n      synchronized (connections) {\n        if (connections.get(remoteId) \u003d\u003d this) {\n          connections.remove(remoteId);\n        }\n      }\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n      disposeSasl();\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,41 @@\n+    private synchronized void close() {\n+      if (!shouldCloseConnection.get()) {\n+        LOG.error(\"The connection is not in the closed state\");\n+        return;\n+      }\n+\n+      // release the resources\n+      // first thing to do;take the connection out of the connection list\n+      synchronized (connections) {\n+        if (connections.get(remoteId) \u003d\u003d this) {\n+          connections.remove(remoteId);\n+        }\n+      }\n+\n+      // close the streams and therefore the socket\n+      IOUtils.closeStream(out);\n+      IOUtils.closeStream(in);\n+\n+      // clean up all calls\n+      if (closeException \u003d\u003d null) {\n+        if (!calls.isEmpty()) {\n+          LOG.warn(\n+              \"A connection is closed for no cause and calls are not empty\");\n+\n+          // clean up calls anyway\n+          closeException \u003d new IOException(\"Unexpected closed connection\");\n+          cleanupCalls();\n+        }\n+      } else {\n+        // log the info\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n+              closeException.getMessage(),closeException);\n+        }\n+\n+        // cleanup calls\n+        cleanupCalls();\n+      }\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(getName() + \": closed\");\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void close() {\n      if (!shouldCloseConnection.get()) {\n        LOG.error(\"The connection is not in the closed state\");\n        return;\n      }\n\n      // release the resources\n      // first thing to do;take the connection out of the connection list\n      synchronized (connections) {\n        if (connections.get(remoteId) \u003d\u003d this) {\n          connections.remove(remoteId);\n        }\n      }\n\n      // close the streams and therefore the socket\n      IOUtils.closeStream(out);\n      IOUtils.closeStream(in);\n\n      // clean up all calls\n      if (closeException \u003d\u003d null) {\n        if (!calls.isEmpty()) {\n          LOG.warn(\n              \"A connection is closed for no cause and calls are not empty\");\n\n          // clean up calls anyway\n          closeException \u003d new IOException(\"Unexpected closed connection\");\n          cleanupCalls();\n        }\n      } else {\n        // log the info\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"closing ipc connection to \" + server + \": \" +\n              closeException.getMessage(),closeException);\n        }\n\n        // cleanup calls\n        cleanupCalls();\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(getName() + \": closed\");\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}