{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileJournalManager.java",
  "functionName": "recoverUnfinalizedSegments",
  "functionId": "recoverUnfinalizedSegments",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
  "functionStartLine": 426,
  "functionEndLine": 466,
  "numCommitsSeen": 52,
  "timeTaken": 2695,
  "changeHistory": [
    "53bad4eb008ec553dcdbe01e7ae975dcecde6590",
    "53c38cc89ab979ec47557dcfa7affbad20578c0a",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
    "b9e74da41b750ff93f2524da09f06ded1a7bd6e2",
    "641f79a325bad571b11b5700a42efb844eabc5af",
    "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58",
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15"
  ],
  "changeHistoryShort": {
    "53bad4eb008ec553dcdbe01e7ae975dcecde6590": "Ybodychange",
    "53c38cc89ab979ec47557dcfa7affbad20578c0a": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Ybodychange",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": "Ybodychange",
    "b9e74da41b750ff93f2524da09f06ded1a7bd6e2": "Ybodychange",
    "641f79a325bad571b11b5700a42efb844eabc5af": "Ybodychange",
    "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926": "Ybodychange",
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58": "Ybodychange",
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "53bad4eb008ec553dcdbe01e7ae975dcecde6590": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8996. Consolidate validateLog and scanLog in FJM#EditLogFile (Zhe Zhang via Colin P. McCabe)\n",
      "commitDate": "14/09/15 3:22 PM",
      "commitName": "53bad4eb008ec553dcdbe01e7ae975dcecde6590",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "03/09/15 11:22 AM",
      "commitNameOld": "53c38cc89ab979ec47557dcfa7affbad20578c0a",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 11.17,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         // If the file is zero-length, we likely just crashed after opening the\n         // file, but before writing anything to it. Safe to delete it.\n         if (elf.getFile().length() \u003d\u003d 0) {\n           LOG.info(\"Deleting zero-length edit log file \" + elf);\n           if (!elf.getFile().delete()) {\n             throw new IOException(\"Unable to delete file \" + elf.getFile());\n           }\n           continue;\n         }\n \n-        elf.validateLog(getLastReadableTxId());\n+        elf.scanLog(getLastReadableTxId(), true);\n \n         if (elf.hasCorruptHeader()) {\n           elf.moveAsideCorruptFile();\n           throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n               + elf);\n         }\n         if (elf.getLastTxId() \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n           // If the file has a valid header (isn\u0027t corrupt) but contains no\n           // transactions, we likely just crashed after opening the file and\n           // writing the header, but before syncing any transactions. Safe to\n           // delete the file.\n           LOG.info(\"Moving aside edit log file that seems to have zero \" +\n               \"transactions \" + elf);\n           elf.moveAsideEmptyFile();\n           continue;\n         }\n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          if (!elf.getFile().delete()) {\n            throw new IOException(\"Unable to delete file \" + elf.getFile());\n          }\n          continue;\n        }\n\n        elf.scanLog(getLastReadableTxId(), true);\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        if (elf.getLastTxId() \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n          // If the file has a valid header (isn\u0027t corrupt) but contains no\n          // transactions, we likely just crashed after opening the file and\n          // writing the header, but before syncing any transactions. Safe to\n          // delete the file.\n          LOG.info(\"Moving aside edit log file that seems to have zero \" +\n              \"transactions \" + elf);\n          elf.moveAsideEmptyFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "53c38cc89ab979ec47557dcfa7affbad20578c0a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8964. When validating the edit log, do not read at or beyond the file offset that is being written (Zhe Zhang via Colin P. McCabe)\n",
      "commitDate": "03/09/15 11:22 AM",
      "commitName": "53c38cc89ab979ec47557dcfa7affbad20578c0a",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 124.06,
      "commitsBetweenForRepo": 888,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         // If the file is zero-length, we likely just crashed after opening the\n         // file, but before writing anything to it. Safe to delete it.\n         if (elf.getFile().length() \u003d\u003d 0) {\n           LOG.info(\"Deleting zero-length edit log file \" + elf);\n           if (!elf.getFile().delete()) {\n             throw new IOException(\"Unable to delete file \" + elf.getFile());\n           }\n           continue;\n         }\n \n-        elf.validateLog();\n+        elf.validateLog(getLastReadableTxId());\n \n         if (elf.hasCorruptHeader()) {\n           elf.moveAsideCorruptFile();\n           throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n               + elf);\n         }\n         if (elf.getLastTxId() \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n           // If the file has a valid header (isn\u0027t corrupt) but contains no\n           // transactions, we likely just crashed after opening the file and\n           // writing the header, but before syncing any transactions. Safe to\n           // delete the file.\n           LOG.info(\"Moving aside edit log file that seems to have zero \" +\n               \"transactions \" + elf);\n           elf.moveAsideEmptyFile();\n           continue;\n         }\n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          if (!elf.getFile().delete()) {\n            throw new IOException(\"Unable to delete file \" + elf.getFile());\n          }\n          continue;\n        }\n\n        elf.validateLog(getLastReadableTxId());\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        if (elf.getLastTxId() \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n          // If the file has a valid header (isn\u0027t corrupt) but contains no\n          // transactions, we likely just crashed after opening the file and\n          // writing the header, but before syncing any transactions. Safe to\n          // delete the file.\n          LOG.info(\"Moving aside edit log file that seems to have zero \" +\n              \"transactions \" + elf);\n          elf.moveAsideEmptyFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "01/04/15 12:54 PM",
      "commitNameOld": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 30.88,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         // If the file is zero-length, we likely just crashed after opening the\n         // file, but before writing anything to it. Safe to delete it.\n         if (elf.getFile().length() \u003d\u003d 0) {\n           LOG.info(\"Deleting zero-length edit log file \" + elf);\n           if (!elf.getFile().delete()) {\n             throw new IOException(\"Unable to delete file \" + elf.getFile());\n           }\n           continue;\n         }\n \n         elf.validateLog();\n \n         if (elf.hasCorruptHeader()) {\n           elf.moveAsideCorruptFile();\n           throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n               + elf);\n         }\n-        if (elf.getLastTxId() \u003d\u003d HdfsConstants.INVALID_TXID) {\n+        if (elf.getLastTxId() \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n           // If the file has a valid header (isn\u0027t corrupt) but contains no\n           // transactions, we likely just crashed after opening the file and\n           // writing the header, but before syncing any transactions. Safe to\n           // delete the file.\n           LOG.info(\"Moving aside edit log file that seems to have zero \" +\n               \"transactions \" + elf);\n           elf.moveAsideEmptyFile();\n           continue;\n         }\n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          if (!elf.getFile().delete()) {\n            throw new IOException(\"Unable to delete file \" + elf.getFile());\n          }\n          continue;\n        }\n\n        elf.validateLog();\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        if (elf.getLastTxId() \u003d\u003d HdfsServerConstants.INVALID_TXID) {\n          // If the file has a valid header (isn\u0027t corrupt) but contains no\n          // transactions, we likely just crashed after opening the file and\n          // writing the header, but before syncing any transactions. Safe to\n          // delete the file.\n          LOG.info(\"Moving aside edit log file that seems to have zero \" +\n              \"transactions \" + elf);\n          elf.moveAsideEmptyFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "12/04/12 2:11 PM",
      "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 40.98,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,41 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         // If the file is zero-length, we likely just crashed after opening the\n         // file, but before writing anything to it. Safe to delete it.\n         if (elf.getFile().length() \u003d\u003d 0) {\n           LOG.info(\"Deleting zero-length edit log file \" + elf);\n           if (!elf.getFile().delete()) {\n             throw new IOException(\"Unable to delete file \" + elf.getFile());\n           }\n           continue;\n         }\n-        \n+\n         elf.validateLog();\n \n         if (elf.hasCorruptHeader()) {\n           elf.moveAsideCorruptFile();\n           throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n               + elf);\n         }\n-        \n-        // If the file has a valid header (isn\u0027t corrupt) but contains no\n-        // transactions, we likely just crashed after opening the file and\n-        // writing the header, but before syncing any transactions. Safe to\n-        // delete the file.\n-        if (elf.getNumTransactions() \u003d\u003d 0) {\n-          LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n-          if (!elf.getFile().delete()) {\n-            throw new IOException(\"Unable to delete \" + elf.getFile());\n-          }\n+        if (elf.getLastTxId() \u003d\u003d HdfsConstants.INVALID_TXID) {\n+          // If the file has a valid header (isn\u0027t corrupt) but contains no\n+          // transactions, we likely just crashed after opening the file and\n+          // writing the header, but before syncing any transactions. Safe to\n+          // delete the file.\n+          LOG.info(\"Moving aside edit log file that seems to have zero \" +\n+              \"transactions \" + elf);\n+          elf.moveAsideEmptyFile();\n           continue;\n         }\n-        \n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          if (!elf.getFile().delete()) {\n            throw new IOException(\"Unable to delete file \" + elf.getFile());\n          }\n          continue;\n        }\n\n        elf.validateLog();\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        if (elf.getLastTxId() \u003d\u003d HdfsConstants.INVALID_TXID) {\n          // If the file has a valid header (isn\u0027t corrupt) but contains no\n          // transactions, we likely just crashed after opening the file and\n          // writing the header, but before syncing any transactions. Safe to\n          // delete the file.\n          LOG.info(\"Moving aside edit log file that seems to have zero \" +\n              \"transactions \" + elf);\n          elf.moveAsideEmptyFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3039. Address findbugs and javadoc warnings on branch. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1296017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/12 5:32 PM",
      "commitName": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "15/02/12 2:00 PM",
      "commitNameOld": "3c145d3492331959d21f6d0c3b8c7e71d35de69f",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 15.15,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         // If the file is zero-length, we likely just crashed after opening the\n         // file, but before writing anything to it. Safe to delete it.\n         if (elf.getFile().length() \u003d\u003d 0) {\n           LOG.info(\"Deleting zero-length edit log file \" + elf);\n-          elf.getFile().delete();\n+          if (!elf.getFile().delete()) {\n+            throw new IOException(\"Unable to delete file \" + elf.getFile());\n+          }\n           continue;\n         }\n         \n         elf.validateLog();\n \n         if (elf.hasCorruptHeader()) {\n           elf.moveAsideCorruptFile();\n           throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n               + elf);\n         }\n         \n         // If the file has a valid header (isn\u0027t corrupt) but contains no\n         // transactions, we likely just crashed after opening the file and\n         // writing the header, but before syncing any transactions. Safe to\n         // delete the file.\n         if (elf.getNumTransactions() \u003d\u003d 0) {\n           LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n-          elf.getFile().delete();\n+          if (!elf.getFile().delete()) {\n+            throw new IOException(\"Unable to delete \" + elf.getFile());\n+          }\n           continue;\n         }\n         \n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          if (!elf.getFile().delete()) {\n            throw new IOException(\"Unable to delete file \" + elf.getFile());\n          }\n          continue;\n        }\n        \n        elf.validateLog();\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        \n        // If the file has a valid header (isn\u0027t corrupt) but contains no\n        // transactions, we likely just crashed after opening the file and\n        // writing the header, but before syncing any transactions. Safe to\n        // delete the file.\n        if (elf.getNumTransactions() \u003d\u003d 0) {\n          LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n          if (!elf.getFile().delete()) {\n            throw new IOException(\"Unable to delete \" + elf.getFile());\n          }\n          continue;\n        }\n        \n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "b9e74da41b750ff93f2524da09f06ded1a7bd6e2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2905. HA: Standby NN NPE when shared edits dir is deleted. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1241757 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/12 7:17 PM",
      "commitName": "b9e74da41b750ff93f2524da09f06ded1a7bd6e2",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "30/01/12 3:05 PM",
      "commitNameOld": "641f79a325bad571b11b5700a42efb844eabc5af",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.17,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n-    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n+    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         // If the file is zero-length, we likely just crashed after opening the\n         // file, but before writing anything to it. Safe to delete it.\n         if (elf.getFile().length() \u003d\u003d 0) {\n           LOG.info(\"Deleting zero-length edit log file \" + elf);\n           elf.getFile().delete();\n           continue;\n         }\n         \n         elf.validateLog();\n \n         if (elf.hasCorruptHeader()) {\n           elf.moveAsideCorruptFile();\n           throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n               + elf);\n         }\n         \n         // If the file has a valid header (isn\u0027t corrupt) but contains no\n         // transactions, we likely just crashed after opening the file and\n         // writing the header, but before syncing any transactions. Safe to\n         // delete the file.\n         if (elf.getNumTransactions() \u003d\u003d 0) {\n           LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n           elf.getFile().delete();\n           continue;\n         }\n         \n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          elf.getFile().delete();\n          continue;\n        }\n        \n        elf.validateLog();\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        \n        // If the file has a valid header (isn\u0027t corrupt) but contains no\n        // transactions, we likely just crashed after opening the file and\n        // writing the header, but before syncing any transactions. Safe to\n        // delete the file.\n        if (elf.getNumTransactions() \u003d\u003d 0) {\n          LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n          elf.getFile().delete();\n          continue;\n        }\n        \n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "641f79a325bad571b11b5700a42efb844eabc5af": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2824. Fix failover when prior NN died just after creating an edit log segment. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238069 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 3:05 PM",
      "commitName": "641f79a325bad571b11b5700a42efb844eabc5af",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/01/12 12:32 AM",
      "commitNameOld": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 19.61,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,40 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n-    \n-    // make sure journal is aware of max seen transaction before moving corrupt \n-    // files aside\n-    findMaxTransaction(true);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n-        elf.validateLog();\n-\n-        if (elf.isCorrupt()) {\n-          elf.moveAsideCorruptFile();\n+        // If the file is zero-length, we likely just crashed after opening the\n+        // file, but before writing anything to it. Safe to delete it.\n+        if (elf.getFile().length() \u003d\u003d 0) {\n+          LOG.info(\"Deleting zero-length edit log file \" + elf);\n+          elf.getFile().delete();\n           continue;\n         }\n+        \n+        elf.validateLog();\n+\n+        if (elf.hasCorruptHeader()) {\n+          elf.moveAsideCorruptFile();\n+          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n+              + elf);\n+        }\n+        \n+        // If the file has a valid header (isn\u0027t corrupt) but contains no\n+        // transactions, we likely just crashed after opening the file and\n+        // writing the header, but before syncing any transactions. Safe to\n+        // delete the file.\n+        if (elf.getNumTransactions() \u003d\u003d 0) {\n+          LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n+          elf.getFile().delete();\n+          continue;\n+        }\n+        \n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        // If the file is zero-length, we likely just crashed after opening the\n        // file, but before writing anything to it. Safe to delete it.\n        if (elf.getFile().length() \u003d\u003d 0) {\n          LOG.info(\"Deleting zero-length edit log file \" + elf);\n          elf.getFile().delete();\n          continue;\n        }\n        \n        elf.validateLog();\n\n        if (elf.hasCorruptHeader()) {\n          elf.moveAsideCorruptFile();\n          throw new CorruptionException(\"In-progress edit log file is corrupt: \"\n              + elf);\n        }\n        \n        // If the file has a valid header (isn\u0027t corrupt) but contains no\n        // transactions, we likely just crashed after opening the file and\n        // writing the header, but before syncing any transactions. Safe to\n        // delete the file.\n        if (elf.getNumTransactions() \u003d\u003d 0) {\n          LOG.info(\"Deleting edit log file with zero transactions \" + elf);\n          elf.getFile().delete();\n          continue;\n        }\n        \n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2738. FSEditLog.selectinputStreams is reading through in-progress streams even when non-in-progress are requested. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1229931 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/12 12:32 AM",
      "commitName": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "11/01/12 12:26 AM",
      "commitNameOld": "a339836bbc747324807b9690c6cb5bb13b1fdc0b",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n     LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n     \n     // make sure journal is aware of max seen transaction before moving corrupt \n     // files aside\n-    findMaxTransaction();\n+    findMaxTransaction(true);\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         elf.validateLog();\n \n         if (elf.isCorrupt()) {\n           elf.moveAsideCorruptFile();\n           continue;\n         }\n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n    \n    // make sure journal is aware of max seen transaction before moving corrupt \n    // files aside\n    findMaxTransaction(true);\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        elf.validateLog();\n\n        if (elf.isCorrupt()) {\n          elf.moveAsideCorruptFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2634. Standby needs to ingest latest edit logs before transitioning to active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1212187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 3:55 PM",
      "commitName": "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "30/11/11 1:46 PM",
      "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   synchronized public void recoverUnfinalizedSegments() throws IOException {\n     File currentDir \u003d sd.getCurrentDir();\n+    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n     List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n     \n     // make sure journal is aware of max seen transaction before moving corrupt \n     // files aside\n     findMaxTransaction();\n \n     for (EditLogFile elf : allLogFiles) {\n       if (elf.getFile().equals(currentInProgress)) {\n         continue;\n       }\n       if (elf.isInProgress()) {\n         elf.validateLog();\n \n         if (elf.isCorrupt()) {\n           elf.moveAsideCorruptFile();\n           continue;\n         }\n         finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    LOG.info(\"Recovering unfinalized segments in \" + currentDir);\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n    \n    // make sure journal is aware of max seen transaction before moving corrupt \n    // files aside\n    findMaxTransaction();\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        elf.validateLog();\n\n        if (elf.isCorrupt()) {\n          elf.moveAsideCorruptFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java",
      "extendedDetails": {}
    },
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2018. Move all journal stream management code into one place. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 1:27 PM",
      "commitName": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,23 @@\n+  synchronized public void recoverUnfinalizedSegments() throws IOException {\n+    File currentDir \u003d sd.getCurrentDir();\n+    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n+    \n+    // make sure journal is aware of max seen transaction before moving corrupt \n+    // files aside\n+    findMaxTransaction();\n+\n+    for (EditLogFile elf : allLogFiles) {\n+      if (elf.getFile().equals(currentInProgress)) {\n+        continue;\n+      }\n+      if (elf.isInProgress()) {\n+        elf.validateLog();\n+\n+        if (elf.isCorrupt()) {\n+          elf.moveAsideCorruptFile();\n+          continue;\n+        }\n+        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void recoverUnfinalizedSegments() throws IOException {\n    File currentDir \u003d sd.getCurrentDir();\n    List\u003cEditLogFile\u003e allLogFiles \u003d matchEditLogs(currentDir.listFiles());\n    \n    // make sure journal is aware of max seen transaction before moving corrupt \n    // files aside\n    findMaxTransaction();\n\n    for (EditLogFile elf : allLogFiles) {\n      if (elf.getFile().equals(currentInProgress)) {\n        continue;\n      }\n      if (elf.isInProgress()) {\n        elf.validateLog();\n\n        if (elf.isCorrupt()) {\n          elf.moveAsideCorruptFile();\n          continue;\n        }\n        finalizeLogSegment(elf.getFirstTxId(), elf.getLastTxId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileJournalManager.java"
    }
  }
}