{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardTool.java",
  "functionName": "initMetadataStore",
  "functionId": "initMetadataStore___forceCreate-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
  "functionStartLine": 320,
  "functionEndLine": 367,
  "numCommitsSeen": 42,
  "timeTaken": 3717,
  "changeHistory": [
    "c58e11bf521d746842ce16724211a2a0339d7b61",
    "920a89627dd191f533ff3a3a8bca293cab59ade7",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "c58e11bf521d746842ce16724211a2a0339d7b61": "Ybodychange",
    "920a89627dd191f533ff3a3a8bca293cab59ade7": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ymodifierchange",
    "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1": "Ybodychange",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c58e11bf521d746842ce16724211a2a0339d7b61": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
      "commitDate": "17/07/19 7:24 AM",
      "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "12/07/19 5:02 AM",
      "commitNameOld": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   protected MetadataStore initMetadataStore(boolean forceCreate)\n       throws IOException {\n     if (getStore() !\u003d null) {\n       return getStore();\n     }\n     Configuration conf;\n     if (filesystem \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       conf \u003d filesystem.getConf();\n     }\n     String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n     if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n       URI uri \u003d URI.create(metaURI);\n       LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n           + uri.getScheme());\n       switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n       case \"local\":\n         setStore(new LocalMetadataStore());\n         break;\n       case \"dynamodb\":\n         setStore(new DynamoDBMetadataStore());\n         conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n         if (forceCreate) {\n           conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n         }\n         break;\n       default:\n         throw new IOException(\n             String.format(\"Metadata store %s is not supported\", uri));\n       }\n     } else {\n       // CLI does not specify metadata store URI, it uses default metadata store\n       // DynamoDB instead.\n       setStore(new DynamoDBMetadataStore());\n       if (forceCreate) {\n         conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n       }\n     }\n \n     if (filesystem \u003d\u003d null) {\n-      getStore().initialize(conf);\n+      getStore().initialize(conf, new S3Guard.TtlTimeProvider(conf));\n     } else {\n-      getStore().initialize(filesystem);\n+      getStore().initialize(filesystem, new S3Guard.TtlTimeProvider(conf));\n     }\n     LOG.info(\"Metadata store {} is initialized.\", getStore());\n     return getStore();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected MetadataStore initMetadataStore(boolean forceCreate)\n      throws IOException {\n    if (getStore() !\u003d null) {\n      return getStore();\n    }\n    Configuration conf;\n    if (filesystem \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      conf \u003d filesystem.getConf();\n    }\n    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n      URI uri \u003d URI.create(metaURI);\n      LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n          + uri.getScheme());\n      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n      case \"local\":\n        setStore(new LocalMetadataStore());\n        break;\n      case \"dynamodb\":\n        setStore(new DynamoDBMetadataStore());\n        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n        if (forceCreate) {\n          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n        }\n        break;\n      default:\n        throw new IOException(\n            String.format(\"Metadata store %s is not supported\", uri));\n      }\n    } else {\n      // CLI does not specify metadata store URI, it uses default metadata store\n      // DynamoDB instead.\n      setStore(new DynamoDBMetadataStore());\n      if (forceCreate) {\n        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n      }\n    }\n\n    if (filesystem \u003d\u003d null) {\n      getStore().initialize(conf, new S3Guard.TtlTimeProvider(conf));\n    } else {\n      getStore().initialize(filesystem, new S3Guard.TtlTimeProvider(conf));\n    }\n    LOG.info(\"Metadata store {} is initialized.\", getStore());\n    return getStore();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "920a89627dd191f533ff3a3a8bca293cab59ade7": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-15843. s3guard bucket-info command to not print a stack trace on bucket-not-found.\"\n\nThis reverts commit c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1.\n",
      "commitDate": "18/02/19 6:57 AM",
      "commitName": "920a89627dd191f533ff3a3a8bca293cab59ade7",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/02/19 1:07 PM",
      "commitNameOld": "6c999fe4b0181720c8e55be8388bd592196c8c87",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,48 @@\n   protected MetadataStore initMetadataStore(boolean forceCreate)\n       throws IOException {\n     if (getStore() !\u003d null) {\n       return getStore();\n     }\n-    final boolean hasFileSystem \u003d filesystem !\u003d null;\n-    final Configuration conf \u003d hasFileSystem ? filesystem.getConf() : getConf();\n+    Configuration conf;\n+    if (filesystem \u003d\u003d null) {\n+      conf \u003d getConf();\n+    } else {\n+      conf \u003d filesystem.getConf();\n+    }\n     String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n     if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n       URI uri \u003d URI.create(metaURI);\n       LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n           + uri.getScheme());\n       switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n       case \"local\":\n         setStore(new LocalMetadataStore());\n         break;\n       case \"dynamodb\":\n         setStore(new DynamoDBMetadataStore());\n         conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n         if (forceCreate) {\n           conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n         }\n         break;\n       default:\n         throw new IOException(\n             String.format(\"Metadata store %s is not supported\", uri));\n       }\n     } else {\n-      if (!hasFileSystem) {\n-        // command didn\u0027t declare a metadata store URI or a bucket.\n-        // to avoid problems related to picking up a shared table for actions\n-        // line init and destroy (HADOOP-15843), this is rejected\n-        printHelp(this);\n-        throw usageError(E_NO_METASTORE_OR_FILESYSTEM);\n-      }\n       // CLI does not specify metadata store URI, it uses default metadata store\n       // DynamoDB instead.\n       setStore(new DynamoDBMetadataStore());\n       if (forceCreate) {\n         conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n       }\n     }\n \n-    if (hasFileSystem) {\n-      getStore().initialize(filesystem);\n-    } else {\n+    if (filesystem \u003d\u003d null) {\n       getStore().initialize(conf);\n+    } else {\n+      getStore().initialize(filesystem);\n     }\n     LOG.info(\"Metadata store {} is initialized.\", getStore());\n     return getStore();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected MetadataStore initMetadataStore(boolean forceCreate)\n      throws IOException {\n    if (getStore() !\u003d null) {\n      return getStore();\n    }\n    Configuration conf;\n    if (filesystem \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      conf \u003d filesystem.getConf();\n    }\n    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n      URI uri \u003d URI.create(metaURI);\n      LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n          + uri.getScheme());\n      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n      case \"local\":\n        setStore(new LocalMetadataStore());\n        break;\n      case \"dynamodb\":\n        setStore(new DynamoDBMetadataStore());\n        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n        if (forceCreate) {\n          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n        }\n        break;\n      default:\n        throw new IOException(\n            String.format(\"Metadata store %s is not supported\", uri));\n      }\n    } else {\n      // CLI does not specify metadata store URI, it uses default metadata store\n      // DynamoDB instead.\n      setStore(new DynamoDBMetadataStore());\n      if (forceCreate) {\n        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n      }\n    }\n\n    if (filesystem \u003d\u003d null) {\n      getStore().initialize(conf);\n    } else {\n      getStore().initialize(filesystem);\n    }\n    LOG.info(\"Metadata store {} is initialized.\", getStore());\n    return getStore();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/01/19 9:59 AM",
      "commitNameOld": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 21.74,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n-  MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n+  protected MetadataStore initMetadataStore(boolean forceCreate)\n+      throws IOException {\n     if (getStore() !\u003d null) {\n       return getStore();\n     }\n     final boolean hasFileSystem \u003d filesystem !\u003d null;\n     final Configuration conf \u003d hasFileSystem ? filesystem.getConf() : getConf();\n     String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n     if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n       URI uri \u003d URI.create(metaURI);\n       LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n           + uri.getScheme());\n       switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n       case \"local\":\n         setStore(new LocalMetadataStore());\n         break;\n       case \"dynamodb\":\n         setStore(new DynamoDBMetadataStore());\n         conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n         if (forceCreate) {\n           conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n         }\n         break;\n       default:\n         throw new IOException(\n             String.format(\"Metadata store %s is not supported\", uri));\n       }\n     } else {\n       if (!hasFileSystem) {\n         // command didn\u0027t declare a metadata store URI or a bucket.\n         // to avoid problems related to picking up a shared table for actions\n         // line init and destroy (HADOOP-15843), this is rejected\n         printHelp(this);\n         throw usageError(E_NO_METASTORE_OR_FILESYSTEM);\n       }\n       // CLI does not specify metadata store URI, it uses default metadata store\n       // DynamoDB instead.\n       setStore(new DynamoDBMetadataStore());\n       if (forceCreate) {\n         conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n       }\n     }\n \n     if (hasFileSystem) {\n       getStore().initialize(filesystem);\n     } else {\n       getStore().initialize(conf);\n     }\n     LOG.info(\"Metadata store {} is initialized.\", getStore());\n     return getStore();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected MetadataStore initMetadataStore(boolean forceCreate)\n      throws IOException {\n    if (getStore() !\u003d null) {\n      return getStore();\n    }\n    final boolean hasFileSystem \u003d filesystem !\u003d null;\n    final Configuration conf \u003d hasFileSystem ? filesystem.getConf() : getConf();\n    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n      URI uri \u003d URI.create(metaURI);\n      LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n          + uri.getScheme());\n      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n      case \"local\":\n        setStore(new LocalMetadataStore());\n        break;\n      case \"dynamodb\":\n        setStore(new DynamoDBMetadataStore());\n        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n        if (forceCreate) {\n          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n        }\n        break;\n      default:\n        throw new IOException(\n            String.format(\"Metadata store %s is not supported\", uri));\n      }\n    } else {\n      if (!hasFileSystem) {\n        // command didn\u0027t declare a metadata store URI or a bucket.\n        // to avoid problems related to picking up a shared table for actions\n        // line init and destroy (HADOOP-15843), this is rejected\n        printHelp(this);\n        throw usageError(E_NO_METASTORE_OR_FILESYSTEM);\n      }\n      // CLI does not specify metadata store URI, it uses default metadata store\n      // DynamoDB instead.\n      setStore(new DynamoDBMetadataStore());\n      if (forceCreate) {\n        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n      }\n    }\n\n    if (hasFileSystem) {\n      getStore().initialize(filesystem);\n    } else {\n      getStore().initialize(conf);\n    }\n    LOG.info(\"Metadata store {} is initialized.\", getStore());\n    return getStore();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[protected]"
      }
    },
    "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15843. s3guard bucket-info command to not print a stack trace on bucket-not-found.\n\nContributed by Adam Antal.\n",
      "commitDate": "14/01/19 9:27 AM",
      "commitName": "c4a00d1ad3d3cfc02a6a4e1e04353678f2d588e1",
      "commitAuthor": "Adam Antal",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n     if (getStore() !\u003d null) {\n       return getStore();\n     }\n-    Configuration conf;\n-    if (filesystem \u003d\u003d null) {\n-      conf \u003d getConf();\n-    } else {\n-      conf \u003d filesystem.getConf();\n-    }\n+    final boolean hasFileSystem \u003d filesystem !\u003d null;\n+    final Configuration conf \u003d hasFileSystem ? filesystem.getConf() : getConf();\n     String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n     if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n       URI uri \u003d URI.create(metaURI);\n       LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n           + uri.getScheme());\n       switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n       case \"local\":\n         setStore(new LocalMetadataStore());\n         break;\n       case \"dynamodb\":\n         setStore(new DynamoDBMetadataStore());\n         conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n         if (forceCreate) {\n           conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n         }\n         break;\n       default:\n         throw new IOException(\n             String.format(\"Metadata store %s is not supported\", uri));\n       }\n     } else {\n+      if (!hasFileSystem) {\n+        // command didn\u0027t declare a metadata store URI or a bucket.\n+        // to avoid problems related to picking up a shared table for actions\n+        // line init and destroy (HADOOP-15843), this is rejected\n+        printHelp(this);\n+        throw usageError(E_NO_METASTORE_OR_FILESYSTEM);\n+      }\n       // CLI does not specify metadata store URI, it uses default metadata store\n       // DynamoDB instead.\n       setStore(new DynamoDBMetadataStore());\n       if (forceCreate) {\n         conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n       }\n     }\n \n-    if (filesystem \u003d\u003d null) {\n-      getStore().initialize(conf);\n-    } else {\n+    if (hasFileSystem) {\n       getStore().initialize(filesystem);\n+    } else {\n+      getStore().initialize(conf);\n     }\n     LOG.info(\"Metadata store {} is initialized.\", getStore());\n     return getStore();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n    if (getStore() !\u003d null) {\n      return getStore();\n    }\n    final boolean hasFileSystem \u003d filesystem !\u003d null;\n    final Configuration conf \u003d hasFileSystem ? filesystem.getConf() : getConf();\n    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n      URI uri \u003d URI.create(metaURI);\n      LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n          + uri.getScheme());\n      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n      case \"local\":\n        setStore(new LocalMetadataStore());\n        break;\n      case \"dynamodb\":\n        setStore(new DynamoDBMetadataStore());\n        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n        if (forceCreate) {\n          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n        }\n        break;\n      default:\n        throw new IOException(\n            String.format(\"Metadata store %s is not supported\", uri));\n      }\n    } else {\n      if (!hasFileSystem) {\n        // command didn\u0027t declare a metadata store URI or a bucket.\n        // to avoid problems related to picking up a shared table for actions\n        // line init and destroy (HADOOP-15843), this is rejected\n        printHelp(this);\n        throw usageError(E_NO_METASTORE_OR_FILESYSTEM);\n      }\n      // CLI does not specify metadata store URI, it uses default metadata store\n      // DynamoDB instead.\n      setStore(new DynamoDBMetadataStore());\n      if (forceCreate) {\n        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n      }\n    }\n\n    if (hasFileSystem) {\n      getStore().initialize(filesystem);\n    } else {\n      getStore().initialize(conf);\n    }\n    LOG.info(\"Metadata store {} is initialized.\", getStore());\n    return getStore();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
      "commitDate": "25/09/17 3:59 PM",
      "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "01/09/17 6:13 AM",
      "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 24.41,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n     if (getStore() !\u003d null) {\n       return getStore();\n     }\n     Configuration conf;\n     if (filesystem \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       conf \u003d filesystem.getConf();\n     }\n     String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n     if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n       URI uri \u003d URI.create(metaURI);\n-      LOG.info(\"create metadata store: {}\", uri + \" scheme: \"\n+      LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n           + uri.getScheme());\n       switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n       case \"local\":\n         setStore(new LocalMetadataStore());\n         break;\n       case \"dynamodb\":\n         setStore(new DynamoDBMetadataStore());\n         conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n         if (forceCreate) {\n           conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n         }\n         break;\n       default:\n         throw new IOException(\n             String.format(\"Metadata store %s is not supported\", uri));\n       }\n     } else {\n       // CLI does not specify metadata store URI, it uses default metadata store\n       // DynamoDB instead.\n       setStore(new DynamoDBMetadataStore());\n       if (forceCreate) {\n         conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n       }\n     }\n \n     if (filesystem \u003d\u003d null) {\n       getStore().initialize(conf);\n     } else {\n       getStore().initialize(filesystem);\n     }\n     LOG.info(\"Metadata store {} is initialized.\", getStore());\n     return getStore();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n    if (getStore() !\u003d null) {\n      return getStore();\n    }\n    Configuration conf;\n    if (filesystem \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      conf \u003d filesystem.getConf();\n    }\n    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n      URI uri \u003d URI.create(metaURI);\n      LOG.info(\"Create metadata store: {}\", uri + \" scheme: \"\n          + uri.getScheme());\n      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n      case \"local\":\n        setStore(new LocalMetadataStore());\n        break;\n      case \"dynamodb\":\n        setStore(new DynamoDBMetadataStore());\n        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n        if (forceCreate) {\n          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n        }\n        break;\n      default:\n        throw new IOException(\n            String.format(\"Metadata store %s is not supported\", uri));\n      }\n    } else {\n      // CLI does not specify metadata store URI, it uses default metadata store\n      // DynamoDB instead.\n      setStore(new DynamoDBMetadataStore());\n      if (forceCreate) {\n        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n      }\n    }\n\n    if (filesystem \u003d\u003d null) {\n      getStore().initialize(conf);\n    } else {\n      getStore().initialize(filesystem);\n    }\n    LOG.info(\"Metadata store {} is initialized.\", getStore());\n    return getStore();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,47 @@\n+  MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n+    if (getStore() !\u003d null) {\n+      return getStore();\n+    }\n+    Configuration conf;\n+    if (filesystem \u003d\u003d null) {\n+      conf \u003d getConf();\n+    } else {\n+      conf \u003d filesystem.getConf();\n+    }\n+    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n+    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n+      URI uri \u003d URI.create(metaURI);\n+      LOG.info(\"create metadata store: {}\", uri + \" scheme: \"\n+          + uri.getScheme());\n+      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n+      case \"local\":\n+        setStore(new LocalMetadataStore());\n+        break;\n+      case \"dynamodb\":\n+        setStore(new DynamoDBMetadataStore());\n+        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n+        if (forceCreate) {\n+          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n+        }\n+        break;\n+      default:\n+        throw new IOException(\n+            String.format(\"Metadata store %s is not supported\", uri));\n+      }\n+    } else {\n+      // CLI does not specify metadata store URI, it uses default metadata store\n+      // DynamoDB instead.\n+      setStore(new DynamoDBMetadataStore());\n+      if (forceCreate) {\n+        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n+      }\n+    }\n+\n+    if (filesystem \u003d\u003d null) {\n+      getStore().initialize(conf);\n+    } else {\n+      getStore().initialize(filesystem);\n+    }\n+    LOG.info(\"Metadata store {} is initialized.\", getStore());\n+    return getStore();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  MetadataStore initMetadataStore(boolean forceCreate) throws IOException {\n    if (getStore() !\u003d null) {\n      return getStore();\n    }\n    Configuration conf;\n    if (filesystem \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      conf \u003d filesystem.getConf();\n    }\n    String metaURI \u003d getCommandFormat().getOptValue(META_FLAG);\n    if (metaURI !\u003d null \u0026\u0026 !metaURI.isEmpty()) {\n      URI uri \u003d URI.create(metaURI);\n      LOG.info(\"create metadata store: {}\", uri + \" scheme: \"\n          + uri.getScheme());\n      switch (uri.getScheme().toLowerCase(Locale.ENGLISH)) {\n      case \"local\":\n        setStore(new LocalMetadataStore());\n        break;\n      case \"dynamodb\":\n        setStore(new DynamoDBMetadataStore());\n        conf.set(S3GUARD_DDB_TABLE_NAME_KEY, uri.getAuthority());\n        if (forceCreate) {\n          conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n        }\n        break;\n      default:\n        throw new IOException(\n            String.format(\"Metadata store %s is not supported\", uri));\n      }\n    } else {\n      // CLI does not specify metadata store URI, it uses default metadata store\n      // DynamoDB instead.\n      setStore(new DynamoDBMetadataStore());\n      if (forceCreate) {\n        conf.setBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, true);\n      }\n    }\n\n    if (filesystem \u003d\u003d null) {\n      getStore().initialize(conf);\n    } else {\n      getStore().initialize(filesystem);\n    }\n    LOG.info(\"Metadata store {} is initialized.\", getStore());\n    return getStore();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java"
    }
  }
}