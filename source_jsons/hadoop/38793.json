{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CentralizedOpportunisticContainerAllocator.java",
  "functionName": "allocateContainersPerRequest",
  "functionId": "allocateContainersPerRequest___rmIdentifier-long__appParams-AllocationParams__idCounter-ContainerIdGenerator__blacklist-Set__String____id-ApplicationAttemptId__userName-String__allocations-Map__Resource,List__Allocation______enrichedAsk-EnrichedResourceRequest__maxAllocations-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/CentralizedOpportunisticContainerAllocator.java",
  "functionStartLine": 178,
  "functionEndLine": 241,
  "numCommitsSeen": 1,
  "timeTaken": 827,
  "changeHistory": [
    "fb512f50877438acb01fe6b3ec96c12b4db61694"
  ],
  "changeHistoryShort": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9697. Efficient allocation of Opportunistic containers. Contributed by Abhishek Modi.\n",
      "commitDate": "12/11/19 3:04 AM",
      "commitName": "fb512f50877438acb01fe6b3ec96c12b4db61694",
      "commitAuthor": "Abhishek Modi",
      "diff": "@@ -0,0 +1,64 @@\n+  private int allocateContainersPerRequest(long rmIdentifier,\n+      AllocationParams appParams, ContainerIdGenerator idCounter,\n+      Set\u003cString\u003e blacklist,\n+      ApplicationAttemptId id,\n+      String userName, Map\u003cResource, List\u003cAllocation\u003e\u003e allocations,\n+      EnrichedResourceRequest enrichedAsk, int maxAllocations)\n+      throws YarnException {\n+    ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n+    int totalAllocated \u003d 0;\n+    int maxToAllocate \u003d anyAsk.getNumContainers()\n+        - (allocations.isEmpty() ? 0 :\n+        allocations.get(anyAsk.getCapability()).size());\n+    if (maxAllocations \u003e\u003d 0) {\n+      maxToAllocate \u003d Math.min(maxAllocations, maxToAllocate);\n+    }\n+\n+    // allocate node local\n+    if (maxToAllocate \u003e 0) {\n+      Map\u003cString, AtomicInteger\u003e nodeLocations \u003d enrichedAsk.getNodeMap();\n+      for (Map.Entry\u003cString, AtomicInteger\u003e nodeLocation :\n+          nodeLocations.entrySet()) {\n+        int numContainers \u003d nodeLocation.getValue().get();\n+        numContainers \u003d Math.min(numContainers, maxToAllocate);\n+        List\u003cContainer\u003e allocatedContainers \u003d\n+            allocateNodeLocal(enrichedAsk, nodeLocation.getKey(),\n+                numContainers, rmIdentifier, appParams, idCounter, blacklist,\n+                id, userName, allocations);\n+        totalAllocated +\u003d allocatedContainers.size();\n+        maxToAllocate -\u003d allocatedContainers.size();\n+        // no more containers to allocate\n+        if (maxToAllocate \u003c\u003d 0) {\n+          break;\n+        }\n+      }\n+    }\n+\n+    // if still left, allocate rack local\n+    if (maxToAllocate \u003e 0) {\n+      Map\u003cString, AtomicInteger\u003e rackLocations \u003d enrichedAsk.getRackMap();\n+      for (Map.Entry\u003cString, AtomicInteger\u003e rack : rackLocations.entrySet()) {\n+        int numContainers \u003d rack.getValue().get();\n+        numContainers \u003d Math.min(numContainers, maxToAllocate);\n+        List\u003cContainer\u003e allocatedContainers \u003d\n+            allocateRackLocal(enrichedAsk, rack.getKey(), numContainers,\n+                rmIdentifier, appParams, idCounter, blacklist, id,\n+                userName, allocations);\n+        totalAllocated +\u003d allocatedContainers.size();\n+        maxToAllocate -\u003d allocatedContainers.size();\n+        // no more containers to allocate\n+        if (maxToAllocate \u003c\u003d 0) {\n+          break;\n+        }\n+      }\n+    }\n+\n+    // if still left, try on ANY\n+    if (maxToAllocate \u003e 0) {\n+      List\u003cContainer\u003e allocatedContainers \u003d allocateAny(enrichedAsk,\n+          maxToAllocate, rmIdentifier, appParams, idCounter, blacklist,\n+          id, userName, allocations);\n+      totalAllocated +\u003d allocatedContainers.size();\n+    }\n+    return totalAllocated;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int allocateContainersPerRequest(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      Set\u003cString\u003e blacklist,\n      ApplicationAttemptId id,\n      String userName, Map\u003cResource, List\u003cAllocation\u003e\u003e allocations,\n      EnrichedResourceRequest enrichedAsk, int maxAllocations)\n      throws YarnException {\n    ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n    int totalAllocated \u003d 0;\n    int maxToAllocate \u003d anyAsk.getNumContainers()\n        - (allocations.isEmpty() ? 0 :\n        allocations.get(anyAsk.getCapability()).size());\n    if (maxAllocations \u003e\u003d 0) {\n      maxToAllocate \u003d Math.min(maxAllocations, maxToAllocate);\n    }\n\n    // allocate node local\n    if (maxToAllocate \u003e 0) {\n      Map\u003cString, AtomicInteger\u003e nodeLocations \u003d enrichedAsk.getNodeMap();\n      for (Map.Entry\u003cString, AtomicInteger\u003e nodeLocation :\n          nodeLocations.entrySet()) {\n        int numContainers \u003d nodeLocation.getValue().get();\n        numContainers \u003d Math.min(numContainers, maxToAllocate);\n        List\u003cContainer\u003e allocatedContainers \u003d\n            allocateNodeLocal(enrichedAsk, nodeLocation.getKey(),\n                numContainers, rmIdentifier, appParams, idCounter, blacklist,\n                id, userName, allocations);\n        totalAllocated +\u003d allocatedContainers.size();\n        maxToAllocate -\u003d allocatedContainers.size();\n        // no more containers to allocate\n        if (maxToAllocate \u003c\u003d 0) {\n          break;\n        }\n      }\n    }\n\n    // if still left, allocate rack local\n    if (maxToAllocate \u003e 0) {\n      Map\u003cString, AtomicInteger\u003e rackLocations \u003d enrichedAsk.getRackMap();\n      for (Map.Entry\u003cString, AtomicInteger\u003e rack : rackLocations.entrySet()) {\n        int numContainers \u003d rack.getValue().get();\n        numContainers \u003d Math.min(numContainers, maxToAllocate);\n        List\u003cContainer\u003e allocatedContainers \u003d\n            allocateRackLocal(enrichedAsk, rack.getKey(), numContainers,\n                rmIdentifier, appParams, idCounter, blacklist, id,\n                userName, allocations);\n        totalAllocated +\u003d allocatedContainers.size();\n        maxToAllocate -\u003d allocatedContainers.size();\n        // no more containers to allocate\n        if (maxToAllocate \u003c\u003d 0) {\n          break;\n        }\n      }\n    }\n\n    // if still left, try on ANY\n    if (maxToAllocate \u003e 0) {\n      List\u003cContainer\u003e allocatedContainers \u003d allocateAny(enrichedAsk,\n          maxToAllocate, rmIdentifier, appParams, idCounter, blacklist,\n          id, userName, allocations);\n      totalAllocated +\u003d allocatedContainers.size();\n    }\n    return totalAllocated;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/CentralizedOpportunisticContainerAllocator.java"
    }
  }
}