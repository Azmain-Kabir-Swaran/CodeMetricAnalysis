{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDB.java",
  "functionName": "scheduleOldDBsForEviction",
  "functionId": "scheduleOldDBsForEviction",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java",
  "functionStartLine": 324,
  "functionEndLine": 342,
  "numCommitsSeen": 5,
  "timeTaken": 750,
  "changeHistory": [
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,19 @@\n+  private synchronized void scheduleOldDBsForEviction() {\n+    // keep at least time to live amount of data\n+    long evictionThreshold \u003d computeCurrentCheckMillis(currentTimeMillis()\n+        - getTimeToLive());\n+\n+    LOG.info(\"Scheduling \" + getName() + \" DBs older than \"\n+        + fdf.format(evictionThreshold) + \" for eviction\");\n+    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbs.entrySet().iterator();\n+    while (iterator.hasNext()) {\n+      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n+      // parse this in gmt time\n+      if (entry.getKey() \u003c evictionThreshold) {\n+        LOG.info(\"Scheduling \" + getName() + \" eviction for \"\n+            + fdf.format(entry.getKey()));\n+        iterator.remove();\n+        rollingdbsToEvict.put(entry.getKey(), entry.getValue());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void scheduleOldDBsForEviction() {\n    // keep at least time to live amount of data\n    long evictionThreshold \u003d computeCurrentCheckMillis(currentTimeMillis()\n        - getTimeToLive());\n\n    LOG.info(\"Scheduling \" + getName() + \" DBs older than \"\n        + fdf.format(evictionThreshold) + \" for eviction\");\n    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbs.entrySet().iterator();\n    while (iterator.hasNext()) {\n      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n      // parse this in gmt time\n      if (entry.getKey() \u003c evictionThreshold) {\n        LOG.info(\"Scheduling \" + getName() + \" eviction for \"\n            + fdf.format(entry.getKey()));\n        iterator.remove();\n        rollingdbsToEvict.put(entry.getKey(), entry.getValue());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java"
    }
  }
}