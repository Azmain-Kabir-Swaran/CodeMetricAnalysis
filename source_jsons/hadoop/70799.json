{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockBlobAppendStream.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/BlockBlobAppendStream.java",
  "functionStartLine": 1126,
  "functionEndLine": 1144,
  "numCommitsSeen": 7,
  "timeTaken": 1545,
  "changeHistory": [
    "13eda5000304099d1145631f9be13ce8a00b600d",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9"
  ],
  "changeHistoryShort": {
    "13eda5000304099d1145631f9be13ce8a00b600d": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13eda5000304099d1145631f9be13ce8a00b600d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14520. WASB: Block compaction for Azure Block Blobs.\nContributed by Georgi Chalakov\n",
      "commitDate": "07/09/17 10:35 AM",
      "commitName": "13eda5000304099d1145631f9be13ce8a00b600d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "03/04/17 8:13 PM",
      "commitNameOld": "6eba79232f36b36e0196163adc8fe4219a6b6bf9",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 156.6,
      "commitsBetweenForRepo": 957,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,19 @@\n     public void run() {\n \n-      while (!leaseFreed) {\n-\n-        try {\n-          Thread.sleep(LEASE_RENEWAL_PERIOD);\n-        } catch (InterruptedException ie) {\n-          LOG.debug(\"Appender Renewer thread interrupted\");\n-          Thread.currentThread().interrupt();\n-        }\n-\n-        Log.getLog().debug(\"Attempting to renew append lease on {}\", key);\n-\n-        try {\n-          if (!leaseFreed) {\n-            // Update the blob metadata to renew the append lease\n-            if (!updateBlobAppendMetadata(true, true)) {\n-              LOG.error(\"Unable to re-acquire append lease on the Blob {} \", key);\n-              leaseFreed \u003d true;\n-            }\n-          }\n-        } catch (StorageException ex) {\n-\n-          LOG.debug(\"Lease renewal for Blob : {} encountered \"\n-              + \"Storage Exception : {} Error Code : {}\", key, ex, ex.getErrorCode());\n-\n-          // We swallow the exception here because if the blob metadata is not updated for\n-          // APPEND_LEASE_TIMEOUT period, another thread would be able to detect this and\n-          // continue forward if it needs to append.\n-          leaseFreed \u003d true;\n-        }\n+      try {\n+        command.dump();\n+        long startTime \u003d System.nanoTime();\n+        command.execute();\n+        command.setCompleted();\n+        LOG.debug(\"command finished for {} ms\",\n+            TimeUnit.NANOSECONDS.toMillis(\n+                    System.nanoTime() - startTime));\n+      } catch (InterruptedException ie) {\n+        Thread.currentThread().interrupt();\n+      } catch (Exception ex) {\n+        LOG.debug(\n+                \"Encountered exception during execution of command for Blob :\"\n+                        + \" {} Exception : {}\", key, ex);\n+        firstError.compareAndSet(null, new AzureException(ex));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n\n      try {\n        command.dump();\n        long startTime \u003d System.nanoTime();\n        command.execute();\n        command.setCompleted();\n        LOG.debug(\"command finished for {} ms\",\n            TimeUnit.NANOSECONDS.toMillis(\n                    System.nanoTime() - startTime));\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      } catch (Exception ex) {\n        LOG.debug(\n                \"Encountered exception during execution of command for Blob :\"\n                        + \" {} Exception : {}\", key, ex);\n        firstError.compareAndSet(null, new AzureException(ex));\n      }\n    }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/BlockBlobAppendStream.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "27/07/16 3:50 PM",
      "commitNameOld": "b43de80031d1272e8a08ea5bd31027efe45e9d70",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 92.01,
      "commitsBetweenForRepo": 662,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void run() {\n \n       while (!leaseFreed) {\n \n         try {\n           Thread.sleep(LEASE_RENEWAL_PERIOD);\n         } catch (InterruptedException ie) {\n           LOG.debug(\"Appender Renewer thread interrupted\");\n           Thread.currentThread().interrupt();\n         }\n \n-        Log.debug(\"Attempting to renew append lease on {}\", key);\n+        Log.getLog().debug(\"Attempting to renew append lease on {}\", key);\n \n         try {\n           if (!leaseFreed) {\n             // Update the blob metadata to renew the append lease\n             if (!updateBlobAppendMetadata(true, true)) {\n               LOG.error(\"Unable to re-acquire append lease on the Blob {} \", key);\n               leaseFreed \u003d true;\n             }\n           }\n         } catch (StorageException ex) {\n \n           LOG.debug(\"Lease renewal for Blob : {} encountered \"\n               + \"Storage Exception : {} Error Code : {}\", key, ex, ex.getErrorCode());\n \n           // We swallow the exception here because if the blob metadata is not updated for\n           // APPEND_LEASE_TIMEOUT period, another thread would be able to detect this and\n           // continue forward if it needs to append.\n           leaseFreed \u003d true;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n\n      while (!leaseFreed) {\n\n        try {\n          Thread.sleep(LEASE_RENEWAL_PERIOD);\n        } catch (InterruptedException ie) {\n          LOG.debug(\"Appender Renewer thread interrupted\");\n          Thread.currentThread().interrupt();\n        }\n\n        Log.getLog().debug(\"Attempting to renew append lease on {}\", key);\n\n        try {\n          if (!leaseFreed) {\n            // Update the blob metadata to renew the append lease\n            if (!updateBlobAppendMetadata(true, true)) {\n              LOG.error(\"Unable to re-acquire append lease on the Blob {} \", key);\n              leaseFreed \u003d true;\n            }\n          }\n        } catch (StorageException ex) {\n\n          LOG.debug(\"Lease renewal for Blob : {} encountered \"\n              + \"Storage Exception : {} Error Code : {}\", key, ex, ex.getErrorCode());\n\n          // We swallow the exception here because if the blob metadata is not updated for\n          // APPEND_LEASE_TIMEOUT period, another thread would be able to detect this and\n          // continue forward if it needs to append.\n          leaseFreed \u003d true;\n        }\n      }\n    }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/BlockBlobAppendStream.java",
      "extendedDetails": {}
    },
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12635. Adding Append API support for WASB. Contributed by Dushyanth.\n",
      "commitDate": "18/01/16 9:08 AM",
      "commitName": "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,33 @@\n+    public void run() {\n+\n+      while (!leaseFreed) {\n+\n+        try {\n+          Thread.sleep(LEASE_RENEWAL_PERIOD);\n+        } catch (InterruptedException ie) {\n+          LOG.debug(\"Appender Renewer thread interrupted\");\n+          Thread.currentThread().interrupt();\n+        }\n+\n+        Log.debug(\"Attempting to renew append lease on {}\", key);\n+\n+        try {\n+          if (!leaseFreed) {\n+            // Update the blob metadata to renew the append lease\n+            if (!updateBlobAppendMetadata(true, true)) {\n+              LOG.error(\"Unable to re-acquire append lease on the Blob {} \", key);\n+              leaseFreed \u003d true;\n+            }\n+          }\n+        } catch (StorageException ex) {\n+\n+          LOG.debug(\"Lease renewal for Blob : {} encountered \"\n+              + \"Storage Exception : {} Error Code : {}\", key, ex, ex.getErrorCode());\n+\n+          // We swallow the exception here because if the blob metadata is not updated for\n+          // APPEND_LEASE_TIMEOUT period, another thread would be able to detect this and\n+          // continue forward if it needs to append.\n+          leaseFreed \u003d true;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n\n      while (!leaseFreed) {\n\n        try {\n          Thread.sleep(LEASE_RENEWAL_PERIOD);\n        } catch (InterruptedException ie) {\n          LOG.debug(\"Appender Renewer thread interrupted\");\n          Thread.currentThread().interrupt();\n        }\n\n        Log.debug(\"Attempting to renew append lease on {}\", key);\n\n        try {\n          if (!leaseFreed) {\n            // Update the blob metadata to renew the append lease\n            if (!updateBlobAppendMetadata(true, true)) {\n              LOG.error(\"Unable to re-acquire append lease on the Blob {} \", key);\n              leaseFreed \u003d true;\n            }\n          }\n        } catch (StorageException ex) {\n\n          LOG.debug(\"Lease renewal for Blob : {} encountered \"\n              + \"Storage Exception : {} Error Code : {}\", key, ex, ex.getErrorCode());\n\n          // We swallow the exception here because if the blob metadata is not updated for\n          // APPEND_LEASE_TIMEOUT period, another thread would be able to detect this and\n          // continue forward if it needs to append.\n          leaseFreed \u003d true;\n        }\n      }\n    }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/BlockBlobAppendStream.java"
    }
  }
}