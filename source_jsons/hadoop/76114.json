{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2OutputStream.java",
  "functionName": "endBlock",
  "functionId": "endBlock",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
  "functionStartLine": 787,
  "functionEndLine": 830,
  "numCommitsSeen": 7,
  "timeTaken": 1070,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void endBlock() throws IOException {\n    this.blockCRC \u003d this.crc.getFinalCRC();\n    this.combinedCRC \u003d (this.combinedCRC \u003c\u003c 1) | (this.combinedCRC \u003e\u003e\u003e 31);\n    this.combinedCRC ^\u003d this.blockCRC;\n\n    // empty block at end of file\n    if (this.last \u003d\u003d -1) {\n      return;\n    }\n\n    /* sort the block and establish posn of original string */\n    blockSort();\n\n    /*\n    * A 6-byte block header, the value chosen arbitrarily as 0x314159265359\n    * :-). A 32 bit value does not really give a strong enough guarantee\n    * that the value will not appear by chance in the compressed\n    * datastream. Worst-case probability of this event, for a 900k block,\n    * is about 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48\n    * bits. For a compressed file of size 100Gb -- about 100000 blocks --\n    * only a 48-bit marker will do. NB: normal compression/ decompression\n    * donot rely on these statistical properties. They are only important\n    * when trying to recover blocks from damaged files.\n    */\n    bsPutUByte(0x31);\n    bsPutUByte(0x41);\n    bsPutUByte(0x59);\n    bsPutUByte(0x26);\n    bsPutUByte(0x53);\n    bsPutUByte(0x59);\n\n    /* Now the block\u0027s CRC, so it is in a known place. */\n    bsPutInt(this.blockCRC);\n\n    /* Now a single bit indicating randomisation. */\n    if (this.blockRandomised) {\n      bsW(1, 1);\n    } else {\n      bsW(1, 0);\n    }\n\n    /* Finally, block\u0027s contents proper. */\n    moveToFrontCodeAndSend();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void endBlock() throws IOException {\n    this.blockCRC \u003d this.crc.getFinalCRC();\n    this.combinedCRC \u003d (this.combinedCRC \u003c\u003c 1) | (this.combinedCRC \u003e\u003e\u003e 31);\n    this.combinedCRC ^\u003d this.blockCRC;\n\n    // empty block at end of file\n    if (this.last \u003d\u003d -1) {\n      return;\n    }\n\n    /* sort the block and establish posn of original string */\n    blockSort();\n\n    /*\n    * A 6-byte block header, the value chosen arbitrarily as 0x314159265359\n    * :-). A 32 bit value does not really give a strong enough guarantee\n    * that the value will not appear by chance in the compressed\n    * datastream. Worst-case probability of this event, for a 900k block,\n    * is about 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48\n    * bits. For a compressed file of size 100Gb -- about 100000 blocks --\n    * only a 48-bit marker will do. NB: normal compression/ decompression\n    * donot rely on these statistical properties. They are only important\n    * when trying to recover blocks from damaged files.\n    */\n    bsPutUByte(0x31);\n    bsPutUByte(0x41);\n    bsPutUByte(0x59);\n    bsPutUByte(0x26);\n    bsPutUByte(0x53);\n    bsPutUByte(0x59);\n\n    /* Now the block\u0027s CRC, so it is in a known place. */\n    bsPutInt(this.blockCRC);\n\n    /* Now a single bit indicating randomisation. */\n    if (this.blockRandomised) {\n      bsW(1, 1);\n    } else {\n      bsW(1, 0);\n    }\n\n    /* Finally, block\u0027s contents proper. */\n    moveToFrontCodeAndSend();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void endBlock() throws IOException {\n    this.blockCRC \u003d this.crc.getFinalCRC();\n    this.combinedCRC \u003d (this.combinedCRC \u003c\u003c 1) | (this.combinedCRC \u003e\u003e\u003e 31);\n    this.combinedCRC ^\u003d this.blockCRC;\n\n    // empty block at end of file\n    if (this.last \u003d\u003d -1) {\n      return;\n    }\n\n    /* sort the block and establish posn of original string */\n    blockSort();\n\n    /*\n    * A 6-byte block header, the value chosen arbitrarily as 0x314159265359\n    * :-). A 32 bit value does not really give a strong enough guarantee\n    * that the value will not appear by chance in the compressed\n    * datastream. Worst-case probability of this event, for a 900k block,\n    * is about 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48\n    * bits. For a compressed file of size 100Gb -- about 100000 blocks --\n    * only a 48-bit marker will do. NB: normal compression/ decompression\n    * donot rely on these statistical properties. They are only important\n    * when trying to recover blocks from damaged files.\n    */\n    bsPutUByte(0x31);\n    bsPutUByte(0x41);\n    bsPutUByte(0x59);\n    bsPutUByte(0x26);\n    bsPutUByte(0x53);\n    bsPutUByte(0x59);\n\n    /* Now the block\u0027s CRC, so it is in a known place. */\n    bsPutInt(this.blockCRC);\n\n    /* Now a single bit indicating randomisation. */\n    if (this.blockRandomised) {\n      bsW(1, 1);\n    } else {\n      bsW(1, 0);\n    }\n\n    /* Finally, block\u0027s contents proper. */\n    moveToFrontCodeAndSend();\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,44 @@\n+  private void endBlock() throws IOException {\n+    this.blockCRC \u003d this.crc.getFinalCRC();\n+    this.combinedCRC \u003d (this.combinedCRC \u003c\u003c 1) | (this.combinedCRC \u003e\u003e\u003e 31);\n+    this.combinedCRC ^\u003d this.blockCRC;\n+\n+    // empty block at end of file\n+    if (this.last \u003d\u003d -1) {\n+      return;\n+    }\n+\n+    /* sort the block and establish posn of original string */\n+    blockSort();\n+\n+    /*\n+    * A 6-byte block header, the value chosen arbitrarily as 0x314159265359\n+    * :-). A 32 bit value does not really give a strong enough guarantee\n+    * that the value will not appear by chance in the compressed\n+    * datastream. Worst-case probability of this event, for a 900k block,\n+    * is about 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48\n+    * bits. For a compressed file of size 100Gb -- about 100000 blocks --\n+    * only a 48-bit marker will do. NB: normal compression/ decompression\n+    * donot rely on these statistical properties. They are only important\n+    * when trying to recover blocks from damaged files.\n+    */\n+    bsPutUByte(0x31);\n+    bsPutUByte(0x41);\n+    bsPutUByte(0x59);\n+    bsPutUByte(0x26);\n+    bsPutUByte(0x53);\n+    bsPutUByte(0x59);\n+\n+    /* Now the block\u0027s CRC, so it is in a known place. */\n+    bsPutInt(this.blockCRC);\n+\n+    /* Now a single bit indicating randomisation. */\n+    if (this.blockRandomised) {\n+      bsW(1, 1);\n+    } else {\n+      bsW(1, 0);\n+    }\n+\n+    /* Finally, block\u0027s contents proper. */\n+    moveToFrontCodeAndSend();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void endBlock() throws IOException {\n    this.blockCRC \u003d this.crc.getFinalCRC();\n    this.combinedCRC \u003d (this.combinedCRC \u003c\u003c 1) | (this.combinedCRC \u003e\u003e\u003e 31);\n    this.combinedCRC ^\u003d this.blockCRC;\n\n    // empty block at end of file\n    if (this.last \u003d\u003d -1) {\n      return;\n    }\n\n    /* sort the block and establish posn of original string */\n    blockSort();\n\n    /*\n    * A 6-byte block header, the value chosen arbitrarily as 0x314159265359\n    * :-). A 32 bit value does not really give a strong enough guarantee\n    * that the value will not appear by chance in the compressed\n    * datastream. Worst-case probability of this event, for a 900k block,\n    * is about 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48\n    * bits. For a compressed file of size 100Gb -- about 100000 blocks --\n    * only a 48-bit marker will do. NB: normal compression/ decompression\n    * donot rely on these statistical properties. They are only important\n    * when trying to recover blocks from damaged files.\n    */\n    bsPutUByte(0x31);\n    bsPutUByte(0x41);\n    bsPutUByte(0x59);\n    bsPutUByte(0x26);\n    bsPutUByte(0x53);\n    bsPutUByte(0x59);\n\n    /* Now the block\u0027s CRC, so it is in a known place. */\n    bsPutInt(this.blockCRC);\n\n    /* Now a single bit indicating randomisation. */\n    if (this.blockRandomised) {\n      bsW(1, 1);\n    } else {\n      bsW(1, 0);\n    }\n\n    /* Finally, block\u0027s contents proper. */\n    moveToFrontCodeAndSend();\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
    }
  }
}