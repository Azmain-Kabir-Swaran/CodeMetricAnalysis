{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Router.java",
  "functionName": "createNamenodeHeartbeatServices",
  "functionId": "createNamenodeHeartbeatServices",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
  "functionStartLine": 505,
  "functionEndLine": 546,
  "numCommitsSeen": 40,
  "timeTaken": 3698,
  "changeHistory": [
    "9a9fbbe145432136d85d2d2e133364c7e79e65e1",
    "fcabc8f0e4097cce934308fdd28cd3bcdbb66877",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "58ea2d7a65ccd8b7775021bae1d24b9e5561e67b",
    "d8c81073320320a019fb3868be4f06f46aebea43"
  ],
  "changeHistoryShort": {
    "9a9fbbe145432136d85d2d2e133364c7e79e65e1": "Ybodychange",
    "fcabc8f0e4097cce934308fdd28cd3bcdbb66877": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Ymultichange(Yfilerename,Ybodychange)",
    "58ea2d7a65ccd8b7775021bae1d24b9e5561e67b": "Yrename",
    "d8c81073320320a019fb3868be4f06f46aebea43": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a9fbbe145432136d85d2d2e133364c7e79e65e1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14351. RBF: Optimize configuration item resolving for monitor namenode. Contributed by He Xiaoqiao and Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "9a9fbbe145432136d85d2d2e133364c7e79e65e1",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "fcabc8f0e4097cce934308fdd28cd3bcdbb66877",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,42 @@\n       createNamenodeHeartbeatServices() {\n \n     Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n \n     if (conf.getBoolean(\n         RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n         RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n       // Create a local heartbeat service\n       NamenodeHeartbeatService localHeartbeatService \u003d\n           createLocalNamenodeHeartbeatService();\n       if (localHeartbeatService !\u003d null) {\n         String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n         ret.put(nnDesc, localHeartbeatService);\n       }\n     }\n \n     // Create heartbeat services for a list specified by the admin\n-    String namenodes \u003d this.conf.get(\n+    Collection\u003cString\u003e namenodes \u003d this.conf.getTrimmedStringCollection(\n         RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n-    if (namenodes !\u003d null) {\n-      for (String namenode : namenodes.split(\",\")) {\n-        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n-        String nsId \u003d null;\n-        String nnId \u003d null;\n-        if (namenodeSplit.length \u003d\u003d 2) {\n-          nsId \u003d namenodeSplit[0];\n-          nnId \u003d namenodeSplit[1];\n-        } else if (namenodeSplit.length \u003d\u003d 1) {\n-          nsId \u003d namenode;\n-        } else {\n-          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n-        }\n-        if (nsId !\u003d null) {\n-          NamenodeHeartbeatService heartbeatService \u003d\n-              createNamenodeHeartbeatService(nsId, nnId);\n-          if (heartbeatService !\u003d null) {\n-            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n-          }\n+    for (String namenode : namenodes) {\n+      String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n+      String nsId \u003d null;\n+      String nnId \u003d null;\n+      if (namenodeSplit.length \u003d\u003d 2) {\n+        nsId \u003d namenodeSplit[0];\n+        nnId \u003d namenodeSplit[1];\n+      } else if (namenodeSplit.length \u003d\u003d 1) {\n+        nsId \u003d namenode;\n+      } else {\n+        LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n+      }\n+      if (nsId !\u003d null) {\n+        NamenodeHeartbeatService heartbeatService \u003d\n+            createNamenodeHeartbeatService(nsId, nnId);\n+        if (heartbeatService !\u003d null) {\n+          ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n         }\n       }\n     }\n \n     return ret.values();\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createNamenodeHeartbeatServices() {\n\n    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n\n    if (conf.getBoolean(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n      // Create a local heartbeat service\n      NamenodeHeartbeatService localHeartbeatService \u003d\n          createLocalNamenodeHeartbeatService();\n      if (localHeartbeatService !\u003d null) {\n        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n        ret.put(nnDesc, localHeartbeatService);\n      }\n    }\n\n    // Create heartbeat services for a list specified by the admin\n    Collection\u003cString\u003e namenodes \u003d this.conf.getTrimmedStringCollection(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n    for (String namenode : namenodes) {\n      String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n      String nsId \u003d null;\n      String nnId \u003d null;\n      if (namenodeSplit.length \u003d\u003d 2) {\n        nsId \u003d namenodeSplit[0];\n        nnId \u003d namenodeSplit[1];\n      } else if (namenodeSplit.length \u003d\u003d 1) {\n        nsId \u003d namenode;\n      } else {\n        LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n      }\n      if (nsId !\u003d null) {\n        NamenodeHeartbeatService heartbeatService \u003d\n            createNamenodeHeartbeatService(nsId, nnId);\n        if (heartbeatService !\u003d null) {\n          ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n        }\n      }\n    }\n\n    return ret.values();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
      "extendedDetails": {}
    },
    "fcabc8f0e4097cce934308fdd28cd3bcdbb66877": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14335. RBF: Fix heartbeat typos in the Router. Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "fcabc8f0e4097cce934308fdd28cd3bcdbb66877",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "b8bcbd0ed2d9552ca4e5a4b429b8852a5932407c",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n       createNamenodeHeartbeatServices() {\n \n     Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n \n     if (conf.getBoolean(\n         RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n         RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n-      // Create a local heartbet service\n+      // Create a local heartbeat service\n       NamenodeHeartbeatService localHeartbeatService \u003d\n-          createLocalNamenodeHearbeatService();\n+          createLocalNamenodeHeartbeatService();\n       if (localHeartbeatService !\u003d null) {\n         String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n         ret.put(nnDesc, localHeartbeatService);\n       }\n     }\n \n     // Create heartbeat services for a list specified by the admin\n     String namenodes \u003d this.conf.get(\n         RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n     if (namenodes !\u003d null) {\n       for (String namenode : namenodes.split(\",\")) {\n         String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n         String nsId \u003d null;\n         String nnId \u003d null;\n         if (namenodeSplit.length \u003d\u003d 2) {\n           nsId \u003d namenodeSplit[0];\n           nnId \u003d namenodeSplit[1];\n         } else if (namenodeSplit.length \u003d\u003d 1) {\n           nsId \u003d namenode;\n         } else {\n           LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n         }\n         if (nsId !\u003d null) {\n           NamenodeHeartbeatService heartbeatService \u003d\n-              createNamenodeHearbeatService(nsId, nnId);\n+              createNamenodeHeartbeatService(nsId, nnId);\n           if (heartbeatService !\u003d null) {\n             ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n           }\n         }\n       }\n     }\n \n     return ret.values();\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createNamenodeHeartbeatServices() {\n\n    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n\n    if (conf.getBoolean(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n      // Create a local heartbeat service\n      NamenodeHeartbeatService localHeartbeatService \u003d\n          createLocalNamenodeHeartbeatService();\n      if (localHeartbeatService !\u003d null) {\n        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n        ret.put(nnDesc, localHeartbeatService);\n      }\n    }\n\n    // Create heartbeat services for a list specified by the admin\n    String namenodes \u003d this.conf.get(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n    if (namenodes !\u003d null) {\n      for (String namenode : namenodes.split(\",\")) {\n        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n        String nsId \u003d null;\n        String nnId \u003d null;\n        if (namenodeSplit.length \u003d\u003d 2) {\n          nsId \u003d namenodeSplit[0];\n          nnId \u003d namenodeSplit[1];\n        } else if (namenodeSplit.length \u003d\u003d 1) {\n          nsId \u003d namenode;\n        } else {\n          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n        }\n        if (nsId !\u003d null) {\n          NamenodeHeartbeatService heartbeatService \u003d\n              createNamenodeHeartbeatService(nsId, nnId);\n          if (heartbeatService !\u003d null) {\n            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n          }\n        }\n      }\n    }\n\n    return ret.values();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
          "commitDate": "19/03/18 10:13 PM",
          "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthor": "weiy",
          "commitDateOld": "19/03/18 5:19 PM",
          "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.2,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n       createNamenodeHeartbeatServices() {\n \n     Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n \n     if (conf.getBoolean(\n-        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n-        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n+        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n+        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n       // Create a local heartbet service\n       NamenodeHeartbeatService localHeartbeatService \u003d\n           createLocalNamenodeHearbeatService();\n       if (localHeartbeatService !\u003d null) {\n         String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n         ret.put(nnDesc, localHeartbeatService);\n       }\n     }\n \n     // Create heartbeat services for a list specified by the admin\n     String namenodes \u003d this.conf.get(\n-        DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n+        RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n     if (namenodes !\u003d null) {\n       for (String namenode : namenodes.split(\",\")) {\n         String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n         String nsId \u003d null;\n         String nnId \u003d null;\n         if (namenodeSplit.length \u003d\u003d 2) {\n           nsId \u003d namenodeSplit[0];\n           nnId \u003d namenodeSplit[1];\n         } else if (namenodeSplit.length \u003d\u003d 1) {\n           nsId \u003d namenode;\n         } else {\n           LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n         }\n         if (nsId !\u003d null) {\n           NamenodeHeartbeatService heartbeatService \u003d\n               createNamenodeHearbeatService(nsId, nnId);\n           if (heartbeatService !\u003d null) {\n             ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n           }\n         }\n       }\n     }\n \n     return ret.values();\n   }\n\\ No newline at end of file\n",
          "actualSource": "      createNamenodeHeartbeatServices() {\n\n    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n\n    if (conf.getBoolean(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n      // Create a local heartbet service\n      NamenodeHeartbeatService localHeartbeatService \u003d\n          createLocalNamenodeHearbeatService();\n      if (localHeartbeatService !\u003d null) {\n        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n        ret.put(nnDesc, localHeartbeatService);\n      }\n    }\n\n    // Create heartbeat services for a list specified by the admin\n    String namenodes \u003d this.conf.get(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n    if (namenodes !\u003d null) {\n      for (String namenode : namenodes.split(\",\")) {\n        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n        String nsId \u003d null;\n        String nnId \u003d null;\n        if (namenodeSplit.length \u003d\u003d 2) {\n          nsId \u003d namenodeSplit[0];\n          nnId \u003d namenodeSplit[1];\n        } else if (namenodeSplit.length \u003d\u003d 1) {\n          nsId \u003d namenode;\n        } else {\n          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n        }\n        if (nsId !\u003d null) {\n          NamenodeHeartbeatService heartbeatService \u003d\n              createNamenodeHearbeatService(nsId, nnId);\n          if (heartbeatService !\u003d null) {\n            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n          }\n        }\n      }\n    }\n\n    return ret.values();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
          "commitDate": "19/03/18 10:13 PM",
          "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthor": "weiy",
          "commitDateOld": "19/03/18 5:19 PM",
          "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.2,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n       createNamenodeHeartbeatServices() {\n \n     Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n \n     if (conf.getBoolean(\n-        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n-        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n+        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n+        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n       // Create a local heartbet service\n       NamenodeHeartbeatService localHeartbeatService \u003d\n           createLocalNamenodeHearbeatService();\n       if (localHeartbeatService !\u003d null) {\n         String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n         ret.put(nnDesc, localHeartbeatService);\n       }\n     }\n \n     // Create heartbeat services for a list specified by the admin\n     String namenodes \u003d this.conf.get(\n-        DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n+        RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n     if (namenodes !\u003d null) {\n       for (String namenode : namenodes.split(\",\")) {\n         String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n         String nsId \u003d null;\n         String nnId \u003d null;\n         if (namenodeSplit.length \u003d\u003d 2) {\n           nsId \u003d namenodeSplit[0];\n           nnId \u003d namenodeSplit[1];\n         } else if (namenodeSplit.length \u003d\u003d 1) {\n           nsId \u003d namenode;\n         } else {\n           LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n         }\n         if (nsId !\u003d null) {\n           NamenodeHeartbeatService heartbeatService \u003d\n               createNamenodeHearbeatService(nsId, nnId);\n           if (heartbeatService !\u003d null) {\n             ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n           }\n         }\n       }\n     }\n \n     return ret.values();\n   }\n\\ No newline at end of file\n",
          "actualSource": "      createNamenodeHeartbeatServices() {\n\n    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n\n    if (conf.getBoolean(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n        RBFConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n      // Create a local heartbet service\n      NamenodeHeartbeatService localHeartbeatService \u003d\n          createLocalNamenodeHearbeatService();\n      if (localHeartbeatService !\u003d null) {\n        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n        ret.put(nnDesc, localHeartbeatService);\n      }\n    }\n\n    // Create heartbeat services for a list specified by the admin\n    String namenodes \u003d this.conf.get(\n        RBFConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n    if (namenodes !\u003d null) {\n      for (String namenode : namenodes.split(\",\")) {\n        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n        String nsId \u003d null;\n        String nnId \u003d null;\n        if (namenodeSplit.length \u003d\u003d 2) {\n          nsId \u003d namenodeSplit[0];\n          nnId \u003d namenodeSplit[1];\n        } else if (namenodeSplit.length \u003d\u003d 1) {\n          nsId \u003d namenode;\n        } else {\n          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n        }\n        if (nsId !\u003d null) {\n          NamenodeHeartbeatService heartbeatService \u003d\n              createNamenodeHearbeatService(nsId, nnId);\n          if (heartbeatService !\u003d null) {\n            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n          }\n        }\n      }\n    }\n\n    return ret.values();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
          "extendedDetails": {}
        }
      ]
    },
    "58ea2d7a65ccd8b7775021bae1d24b9e5561e67b": {
      "type": "Yrename",
      "commitMessage": "HDFS-13214. RBF: Complete document of Router configuration. Contributed by Yiqun Lin.\n",
      "commitDate": "06/03/18 11:26 PM",
      "commitName": "58ea2d7a65ccd8b7775021bae1d24b9e5561e67b",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "29/01/18 8:12 PM",
      "commitNameOld": "dbb9dded33b3cff3b630e98300d30515a9d1eec4",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 36.14,
      "commitsBetweenForRepo": 248,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n-      createNamenodeHearbeatServices() {\n+      createNamenodeHeartbeatServices() {\n \n     Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n \n     if (conf.getBoolean(\n         DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n         DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n       // Create a local heartbet service\n       NamenodeHeartbeatService localHeartbeatService \u003d\n           createLocalNamenodeHearbeatService();\n       if (localHeartbeatService !\u003d null) {\n         String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n         ret.put(nnDesc, localHeartbeatService);\n       }\n     }\n \n     // Create heartbeat services for a list specified by the admin\n     String namenodes \u003d this.conf.get(\n         DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n     if (namenodes !\u003d null) {\n       for (String namenode : namenodes.split(\",\")) {\n         String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n         String nsId \u003d null;\n         String nnId \u003d null;\n         if (namenodeSplit.length \u003d\u003d 2) {\n           nsId \u003d namenodeSplit[0];\n           nnId \u003d namenodeSplit[1];\n         } else if (namenodeSplit.length \u003d\u003d 1) {\n           nsId \u003d namenode;\n         } else {\n           LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n         }\n         if (nsId !\u003d null) {\n           NamenodeHeartbeatService heartbeatService \u003d\n               createNamenodeHearbeatService(nsId, nnId);\n           if (heartbeatService !\u003d null) {\n             ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n           }\n         }\n       }\n     }\n \n     return ret.values();\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createNamenodeHeartbeatServices() {\n\n    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n\n    if (conf.getBoolean(\n        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n      // Create a local heartbet service\n      NamenodeHeartbeatService localHeartbeatService \u003d\n          createLocalNamenodeHearbeatService();\n      if (localHeartbeatService !\u003d null) {\n        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n        ret.put(nnDesc, localHeartbeatService);\n      }\n    }\n\n    // Create heartbeat services for a list specified by the admin\n    String namenodes \u003d this.conf.get(\n        DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n    if (namenodes !\u003d null) {\n      for (String namenode : namenodes.split(\",\")) {\n        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n        String nsId \u003d null;\n        String nnId \u003d null;\n        if (namenodeSplit.length \u003d\u003d 2) {\n          nsId \u003d namenodeSplit[0];\n          nnId \u003d namenodeSplit[1];\n        } else if (namenodeSplit.length \u003d\u003d 1) {\n          nsId \u003d namenode;\n        } else {\n          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n        }\n        if (nsId !\u003d null) {\n          NamenodeHeartbeatService heartbeatService \u003d\n              createNamenodeHearbeatService(nsId, nnId);\n          if (heartbeatService !\u003d null) {\n            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n          }\n        }\n      }\n    }\n\n    return ret.values();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java",
      "extendedDetails": {
        "oldValue": "createNamenodeHearbeatServices",
        "newValue": "createNamenodeHeartbeatServices"
      }
    },
    "d8c81073320320a019fb3868be4f06f46aebea43": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11826. Federation Namenode Heartbeat. Contributed by Inigo Goiri.\n\n(cherry picked from commit 928f8dab52191e733984d37f47b69719ccf11313)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "d8c81073320320a019fb3868be4f06f46aebea43",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,44 @@\n+      createNamenodeHearbeatServices() {\n+\n+    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n+\n+    if (conf.getBoolean(\n+        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n+        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n+      // Create a local heartbet service\n+      NamenodeHeartbeatService localHeartbeatService \u003d\n+          createLocalNamenodeHearbeatService();\n+      if (localHeartbeatService !\u003d null) {\n+        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n+        ret.put(nnDesc, localHeartbeatService);\n+      }\n+    }\n+\n+    // Create heartbeat services for a list specified by the admin\n+    String namenodes \u003d this.conf.get(\n+        DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n+    if (namenodes !\u003d null) {\n+      for (String namenode : namenodes.split(\",\")) {\n+        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n+        String nsId \u003d null;\n+        String nnId \u003d null;\n+        if (namenodeSplit.length \u003d\u003d 2) {\n+          nsId \u003d namenodeSplit[0];\n+          nnId \u003d namenodeSplit[1];\n+        } else if (namenodeSplit.length \u003d\u003d 1) {\n+          nsId \u003d namenode;\n+        } else {\n+          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n+        }\n+        if (nsId !\u003d null) {\n+          NamenodeHeartbeatService heartbeatService \u003d\n+              createNamenodeHearbeatService(nsId, nnId);\n+          if (heartbeatService !\u003d null) {\n+            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n+          }\n+        }\n+      }\n+    }\n+\n+    return ret.values();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      createNamenodeHearbeatServices() {\n\n    Map\u003cString, NamenodeHeartbeatService\u003e ret \u003d new HashMap\u003c\u003e();\n\n    if (conf.getBoolean(\n        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE,\n        DFSConfigKeys.DFS_ROUTER_MONITOR_LOCAL_NAMENODE_DEFAULT)) {\n      // Create a local heartbet service\n      NamenodeHeartbeatService localHeartbeatService \u003d\n          createLocalNamenodeHearbeatService();\n      if (localHeartbeatService !\u003d null) {\n        String nnDesc \u003d localHeartbeatService.getNamenodeDesc();\n        ret.put(nnDesc, localHeartbeatService);\n      }\n    }\n\n    // Create heartbeat services for a list specified by the admin\n    String namenodes \u003d this.conf.get(\n        DFSConfigKeys.DFS_ROUTER_MONITOR_NAMENODE);\n    if (namenodes !\u003d null) {\n      for (String namenode : namenodes.split(\",\")) {\n        String[] namenodeSplit \u003d namenode.split(\"\\\\.\");\n        String nsId \u003d null;\n        String nnId \u003d null;\n        if (namenodeSplit.length \u003d\u003d 2) {\n          nsId \u003d namenodeSplit[0];\n          nnId \u003d namenodeSplit[1];\n        } else if (namenodeSplit.length \u003d\u003d 1) {\n          nsId \u003d namenode;\n        } else {\n          LOG.error(\"Wrong Namenode to monitor: {}\", namenode);\n        }\n        if (nsId !\u003d null) {\n          NamenodeHeartbeatService heartbeatService \u003d\n              createNamenodeHearbeatService(nsId, nnId);\n          if (heartbeatService !\u003d null) {\n            ret.put(heartbeatService.getNamenodeDesc(), heartbeatService);\n          }\n        }\n      }\n    }\n\n    return ret.values();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/Router.java"
    }
  }
}