{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeAdminManager.java",
  "functionName": "isSufficient",
  "functionId": "isSufficient___block-BlockInfo__bc-BlockCollection__numberReplicas-NumberReplicas__isDecommission-boolean__isMaintenance-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
  "functionStartLine": 312,
  "functionEndLine": 354,
  "numCommitsSeen": 74,
  "timeTaken": 6010,
  "changeHistory": [
    "c93cb6790e0f1c64efd03d859f907a0522010894",
    "f9a7b442fdd7855e3c7b28e19a12580df48d92bf",
    "79df1e750ef558afed6d166ce225a23061b36aed",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
    "8c84a2a93c22a93b4ff46dd917f6efb995675fbd",
    "34cd7cd76505d01ec251e30837c94ab03319a0c1"
  ],
  "changeHistoryShort": {
    "c93cb6790e0f1c64efd03d859f907a0522010894": "Ymodifierchange",
    "f9a7b442fdd7855e3c7b28e19a12580df48d92bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "79df1e750ef558afed6d166ce225a23061b36aed": "Yfilerename",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": "Ymultichange(Yparameterchange,Ybodychange)",
    "8c84a2a93c22a93b4ff46dd917f6efb995675fbd": "Ybodychange",
    "34cd7cd76505d01ec251e30837c94ab03319a0c1": "Ybodychange"
  },
  "changeHistoryDetails": {
    "c93cb6790e0f1c64efd03d859f907a0522010894": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-14854. Create improved decommission monitor implementation. Contributed by Stephen O\u0027Donnell.\n\nReviewed-by: Inigo Goiri \u003cinigoiri@apache.org\u003e\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "10/12/19 5:16 PM",
      "commitName": "c93cb6790e0f1c64efd03d859f907a0522010894",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "19/10/19 5:40 PM",
      "commitNameOld": "447f46d9628db54e77f88e2d109587cc7dfd6154",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 52.02,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n-  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n+  protected boolean isSufficient(BlockInfo block, BlockCollection bc,\n                                NumberReplicas numberReplicas,\n                                boolean isDecommission,\n                                boolean isMaintenance) {\n     if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n       // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n     final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n         numberReplicas);\n     final int numLive \u003d numberReplicas.liveReplicas();\n \n     // Block is under-replicated\n     LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n         numLive);\n     if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n     if (isMaintenance\n       \u0026\u0026 numLive \u003e\u003d blockManager.getMinReplicationToBeInMaintenance()) {\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean isSufficient(BlockInfo block, BlockCollection bc,\n                               NumberReplicas numberReplicas,\n                               boolean isDecommission,\n                               boolean isMaintenance) {\n    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n        numberReplicas);\n    final int numLive \u003d numberReplicas.liveReplicas();\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n        numLive);\n    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    if (isMaintenance\n      \u0026\u0026 numLive \u003e\u003d blockManager.getMinReplicationToBeInMaintenance()) {\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "f9a7b442fdd7855e3c7b28e19a12580df48d92bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14465. When the Block expected replications is larger than the number of DataNodes, entering maintenance will never exit. Contributed by Yicong Cai.\n",
      "commitDate": "17/06/19 3:18 PM",
      "commitName": "f9a7b442fdd7855e3c7b28e19a12580df48d92bf",
      "commitAuthor": "Wei-Chiu Chuang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14465. When the Block expected replications is larger than the number of DataNodes, entering maintenance will never exit. Contributed by Yicong Cai.\n",
          "commitDate": "17/06/19 3:18 PM",
          "commitName": "f9a7b442fdd7855e3c7b28e19a12580df48d92bf",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "11/01/19 10:54 AM",
          "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 157.14,
          "commitsBetweenForRepo": 1107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,43 @@\n   private boolean isSufficient(BlockInfo block, BlockCollection bc,\n-      NumberReplicas numberReplicas, boolean isDecommission) {\n+                               NumberReplicas numberReplicas,\n+                               boolean isDecommission,\n+                               boolean isMaintenance) {\n     if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n       // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n     final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n         numberReplicas);\n     final int numLive \u003d numberReplicas.liveReplicas();\n \n     // Block is under-replicated\n     LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n         numLive);\n     if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n+    if (isMaintenance\n+      \u0026\u0026 numLive \u003e\u003d blockManager.getMinReplicationToBeInMaintenance()) {\n+      return true;\n+    }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n                               NumberReplicas numberReplicas,\n                               boolean isDecommission,\n                               boolean isMaintenance) {\n    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n        numberReplicas);\n    final int numLive \u003d numberReplicas.liveReplicas();\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n        numLive);\n    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    if (isMaintenance\n      \u0026\u0026 numLive \u003e\u003d blockManager.getMinReplicationToBeInMaintenance()) {\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
          "extendedDetails": {
            "oldValue": "[block-BlockInfo, bc-BlockCollection, numberReplicas-NumberReplicas, isDecommission-boolean]",
            "newValue": "[block-BlockInfo, bc-BlockCollection, numberReplicas-NumberReplicas, isDecommission-boolean, isMaintenance-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14465. When the Block expected replications is larger than the number of DataNodes, entering maintenance will never exit. Contributed by Yicong Cai.\n",
          "commitDate": "17/06/19 3:18 PM",
          "commitName": "f9a7b442fdd7855e3c7b28e19a12580df48d92bf",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "11/01/19 10:54 AM",
          "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 157.14,
          "commitsBetweenForRepo": 1107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,43 @@\n   private boolean isSufficient(BlockInfo block, BlockCollection bc,\n-      NumberReplicas numberReplicas, boolean isDecommission) {\n+                               NumberReplicas numberReplicas,\n+                               boolean isDecommission,\n+                               boolean isMaintenance) {\n     if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n       // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n     final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n         numberReplicas);\n     final int numLive \u003d numberReplicas.liveReplicas();\n \n     // Block is under-replicated\n     LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n         numLive);\n     if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n+    if (isMaintenance\n+      \u0026\u0026 numLive \u003e\u003d blockManager.getMinReplicationToBeInMaintenance()) {\n+      return true;\n+    }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n                               NumberReplicas numberReplicas,\n                               boolean isDecommission,\n                               boolean isMaintenance) {\n    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n        numberReplicas);\n    final int numLive \u003d numberReplicas.liveReplicas();\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n        numLive);\n    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    if (isMaintenance\n      \u0026\u0026 numLive \u003e\u003d blockManager.getMinReplicationToBeInMaintenance()) {\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "79df1e750ef558afed6d166ce225a23061b36aed": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9388. Decommission related code to support Maintenance State for datanodes.\n",
      "commitDate": "02/08/17 2:22 PM",
      "commitName": "79df1e750ef558afed6d166ce225a23061b36aed",
      "commitAuthor": "Manoj Govindassamy",
      "commitDateOld": "02/08/17 12:12 PM",
      "commitNameOld": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n      NumberReplicas numberReplicas, boolean isDecommission) {\n    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n        numberReplicas);\n    final int numLive \u003d numberReplicas.liveReplicas();\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n        numLive);\n    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java"
      }
    },
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
      "commitDate": "17/10/16 5:45 PM",
      "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthor": "Ming Ma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
          "commitDate": "17/10/16 5:45 PM",
          "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "13/10/16 11:52 AM",
          "commitNameOld": "332a61fd74fd2a9874319232c583ab5d2c53ff03",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 4.25,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   private boolean isSufficient(BlockInfo block, BlockCollection bc,\n-      NumberReplicas numberReplicas) {\n-    final int numExpected \u003d blockManager.getExpectedRedundancyNum(block);\n-    final int numLive \u003d numberReplicas.liveReplicas();\n-    if (numLive \u003e\u003d numExpected\n-        \u0026\u0026 blockManager.isPlacementPolicySatisfied(block)) {\n+      NumberReplicas numberReplicas, boolean isDecommission) {\n+    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n       // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n+    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n+        numberReplicas);\n+    final int numLive \u003d numberReplicas.liveReplicas();\n+\n     // Block is under-replicated\n-    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected, \n+    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n         numLive);\n-    if (numExpected \u003e numLive) {\n+    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n      NumberReplicas numberReplicas, boolean isDecommission) {\n    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n        numberReplicas);\n    final int numLive \u003d numberReplicas.liveReplicas();\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n        numLive);\n    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
          "extendedDetails": {
            "oldValue": "[block-BlockInfo, bc-BlockCollection, numberReplicas-NumberReplicas]",
            "newValue": "[block-BlockInfo, bc-BlockCollection, numberReplicas-NumberReplicas, isDecommission-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
          "commitDate": "17/10/16 5:45 PM",
          "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "13/10/16 11:52 AM",
          "commitNameOld": "332a61fd74fd2a9874319232c583ab5d2c53ff03",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 4.25,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   private boolean isSufficient(BlockInfo block, BlockCollection bc,\n-      NumberReplicas numberReplicas) {\n-    final int numExpected \u003d blockManager.getExpectedRedundancyNum(block);\n-    final int numLive \u003d numberReplicas.liveReplicas();\n-    if (numLive \u003e\u003d numExpected\n-        \u0026\u0026 blockManager.isPlacementPolicySatisfied(block)) {\n+      NumberReplicas numberReplicas, boolean isDecommission) {\n+    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n       // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n+    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n+        numberReplicas);\n+    final int numLive \u003d numberReplicas.liveReplicas();\n+\n     // Block is under-replicated\n-    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected, \n+    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n         numLive);\n-    if (numExpected \u003e numLive) {\n+    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n      NumberReplicas numberReplicas, boolean isDecommission) {\n    if (blockManager.hasEnoughEffectiveReplicas(block, numberReplicas, 0)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    final int numExpected \u003d blockManager.getExpectedLiveRedundancyNum(block,\n        numberReplicas);\n    final int numLive \u003d numberReplicas.liveReplicas();\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected,\n        numLive);\n    if (isDecommission \u0026\u0026 numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "8c84a2a93c22a93b4ff46dd917f6efb995675fbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10236. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-3]. Contributed by Rakesh R.\n",
      "commitDate": "26/05/16 4:50 PM",
      "commitName": "8c84a2a93c22a93b4ff46dd917f6efb995675fbd",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "25/04/16 10:01 PM",
      "commitNameOld": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 30.78,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private boolean isSufficient(BlockInfo block, BlockCollection bc,\n       NumberReplicas numberReplicas) {\n-    final int numExpected \u003d blockManager.getExpectedReplicaNum(block);\n+    final int numExpected \u003d blockManager.getExpectedRedundancyNum(block);\n     final int numLive \u003d numberReplicas.liveReplicas();\n     if (numLive \u003e\u003d numExpected\n         \u0026\u0026 blockManager.isPlacementPolicySatisfied(block)) {\n       // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n     // Block is under-replicated\n     LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected, \n         numLive);\n     if (numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n      NumberReplicas numberReplicas) {\n    final int numExpected \u003d blockManager.getExpectedRedundancyNum(block);\n    final int numLive \u003d numberReplicas.liveReplicas();\n    if (numLive \u003e\u003d numExpected\n        \u0026\u0026 blockManager.isPlacementPolicySatisfied(block)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected, \n        numLive);\n    if (numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
      "extendedDetails": {}
    },
    "34cd7cd76505d01ec251e30837c94ab03319a0c1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9600. do not check replication if the block is under construction (Contributed by Phil Yang)\n",
      "commitDate": "06/01/16 9:57 PM",
      "commitName": "34cd7cd76505d01ec251e30837c94ab03319a0c1",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "11/12/15 5:57 PM",
      "commitNameOld": "796a676d18bd7cd3ed4113d002e0e69cf261d6d1",
      "commitAuthorOld": "Uma Mahesh",
      "daysBetweenCommits": 26.17,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private boolean isSufficient(BlockInfo block, BlockCollection bc,\n       NumberReplicas numberReplicas) {\n     final int numExpected \u003d blockManager.getExpectedReplicaNum(block);\n     final int numLive \u003d numberReplicas.liveReplicas();\n-    if (!blockManager.isNeededReplication(block, numLive)) {\n-      // Block doesn\u0027t need replication. Skip.\n+    if (numLive \u003e\u003d numExpected\n+        \u0026\u0026 blockManager.isPlacementPolicySatisfied(block)) {\n+      // Block has enough replica, skip\n       LOG.trace(\"Block {} does not need replication.\", block);\n       return true;\n     }\n \n     // Block is under-replicated\n     LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected, \n         numLive);\n     if (numExpected \u003e numLive) {\n       if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n         // Can decom a UC block as long as there will still be minReplicas\n         if (blockManager.hasMinStorage(block, numLive)) {\n           LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n               + \"\u003e\u003d minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n           return true;\n         } else {\n           LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n               + \"({}) \u003c minR ({})\", block, numLive,\n               blockManager.getMinStorageNum(block));\n         }\n       } else {\n         // Can decom a non-UC as long as the default replication is met\n         if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n           return true;\n         }\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isSufficient(BlockInfo block, BlockCollection bc,\n      NumberReplicas numberReplicas) {\n    final int numExpected \u003d blockManager.getExpectedReplicaNum(block);\n    final int numLive \u003d numberReplicas.liveReplicas();\n    if (numLive \u003e\u003d numExpected\n        \u0026\u0026 blockManager.isPlacementPolicySatisfied(block)) {\n      // Block has enough replica, skip\n      LOG.trace(\"Block {} does not need replication.\", block);\n      return true;\n    }\n\n    // Block is under-replicated\n    LOG.trace(\"Block {} numExpected\u003d{}, numLive\u003d{}\", block, numExpected, \n        numLive);\n    if (numExpected \u003e numLive) {\n      if (bc.isUnderConstruction() \u0026\u0026 block.equals(bc.getLastBlock())) {\n        // Can decom a UC block as long as there will still be minReplicas\n        if (blockManager.hasMinStorage(block, numLive)) {\n          LOG.trace(\"UC block {} sufficiently-replicated since numLive ({}) \"\n              + \"\u003e\u003d minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n          return true;\n        } else {\n          LOG.trace(\"UC block {} insufficiently-replicated since numLive \"\n              + \"({}) \u003c minR ({})\", block, numLive,\n              blockManager.getMinStorageNum(block));\n        }\n      } else {\n        // Can decom a non-UC as long as the default replication is met\n        if (numLive \u003e\u003d blockManager.getDefaultStorageNum(block)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
      "extendedDetails": {}
    }
  }
}