{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractPreemptableResourceCalculator.java",
  "functionName": "resetCapacity",
  "functionId": "resetCapacity___clusterResource-Resource__queues-Collection__TempQueuePerPartition____ignoreGuar-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
  "functionStartLine": 262,
  "functionEndLine": 294,
  "numCommitsSeen": 49,
  "timeTaken": 7067,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "034b312d9f19024d2eabd377210d17d4080ef70e",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "45b42676f9333ed4fa05355ccb4e1f91a9556525",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "034b312d9f19024d2eabd377210d17d4080ef70e": "Ybodychange",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ymultichange(Ymovefromfile,Yparameterchange)",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ymovefromfile",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ymultichange(Yparameterchange,Ybodychange)",
    "45b42676f9333ed4fa05355ccb4e1f91a9556525": "Ymultichange(Yparameterchange,Ybodychange)",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "28/06/18 10:23 AM",
      "commitNameOld": "291194302cc1a875d6d94ea93cf1184a3f1fc2cc",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 193.55,
      "commitsBetweenForRepo": 1513,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private void resetCapacity(Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n         for (int i \u003d 0; i \u003c maxLength; i++) {\n           q.normalizedGuarantee[i] \u003d 1.0f / queues.size();\n         }\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.getGuaranteed());\n       }\n       for (TempQueuePerPartition q : queues) {\n         for (int i \u003d 0; i \u003c maxLength; i++) {\n           ResourceInformation nResourceInformation \u003d q.getGuaranteed()\n               .getResourceInformation(i);\n           ResourceInformation dResourceInformation \u003d activeCap\n               .getResourceInformation(i);\n \n           long nValue \u003d nResourceInformation.getValue();\n           long dValue \u003d UnitsConversionUtil.convert(\n               dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n               dResourceInformation.getValue());\n           if (dValue !\u003d 0) {\n             q.normalizedGuarantee[i] \u003d (float) nValue / dValue;\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n\n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        for (int i \u003d 0; i \u003c maxLength; i++) {\n          q.normalizedGuarantee[i] \u003d 1.0f / queues.size();\n        }\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.getGuaranteed());\n      }\n      for (TempQueuePerPartition q : queues) {\n        for (int i \u003d 0; i \u003c maxLength; i++) {\n          ResourceInformation nResourceInformation \u003d q.getGuaranteed()\n              .getResourceInformation(i);\n          ResourceInformation dResourceInformation \u003d activeCap\n              .getResourceInformation(i);\n\n          long nValue \u003d nResourceInformation.getValue();\n          long dValue \u003d UnitsConversionUtil.convert(\n              dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n              dResourceInformation.getValue());\n          if (dValue !\u003d 0) {\n            q.normalizedGuarantee[i] \u003d (float) nValue / dValue;\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
      "extendedDetails": {}
    },
    "034b312d9f19024d2eabd377210d17d4080ef70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7411. Inter-Queue preemption\u0027s computeFixpointAllocation need to handle absolute resources while computing normalizedGuarantee. (Sunil G via wangda)\n\nChange-Id: I41b1d7558c20fc4eb2050d40134175a2ef6330cb\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "034b312d9f19024d2eabd377210d17d4080ef70e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 318.34,
      "commitsBetweenForRepo": 2100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,33 @@\n   private void resetCapacity(Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n-        q.normalizedGuarantee \u003d 1.0f / queues.size();\n+        for (int i \u003d 0; i \u003c maxLength; i++) {\n+          q.normalizedGuarantee[i] \u003d 1.0f / queues.size();\n+        }\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.getGuaranteed());\n       }\n       for (TempQueuePerPartition q : queues) {\n-        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n-            q.getGuaranteed(), activeCap);\n+        for (int i \u003d 0; i \u003c maxLength; i++) {\n+          ResourceInformation nResourceInformation \u003d q.getGuaranteed()\n+              .getResourceInformation(i);\n+          ResourceInformation dResourceInformation \u003d activeCap\n+              .getResourceInformation(i);\n+\n+          long nValue \u003d nResourceInformation.getValue();\n+          long dValue \u003d UnitsConversionUtil.convert(\n+              dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n+              dResourceInformation.getValue());\n+          if (dValue !\u003d 0) {\n+            q.normalizedGuarantee[i] \u003d (float) nValue / dValue;\n+          }\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n\n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        for (int i \u003d 0; i \u003c maxLength; i++) {\n          q.normalizedGuarantee[i] \u003d 1.0f / queues.size();\n        }\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.getGuaranteed());\n      }\n      for (TempQueuePerPartition q : queues) {\n        for (int i \u003d 0; i \u003c maxLength; i++) {\n          ResourceInformation nResourceInformation \u003d q.getGuaranteed()\n              .getResourceInformation(i);\n          ResourceInformation dResourceInformation \u003d activeCap\n              .getResourceInformation(i);\n\n          long nValue \u003d nResourceInformation.getValue();\n          long dValue \u003d UnitsConversionUtil.convert(\n              dResourceInformation.getUnits(), nResourceInformation.getUnits(),\n              dResourceInformation.getValue());\n          if (dValue !\u003d 0) {\n            q.normalizedGuarantee[i] \u003d (float) nValue / dValue;\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
      "extendedDetails": {}
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ymultichange(Ymovefromfile,Yparameterchange)",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n+  private void resetCapacity(Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d 1.0f / queues.size();\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.getGuaranteed());\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.getGuaranteed(), activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resetCapacity(Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n\n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d 1.0f / queues.size();\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.getGuaranteed());\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.getGuaranteed(), activeCap);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
            "oldMethodName": "resetCapacity",
            "newMethodName": "resetCapacity"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n+  private void resetCapacity(Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d 1.0f / queues.size();\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.getGuaranteed());\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.getGuaranteed(), activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resetCapacity(Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n\n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d 1.0f / queues.size();\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.getGuaranteed());\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.getGuaranteed(), activeCap);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/AbstractPreemptableResourceCalculator.java",
          "extendedDetails": {
            "oldValue": "[rc-ResourceCalculator, clusterResource-Resource, queues-Collection\u003cTempQueuePerPartition\u003e, ignoreGuar-boolean]",
            "newValue": "[clusterResource-Resource, queues-Collection\u003cTempQueuePerPartition\u003e, ignoreGuar-boolean]"
          }
        }
      ]
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/03/16 12:43 PM",
      "commitNameOld": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 36.01,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d 1.0f / queues.size();\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n-        Resources.addTo(activeCap, q.guaranteed);\n+        Resources.addTo(activeCap, q.getGuaranteed());\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n-            q.guaranteed, activeCap);\n+            q.getGuaranteed(), activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n\n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d 1.0f / queues.size();\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.getGuaranteed());\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.getGuaranteed(), activeCap);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
      "extendedDetails": {}
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/03/16 11:22 PM",
      "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n-    \n+\n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d 1.0f / queues.size();\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.guaranteed);\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.guaranteed, activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n\n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d 1.0f / queues.size();\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
        "oldMethodName": "resetCapacity",
        "newMethodName": "resetCapacity"
      }
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n     \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n-        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n+        q.normalizedGuarantee \u003d 1.0f / queues.size();\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.guaranteed);\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.guaranteed, activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d 1.0f / queues.size();\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n     \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n-        q.normalizedGuarantee \u003d 1.0f / queues.size();\n+        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.guaranteed);\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.guaranteed, activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 57.94,
      "commitsBetweenForRepo": 394,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n       Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n     \n     if (ignoreGuar) {\n       for (TempQueuePerPartition q : queues) {\n-        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n+        q.normalizedGuarantee \u003d 1.0f / queues.size();\n       }\n     } else {\n       for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.guaranteed);\n       }\n       for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.guaranteed, activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d 1.0f / queues.size();\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n-      Collection\u003cTempQueue\u003e queues, boolean ignoreGuar) {\n+      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n     \n     if (ignoreGuar) {\n-      for (TempQueue q : queues) {\n+      for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n       }\n     } else {\n-      for (TempQueue q : queues) {\n+      for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.guaranteed);\n       }\n-      for (TempQueue q : queues) {\n+      for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.guaranteed, activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[rc-ResourceCalculator, clusterResource-Resource, queues-Collection\u003cTempQueue\u003e, ignoreGuar-boolean]",
            "newValue": "[rc-ResourceCalculator, clusterResource-Resource, queues-Collection\u003cTempQueuePerPartition\u003e, ignoreGuar-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n-      Collection\u003cTempQueue\u003e queues, boolean ignoreGuar) {\n+      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n     \n     if (ignoreGuar) {\n-      for (TempQueue q : queues) {\n+      for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n       }\n     } else {\n-      for (TempQueue q : queues) {\n+      for (TempQueuePerPartition q : queues) {\n         Resources.addTo(activeCap, q.guaranteed);\n       }\n-      for (TempQueue q : queues) {\n+      for (TempQueuePerPartition q : queues) {\n         q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n             q.guaranteed, activeCap);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueuePerPartition\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n      }\n    } else {\n      for (TempQueuePerPartition q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueuePerPartition q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "45b42676f9333ed4fa05355ccb4e1f91a9556525": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1957. Consider the max capacity of the queue when computing the ideal\ncapacity for preemption. Contributed by Carlo Curino\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594414 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 4:15 PM",
      "commitName": "45b42676f9333ed4fa05355ccb4e1f91a9556525",
      "commitAuthor": "Christopher Douglas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1957. Consider the max capacity of the queue when computing the ideal\ncapacity for preemption. Contributed by Carlo Curino\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594414 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 4:15 PM",
          "commitName": "45b42676f9333ed4fa05355ccb4e1f91a9556525",
          "commitAuthor": "Christopher Douglas",
          "commitDateOld": "10/07/13 6:20 PM",
          "commitNameOld": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
          "commitAuthorOld": "Christopher Douglas",
          "daysBetweenCommits": 306.91,
          "commitsBetweenForRepo": 2071,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n-      List\u003cTempQueue\u003e queues) {\n+      Collection\u003cTempQueue\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n-    for (TempQueue q : queues) {\n-      Resources.addTo(activeCap, q.guaranteed);\n-    }\n-    for (TempQueue q : queues) {\n-      q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n-          q.guaranteed, activeCap);\n+    \n+    if (ignoreGuar) {\n+      for (TempQueue q : queues) {\n+        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n+      }\n+    } else {\n+      for (TempQueue q : queues) {\n+        Resources.addTo(activeCap, q.guaranteed);\n+      }\n+      for (TempQueue q : queues) {\n+        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n+            q.guaranteed, activeCap);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueue\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueue q : queues) {\n        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n      }\n    } else {\n      for (TempQueue q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueue q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[rc-ResourceCalculator, clusterResource-Resource, queues-List\u003cTempQueue\u003e]",
            "newValue": "[rc-ResourceCalculator, clusterResource-Resource, queues-Collection\u003cTempQueue\u003e, ignoreGuar-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1957. Consider the max capacity of the queue when computing the ideal\ncapacity for preemption. Contributed by Carlo Curino\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594414 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 4:15 PM",
          "commitName": "45b42676f9333ed4fa05355ccb4e1f91a9556525",
          "commitAuthor": "Christopher Douglas",
          "commitDateOld": "10/07/13 6:20 PM",
          "commitNameOld": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
          "commitAuthorOld": "Christopher Douglas",
          "daysBetweenCommits": 306.91,
          "commitsBetweenForRepo": 2071,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,18 @@\n   private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n-      List\u003cTempQueue\u003e queues) {\n+      Collection\u003cTempQueue\u003e queues, boolean ignoreGuar) {\n     Resource activeCap \u003d Resource.newInstance(0, 0);\n-    for (TempQueue q : queues) {\n-      Resources.addTo(activeCap, q.guaranteed);\n-    }\n-    for (TempQueue q : queues) {\n-      q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n-          q.guaranteed, activeCap);\n+    \n+    if (ignoreGuar) {\n+      for (TempQueue q : queues) {\n+        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n+      }\n+    } else {\n+      for (TempQueue q : queues) {\n+        Resources.addTo(activeCap, q.guaranteed);\n+      }\n+      for (TempQueue q : queues) {\n+        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n+            q.guaranteed, activeCap);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      Collection\u003cTempQueue\u003e queues, boolean ignoreGuar) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    \n    if (ignoreGuar) {\n      for (TempQueue q : queues) {\n        q.normalizedGuarantee \u003d (float)  1.0f / ((float) queues.size());\n      }\n    } else {\n      for (TempQueue q : queues) {\n        Resources.addTo(activeCap, q.guaranteed);\n      }\n      for (TempQueue q : queues) {\n        q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n            q.guaranteed, activeCap);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,11 @@\n+  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n+      List\u003cTempQueue\u003e queues) {\n+    Resource activeCap \u003d Resource.newInstance(0, 0);\n+    for (TempQueue q : queues) {\n+      Resources.addTo(activeCap, q.guaranteed);\n+    }\n+    for (TempQueue q : queues) {\n+      q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n+          q.guaranteed, activeCap);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetCapacity(ResourceCalculator rc, Resource clusterResource,\n      List\u003cTempQueue\u003e queues) {\n    Resource activeCap \u003d Resource.newInstance(0, 0);\n    for (TempQueue q : queues) {\n      Resources.addTo(activeCap, q.guaranteed);\n    }\n    for (TempQueue q : queues) {\n      q.normalizedGuarantee \u003d Resources.divide(rc, clusterResource,\n          q.guaranteed, activeCap);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}