{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "shedQueuedOpportunisticContainers",
  "functionId": "shedQueuedOpportunisticContainers",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 645,
  "functionEndLine": 667,
  "numCommitsSeen": 34,
  "timeTaken": 4096,
  "changeHistory": [
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e",
    "df800f6cf3ea663daf4081ebe784808b08d9366d",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "f45bc5a83ed2f2292ecf1f4c990b7153d8051fc9",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830"
  ],
  "changeHistoryShort": {
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e": "Ybodychange",
    "df800f6cf3ea663daf4081ebe784808b08d9366d": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ymultichange(Ymovefromfile,Ybodychange)",
    "f45bc5a83ed2f2292ecf1f4c990b7153d8051fc9": "Ybodychange",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Yintroduced"
  },
  "changeHistoryDetails": {
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9169. Add metrics for queued opportunistic and guaranteed containers. Contributed by Abhishek Modi.\n",
      "commitDate": "07/01/19 3:16 PM",
      "commitName": "489411579c5e30c1dc855c4fd3d5f7f68a58b27e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "04/01/19 11:16 AM",
      "commitNameOld": "6e35f7130fb3fb17665e818f838ed750425348c0",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   private void shedQueuedOpportunisticContainers() {\n     int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n     Iterator\u003cContainer\u003e containerIter \u003d\n         queuedOpportunisticContainers.values().iterator();\n     while (containerIter.hasNext()) {\n       Container container \u003d containerIter.next();\n       // Do not shed PAUSED containers\n       if (container.getContainerState() !\u003d ContainerState.PAUSED) {\n         if (numAllowed \u003c\u003d 0) {\n           container.sendKillEvent(\n               ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n               \"Container De-queued to meet NM queuing limits.\");\n           containerIter.remove();\n           LOG.info(\n               \"Opportunistic container {} will be killed to meet NM queuing\" +\n                   \" limits.\", container.getContainerId());\n         }\n         numAllowed--;\n       }\n     }\n+    this.metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n+        queuedGuaranteedContainers.size());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void shedQueuedOpportunisticContainers() {\n    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n    Iterator\u003cContainer\u003e containerIter \u003d\n        queuedOpportunisticContainers.values().iterator();\n    while (containerIter.hasNext()) {\n      Container container \u003d containerIter.next();\n      // Do not shed PAUSED containers\n      if (container.getContainerState() !\u003d ContainerState.PAUSED) {\n        if (numAllowed \u003c\u003d 0) {\n          container.sendKillEvent(\n              ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n              \"Container De-queued to meet NM queuing limits.\");\n          containerIter.remove();\n          LOG.info(\n              \"Opportunistic container {} will be killed to meet NM queuing\" +\n                  \" limits.\", container.getContainerId());\n        }\n        numAllowed--;\n      }\n    }\n    this.metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n        queuedGuaranteedContainers.size());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "df800f6cf3ea663daf4081ebe784808b08d9366d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7240. Add more states and transitions to stabilize the NM Container state machine. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "25/09/17 4:02 PM",
      "commitName": "df800f6cf3ea663daf4081ebe784808b08d9366d",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/09/17 8:51 AM",
      "commitNameOld": "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 11.3,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   private void shedQueuedOpportunisticContainers() {\n     int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n     Iterator\u003cContainer\u003e containerIter \u003d\n         queuedOpportunisticContainers.values().iterator();\n     while (containerIter.hasNext()) {\n       Container container \u003d containerIter.next();\n-      if (numAllowed \u003c\u003d 0) {\n-        container.sendKillEvent(\n-            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n-            \"Container De-queued to meet NM queuing limits.\");\n-        containerIter.remove();\n-        LOG.info(\n-            \"Opportunistic container {} will be killed to meet NM queuing\" +\n-                \" limits.\", container.getContainerId());\n+      // Do not shed PAUSED containers\n+      if (container.getContainerState() !\u003d ContainerState.PAUSED) {\n+        if (numAllowed \u003c\u003d 0) {\n+          container.sendKillEvent(\n+              ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n+              \"Container De-queued to meet NM queuing limits.\");\n+          containerIter.remove();\n+          LOG.info(\n+              \"Opportunistic container {} will be killed to meet NM queuing\" +\n+                  \" limits.\", container.getContainerId());\n+        }\n+        numAllowed--;\n       }\n-      numAllowed--;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void shedQueuedOpportunisticContainers() {\n    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n    Iterator\u003cContainer\u003e containerIter \u003d\n        queuedOpportunisticContainers.values().iterator();\n    while (containerIter.hasNext()) {\n      Container container \u003d containerIter.next();\n      // Do not shed PAUSED containers\n      if (container.getContainerState() !\u003d ContainerState.PAUSED) {\n        if (numAllowed \u003c\u003d 0) {\n          container.sendKillEvent(\n              ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n              \"Container De-queued to meet NM queuing limits.\");\n          containerIter.remove();\n          LOG.info(\n              \"Opportunistic container {} will be killed to meet NM queuing\" +\n                  \" limits.\", container.getContainerId());\n        }\n        numAllowed--;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,18 @@\n   private void shedQueuedOpportunisticContainers() {\n     int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n-    Iterator\u003cAllocatedContainerInfo\u003e containerIter \u003d\n-        queuedOpportunisticContainers.iterator();\n+    Iterator\u003cContainer\u003e containerIter \u003d\n+        queuedOpportunisticContainers.values().iterator();\n     while (containerIter.hasNext()) {\n-      AllocatedContainerInfo cInfo \u003d containerIter.next();\n+      Container container \u003d containerIter.next();\n       if (numAllowed \u003c\u003d 0) {\n+        container.sendKillEvent(\n+            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n+            \"Container De-queued to meet NM queuing limits.\");\n         containerIter.remove();\n-        ContainerTokenIdentifier containerTokenIdentifier \u003d this.context\n-            .getQueuingContext().getQueuedContainers().remove(\n-                cInfo.getContainerTokenIdentifier().getContainerID());\n-        // The Container might have already started while we were\n-        // iterating..\n-        if (containerTokenIdentifier !\u003d null) {\n-          this.context.getQueuingContext().getKilledQueuedContainers()\n-              .putIfAbsent(cInfo.getContainerTokenIdentifier(),\n-                  \"Container de-queued to meet NM queuing limits. \"\n-                      + \"Max Queue length[\"\n-                      + this.queuingLimit.getMaxQueueLength() + \"]\");\n-        }\n+        LOG.info(\n+            \"Opportunistic container {} will be killed to meet NM queuing\" +\n+                \" limits.\", container.getContainerId());\n       }\n       numAllowed--;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void shedQueuedOpportunisticContainers() {\n    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n    Iterator\u003cContainer\u003e containerIter \u003d\n        queuedOpportunisticContainers.values().iterator();\n    while (containerIter.hasNext()) {\n      Container container \u003d containerIter.next();\n      if (numAllowed \u003c\u003d 0) {\n        container.sendKillEvent(\n            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n            \"Container De-queued to meet NM queuing limits.\");\n        containerIter.remove();\n        LOG.info(\n            \"Opportunistic container {} will be killed to meet NM queuing\" +\n                \" limits.\", container.getContainerId());\n      }\n      numAllowed--;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
            "oldMethodName": "shedQueuedOpportunisticContainers",
            "newMethodName": "shedQueuedOpportunisticContainers"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,18 @@\n   private void shedQueuedOpportunisticContainers() {\n     int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n-    Iterator\u003cAllocatedContainerInfo\u003e containerIter \u003d\n-        queuedOpportunisticContainers.iterator();\n+    Iterator\u003cContainer\u003e containerIter \u003d\n+        queuedOpportunisticContainers.values().iterator();\n     while (containerIter.hasNext()) {\n-      AllocatedContainerInfo cInfo \u003d containerIter.next();\n+      Container container \u003d containerIter.next();\n       if (numAllowed \u003c\u003d 0) {\n+        container.sendKillEvent(\n+            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n+            \"Container De-queued to meet NM queuing limits.\");\n         containerIter.remove();\n-        ContainerTokenIdentifier containerTokenIdentifier \u003d this.context\n-            .getQueuingContext().getQueuedContainers().remove(\n-                cInfo.getContainerTokenIdentifier().getContainerID());\n-        // The Container might have already started while we were\n-        // iterating..\n-        if (containerTokenIdentifier !\u003d null) {\n-          this.context.getQueuingContext().getKilledQueuedContainers()\n-              .putIfAbsent(cInfo.getContainerTokenIdentifier(),\n-                  \"Container de-queued to meet NM queuing limits. \"\n-                      + \"Max Queue length[\"\n-                      + this.queuingLimit.getMaxQueueLength() + \"]\");\n-        }\n+        LOG.info(\n+            \"Opportunistic container {} will be killed to meet NM queuing\" +\n+                \" limits.\", container.getContainerId());\n       }\n       numAllowed--;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void shedQueuedOpportunisticContainers() {\n    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n    Iterator\u003cContainer\u003e containerIter \u003d\n        queuedOpportunisticContainers.values().iterator();\n    while (containerIter.hasNext()) {\n      Container container \u003d containerIter.next();\n      if (numAllowed \u003c\u003d 0) {\n        container.sendKillEvent(\n            ContainerExitStatus.KILLED_BY_CONTAINER_SCHEDULER,\n            \"Container De-queued to meet NM queuing limits.\");\n        containerIter.remove();\n        LOG.info(\n            \"Opportunistic container {} will be killed to meet NM queuing\" +\n                \" limits.\", container.getContainerId());\n      }\n      numAllowed--;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "f45bc5a83ed2f2292ecf1f4c990b7153d8051fc9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4738. Notify the RM about the status of OPPORTUNISTIC containers (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "15/05/16 5:54 PM",
      "commitName": "f45bc5a83ed2f2292ecf1f4c990b7153d8051fc9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "13/05/16 1:38 PM",
      "commitNameOld": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private void shedQueuedOpportunisticContainers() {\n     int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n     Iterator\u003cAllocatedContainerInfo\u003e containerIter \u003d\n         queuedOpportunisticContainers.iterator();\n     while (containerIter.hasNext()) {\n       AllocatedContainerInfo cInfo \u003d containerIter.next();\n       if (numAllowed \u003c\u003d 0) {\n         containerIter.remove();\n         ContainerTokenIdentifier containerTokenIdentifier \u003d this.context\n             .getQueuingContext().getQueuedContainers().remove(\n                 cInfo.getContainerTokenIdentifier().getContainerID());\n         // The Container might have already started while we were\n         // iterating..\n         if (containerTokenIdentifier !\u003d null) {\n           this.context.getQueuingContext().getKilledQueuedContainers()\n               .putIfAbsent(cInfo.getContainerTokenIdentifier(),\n-                  \"Container De-queued to meet global queuing limits. \"\n+                  \"Container de-queued to meet NM queuing limits. \"\n                       + \"Max Queue length[\"\n                       + this.queuingLimit.getMaxQueueLength() + \"]\");\n         }\n       }\n       numAllowed--;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void shedQueuedOpportunisticContainers() {\n    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n    Iterator\u003cAllocatedContainerInfo\u003e containerIter \u003d\n        queuedOpportunisticContainers.iterator();\n    while (containerIter.hasNext()) {\n      AllocatedContainerInfo cInfo \u003d containerIter.next();\n      if (numAllowed \u003c\u003d 0) {\n        containerIter.remove();\n        ContainerTokenIdentifier containerTokenIdentifier \u003d this.context\n            .getQueuingContext().getQueuedContainers().remove(\n                cInfo.getContainerTokenIdentifier().getContainerID());\n        // The Container might have already started while we were\n        // iterating..\n        if (containerTokenIdentifier !\u003d null) {\n          this.context.getQueuingContext().getKilledQueuedContainers()\n              .putIfAbsent(cInfo.getContainerTokenIdentifier(),\n                  \"Container de-queued to meet NM queuing limits. \"\n                      + \"Max Queue length[\"\n                      + this.queuingLimit.getMaxQueueLength() + \"]\");\n        }\n      }\n      numAllowed--;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,24 @@\n+  private void shedQueuedOpportunisticContainers() {\n+    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n+    Iterator\u003cAllocatedContainerInfo\u003e containerIter \u003d\n+        queuedOpportunisticContainers.iterator();\n+    while (containerIter.hasNext()) {\n+      AllocatedContainerInfo cInfo \u003d containerIter.next();\n+      if (numAllowed \u003c\u003d 0) {\n+        containerIter.remove();\n+        ContainerTokenIdentifier containerTokenIdentifier \u003d this.context\n+            .getQueuingContext().getQueuedContainers().remove(\n+                cInfo.getContainerTokenIdentifier().getContainerID());\n+        // The Container might have already started while we were\n+        // iterating..\n+        if (containerTokenIdentifier !\u003d null) {\n+          this.context.getQueuingContext().getKilledQueuedContainers()\n+              .putIfAbsent(cInfo.getContainerTokenIdentifier(),\n+                  \"Container De-queued to meet global queuing limits. \"\n+                      + \"Max Queue length[\"\n+                      + this.queuingLimit.getMaxQueueLength() + \"]\");\n+        }\n+      }\n+      numAllowed--;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void shedQueuedOpportunisticContainers() {\n    int numAllowed \u003d this.queuingLimit.getMaxQueueLength();\n    Iterator\u003cAllocatedContainerInfo\u003e containerIter \u003d\n        queuedOpportunisticContainers.iterator();\n    while (containerIter.hasNext()) {\n      AllocatedContainerInfo cInfo \u003d containerIter.next();\n      if (numAllowed \u003c\u003d 0) {\n        containerIter.remove();\n        ContainerTokenIdentifier containerTokenIdentifier \u003d this.context\n            .getQueuingContext().getQueuedContainers().remove(\n                cInfo.getContainerTokenIdentifier().getContainerID());\n        // The Container might have already started while we were\n        // iterating..\n        if (containerTokenIdentifier !\u003d null) {\n          this.context.getQueuingContext().getKilledQueuedContainers()\n              .putIfAbsent(cInfo.getContainerTokenIdentifier(),\n                  \"Container De-queued to meet global queuing limits. \"\n                      + \"Max Queue length[\"\n                      + this.queuingLimit.getMaxQueueLength() + \"]\");\n        }\n      }\n      numAllowed--;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java"
    }
  }
}