{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderUtils.java",
  "functionName": "excludeIncompatibleCredentialProviders",
  "functionId": "excludeIncompatibleCredentialProviders___config-Configuration__fileSystemClass-Class__? extends FileSystem__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
  "functionStartLine": 139,
  "functionEndLine": 197,
  "numCommitsSeen": 8,
  "timeTaken": 1239,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "7634d404b750eafa135a37fa275325d0398255fb"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "7634d404b750eafa135a37fa275325d0398255fb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/01/19 10:54 AM",
      "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 63.18,
      "commitsBetweenForRepo": 522,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,59 @@\n   public static Configuration excludeIncompatibleCredentialProviders(\n       Configuration config, Class\u003c? extends FileSystem\u003e fileSystemClass)\n           throws IOException {\n \n     String providerPath \u003d config.get(\n         CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n \n     if (providerPath \u003d\u003d null) {\n       return config;\n     }\n     StringBuffer newProviderPath \u003d new StringBuffer();\n     String[] providers \u003d providerPath.split(\",\");\n     Path path \u003d null;\n     for (String provider: providers) {\n       try {\n         path \u003d unnestUri(new URI(provider));\n         Class\u003c? extends FileSystem\u003e clazz \u003d null;\n         try {\n           String scheme \u003d path.toUri().getScheme();\n           clazz \u003d FileSystem.getFileSystemClass(scheme, config);\n         } catch (IOException ioe) {\n           // not all providers are filesystem based\n           // for instance user:/// will not be able to\n           // have a filesystem class associated with it.\n           if (newProviderPath.length() \u003e 0) {\n             newProviderPath.append(\",\");\n           }\n           newProviderPath.append(provider);\n         }\n         if (clazz !\u003d null) {\n           if (fileSystemClass.isAssignableFrom(clazz)) {\n-            LOG.debug(\"Filesystem based provider\" +\n-                \" excluded from provider path due to recursive dependency: \"\n-                + provider);\n+            LOG.debug(\"Filesystem based provider excluded from provider \" +\n+                \"path due to recursive dependency: {}\", provider);\n           } else {\n             if (newProviderPath.length() \u003e 0) {\n               newProviderPath.append(\",\");\n             }\n             newProviderPath.append(provider);\n           }\n         }\n       } catch (URISyntaxException e) {\n         LOG.warn(\"Credential Provider URI is invalid.\" + provider);\n       }\n     }\n \n     String effectivePath \u003d newProviderPath.toString();\n     if (effectivePath.equals(providerPath)) {\n       return config;\n     }\n \n     Configuration conf \u003d new Configuration(config);\n     if (effectivePath.equals(\"\")) {\n       conf.unset(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n     } else {\n       conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n           effectivePath);\n     }\n     return conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration excludeIncompatibleCredentialProviders(\n      Configuration config, Class\u003c? extends FileSystem\u003e fileSystemClass)\n          throws IOException {\n\n    String providerPath \u003d config.get(\n        CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n\n    if (providerPath \u003d\u003d null) {\n      return config;\n    }\n    StringBuffer newProviderPath \u003d new StringBuffer();\n    String[] providers \u003d providerPath.split(\",\");\n    Path path \u003d null;\n    for (String provider: providers) {\n      try {\n        path \u003d unnestUri(new URI(provider));\n        Class\u003c? extends FileSystem\u003e clazz \u003d null;\n        try {\n          String scheme \u003d path.toUri().getScheme();\n          clazz \u003d FileSystem.getFileSystemClass(scheme, config);\n        } catch (IOException ioe) {\n          // not all providers are filesystem based\n          // for instance user:/// will not be able to\n          // have a filesystem class associated with it.\n          if (newProviderPath.length() \u003e 0) {\n            newProviderPath.append(\",\");\n          }\n          newProviderPath.append(provider);\n        }\n        if (clazz !\u003d null) {\n          if (fileSystemClass.isAssignableFrom(clazz)) {\n            LOG.debug(\"Filesystem based provider excluded from provider \" +\n                \"path due to recursive dependency: {}\", provider);\n          } else {\n            if (newProviderPath.length() \u003e 0) {\n              newProviderPath.append(\",\");\n            }\n            newProviderPath.append(provider);\n          }\n        }\n      } catch (URISyntaxException e) {\n        LOG.warn(\"Credential Provider URI is invalid.\" + provider);\n      }\n    }\n\n    String effectivePath \u003d newProviderPath.toString();\n    if (effectivePath.equals(providerPath)) {\n      return config;\n    }\n\n    Configuration conf \u003d new Configuration(config);\n    if (effectivePath.equals(\"\")) {\n      conf.unset(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n    } else {\n      conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n          effectivePath);\n    }\n    return conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java",
      "extendedDetails": {}
    },
    "7634d404b750eafa135a37fa275325d0398255fb": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12846. Credential Provider Recursive Dependencies. Contributed by Larry McCay.\n",
      "commitDate": "28/02/16 11:22 AM",
      "commitName": "7634d404b750eafa135a37fa275325d0398255fb",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,60 @@\n+  public static Configuration excludeIncompatibleCredentialProviders(\n+      Configuration config, Class\u003c? extends FileSystem\u003e fileSystemClass)\n+          throws IOException {\n+\n+    String providerPath \u003d config.get(\n+        CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n+\n+    if (providerPath \u003d\u003d null) {\n+      return config;\n+    }\n+    StringBuffer newProviderPath \u003d new StringBuffer();\n+    String[] providers \u003d providerPath.split(\",\");\n+    Path path \u003d null;\n+    for (String provider: providers) {\n+      try {\n+        path \u003d unnestUri(new URI(provider));\n+        Class\u003c? extends FileSystem\u003e clazz \u003d null;\n+        try {\n+          String scheme \u003d path.toUri().getScheme();\n+          clazz \u003d FileSystem.getFileSystemClass(scheme, config);\n+        } catch (IOException ioe) {\n+          // not all providers are filesystem based\n+          // for instance user:/// will not be able to\n+          // have a filesystem class associated with it.\n+          if (newProviderPath.length() \u003e 0) {\n+            newProviderPath.append(\",\");\n+          }\n+          newProviderPath.append(provider);\n+        }\n+        if (clazz !\u003d null) {\n+          if (fileSystemClass.isAssignableFrom(clazz)) {\n+            LOG.debug(\"Filesystem based provider\" +\n+                \" excluded from provider path due to recursive dependency: \"\n+                + provider);\n+          } else {\n+            if (newProviderPath.length() \u003e 0) {\n+              newProviderPath.append(\",\");\n+            }\n+            newProviderPath.append(provider);\n+          }\n+        }\n+      } catch (URISyntaxException e) {\n+        LOG.warn(\"Credential Provider URI is invalid.\" + provider);\n+      }\n+    }\n+\n+    String effectivePath \u003d newProviderPath.toString();\n+    if (effectivePath.equals(providerPath)) {\n+      return config;\n+    }\n+\n+    Configuration conf \u003d new Configuration(config);\n+    if (effectivePath.equals(\"\")) {\n+      conf.unset(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n+    } else {\n+      conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n+          effectivePath);\n+    }\n+    return conf;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Configuration excludeIncompatibleCredentialProviders(\n      Configuration config, Class\u003c? extends FileSystem\u003e fileSystemClass)\n          throws IOException {\n\n    String providerPath \u003d config.get(\n        CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n\n    if (providerPath \u003d\u003d null) {\n      return config;\n    }\n    StringBuffer newProviderPath \u003d new StringBuffer();\n    String[] providers \u003d providerPath.split(\",\");\n    Path path \u003d null;\n    for (String provider: providers) {\n      try {\n        path \u003d unnestUri(new URI(provider));\n        Class\u003c? extends FileSystem\u003e clazz \u003d null;\n        try {\n          String scheme \u003d path.toUri().getScheme();\n          clazz \u003d FileSystem.getFileSystemClass(scheme, config);\n        } catch (IOException ioe) {\n          // not all providers are filesystem based\n          // for instance user:/// will not be able to\n          // have a filesystem class associated with it.\n          if (newProviderPath.length() \u003e 0) {\n            newProviderPath.append(\",\");\n          }\n          newProviderPath.append(provider);\n        }\n        if (clazz !\u003d null) {\n          if (fileSystemClass.isAssignableFrom(clazz)) {\n            LOG.debug(\"Filesystem based provider\" +\n                \" excluded from provider path due to recursive dependency: \"\n                + provider);\n          } else {\n            if (newProviderPath.length() \u003e 0) {\n              newProviderPath.append(\",\");\n            }\n            newProviderPath.append(provider);\n          }\n        }\n      } catch (URISyntaxException e) {\n        LOG.warn(\"Credential Provider URI is invalid.\" + provider);\n      }\n    }\n\n    String effectivePath \u003d newProviderPath.toString();\n    if (effectivePath.equals(providerPath)) {\n      return config;\n    }\n\n    Configuration conf \u003d new Configuration(config);\n    if (effectivePath.equals(\"\")) {\n      conf.unset(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);\n    } else {\n      conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n          effectivePath);\n    }\n    return conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ProviderUtils.java"
    }
  }
}