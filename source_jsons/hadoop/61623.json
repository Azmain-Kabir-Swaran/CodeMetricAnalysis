{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "ratio",
  "functionId": "ratio___a-Resource__b-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 404,
  "functionEndLine": 415,
  "numCommitsSeen": 37,
  "timeTaken": 5221,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ybodychange",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n       final float tmp \u003d divideSafelyAsFloat(aResourceInformation.getValue(),\n           bResourceInformation.getValue());\n       ratio \u003d ratio \u003e tmp ? ratio : tmp;\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n      final float tmp \u003d divideSafelyAsFloat(aResourceInformation.getValue(),\n          bResourceInformation.getValue());\n      ratio \u003d ratio \u003e tmp ? ratio : tmp;\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9019. Ratio calculation of ResourceCalculator implementations could return NaN. (Contributed by Szilard Nemeth)\n",
      "commitDate": "05/12/18 3:16 PM",
      "commitName": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "02/08/18 9:59 AM",
      "commitNameOld": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 125.26,
      "commitsBetweenForRepo": 1095,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n-      float tmp \u003d (float) aResourceInformation.getValue()\n-          / (float) bResourceInformation.getValue();\n+      final float tmp \u003d divideSafelyAsFloat(aResourceInformation.getValue(),\n+          bResourceInformation.getValue());\n       ratio \u003d ratio \u003e tmp ? ratio : tmp;\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n      final float tmp \u003d divideSafelyAsFloat(aResourceInformation.getValue(),\n          bResourceInformation.getValue());\n      ratio \u003d ratio \u003e tmp ? ratio : tmp;\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/05/18 9:06 AM",
      "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 69.04,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,12 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n-      long bResourceValue \u003d UnitsConversionUtil.convert(\n-          bResourceInformation.getUnits(), aResourceInformation.getUnits(),\n-          bResourceInformation.getValue());\n       float tmp \u003d (float) aResourceInformation.getValue()\n-          / (float) bResourceValue;\n+          / (float) bResourceInformation.getValue();\n       ratio \u003d ratio \u003e tmp ? ratio : tmp;\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n      float tmp \u003d (float) aResourceInformation.getValue()\n          / (float) bResourceInformation.getValue();\n      ratio \u003d ratio \u003e tmp ? ratio : tmp;\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n-    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n       long bResourceValue \u003d UnitsConversionUtil.convert(\n           bResourceInformation.getUnits(), aResourceInformation.getUnits(),\n           bResourceInformation.getValue());\n       float tmp \u003d (float) aResourceInformation.getValue()\n           / (float) bResourceValue;\n       ratio \u003d ratio \u003e tmp ? ratio : tmp;\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n      long bResourceValue \u003d UnitsConversionUtil.convert(\n          bResourceInformation.getUnits(), aResourceInformation.getUnits(),\n          bResourceInformation.getValue());\n      float tmp \u003d (float) aResourceInformation.getValue()\n          / (float) bResourceValue;\n      ratio \u003d ratio \u003e tmp ? ratio : tmp;\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6892. [YARN-3926] Improve API implementation in Resources and DominantResourceCalculator class. Contributed by Sunil G.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "2b51b262aba0191b80dc93799574c0b959cb4f4e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,15 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n-    for (String resource : resourceNames) {\n-      try {\n-        ResourceInformation aResourceInformation \u003d\n-            a.getResourceInformation(resource);\n-        ResourceInformation bResourceInformation \u003d\n-            b.getResourceInformation(resource);\n-        long bResourceValue \u003d UnitsConversionUtil\n-            .convert(bResourceInformation.getUnits(),\n-                aResourceInformation.getUnits(),\n-                bResourceInformation.getValue());\n-        float tmp \u003d\n-            (float) aResourceInformation.getValue() / (float) bResourceValue;\n-        ratio \u003d ratio \u003e tmp ? ratio : tmp;\n-      } catch (ResourceNotFoundException ye) {\n-        throw new IllegalArgumentException(\n-            \"Error getting resource information for \" + resource, ye);\n-      }\n+    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n+      ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n+      long bResourceValue \u003d UnitsConversionUtil.convert(\n+          bResourceInformation.getUnits(), aResourceInformation.getUnits(),\n+          bResourceInformation.getValue());\n+      float tmp \u003d (float) aResourceInformation.getValue()\n+          / (float) bResourceValue;\n+      ratio \u003d ratio \u003e tmp ? ratio : tmp;\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation aResourceInformation \u003d a.getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d b.getResourceInformation(i);\n      long bResourceValue \u003d UnitsConversionUtil.convert(\n          bResourceInformation.getUnits(), aResourceInformation.getUnits(),\n          bResourceInformation.getValue());\n      float tmp \u003d (float) aResourceInformation.getValue()\n          / (float) bResourceValue;\n      ratio \u003d ratio \u003e tmp ? ratio : tmp;\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation aResourceInformation \u003d\n             a.getResourceInformation(resource);\n         ResourceInformation bResourceInformation \u003d\n             b.getResourceInformation(resource);\n         long bResourceValue \u003d UnitsConversionUtil\n             .convert(bResourceInformation.getUnits(),\n                 aResourceInformation.getUnits(),\n                 bResourceInformation.getValue());\n         float tmp \u003d\n             (float) aResourceInformation.getValue() / (float) bResourceValue;\n         ratio \u003d ratio \u003e tmp ? ratio : tmp;\n-      } catch (YarnException ye) {\n+      } catch (ResourceNotFoundException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation aResourceInformation \u003d\n            a.getResourceInformation(resource);\n        ResourceInformation bResourceInformation \u003d\n            b.getResourceInformation(resource);\n        long bResourceValue \u003d UnitsConversionUtil\n            .convert(bResourceInformation.getUnits(),\n                aResourceInformation.getUnits(),\n                bResourceInformation.getValue());\n        float tmp \u003d\n            (float) aResourceInformation.getValue() / (float) bResourceValue;\n        ratio \u003d ratio \u003e tmp ? ratio : tmp;\n      } catch (ResourceNotFoundException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public float ratio(Resource a, Resource b) {\n     float ratio \u003d 0.0f;\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation aResourceInformation \u003d\n             a.getResourceInformation(resource);\n         ResourceInformation bResourceInformation \u003d\n             b.getResourceInformation(resource);\n-        Long bResourceValue \u003d UnitsConversionUtil\n+        long bResourceValue \u003d UnitsConversionUtil\n             .convert(bResourceInformation.getUnits(),\n                 aResourceInformation.getUnits(),\n                 bResourceInformation.getValue());\n         float tmp \u003d\n             (float) aResourceInformation.getValue() / (float) bResourceValue;\n         ratio \u003d ratio \u003e tmp ? ratio : tmp;\n       } catch (YarnException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation aResourceInformation \u003d\n            a.getResourceInformation(resource);\n        ResourceInformation bResourceInformation \u003d\n            b.getResourceInformation(resource);\n        long bResourceValue \u003d UnitsConversionUtil\n            .convert(bResourceInformation.getUnits(),\n                aResourceInformation.getUnits(),\n                bResourceInformation.getValue());\n        float tmp \u003d\n            (float) aResourceInformation.getValue() / (float) bResourceValue;\n        ratio \u003d ratio \u003e tmp ? ratio : tmp;\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4172. Extend DominantResourceCalculator to account for all resources. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "32c91223f1bd06561ea4ce2d1944e8d9a847f18c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/07/17 4:56 AM",
      "commitNameOld": "626d730bfc4c1f6ea54e8a246a0a676cdb74937f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 65.18,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,22 @@\n   public float ratio(Resource a, Resource b) {\n-    return Math.max(\n-        (float)a.getMemorySize()/b.getMemorySize(),\n-        (float)a.getVirtualCores()/b.getVirtualCores()\n-        );\n+    float ratio \u003d 0.0f;\n+    for (String resource : resourceNames) {\n+      try {\n+        ResourceInformation aResourceInformation \u003d\n+            a.getResourceInformation(resource);\n+        ResourceInformation bResourceInformation \u003d\n+            b.getResourceInformation(resource);\n+        Long bResourceValue \u003d UnitsConversionUtil\n+            .convert(bResourceInformation.getUnits(),\n+                aResourceInformation.getUnits(),\n+                bResourceInformation.getValue());\n+        float tmp \u003d\n+            (float) aResourceInformation.getValue() / (float) bResourceValue;\n+        ratio \u003d ratio \u003e tmp ? ratio : tmp;\n+      } catch (YarnException ye) {\n+        throw new IllegalArgumentException(\n+            \"Error getting resource information for \" + resource, ye);\n+      }\n+    }\n+    return ratio;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    float ratio \u003d 0.0f;\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation aResourceInformation \u003d\n            a.getResourceInformation(resource);\n        ResourceInformation bResourceInformation \u003d\n            b.getResourceInformation(resource);\n        Long bResourceValue \u003d UnitsConversionUtil\n            .convert(bResourceInformation.getUnits(),\n                aResourceInformation.getUnits(),\n                bResourceInformation.getValue());\n        float tmp \u003d\n            (float) aResourceInformation.getValue() / (float) bResourceValue;\n        ratio \u003d ratio \u003e tmp ? ratio : tmp;\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ratio;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 248.81,
      "commitsBetweenForRepo": 1666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n   public float ratio(Resource a, Resource b) {\n     return Math.max(\n-        (float)a.getMemory()/b.getMemory(), \n+        (float)a.getMemorySize()/b.getMemorySize(),\n         (float)a.getVirtualCores()/b.getVirtualCores()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    return Math.max(\n        (float)a.getMemorySize()/b.getMemorySize(),\n        (float)a.getVirtualCores()/b.getVirtualCores()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-827. Need to make Resource arithmetic methods accessible^CJian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495533 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 11:28 AM",
      "commitName": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,6 @@\n+  public float ratio(Resource a, Resource b) {\n+    return Math.max(\n+        (float)a.getMemory()/b.getMemory(), \n+        (float)a.getVirtualCores()/b.getVirtualCores()\n+        );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public float ratio(Resource a, Resource b) {\n    return Math.max(\n        (float)a.getMemory()/b.getMemory(), \n        (float)a.getVirtualCores()/b.getVirtualCores()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}