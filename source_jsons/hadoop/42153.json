{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemRMStateStore.java",
  "functionName": "getAndIncrementEpoch",
  "functionId": "getAndIncrementEpoch",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
  "functionStartLine": 205,
  "functionEndLine": 225,
  "numCommitsSeen": 57,
  "timeTaken": 3364,
  "changeHistory": [
    "e6a80e476d4348a4373e6dd5792d70edff16516f",
    "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
    "9a2a9553eee454ecd18120535d3e845f86fc3584",
    "01a1621930df17a745dd37892996c68fca3447d1",
    "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605",
    "3122daa80261b466e309e88d88d1e2c030525e3f",
    "b0c51504c494847a5d0e98d212660297ed43ba56"
  ],
  "changeHistoryShort": {
    "e6a80e476d4348a4373e6dd5792d70edff16516f": "Ybodychange",
    "2797507d51566ab3b8328e5fb1d0beb9fbce5bae": "Ybodychange",
    "9a2a9553eee454ecd18120535d3e845f86fc3584": "Ybodychange",
    "01a1621930df17a745dd37892996c68fca3447d1": "Ybodychange",
    "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605": "Ybodychange",
    "3122daa80261b466e309e88d88d1e2c030525e3f": "Ymultichange(Yreturntypechange,Ybodychange)",
    "b0c51504c494847a5d0e98d212660297ed43ba56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6a80e476d4348a4373e6dd5792d70edff16516f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8151. Yarn RM Epoch should wrap around. Contributed by Young Chen.\n",
      "commitDate": "02/05/18 5:23 PM",
      "commitName": "e6a80e476d4348a4373e6dd5792d70edff16516f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "04/12/17 1:14 PM",
      "commitNameOld": "d8863fc16fa3cbcdda5b99f79386c43e4fae5917",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 149.13,
      "commitsBetweenForRepo": 1585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n     long currentEpoch \u003d baseEpoch;\n     FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n     if (status !\u003d null) {\n       // load current epoch\n       byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n-      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n           .toByteArray();\n       updateFile(epochNodePath, storeData, false);\n     } else {\n       // initialize epoch file with 1 for the next time.\n-      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n           .toByteArray();\n       writeFileWithRetries(epochNodePath, storeData, false);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d baseEpoch;\n    FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n    if (status !\u003d null) {\n      // load current epoch\n      byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData, false);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n          .toByteArray();\n      writeFileWithRetries(epochNodePath, storeData, false);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "2797507d51566ab3b8328e5fb1d0beb9fbce5bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5601. Make the RM epoch base value configurable. Contributed by Subru Krishnan\n\n(cherry picked from commit 9ca2aba9cc65090162b3517b194b5e655ee4a157)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/04/17 10:12 AM",
      "commitNameOld": "7d873c465b815816e9955cf40f4e141dd2e7d82b",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 112.3,
      "commitsBetweenForRepo": 581,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n-    long currentEpoch \u003d 0;\n+    long currentEpoch \u003d baseEpoch;\n     FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n     if (status !\u003d null) {\n       // load current epoch\n       byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       updateFile(epochNodePath, storeData, false);\n     } else {\n       // initialize epoch file with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       writeFileWithRetries(epochNodePath, storeData, false);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d baseEpoch;\n    FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n    if (status !\u003d null) {\n      // load current epoch\n      byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData, false);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFileWithRetries(epochNodePath, storeData, false);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9a2a9553eee454ecd18120535d3e845f86fc3584": {
      "type": "Ybodychange",
      "commitMessage": "Fixing HDFS state-store. Contributed by Arun Suresh.\n",
      "commitDate": "14/05/15 4:13 PM",
      "commitName": "9a2a9553eee454ecd18120535d3e845f86fc3584",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/04/15 5:51 PM",
      "commitNameOld": "e71d0d87d9b388f211a8eb3d2cd9af347abf9bda",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 22.93,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n     long currentEpoch \u003d 0;\n     FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n     if (status !\u003d null) {\n       // load current epoch\n       byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      updateFile(epochNodePath, storeData);\n+      updateFile(epochNodePath, storeData, false);\n     } else {\n       // initialize epoch file with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      writeFileWithRetries(epochNodePath, storeData);\n+      writeFileWithRetries(epochNodePath, storeData, false);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n    if (status !\u003d null) {\n      // load current epoch\n      byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData, false);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFileWithRetries(epochNodePath, storeData, false);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "01a1621930df17a745dd37892996c68fca3447d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2820. Retry in FileSystemRMStateStore when FS\u0027s operations fail due to IOException. Contributed by Zhihai Xu.\n",
      "commitDate": "27/02/15 7:56 AM",
      "commitName": "01a1621930df17a745dd37892996c68fca3447d1",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "08/01/15 9:47 AM",
      "commitNameOld": "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 49.92,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n     long currentEpoch \u003d 0;\n-    FileStatus status \u003d getFileStatus(epochNodePath);\n+    FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n     if (status !\u003d null) {\n       // load current epoch\n-      byte[] data \u003d readFile(epochNodePath, status.getLen());\n+      byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       updateFile(epochNodePath, storeData);\n     } else {\n       // initialize epoch file with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      writeFile(epochNodePath, storeData);\n+      writeFileWithRetries(epochNodePath, storeData);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    FileStatus status \u003d getFileStatusWithRetries(epochNodePath);\n    if (status !\u003d null) {\n      // load current epoch\n      byte[] data \u003d readFileWithRetries(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFileWithRetries(epochNodePath, storeData);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2996. Improved synchronization and I/O operations of FS- and Mem- RMStateStore. Contributed by Yi Liu.\n",
      "commitDate": "08/01/15 9:47 AM",
      "commitName": "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/01/15 1:33 PM",
      "commitNameOld": "562a701945be3a672f9cb5a52cc6db2c1589ba2b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 2.84,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n     long currentEpoch \u003d 0;\n-    if (fs.exists(epochNodePath)) {\n+    FileStatus status \u003d getFileStatus(epochNodePath);\n+    if (status !\u003d null) {\n       // load current epoch\n-      FileStatus status \u003d fs.getFileStatus(epochNodePath);\n       byte[] data \u003d readFile(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       updateFile(epochNodePath, storeData);\n     } else {\n       // initialize epoch file with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       writeFile(epochNodePath, storeData);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    FileStatus status \u003d getFileStatus(epochNodePath);\n    if (status !\u003d null) {\n      // load current epoch\n      byte[] data \u003d readFile(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFile(epochNodePath, storeData);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "3122daa80261b466e309e88d88d1e2c030525e3f": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "12/09/14 10:33 AM",
      "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "12/09/14 10:33 AM",
          "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/09/14 7:09 AM",
          "commitNameOld": "78b048393a80a9bd1399d08525590bb211a32d8c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  public synchronized int getAndIncrementEpoch() throws Exception {\n+  public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n-    int currentEpoch \u003d 0;\n+    long currentEpoch \u003d 0;\n     if (fs.exists(epochNodePath)) {\n       // load current epoch\n       FileStatus status \u003d fs.getFileStatus(epochNodePath);\n       byte[] data \u003d readFile(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       updateFile(epochNodePath, storeData);\n     } else {\n       // initialize epoch file with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       writeFile(epochNodePath, storeData);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    if (fs.exists(epochNodePath)) {\n      // load current epoch\n      FileStatus status \u003d fs.getFileStatus(epochNodePath);\n      byte[] data \u003d readFile(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFile(epochNodePath, storeData);\n    }\n    return currentEpoch;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "12/09/14 10:33 AM",
          "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/09/14 7:09 AM",
          "commitNameOld": "78b048393a80a9bd1399d08525590bb211a32d8c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  public synchronized int getAndIncrementEpoch() throws Exception {\n+  public synchronized long getAndIncrementEpoch() throws Exception {\n     Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n-    int currentEpoch \u003d 0;\n+    long currentEpoch \u003d 0;\n     if (fs.exists(epochNodePath)) {\n       // load current epoch\n       FileStatus status \u003d fs.getFileStatus(epochNodePath);\n       byte[] data \u003d readFile(epochNodePath, status.getLen());\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       updateFile(epochNodePath, storeData);\n     } else {\n       // initialize epoch file with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       writeFile(epochNodePath, storeData);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    if (fs.exists(epochNodePath)) {\n      // load current epoch\n      FileStatus status \u003d fs.getFileStatus(epochNodePath);\n      byte[] data \u003d readFile(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFile(epochNodePath, storeData);\n    }\n    return currentEpoch;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "b0c51504c494847a5d0e98d212660297ed43ba56": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2052. Embedded an epoch number in container id to ensure the uniqueness of container id after RM restarts. Contributed by Tsuyoshi OZAWA\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/14 11:24 AM",
      "commitName": "b0c51504c494847a5d0e98d212660297ed43ba56",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,21 @@\n+  public synchronized int getAndIncrementEpoch() throws Exception {\n+    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n+    int currentEpoch \u003d 0;\n+    if (fs.exists(epochNodePath)) {\n+      // load current epoch\n+      FileStatus status \u003d fs.getFileStatus(epochNodePath);\n+      byte[] data \u003d readFile(epochNodePath, status.getLen());\n+      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n+      currentEpoch \u003d epoch.getEpoch();\n+      // increment epoch and store it\n+      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+          .toByteArray();\n+      updateFile(epochNodePath, storeData);\n+    } else {\n+      // initialize epoch file with 1 for the next time.\n+      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+          .toByteArray();\n+      writeFile(epochNodePath, storeData);\n+    }\n+    return currentEpoch;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int getAndIncrementEpoch() throws Exception {\n    Path epochNodePath \u003d getNodePath(rootDirPath, EPOCH_NODE);\n    int currentEpoch \u003d 0;\n    if (fs.exists(epochNodePath)) {\n      // load current epoch\n      FileStatus status \u003d fs.getFileStatus(epochNodePath);\n      byte[] data \u003d readFile(epochNodePath, status.getLen());\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      updateFile(epochNodePath, storeData);\n    } else {\n      // initialize epoch file with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      writeFile(epochNodePath, storeData);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java"
    }
  }
}