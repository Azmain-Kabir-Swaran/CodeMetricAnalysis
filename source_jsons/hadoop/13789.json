{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "completeBlock",
  "functionId": "completeBlock___curBlock-BlockInfo__iip-INodesInPath__force-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1190,
  "functionEndLine": 1219,
  "numCommitsSeen": 1232,
  "timeTaken": 19702,
  "changeHistory": [
    "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
    "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
    "caa04de149030691b7bc952b534c6128db217ed2",
    "e535e0f05b5fbd087c93238deb888cc985254b4c",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd",
    "f0f9a3631fe4950f5cf548f192226836925d0f05",
    "191db6a9073e8660440c85d2c1a65e2a48b4b45c",
    "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f"
  ],
  "changeHistoryShort": {
    "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6": "Ymultichange(Yparameterchange,Ybodychange)",
    "a49cc74b4c72195dee1dfb6f9548e5e411dff553": "Ybodychange",
    "caa04de149030691b7bc952b534c6128db217ed2": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "e535e0f05b5fbd087c93238deb888cc985254b4c": "Ybodychange",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": "Ybodychange",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": "Ybodychange",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": "Ybodychange",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Yparameterchange",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0f9a3631fe4950f5cf548f192226836925d0f05": "Yparameterchange",
    "191db6a9073e8660440c85d2c1a65e2a48b4b45c": "Yintroduced",
    "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f": "Ybodychange"
  },
  "changeHistoryDetails": {
    "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10843. Update space quota when a UC block is completed rather than committed. Contributed by Erik Krogen.",
      "commitDate": "23/09/16 10:37 AM",
      "commitName": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
      "commitAuthor": "Konstantin V Shvachko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10843. Update space quota when a UC block is completed rather than committed. Contributed by Erik Krogen.",
          "commitDate": "23/09/16 10:37 AM",
          "commitName": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "12/09/16 4:40 PM",
          "commitNameOld": "72dfb048a9a7be64b371b74478b90150bf300d35",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 10.75,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-  private void completeBlock(BlockInfo curBlock, boolean force)\n-      throws IOException {\n+  private void completeBlock(BlockInfo curBlock, INodesInPath iip,\n+      boolean force) throws IOException {\n     if (curBlock.isComplete()) {\n       return;\n     }\n \n     int numNodes \u003d curBlock.numNodes();\n     if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n       throw new IOException(\"Cannot complete block: \"\n           + \"block does not satisfy minimal replication requirement.\");\n     }\n     if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     }\n \n-    curBlock.convertToCompleteBlock();\n+    convertToCompleteBlock(curBlock, iip);\n+\n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     bmSafeMode.adjustBlockTotals(0, 1);\n     final int minStorage \u003d curBlock.isStriped() ?\n         ((BlockInfoStriped) curBlock).getRealDataBlockNum() : minReplication;\n     bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),\n         curBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void completeBlock(BlockInfo curBlock, INodesInPath iip,\n      boolean force) throws IOException {\n    if (curBlock.isComplete()) {\n      return;\n    }\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n      throw new IOException(\"Cannot complete block: \"\n          + \"block does not satisfy minimal replication requirement.\");\n    }\n    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n\n    convertToCompleteBlock(curBlock, iip);\n\n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    bmSafeMode.adjustBlockTotals(0, 1);\n    final int minStorage \u003d curBlock.isStriped() ?\n        ((BlockInfoStriped) curBlock).getRealDataBlockNum() : minReplication;\n    bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),\n        curBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[curBlock-BlockInfo, force-boolean]",
            "newValue": "[curBlock-BlockInfo, iip-INodesInPath, force-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10843. Update space quota when a UC block is completed rather than committed. Contributed by Erik Krogen.",
          "commitDate": "23/09/16 10:37 AM",
          "commitName": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "12/09/16 4:40 PM",
          "commitNameOld": "72dfb048a9a7be64b371b74478b90150bf300d35",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 10.75,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-  private void completeBlock(BlockInfo curBlock, boolean force)\n-      throws IOException {\n+  private void completeBlock(BlockInfo curBlock, INodesInPath iip,\n+      boolean force) throws IOException {\n     if (curBlock.isComplete()) {\n       return;\n     }\n \n     int numNodes \u003d curBlock.numNodes();\n     if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n       throw new IOException(\"Cannot complete block: \"\n           + \"block does not satisfy minimal replication requirement.\");\n     }\n     if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     }\n \n-    curBlock.convertToCompleteBlock();\n+    convertToCompleteBlock(curBlock, iip);\n+\n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     bmSafeMode.adjustBlockTotals(0, 1);\n     final int minStorage \u003d curBlock.isStriped() ?\n         ((BlockInfoStriped) curBlock).getRealDataBlockNum() : minReplication;\n     bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),\n         curBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void completeBlock(BlockInfo curBlock, INodesInPath iip,\n      boolean force) throws IOException {\n    if (curBlock.isComplete()) {\n      return;\n    }\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n      throw new IOException(\"Cannot complete block: \"\n          + \"block does not satisfy minimal replication requirement.\");\n    }\n    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n\n    convertToCompleteBlock(curBlock, iip);\n\n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    bmSafeMode.adjustBlockTotals(0, 1);\n    final int minStorage \u003d curBlock.isStriped() ?\n        ((BlockInfoStriped) curBlock).getRealDataBlockNum() : minReplication;\n    bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),\n        curBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a49cc74b4c72195dee1dfb6f9548e5e411dff553": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9129. Move the safemode block count into BlockManager. Contributed by Mingliang Liu.\n",
      "commitDate": "01/12/15 4:09 PM",
      "commitName": "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "01/12/15 1:05 PM",
      "commitNameOld": "830eb252aaa4fec7ef2ec38cb66f669e8e1ecaa5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private void completeBlock(BlockInfo curBlock, boolean force)\n       throws IOException {\n     if (curBlock.isComplete()) {\n       return;\n     }\n \n     int numNodes \u003d curBlock.numNodes();\n     if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n       throw new IOException(\"Cannot complete block: \"\n           + \"block does not satisfy minimal replication requirement.\");\n     }\n     if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     }\n \n     curBlock.convertToCompleteBlock();\n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n-    namesystem.adjustSafeModeBlockTotals(0, 1);\n+    bmSafeMode.adjustBlockTotals(0, 1);\n     final int minStorage \u003d curBlock.isStriped() ?\n         ((BlockInfoStriped) curBlock).getRealDataBlockNum() : minReplication;\n-    namesystem.incrementSafeBlockCount(\n-        Math.min(numNodes, minStorage), curBlock);\n+    bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),\n+        curBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void completeBlock(BlockInfo curBlock, boolean force)\n      throws IOException {\n    if (curBlock.isComplete()) {\n      return;\n    }\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n      throw new IOException(\"Cannot complete block: \"\n          + \"block does not satisfy minimal replication requirement.\");\n    }\n    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n\n    curBlock.convertToCompleteBlock();\n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    bmSafeMode.adjustBlockTotals(0, 1);\n    final int minStorage \u003d curBlock.isStriped() ?\n        ((BlockInfoStriped) curBlock).getRealDataBlockNum() : minReplication;\n    bmSafeMode.incrementSafeBlockCount(Math.min(numNodes, minStorage),\n        curBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "caa04de149030691b7bc952b534c6128db217ed2": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8980. Remove unnecessary block replacement in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "31/08/15 11:48 AM",
      "commitName": "caa04de149030691b7bc952b534c6128db217ed2",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8980. Remove unnecessary block replacement in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "31/08/15 11:48 AM",
          "commitName": "caa04de149030691b7bc952b534c6128db217ed2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/08/15 2:14 PM",
          "commitNameOld": "6d12cd8d609dec26d44cece9937c35b7d72a3cd1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 2.9,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,27 @@\n-  private BlockInfo completeBlock(final BlockCollection bc,\n-      final int blkIndex, boolean force) throws IOException {\n-    if(blkIndex \u003c 0)\n-      return null;\n-    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n-    if(curBlock.isComplete())\n-      return curBlock;\n+  private void completeBlock(BlockInfo curBlock, boolean force)\n+      throws IOException {\n+    if (curBlock.isComplete()) {\n+      return;\n+    }\n \n     int numNodes \u003d curBlock.numNodes();\n-    if (!force \u0026\u0026 numNodes \u003c minReplication)\n-      throw new IOException(\"Cannot complete block: \" +\n-          \"block does not satisfy minimal replication requirement.\");\n-    if(!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n+    if (!force \u0026\u0026 numNodes \u003c minReplication) {\n+      throw new IOException(\"Cannot complete block: \"\n+          + \"block does not satisfy minimal replication requirement.\");\n+    }\n+    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfo completeBlock \u003d curBlock.convertToCompleteBlock();\n-    // replace penultimate block in file\n-    bc.setBlock(blkIndex, completeBlock);\n-    \n+    }\n+\n+    curBlock.convertToCompleteBlock();\n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n-    \n-    // replace block in the blocksMap\n-    return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void completeBlock(BlockInfo curBlock, boolean force)\n      throws IOException {\n    if (curBlock.isComplete()) {\n      return;\n    }\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication) {\n      throw new IOException(\"Cannot complete block: \"\n          + \"block does not satisfy minimal replication requirement.\");\n    }\n    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n\n    curBlock.convertToCompleteBlock();\n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[bc-BlockCollection(modifiers-final), blkIndex-int(modifiers-final), force-boolean]",
            "newValue": "[curBlock-BlockInfo, force-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8980. Remove unnecessary block replacement in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "31/08/15 11:48 AM",
          "commitName": "caa04de149030691b7bc952b534c6128db217ed2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/08/15 2:14 PM",
          "commitNameOld": "6d12cd8d609dec26d44cece9937c35b7d72a3cd1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 2.9,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,27 @@\n-  private BlockInfo completeBlock(final BlockCollection bc,\n-      final int blkIndex, boolean force) throws IOException {\n-    if(blkIndex \u003c 0)\n-      return null;\n-    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n-    if(curBlock.isComplete())\n-      return curBlock;\n+  private void completeBlock(BlockInfo curBlock, boolean force)\n+      throws IOException {\n+    if (curBlock.isComplete()) {\n+      return;\n+    }\n \n     int numNodes \u003d curBlock.numNodes();\n-    if (!force \u0026\u0026 numNodes \u003c minReplication)\n-      throw new IOException(\"Cannot complete block: \" +\n-          \"block does not satisfy minimal replication requirement.\");\n-    if(!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n+    if (!force \u0026\u0026 numNodes \u003c minReplication) {\n+      throw new IOException(\"Cannot complete block: \"\n+          + \"block does not satisfy minimal replication requirement.\");\n+    }\n+    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfo completeBlock \u003d curBlock.convertToCompleteBlock();\n-    // replace penultimate block in file\n-    bc.setBlock(blkIndex, completeBlock);\n-    \n+    }\n+\n+    curBlock.convertToCompleteBlock();\n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n-    \n-    // replace block in the blocksMap\n-    return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void completeBlock(BlockInfo curBlock, boolean force)\n      throws IOException {\n    if (curBlock.isComplete()) {\n      return;\n    }\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication) {\n      throw new IOException(\"Cannot complete block: \"\n          + \"block does not satisfy minimal replication requirement.\");\n    }\n    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n\n    curBlock.convertToCompleteBlock();\n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "BlockInfo",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8980. Remove unnecessary block replacement in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "31/08/15 11:48 AM",
          "commitName": "caa04de149030691b7bc952b534c6128db217ed2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/08/15 2:14 PM",
          "commitNameOld": "6d12cd8d609dec26d44cece9937c35b7d72a3cd1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 2.9,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,27 @@\n-  private BlockInfo completeBlock(final BlockCollection bc,\n-      final int blkIndex, boolean force) throws IOException {\n-    if(blkIndex \u003c 0)\n-      return null;\n-    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n-    if(curBlock.isComplete())\n-      return curBlock;\n+  private void completeBlock(BlockInfo curBlock, boolean force)\n+      throws IOException {\n+    if (curBlock.isComplete()) {\n+      return;\n+    }\n \n     int numNodes \u003d curBlock.numNodes();\n-    if (!force \u0026\u0026 numNodes \u003c minReplication)\n-      throw new IOException(\"Cannot complete block: \" +\n-          \"block does not satisfy minimal replication requirement.\");\n-    if(!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n+    if (!force \u0026\u0026 numNodes \u003c minReplication) {\n+      throw new IOException(\"Cannot complete block: \"\n+          + \"block does not satisfy minimal replication requirement.\");\n+    }\n+    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfo completeBlock \u003d curBlock.convertToCompleteBlock();\n-    // replace penultimate block in file\n-    bc.setBlock(blkIndex, completeBlock);\n-    \n+    }\n+\n+    curBlock.convertToCompleteBlock();\n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n-    \n-    // replace block in the blocksMap\n-    return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void completeBlock(BlockInfo curBlock, boolean force)\n      throws IOException {\n    if (curBlock.isComplete()) {\n      return;\n    }\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication) {\n      throw new IOException(\"Cannot complete block: \"\n          + \"block does not satisfy minimal replication requirement.\");\n    }\n    if (!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n\n    curBlock.convertToCompleteBlock();\n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e535e0f05b5fbd087c93238deb888cc985254b4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
      "commitDate": "17/08/15 11:28 AM",
      "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 11.05,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n     BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n-    BlockInfoContiguousUnderConstruction ucBlock \u003d\n-        (BlockInfoContiguousUnderConstruction) curBlock;\n-    int numNodes \u003d ucBlock.numNodes();\n+\n+    int numNodes \u003d curBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n-    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n+    if(!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n+    BlockInfo completeBlock \u003d curBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n\n    int numNodes \u003d curBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 curBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d curBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n     BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n-    BlockInfoUnderConstruction ucBlock \u003d\n-        (BlockInfoUnderConstruction) curBlock;\n+    BlockInfoContiguousUnderConstruction ucBlock \u003d\n+        (BlockInfoContiguousUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        (BlockInfoContiguousUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\"\n\nThis reverts commit de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "31/07/15 4:15 PM",
      "commitNameOld": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,33 @@\n   private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n-    if (blkIndex \u003c 0) {\n+    if(blkIndex \u003c 0)\n       return null;\n-    }\n     BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n-    if(curBlock.isComplete()) {\n+    if(curBlock.isComplete())\n       return curBlock;\n-    }\n     BlockInfoUnderConstruction ucBlock \u003d\n         (BlockInfoUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n-    if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n+    if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n-    }\n-    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n+    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    }\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d\n        (BlockInfoUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\n",
      "commitDate": "26/06/15 10:49 AM",
      "commitName": "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/06/15 2:42 PM",
      "commitNameOld": "afe9ea3c12e1f5a71922400eadb642960bc87ca1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,37 @@\n   private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n-    if(blkIndex \u003c 0)\n+    if (blkIndex \u003c 0) {\n       return null;\n+    }\n     BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n-    if(curBlock.isComplete())\n+    if(curBlock.isComplete()) {\n       return curBlock;\n+    }\n     BlockInfoUnderConstruction ucBlock \u003d\n         (BlockInfoUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n-    if (!force \u0026\u0026 numNodes \u003c minReplication)\n+    if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n-    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n+    }\n+    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n+    }\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if (blkIndex \u003c 0) {\n      return null;\n    }\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete()) {\n      return curBlock;\n    }\n    BlockInfoUnderConstruction ucBlock \u003d\n        (BlockInfoUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 !hasMinStorage(curBlock, numNodes)) {\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    }\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED) {\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    }\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
      "commitDate": "12/06/15 11:38 AM",
      "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:17 AM",
      "commitNameOld": "12b5b06c063d93e6c683c9b6fac9a96912f59e59",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n     BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n-    BlockInfoContiguousUnderConstruction ucBlock \u003d\n-        (BlockInfoContiguousUnderConstruction) curBlock;\n+    BlockInfoUnderConstruction ucBlock \u003d\n+        (BlockInfoUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d\n        (BlockInfoUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
          "commitDate": "27/05/15 3:42 PM",
          "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "19/05/15 11:05 AM",
          "commitNameOld": "8860e352c394372e4eb3ebdf82ea899567f34e4e",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.19,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private BlockInfoContiguous completeBlock(final BlockCollection bc,\n+  private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n-    BlockInfoContiguous curBlock \u003d bc.getBlocks()[blkIndex];\n+    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoContiguousUnderConstruction ucBlock \u003d\n         (BlockInfoContiguousUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfoContiguous completeBlock \u003d ucBlock.convertToCompleteBlock();\n+    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        (BlockInfoContiguousUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "BlockInfoContiguous",
            "newValue": "BlockInfo"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
          "commitDate": "27/05/15 3:42 PM",
          "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "19/05/15 11:05 AM",
          "commitNameOld": "8860e352c394372e4eb3ebdf82ea899567f34e4e",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.19,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private BlockInfoContiguous completeBlock(final BlockCollection bc,\n+  private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n-    BlockInfoContiguous curBlock \u003d bc.getBlocks()[blkIndex];\n+    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoContiguousUnderConstruction ucBlock \u003d\n         (BlockInfoContiguousUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfoContiguous completeBlock \u003d ucBlock.convertToCompleteBlock();\n+    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        (BlockInfoContiguousUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
          "commitDate": "08/02/15 11:51 AM",
          "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/02/15 11:31 AM",
          "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 4.01,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  private BlockInfo completeBlock(final BlockCollection bc,\n+  private BlockInfoContiguous completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n-    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n+    BlockInfoContiguous curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n-    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n+    BlockInfoContiguousUnderConstruction ucBlock \u003d\n+        (BlockInfoContiguousUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n+    BlockInfoContiguous completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockInfoContiguous completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfoContiguous curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        (BlockInfoContiguousUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfoContiguous completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "BlockInfo",
            "newValue": "BlockInfoContiguous"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
          "commitDate": "08/02/15 11:51 AM",
          "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/02/15 11:31 AM",
          "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 4.01,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  private BlockInfo completeBlock(final BlockCollection bc,\n+  private BlockInfoContiguous completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n-    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n+    BlockInfoContiguous curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n-    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n+    BlockInfoContiguousUnderConstruction ucBlock \u003d\n+        (BlockInfoContiguousUnderConstruction) curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n-    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n+    BlockInfoContiguous completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockInfoContiguous completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfoContiguous curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        (BlockInfoContiguousUnderConstruction) curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfoContiguous completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/11/13 8:18 PM",
      "commitNameOld": "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 3.89,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  private BlockInfo completeBlock(final MutableBlockCollection bc,\n+  private BlockInfo completeBlock(final BlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n     BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final BlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[bc-MutableBlockCollection(modifiers-final), blkIndex-int(modifiers-final), force-boolean]",
        "newValue": "[bc-BlockCollection(modifiers-final), blkIndex-int(modifiers-final), force-boolean]"
      }
    },
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/12 2:41 PM",
      "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/05/12 2:41 PM",
          "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/05/12 2:59 AM",
          "commitNameOld": "f1ff05bf47a7dfb670bc63e4e6e58d74f6b5b4a7",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  private BlockInfo completeBlock(final MutableBlockCollection fileINode,\n+  private BlockInfo completeBlock(final MutableBlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n-    BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n+    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n-    fileINode.setBlock(blkIndex, completeBlock);\n+    bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockInfo completeBlock(final MutableBlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[fileINode-MutableBlockCollection(modifiers-final), blkIndex-int(modifiers-final), force-boolean]",
            "newValue": "[bc-MutableBlockCollection(modifiers-final), blkIndex-int(modifiers-final), force-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/05/12 2:41 PM",
          "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/05/12 2:59 AM",
          "commitNameOld": "f1ff05bf47a7dfb670bc63e4e6e58d74f6b5b4a7",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  private BlockInfo completeBlock(final MutableBlockCollection fileINode,\n+  private BlockInfo completeBlock(final MutableBlockCollection bc,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n-    BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n+    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n-    fileINode.setBlock(blkIndex, completeBlock);\n+    bc.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private BlockInfo completeBlock(final MutableBlockCollection bc,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d bc.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    bc.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0f9a3631fe4950f5cf548f192226836925d0f05": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-3363. Define BlockCollection and MutableBlockCollection interfaces so that INodeFile and INodeFileUnderConstruction do not have to be used in block management.  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/12 5:06 PM",
      "commitName": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/05/12 4:02 PM",
      "commitNameOld": "8620a99d1eea163b7505cde0a57e849b1b2a3a6f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  private BlockInfo completeBlock(final INodeFile fileINode,\n+  private BlockInfo completeBlock(final MutableBlockCollection fileINode,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n     BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n     int numNodes \u003d ucBlock.numNodes();\n     if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n       throw new IOException(\n           \"Cannot complete block: block has not been COMMITTED by the client\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     fileINode.setBlock(blkIndex, completeBlock);\n     \n     // Since safe-mode only counts complete blocks, and we now have\n     // one more complete block, we need to adjust the total up, and\n     // also count it as safe, if we have at least the minimum replica\n     // count. (We may not have the minimum replica count yet if this is\n     // a \"forced\" completion when a file is getting closed by an\n     // OP_CLOSE edit on the standby).\n     namesystem.adjustSafeModeBlockTotals(0, 1);\n     namesystem.incrementSafeBlockCount(\n         Math.min(numNodes, minReplication));\n     \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final MutableBlockCollection fileINode,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    fileINode.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[fileINode-INodeFile(modifiers-final), blkIndex-int(modifiers-final), force-boolean]",
        "newValue": "[fileINode-MutableBlockCollection(modifiers-final), blkIndex-int(modifiers-final), force-boolean]"
      }
    },
    "191db6a9073e8660440c85d2c1a65e2a48b4b45c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2718. Optimize OP_ADD in edits loading. Contributed by Konstantin Shvachko.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 10:57 AM",
      "commitName": "191db6a9073e8660440c85d2c1a65e2a48b4b45c",
      "commitAuthor": "Konstantin Shvachko",
      "diff": "@@ -0,0 +1,20 @@\n+  public BlockInfo completeBlock(final INodeFile fileINode, \n+      final int blkIndex, final boolean force) throws IOException {\n+    if(blkIndex \u003c 0)\n+      return null;\n+    BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n+    if(curBlock.isComplete())\n+      return curBlock;\n+    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n+    if(!force \u0026\u0026 ucBlock.numNodes() \u003c minReplication)\n+      throw new IOException(\"Cannot complete block: \" +\n+          \"block does not satisfy minimal replication requirement.\");\n+    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n+      throw new IOException(\n+          \"Cannot complete block: block has not been COMMITTED by the client\");\n+    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n+    // replace penultimate block in file\n+    fileINode.setBlock(blkIndex, completeBlock);\n+    // replace block in the blocksMap\n+    return blocksMap.replaceBlock(completeBlock);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public BlockInfo completeBlock(final INodeFile fileINode, \n      final int blkIndex, final boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n    if(!force \u0026\u0026 ucBlock.numNodes() \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    if(!force \u0026\u0026 ucBlock.getBlockUCState() !\u003d BlockUCState.COMMITTED)\n      throw new IOException(\n          \"Cannot complete block: block has not been COMMITTED by the client\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    fileINode.setBlock(blkIndex, completeBlock);\n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
    },
    "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2742. HA: observed dataloss in replication stress test. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238940 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/12 9:16 PM",
      "commitName": "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "30/01/12 11:16 AM",
      "commitNameOld": "846f97312c6db7b84b7401174acd0fc943baa093",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,29 @@\n   private BlockInfo completeBlock(final INodeFile fileINode,\n       final int blkIndex, boolean force) throws IOException {\n     if(blkIndex \u003c 0)\n       return null;\n     BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n     if(curBlock.isComplete())\n       return curBlock;\n     BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n-    if (!force \u0026\u0026 ucBlock.numNodes() \u003c minReplication)\n+    int numNodes \u003d ucBlock.numNodes();\n+    if (!force \u0026\u0026 numNodes \u003c minReplication)\n       throw new IOException(\"Cannot complete block: \" +\n           \"block does not satisfy minimal replication requirement.\");\n     BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n     // replace penultimate block in file\n     fileINode.setBlock(blkIndex, completeBlock);\n+    \n+    // Since safe-mode only counts complete blocks, and we now have\n+    // one more complete block, we need to adjust the total up, and\n+    // also count it as safe, if we have at least the minimum replica\n+    // count. (We may not have the minimum replica count yet if this is\n+    // a \"forced\" completion when a file is getting closed by an\n+    // OP_CLOSE edit on the standby).\n+    namesystem.adjustSafeModeBlockTotals(0, 1);\n+    namesystem.incrementSafeBlockCount(\n+        Math.min(numNodes, minReplication));\n+    \n     // replace block in the blocksMap\n     return blocksMap.replaceBlock(completeBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockInfo completeBlock(final INodeFile fileINode,\n      final int blkIndex, boolean force) throws IOException {\n    if(blkIndex \u003c 0)\n      return null;\n    BlockInfo curBlock \u003d fileINode.getBlocks()[blkIndex];\n    if(curBlock.isComplete())\n      return curBlock;\n    BlockInfoUnderConstruction ucBlock \u003d (BlockInfoUnderConstruction)curBlock;\n    int numNodes \u003d ucBlock.numNodes();\n    if (!force \u0026\u0026 numNodes \u003c minReplication)\n      throw new IOException(\"Cannot complete block: \" +\n          \"block does not satisfy minimal replication requirement.\");\n    BlockInfo completeBlock \u003d ucBlock.convertToCompleteBlock();\n    // replace penultimate block in file\n    fileINode.setBlock(blkIndex, completeBlock);\n    \n    // Since safe-mode only counts complete blocks, and we now have\n    // one more complete block, we need to adjust the total up, and\n    // also count it as safe, if we have at least the minimum replica\n    // count. (We may not have the minimum replica count yet if this is\n    // a \"forced\" completion when a file is getting closed by an\n    // OP_CLOSE edit on the standby).\n    namesystem.adjustSafeModeBlockTotals(0, 1);\n    namesystem.incrementSafeBlockCount(\n        Math.min(numNodes, minReplication));\n    \n    // replace block in the blocksMap\n    return blocksMap.replaceBlock(completeBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    }
  }
}