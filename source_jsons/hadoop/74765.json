{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKDelegationTokenSecretManager.java",
  "functionName": "addOrUpdateDelegationKey",
  "functionId": "addOrUpdateDelegationKey___key-DelegationKey__isUpdate-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java",
  "functionStartLine": 742,
  "functionEndLine": 776,
  "numCommitsSeen": 16,
  "timeTaken": 990,
  "changeHistory": [
    "db890eef3208cc557476fa510f7a253ba22bc68a"
  ],
  "changeHistoryShort": {
    "db890eef3208cc557476fa510f7a253ba22bc68a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "db890eef3208cc557476fa510f7a253ba22bc68a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11017. KMS delegation token secret manager should be able to use zookeeper as store. (asuresh via tucu)\n",
      "commitDate": "20/09/14 8:21 AM",
      "commitName": "db890eef3208cc557476fa510f7a253ba22bc68a",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,35 @@\n+  private void addOrUpdateDelegationKey(DelegationKey key, boolean isUpdate)\n+      throws IOException {\n+    String nodeCreatePath \u003d\n+        getNodePath(ZK_DTSM_MASTER_KEY_ROOT,\n+            DELEGATION_KEY_PREFIX + key.getKeyId());\n+    ByteArrayOutputStream os \u003d new ByteArrayOutputStream();\n+    DataOutputStream fsOut \u003d new DataOutputStream(os);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Storing ZKDTSMDelegationKey_\" + key.getKeyId());\n+    }\n+    key.write(fsOut);\n+    try {\n+      if (zkClient.checkExists().forPath(nodeCreatePath) !\u003d null) {\n+        zkClient.setData().forPath(nodeCreatePath, os.toByteArray())\n+            .setVersion(-1);\n+        if (!isUpdate) {\n+          LOG.debug(\"Key with path [\" + nodeCreatePath\n+              + \"] already exists.. Updating !!\");\n+        }\n+      } else {\n+        zkClient.create().withMode(CreateMode.PERSISTENT)\n+            .forPath(nodeCreatePath, os.toByteArray());\n+        if (isUpdate) {\n+          LOG.debug(\"Updating non existent Key path [\" + nodeCreatePath\n+              + \"].. Adding new !!\");\n+        }\n+      }\n+    } catch (KeeperException.NodeExistsException ne) {\n+      LOG.debug(nodeCreatePath + \" znode already exists !!\");\n+    } catch (Exception ex) {\n+      throw new IOException(ex);\n+    } finally {\n+      os.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addOrUpdateDelegationKey(DelegationKey key, boolean isUpdate)\n      throws IOException {\n    String nodeCreatePath \u003d\n        getNodePath(ZK_DTSM_MASTER_KEY_ROOT,\n            DELEGATION_KEY_PREFIX + key.getKeyId());\n    ByteArrayOutputStream os \u003d new ByteArrayOutputStream();\n    DataOutputStream fsOut \u003d new DataOutputStream(os);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Storing ZKDTSMDelegationKey_\" + key.getKeyId());\n    }\n    key.write(fsOut);\n    try {\n      if (zkClient.checkExists().forPath(nodeCreatePath) !\u003d null) {\n        zkClient.setData().forPath(nodeCreatePath, os.toByteArray())\n            .setVersion(-1);\n        if (!isUpdate) {\n          LOG.debug(\"Key with path [\" + nodeCreatePath\n              + \"] already exists.. Updating !!\");\n        }\n      } else {\n        zkClient.create().withMode(CreateMode.PERSISTENT)\n            .forPath(nodeCreatePath, os.toByteArray());\n        if (isUpdate) {\n          LOG.debug(\"Updating non existent Key path [\" + nodeCreatePath\n              + \"].. Adding new !!\");\n        }\n      }\n    } catch (KeeperException.NodeExistsException ne) {\n      LOG.debug(nodeCreatePath + \" znode already exists !!\");\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    } finally {\n      os.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/ZKDelegationTokenSecretManager.java"
    }
  }
}