{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Base64.java",
  "functionName": "encode",
  "functionId": "encode___data-byte[](modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/Base64.java",
  "functionStartLine": 194,
  "functionEndLine": 236,
  "numCommitsSeen": 1,
  "timeTaken": 569,
  "changeHistory": [
    "b4c23043d38325aad8af4488caca115eae789f07"
  ],
  "changeHistoryShort": {
    "b4c23043d38325aad8af4488caca115eae789f07": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4c23043d38325aad8af4488caca115eae789f07": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15757. ABFS: remove dependency on common-codec Base64.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b4c23043d38325aad8af4488caca115eae789f07",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,43 @@\n+  public static String encode(final byte[] data) {\n+    final StringBuilder builder \u003d new StringBuilder();\n+    final int dataRemainder \u003d data.length % 3;\n+\n+    int j \u003d 0;\n+    int n \u003d 0;\n+    for (; j \u003c data.length; j +\u003d 3) {\n+\n+      if (j \u003c data.length - dataRemainder) {\n+        n \u003d ((data[j] \u0026 0xFF) \u003c\u003c 16) + ((data[j + 1] \u0026 0xFF) \u003c\u003c 8) + (data[j + 2] \u0026 0xFF);\n+      }\n+      else {\n+        if (dataRemainder \u003d\u003d 1) {\n+          n \u003d (data[j] \u0026 0xFF) \u003c\u003c 16;\n+        }\n+        else if (dataRemainder \u003d\u003d 2) {\n+          n \u003d ((data[j] \u0026 0xFF) \u003c\u003c 16) + ((data[j + 1] \u0026 0xFF) \u003c\u003c 8);\n+        }\n+      }\n+\n+      // Left here for readability\n+      // byte char1 \u003d (byte) ((n \u003e\u003e\u003e 18) \u0026 0x3F);\n+      // byte char2 \u003d (byte) ((n \u003e\u003e\u003e 12) \u0026 0x3F);\n+      // byte char3 \u003d (byte) ((n \u003e\u003e\u003e 6) \u0026 0x3F);\n+      // byte char4 \u003d (byte) (n \u0026 0x3F);\n+      builder.append(BASE_64_CHARS.charAt((byte) ((n \u003e\u003e\u003e 18) \u0026 0x3F)));\n+      builder.append(BASE_64_CHARS.charAt((byte) ((n \u003e\u003e\u003e 12) \u0026 0x3F)));\n+      builder.append(BASE_64_CHARS.charAt((byte) ((n \u003e\u003e\u003e 6) \u0026 0x3F)));\n+      builder.append(BASE_64_CHARS.charAt((byte) (n \u0026 0x3F)));\n+    }\n+\n+    final int bLength \u003d builder.length();\n+\n+    // append \u0027\u003d\u0027 to pad\n+    if (data.length % 3 \u003d\u003d 1) {\n+      builder.replace(bLength - 2, bLength, \"\u003d\u003d\");\n+    }\n+    else if (data.length % 3 \u003d\u003d 2) {\n+      builder.replace(bLength - 1, bLength, \"\u003d\");\n+    }\n+\n+    return builder.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String encode(final byte[] data) {\n    final StringBuilder builder \u003d new StringBuilder();\n    final int dataRemainder \u003d data.length % 3;\n\n    int j \u003d 0;\n    int n \u003d 0;\n    for (; j \u003c data.length; j +\u003d 3) {\n\n      if (j \u003c data.length - dataRemainder) {\n        n \u003d ((data[j] \u0026 0xFF) \u003c\u003c 16) + ((data[j + 1] \u0026 0xFF) \u003c\u003c 8) + (data[j + 2] \u0026 0xFF);\n      }\n      else {\n        if (dataRemainder \u003d\u003d 1) {\n          n \u003d (data[j] \u0026 0xFF) \u003c\u003c 16;\n        }\n        else if (dataRemainder \u003d\u003d 2) {\n          n \u003d ((data[j] \u0026 0xFF) \u003c\u003c 16) + ((data[j + 1] \u0026 0xFF) \u003c\u003c 8);\n        }\n      }\n\n      // Left here for readability\n      // byte char1 \u003d (byte) ((n \u003e\u003e\u003e 18) \u0026 0x3F);\n      // byte char2 \u003d (byte) ((n \u003e\u003e\u003e 12) \u0026 0x3F);\n      // byte char3 \u003d (byte) ((n \u003e\u003e\u003e 6) \u0026 0x3F);\n      // byte char4 \u003d (byte) (n \u0026 0x3F);\n      builder.append(BASE_64_CHARS.charAt((byte) ((n \u003e\u003e\u003e 18) \u0026 0x3F)));\n      builder.append(BASE_64_CHARS.charAt((byte) ((n \u003e\u003e\u003e 12) \u0026 0x3F)));\n      builder.append(BASE_64_CHARS.charAt((byte) ((n \u003e\u003e\u003e 6) \u0026 0x3F)));\n      builder.append(BASE_64_CHARS.charAt((byte) (n \u0026 0x3F)));\n    }\n\n    final int bLength \u003d builder.length();\n\n    // append \u0027\u003d\u0027 to pad\n    if (data.length % 3 \u003d\u003d 1) {\n      builder.replace(bLength - 2, bLength, \"\u003d\u003d\");\n    }\n    else if (data.length % 3 \u003d\u003d 2) {\n      builder.replace(bLength - 1, bLength, \"\u003d\");\n    }\n\n    return builder.toString();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/Base64.java"
    }
  }
}