{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BalanceJob.java",
  "functionName": "execute",
  "functionId": "execute",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceJob.java",
  "functionStartLine": 119,
  "functionEndLine": 151,
  "numCommitsSeen": 1,
  "timeTaken": 373,
  "changeHistory": [
    "1983eea62def58fb769f44c1d41dc29690274809"
  ],
  "changeHistoryShort": {
    "1983eea62def58fb769f44c1d41dc29690274809": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1983eea62def58fb769f44c1d41dc29690274809": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-15340. RBF: Implement BalanceProcedureScheduler basic framework. Contributed by Jinglun.\n",
      "commitDate": "19/05/20 7:39 PM",
      "commitName": "1983eea62def58fb769f44c1d41dc29690274809",
      "commitAuthor": "Yiqun Lin",
      "diff": "@@ -0,0 +1,33 @@\n+  public void execute() {\n+    boolean quit \u003d false;\n+    try {\n+      while (!jobDone \u0026\u0026 !quit \u0026\u0026 scheduler.isRunning()) {\n+        if (curProcedure \u003d\u003d null) { // Job done.\n+          finish(null);\n+          quit \u003d true;\n+        } else {\n+          if (curProcedure \u003d\u003d firstProcedure || lastProcedure !\u003d curProcedure) {\n+            LOG.info(\"Start procedure {}, last procedure is {}\",\n+                curProcedure.name(),\n+                lastProcedure \u003d\u003d null ? null : lastProcedure.name());\n+          }\n+          if (curProcedure.execute()) {\n+            lastProcedure \u003d curProcedure;\n+            curProcedure \u003d next();\n+          }\n+          if (!scheduler.writeJournal(this)) {\n+            quit \u003d true; // Write journal failed. Simply quit because this job\n+                         // has already been added to the recoverQueue.\n+            LOG.debug(\"Write journal failed. Quit and wait for recovery.\");\n+          }\n+        }\n+      }\n+    } catch (BalanceProcedure.RetryException tre) {\n+      scheduler.delay(this, curProcedure.delayMillisBeforeRetry());\n+    } catch (Exception e) {\n+      finish(e);\n+    } catch (Throwable t) {\n+      IOException err \u003d new IOException(\"Got throwable error.\", t);\n+      finish(err);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() {\n    boolean quit \u003d false;\n    try {\n      while (!jobDone \u0026\u0026 !quit \u0026\u0026 scheduler.isRunning()) {\n        if (curProcedure \u003d\u003d null) { // Job done.\n          finish(null);\n          quit \u003d true;\n        } else {\n          if (curProcedure \u003d\u003d firstProcedure || lastProcedure !\u003d curProcedure) {\n            LOG.info(\"Start procedure {}, last procedure is {}\",\n                curProcedure.name(),\n                lastProcedure \u003d\u003d null ? null : lastProcedure.name());\n          }\n          if (curProcedure.execute()) {\n            lastProcedure \u003d curProcedure;\n            curProcedure \u003d next();\n          }\n          if (!scheduler.writeJournal(this)) {\n            quit \u003d true; // Write journal failed. Simply quit because this job\n                         // has already been added to the recoverQueue.\n            LOG.debug(\"Write journal failed. Quit and wait for recovery.\");\n          }\n        }\n      }\n    } catch (BalanceProcedure.RetryException tre) {\n      scheduler.delay(this, curProcedure.delayMillisBeforeRetry());\n    } catch (Exception e) {\n      finish(e);\n    } catch (Throwable t) {\n      IOException err \u003d new IOException(\"Got throwable error.\", t);\n      finish(err);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceJob.java"
    }
  }
}