{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeHeartbeatRequestPBImpl.java",
  "functionName": "addLogAggregationStatusForAppsToProto",
  "functionId": "addLogAggregationStatusForAppsToProto",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/protocolrecords/impl/pb/NodeHeartbeatRequestPBImpl.java",
  "functionStartLine": 140,
  "functionEndLine": 172,
  "numCommitsSeen": 19,
  "timeTaken": 1381,
  "changeHistory": [
    "15ccd967ee3e7046a50522089f67ba01f36ec76a",
    "92431c961741747b5d6442f4025016d48d9a6863"
  ],
  "changeHistoryShort": {
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Ybodychange",
    "92431c961741747b5d6442f4025016d48d9a6863": "Yintroduced"
  },
  "changeHistoryDetails": {
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 34.08,
      "commitsBetweenForRepo": 367,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,33 @@\n   private void addLogAggregationStatusForAppsToProto() {\n     maybeInitBuilder();\n     builder.clearLogAggregationReportsForApps();\n-    for (Entry\u003cApplicationId, LogAggregationReport\u003e entry : logAggregationReportsForApps\n-      .entrySet()) {\n-      builder.addLogAggregationReportsForApps(LogAggregationReportsForAppsProto\n-        .newBuilder().setAppId(convertToProtoFormat(entry.getKey()))\n-        .setLogAggregationReport(convertToProtoFormat(entry.getValue())));\n+    if (this.logAggregationReportsForApps \u003d\u003d null) {\n+      return;\n     }\n+    Iterable\u003cLogAggregationReportProto\u003e it \u003d\n+        new Iterable\u003cLogAggregationReportProto\u003e() {\n+          @Override\n+          public Iterator\u003cLogAggregationReportProto\u003e iterator() {\n+            return new Iterator\u003cLogAggregationReportProto\u003e() {\n+              private Iterator\u003cLogAggregationReport\u003e iter \u003d\n+                  logAggregationReportsForApps.iterator();\n+\n+              @Override\n+              public boolean hasNext() {\n+                return iter.hasNext();\n+              }\n+\n+              @Override\n+              public LogAggregationReportProto next() {\n+                return convertToProtoFormat(iter.next());\n+              }\n+\n+              @Override\n+              public void remove() {\n+                throw new UnsupportedOperationException();\n+              }\n+            };\n+          }\n+        };\n+    builder.addAllLogAggregationReportsForApps(it);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addLogAggregationStatusForAppsToProto() {\n    maybeInitBuilder();\n    builder.clearLogAggregationReportsForApps();\n    if (this.logAggregationReportsForApps \u003d\u003d null) {\n      return;\n    }\n    Iterable\u003cLogAggregationReportProto\u003e it \u003d\n        new Iterable\u003cLogAggregationReportProto\u003e() {\n          @Override\n          public Iterator\u003cLogAggregationReportProto\u003e iterator() {\n            return new Iterator\u003cLogAggregationReportProto\u003e() {\n              private Iterator\u003cLogAggregationReport\u003e iter \u003d\n                  logAggregationReportsForApps.iterator();\n\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n\n              @Override\n              public LogAggregationReportProto next() {\n                return convertToProtoFormat(iter.next());\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        };\n    builder.addAllLogAggregationReportsForApps(it);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/protocolrecords/impl/pb/NodeHeartbeatRequestPBImpl.java",
      "extendedDetails": {}
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,10 @@\n+  private void addLogAggregationStatusForAppsToProto() {\n+    maybeInitBuilder();\n+    builder.clearLogAggregationReportsForApps();\n+    for (Entry\u003cApplicationId, LogAggregationReport\u003e entry : logAggregationReportsForApps\n+      .entrySet()) {\n+      builder.addLogAggregationReportsForApps(LogAggregationReportsForAppsProto\n+        .newBuilder().setAppId(convertToProtoFormat(entry.getKey()))\n+        .setLogAggregationReport(convertToProtoFormat(entry.getValue())));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addLogAggregationStatusForAppsToProto() {\n    maybeInitBuilder();\n    builder.clearLogAggregationReportsForApps();\n    for (Entry\u003cApplicationId, LogAggregationReport\u003e entry : logAggregationReportsForApps\n      .entrySet()) {\n      builder.addLogAggregationReportsForApps(LogAggregationReportsForAppsProto\n        .newBuilder().setAppId(convertToProtoFormat(entry.getKey()))\n        .setLogAggregationReport(convertToProtoFormat(entry.getValue())));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/protocolrecords/impl/pb/NodeHeartbeatRequestPBImpl.java"
    }
  }
}