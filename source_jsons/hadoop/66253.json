{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "printSimulationInfo",
  "functionId": "printSimulationInfo",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 880,
  "functionEndLine": 925,
  "numCommitsSeen": 40,
  "timeTaken": 1624,
  "changeHistory": [
    "ba8136615ab66c450884614557eddc6509d63b7c",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "ba8136615ab66c450884614557eddc6509d63b7c": "Ybodychange",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba8136615ab66c450884614557eddc6509d63b7c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)\n\nChange-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b\n",
      "commitDate": "09/11/17 12:09 PM",
      "commitName": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "27/10/17 2:41 PM",
      "commitNameOld": "99880d0a16727c770da053464da87960c5b02065",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 12.94,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,46 @@\n   private void printSimulationInfo() {\n     if (printSimulation) {\n       // node\n       LOG.info(\"------------------------------------\");\n       LOG.info(\"# nodes \u003d {}, # racks \u003d {}, capacity \" +\n-              \"of each node {} MB memory and {} vcores.\",\n-              numNMs, numRacks, nmMemoryMB, nmVCores);\n+              \"of each node {}.\",\n+              numNMs, numRacks, nodeManagerResource);\n       LOG.info(\"------------------------------------\");\n       // job\n       LOG.info(\"# applications \u003d {}, # total \" +\n               \"tasks \u003d {}, average # tasks per application \u003d {}\",\n               numAMs, numTasks, (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n       LOG.info(\"JobId\\tQueue\\tAMType\\tDuration\\t#Tasks\");\n       for (Map.Entry\u003cString, AMSimulator\u003e entry : amMap.entrySet()) {\n         AMSimulator am \u003d entry.getValue();\n         LOG.info(entry.getKey() + \"\\t\" + am.getQueue() + \"\\t\" + am.getAMType()\n             + \"\\t\" + am.getDuration() + \"\\t\" + am.getNumTasks());\n       }\n       LOG.info(\"------------------------------------\");\n       // queue\n       LOG.info(\"number of queues \u003d {}  average number of apps \u003d {}\",\n           queueAppNumMap.size(),\n           (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n       LOG.info(\"------------------------------------\");\n       // runtime\n       LOG.info(\"estimated simulation time is {} seconds\",\n           (long)(Math.ceil(maxRuntime / 1000.0)));\n       LOG.info(\"------------------------------------\");\n     }\n     // package these information in the simulateInfoMap used by other places\n     simulateInfoMap.put(\"Number of racks\", numRacks);\n     simulateInfoMap.put(\"Number of nodes\", numNMs);\n-    simulateInfoMap.put(\"Node memory (MB)\", nmMemoryMB);\n-    simulateInfoMap.put(\"Node VCores\", nmVCores);\n+    simulateInfoMap.put(\"Node memory (MB)\",\n+        nodeManagerResource.getResourceValue(ResourceInformation.MEMORY_URI));\n+    simulateInfoMap.put(\"Node VCores\",\n+        nodeManagerResource.getResourceValue(ResourceInformation.VCORES_URI));\n     simulateInfoMap.put(\"Number of applications\", numAMs);\n     simulateInfoMap.put(\"Number of tasks\", numTasks);\n     simulateInfoMap.put(\"Average tasks per applicaion\",\n             (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n     simulateInfoMap.put(\"Number of queues\", queueAppNumMap.size());\n     simulateInfoMap.put(\"Average applications per queue\",\n             (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n     simulateInfoMap.put(\"Estimated simulate time (s)\",\n             (long)(Math.ceil(maxRuntime / 1000.0)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printSimulationInfo() {\n    if (printSimulation) {\n      // node\n      LOG.info(\"------------------------------------\");\n      LOG.info(\"# nodes \u003d {}, # racks \u003d {}, capacity \" +\n              \"of each node {}.\",\n              numNMs, numRacks, nodeManagerResource);\n      LOG.info(\"------------------------------------\");\n      // job\n      LOG.info(\"# applications \u003d {}, # total \" +\n              \"tasks \u003d {}, average # tasks per application \u003d {}\",\n              numAMs, numTasks, (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n      LOG.info(\"JobId\\tQueue\\tAMType\\tDuration\\t#Tasks\");\n      for (Map.Entry\u003cString, AMSimulator\u003e entry : amMap.entrySet()) {\n        AMSimulator am \u003d entry.getValue();\n        LOG.info(entry.getKey() + \"\\t\" + am.getQueue() + \"\\t\" + am.getAMType()\n            + \"\\t\" + am.getDuration() + \"\\t\" + am.getNumTasks());\n      }\n      LOG.info(\"------------------------------------\");\n      // queue\n      LOG.info(\"number of queues \u003d {}  average number of apps \u003d {}\",\n          queueAppNumMap.size(),\n          (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n      LOG.info(\"------------------------------------\");\n      // runtime\n      LOG.info(\"estimated simulation time is {} seconds\",\n          (long)(Math.ceil(maxRuntime / 1000.0)));\n      LOG.info(\"------------------------------------\");\n    }\n    // package these information in the simulateInfoMap used by other places\n    simulateInfoMap.put(\"Number of racks\", numRacks);\n    simulateInfoMap.put(\"Number of nodes\", numNMs);\n    simulateInfoMap.put(\"Node memory (MB)\",\n        nodeManagerResource.getResourceValue(ResourceInformation.MEMORY_URI));\n    simulateInfoMap.put(\"Node VCores\",\n        nodeManagerResource.getResourceValue(ResourceInformation.VCORES_URI));\n    simulateInfoMap.put(\"Number of applications\", numAMs);\n    simulateInfoMap.put(\"Number of tasks\", numTasks);\n    simulateInfoMap.put(\"Average tasks per applicaion\",\n            (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n    simulateInfoMap.put(\"Number of queues\", queueAppNumMap.size());\n    simulateInfoMap.put(\"Average applications per queue\",\n            (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n    simulateInfoMap.put(\"Estimated simulate time (s)\",\n            (long)(Math.ceil(maxRuntime / 1000.0)));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "06/06/17 5:19 PM",
      "commitNameOld": "b65100c14bf9134de2bd8248dc62735682bee26c",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,44 @@\n   private void printSimulationInfo() {\n     if (printSimulation) {\n       // node\n       LOG.info(\"------------------------------------\");\n-      LOG.info(MessageFormat.format(\n-          \"# nodes \u003d {0}, # racks \u003d {1}, capacity \"\n-              + \"of each node {2} MB memory and {3} vcores.\",\n-          numNMs, numRacks, nmMemoryMB, nmVCores));\n+      LOG.info(\"# nodes \u003d {}, # racks \u003d {}, capacity \" +\n+              \"of each node {} MB memory and {} vcores.\",\n+              numNMs, numRacks, nmMemoryMB, nmVCores);\n       LOG.info(\"------------------------------------\");\n       // job\n-      LOG.info(MessageFormat.format(\n-          \"# applications \u003d {0}, # total \"\n-              + \"tasks \u003d {1}, average # tasks per application \u003d {2}\",\n-          numAMs, numTasks, (int) (Math.ceil((numTasks + 0.0) / numAMs))));\n+      LOG.info(\"# applications \u003d {}, # total \" +\n+              \"tasks \u003d {}, average # tasks per application \u003d {}\",\n+              numAMs, numTasks, (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n       LOG.info(\"JobId\\tQueue\\tAMType\\tDuration\\t#Tasks\");\n       for (Map.Entry\u003cString, AMSimulator\u003e entry : amMap.entrySet()) {\n         AMSimulator am \u003d entry.getValue();\n         LOG.info(entry.getKey() + \"\\t\" + am.getQueue() + \"\\t\" + am.getAMType()\n             + \"\\t\" + am.getDuration() + \"\\t\" + am.getNumTasks());\n       }\n       LOG.info(\"------------------------------------\");\n       // queue\n-      LOG.info(MessageFormat.format(\n-          \"number of queues \u003d {0}  average \" + \"number of apps \u003d {1}\",\n+      LOG.info(\"number of queues \u003d {}  average number of apps \u003d {}\",\n           queueAppNumMap.size(),\n-          (int) (Math.ceil((numAMs + 0.0) / queueAppNumMap.size()))));\n+          (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n       LOG.info(\"------------------------------------\");\n       // runtime\n-      LOG.info(\n-          MessageFormat.format(\"estimated simulation time is {0}\" + \" seconds\",\n-              (long) (Math.ceil(maxRuntime / 1000.0))));\n+      LOG.info(\"estimated simulation time is {} seconds\",\n+          (long)(Math.ceil(maxRuntime / 1000.0)));\n       LOG.info(\"------------------------------------\");\n     }\n     // package these information in the simulateInfoMap used by other places\n     simulateInfoMap.put(\"Number of racks\", numRacks);\n     simulateInfoMap.put(\"Number of nodes\", numNMs);\n     simulateInfoMap.put(\"Node memory (MB)\", nmMemoryMB);\n     simulateInfoMap.put(\"Node VCores\", nmVCores);\n     simulateInfoMap.put(\"Number of applications\", numAMs);\n     simulateInfoMap.put(\"Number of tasks\", numTasks);\n     simulateInfoMap.put(\"Average tasks per applicaion\",\n             (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n     simulateInfoMap.put(\"Number of queues\", queueAppNumMap.size());\n     simulateInfoMap.put(\"Average applications per queue\",\n             (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n     simulateInfoMap.put(\"Estimated simulate time (s)\",\n             (long)(Math.ceil(maxRuntime / 1000.0)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printSimulationInfo() {\n    if (printSimulation) {\n      // node\n      LOG.info(\"------------------------------------\");\n      LOG.info(\"# nodes \u003d {}, # racks \u003d {}, capacity \" +\n              \"of each node {} MB memory and {} vcores.\",\n              numNMs, numRacks, nmMemoryMB, nmVCores);\n      LOG.info(\"------------------------------------\");\n      // job\n      LOG.info(\"# applications \u003d {}, # total \" +\n              \"tasks \u003d {}, average # tasks per application \u003d {}\",\n              numAMs, numTasks, (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n      LOG.info(\"JobId\\tQueue\\tAMType\\tDuration\\t#Tasks\");\n      for (Map.Entry\u003cString, AMSimulator\u003e entry : amMap.entrySet()) {\n        AMSimulator am \u003d entry.getValue();\n        LOG.info(entry.getKey() + \"\\t\" + am.getQueue() + \"\\t\" + am.getAMType()\n            + \"\\t\" + am.getDuration() + \"\\t\" + am.getNumTasks());\n      }\n      LOG.info(\"------------------------------------\");\n      // queue\n      LOG.info(\"number of queues \u003d {}  average number of apps \u003d {}\",\n          queueAppNumMap.size(),\n          (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n      LOG.info(\"------------------------------------\");\n      // runtime\n      LOG.info(\"estimated simulation time is {} seconds\",\n          (long)(Math.ceil(maxRuntime / 1000.0)));\n      LOG.info(\"------------------------------------\");\n    }\n    // package these information in the simulateInfoMap used by other places\n    simulateInfoMap.put(\"Number of racks\", numRacks);\n    simulateInfoMap.put(\"Number of nodes\", numNMs);\n    simulateInfoMap.put(\"Node memory (MB)\", nmMemoryMB);\n    simulateInfoMap.put(\"Node VCores\", nmVCores);\n    simulateInfoMap.put(\"Number of applications\", numAMs);\n    simulateInfoMap.put(\"Number of tasks\", numTasks);\n    simulateInfoMap.put(\"Average tasks per applicaion\",\n            (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n    simulateInfoMap.put(\"Number of queues\", queueAppNumMap.size());\n    simulateInfoMap.put(\"Average applications per queue\",\n            (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n    simulateInfoMap.put(\"Estimated simulate time (s)\",\n            (long)(Math.ceil(maxRuntime / 1000.0)));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,44 @@\n+  private void printSimulationInfo() {\n+    if (printSimulation) {\n+      // node\n+      LOG.info(\"------------------------------------\");\n+      LOG.info(MessageFormat.format(\"# nodes \u003d {0}, # racks \u003d {1}, capacity \" +\n+              \"of each node {2} MB memory and {3} vcores.\",\n+              numNMs, numRacks, nmMemoryMB, nmVCores));\n+      LOG.info(\"------------------------------------\");\n+      // job\n+      LOG.info(MessageFormat.format(\"# applications \u003d {0}, # total \" +\n+              \"tasks \u003d {1}, average # tasks per application \u003d {2}\",\n+              numAMs, numTasks, (int)(Math.ceil((numTasks + 0.0) / numAMs))));\n+      LOG.info(\"JobId\\tQueue\\tAMType\\tDuration\\t#Tasks\");\n+      for (Map.Entry\u003cString, AMSimulator\u003e entry : amMap.entrySet()) {\n+        AMSimulator am \u003d entry.getValue();\n+        LOG.info(entry.getKey() + \"\\t\" + am.getQueue() + \"\\t\" + am.getAMType() \n+            + \"\\t\" + am.getDuration() + \"\\t\" + am.getNumTasks());\n+      }\n+      LOG.info(\"------------------------------------\");\n+      // queue\n+      LOG.info(MessageFormat.format(\"number of queues \u003d {0}  average \" +\n+              \"number of apps \u003d {1}\", queueAppNumMap.size(),\n+              (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size()))));\n+      LOG.info(\"------------------------------------\");\n+      // runtime\n+      LOG.info(MessageFormat.format(\"estimated simulation time is {0}\" +\n+              \" seconds\", (long)(Math.ceil(maxRuntime / 1000.0))));\n+      LOG.info(\"------------------------------------\");\n+    }\n+    // package these information in the simulateInfoMap used by other places\n+    simulateInfoMap.put(\"Number of racks\", numRacks);\n+    simulateInfoMap.put(\"Number of nodes\", numNMs);\n+    simulateInfoMap.put(\"Node memory (MB)\", nmMemoryMB);\n+    simulateInfoMap.put(\"Node VCores\", nmVCores);\n+    simulateInfoMap.put(\"Number of applications\", numAMs);\n+    simulateInfoMap.put(\"Number of tasks\", numTasks);\n+    simulateInfoMap.put(\"Average tasks per applicaion\",\n+            (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n+    simulateInfoMap.put(\"Number of queues\", queueAppNumMap.size());\n+    simulateInfoMap.put(\"Average applications per queue\",\n+            (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n+    simulateInfoMap.put(\"Estimated simulate time (s)\",\n+            (long)(Math.ceil(maxRuntime / 1000.0)));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printSimulationInfo() {\n    if (printSimulation) {\n      // node\n      LOG.info(\"------------------------------------\");\n      LOG.info(MessageFormat.format(\"# nodes \u003d {0}, # racks \u003d {1}, capacity \" +\n              \"of each node {2} MB memory and {3} vcores.\",\n              numNMs, numRacks, nmMemoryMB, nmVCores));\n      LOG.info(\"------------------------------------\");\n      // job\n      LOG.info(MessageFormat.format(\"# applications \u003d {0}, # total \" +\n              \"tasks \u003d {1}, average # tasks per application \u003d {2}\",\n              numAMs, numTasks, (int)(Math.ceil((numTasks + 0.0) / numAMs))));\n      LOG.info(\"JobId\\tQueue\\tAMType\\tDuration\\t#Tasks\");\n      for (Map.Entry\u003cString, AMSimulator\u003e entry : amMap.entrySet()) {\n        AMSimulator am \u003d entry.getValue();\n        LOG.info(entry.getKey() + \"\\t\" + am.getQueue() + \"\\t\" + am.getAMType() \n            + \"\\t\" + am.getDuration() + \"\\t\" + am.getNumTasks());\n      }\n      LOG.info(\"------------------------------------\");\n      // queue\n      LOG.info(MessageFormat.format(\"number of queues \u003d {0}  average \" +\n              \"number of apps \u003d {1}\", queueAppNumMap.size(),\n              (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size()))));\n      LOG.info(\"------------------------------------\");\n      // runtime\n      LOG.info(MessageFormat.format(\"estimated simulation time is {0}\" +\n              \" seconds\", (long)(Math.ceil(maxRuntime / 1000.0))));\n      LOG.info(\"------------------------------------\");\n    }\n    // package these information in the simulateInfoMap used by other places\n    simulateInfoMap.put(\"Number of racks\", numRacks);\n    simulateInfoMap.put(\"Number of nodes\", numNMs);\n    simulateInfoMap.put(\"Node memory (MB)\", nmMemoryMB);\n    simulateInfoMap.put(\"Node VCores\", nmVCores);\n    simulateInfoMap.put(\"Number of applications\", numAMs);\n    simulateInfoMap.put(\"Number of tasks\", numTasks);\n    simulateInfoMap.put(\"Average tasks per applicaion\",\n            (int)(Math.ceil((numTasks + 0.0) / numAMs)));\n    simulateInfoMap.put(\"Number of queues\", queueAppNumMap.size());\n    simulateInfoMap.put(\"Average applications per queue\",\n            (int)(Math.ceil((numAMs + 0.0) / queueAppNumMap.size())));\n    simulateInfoMap.put(\"Estimated simulate time (s)\",\n            (long)(Math.ceil(maxRuntime / 1000.0)));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}