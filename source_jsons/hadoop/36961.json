{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppsBlock.java",
  "functionName": "renderData",
  "functionId": "renderData___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
  "functionStartLine": 88,
  "functionEndLine": 217,
  "numCommitsSeen": 24,
  "timeTaken": 8585,
  "changeHistory": [
    "9520b2ad790bd8527033a03e7ee50da71a85df1d",
    "ef59ffd362b9a91be08cbdbaa15aafdf08f00bdc",
    "e3e7daa4f586648be5794cfe78f2f291cf104785",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "06159858868a9cbeefc31bc6be5ae48a59cc8a6c",
    "489f85933c508bc26de607b921e56e23b979fce8",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "19ee1859071509bba9ecd0a8a7dc6a47e2979c88",
    "308d63f382e1992ea2b8ccf3130edaaa751c644d",
    "3cc73773eb26f7469c99b25a76814d6fad0be28e",
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
    "52148767924baf423172d26f2c6d8a4cfc6e143f",
    "a8acdd65b3f0e8633050a1100136fd5e02ebdcfa",
    "b7dd3a4f04f712b7594c4e6e7ce50fd314f7c342",
    "9356cf8676fd18f78655e8a6f2e6c946997dbd40",
    "4a3dabd94fc3dddd9d7604b826065c23859d565f",
    "1fa8075794894b3e0053d251788277fb88e85533",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6"
  ],
  "changeHistoryShort": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": "Ybodychange",
    "ef59ffd362b9a91be08cbdbaa15aafdf08f00bdc": "Ybodychange",
    "e3e7daa4f586648be5794cfe78f2f291cf104785": "Ybodychange",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": "Ybodychange",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": "Ybodychange",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "06159858868a9cbeefc31bc6be5ae48a59cc8a6c": "Ybodychange",
    "489f85933c508bc26de607b921e56e23b979fce8": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "19ee1859071509bba9ecd0a8a7dc6a47e2979c88": "Ybodychange",
    "308d63f382e1992ea2b8ccf3130edaaa751c644d": "Ybodychange",
    "3cc73773eb26f7469c99b25a76814d6fad0be28e": "Ybodychange",
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8": "Ybodychange",
    "52148767924baf423172d26f2c6d8a4cfc6e143f": "Ybodychange",
    "a8acdd65b3f0e8633050a1100136fd5e02ebdcfa": "Ybodychange",
    "b7dd3a4f04f712b7594c4e6e7ce50fd314f7c342": "Ybodychange",
    "9356cf8676fd18f78655e8a6f2e6c946997dbd40": "Ybodychange",
    "4a3dabd94fc3dddd9d7604b826065c23859d565f": "Ybodychange",
    "1fa8075794894b3e0053d251788277fb88e85533": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10083. Provide utility to ask whether an application is in final status. Contributed by Adam Antal\n",
      "commitDate": "22/01/20 7:25 AM",
      "commitName": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "19/12/19 11:37 AM",
      "commitNameOld": "ef59ffd362b9a91be08cbdbaa15aafdf08f00bdc",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 33.82,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,132 +1,130 @@\n   protected void renderData(Block html) {\n \n     TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e tr \u003d html.table(\"#apps\").thead().tr();\n     for (ColumnHeader col : COLUMNS) {\n       tr \u003d tr.th(col.getSelector(), col.getCData());\n     }\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d tr.__().__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(\n             app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n-              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n-              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n-              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n-              : \"ApplicationMaster\";\n+              : Apps.isApplicationFinalState(app.getAppState()) ?\n+              \"History\" : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e tr \u003d html.table(\"#apps\").thead().tr();\n    for (ColumnHeader col : COLUMNS) {\n      tr \u003d tr.th(col.getSelector(), col.getCData());\n    }\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d tr.__().__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : Apps.isApplicationFinalState(app.getAppState()) ?\n              \"History\" : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "ef59ffd362b9a91be08cbdbaa15aafdf08f00bdc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10038. [UI] Finish Time is not correctly parsed in the RM Apps page. Contributed by Inigo Goiri.\n",
      "commitDate": "19/12/19 11:37 AM",
      "commitName": "ef59ffd362b9a91be08cbdbaa15aafdf08f00bdc",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "30/10/19 8:26 AM",
      "commitNameOld": "e3e7daa4f586648be5794cfe78f2f291cf104785",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 50.17,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,146 +1,132 @@\n   protected void renderData(Block html) {\n-    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n-        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n-          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n-          .th(\".apptag\", \"Application Tags\")\n-          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n-          .th(\".starttime\", \"StartTime\")\n-          .th(\"launchtime\", \"LaunchTime\")\n-          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n-          .th(\".finalstatus\", \"FinalStatus\")\n-          .th(\".runningcontainer\", \"Running Containers\")\n-          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n-          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n-          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n-          .th(\".reservedMemory\", \"Reserved Memory MB\")\n-          .th(\".queuePercentage\", \"% of Queue\")\n-          .th(\".clusterPercentage\", \"% of Cluster\")\n-          .th(\".progress\", \"Progress\")\n-          .th(\".ui\", \"Tracking UI\")\n-          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n-          .__().tbody();\n+\n+    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e tr \u003d html.table(\"#apps\").thead().tr();\n+    for (ColumnHeader col : COLUMNS) {\n+      tr \u003d tr.th(col.getSelector(), col.getCData());\n+    }\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d tr.__().__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(\n             app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n\n    TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e tr \u003d html.table(\"#apps\").thead().tr();\n    for (ColumnHeader col : COLUMNS) {\n      tr \u003d tr.th(col.getSelector(), col.getCData());\n    }\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d tr.__().__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "e3e7daa4f586648be5794cfe78f2f291cf104785": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9889. [UI] Add Application Tag column to RM All Applications table. Contributed by Kinga Marton\n",
      "commitDate": "30/10/19 8:26 AM",
      "commitName": "e3e7daa4f586648be5794cfe78f2f291cf104785",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "13/07/18 8:42 AM",
      "commitNameOld": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 473.99,
      "commitsBetweenForRepo": 3645,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,146 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n+          .th(\".apptag\", \"Application Tags\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\"launchtime\", \"LaunchTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".reservedCpu\", \"Reserved CPU VCores\")\n           .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n           .__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n+          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(\n+            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n           StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".apptag\", \"Application Tags\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\"launchtime\", \"LaunchTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n          .__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(\n            app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "17/04/18 11:15 AM",
      "commitNameOld": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 55.89,
      "commitsBetweenForRepo": 937,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,141 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\"launchtime\", \"LaunchTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".reservedCpu\", \"Reserved CPU VCores\")\n           .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n           .__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n-          StringEscapeUtils.escapeJavaScript(\n-              StringEscapeUtils.escapeHtml(app.getUser())))\n+          StringEscapeUtils.escapeEcmaScript(\n+              StringEscapeUtils.escapeHtml4(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n-          StringEscapeUtils.escapeJavaScript(\n-              StringEscapeUtils.escapeHtml(app.getName())))\n+          StringEscapeUtils.escapeEcmaScript(\n+              StringEscapeUtils.escapeHtml4(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\"launchtime\", \"LaunchTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n          .__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 11:15 AM",
      "commitName": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 6:04 AM",
      "commitNameOld": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,141 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n+          .th(\"launchtime\", \"LaunchTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".reservedCpu\", \"Reserved CPU VCores\")\n           .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n           .__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n+        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\"launchtime\", \"LaunchTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n          .__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\"\n\nThis reverts commit 0c14b6f0d80d847be7ef3eda1614eadbf835181c.\n",
      "commitDate": "17/04/18 6:04 AM",
      "commitName": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 5:59 AM",
      "commitNameOld": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,139 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n-          .th(\"launchtime\", \"LaunchTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".reservedCpu\", \"Reserved CPU VCores\")\n           .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n           .__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n-        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n          .__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 5:59 AM",
      "commitName": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "10/09/17 9:58 PM",
      "commitNameOld": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 218.33,
      "commitsBetweenForRepo": 1669,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,141 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n+          .th(\"launchtime\", \"LaunchTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".reservedCpu\", \"Reserved CPU VCores\")\n           .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n           .__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n+        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\"launchtime\", \"LaunchTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n          .__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getLaunchTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/07/17 3:02 AM",
      "commitNameOld": "06159858868a9cbeefc31bc6be5ae48a59cc8a6c",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 18.59,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,139 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".reservedCpu\", \"Reserved CPU VCores\")\n           .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n-          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n-          ._().tbody();\n+          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n+          .__().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getReservedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getReservedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n-      ._(\"var appsTableData\u003d\" + appsTableData)._();\n+      .__(\"var appsTableData\u003d\" + appsTableData).__();\n \n-    tbody._()._();\n+    tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\").__()\n          .__().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      .__(\"var appsTableData\u003d\" + appsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "06159858868a9cbeefc31bc6be5ae48a59cc8a6c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6752. Display reserved resources in web UI per application\n(Contributed by Abdullah Yousufi via Daniel Templeton)\n",
      "commitDate": "09/07/17 3:02 AM",
      "commitName": "06159858868a9cbeefc31bc6be5ae48a59cc8a6c",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "16/05/17 7:26 AM",
      "commitNameOld": "489f85933c508bc26de607b921e56e23b979fce8",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 53.82,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,139 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n+          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n+          .th(\".reservedMemory\", \"Reserved Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMApp rmApp \u003d rm.getRMContext().getRMApps()\n           .get(appAttemptId.getApplicationId());\n       if (rmApp !\u003d null) {\n         RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         Set\u003cString\u003e nodes \u003d\n             null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n         if (nodes !\u003d null) {\n           blacklistedNodesCount \u003d String.valueOf(nodes.size());\n         }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n+        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n+            .valueOf(app.getReservedCpuVcores()))\n+        .append(\"\\\",\\\"\")\n+        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n+            String.valueOf(app.getReservedMemoryMB()))\n+        .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".reservedCpu\", \"Reserved CPU VCores\")\n          .th(\".reservedMemory\", \"Reserved Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getReservedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getReservedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getReservedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "489f85933c508bc26de607b921e56e23b979fce8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6603. NPE in RMAppsBlock. Contributed by Jason Lowe\n",
      "commitDate": "16/05/17 7:26 AM",
      "commitName": "489f85933c508bc26de607b921e56e23b979fce8",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 335.68,
      "commitsBetweenForRepo": 2219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,131 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n           app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n-      RMAppAttempt appAttempt \u003d\n-          rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n-              .getAppAttempts().get(appAttemptId);\n-      Set\u003cString\u003e nodes \u003d\n-          null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n-      if (nodes !\u003d null) {\n-        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n+      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n+          .get(appAttemptId.getApplicationId());\n+      if (rmApp !\u003d null) {\n+        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n+        Set\u003cString\u003e nodes \u003d\n+            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n+        if (nodes !\u003d null) {\n+          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n+        }\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMApp rmApp \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId());\n      if (rmApp !\u003d null) {\n        RMAppAttempt appAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        Set\u003cString\u003e nodes \u003d\n            null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n        if (nodes !\u003d null) {\n          blacklistedNodesCount \u003d String.valueOf(nodes.size());\n        }\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "04/03/16 11:32 PM",
      "commitNameOld": "19ee1859071509bba9ecd0a8a7dc6a47e2979c88",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 101.61,
      "commitsBetweenForRepo": 627,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,129 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n-      ApplicationAttemptId appAttemptId \u003d\n-          ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n+      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n+          app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n       RMAppAttempt appAttempt \u003d\n           rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n               .getAppAttempts().get(appAttemptId);\n       Set\u003cString\u003e nodes \u003d\n           null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d ApplicationAttemptId.fromString(\n          app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMAppAttempt appAttempt \u003d\n          rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n              .getAppAttempts().get(appAttemptId);\n      Set\u003cString\u003e nodes \u003d\n          null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "19ee1859071509bba9ecd0a8a7dc6a47e2979c88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4763. RMApps Page crashes with NPE. (Bibin A Chundatt via rohithsharmaks)\n",
      "commitDate": "04/03/16 11:32 PM",
      "commitName": "19ee1859071509bba9ecd0a8a7dc6a47e2979c88",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "04/02/16 12:02 AM",
      "commitNameOld": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 29.98,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,129 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d\n           ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n-      Set\u003cString\u003e nodes \u003d rm.getRMContext().getRMApps()\n-          .get(appAttemptId.getApplicationId()).getAppAttempts()\n-          .get(appAttemptId).getBlacklistedNodes();\n+      RMAppAttempt appAttempt \u003d\n+          rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n+              .getAppAttempts().get(appAttemptId);\n+      Set\u003cString\u003e nodes \u003d\n+          null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d\n          ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      RMAppAttempt appAttempt \u003d\n          rm.getRMContext().getRMApps().get(appAttemptId.getApplicationId())\n              .getAppAttempts().get(appAttemptId);\n      Set\u003cString\u003e nodes \u003d\n          null \u003d\u003d appAttempt ? null : appAttempt.getBlacklistedNodes();\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "308d63f382e1992ea2b8ccf3130edaaa751c644d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4307. Display blacklisted nodes for AM container in the RM web UI. Contributed by Naganarasimha G R.\n",
      "commitDate": "04/02/16 12:02 AM",
      "commitName": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/10/15 1:07 PM",
      "commitNameOld": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 100.5,
      "commitsBetweenForRepo": 673,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,126 +1,127 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".queuePercentage\", \"% of Queue\")\n           .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\")\n           .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       ApplicationAttemptId appAttemptId \u003d\n           ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n       String queuePercent \u003d \"N/A\";\n       String clusterPercent \u003d \"N/A\";\n       if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n         queuePercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport()\n                 .getQueueUsagePercentage());\n         clusterPercent \u003d String.format(\"%.1f\",\n             appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n       }\n \n       String blacklistedNodesCount \u003d \"N/A\";\n-      Set\u003cString\u003e nodes \u003d\n-          RMAppAttemptBlock.getBlacklistedNodes(rm, appAttemptId);\n+      Set\u003cString\u003e nodes \u003d rm.getRMContext().getRMApps()\n+          .get(appAttemptId.getApplicationId()).getAppAttempts()\n+          .get(appAttemptId).getBlacklistedNodes();\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n             String.valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         .append(queuePercent)\n         .append(\"\\\",\\\"\")\n         .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n           .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d\n          ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d rm.getRMContext().getRMApps()\n          .get(appAttemptId.getApplicationId()).getAppAttempts()\n          .get(appAttemptId).getBlacklistedNodes();\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "3cc73773eb26f7469c99b25a76814d6fad0be28e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4285. Display resource usage as percentage of queue and cluster in the RM UI (Varun Vasudev via wangda)\n",
      "commitDate": "26/10/15 1:07 PM",
      "commitName": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/08/15 10:13 PM",
      "commitNameOld": "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 80.62,
      "commitsBetweenForRepo": 547,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,126 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n           .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n+          .th(\".queuePercentage\", \"% of Queue\")\n+          .th(\".clusterPercentage\", \"% of Cluster\")\n           .th(\".progress\", \"Progress\")\n-          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n+          .th(\".ui\", \"Tracking UI\")\n+          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n+      ApplicationAttemptId appAttemptId \u003d\n+          ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n+      String queuePercent \u003d \"N/A\";\n+      String clusterPercent \u003d \"N/A\";\n+      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n+        queuePercent \u003d String.format(\"%.1f\",\n+            appReport.getApplicationResourceUsageReport()\n+                .getQueueUsagePercentage());\n+        clusterPercent \u003d String.format(\"%.1f\",\n+            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n+      }\n+\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n-          RMAppAttemptBlock\n-            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n-              .getCurrentAppAttemptId()));\n+          RMAppAttemptBlock.getBlacklistedNodes(rm, appAttemptId);\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getUser())))\n+          StringEscapeUtils.escapeJavaScript(\n+              StringEscapeUtils.escapeHtml(app.getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n-          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getName())))\n+          StringEscapeUtils.escapeJavaScript(\n+              StringEscapeUtils.escapeHtml(app.getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n              .getQueue()))).append(\"\\\",\\\"\").append(String\n              .valueOf(app.getPriority()))\n         .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n-        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n-            .valueOf(app.getAllocatedMemoryMB()))\n+        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n+            String.valueOf(app.getAllocatedMemoryMB()))\n+        .append(\"\\\",\\\"\")\n+        .append(queuePercent)\n+        .append(\"\\\",\\\"\")\n+        .append(clusterPercent)\n         .append(\"\\\",\\\"\")\n         // Progress bar\n-        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n+          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".queuePercentage\", \"% of Queue\")\n          .th(\".clusterPercentage\", \"% of Cluster\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\")\n          .th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      ApplicationAttemptId appAttemptId \u003d\n          ConverterUtils.toApplicationAttemptId(app.getCurrentAppAttemptId());\n      String queuePercent \u003d \"N/A\";\n      String clusterPercent \u003d \"N/A\";\n      if(appReport.getApplicationResourceUsageReport() !\u003d null) {\n        queuePercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport()\n                .getQueueUsagePercentage());\n        clusterPercent \u003d String.format(\"%.1f\",\n            appReport.getApplicationResourceUsageReport().getClusterUsagePercentage());\n      }\n\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock.getBlacklistedNodes(rm, appAttemptId);\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(app.getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" :\n            String.valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        .append(queuePercent)\n        .append(\"\\\",\\\"\")\n        .append(clusterPercent)\n        .append(\"\\\",\\\"\")\n        // Progress bar\n          .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3948. Display Application Priority in RM Web UI.(Sunil G via rohithsharmaks)\n",
      "commitDate": "06/08/15 10:13 PM",
      "commitName": "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "09/07/15 9:37 PM",
      "commitNameOld": "52148767924baf423172d26f2c6d8a4cfc6e143f",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 28.03,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,109 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n-          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n+          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n+          .th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n-            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n+             .getQueue()))).append(\"\\\",\\\"\").append(String\n+             .valueOf(app.getPriority()))\n+        .append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n               .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE)\n               || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n               : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\")\n          .th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(String\n             .valueOf(app.getPriority()))\n        .append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "52148767924baf423172d26f2c6d8a4cfc6e143f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3888. ApplicationMaster link is broken in RM WebUI when appstate is\nNEW. Contributed by Bibin A Chundatt\n",
      "commitDate": "09/07/15 9:37 PM",
      "commitName": "52148767924baf423172d26f2c6d8a4cfc6e143f",
      "commitAuthor": "Xuan",
      "commitDateOld": "30/05/15 1:36 PM",
      "commitNameOld": "a8acdd65b3f0e8633050a1100136fd5e02ebdcfa",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 40.33,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,106 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n           .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedCpuVcores()))\n         .append(\"\\\",\\\"\")\n         .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getAllocatedMemoryMB()))\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n-              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n-            .getTrackingUrl();\n+              || app.getTrackingUrl().equals(UNAVAILABLE)\n+              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n+              .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n-              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n-            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+              || app.getTrackingUrl().equals(UNAVAILABLE)\n+              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n+              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? null : app\n              .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE)\n              || app.getAppState() \u003d\u003d YarnApplicationState.NEW ? \"Unassigned\"\n              : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "a8acdd65b3f0e8633050a1100136fd5e02ebdcfa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3467. Expose allocatedMB, allocatedVCores, and runningContainers metrics on running Applications in RM Web UI. (Anubhav Dhoot via kasha)\n",
      "commitDate": "30/05/15 1:36 PM",
      "commitName": "a8acdd65b3f0e8633050a1100136fd5e02ebdcfa",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "05/05/15 10:40 AM",
      "commitNameOld": "b7dd3a4f04f712b7594c4e6e7ce50fd314f7c342",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 25.12,
      "commitsBetweenForRepo": 286,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,104 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n+          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n+          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n+        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n+            .valueOf(app.getAllocatedCpuVcores()))\n+        .append(\"\\\",\\\"\")\n+        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n+            .valueOf(app.getAllocatedMemoryMB()))\n+        .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n             .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n             .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".allocatedCpu\", \"Allocated CPU VCores\")\n          .th(\".allocatedMemory\", \"Allocated Memory MB\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedCpuVcores() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedCpuVcores()))\n        .append(\"\\\",\\\"\")\n        .append(app.getAllocatedMemoryMB() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getAllocatedMemoryMB()))\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n            .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "b7dd3a4f04f712b7594c4e6e7ce50fd314f7c342": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2123. Progress bars in Web UI always at 100% due to non-US locale.\nContributed by Akira AJISAKA\n",
      "commitDate": "05/05/15 10:40 AM",
      "commitName": "b7dd3a4f04f712b7594c4e6e7ce50fd314f7c342",
      "commitAuthor": "Xuan",
      "commitDateOld": "05/05/15 6:42 AM",
      "commitNameOld": "9356cf8676fd18f78655e8a6f2e6c946997dbd40",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,96 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n-      String percent \u003d String.format(\"%.1f\", app.getProgress());\n+      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n             .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n             .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n             .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d StringUtils.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n            .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "9356cf8676fd18f78655e8a6f2e6c946997dbd40": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3552. RM Web UI shows -1 running containers for completed apps. Contributed by Rohith\n",
      "commitDate": "05/05/15 6:42 AM",
      "commitName": "9356cf8676fd18f78655e8a6f2e6c946997dbd40",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "24/04/15 3:17 PM",
      "commitNameOld": "4a3dabd94fc3dddd9d7604b826065c23859d565f",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 10.64,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,96 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\")\n           .th(\".runningcontainer\", \"Running Containers\")\n           .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d String.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n-        .append(String.valueOf(app.getRunningContainers()))\n+        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n+            .valueOf(app.getRunningContainers()))\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n             .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n             .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d String.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(app.getRunningContainers() \u003d\u003d -1 ? \"N/A\" : String\n            .valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n            .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "4a3dabd94fc3dddd9d7604b826065c23859d565f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3406. Display count of running containers in the RM\u0027s Web UI. Contributed by Ryu Kobayashi.\n",
      "commitDate": "24/04/15 3:17 PM",
      "commitName": "4a3dabd94fc3dddd9d7604b826065c23859d565f",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "16/04/15 8:04 AM",
      "commitNameOld": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 8.3,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,95 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n-          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n+          .th(\".finalstatus\", \"FinalStatus\")\n+          .th(\".runningcontainer\", \"Running Containers\")\n+          .th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d String.format(\"%.1f\", app.getProgress());\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n+        .append(String.valueOf(app.getRunningContainers()))\n+        .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n             .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n             .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\")\n          .th(\".runningcontainer\", \"Running Containers\")\n          .th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d String.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        .append(String.valueOf(app.getRunningContainers()))\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n            .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "1fa8075794894b3e0053d251788277fb88e85533": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6300. Task list sort by task id broken. Contributed by Siqi Li.\n",
      "commitDate": "16/04/15 8:04 AM",
      "commitName": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "01/04/15 4:19 AM",
      "commitNameOld": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 15.16,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,91 @@\n   protected void renderData(Block html) {\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n           .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n           .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n           .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n           .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n           .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n           ._().tbody();\n \n     StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationReport appReport : appReports) {\n       // TODO: remove the following condition. It is still here because\n       // the history side implementation of ApplicationBaseProtocol\n       // hasn\u0027t filtering capability (YARN-1819).\n       if (!reqAppStates.isEmpty()\n           \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n         continue;\n       }\n \n       AppInfo app \u003d new AppInfo(appReport);\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock\n             .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n               .getCurrentAppAttemptId()));\n       if (nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String percent \u003d String.format(\"%.1f\", app.getProgress());\n-      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n       appsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"app\", app.getAppId()))\n         .append(\"\u0027\u003e\")\n         .append(app.getAppId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getUser())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getName())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getType())))\n         .append(\"\\\",\\\"\")\n         .append(\n           StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n             .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n         .append(\"\\\",\\\"\").append(app.getFinishedTime())\n         .append(\"\\\",\\\"\")\n         .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n         .append(\"\\\",\\\"\")\n         .append(app.getFinalAppStatus())\n         .append(\"\\\",\\\"\")\n         // Progress bar\n         .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n         .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n         .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n         .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n \n       String trackingURL \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n             .getTrackingUrl();\n \n       String trackingUI \u003d\n           app.getTrackingUrl() \u003d\u003d null\n               || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n             .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n               || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n               || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n               : \"ApplicationMaster\";\n       appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n         .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n         .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n \n     }\n     if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       appsTableData.delete(appsTableData.length() - 2,\n         appsTableData.length() - 1);\n     }\n     appsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var appsTableData\u003d\" + appsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d String.format(\"%.1f\", app.getProgress());\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n            .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,92 @@\n+  protected void renderData(Block html) {\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n+          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n+          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n+          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n+          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n+          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n+          ._().tbody();\n+\n+    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n+    for (ApplicationReport appReport : appReports) {\n+      // TODO: remove the following condition. It is still here because\n+      // the history side implementation of ApplicationBaseProtocol\n+      // hasn\u0027t filtering capability (YARN-1819).\n+      if (!reqAppStates.isEmpty()\n+          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n+        continue;\n+      }\n+\n+      AppInfo app \u003d new AppInfo(appReport);\n+      String blacklistedNodesCount \u003d \"N/A\";\n+      Set\u003cString\u003e nodes \u003d\n+          RMAppAttemptBlock\n+            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n+              .getCurrentAppAttemptId()));\n+      if (nodes !\u003d null) {\n+        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n+      }\n+      String percent \u003d String.format(\"%.1f\", app.getProgress());\n+      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n+      appsTableData\n+        .append(\"[\\\"\u003ca href\u003d\u0027\")\n+        .append(url(\"app\", app.getAppId()))\n+        .append(\"\u0027\u003e\")\n+        .append(app.getAppId())\n+        .append(\"\u003c/a\u003e\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getUser())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getName())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getType())))\n+        .append(\"\\\",\\\"\")\n+        .append(\n+          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n+            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n+        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n+        .append(\"\\\",\\\"\")\n+        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n+        .append(\"\\\",\\\"\")\n+        .append(app.getFinalAppStatus())\n+        .append(\"\\\",\\\"\")\n+        // Progress bar\n+        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n+        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n+        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n+        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n+        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n+\n+      String trackingURL \u003d\n+          app.getTrackingUrl() \u003d\u003d null\n+              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n+            .getTrackingUrl();\n+\n+      String trackingUI \u003d\n+          app.getTrackingUrl() \u003d\u003d null\n+              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n+            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n+              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n+              : \"ApplicationMaster\";\n+      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n+        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n+        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n+\n+    }\n+    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      appsTableData.delete(appsTableData.length() - 2,\n+        appsTableData.length() - 1);\n+    }\n+    appsTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\")\n+      ._(\"var appsTableData\u003d\" + appsTableData)._();\n+\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void renderData(Block html) {\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\")\n          .th(\".name\", \"Name\").th(\".type\", \"Application Type\")\n          .th(\".queue\", \"Queue\").th(\".starttime\", \"StartTime\")\n          .th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\")\n          .th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\")\n          .th(\".ui\", \"Tracking UI\").th(\".blacklisted\", \"Blacklisted Nodes\")._()\n          ._().tbody();\n\n    StringBuilder appsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationReport appReport : appReports) {\n      // TODO: remove the following condition. It is still here because\n      // the history side implementation of ApplicationBaseProtocol\n      // hasn\u0027t filtering capability (YARN-1819).\n      if (!reqAppStates.isEmpty()\n          \u0026\u0026 !reqAppStates.contains(appReport.getYarnApplicationState())) {\n        continue;\n      }\n\n      AppInfo app \u003d new AppInfo(appReport);\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock\n            .getBlacklistedNodes(rm, ConverterUtils.toApplicationAttemptId(app\n              .getCurrentAppAttemptId()));\n      if (nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String percent \u003d String.format(\"%.1f\", app.getProgress());\n      // AppID numerical value parsed by parseHadoopID in yarn.dt.plugins.js\n      appsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"app\", app.getAppId()))\n        .append(\"\u0027\u003e\")\n        .append(app.getAppId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getUser())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getName())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getType())))\n        .append(\"\\\",\\\"\")\n        .append(\n          StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(app\n            .getQueue()))).append(\"\\\",\\\"\").append(app.getStartedTime())\n        .append(\"\\\",\\\"\").append(app.getFinishedTime())\n        .append(\"\\\",\\\"\")\n        .append(app.getAppState() \u003d\u003d null ? UNAVAILABLE : app.getAppState())\n        .append(\"\\\",\\\"\")\n        .append(app.getFinalAppStatus())\n        .append(\"\\\",\\\"\")\n        // Progress bar\n        .append(\"\u003cbr title\u003d\u0027\").append(percent).append(\"\u0027\u003e \u003cdiv class\u003d\u0027\")\n        .append(C_PROGRESSBAR).append(\"\u0027 title\u003d\u0027\").append(join(percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \").append(\"\u003cdiv class\u003d\u0027\").append(C_PROGRESSBAR_VALUE)\n        .append(\"\u0027 style\u003d\u0027\").append(join(\"width:\", percent, \u0027%\u0027))\n        .append(\"\u0027\u003e \u003c/div\u003e \u003c/div\u003e\").append(\"\\\",\\\"\u003ca \");\n\n      String trackingURL \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app\n            .getTrackingUrl();\n\n      String trackingUI \u003d\n          app.getTrackingUrl() \u003d\u003d null\n              || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n            .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n              || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n              || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n              : \"ApplicationMaster\";\n      appsTableData.append(trackingURL \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + trackingURL)\n        .append(\"\u0027\u003e\").append(trackingUI).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\")\n        .append(blacklistedNodesCount).append(\"\\\"],\\n\");\n\n    }\n    if (appsTableData.charAt(appsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      appsTableData.delete(appsTableData.length() - 2,\n        appsTableData.length() - 1);\n    }\n    appsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var appsTableData\u003d\" + appsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppsBlock.java"
    }
  }
}