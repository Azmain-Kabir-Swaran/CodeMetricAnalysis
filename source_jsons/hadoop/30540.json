{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDB.java",
  "functionName": "evictOldDBs",
  "functionId": "evictOldDBs",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java",
  "functionStartLine": 344,
  "functionEndLine": 361,
  "numCommitsSeen": 5,
  "timeTaken": 1914,
  "changeHistory": [
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public synchronized void evictOldDBs() {\n     LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n     Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n         .iterator();\n     while (iterator.hasNext()) {\n       Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n-      IOUtils.cleanup(LOG, entry.getValue());\n+      IOUtils.cleanupWithLogger(LOG, entry.getValue());\n       String dbName \u003d fdf.format(entry.getKey());\n       Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n       try {\n         LOG.info(\"Removing old db directory contents in \" + path);\n         lfs.delete(path, true);\n       } catch (IOException ioe) {\n         LOG.warn(\"Failed to evict old db \" + path, ioe);\n       }\n       iterator.remove();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void evictOldDBs() {\n    LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n        .iterator();\n    while (iterator.hasNext()) {\n      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n      IOUtils.cleanupWithLogger(LOG, entry.getValue());\n      String dbName \u003d fdf.format(entry.getKey());\n      Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n      try {\n        LOG.info(\"Removing old db directory contents in \" + path);\n        lfs.delete(path, true);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failed to evict old db \" + path, ioe);\n      }\n      iterator.remove();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public synchronized void evictOldDBs() {\n     LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n     Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n         .iterator();\n     while (iterator.hasNext()) {\n       Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n-      IOUtils.cleanupWithLogger(LOG, entry.getValue());\n+      IOUtils.cleanup(LOG, entry.getValue());\n       String dbName \u003d fdf.format(entry.getKey());\n       Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n       try {\n         LOG.info(\"Removing old db directory contents in \" + path);\n         lfs.delete(path, true);\n       } catch (IOException ioe) {\n         LOG.warn(\"Failed to evict old db \" + path, ioe);\n       }\n       iterator.remove();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void evictOldDBs() {\n    LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n        .iterator();\n    while (iterator.hasNext()) {\n      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n      IOUtils.cleanup(LOG, entry.getValue());\n      String dbName \u003d fdf.format(entry.getKey());\n      Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n      try {\n        LOG.info(\"Removing old db directory contents in \" + path);\n        lfs.delete(path, true);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failed to evict old db \" + path, ioe);\n      }\n      iterator.remove();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/05/15 10:01 AM",
      "commitNameOld": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 816.37,
      "commitsBetweenForRepo": 5529,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public synchronized void evictOldDBs() {\n     LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n     Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n         .iterator();\n     while (iterator.hasNext()) {\n       Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n-      IOUtils.cleanup(LOG, entry.getValue());\n+      IOUtils.cleanupWithLogger(LOG, entry.getValue());\n       String dbName \u003d fdf.format(entry.getKey());\n       Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n       try {\n         LOG.info(\"Removing old db directory contents in \" + path);\n         lfs.delete(path, true);\n       } catch (IOException ioe) {\n         LOG.warn(\"Failed to evict old db \" + path, ioe);\n       }\n       iterator.remove();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void evictOldDBs() {\n    LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n        .iterator();\n    while (iterator.hasNext()) {\n      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n      IOUtils.cleanupWithLogger(LOG, entry.getValue());\n      String dbName \u003d fdf.format(entry.getKey());\n      Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n      try {\n        LOG.info(\"Removing old db directory contents in \" + path);\n        lfs.delete(path, true);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failed to evict old db \" + path, ioe);\n      }\n      iterator.remove();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java",
      "extendedDetails": {}
    },
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,18 @@\n+  public synchronized void evictOldDBs() {\n+    LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n+    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n+        .iterator();\n+    while (iterator.hasNext()) {\n+      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n+      IOUtils.cleanup(LOG, entry.getValue());\n+      String dbName \u003d fdf.format(entry.getKey());\n+      Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n+      try {\n+        LOG.info(\"Removing old db directory contents in \" + path);\n+        lfs.delete(path, true);\n+      } catch (IOException ioe) {\n+        LOG.warn(\"Failed to evict old db \" + path, ioe);\n+      }\n+      iterator.remove();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void evictOldDBs() {\n    LOG.info(\"Evicting \" + getName() + \" DBs scheduled for eviction\");\n    Iterator\u003cEntry\u003cLong, DB\u003e\u003e iterator \u003d rollingdbsToEvict.entrySet()\n        .iterator();\n    while (iterator.hasNext()) {\n      Entry\u003cLong, DB\u003e entry \u003d iterator.next();\n      IOUtils.cleanup(LOG, entry.getValue());\n      String dbName \u003d fdf.format(entry.getKey());\n      Path path \u003d new Path(rollingDBPath, getName() + \".\" + dbName);\n      try {\n        LOG.info(\"Removing old db directory contents in \" + path);\n        lfs.delete(path, true);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failed to evict old db \" + path, ioe);\n      }\n      iterator.remove();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java"
    }
  }
}