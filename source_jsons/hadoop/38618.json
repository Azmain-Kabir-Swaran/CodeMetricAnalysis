{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppSchedulingInfo.java",
  "functionName": "updatePendingResources",
  "functionId": "updatePendingResources___updateResult-PendingAskUpdateResult__schedulerKey-SchedulerRequestKey__metrics-QueueMetrics",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
  "functionStartLine": 362,
  "functionEndLine": 405,
  "numCommitsSeen": 192,
  "timeTaken": 6000,
  "changeHistory": [
    "a957f1c60e1308d1d70a1803381994f59949c5f8",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "87e2ef8c985bb72a916477e8783359f2859f7890",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "7558dbbb481eab055e794beb3603bbe5671a4b4c",
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523"
  ],
  "changeHistoryShort": {
    "a957f1c60e1308d1d70a1803381994f59949c5f8": "Ymultichange(Yparameterchange,Ybodychange)",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "87e2ef8c985bb72a916477e8783359f2859f7890": "Ybodychange",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "7558dbbb481eab055e794beb3603bbe5671a4b4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a957f1c60e1308d1d70a1803381994f59949c5f8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
      "commitDate": "05/12/17 9:20 AM",
      "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
          "commitDate": "05/12/17 9:20 AM",
          "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/11/17 1:01 PM",
          "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 25.85,
          "commitsBetweenForRepo": 121,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,44 @@\n-  private void updatePendingResources(ResourceRequest lastRequest,\n-      ResourceRequest request, SchedulerRequestKey schedulerKey,\n-      QueueMetrics metrics) {\n+  private void updatePendingResources(PendingAskUpdateResult updateResult,\n+      SchedulerRequestKey schedulerKey, QueueMetrics metrics) {\n+\n+    PendingAsk lastPendingAsk \u003d updateResult.getLastPendingAsk();\n+    PendingAsk newPendingAsk \u003d updateResult.getNewPendingAsk();\n+    String lastNodePartition \u003d updateResult.getLastNodePartition();\n+    String newNodePartition \u003d updateResult.getNewNodePartition();\n+\n     int lastRequestContainers \u003d\n-        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n-    if (request.getNumContainers() \u003c\u003d 0) {\n+        (lastPendingAsk !\u003d null) ? lastPendingAsk.getCount() : 0;\n+    if (newPendingAsk.getCount() \u003c\u003d 0) {\n       if (lastRequestContainers \u003e\u003d 0) {\n         schedulerKeys.remove(schedulerKey);\n         schedulerKeyToAppPlacementAllocator.remove(schedulerKey);\n       }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n     } else {\n       // Activate application. Metrics activation is done here.\n       if (lastRequestContainers \u003c\u003d 0) {\n         schedulerKeys.add(schedulerKey);\n         abstractUsersManager.activateApplication(user, applicationId);\n       }\n     }\n \n-    Resource lastRequestCapability \u003d\n-        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n-    metrics.incrPendingResources(request.getNodeLabelExpression(), user,\n-        request.getNumContainers(), request.getCapability());\n-\n-    if(lastRequest !\u003d null) {\n-      metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,\n-          lastRequestContainers, lastRequestCapability);\n+    if (lastPendingAsk !\u003d null) {\n+      // Deduct resources from metrics / pending resources of queue/app.\n+      metrics.decrPendingResources(lastNodePartition, user,\n+          lastPendingAsk.getCount(), lastPendingAsk.getPerAllocationResource());\n+      Resource decreasedResource \u003d Resources.multiply(\n+          lastPendingAsk.getPerAllocationResource(), lastRequestContainers);\n+      queue.decPendingResource(lastNodePartition, decreasedResource);\n+      appResourceUsage.decPending(lastNodePartition, decreasedResource);\n     }\n \n-    // update queue:\n-    Resource increasedResource \u003d\n-        Resources.multiply(request.getCapability(), request.getNumContainers());\n-    queue.incPendingResource(request.getNodeLabelExpression(),\n-        increasedResource);\n-    appResourceUsage.incPending(request.getNodeLabelExpression(),\n-        increasedResource);\n-    if (lastRequest !\u003d null) {\n-      Resource decreasedResource \u003d\n-          Resources.multiply(lastRequestCapability, lastRequestContainers);\n-      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n-          decreasedResource);\n-      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n-          decreasedResource);\n-    }\n+    // Increase resources to metrics / pending resources of queue/app.\n+    metrics.incrPendingResources(newNodePartition, user,\n+        newPendingAsk.getCount(), newPendingAsk.getPerAllocationResource());\n+    Resource increasedResource \u003d Resources.multiply(\n+        newPendingAsk.getPerAllocationResource(), newPendingAsk.getCount());\n+    queue.incPendingResource(newNodePartition, increasedResource);\n+    appResourceUsage.incPending(newNodePartition, increasedResource);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updatePendingResources(PendingAskUpdateResult updateResult,\n      SchedulerRequestKey schedulerKey, QueueMetrics metrics) {\n\n    PendingAsk lastPendingAsk \u003d updateResult.getLastPendingAsk();\n    PendingAsk newPendingAsk \u003d updateResult.getNewPendingAsk();\n    String lastNodePartition \u003d updateResult.getLastNodePartition();\n    String newNodePartition \u003d updateResult.getNewNodePartition();\n\n    int lastRequestContainers \u003d\n        (lastPendingAsk !\u003d null) ? lastPendingAsk.getCount() : 0;\n    if (newPendingAsk.getCount() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        schedulerKeys.remove(schedulerKey);\n        schedulerKeyToAppPlacementAllocator.remove(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        schedulerKeys.add(schedulerKey);\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    if (lastPendingAsk !\u003d null) {\n      // Deduct resources from metrics / pending resources of queue/app.\n      metrics.decrPendingResources(lastNodePartition, user,\n          lastPendingAsk.getCount(), lastPendingAsk.getPerAllocationResource());\n      Resource decreasedResource \u003d Resources.multiply(\n          lastPendingAsk.getPerAllocationResource(), lastRequestContainers);\n      queue.decPendingResource(lastNodePartition, decreasedResource);\n      appResourceUsage.decPending(lastNodePartition, decreasedResource);\n    }\n\n    // Increase resources to metrics / pending resources of queue/app.\n    metrics.incrPendingResources(newNodePartition, user,\n        newPendingAsk.getCount(), newPendingAsk.getPerAllocationResource());\n    Resource increasedResource \u003d Resources.multiply(\n        newPendingAsk.getPerAllocationResource(), newPendingAsk.getCount());\n    queue.incPendingResource(newNodePartition, increasedResource);\n    appResourceUsage.incPending(newNodePartition, increasedResource);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[lastRequest-ResourceRequest, request-ResourceRequest, schedulerKey-SchedulerRequestKey, metrics-QueueMetrics]",
            "newValue": "[updateResult-PendingAskUpdateResult, schedulerKey-SchedulerRequestKey, metrics-QueueMetrics]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
          "commitDate": "05/12/17 9:20 AM",
          "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/11/17 1:01 PM",
          "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 25.85,
          "commitsBetweenForRepo": 121,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,44 @@\n-  private void updatePendingResources(ResourceRequest lastRequest,\n-      ResourceRequest request, SchedulerRequestKey schedulerKey,\n-      QueueMetrics metrics) {\n+  private void updatePendingResources(PendingAskUpdateResult updateResult,\n+      SchedulerRequestKey schedulerKey, QueueMetrics metrics) {\n+\n+    PendingAsk lastPendingAsk \u003d updateResult.getLastPendingAsk();\n+    PendingAsk newPendingAsk \u003d updateResult.getNewPendingAsk();\n+    String lastNodePartition \u003d updateResult.getLastNodePartition();\n+    String newNodePartition \u003d updateResult.getNewNodePartition();\n+\n     int lastRequestContainers \u003d\n-        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n-    if (request.getNumContainers() \u003c\u003d 0) {\n+        (lastPendingAsk !\u003d null) ? lastPendingAsk.getCount() : 0;\n+    if (newPendingAsk.getCount() \u003c\u003d 0) {\n       if (lastRequestContainers \u003e\u003d 0) {\n         schedulerKeys.remove(schedulerKey);\n         schedulerKeyToAppPlacementAllocator.remove(schedulerKey);\n       }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n     } else {\n       // Activate application. Metrics activation is done here.\n       if (lastRequestContainers \u003c\u003d 0) {\n         schedulerKeys.add(schedulerKey);\n         abstractUsersManager.activateApplication(user, applicationId);\n       }\n     }\n \n-    Resource lastRequestCapability \u003d\n-        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n-    metrics.incrPendingResources(request.getNodeLabelExpression(), user,\n-        request.getNumContainers(), request.getCapability());\n-\n-    if(lastRequest !\u003d null) {\n-      metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,\n-          lastRequestContainers, lastRequestCapability);\n+    if (lastPendingAsk !\u003d null) {\n+      // Deduct resources from metrics / pending resources of queue/app.\n+      metrics.decrPendingResources(lastNodePartition, user,\n+          lastPendingAsk.getCount(), lastPendingAsk.getPerAllocationResource());\n+      Resource decreasedResource \u003d Resources.multiply(\n+          lastPendingAsk.getPerAllocationResource(), lastRequestContainers);\n+      queue.decPendingResource(lastNodePartition, decreasedResource);\n+      appResourceUsage.decPending(lastNodePartition, decreasedResource);\n     }\n \n-    // update queue:\n-    Resource increasedResource \u003d\n-        Resources.multiply(request.getCapability(), request.getNumContainers());\n-    queue.incPendingResource(request.getNodeLabelExpression(),\n-        increasedResource);\n-    appResourceUsage.incPending(request.getNodeLabelExpression(),\n-        increasedResource);\n-    if (lastRequest !\u003d null) {\n-      Resource decreasedResource \u003d\n-          Resources.multiply(lastRequestCapability, lastRequestContainers);\n-      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n-          decreasedResource);\n-      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n-          decreasedResource);\n-    }\n+    // Increase resources to metrics / pending resources of queue/app.\n+    metrics.incrPendingResources(newNodePartition, user,\n+        newPendingAsk.getCount(), newPendingAsk.getPerAllocationResource());\n+    Resource increasedResource \u003d Resources.multiply(\n+        newPendingAsk.getPerAllocationResource(), newPendingAsk.getCount());\n+    queue.incPendingResource(newNodePartition, increasedResource);\n+    appResourceUsage.incPending(newNodePartition, increasedResource);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updatePendingResources(PendingAskUpdateResult updateResult,\n      SchedulerRequestKey schedulerKey, QueueMetrics metrics) {\n\n    PendingAsk lastPendingAsk \u003d updateResult.getLastPendingAsk();\n    PendingAsk newPendingAsk \u003d updateResult.getNewPendingAsk();\n    String lastNodePartition \u003d updateResult.getLastNodePartition();\n    String newNodePartition \u003d updateResult.getNewNodePartition();\n\n    int lastRequestContainers \u003d\n        (lastPendingAsk !\u003d null) ? lastPendingAsk.getCount() : 0;\n    if (newPendingAsk.getCount() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        schedulerKeys.remove(schedulerKey);\n        schedulerKeyToAppPlacementAllocator.remove(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        schedulerKeys.add(schedulerKey);\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    if (lastPendingAsk !\u003d null) {\n      // Deduct resources from metrics / pending resources of queue/app.\n      metrics.decrPendingResources(lastNodePartition, user,\n          lastPendingAsk.getCount(), lastPendingAsk.getPerAllocationResource());\n      Resource decreasedResource \u003d Resources.multiply(\n          lastPendingAsk.getPerAllocationResource(), lastRequestContainers);\n      queue.decPendingResource(lastNodePartition, decreasedResource);\n      appResourceUsage.decPending(lastNodePartition, decreasedResource);\n    }\n\n    // Increase resources to metrics / pending resources of queue/app.\n    metrics.incrPendingResources(newNodePartition, user,\n        newPendingAsk.getCount(), newPendingAsk.getPerAllocationResource());\n    Resource increasedResource \u003d Resources.multiply(\n        newPendingAsk.getPerAllocationResource(), newPendingAsk.getCount());\n    queue.incPendingResource(newNodePartition, increasedResource);\n    appResourceUsage.incPending(newNodePartition, increasedResource);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "08/09/17 9:24 AM",
      "commitNameOld": "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 62.19,
      "commitsBetweenForRepo": 599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private void updatePendingResources(ResourceRequest lastRequest,\n       ResourceRequest request, SchedulerRequestKey schedulerKey,\n       QueueMetrics metrics) {\n     int lastRequestContainers \u003d\n         (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     if (request.getNumContainers() \u003c\u003d 0) {\n       if (lastRequestContainers \u003e\u003d 0) {\n         schedulerKeys.remove(schedulerKey);\n-        schedulerKeyToPlacementSets.remove(schedulerKey);\n+        schedulerKeyToAppPlacementAllocator.remove(schedulerKey);\n       }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n     } else {\n       // Activate application. Metrics activation is done here.\n       if (lastRequestContainers \u003c\u003d 0) {\n         schedulerKeys.add(schedulerKey);\n         abstractUsersManager.activateApplication(user, applicationId);\n       }\n     }\n \n     Resource lastRequestCapability \u003d\n         lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n     metrics.incrPendingResources(request.getNodeLabelExpression(), user,\n         request.getNumContainers(), request.getCapability());\n \n     if(lastRequest !\u003d null) {\n       metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,\n           lastRequestContainers, lastRequestCapability);\n     }\n \n     // update queue:\n     Resource increasedResource \u003d\n         Resources.multiply(request.getCapability(), request.getNumContainers());\n     queue.incPendingResource(request.getNodeLabelExpression(),\n         increasedResource);\n     appResourceUsage.incPending(request.getNodeLabelExpression(),\n         increasedResource);\n     if (lastRequest !\u003d null) {\n       Resource decreasedResource \u003d\n           Resources.multiply(lastRequestCapability, lastRequestContainers);\n       queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n       appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, SchedulerRequestKey schedulerKey,\n      QueueMetrics metrics) {\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    if (request.getNumContainers() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        schedulerKeys.remove(schedulerKey);\n        schedulerKeyToAppPlacementAllocator.remove(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        schedulerKeys.add(schedulerKey);\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(request.getNodeLabelExpression(), user,\n        request.getNumContainers(), request.getCapability());\n\n    if(lastRequest !\u003d null) {\n      metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,\n          lastRequestContainers, lastRequestCapability);\n    }\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "05/04/17 11:28 AM",
      "commitNameOld": "87e2ef8c985bb72a916477e8783359f2859f7890",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 74.9,
      "commitsBetweenForRepo": 382,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   private void updatePendingResources(ResourceRequest lastRequest,\n       ResourceRequest request, SchedulerRequestKey schedulerKey,\n       QueueMetrics metrics) {\n     int lastRequestContainers \u003d\n         (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     if (request.getNumContainers() \u003c\u003d 0) {\n       if (lastRequestContainers \u003e\u003d 0) {\n         schedulerKeys.remove(schedulerKey);\n         schedulerKeyToPlacementSets.remove(schedulerKey);\n       }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n     } else {\n       // Activate application. Metrics activation is done here.\n       if (lastRequestContainers \u003c\u003d 0) {\n         schedulerKeys.add(schedulerKey);\n         abstractUsersManager.activateApplication(user, applicationId);\n       }\n     }\n \n     Resource lastRequestCapability \u003d\n         lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n-    metrics.incrPendingResources(user,\n+    metrics.incrPendingResources(request.getNodeLabelExpression(), user,\n         request.getNumContainers(), request.getCapability());\n-    metrics.decrPendingResources(user,\n-        lastRequestContainers, lastRequestCapability);\n+\n+    if(lastRequest !\u003d null) {\n+      metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,\n+          lastRequestContainers, lastRequestCapability);\n+    }\n \n     // update queue:\n     Resource increasedResource \u003d\n         Resources.multiply(request.getCapability(), request.getNumContainers());\n     queue.incPendingResource(request.getNodeLabelExpression(),\n         increasedResource);\n     appResourceUsage.incPending(request.getNodeLabelExpression(),\n         increasedResource);\n     if (lastRequest !\u003d null) {\n       Resource decreasedResource \u003d\n           Resources.multiply(lastRequestCapability, lastRequestContainers);\n       queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n       appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, SchedulerRequestKey schedulerKey,\n      QueueMetrics metrics) {\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    if (request.getNumContainers() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        schedulerKeys.remove(schedulerKey);\n        schedulerKeyToPlacementSets.remove(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        schedulerKeys.add(schedulerKey);\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(request.getNodeLabelExpression(), user,\n        request.getNumContainers(), request.getCapability());\n\n    if(lastRequest !\u003d null) {\n      metrics.decrPendingResources(lastRequest.getNodeLabelExpression(), user,\n          lastRequestContainers, lastRequestCapability);\n    }\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "87e2ef8c985bb72a916477e8783359f2859f7890": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6406. Remove SchedulerRequestKeys when no more pending ResourceRequest. (Arun Suresh via wangda)\n",
      "commitDate": "05/04/17 11:28 AM",
      "commitName": "87e2ef8c985bb72a916477e8783359f2859f7890",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/02/17 10:35 AM",
      "commitNameOld": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 35.99,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   private void updatePendingResources(ResourceRequest lastRequest,\n       ResourceRequest request, SchedulerRequestKey schedulerKey,\n       QueueMetrics metrics) {\n     int lastRequestContainers \u003d\n         (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     if (request.getNumContainers() \u003c\u003d 0) {\n       if (lastRequestContainers \u003e\u003d 0) {\n-        decrementSchedulerKeyReference(schedulerKey);\n+        schedulerKeys.remove(schedulerKey);\n+        schedulerKeyToPlacementSets.remove(schedulerKey);\n       }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n     } else {\n       // Activate application. Metrics activation is done here.\n       if (lastRequestContainers \u003c\u003d 0) {\n-        incrementSchedulerKeyReference(schedulerKey);\n+        schedulerKeys.add(schedulerKey);\n         abstractUsersManager.activateApplication(user, applicationId);\n       }\n     }\n \n     Resource lastRequestCapability \u003d\n         lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n     metrics.incrPendingResources(user,\n         request.getNumContainers(), request.getCapability());\n     metrics.decrPendingResources(user,\n         lastRequestContainers, lastRequestCapability);\n \n     // update queue:\n     Resource increasedResource \u003d\n         Resources.multiply(request.getCapability(), request.getNumContainers());\n     queue.incPendingResource(request.getNodeLabelExpression(),\n         increasedResource);\n     appResourceUsage.incPending(request.getNodeLabelExpression(),\n         increasedResource);\n     if (lastRequest !\u003d null) {\n       Resource decreasedResource \u003d\n           Resources.multiply(lastRequestCapability, lastRequestContainers);\n       queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n       appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, SchedulerRequestKey schedulerKey,\n      QueueMetrics metrics) {\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    if (request.getNumContainers() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        schedulerKeys.remove(schedulerKey);\n        schedulerKeyToPlacementSets.remove(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        schedulerKeys.add(schedulerKey);\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(user,\n        request.getNumContainers(), request.getCapability());\n    metrics.decrPendingResources(user,\n        lastRequestContainers, lastRequestCapability);\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 34.02,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private void updatePendingResources(ResourceRequest lastRequest,\n       ResourceRequest request, SchedulerRequestKey schedulerKey,\n       QueueMetrics metrics) {\n     int lastRequestContainers \u003d\n         (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     if (request.getNumContainers() \u003c\u003d 0) {\n       if (lastRequestContainers \u003e\u003d 0) {\n         decrementSchedulerKeyReference(schedulerKey);\n       }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n     } else {\n       // Activate application. Metrics activation is done here.\n       if (lastRequestContainers \u003c\u003d 0) {\n         incrementSchedulerKeyReference(schedulerKey);\n-        activeUsersManager.activateApplication(user, applicationId);\n+        abstractUsersManager.activateApplication(user, applicationId);\n       }\n     }\n \n     Resource lastRequestCapability \u003d\n         lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n     metrics.incrPendingResources(user,\n         request.getNumContainers(), request.getCapability());\n     metrics.decrPendingResources(user,\n         lastRequestContainers, lastRequestCapability);\n \n     // update queue:\n     Resource increasedResource \u003d\n         Resources.multiply(request.getCapability(), request.getNumContainers());\n     queue.incPendingResource(request.getNodeLabelExpression(),\n         increasedResource);\n     appResourceUsage.incPending(request.getNodeLabelExpression(),\n         increasedResource);\n     if (lastRequest !\u003d null) {\n       Resource decreasedResource \u003d\n           Resources.multiply(lastRequestCapability, lastRequestContainers);\n       queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n       appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, SchedulerRequestKey schedulerKey,\n      QueueMetrics metrics) {\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    if (request.getNumContainers() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        decrementSchedulerKeyReference(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        incrementSchedulerKeyReference(schedulerKey);\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(user,\n        request.getNumContainers(), request.getCapability());\n    metrics.decrPendingResources(user,\n        lastRequestContainers, lastRequestCapability);\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "7558dbbb481eab055e794beb3603bbe5671a4b4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5540. Scheduler spends too much time looking at empty priorities. Contributed by Jason Lowe\n",
      "commitDate": "19/09/16 1:31 PM",
      "commitName": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5540. Scheduler spends too much time looking at empty priorities. Contributed by Jason Lowe\n",
          "commitDate": "19/09/16 1:31 PM",
          "commitName": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "31/07/16 11:48 AM",
          "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 50.07,
          "commitsBetweenForRepo": 315,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n   private void updatePendingResources(ResourceRequest lastRequest,\n-      ResourceRequest request, QueueMetrics metrics) {\n+      ResourceRequest request, SchedulerRequestKey schedulerKey,\n+      QueueMetrics metrics) {\n+    int lastRequestContainers \u003d\n+        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     if (request.getNumContainers() \u003c\u003d 0) {\n+      if (lastRequestContainers \u003e\u003d 0) {\n+        decrementSchedulerKeyReference(schedulerKey);\n+      }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n+    } else {\n+      // Activate application. Metrics activation is done here.\n+      if (lastRequestContainers \u003c\u003d 0) {\n+        incrementSchedulerKeyReference(schedulerKey);\n+        activeUsersManager.activateApplication(user, applicationId);\n+      }\n     }\n \n-    int lastRequestContainers \u003d\n-        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     Resource lastRequestCapability \u003d\n         lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n     metrics.incrPendingResources(user,\n         request.getNumContainers(), request.getCapability());\n     metrics.decrPendingResources(user,\n         lastRequestContainers, lastRequestCapability);\n \n     // update queue:\n     Resource increasedResource \u003d\n         Resources.multiply(request.getCapability(), request.getNumContainers());\n     queue.incPendingResource(request.getNodeLabelExpression(),\n         increasedResource);\n     appResourceUsage.incPending(request.getNodeLabelExpression(),\n         increasedResource);\n     if (lastRequest !\u003d null) {\n       Resource decreasedResource \u003d\n           Resources.multiply(lastRequestCapability, lastRequestContainers);\n       queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n       appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, SchedulerRequestKey schedulerKey,\n      QueueMetrics metrics) {\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    if (request.getNumContainers() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        decrementSchedulerKeyReference(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        incrementSchedulerKeyReference(schedulerKey);\n        activeUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(user,\n        request.getNumContainers(), request.getCapability());\n    metrics.decrPendingResources(user,\n        lastRequestContainers, lastRequestCapability);\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[lastRequest-ResourceRequest, request-ResourceRequest, metrics-QueueMetrics]",
            "newValue": "[lastRequest-ResourceRequest, request-ResourceRequest, schedulerKey-SchedulerRequestKey, metrics-QueueMetrics]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5540. Scheduler spends too much time looking at empty priorities. Contributed by Jason Lowe\n",
          "commitDate": "19/09/16 1:31 PM",
          "commitName": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "31/07/16 11:48 AM",
          "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 50.07,
          "commitsBetweenForRepo": 315,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n   private void updatePendingResources(ResourceRequest lastRequest,\n-      ResourceRequest request, QueueMetrics metrics) {\n+      ResourceRequest request, SchedulerRequestKey schedulerKey,\n+      QueueMetrics metrics) {\n+    int lastRequestContainers \u003d\n+        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     if (request.getNumContainers() \u003c\u003d 0) {\n+      if (lastRequestContainers \u003e\u003d 0) {\n+        decrementSchedulerKeyReference(schedulerKey);\n+      }\n       LOG.info(\"checking for deactivate of application :\"\n           + this.applicationId);\n       checkForDeactivation();\n+    } else {\n+      // Activate application. Metrics activation is done here.\n+      if (lastRequestContainers \u003c\u003d 0) {\n+        incrementSchedulerKeyReference(schedulerKey);\n+        activeUsersManager.activateApplication(user, applicationId);\n+      }\n     }\n \n-    int lastRequestContainers \u003d\n-        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n     Resource lastRequestCapability \u003d\n         lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n     metrics.incrPendingResources(user,\n         request.getNumContainers(), request.getCapability());\n     metrics.decrPendingResources(user,\n         lastRequestContainers, lastRequestCapability);\n \n     // update queue:\n     Resource increasedResource \u003d\n         Resources.multiply(request.getCapability(), request.getNumContainers());\n     queue.incPendingResource(request.getNodeLabelExpression(),\n         increasedResource);\n     appResourceUsage.incPending(request.getNodeLabelExpression(),\n         increasedResource);\n     if (lastRequest !\u003d null) {\n       Resource decreasedResource \u003d\n           Resources.multiply(lastRequestCapability, lastRequestContainers);\n       queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n       appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n           decreasedResource);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, SchedulerRequestKey schedulerKey,\n      QueueMetrics metrics) {\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    if (request.getNumContainers() \u003c\u003d 0) {\n      if (lastRequestContainers \u003e\u003d 0) {\n        decrementSchedulerKeyReference(schedulerKey);\n      }\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    } else {\n      // Activate application. Metrics activation is done here.\n      if (lastRequestContainers \u003c\u003d 0) {\n        incrementSchedulerKeyReference(schedulerKey);\n        activeUsersManager.activateApplication(user, applicationId);\n      }\n    }\n\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(user,\n        request.getNumContainers(), request.getCapability());\n    metrics.decrPendingResources(user,\n        lastRequestContainers, lastRequestCapability);\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4524. Cleanup AppSchedulingInfo. (Karthik Kambatla via wangda)\n\n(cherry picked from commit 05fa852d7567b7590d6b53bbf925f8f424736514)\n",
      "commitDate": "30/12/15 3:39 PM",
      "commitName": "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,33 @@\n+  private void updatePendingResources(ResourceRequest lastRequest,\n+      ResourceRequest request, QueueMetrics metrics) {\n+    if (request.getNumContainers() \u003c\u003d 0) {\n+      LOG.info(\"checking for deactivate of application :\"\n+          + this.applicationId);\n+      checkForDeactivation();\n+    }\n+\n+    int lastRequestContainers \u003d\n+        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n+    Resource lastRequestCapability \u003d\n+        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n+    metrics.incrPendingResources(user,\n+        request.getNumContainers(), request.getCapability());\n+    metrics.decrPendingResources(user,\n+        lastRequestContainers, lastRequestCapability);\n+\n+    // update queue:\n+    Resource increasedResource \u003d\n+        Resources.multiply(request.getCapability(), request.getNumContainers());\n+    queue.incPendingResource(request.getNodeLabelExpression(),\n+        increasedResource);\n+    appResourceUsage.incPending(request.getNodeLabelExpression(),\n+        increasedResource);\n+    if (lastRequest !\u003d null) {\n+      Resource decreasedResource \u003d\n+          Resources.multiply(lastRequestCapability, lastRequestContainers);\n+      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n+          decreasedResource);\n+      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n+          decreasedResource);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updatePendingResources(ResourceRequest lastRequest,\n      ResourceRequest request, QueueMetrics metrics) {\n    if (request.getNumContainers() \u003c\u003d 0) {\n      LOG.info(\"checking for deactivate of application :\"\n          + this.applicationId);\n      checkForDeactivation();\n    }\n\n    int lastRequestContainers \u003d\n        (lastRequest !\u003d null) ? lastRequest.getNumContainers() : 0;\n    Resource lastRequestCapability \u003d\n        lastRequest !\u003d null ? lastRequest.getCapability() : Resources.none();\n    metrics.incrPendingResources(user,\n        request.getNumContainers(), request.getCapability());\n    metrics.decrPendingResources(user,\n        lastRequestContainers, lastRequestCapability);\n\n    // update queue:\n    Resource increasedResource \u003d\n        Resources.multiply(request.getCapability(), request.getNumContainers());\n    queue.incPendingResource(request.getNodeLabelExpression(),\n        increasedResource);\n    appResourceUsage.incPending(request.getNodeLabelExpression(),\n        increasedResource);\n    if (lastRequest !\u003d null) {\n      Resource decreasedResource \u003d\n          Resources.multiply(lastRequestCapability, lastRequestContainers);\n      queue.decPendingResource(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n      appResourceUsage.decPending(lastRequest.getNodeLabelExpression(),\n          decreasedResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java"
    }
  }
}