{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SlowPeerTracker.java",
  "functionName": "getJsonReports",
  "functionId": "getJsonReports___numNodes-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/SlowPeerTracker.java",
  "functionStartLine": 239,
  "functionEndLine": 272,
  "numCommitsSeen": 5,
  "timeTaken": 1750,
  "changeHistory": [
    "b57368b6f893cb27d77fc9425e116f1312f4790f"
  ],
  "changeHistoryShort": {
    "b57368b6f893cb27d77fc9425e116f1312f4790f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b57368b6f893cb27d77fc9425e116f1312f4790f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11194. Maintain aggregated peer performance metrics on NameNode.\n",
      "commitDate": "24/01/17 4:58 PM",
      "commitName": "b57368b6f893cb27d77fc9425e116f1312f4790f",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,34 @@\n+  private Collection\u003cReportForJson\u003e getJsonReports(int numNodes) {\n+    if (allReports.isEmpty()) {\n+      return Collections.emptyList();\n+    }\n+\n+    final PriorityQueue\u003cReportForJson\u003e topNReports \u003d\n+        new PriorityQueue\u003c\u003e(allReports.size(),\n+            new Comparator\u003cReportForJson\u003e() {\n+          @Override\n+          public int compare(ReportForJson o1, ReportForJson o2) {\n+            return Ints.compare(o1.reportingNodes.size(),\n+                o2.reportingNodes.size());\n+          }\n+        });\n+\n+    final long now \u003d timer.monotonicNow();\n+\n+    for (Map.Entry\u003cString, ConcurrentMap\u003cString, Long\u003e\u003e entry :\n+        allReports.entrySet()) {\n+      SortedSet\u003cString\u003e validReports \u003d filterNodeReports(\n+          entry.getValue(), now);\n+      if (!validReports.isEmpty()) {\n+        if (topNReports.size() \u003c numNodes) {\n+          topNReports.add(new ReportForJson(entry.getKey(), validReports));\n+        } else if (topNReports.peek().getReportingNodes().size() \u003c\n+            validReports.size()){\n+          // Remove the lowest element\n+          topNReports.poll();\n+          topNReports.add(new ReportForJson(entry.getKey(), validReports));\n+        }\n+      }\n+    }\n+    return topNReports;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Collection\u003cReportForJson\u003e getJsonReports(int numNodes) {\n    if (allReports.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    final PriorityQueue\u003cReportForJson\u003e topNReports \u003d\n        new PriorityQueue\u003c\u003e(allReports.size(),\n            new Comparator\u003cReportForJson\u003e() {\n          @Override\n          public int compare(ReportForJson o1, ReportForJson o2) {\n            return Ints.compare(o1.reportingNodes.size(),\n                o2.reportingNodes.size());\n          }\n        });\n\n    final long now \u003d timer.monotonicNow();\n\n    for (Map.Entry\u003cString, ConcurrentMap\u003cString, Long\u003e\u003e entry :\n        allReports.entrySet()) {\n      SortedSet\u003cString\u003e validReports \u003d filterNodeReports(\n          entry.getValue(), now);\n      if (!validReports.isEmpty()) {\n        if (topNReports.size() \u003c numNodes) {\n          topNReports.add(new ReportForJson(entry.getKey(), validReports));\n        } else if (topNReports.peek().getReportingNodes().size() \u003c\n            validReports.size()){\n          // Remove the lowest element\n          topNReports.poll();\n          topNReports.add(new ReportForJson(entry.getKey(), validReports));\n        }\n      }\n    }\n    return topNReports;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/SlowPeerTracker.java"
    }
  }
}