{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsInputStream.java",
  "functionName": "readRemote",
  "functionId": "readRemote___position-long__b-byte[]__offset-int__length-int",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
  "functionStartLine": 225,
  "functionEndLine": 266,
  "numCommitsSeen": 13,
  "timeTaken": 3752,
  "changeHistory": [
    "53b993e6048ffaaf98e460690211fc08efb20cf2",
    "b214bbd2d92a0c02b71d352dba85f3b87317933c",
    "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6",
    "28afdce00955a51bbea9bf46aa0f784764ec1329",
    "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f",
    "b033c681e4fc3ee1a38caa807e130aee481d99d5",
    "346c0c8aff0b206d45f34dbce4fcc81364115d95",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "53b993e6048ffaaf98e460690211fc08efb20cf2": "Ybodychange",
    "b214bbd2d92a0c02b71d352dba85f3b87317933c": "Ybodychange",
    "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6": "Ybodychange",
    "28afdce00955a51bbea9bf46aa0f784764ec1329": "Ybodychange",
    "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f": "Ybodychange",
    "b033c681e4fc3ee1a38caa807e130aee481d99d5": "Ybodychange",
    "346c0c8aff0b206d45f34dbce4fcc81364115d95": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "53b993e6048ffaaf98e460690211fc08efb20cf2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16852: Report read-ahead error back\n\nContributed by Sneha Vijayarajan",
      "commitDate": "27/05/20 1:51 PM",
      "commitName": "53b993e6048ffaaf98e460690211fc08efb20cf2",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "12/05/20 11:35 AM",
      "commitNameOld": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n     AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n     try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n+      LOG.trace(\"Trigger client.read for path\u003d{} position\u003d{} offset\u003d{} length\u003d{}\", path, position, offset, length);\n       op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag, cachedSasToken.get());\n       cachedSasToken.update(op.getSasToken());\n       perfInfo.registerResult(op.getResult()).registerSuccess(true);\n       incrementReadOps();\n     } catch (AzureBlobFileSystemException ex) {\n       if (ex instanceof AbfsRestOperationException) {\n         AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n         if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n           throw new FileNotFoundException(ere.getMessage());\n         }\n       }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n      LOG.trace(\"Trigger client.read for path\u003d{} position\u003d{} offset\u003d{} length\u003d{}\", path, position, offset, length);\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag, cachedSasToken.get());\n      cachedSasToken.update(op.getSasToken());\n      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n      incrementReadOps();\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "b214bbd2d92a0c02b71d352dba85f3b87317933c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16916: ABFS: Delegation SAS generator for integration with Ranger\n\nContributed by Thomas Marquardt.\n\nDETAILS:\n\nPreviously we had a SASGenerator class which generated Service SAS, but we need to add DelegationSASGenerator.\nI separated SASGenerator into a base class and two subclasses ServiceSASGenerator and DelegationSASGenreator.  The\ncode in ServiceSASGenerator is copied from SASGenerator but the DelegationSASGenrator code is new.  The\nDelegationSASGenerator code demonstrates how to use Delegation SAS with minimal permissions, as would be used\nby an authorization service such as Apache Ranger.  Adding this to the tests helps us lock in this behavior.\n\nAdded a MockDelegationSASTokenProvider for testing User Delegation SAS.\n\nFixed the ITestAzureBlobFileSystemCheckAccess tests to assume oauth client ID so that they are ignored when that\nis not configured.\n\nTo improve performance, AbfsInputStream/AbfsOutputStream re-use SAS tokens until the expiry is within 120 seconds.\nAfter this a new SAS will be requested.  The default period of 120 seconds can be changed using the configuration\nsetting \"fs.azure.sas.token.renew.period.for.streams\".\n\nThe SASTokenProvider operation names were updated to correspond better with the ADLS Gen2 REST API, since these\noperations must be provided tokens with appropriate SAS parameters to succeed.\n\nSupport for the version 2.0 AAD authentication endpoint was added to AzureADAuthenticator.\n\nThe getFileStatus method was mistakenly calling the ADLS Gen2 Get Properties API which requires read permission\nwhile the getFileStatus call only requires execute permission.  ADLS Gen2 Get Status API is supposed to be used\nfor this purpose, so the underlying AbfsClient.getPathStatus API was updated with a includeProperties\nparameter which is set to false for getFileStatus and true for getXAttr.\n\nAdded SASTokenProvider support for delete recursive.\n\nFixed bugs in AzureBlobFileSystem where public methods were not validating the Path by calling makeQualified.  This is\nnecessary to avoid passing null paths and to convert relative paths into absolute paths.\n\nCanonicalized the path used for root path internally so that root path can be used with SAS tokens, which requires\nthat the path in the URL and the path in the SAS token match.  Internally the code was using\n\"//\" instead of \"/\" for the root path, sometimes.  Also related to this, the AzureBlobFileSystemStore.getRelativePath\nAPI was updated so that we no longer remove and then add back a preceding forward / to paths.\n\nTo run ITestAzureBlobFileSystemDelegationSAS tests follow the instructions in testing_azure.md under the heading\n\"To run Delegation SAS test cases\".  You also need to set \"fs.azure.enable.check.access\" to true.\n\nTEST RESULTS:\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 41\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dfalse\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 244\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\nsas.token.provider.type\u003dMockDelegationSASTokenProvider\nenable.check.access\u003dtrue\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 33\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dOAuth\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 1, Skipped: 74\nTests run: 206, Failures: 0, Errors: 0, Skipped: 140\n",
      "commitDate": "12/05/20 11:35 AM",
      "commitName": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "21/04/20 9:27 AM",
      "commitNameOld": "8031c66295b530dcaae9e00d4f656330bc3b3952",
      "commitAuthorOld": "Mukund Thakur",
      "daysBetweenCommits": 21.09,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n     AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n     try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n-      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n+      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag, cachedSasToken.get());\n+      cachedSasToken.update(op.getSasToken());\n       perfInfo.registerResult(op.getResult()).registerSuccess(true);\n       incrementReadOps();\n     } catch (AzureBlobFileSystemException ex) {\n       if (ex instanceof AbfsRestOperationException) {\n         AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n         if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n           throw new FileNotFoundException(ere.getMessage());\n         }\n       }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag, cachedSasToken.get());\n      cachedSasToken.update(op.getSasToken());\n      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n      incrementReadOps();\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16910 : ABFS Streams to update FileSystem.Statistics counters on IO. (#1918). Contributed by Mehakmeet Singh.\n\n",
      "commitDate": "31/03/20 5:49 AM",
      "commitName": "c734d247b1ea16b7028de3a37ff556cb1ef8b7d6",
      "commitAuthor": "Mehakmeet Singh",
      "commitDateOld": "24/03/20 5:11 AM",
      "commitNameOld": "28afdce00955a51bbea9bf46aa0f784764ec1329",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n     AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n     try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n       op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n       perfInfo.registerResult(op.getResult()).registerSuccess(true);\n+      incrementReadOps();\n     } catch (AzureBlobFileSystemException ex) {\n       if (ex instanceof AbfsRestOperationException) {\n         AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n         if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n           throw new FileNotFoundException(ere.getMessage());\n         }\n       }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n      incrementReadOps();\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "28afdce00955a51bbea9bf46aa0f784764ec1329": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"\"HADOOP-16910. ABFS Streams to update FileSystem.Statistics counters on IO.\"\n\nThis reverts commit e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f.\n\nChange-Id: I5b5a93f5a36cdb0c3d56d1b3f747c318f089de20\n",
      "commitDate": "24/03/20 5:11 AM",
      "commitName": "28afdce00955a51bbea9bf46aa0f784764ec1329",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/03/20 6:50 AM",
      "commitNameOld": "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f",
      "commitAuthorOld": "Mehakmeet Singh",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n     AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n     try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n       op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n       perfInfo.registerResult(op.getResult()).registerSuccess(true);\n-      incrementReadOps();\n     } catch (AzureBlobFileSystemException ex) {\n       if (ex instanceof AbfsRestOperationException) {\n         AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n         if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n           throw new FileNotFoundException(ere.getMessage());\n         }\n       }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f": {
      "type": "Ybodychange",
      "commitMessage": "ABFS Streams to update FileSystem.Statistics counters on IO.\n\n\r\nContributed by Mehakmeet Singh",
      "commitDate": "23/03/20 6:50 AM",
      "commitName": "e2c7ac71b5ee47bb40294acd10c0c21dd6ee430f",
      "commitAuthor": "Mehakmeet Singh",
      "commitDateOld": "24/02/20 8:28 AM",
      "commitNameOld": "42dfd270a11419adcb189e8f3a6ddb8f19358088",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 27.89,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n     AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n     try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n       op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n       perfInfo.registerResult(op.getResult()).registerSuccess(true);\n+      incrementReadOps();\n     } catch (AzureBlobFileSystemException ex) {\n       if (ex instanceof AbfsRestOperationException) {\n         AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n         if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n           throw new FileNotFoundException(ere.getMessage());\n         }\n       }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n      incrementReadOps();\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "b033c681e4fc3ee1a38caa807e130aee481d99d5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16612. Track Azure Blob File System client-perceived latency\n\nContributed by Jeetesh Mangwani.\n\nThis add the ability to track the end-to-end performance of ADLS Gen 2 REST APIs by measuring latency in the Hadoop ABFS driver.\nThe latency information is sent back to the ADLS Gen 2 REST API endpoints in the subsequent requests.\n",
      "commitDate": "19/11/19 9:00 AM",
      "commitName": "b033c681e4fc3ee1a38caa807e130aee481d99d5",
      "commitAuthor": "Jeetesh Mangwani",
      "commitDateOld": "10/01/19 3:58 AM",
      "commitNameOld": "e8d19003695e3bc76bfa8e1187a238eec0220def",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 313.21,
      "commitsBetweenForRepo": 2291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n-    try {\n+    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n+    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n       op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n+      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n     } catch (AzureBlobFileSystemException ex) {\n       if (ex instanceof AbfsRestOperationException) {\n         AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n         if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n           throw new FileNotFoundException(ere.getMessage());\n         }\n       }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    AbfsPerfTracker tracker \u003d client.getAbfsPerfTracker();\n    try (AbfsPerfInfo perfInfo \u003d new AbfsPerfInfo(tracker, \"readRemote\", \"read\")) {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n      perfInfo.registerResult(op.getResult()).registerSuccess(true);\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "346c0c8aff0b206d45f34dbce4fcc81364115d95": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16004. ABFS: Convert 404 error response in AbfsInputStream and AbfsOutPutStream to FileNotFoundException.\n\nContributed by Da Zhou.\n",
      "commitDate": "17/12/18 3:15 AM",
      "commitName": "346c0c8aff0b206d45f34dbce4fcc81364115d95",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 90.64,
      "commitsBetweenForRepo": 756,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,37 @@\n   int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n     if (position \u003c 0) {\n       throw new IllegalArgumentException(\"attempting to read from negative offset\");\n     }\n     if (position \u003e\u003d contentLength) {\n       return -1;  // Hadoop prefers -1 to EOFException\n     }\n     if (b \u003d\u003d null) {\n       throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n     }\n     if (offset \u003e\u003d b.length) {\n       throw new IllegalArgumentException(\"offset greater than length of array\");\n     }\n     if (length \u003c 0) {\n       throw new IllegalArgumentException(\"requested read length is less than zero\");\n     }\n     if (length \u003e (b.length - offset)) {\n       throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n     }\n     final AbfsRestOperation op;\n     try {\n       op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n     } catch (AzureBlobFileSystemException ex) {\n+      if (ex instanceof AbfsRestOperationException) {\n+        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n+        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n+          throw new FileNotFoundException(ere.getMessage());\n+        }\n+      }\n       throw new IOException(ex);\n     }\n     long bytesRead \u003d op.getResult().getBytesReceived();\n     if (bytesRead \u003e Integer.MAX_VALUE) {\n       throw new IOException(\"Unexpected Content-Length\");\n     }\n     return (int) bytesRead;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    try {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n    } catch (AzureBlobFileSystemException ex) {\n      if (ex instanceof AbfsRestOperationException) {\n        AbfsRestOperationException ere \u003d (AbfsRestOperationException) ex;\n        if (ere.getStatusCode() \u003d\u003d HttpURLConnection.HTTP_NOT_FOUND) {\n          throw new FileNotFoundException(ere.getMessage());\n        }\n      }\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,31 @@\n+  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n+    if (position \u003c 0) {\n+      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n+    }\n+    if (position \u003e\u003d contentLength) {\n+      return -1;  // Hadoop prefers -1 to EOFException\n+    }\n+    if (b \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n+    }\n+    if (offset \u003e\u003d b.length) {\n+      throw new IllegalArgumentException(\"offset greater than length of array\");\n+    }\n+    if (length \u003c 0) {\n+      throw new IllegalArgumentException(\"requested read length is less than zero\");\n+    }\n+    if (length \u003e (b.length - offset)) {\n+      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n+    }\n+    final AbfsRestOperation op;\n+    try {\n+      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n+    } catch (AzureBlobFileSystemException ex) {\n+      throw new IOException(ex);\n+    }\n+    long bytesRead \u003d op.getResult().getBytesReceived();\n+    if (bytesRead \u003e Integer.MAX_VALUE) {\n+      throw new IOException(\"Unexpected Content-Length\");\n+    }\n+    return (int) bytesRead;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int readRemote(long position, byte[] b, int offset, int length) throws IOException {\n    if (position \u003c 0) {\n      throw new IllegalArgumentException(\"attempting to read from negative offset\");\n    }\n    if (position \u003e\u003d contentLength) {\n      return -1;  // Hadoop prefers -1 to EOFException\n    }\n    if (b \u003d\u003d null) {\n      throw new IllegalArgumentException(\"null byte array passed in to read() method\");\n    }\n    if (offset \u003e\u003d b.length) {\n      throw new IllegalArgumentException(\"offset greater than length of array\");\n    }\n    if (length \u003c 0) {\n      throw new IllegalArgumentException(\"requested read length is less than zero\");\n    }\n    if (length \u003e (b.length - offset)) {\n      throw new IllegalArgumentException(\"requested read length is more than will fit after requested offset in buffer\");\n    }\n    final AbfsRestOperation op;\n    try {\n      op \u003d client.read(path, position, b, offset, length, tolerateOobAppends ? \"*\" : eTag);\n    } catch (AzureBlobFileSystemException ex) {\n      throw new IOException(ex);\n    }\n    long bytesRead \u003d op.getResult().getBytesReceived();\n    if (bytesRead \u003e Integer.MAX_VALUE) {\n      throw new IOException(\"Unexpected Content-Length\");\n    }\n    return (int) bytesRead;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsInputStream.java"
    }
  }
}