{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKFailoverController.java",
  "functionName": "doCedeActive",
  "functionId": "doCedeActive___millisToCede-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
  "functionStartLine": 570,
  "functionEndLine": 603,
  "numCommitsSeen": 35,
  "timeTaken": 1227,
  "changeHistory": [
    "6eba48cbdeae7f7d46b2e0ad84bf3845c333000d",
    "9d5799553fea81920edfab611e5d485a97841848"
  ],
  "changeHistoryShort": {
    "6eba48cbdeae7f7d46b2e0ad84bf3845c333000d": "Ybodychange",
    "9d5799553fea81920edfab611e5d485a97841848": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6eba48cbdeae7f7d46b2e0ad84bf3845c333000d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10251. Both NameNodes could be in STANDBY State if SNN network is unstable. Contributed by Vinayakumar B.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589494 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/14 11:55 AM",
      "commitName": "6eba48cbdeae7f7d46b2e0ad84bf3845c333000d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "28/08/13 10:54 AM",
      "commitNameOld": "f3c0074030864a0f1da2e4c2376798585cf13db0",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 238.04,
      "commitsBetweenForRepo": 1639,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   private void doCedeActive(int millisToCede) \n       throws AccessControlException, ServiceFailedException, IOException {\n     int timeout \u003d FailoverController.getGracefulFenceTimeout(conf);\n \n     // Lock elector to maintain lock ordering of elector -\u003e ZKFC\n     synchronized (elector) {\n       synchronized (this) {\n         if (millisToCede \u003c\u003d 0) {\n           delayJoiningUntilNanotime \u003d 0;\n           recheckElectability();\n           return;\n         }\n   \n         LOG.info(\"Requested by \" + UserGroupInformation.getCurrentUser() +\n             \" at \" + Server.getRemoteAddress() + \" to cede active role.\");\n         boolean needFence \u003d false;\n         try {\n           localTarget.getProxy(conf, timeout).transitionToStandby(createReqInfo());\n           LOG.info(\"Successfully ensured local node is in standby mode\");\n         } catch (IOException ioe) {\n           LOG.warn(\"Unable to transition local node to standby: \" +\n               ioe.getLocalizedMessage());\n           LOG.warn(\"Quitting election but indicating that fencing is \" +\n               \"necessary\");\n           needFence \u003d true;\n         }\n         delayJoiningUntilNanotime \u003d System.nanoTime() +\n             TimeUnit.MILLISECONDS.toNanos(millisToCede);\n         elector.quitElection(needFence);\n+        serviceState \u003d HAServiceState.INITIALIZING;\n       }\n     }\n     recheckElectability();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doCedeActive(int millisToCede) \n      throws AccessControlException, ServiceFailedException, IOException {\n    int timeout \u003d FailoverController.getGracefulFenceTimeout(conf);\n\n    // Lock elector to maintain lock ordering of elector -\u003e ZKFC\n    synchronized (elector) {\n      synchronized (this) {\n        if (millisToCede \u003c\u003d 0) {\n          delayJoiningUntilNanotime \u003d 0;\n          recheckElectability();\n          return;\n        }\n  \n        LOG.info(\"Requested by \" + UserGroupInformation.getCurrentUser() +\n            \" at \" + Server.getRemoteAddress() + \" to cede active role.\");\n        boolean needFence \u003d false;\n        try {\n          localTarget.getProxy(conf, timeout).transitionToStandby(createReqInfo());\n          LOG.info(\"Successfully ensured local node is in standby mode\");\n        } catch (IOException ioe) {\n          LOG.warn(\"Unable to transition local node to standby: \" +\n              ioe.getLocalizedMessage());\n          LOG.warn(\"Quitting election but indicating that fencing is \" +\n              \"necessary\");\n          needFence \u003d true;\n        }\n        delayJoiningUntilNanotime \u003d System.nanoTime() +\n            TimeUnit.MILLISECONDS.toNanos(millisToCede);\n        elector.quitElection(needFence);\n        serviceState \u003d HAServiceState.INITIALIZING;\n      }\n    }\n    recheckElectability();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "9d5799553fea81920edfab611e5d485a97841848": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8279. Allow manual failover to be invoked when auto-failover is enabled. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1333288 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/05/12 6:56 PM",
      "commitName": "9d5799553fea81920edfab611e5d485a97841848",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,33 @@\n+  private void doCedeActive(int millisToCede) \n+      throws AccessControlException, ServiceFailedException, IOException {\n+    int timeout \u003d FailoverController.getGracefulFenceTimeout(conf);\n+\n+    // Lock elector to maintain lock ordering of elector -\u003e ZKFC\n+    synchronized (elector) {\n+      synchronized (this) {\n+        if (millisToCede \u003c\u003d 0) {\n+          delayJoiningUntilNanotime \u003d 0;\n+          recheckElectability();\n+          return;\n+        }\n+  \n+        LOG.info(\"Requested by \" + UserGroupInformation.getCurrentUser() +\n+            \" at \" + Server.getRemoteAddress() + \" to cede active role.\");\n+        boolean needFence \u003d false;\n+        try {\n+          localTarget.getProxy(conf, timeout).transitionToStandby(createReqInfo());\n+          LOG.info(\"Successfully ensured local node is in standby mode\");\n+        } catch (IOException ioe) {\n+          LOG.warn(\"Unable to transition local node to standby: \" +\n+              ioe.getLocalizedMessage());\n+          LOG.warn(\"Quitting election but indicating that fencing is \" +\n+              \"necessary\");\n+          needFence \u003d true;\n+        }\n+        delayJoiningUntilNanotime \u003d System.nanoTime() +\n+            TimeUnit.MILLISECONDS.toNanos(millisToCede);\n+        elector.quitElection(needFence);\n+      }\n+    }\n+    recheckElectability();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void doCedeActive(int millisToCede) \n      throws AccessControlException, ServiceFailedException, IOException {\n    int timeout \u003d FailoverController.getGracefulFenceTimeout(conf);\n\n    // Lock elector to maintain lock ordering of elector -\u003e ZKFC\n    synchronized (elector) {\n      synchronized (this) {\n        if (millisToCede \u003c\u003d 0) {\n          delayJoiningUntilNanotime \u003d 0;\n          recheckElectability();\n          return;\n        }\n  \n        LOG.info(\"Requested by \" + UserGroupInformation.getCurrentUser() +\n            \" at \" + Server.getRemoteAddress() + \" to cede active role.\");\n        boolean needFence \u003d false;\n        try {\n          localTarget.getProxy(conf, timeout).transitionToStandby(createReqInfo());\n          LOG.info(\"Successfully ensured local node is in standby mode\");\n        } catch (IOException ioe) {\n          LOG.warn(\"Unable to transition local node to standby: \" +\n              ioe.getLocalizedMessage());\n          LOG.warn(\"Quitting election but indicating that fencing is \" +\n              \"necessary\");\n          needFence \u003d true;\n        }\n        delayJoiningUntilNanotime \u003d System.nanoTime() +\n            TimeUnit.MILLISECONDS.toNanos(millisToCede);\n        elector.quitElection(needFence);\n      }\n    }\n    recheckElectability();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java"
    }
  }
}