{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleCopyListing.java",
  "functionName": "processItem",
  "functionId": "processItem___workRequest-WorkRequest__FileStatus__",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
  "functionStartLine": 573,
  "functionEndLine": 604,
  "numCommitsSeen": 27,
  "timeTaken": 1530,
  "changeHistory": [
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
    "a287d2fb77d9873b61c6ab24134993d784ae8475",
    "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7"
  ],
  "changeHistoryShort": {
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Ybodychange",
    "a287d2fb77d9873b61c6ab24134993d784ae8475": "Ybodychange",
    "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "18/05/15 1:24 PM",
      "commitNameOld": "0790275f058b0cf41780ad337c9150a1e8ebebc6",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 93.78,
      "commitsBetweenForRepo": 595,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public WorkReport\u003cFileStatus[]\u003e processItem(\n         WorkRequest\u003cFileStatus\u003e workRequest) {\n       FileStatus parent \u003d workRequest.getItem();\n       int retry \u003d workRequest.getRetry();\n       WorkReport\u003cFileStatus[]\u003e result \u003d null;\n       try {\n         if (retry \u003e 0) {\n           int sleepSeconds \u003d 2;\n           for (int i \u003d 1; i \u003c retry; i++) {\n             sleepSeconds *\u003d 2;\n           }\n           try {\n             Thread.sleep(1000 * sleepSeconds);\n           } catch (InterruptedException ie) {\n             LOG.debug(\"Interrupted while sleeping in exponential backoff.\");\n           }\n         }\n-        result \u003d new WorkReport\u003cFileStatus[]\u003e(\n-            fileSystem.listStatus(parent.getPath()), retry, true);\n+        result \u003d new WorkReport\u003cFileStatus[]\u003e(getFileStatus(parent.getPath()),\n+                retry, true);\n       } catch (FileNotFoundException fnf) {\n         LOG.error(\"FileNotFoundException exception in listStatus: \" +\n                   fnf.getMessage());\n         result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], retry, true,\n                                               fnf);\n       } catch (Exception e) {\n         LOG.error(\"Exception in listStatus. Will send for retry.\");\n         FileStatus[] parentList \u003d new FileStatus[1];\n         parentList[0] \u003d parent;\n         result \u003d new WorkReport\u003cFileStatus[]\u003e(parentList, retry + 1, false, e);\n       }\n       return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WorkReport\u003cFileStatus[]\u003e processItem(\n        WorkRequest\u003cFileStatus\u003e workRequest) {\n      FileStatus parent \u003d workRequest.getItem();\n      int retry \u003d workRequest.getRetry();\n      WorkReport\u003cFileStatus[]\u003e result \u003d null;\n      try {\n        if (retry \u003e 0) {\n          int sleepSeconds \u003d 2;\n          for (int i \u003d 1; i \u003c retry; i++) {\n            sleepSeconds *\u003d 2;\n          }\n          try {\n            Thread.sleep(1000 * sleepSeconds);\n          } catch (InterruptedException ie) {\n            LOG.debug(\"Interrupted while sleeping in exponential backoff.\");\n          }\n        }\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(getFileStatus(parent.getPath()),\n                retry, true);\n      } catch (FileNotFoundException fnf) {\n        LOG.error(\"FileNotFoundException exception in listStatus: \" +\n                  fnf.getMessage());\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], retry, true,\n                                              fnf);\n      } catch (Exception e) {\n        LOG.error(\"Exception in listStatus. Will send for retry.\");\n        FileStatus[] parentList \u003d new FileStatus[1];\n        parentList[0] \u003d parent;\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(parentList, retry + 1, false, e);\n      }\n      return result;\n    }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "a287d2fb77d9873b61c6ab24134993d784ae8475": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11876. Refactor code to make it more readable, minor maybePrintStats bug (Zoran Dimitrijevic via raviprak)\n",
      "commitDate": "24/04/15 1:39 PM",
      "commitName": "a287d2fb77d9873b61c6ab24134993d784ae8475",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "21/04/15 4:49 PM",
      "commitNameOld": "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 2.87,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     public WorkReport\u003cFileStatus[]\u003e processItem(\n         WorkRequest\u003cFileStatus\u003e workRequest) {\n       FileStatus parent \u003d workRequest.getItem();\n       int retry \u003d workRequest.getRetry();\n       WorkReport\u003cFileStatus[]\u003e result \u003d null;\n       try {\n         if (retry \u003e 0) {\n           int sleepSeconds \u003d 2;\n           for (int i \u003d 1; i \u003c retry; i++) {\n             sleepSeconds *\u003d 2;\n           }\n           try {\n             Thread.sleep(1000 * sleepSeconds);\n           } catch (InterruptedException ie) {\n             LOG.debug(\"Interrupted while sleeping in exponential backoff.\");\n           }\n         }\n         result \u003d new WorkReport\u003cFileStatus[]\u003e(\n-            fileSystem.listStatus(parent.getPath()), 0, true);\n+            fileSystem.listStatus(parent.getPath()), retry, true);\n       } catch (FileNotFoundException fnf) {\n         LOG.error(\"FileNotFoundException exception in listStatus: \" +\n                   fnf.getMessage());\n-        result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], 0, true, fnf);\n+        result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], retry, true,\n+                                              fnf);\n       } catch (Exception e) {\n         LOG.error(\"Exception in listStatus. Will send for retry.\");\n         FileStatus[] parentList \u003d new FileStatus[1];\n         parentList[0] \u003d parent;\n         result \u003d new WorkReport\u003cFileStatus[]\u003e(parentList, retry + 1, false, e);\n       }\n       return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WorkReport\u003cFileStatus[]\u003e processItem(\n        WorkRequest\u003cFileStatus\u003e workRequest) {\n      FileStatus parent \u003d workRequest.getItem();\n      int retry \u003d workRequest.getRetry();\n      WorkReport\u003cFileStatus[]\u003e result \u003d null;\n      try {\n        if (retry \u003e 0) {\n          int sleepSeconds \u003d 2;\n          for (int i \u003d 1; i \u003c retry; i++) {\n            sleepSeconds *\u003d 2;\n          }\n          try {\n            Thread.sleep(1000 * sleepSeconds);\n          } catch (InterruptedException ie) {\n            LOG.debug(\"Interrupted while sleeping in exponential backoff.\");\n          }\n        }\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(\n            fileSystem.listStatus(parent.getPath()), retry, true);\n      } catch (FileNotFoundException fnf) {\n        LOG.error(\"FileNotFoundException exception in listStatus: \" +\n                  fnf.getMessage());\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], retry, true,\n                                              fnf);\n      } catch (Exception e) {\n        LOG.error(\"Exception in listStatus. Will send for retry.\");\n        FileStatus[] parentList \u003d new FileStatus[1];\n        parentList[0] \u003d parent;\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(parentList, retry + 1, false, e);\n      }\n      return result;\n    }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11827. Speed-up distcp buildListing() using threadpool (Zoran Dimitrijevic via raviprak)\n",
      "commitDate": "21/04/15 4:49 PM",
      "commitName": "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7",
      "commitAuthor": "Ravi Prakash",
      "diff": "@@ -0,0 +1,31 @@\n+    public WorkReport\u003cFileStatus[]\u003e processItem(\n+        WorkRequest\u003cFileStatus\u003e workRequest) {\n+      FileStatus parent \u003d workRequest.getItem();\n+      int retry \u003d workRequest.getRetry();\n+      WorkReport\u003cFileStatus[]\u003e result \u003d null;\n+      try {\n+        if (retry \u003e 0) {\n+          int sleepSeconds \u003d 2;\n+          for (int i \u003d 1; i \u003c retry; i++) {\n+            sleepSeconds *\u003d 2;\n+          }\n+          try {\n+            Thread.sleep(1000 * sleepSeconds);\n+          } catch (InterruptedException ie) {\n+            LOG.debug(\"Interrupted while sleeping in exponential backoff.\");\n+          }\n+        }\n+        result \u003d new WorkReport\u003cFileStatus[]\u003e(\n+            fileSystem.listStatus(parent.getPath()), 0, true);\n+      } catch (FileNotFoundException fnf) {\n+        LOG.error(\"FileNotFoundException exception in listStatus: \" +\n+                  fnf.getMessage());\n+        result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], 0, true, fnf);\n+      } catch (Exception e) {\n+        LOG.error(\"Exception in listStatus. Will send for retry.\");\n+        FileStatus[] parentList \u003d new FileStatus[1];\n+        parentList[0] \u003d parent;\n+        result \u003d new WorkReport\u003cFileStatus[]\u003e(parentList, retry + 1, false, e);\n+      }\n+      return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public WorkReport\u003cFileStatus[]\u003e processItem(\n        WorkRequest\u003cFileStatus\u003e workRequest) {\n      FileStatus parent \u003d workRequest.getItem();\n      int retry \u003d workRequest.getRetry();\n      WorkReport\u003cFileStatus[]\u003e result \u003d null;\n      try {\n        if (retry \u003e 0) {\n          int sleepSeconds \u003d 2;\n          for (int i \u003d 1; i \u003c retry; i++) {\n            sleepSeconds *\u003d 2;\n          }\n          try {\n            Thread.sleep(1000 * sleepSeconds);\n          } catch (InterruptedException ie) {\n            LOG.debug(\"Interrupted while sleeping in exponential backoff.\");\n          }\n        }\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(\n            fileSystem.listStatus(parent.getPath()), 0, true);\n      } catch (FileNotFoundException fnf) {\n        LOG.error(\"FileNotFoundException exception in listStatus: \" +\n                  fnf.getMessage());\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(new FileStatus[0], 0, true, fnf);\n      } catch (Exception e) {\n        LOG.error(\"Exception in listStatus. Will send for retry.\");\n        FileStatus[] parentList \u003d new FileStatus[1];\n        parentList[0] \u003d parent;\n        result \u003d new WorkReport\u003cFileStatus[]\u003e(parentList, retry + 1, false, e);\n      }\n      return result;\n    }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java"
    }
  }
}