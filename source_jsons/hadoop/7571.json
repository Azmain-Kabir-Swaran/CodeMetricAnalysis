{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNode.java",
  "functionName": "parseArguments",
  "functionId": "parseArguments___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
  "functionStartLine": 1499,
  "functionEndLine": 1629,
  "numCommitsSeen": 231,
  "timeTaken": 10606,
  "changeHistory": [
    "3b22fcd377eecedacceb6e37368463b48e0133c8",
    "3a78e5ffd83dd96ef9bca72745f27efdda0c9e24",
    "1dd79ffaca4b0c2cb0ab817dff3697686f3367e3",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
    "f6d0b8892ab116514fd031a61441141ac3bdfeb5",
    "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
    "280bdb9a16a898118421aee16db11f52eed9bdae",
    "d6bd920bba0d7cb77ca76c3a79d1ba1e039da9e5",
    "d8bc523754181b4c1321bcfab886ebf228d9c98f",
    "c93185df660aa4fbb7885794550177286f9f3029",
    "3ffdb9152e780f4fd80ac7ea7b1a45ec583edc36",
    "706394d03992b394e9f907aff2155df493e4ea4e",
    "ba688e11c195327d3832610789fdd0cf81a3d0a1",
    "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "3b22fcd377eecedacceb6e37368463b48e0133c8": "Ybodychange",
    "3a78e5ffd83dd96ef9bca72745f27efdda0c9e24": "Ybodychange",
    "1dd79ffaca4b0c2cb0ab817dff3697686f3367e3": "Ybodychange",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": "Ybodychange",
    "f6d0b8892ab116514fd031a61441141ac3bdfeb5": "Ybodychange",
    "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed": "Ybodychange",
    "280bdb9a16a898118421aee16db11f52eed9bdae": "Ybodychange",
    "d6bd920bba0d7cb77ca76c3a79d1ba1e039da9e5": "Ymultichange(Ymodifierchange,Ybodychange)",
    "d8bc523754181b4c1321bcfab886ebf228d9c98f": "Ybodychange",
    "c93185df660aa4fbb7885794550177286f9f3029": "Ybodychange",
    "3ffdb9152e780f4fd80ac7ea7b1a45ec583edc36": "Ybodychange",
    "706394d03992b394e9f907aff2155df493e4ea4e": "Ybodychange",
    "ba688e11c195327d3832610789fdd0cf81a3d0a1": "Ybodychange",
    "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3b22fcd377eecedacceb6e37368463b48e0133c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14256. Review Logging of NameNode Class. Contributed by David Mollitor.\n",
      "commitDate": "29/08/19 2:21 PM",
      "commitName": "3b22fcd377eecedacceb6e37368463b48e0133c8",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "16/08/19 2:53 PM",
      "commitNameOld": "a38b9e137e67571d2df83a7a9505b66cffefa7c8",
      "commitAuthorOld": "hunshenshi",
      "daysBetweenCommits": 12.98,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,131 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.OBSERVER.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.OBSERVER;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n           || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n             StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n-            LOG.error(\"Unknown upgrade flag \" + flag);\n+            LOG.error(\"Unknown upgrade flag: {}\", flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n         if (i \u003e\u003d argsLen) {\n           LOG.error(\"Must specify a rolling upgrade startup option \"\n               + RollingUpgradeStartupOption.getAllOptionString());\n           return null;\n         }\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.error(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.OBSERVER.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.OBSERVER;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.error(\"Unknown upgrade flag: {}\", flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        if (i \u003e\u003d argsLen) {\n          LOG.error(\"Must specify a rolling upgrade startup option \"\n              + RollingUpgradeStartupOption.getAllOptionString());\n          return null;\n        }\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.error(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "3a78e5ffd83dd96ef9bca72745f27efdda0c9e24": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12975. [SBN read] Changes to the NameNode to support reads from standby. Contributed by Chao Sun.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "3a78e5ffd83dd96ef9bca72745f27efdda0c9e24",
      "commitAuthor": "Chao Sun",
      "commitDateOld": "14/12/18 11:10 AM",
      "commitNameOld": "00d5e631b596f8712600879366e5283829e7ee5d",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 9.93,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,131 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n+      } else if (StartupOption.OBSERVER.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.OBSERVER;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n           || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n             StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n             LOG.error(\"Unknown upgrade flag \" + flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n         if (i \u003e\u003d argsLen) {\n           LOG.error(\"Must specify a rolling upgrade startup option \"\n               + RollingUpgradeStartupOption.getAllOptionString());\n           return null;\n         }\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.error(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.OBSERVER.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.OBSERVER;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.error(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        if (i \u003e\u003d argsLen) {\n          LOG.error(\"Must specify a rolling upgrade startup option \"\n              + RollingUpgradeStartupOption.getAllOptionString());\n          return null;\n        }\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.error(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "1dd79ffaca4b0c2cb0ab817dff3697686f3367e3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8241. Remove unused NameNode startup option -finalize. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "11/05/15 8:18 AM",
      "commitName": "1dd79ffaca4b0c2cb0ab817dff3697686f3367e3",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 8.93,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,129 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n           || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n             StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n               LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n             LOG.error(\"Unknown upgrade flag \" + flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n         if (i \u003e\u003d argsLen) {\n           LOG.error(\"Must specify a rolling upgrade startup option \"\n               + RollingUpgradeStartupOption.getAllOptionString());\n           return null;\n         }\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n-      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n-        startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.error(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.error(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        if (i \u003e\u003d argsLen) {\n          LOG.error(\"Must specify a rolling upgrade startup option \"\n              + RollingUpgradeStartupOption.getAllOptionString());\n          return null;\n        }\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.error(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7712. Switch blockStateChangeLog to use slf4j.\n",
      "commitDate": "03/02/15 3:01 PM",
      "commitName": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/01/15 11:33 AM",
      "commitNameOld": "db334bb8625da97c7e518cbcf477530c7ba7001e",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 13.14,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,131 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n-              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+              LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n-              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+              LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n           || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n             StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n-              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+              LOG.error(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n-            LOG.fatal(\"Unknown upgrade flag \" + flag);\n+            LOG.error(\"Unknown upgrade flag \" + flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n         if (i \u003e\u003d argsLen) {\n-          LOG.fatal(\"Must specify a rolling upgrade startup option \"\n+          LOG.error(\"Must specify a rolling upgrade startup option \"\n               + RollingUpgradeStartupOption.getAllOptionString());\n           return null;\n         }\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n-            LOG.fatal(\"Invalid argument: \" + args[i]);\n+            LOG.error(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.error(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.error(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        if (i \u003e\u003d argsLen) {\n          LOG.error(\"Must specify a rolling upgrade startup option \"\n              + RollingUpgradeStartupOption.getAllOptionString());\n          return null;\n        }\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.error(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "f6d0b8892ab116514fd031a61441141ac3bdfeb5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7237. The command \"hdfs namenode -rollingUpgrade\" throws ArrayIndexOutOfBoundsException.\n",
      "commitDate": "13/10/14 6:28 PM",
      "commitName": "f6d0b8892ab116514fd031a61441141ac3bdfeb5",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "01/10/14 2:53 PM",
      "commitNameOld": "dd1b8f2ed8a86871517c730a9f370aca4b763514",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 12.15,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,126 +1,131 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n           || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n             StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n             LOG.fatal(\"Unknown upgrade flag \" + flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n+        if (i \u003e\u003d argsLen) {\n+          LOG.fatal(\"Must specify a rolling upgrade startup option \"\n+              + RollingUpgradeStartupOption.getAllOptionString());\n+          return null;\n+        }\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.fatal(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.fatal(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        if (i \u003e\u003d argsLen) {\n          LOG.fatal(\"Must specify a rolling upgrade startup option \"\n              + RollingUpgradeStartupOption.getAllOptionString());\n          return null;\n        }\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6597. Add a new option to NN upgrade to terminate the process after upgrade on NN is completed. Contributed by Danilo Vunjak.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611723 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 10:14 AM",
      "commitName": "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/06/14 4:12 PM",
      "commitNameOld": "280bdb9a16a898118421aee16db11f52eed9bdae",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 21.75,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,126 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n-      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n-        startOpt \u003d StartupOption.UPGRADE;\n+      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n+          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n+            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n             LOG.fatal(\"Unknown upgrade flag \" + flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.fatal(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)\n          || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? \n            StartupOption.UPGRADE : StartupOption.UPGRADEONLY;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.fatal(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "280bdb9a16a898118421aee16db11f52eed9bdae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6572. Add an option to the NameNode that prints the software and on-disk image versions. Contributed by Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/06/14 4:12 PM",
      "commitName": "280bdb9a16a898118421aee16db11f52eed9bdae",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/06/14 11:54 AM",
      "commitNameOld": "9ca79e8d327e95845ef9794396afd43a52bc3d40",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,122 +1,124 @@\n   static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         /* Can be followed by CLUSTERID with a required parameter or\n          * RENAMERESERVED with an optional parameter\n          */\n         while (i + 1 \u003c argsLen) {\n           String flag \u003d args[i + 1];\n           if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             if (i + 2 \u003c argsLen) {\n               i +\u003d 2;\n               startOpt.setClusterId(args[i]);\n             } else {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n           } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n               .getName())) {\n             if (i + 2 \u003c argsLen) {\n               FSImageFormat.setRenameReservedPairs(args[i + 2]);\n               i +\u003d 2;\n             } else {\n               FSImageFormat.useDefaultRenameReservedPairs();\n               i +\u003d 1;\n             }\n           } else {\n             LOG.fatal(\"Unknown upgrade flag \" + flag);\n             return null;\n           }\n         }\n       } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLINGUPGRADE;\n         ++i;\n         startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.fatal(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n+      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.METADATAVERSION;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.fatal(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.METADATAVERSION;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "d6bd920bba0d7cb77ca76c3a79d1ba1e039da9e5": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5709. Improve NameNode upgrade with existing reserved paths and path components. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564645 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 10:48 PM",
      "commitName": "d6bd920bba0d7cb77ca76c3a79d1ba1e039da9e5",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5709. Improve NameNode upgrade with existing reserved paths and path components. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/02/14 10:48 PM",
          "commitName": "d6bd920bba0d7cb77ca76c3a79d1ba1e039da9e5",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "25/01/14 12:01 PM",
          "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 10.45,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,96 +1,118 @@\n-  private static StartupOption parseArguments(String args[]) {\n+  static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n-        // might be followed by two args\n-        if (i + 2 \u003c argsLen\n-            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n-          i +\u003d 2;\n-          startOpt.setClusterId(args[i]);\n+        /* Can be followed by CLUSTERID with a required parameter or\n+         * RENAMERESERVED with an optional parameter\n+         */\n+        while (i + 1 \u003c argsLen) {\n+          String flag \u003d args[i + 1];\n+          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n+            if (i + 2 \u003c argsLen) {\n+              i +\u003d 2;\n+              startOpt.setClusterId(args[i]);\n+            } else {\n+              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+                  + StartupOption.CLUSTERID.getName() + \" flag\");\n+              return null;\n+            }\n+          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n+              .getName())) {\n+            if (i + 2 \u003c argsLen) {\n+              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n+              i +\u003d 2;\n+            } else {\n+              FSImageFormat.useDefaultRenameReservedPairs();\n+              i +\u003d 1;\n+            }\n+          } else {\n+            LOG.fatal(\"Unknown upgrade flag \" + flag);\n+            return null;\n+          }\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.fatal(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.fatal(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5709. Improve NameNode upgrade with existing reserved paths and path components. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/02/14 10:48 PM",
          "commitName": "d6bd920bba0d7cb77ca76c3a79d1ba1e039da9e5",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "25/01/14 12:01 PM",
          "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 10.45,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,96 +1,118 @@\n-  private static StartupOption parseArguments(String args[]) {\n+  static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n-        // might be followed by two args\n-        if (i + 2 \u003c argsLen\n-            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n-          i +\u003d 2;\n-          startOpt.setClusterId(args[i]);\n+        /* Can be followed by CLUSTERID with a required parameter or\n+         * RENAMERESERVED with an optional parameter\n+         */\n+        while (i + 1 \u003c argsLen) {\n+          String flag \u003d args[i + 1];\n+          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n+            if (i + 2 \u003c argsLen) {\n+              i +\u003d 2;\n+              startOpt.setClusterId(args[i]);\n+            } else {\n+              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+                  + StartupOption.CLUSTERID.getName() + \" flag\");\n+              return null;\n+            }\n+          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n+              .getName())) {\n+            if (i + 2 \u003c argsLen) {\n+              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n+              i +\u003d 2;\n+            } else {\n+              FSImageFormat.useDefaultRenameReservedPairs();\n+              i +\u003d 1;\n+            }\n+          } else {\n+            LOG.fatal(\"Unknown upgrade flag \" + flag);\n+            return null;\n+          }\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.fatal(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        /* Can be followed by CLUSTERID with a required parameter or\n         * RENAMERESERVED with an optional parameter\n         */\n        while (i + 1 \u003c argsLen) {\n          String flag \u003d args[i + 1];\n          if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            if (i + 2 \u003c argsLen) {\n              i +\u003d 2;\n              startOpt.setClusterId(args[i]);\n            } else {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n          } else if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED\n              .getName())) {\n            if (i + 2 \u003c argsLen) {\n              FSImageFormat.setRenameReservedPairs(args[i + 2]);\n              i +\u003d 2;\n            } else {\n              FSImageFormat.useDefaultRenameReservedPairs();\n              i +\u003d 1;\n            }\n          } else {\n            LOG.fatal(\"Unknown upgrade flag \" + flag);\n            return null;\n          }\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "d8bc523754181b4c1321bcfab886ebf228d9c98f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5753. Add new NN startup options for downgrade and rollback using upgrade marker.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1559907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/01/14 6:38 PM",
      "commitName": "d8bc523754181b4c1321bcfab886ebf228d9c98f",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/01/14 4:05 PM",
      "commitNameOld": "9d382a41743831fbcfecd302ead02095f36b7f59",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 10.11,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,100 @@\n   private static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n+      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n+        ++i;\n+        startOpt.setRollingUpgradeStartupOption(args[i]);\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n           if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n             startOpt.setInteractiveFormat(false);\n           } else if (StartupOption.FORCE.getName().equals(args[i])) {\n             startOpt.setForceFormat(true);\n           } else {\n             LOG.fatal(\"Invalid argument: \" + args[i]);\n             return null;\n           }\n         }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLINGUPGRADE;\n        ++i;\n        startOpt.setRollingUpgradeStartupOption(args[i]);\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "c93185df660aa4fbb7885794550177286f9f3029": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3276. initializeSharedEdits should have a -nonInteractive flag. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1372628 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/12 2:26 PM",
      "commitName": "c93185df660aa4fbb7885794550177286f9f3029",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "09/08/12 3:13 PM",
      "commitNameOld": "9d0f8792a9a1d3d2b24adfc2c213247a099e7ad1",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,96 @@\n   private static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         for (i \u003d i + 1; i \u003c argsLen; i++) {\n           if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n             i++;\n             if (i \u003e\u003d argsLen) {\n               // if no cluster id specified, return null\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             String clusterId \u003d args[i];\n             // Make sure an id is specified and not another flag\n             if (clusterId.isEmpty() ||\n                 clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                 clusterId.equalsIgnoreCase(\n                     StartupOption.NONINTERACTIVE.getName())) {\n               LOG.fatal(\"Must specify a valid cluster ID after the \"\n                   + StartupOption.CLUSTERID.getName() + \" flag\");\n               return null;\n             }\n             startOpt.setClusterId(clusterId);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n             startOpt.setForceFormat(true);\n           }\n \n           if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n             startOpt.setInteractiveFormat(false);\n           }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n+        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n+          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n+            startOpt.setInteractiveFormat(false);\n+          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n+            startOpt.setForceFormat(true);\n+          } else {\n+            LOG.fatal(\"Invalid argument: \" + args[i]);\n+            return null;\n+          }\n+        }\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        for (i \u003d i + 1 ; i \u003c argsLen; i++) {\n          if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {\n            startOpt.setInteractiveFormat(false);\n          } else if (StartupOption.FORCE.getName().equals(args[i])) {\n            startOpt.setForceFormat(true);\n          } else {\n            LOG.fatal(\"Invalid argument: \" + args[i]);\n            return null;\n          }\n        }\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "3ffdb9152e780f4fd80ac7ea7b1a45ec583edc36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3094. add -nonInteractive and -force option to namenode -format command. Contributed by Arpit Gupta.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1312025 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 3:22 PM",
      "commitName": "3ffdb9152e780f4fd80ac7ea7b1a45ec583edc36",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "09/04/12 7:17 PM",
      "commitNameOld": "9597c81f35c17f6ee8bd2cef85f76af306478e6b",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,86 @@\n   private static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n-        // might be followed by two args\n-        if (i + 2 \u003c argsLen\n-            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n-          i +\u003d 2;\n-          startOpt.setClusterId(args[i]);\n+        for (i \u003d i + 1; i \u003c argsLen; i++) {\n+          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n+            i++;\n+            if (i \u003e\u003d argsLen) {\n+              // if no cluster id specified, return null\n+              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+                  + StartupOption.CLUSTERID.getName() + \" flag\");\n+              return null;\n+            }\n+            String clusterId \u003d args[i];\n+            // Make sure an id is specified and not another flag\n+            if (clusterId.isEmpty() ||\n+                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n+                clusterId.equalsIgnoreCase(\n+                    StartupOption.NONINTERACTIVE.getName())) {\n+              LOG.fatal(\"Must specify a valid cluster ID after the \"\n+                  + StartupOption.CLUSTERID.getName() + \" flag\");\n+              return null;\n+            }\n+            startOpt.setClusterId(clusterId);\n+          }\n+\n+          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n+            startOpt.setForceFormat(true);\n+          }\n+\n+          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n+            startOpt.setInteractiveFormat(false);\n+          }\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         return startOpt;\n       } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n         if (startOpt !\u003d StartupOption.REGULAR) {\n           throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n               \"other startup options.\");\n         }\n         startOpt \u003d StartupOption.RECOVER;\n         while (++i \u003c argsLen) {\n           if (args[i].equalsIgnoreCase(\n                 StartupOption.FORCE.getName())) {\n             startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n           } else {\n             throw new RuntimeException(\"Error parsing recovery options: \" + \n               \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n           }\n         }\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        for (i \u003d i + 1; i \u003c argsLen; i++) {\n          if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n            i++;\n            if (i \u003e\u003d argsLen) {\n              // if no cluster id specified, return null\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            String clusterId \u003d args[i];\n            // Make sure an id is specified and not another flag\n            if (clusterId.isEmpty() ||\n                clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) ||\n                clusterId.equalsIgnoreCase(\n                    StartupOption.NONINTERACTIVE.getName())) {\n              LOG.fatal(\"Must specify a valid cluster ID after the \"\n                  + StartupOption.CLUSTERID.getName() + \" flag\");\n              return null;\n            }\n            startOpt.setClusterId(clusterId);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {\n            startOpt.setForceFormat(true);\n          }\n\n          if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {\n            startOpt.setInteractiveFormat(false);\n          }\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "706394d03992b394e9f907aff2155df493e4ea4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3004. Implement Recovery Mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/12 12:39 PM",
      "commitName": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "05/04/12 9:56 PM",
      "commitNameOld": "d483b6f3fc1128cd98f00b1801f22deaaae7eec0",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 3.61,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,62 @@\n   private static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n       } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n         return startOpt;\n+      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n+        if (startOpt !\u003d StartupOption.REGULAR) {\n+          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n+              \"other startup options.\");\n+        }\n+        startOpt \u003d StartupOption.RECOVER;\n+        while (++i \u003c argsLen) {\n+          if (args[i].equalsIgnoreCase(\n+                StartupOption.FORCE.getName())) {\n+            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n+          } else {\n+            throw new RuntimeException(\"Error parsing recovery options: \" + \n+              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n+          }\n+        }\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        return startOpt;\n      } else if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {\n        if (startOpt !\u003d StartupOption.REGULAR) {\n          throw new RuntimeException(\"Can\u0027t combine -recover with \" +\n              \"other startup options.\");\n        }\n        startOpt \u003d StartupOption.RECOVER;\n        while (++i \u003c argsLen) {\n          if (args[i].equalsIgnoreCase(\n                StartupOption.FORCE.getName())) {\n            startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);\n          } else {\n            throw new RuntimeException(\"Error parsing recovery options: \" + \n              \"can\u0027t understand option \\\"\" + args[i] + \"\\\"\");\n          }\n        }\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "ba688e11c195327d3832610789fdd0cf81a3d0a1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3102. Add CLI tool to initialize the shared-edits dir. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309580 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 1:15 PM",
      "commitName": "ba688e11c195327d3832610789fdd0cf81a3d0a1",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "03/04/12 7:51 PM",
      "commitNameOld": "8c0366bf103ca638b5ef9e962671f7728db4fd10",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   private static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n       } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n         return startOpt;\n+      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n+        return startOpt;\n       } else {\n         return null;\n       }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.INITIALIZESHAREDEDITS;\n        return startOpt;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2731. Add command to bootstrap the Standby Node\u0027s name directories from the Active NameNode. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299807 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/12 12:41 PM",
      "commitName": "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/02/12 11:03 PM",
      "commitNameOld": "9318ff425019b9f88e154a80f3aeb23e6c69cb69",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 11.53,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   private static StartupOption parseArguments(String args[]) {\n     int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n     StartupOption startOpt \u003d StartupOption.REGULAR;\n     for(int i\u003d0; i \u003c argsLen; i++) {\n       String cmd \u003d args[i];\n       if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FORMAT;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.GENCLUSTERID;\n       } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.REGULAR;\n       } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.BACKUP;\n       } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.CHECKPOINT;\n       } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.UPGRADE;\n         // might be followed by two args\n         if (i + 2 \u003c argsLen\n             \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n           i +\u003d 2;\n           startOpt.setClusterId(args[i]);\n         }\n       } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.ROLLBACK;\n       } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.FINALIZE;\n       } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n         startOpt \u003d StartupOption.IMPORT;\n-      } else\n+      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n+        return startOpt;\n+      } else {\n         return null;\n+      }\n     }\n     return startOpt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BOOTSTRAPSTANDBY;\n        return startOpt;\n      } else {\n        return null;\n      }\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else\n        return null;\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else\n        return null;\n    }\n    return startOpt;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  private static StartupOption parseArguments(String args[]) {\n+    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n+    StartupOption startOpt \u003d StartupOption.REGULAR;\n+    for(int i\u003d0; i \u003c argsLen; i++) {\n+      String cmd \u003d args[i];\n+      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.FORMAT;\n+        // might be followed by two args\n+        if (i + 2 \u003c argsLen\n+            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n+          i +\u003d 2;\n+          startOpt.setClusterId(args[i]);\n+        }\n+      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.GENCLUSTERID;\n+      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.REGULAR;\n+      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.BACKUP;\n+      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.CHECKPOINT;\n+      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.UPGRADE;\n+        // might be followed by two args\n+        if (i + 2 \u003c argsLen\n+            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n+          i +\u003d 2;\n+          startOpt.setClusterId(args[i]);\n+        }\n+      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.ROLLBACK;\n+      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.FINALIZE;\n+      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n+        startOpt \u003d StartupOption.IMPORT;\n+      } else\n+        return null;\n+    }\n+    return startOpt;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static StartupOption parseArguments(String args[]) {\n    int argsLen \u003d (args \u003d\u003d null) ? 0 : args.length;\n    StartupOption startOpt \u003d StartupOption.REGULAR;\n    for(int i\u003d0; i \u003c argsLen; i++) {\n      String cmd \u003d args[i];\n      if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FORMAT;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.GENCLUSTERID;\n      } else if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.REGULAR;\n      } else if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.BACKUP;\n      } else if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.CHECKPOINT;\n      } else if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.UPGRADE;\n        // might be followed by two args\n        if (i + 2 \u003c argsLen\n            \u0026\u0026 args[i + 1].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {\n          i +\u003d 2;\n          startOpt.setClusterId(args[i]);\n        }\n      } else if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.ROLLBACK;\n      } else if (StartupOption.FINALIZE.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.FINALIZE;\n      } else if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {\n        startOpt \u003d StartupOption.IMPORT;\n      } else\n        return null;\n    }\n    return startOpt;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
    }
  }
}