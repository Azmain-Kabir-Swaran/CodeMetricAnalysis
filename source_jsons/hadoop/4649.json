{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientNamenodeProtocolServerSideTranslatorPB.java",
  "functionName": "addCacheDirective",
  "functionId": "addCacheDirective___controller-RpcController__request-AddCacheDirectiveRequestProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
  "functionStartLine": 1399,
  "functionEndLine": 1411,
  "numCommitsSeen": 270,
  "timeTaken": 6153,
  "changeHistory": [
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "991c453ca3ac141a3f286f74af8401f83c38b230",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
    "f79b3e6b17450e9d34c483046b7437b09dd72016",
    "efe545b0c219eeba61ac5259aee4d518beb74316",
    "8111c3af6b06d6a814e235ad90af5860632d2c25",
    "a0d9a155a4a4258f628e927e096ecf6673f788ec",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be",
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
    "d56d0b46e1b82ae068083ddb99872d314684dc82",
    "920b4cc06f1bc15809902bdd1968cc434a694a08"
  ],
  "changeHistoryShort": {
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Ybodychange",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "f79b3e6b17450e9d34c483046b7437b09dd72016": "Ybodychange",
    "efe545b0c219eeba61ac5259aee4d518beb74316": "Ybodychange",
    "8111c3af6b06d6a814e235ad90af5860632d2c25": "Ybodychange",
    "a0d9a155a4a4258f628e927e096ecf6673f788ec": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": "Ybodychange",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c": "Ybodychange",
    "d56d0b46e1b82ae068083ddb99872d314684dc82": "Ybodychange",
    "920b4cc06f1bc15809902bdd1968cc434a694a08": "Yintroduced"
  },
  "changeHistoryDetails": {
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:38 PM",
      "commitNameOld": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.18,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public AddCacheDirectiveResponseProto addCacheDirective(\n       RpcController controller, AddCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n       long id \u003d server.addCacheDirective(\n-          PBHelper.convert(request.getInfo()),\n-          PBHelper.convertCacheFlags(request.getCacheFlags()));\n+          PBHelperClient.convert(request.getInfo()),\n+          PBHelperClient.convertCacheFlags(request.getCacheFlags()));\n       return AddCacheDirectiveResponseProto.newBuilder().\n               setId(id).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddCacheDirectiveResponseProto addCacheDirective(\n      RpcController controller, AddCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      long id \u003d server.addCacheDirective(\n          PBHelperClient.convert(request.getInfo()),\n          PBHelperClient.convertCacheFlags(request.getCacheFlags()));\n      return AddCacheDirectiveResponseProto.newBuilder().\n              setId(id).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "05/12/13 3:41 PM",
      "commitNameOld": "00718c2ffaa11cbdabac6f5ef4b2de5dcf9d6859",
      "commitAuthorOld": "",
      "daysBetweenCommits": 11.8,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,13 @@\n   public AddCacheDirectiveResponseProto addCacheDirective(\n       RpcController controller, AddCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n+      long id \u003d server.addCacheDirective(\n+          PBHelper.convert(request.getInfo()),\n+          PBHelper.convertCacheFlags(request.getCacheFlags()));\n       return AddCacheDirectiveResponseProto.newBuilder().\n-              setId(server.addCacheDirective(\n-                  PBHelper.convert(request.getInfo()))).build();\n+              setId(id).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddCacheDirectiveResponseProto addCacheDirective(\n      RpcController controller, AddCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      long id \u003d server.addCacheDirective(\n          PBHelper.convert(request.getInfo()),\n          PBHelper.convertCacheFlags(request.getCacheFlags()));\n      return AddCacheDirectiveResponseProto.newBuilder().\n              setId(id).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 9:12 AM",
      "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n-      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+  public AddCacheDirectiveResponseProto addCacheDirective(\n+      RpcController controller, AddCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n-      return AddPathBasedCacheDirectiveResponseProto.newBuilder().\n-              setId(server.addPathBasedCacheDirective(\n+      return AddCacheDirectiveResponseProto.newBuilder().\n+              setId(server.addCacheDirective(\n                   PBHelper.convert(request.getInfo()))).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddCacheDirectiveResponseProto addCacheDirective(\n      RpcController controller, AddCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      return AddCacheDirectiveResponseProto.newBuilder().\n              setId(server.addCacheDirective(\n                  PBHelper.convert(request.getInfo()))).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "addPathBasedCacheDirective",
            "newValue": "addCacheDirective"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n-      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+  public AddCacheDirectiveResponseProto addCacheDirective(\n+      RpcController controller, AddCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n-      return AddPathBasedCacheDirectiveResponseProto.newBuilder().\n-              setId(server.addPathBasedCacheDirective(\n+      return AddCacheDirectiveResponseProto.newBuilder().\n+              setId(server.addCacheDirective(\n                   PBHelper.convert(request.getInfo()))).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddCacheDirectiveResponseProto addCacheDirective(\n      RpcController controller, AddCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      return AddCacheDirectiveResponseProto.newBuilder().\n              setId(server.addCacheDirective(\n                  PBHelper.convert(request.getInfo()))).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-AddPathBasedCacheDirectiveRequestProto]",
            "newValue": "[controller-RpcController, request-AddCacheDirectiveRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n-      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+  public AddCacheDirectiveResponseProto addCacheDirective(\n+      RpcController controller, AddCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n-      return AddPathBasedCacheDirectiveResponseProto.newBuilder().\n-              setId(server.addPathBasedCacheDirective(\n+      return AddCacheDirectiveResponseProto.newBuilder().\n+              setId(server.addCacheDirective(\n                   PBHelper.convert(request.getInfo()))).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddCacheDirectiveResponseProto addCacheDirective(\n      RpcController controller, AddCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      return AddCacheDirectiveResponseProto.newBuilder().\n              setId(server.addCacheDirective(\n                  PBHelper.convert(request.getInfo()))).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "AddPathBasedCacheDirectiveResponseProto",
            "newValue": "AddCacheDirectiveResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n-      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+  public AddCacheDirectiveResponseProto addCacheDirective(\n+      RpcController controller, AddCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n-      return AddPathBasedCacheDirectiveResponseProto.newBuilder().\n-              setId(server.addPathBasedCacheDirective(\n+      return AddCacheDirectiveResponseProto.newBuilder().\n+              setId(server.addCacheDirective(\n                   PBHelper.convert(request.getInfo()))).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddCacheDirectiveResponseProto addCacheDirective(\n      RpcController controller, AddCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      return AddCacheDirectiveResponseProto.newBuilder().\n              setId(server.addCacheDirective(\n                  PBHelper.convert(request.getInfo()))).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "f79b3e6b17450e9d34c483046b7437b09dd72016": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 2:07 PM",
      "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "14/10/13 3:56 PM",
      "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 23.97,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,11 @@\n   public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n       RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n-      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n-      if (StringUtils.isEmpty(proto.getPath())) {\n-        throw new EmptyPathError();\n-      }\n-      PathBasedCacheDirective directive \u003d new PathBasedCacheDirective.Builder().\n-          setPath(new Path(proto.getPath())).\n-          setReplication(Shorts.checkedCast(proto.getReplication())).\n-          setPool(proto.getPool()).\n-          build();\n-      PathBasedCacheDescriptor descriptor \u003d\n-          server.addPathBasedCacheDirective(directive);\n-      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n-         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n-      builder.setDescriptorId(descriptor.getEntryId());\n-      return builder.build();\n+      return AddPathBasedCacheDirectiveResponseProto.newBuilder().\n+              setId(server.addPathBasedCacheDirective(\n+                  PBHelper.convert(request.getInfo()))).build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      return AddPathBasedCacheDirectiveResponseProto.newBuilder().\n              setId(server.addPathBasedCacheDirective(\n                  PBHelper.convert(request.getInfo()))).build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "efe545b0c219eeba61ac5259aee4d518beb74316": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5358. Add replication field to PathBasedCacheDirective. (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 3:56 PM",
      "commitName": "efe545b0c219eeba61ac5259aee4d518beb74316",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/10/13 12:44 PM",
      "commitNameOld": "8111c3af6b06d6a814e235ad90af5860632d2c25",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n       RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n       PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n       if (StringUtils.isEmpty(proto.getPath())) {\n         throw new EmptyPathError();\n       }\n       PathBasedCacheDirective directive \u003d new PathBasedCacheDirective.Builder().\n           setPath(new Path(proto.getPath())).\n+          setReplication(Shorts.checkedCast(proto.getReplication())).\n           setPool(proto.getPool()).\n           build();\n       PathBasedCacheDescriptor descriptor \u003d\n           server.addPathBasedCacheDirective(directive);\n       AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n          AddPathBasedCacheDirectiveResponseProto.newBuilder();\n       builder.setDescriptorId(descriptor.getEntryId());\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n      if (StringUtils.isEmpty(proto.getPath())) {\n        throw new EmptyPathError();\n      }\n      PathBasedCacheDirective directive \u003d new PathBasedCacheDirective.Builder().\n          setPath(new Path(proto.getPath())).\n          setReplication(Shorts.checkedCast(proto.getReplication())).\n          setPool(proto.getPool()).\n          build();\n      PathBasedCacheDescriptor descriptor \u003d\n          server.addPathBasedCacheDirective(directive);\n      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n      builder.setDescriptorId(descriptor.getEntryId());\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "8111c3af6b06d6a814e235ad90af5860632d2c25": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5224. Refactor PathBasedCache* methods to use a Path rather than a String. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1531406 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/13 12:44 PM",
      "commitName": "8111c3af6b06d6a814e235ad90af5860632d2c25",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/09/13 5:20 PM",
      "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 20.81,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n   public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n       RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n       throws ServiceException {\n     try {\n       PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n-      PathBasedCacheDirective directive \u003d\n-          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n+      if (StringUtils.isEmpty(proto.getPath())) {\n+        throw new EmptyPathError();\n+      }\n+      PathBasedCacheDirective directive \u003d new PathBasedCacheDirective.Builder().\n+          setPath(new Path(proto.getPath())).\n+          setPool(proto.getPool()).\n+          build();\n       PathBasedCacheDescriptor descriptor \u003d\n           server.addPathBasedCacheDirective(directive);\n       AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n          AddPathBasedCacheDirectiveResponseProto.newBuilder();\n       builder.setDescriptorId(descriptor.getEntryId());\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n      if (StringUtils.isEmpty(proto.getPath())) {\n        throw new EmptyPathError();\n      }\n      PathBasedCacheDirective directive \u003d new PathBasedCacheDirective.Builder().\n          setPath(new Path(proto.getPath())).\n          setPool(proto.getPool()).\n          build();\n      PathBasedCacheDescriptor descriptor \u003d\n          server.addPathBasedCacheDirective(directive);\n      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n      builder.setDescriptorId(descriptor.getEntryId());\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "a0d9a155a4a4258f628e927e096ecf6673f788ec": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/09/13 5:20 PM",
      "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,17 @@\n-  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n-      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n+      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+      throws ServiceException {\n     try {\n-      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n-      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n-      }\n-      List\u003cFallible\u003cPathBasedCacheDescriptor\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n-      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n-      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n-        try {\n-          PathBasedCacheDescriptor directive \u003d output.get(idx).get();\n-          builder.addResults(directive.getEntryId());\n-        } catch (IOException ioe) {\n-          if (ioe.getCause() instanceof EmptyPathError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                EMPTY_PATH_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_PATH_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_POOL_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                ADD_PERMISSION_DENIED_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PathAlreadyExistsInPoolError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE);\n-          } else {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                UNEXPECTED_ADD_ERROR_VALUE);\n-          }\n-        }\n-      }\n+      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n+      PathBasedCacheDirective directive \u003d\n+          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n+      PathBasedCacheDescriptor descriptor \u003d\n+          server.addPathBasedCacheDirective(directive);\n+      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n+      builder.setDescriptorId(descriptor.getEntryId());\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n      PathBasedCacheDirective directive \u003d\n          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n      PathBasedCacheDescriptor descriptor \u003d\n          server.addPathBasedCacheDirective(directive);\n      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n      builder.setDescriptorId(descriptor.getEntryId());\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "addPathBasedCacheDirectives",
            "newValue": "addPathBasedCacheDirective"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,17 @@\n-  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n-      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n+      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+      throws ServiceException {\n     try {\n-      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n-      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n-      }\n-      List\u003cFallible\u003cPathBasedCacheDescriptor\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n-      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n-      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n-        try {\n-          PathBasedCacheDescriptor directive \u003d output.get(idx).get();\n-          builder.addResults(directive.getEntryId());\n-        } catch (IOException ioe) {\n-          if (ioe.getCause() instanceof EmptyPathError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                EMPTY_PATH_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_PATH_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_POOL_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                ADD_PERMISSION_DENIED_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PathAlreadyExistsInPoolError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE);\n-          } else {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                UNEXPECTED_ADD_ERROR_VALUE);\n-          }\n-        }\n-      }\n+      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n+      PathBasedCacheDirective directive \u003d\n+          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n+      PathBasedCacheDescriptor descriptor \u003d\n+          server.addPathBasedCacheDirective(directive);\n+      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n+      builder.setDescriptorId(descriptor.getEntryId());\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n      PathBasedCacheDirective directive \u003d\n          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n      PathBasedCacheDescriptor descriptor \u003d\n          server.addPathBasedCacheDirective(directive);\n      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n      builder.setDescriptorId(descriptor.getEntryId());\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-AddPathBasedCacheDirectivesRequestProto]",
            "newValue": "[controller-RpcController, request-AddPathBasedCacheDirectiveRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,17 @@\n-  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n-      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n+      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+      throws ServiceException {\n     try {\n-      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n-      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n-      }\n-      List\u003cFallible\u003cPathBasedCacheDescriptor\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n-      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n-      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n-        try {\n-          PathBasedCacheDescriptor directive \u003d output.get(idx).get();\n-          builder.addResults(directive.getEntryId());\n-        } catch (IOException ioe) {\n-          if (ioe.getCause() instanceof EmptyPathError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                EMPTY_PATH_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_PATH_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_POOL_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                ADD_PERMISSION_DENIED_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PathAlreadyExistsInPoolError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE);\n-          } else {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                UNEXPECTED_ADD_ERROR_VALUE);\n-          }\n-        }\n-      }\n+      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n+      PathBasedCacheDirective directive \u003d\n+          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n+      PathBasedCacheDescriptor descriptor \u003d\n+          server.addPathBasedCacheDirective(directive);\n+      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n+      builder.setDescriptorId(descriptor.getEntryId());\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n      PathBasedCacheDirective directive \u003d\n          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n      PathBasedCacheDescriptor descriptor \u003d\n          server.addPathBasedCacheDirective(directive);\n      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n      builder.setDescriptorId(descriptor.getEntryId());\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "AddPathBasedCacheDirectivesResponseProto",
            "newValue": "AddPathBasedCacheDirectiveResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/09/13 5:20 PM",
          "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/13 1:43 PM",
          "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,17 @@\n-  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n-      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n+      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n+      throws ServiceException {\n     try {\n-      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n-      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n-      }\n-      List\u003cFallible\u003cPathBasedCacheDescriptor\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n-      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n-      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n-        try {\n-          PathBasedCacheDescriptor directive \u003d output.get(idx).get();\n-          builder.addResults(directive.getEntryId());\n-        } catch (IOException ioe) {\n-          if (ioe.getCause() instanceof EmptyPathError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                EMPTY_PATH_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_PATH_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                INVALID_POOL_NAME_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                ADD_PERMISSION_DENIED_ERROR_VALUE);\n-          } else if (ioe.getCause() instanceof PathAlreadyExistsInPoolError) {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE);\n-          } else {\n-            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n-                UNEXPECTED_ADD_ERROR_VALUE);\n-          }\n-        }\n-      }\n+      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n+      PathBasedCacheDirective directive \u003d\n+          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n+      PathBasedCacheDescriptor descriptor \u003d\n+          server.addPathBasedCacheDirective(directive);\n+      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n+      builder.setDescriptorId(descriptor.getEntryId());\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectiveResponseProto addPathBasedCacheDirective(\n      RpcController controller, AddPathBasedCacheDirectiveRequestProto request)\n      throws ServiceException {\n    try {\n      PathBasedCacheDirectiveProto proto \u003d request.getDirective();\n      PathBasedCacheDirective directive \u003d\n          new PathBasedCacheDirective(proto.getPath(), proto.getPool());\n      PathBasedCacheDescriptor descriptor \u003d\n          server.addPathBasedCacheDirective(directive);\n      AddPathBasedCacheDirectiveResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectiveResponseProto.newBuilder();\n      builder.setDescriptorId(descriptor.getEntryId());\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 1:43 PM",
      "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/09/13 8:55 PM",
      "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n       AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n     try {\n       ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n           new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n         PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n         input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n       }\n-      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n+      List\u003cFallible\u003cPathBasedCacheDescriptor\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n       AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n          AddPathBasedCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n-          PathBasedCacheEntry entry \u003d output.get(idx).get();\n-          builder.addResults(entry.getEntryId());\n+          PathBasedCacheDescriptor directive \u003d output.get(idx).get();\n+          builder.addResults(directive.getEntryId());\n         } catch (IOException ioe) {\n           if (ioe.getCause() instanceof EmptyPathError) {\n             builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                 EMPTY_PATH_ERROR_VALUE);\n           } else if (ioe.getCause() instanceof InvalidPathNameError) {\n             builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                 INVALID_PATH_NAME_ERROR_VALUE);\n           } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n             builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                 INVALID_POOL_NAME_ERROR_VALUE);\n           } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n             builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                 ADD_PERMISSION_DENIED_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof PathAlreadyExistsInPoolError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE);\n           } else {\n             builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                 UNEXPECTED_ADD_ERROR_VALUE);\n           }\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathBasedCacheDescriptor\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathBasedCacheDescriptor directive \u003d output.get(idx).get();\n          builder.addResults(directive.getEntryId());\n        } catch (IOException ioe) {\n          if (ioe.getCause() instanceof EmptyPathError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                EMPTY_PATH_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_PATH_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_POOL_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                ADD_PERMISSION_DENIED_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof PathAlreadyExistsInPoolError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                PATH_ALREADY_EXISTS_IN_POOL_ERROR_VALUE);\n          } else {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                UNEXPECTED_ADD_ERROR_VALUE);\n          }\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 8:55 PM",
      "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n-      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n+      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n     try {\n-      ArrayList\u003cPathCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n+      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n+          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n+        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n+        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n       }\n-      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n-      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathCacheDirectivesResponseProto.newBuilder();\n+      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n+      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n-          PathCacheEntry entry \u003d output.get(idx).get();\n+          PathBasedCacheEntry entry \u003d output.get(idx).get();\n           builder.addResults(entry.getEntryId());\n-        } catch (EmptyPathError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              EMPTY_PATH_ERROR_VALUE);\n-        } catch (InvalidPathNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_PATH_NAME_ERROR_VALUE);\n-        } catch (InvalidPoolNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_POOL_NAME_ERROR_VALUE);\n         } catch (IOException ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              UNEXPECTED_ADD_ERROR_VALUE);\n+          if (ioe.getCause() instanceof EmptyPathError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                EMPTY_PATH_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_PATH_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_POOL_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                ADD_PERMISSION_DENIED_ERROR_VALUE);\n+          } else {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                UNEXPECTED_ADD_ERROR_VALUE);\n+          }\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathBasedCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (IOException ioe) {\n          if (ioe.getCause() instanceof EmptyPathError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                EMPTY_PATH_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_PATH_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_POOL_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                ADD_PERMISSION_DENIED_ERROR_VALUE);\n          } else {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                UNEXPECTED_ADD_ERROR_VALUE);\n          }\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "addPathCacheDirectives",
            "newValue": "addPathBasedCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n-      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n+      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n     try {\n-      ArrayList\u003cPathCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n+      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n+          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n+        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n+        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n       }\n-      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n-      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathCacheDirectivesResponseProto.newBuilder();\n+      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n+      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n-          PathCacheEntry entry \u003d output.get(idx).get();\n+          PathBasedCacheEntry entry \u003d output.get(idx).get();\n           builder.addResults(entry.getEntryId());\n-        } catch (EmptyPathError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              EMPTY_PATH_ERROR_VALUE);\n-        } catch (InvalidPathNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_PATH_NAME_ERROR_VALUE);\n-        } catch (InvalidPoolNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_POOL_NAME_ERROR_VALUE);\n         } catch (IOException ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              UNEXPECTED_ADD_ERROR_VALUE);\n+          if (ioe.getCause() instanceof EmptyPathError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                EMPTY_PATH_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_PATH_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_POOL_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                ADD_PERMISSION_DENIED_ERROR_VALUE);\n+          } else {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                UNEXPECTED_ADD_ERROR_VALUE);\n+          }\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathBasedCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (IOException ioe) {\n          if (ioe.getCause() instanceof EmptyPathError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                EMPTY_PATH_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_PATH_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_POOL_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                ADD_PERMISSION_DENIED_ERROR_VALUE);\n          } else {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                UNEXPECTED_ADD_ERROR_VALUE);\n          }\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-AddPathCacheDirectivesRequestProto]",
            "newValue": "[controller-RpcController, request-AddPathBasedCacheDirectivesRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n-      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n+      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n     try {\n-      ArrayList\u003cPathCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n+      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n+          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n+        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n+        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n       }\n-      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n-      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathCacheDirectivesResponseProto.newBuilder();\n+      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n+      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n-          PathCacheEntry entry \u003d output.get(idx).get();\n+          PathBasedCacheEntry entry \u003d output.get(idx).get();\n           builder.addResults(entry.getEntryId());\n-        } catch (EmptyPathError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              EMPTY_PATH_ERROR_VALUE);\n-        } catch (InvalidPathNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_PATH_NAME_ERROR_VALUE);\n-        } catch (InvalidPoolNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_POOL_NAME_ERROR_VALUE);\n         } catch (IOException ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              UNEXPECTED_ADD_ERROR_VALUE);\n+          if (ioe.getCause() instanceof EmptyPathError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                EMPTY_PATH_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_PATH_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_POOL_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                ADD_PERMISSION_DENIED_ERROR_VALUE);\n+          } else {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                UNEXPECTED_ADD_ERROR_VALUE);\n+          }\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathBasedCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (IOException ioe) {\n          if (ioe.getCause() instanceof EmptyPathError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                EMPTY_PATH_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_PATH_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_POOL_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                ADD_PERMISSION_DENIED_ERROR_VALUE);\n          } else {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                UNEXPECTED_ADD_ERROR_VALUE);\n          }\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "AddPathCacheDirectivesResponseProto",
            "newValue": "AddPathBasedCacheDirectivesResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n-      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n+      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n     try {\n-      ArrayList\u003cPathCacheDirective\u003e input \u003d\n-          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n+      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n+          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n-        PathCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n+        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n+        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n       }\n-      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n-      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n-         AddPathCacheDirectivesResponseProto.newBuilder();\n+      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n+      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n-          PathCacheEntry entry \u003d output.get(idx).get();\n+          PathBasedCacheEntry entry \u003d output.get(idx).get();\n           builder.addResults(entry.getEntryId());\n-        } catch (EmptyPathError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              EMPTY_PATH_ERROR_VALUE);\n-        } catch (InvalidPathNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_PATH_NAME_ERROR_VALUE);\n-        } catch (InvalidPoolNameError ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              INVALID_POOL_NAME_ERROR_VALUE);\n         } catch (IOException ioe) {\n-          builder.addResults(AddPathCacheDirectiveErrorProto.\n-              UNEXPECTED_ADD_ERROR_VALUE);\n+          if (ioe.getCause() instanceof EmptyPathError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                EMPTY_PATH_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_PATH_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                INVALID_POOL_NAME_ERROR_VALUE);\n+          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                ADD_PERMISSION_DENIED_ERROR_VALUE);\n+          } else {\n+            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n+                UNEXPECTED_ADD_ERROR_VALUE);\n+          }\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddPathBasedCacheDirectivesResponseProto addPathBasedCacheDirectives(RpcController controller,\n      AddPathBasedCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathBasedCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathBasedCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathBasedCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathBasedCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathBasedCacheEntry\u003e\u003e output \u003d server.addPathBasedCacheDirectives(input);\n      AddPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathBasedCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathBasedCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (IOException ioe) {\n          if (ioe.getCause() instanceof EmptyPathError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                EMPTY_PATH_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPathNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_PATH_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof InvalidPoolNameError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                INVALID_POOL_NAME_ERROR_VALUE);\n          } else if (ioe.getCause() instanceof PoolWritePermissionDeniedError) {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                ADD_PERMISSION_DENIED_ERROR_VALUE);\n          } else {\n            builder.addResults(AddPathBasedCacheDirectiveErrorProto.\n                UNEXPECTED_ADD_ERROR_VALUE);\n          }\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 11:52 AM",
      "commitName": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "04/09/13 11:23 AM",
      "commitNameOld": "d56d0b46e1b82ae068083ddb99872d314684dc82",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(\n-      RpcController controller, AddPathCacheDirectivesRequestProto request)\n-          throws ServiceException {\n+  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n+      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n     try {\n       ArrayList\u003cPathCacheDirective\u003e input \u003d\n           new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n         PathCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathCacheDirective(proto.getPath(),\n-            proto.getPool().getId()));\n+        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n       }\n-      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server\n-          .addPathCacheDirectives(input);\n+      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n       AddPathCacheDirectivesResponseProto.Builder builder \u003d\n          AddPathCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n           PathCacheEntry entry \u003d output.get(idx).get();\n           builder.addResults(entry.getEntryId());\n         } catch (EmptyPathError ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               EMPTY_PATH_ERROR_VALUE);\n         } catch (InvalidPathNameError ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               INVALID_PATH_NAME_ERROR_VALUE);\n-        } catch (InvalidPoolError ioe) {\n+        } catch (InvalidPoolNameError ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               INVALID_POOL_NAME_ERROR_VALUE);\n         } catch (IOException ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               UNEXPECTED_ADD_ERROR_VALUE);\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (EmptyPathError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              EMPTY_PATH_ERROR_VALUE);\n        } catch (InvalidPathNameError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              INVALID_PATH_NAME_ERROR_VALUE);\n        } catch (InvalidPoolNameError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              INVALID_POOL_NAME_ERROR_VALUE);\n        } catch (IOException ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              UNEXPECTED_ADD_ERROR_VALUE);\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "d56d0b46e1b82ae068083ddb99872d314684dc82": {
      "type": "Ybodychange",
      "commitMessage": "commit correct version of HDFS-5121\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/13 11:23 AM",
      "commitName": "d56d0b46e1b82ae068083ddb99872d314684dc82",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/09/13 1:38 PM",
      "commitNameOld": "97b7267977ef42201e5844df49bc37ec3d10ce16",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n-  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n-      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n+  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(\n+      RpcController controller, AddPathCacheDirectivesRequestProto request)\n+          throws ServiceException {\n     try {\n       ArrayList\u003cPathCacheDirective\u003e input \u003d\n           new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n       for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n         PathCacheDirectiveProto proto \u003d request.getElements(i);\n-        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n+        input.add(new PathCacheDirective(proto.getPath(),\n+            proto.getPool().getId()));\n       }\n-      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n+      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server\n+          .addPathCacheDirectives(input);\n       AddPathCacheDirectivesResponseProto.Builder builder \u003d\n          AddPathCacheDirectivesResponseProto.newBuilder();\n       for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n         try {\n           PathCacheEntry entry \u003d output.get(idx).get();\n           builder.addResults(entry.getEntryId());\n         } catch (EmptyPathError ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               EMPTY_PATH_ERROR_VALUE);\n         } catch (InvalidPathNameError ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               INVALID_PATH_NAME_ERROR_VALUE);\n-        } catch (InvalidPoolNameError ioe) {\n+        } catch (InvalidPoolError ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               INVALID_POOL_NAME_ERROR_VALUE);\n         } catch (IOException ioe) {\n           builder.addResults(AddPathCacheDirectiveErrorProto.\n               UNEXPECTED_ADD_ERROR_VALUE);\n         }\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(\n      RpcController controller, AddPathCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      ArrayList\u003cPathCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathCacheDirective(proto.getPath(),\n            proto.getPool().getId()));\n      }\n      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server\n          .addPathCacheDirectives(input);\n      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (EmptyPathError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              EMPTY_PATH_ERROR_VALUE);\n        } catch (InvalidPathNameError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              INVALID_PATH_NAME_ERROR_VALUE);\n        } catch (InvalidPoolError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              INVALID_POOL_NAME_ERROR_VALUE);\n        } catch (IOException ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              UNEXPECTED_ADD_ERROR_VALUE);\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "920b4cc06f1bc15809902bdd1968cc434a694a08": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5052. Add cacheRequest/uncacheRequest support to NameNode.  (Contributed by Colin Patrick McCabe.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1516669 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/13 4:37 PM",
      "commitName": "920b4cc06f1bc15809902bdd1968cc434a694a08",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,35 @@\n+  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n+      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n+    try {\n+      ArrayList\u003cPathCacheDirective\u003e input \u003d\n+          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n+      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n+        PathCacheDirectiveProto proto \u003d request.getElements(i);\n+        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n+      }\n+      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n+      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n+         AddPathCacheDirectivesResponseProto.newBuilder();\n+      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n+        try {\n+          PathCacheEntry entry \u003d output.get(idx).get();\n+          builder.addResults(entry.getEntryId());\n+        } catch (EmptyPathError ioe) {\n+          builder.addResults(AddPathCacheDirectiveErrorProto.\n+              EMPTY_PATH_ERROR_VALUE);\n+        } catch (InvalidPathNameError ioe) {\n+          builder.addResults(AddPathCacheDirectiveErrorProto.\n+              INVALID_PATH_NAME_ERROR_VALUE);\n+        } catch (InvalidPoolNameError ioe) {\n+          builder.addResults(AddPathCacheDirectiveErrorProto.\n+              INVALID_POOL_NAME_ERROR_VALUE);\n+        } catch (IOException ioe) {\n+          builder.addResults(AddPathCacheDirectiveErrorProto.\n+              UNEXPECTED_ADD_ERROR_VALUE);\n+        }\n+      }\n+      return builder.build();\n+    } catch (IOException e) {\n+      throw new ServiceException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AddPathCacheDirectivesResponseProto addPathCacheDirectives(RpcController controller,\n      AddPathCacheDirectivesRequestProto request) throws ServiceException {\n    try {\n      ArrayList\u003cPathCacheDirective\u003e input \u003d\n          new ArrayList\u003cPathCacheDirective\u003e(request.getElementsCount());\n      for (int i \u003d 0; i \u003c request.getElementsCount(); i++) {\n        PathCacheDirectiveProto proto \u003d request.getElements(i);\n        input.add(new PathCacheDirective(proto.getPath(), proto.getPool()));\n      }\n      List\u003cFallible\u003cPathCacheEntry\u003e\u003e output \u003d server.addPathCacheDirectives(input);\n      AddPathCacheDirectivesResponseProto.Builder builder \u003d\n         AddPathCacheDirectivesResponseProto.newBuilder();\n      for (int idx \u003d 0; idx \u003c output.size(); idx++) {\n        try {\n          PathCacheEntry entry \u003d output.get(idx).get();\n          builder.addResults(entry.getEntryId());\n        } catch (EmptyPathError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              EMPTY_PATH_ERROR_VALUE);\n        } catch (InvalidPathNameError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              INVALID_PATH_NAME_ERROR_VALUE);\n        } catch (InvalidPoolNameError ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              INVALID_POOL_NAME_ERROR_VALUE);\n        } catch (IOException ioe) {\n          builder.addResults(AddPathCacheDirectiveErrorProto.\n              UNEXPECTED_ADD_ERROR_VALUE);\n        }\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java"
    }
  }
}