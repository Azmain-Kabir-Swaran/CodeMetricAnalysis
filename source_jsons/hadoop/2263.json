{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClient.java",
  "functionName": "setQuotaByStorageType",
  "functionId": "setQuotaByStorageType___src-String__type-StorageType__quota-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
  "functionStartLine": 2585,
  "functionEndLine": 2609,
  "numCommitsSeen": 516,
  "timeTaken": 6549,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "892ade689f9bcce76daae8f66fc00a49bee8548e",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "e16f4b7f70b8675760cf5aaa471dfe29d48041e6",
    "d8846707c58c5c3ec542128df13a82ddc05fb347",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951",
    "8de80ff71234f8fb005f297f1ce6d4755633d5e4"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "892ade689f9bcce76daae8f66fc00a49bee8548e": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "e16f4b7f70b8675760cf5aaa471dfe29d48041e6": "Ybodychange",
    "d8846707c58c5c3ec542128df13a82ddc05fb347": "Ybodychange",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": "Ymultichange(Yparameterchange,Ybodychange)",
    "8de80ff71234f8fb005f297f1ce6d4755633d5e4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n   void setQuotaByStorageType(String src, StorageType type, long quota)\n       throws IOException {\n     checkOpen();\n     if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         quota !\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Invalid values for quota :\" +\n-        quota);\n+          quota);\n     }\n     if (type \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Invalid storage type(null)\");\n     }\n     if (!type.supportTypeQuota()) {\n-      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n-        + type.toString());\n+      throw new IllegalArgumentException(\n+          \"Don\u0027t support Quota for storage type : \" + type.toString());\n     }\n-    TraceScope scope \u003d newPathTraceScope(\"setQuotaByStorageType\", src);\n-    try {\n+    try (TraceScope ignored \u003d newPathTraceScope(\"setQuotaByStorageType\", src)) {\n       namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n-        FileNotFoundException.class,\n-        QuotaByStorageTypeExceededException.class,\n-        UnresolvedPathException.class,\n-        SnapshotAccessControlException.class);\n-    } finally {\n-      scope.close();\n+          FileNotFoundException.class,\n+          QuotaByStorageTypeExceededException.class,\n+          UnresolvedPathException.class,\n+          SnapshotAccessControlException.class);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    checkOpen();\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n          quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\n          \"Don\u0027t support Quota for storage type : \" + type.toString());\n    }\n    try (TraceScope ignored \u003d newPathTraceScope(\"setQuotaByStorageType\", src)) {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n          FileNotFoundException.class,\n          QuotaByStorageTypeExceededException.class,\n          UnresolvedPathException.class,\n          SnapshotAccessControlException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "892ade689f9bcce76daae8f66fc00a49bee8548e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9080. Update htrace version to 4.0.1 (cmccabe)\n",
      "commitDate": "28/09/15 7:42 AM",
      "commitName": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   void setQuotaByStorageType(String src, StorageType type, long quota)\n       throws IOException {\n     checkOpen();\n     if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         quota !\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Invalid values for quota :\" +\n         quota);\n     }\n     if (type \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Invalid storage type(null)\");\n     }\n     if (!type.supportTypeQuota()) {\n       throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n         + type.toString());\n     }\n-    TraceScope scope \u003d getPathTraceScope(\"setQuotaByStorageType\", src);\n+    TraceScope scope \u003d newPathTraceScope(\"setQuotaByStorageType\", src);\n     try {\n       namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n         FileNotFoundException.class,\n         QuotaByStorageTypeExceededException.class,\n         UnresolvedPathException.class,\n         SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    checkOpen();\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    TraceScope scope \u003d newPathTraceScope(\"setQuotaByStorageType\", src);\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    checkOpen();\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    TraceScope scope \u003d getPathTraceScope(\"setQuotaByStorageType\", src);\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "e16f4b7f70b8675760cf5aaa471dfe29d48041e6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8332. DFS client API calls should check filesystem closed. Contributed by Rakesh R.\n",
      "commitDate": "07/05/15 11:56 PM",
      "commitName": "e16f4b7f70b8675760cf5aaa471dfe29d48041e6",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "05/05/15 3:41 PM",
      "commitNameOld": "4da8490b512a33a255ed27309860859388d7c168",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 2.34,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   void setQuotaByStorageType(String src, StorageType type, long quota)\n       throws IOException {\n+    checkOpen();\n     if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         quota !\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Invalid values for quota :\" +\n         quota);\n     }\n     if (type \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Invalid storage type(null)\");\n     }\n     if (!type.supportTypeQuota()) {\n       throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n         + type.toString());\n     }\n     TraceScope scope \u003d getPathTraceScope(\"setQuotaByStorageType\", src);\n     try {\n       namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n         FileNotFoundException.class,\n         QuotaByStorageTypeExceededException.class,\n         UnresolvedPathException.class,\n         SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    checkOpen();\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    TraceScope scope \u003d getPathTraceScope(\"setQuotaByStorageType\", src);\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "d8846707c58c5c3ec542128df13a82ddc05fb347": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7940. Add tracing to DFSClient#setQuotaByStorageType (Rakesh R via Colin P. McCabe)\n",
      "commitDate": "17/03/15 10:47 AM",
      "commitName": "d8846707c58c5c3ec542128df13a82ddc05fb347",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "14/03/15 10:36 PM",
      "commitNameOld": "bc9cb3e271b22069a15ca110cd60c860250aaab2",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 2.51,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   void setQuotaByStorageType(String src, StorageType type, long quota)\n       throws IOException {\n     if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n         quota !\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Invalid values for quota :\" +\n         quota);\n     }\n     if (type \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Invalid storage type(null)\");\n     }\n     if (!type.supportTypeQuota()) {\n       throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n         + type.toString());\n     }\n+    TraceScope scope \u003d getPathTraceScope(\"setQuotaByStorageType\", src);\n     try {\n       namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n         FileNotFoundException.class,\n         QuotaByStorageTypeExceededException.class,\n         UnresolvedPathException.class,\n         SnapshotAccessControlException.class);\n+    } finally {\n+      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    TraceScope scope \u003d getPathTraceScope(\"setQuotaByStorageType\", src);\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
      "commitDate": "13/02/15 9:01 PM",
      "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
          "commitDate": "13/02/15 9:01 PM",
          "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "11/02/15 11:08 PM",
          "commitNameOld": "89a544928083501625bc69f96b530040228f0a5f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  void setQuotaByStorageType(String src, StorageType type, long spaceQuota)\n+  void setQuotaByStorageType(String src, StorageType type, long quota)\n       throws IOException {\n-    if (spaceQuota \u003c\u003d 0 \u0026\u0026 spaceQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n-        spaceQuota !\u003d HdfsConstants.QUOTA_RESET) {\n+    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+        quota !\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Invalid values for quota :\" +\n-        spaceQuota);\n+        quota);\n     }\n     if (type \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Invalid storage type(null)\");\n     }\n     if (!type.supportTypeQuota()) {\n       throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n         + type.toString());\n     }\n     try {\n-      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, spaceQuota, type);\n+      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n         FileNotFoundException.class,\n         QuotaByStorageTypeExceededException.class,\n         UnresolvedPathException.class,\n         SnapshotAccessControlException.class);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
          "extendedDetails": {
            "oldValue": "[src-String, type-StorageType, spaceQuota-long]",
            "newValue": "[src-String, type-StorageType, quota-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
          "commitDate": "13/02/15 9:01 PM",
          "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "11/02/15 11:08 PM",
          "commitNameOld": "89a544928083501625bc69f96b530040228f0a5f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  void setQuotaByStorageType(String src, StorageType type, long spaceQuota)\n+  void setQuotaByStorageType(String src, StorageType type, long quota)\n       throws IOException {\n-    if (spaceQuota \u003c\u003d 0 \u0026\u0026 spaceQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n-        spaceQuota !\u003d HdfsConstants.QUOTA_RESET) {\n+    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+        quota !\u003d HdfsConstants.QUOTA_RESET) {\n       throw new IllegalArgumentException(\"Invalid values for quota :\" +\n-        spaceQuota);\n+        quota);\n     }\n     if (type \u003d\u003d null) {\n       throw new IllegalArgumentException(\"Invalid storage type(null)\");\n     }\n     if (!type.supportTypeQuota()) {\n       throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n         + type.toString());\n     }\n     try {\n-      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, spaceQuota, type);\n+      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n         FileNotFoundException.class,\n         QuotaByStorageTypeExceededException.class,\n         UnresolvedPathException.class,\n         SnapshotAccessControlException.class);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long quota)\n      throws IOException {\n    if (quota \u003c\u003d 0 \u0026\u0026 quota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        quota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        quota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, quota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "8de80ff71234f8fb005f297f1ce6d4755633d5e4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7720. Quota by Storage Type API, tools and ClientNameNode Protocol changes. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "06/02/15 5:01 PM",
      "commitName": "8de80ff71234f8fb005f297f1ce6d4755633d5e4",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,24 @@\n+  void setQuotaByStorageType(String src, StorageType type, long spaceQuota)\n+      throws IOException {\n+    if (spaceQuota \u003c\u003d 0 \u0026\u0026 spaceQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n+        spaceQuota !\u003d HdfsConstants.QUOTA_RESET) {\n+      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n+        spaceQuota);\n+    }\n+    if (type \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n+    }\n+    if (!type.supportTypeQuota()) {\n+      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n+        + type.toString());\n+    }\n+    try {\n+      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, spaceQuota, type);\n+    } catch (RemoteException re) {\n+      throw re.unwrapRemoteException(AccessControlException.class,\n+        FileNotFoundException.class,\n+        QuotaByStorageTypeExceededException.class,\n+        UnresolvedPathException.class,\n+        SnapshotAccessControlException.class);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void setQuotaByStorageType(String src, StorageType type, long spaceQuota)\n      throws IOException {\n    if (spaceQuota \u003c\u003d 0 \u0026\u0026 spaceQuota !\u003d HdfsConstants.QUOTA_DONT_SET \u0026\u0026\n        spaceQuota !\u003d HdfsConstants.QUOTA_RESET) {\n      throw new IllegalArgumentException(\"Invalid values for quota :\" +\n        spaceQuota);\n    }\n    if (type \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid storage type(null)\");\n    }\n    if (!type.supportTypeQuota()) {\n      throw new IllegalArgumentException(\"Don\u0027t support Quota for storage type : \"\n        + type.toString());\n    }\n    try {\n      namenode.setQuota(src, HdfsConstants.QUOTA_DONT_SET, spaceQuota, type);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n        FileNotFoundException.class,\n        QuotaByStorageTypeExceededException.class,\n        UnresolvedPathException.class,\n        SnapshotAccessControlException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
    }
  }
}