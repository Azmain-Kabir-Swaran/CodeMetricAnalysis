{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityAppPlacementAllocator.java",
  "functionName": "allocate",
  "functionId": "allocate___schedulerKey-SchedulerRequestKey__type-NodeType__node-SchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
  "functionStartLine": 446,
  "functionEndLine": 474,
  "numCommitsSeen": 19,
  "timeTaken": 4893,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "a957f1c60e1308d1d70a1803381994f59949c5f8",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "9ca54f4810de182195263bd594afb56dab564105"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "a957f1c60e1308d1d70a1803381994f59949c5f8": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Yfilerename",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ymultichange(Yparameterchange,Ybodychange)",
    "9ca54f4810de182195263bd594afb56dab564105": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public ContainerRequest allocate(SchedulerRequestKey schedulerKey,\n       NodeType type, SchedulerNode node) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n       ResourceRequest request;\n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         request \u003d resourceRequestMap.get(node.getNodeName());\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         request \u003d resourceRequestMap.get(node.getRackName());\n       } else{\n         request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n         allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n       return new ContainerRequest(resourceRequests);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerRequest allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node) {\n    writeLock.lock();\n    try {\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      ResourceRequest request;\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getNodeName());\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getRackName());\n      } else{\n        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return new ContainerRequest(resourceRequests);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
      "extendedDetails": {}
    },
    "a957f1c60e1308d1d70a1803381994f59949c5f8": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
      "commitDate": "05/12/17 9:20 AM",
      "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
          "commitDate": "05/12/17 9:20 AM",
          "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/11/17 1:01 PM",
          "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 25.85,
          "commitsBetweenForRepo": 121,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n+  public ContainerRequest allocate(SchedulerRequestKey schedulerKey,\n       NodeType type, SchedulerNode node) {\n     try {\n       writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n       ResourceRequest request;\n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         request \u003d resourceRequestMap.get(node.getNodeName());\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         request \u003d resourceRequestMap.get(node.getRackName());\n       } else{\n         request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n         allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n-      return resourceRequests;\n+      return new ContainerRequest(resourceRequests);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerRequest allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      ResourceRequest request;\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getNodeName());\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getRackName());\n      } else{\n        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return new ContainerRequest(resourceRequests);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
          "extendedDetails": {
            "oldValue": "List\u003cResourceRequest\u003e",
            "newValue": "ContainerRequest"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
          "commitDate": "05/12/17 9:20 AM",
          "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
          "commitAuthor": "Sunil G",
          "commitDateOld": "09/11/17 1:01 PM",
          "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 25.85,
          "commitsBetweenForRepo": 121,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n+  public ContainerRequest allocate(SchedulerRequestKey schedulerKey,\n       NodeType type, SchedulerNode node) {\n     try {\n       writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n       ResourceRequest request;\n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         request \u003d resourceRequestMap.get(node.getNodeName());\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         request \u003d resourceRequestMap.get(node.getRackName());\n       } else{\n         request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n         allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n-      return resourceRequests;\n+      return new ContainerRequest(resourceRequests);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerRequest allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      ResourceRequest request;\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getNodeName());\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getRackName());\n      } else{\n        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return new ContainerRequest(resourceRequests);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "09/11/17 12:12 PM",
      "commitNameOld": "a2c150a7369cc629bbfaa2dfa3a8495b6f9c42e2",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      ResourceRequest request;\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getNodeName());\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getRackName());\n      } else{\n        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return resourceRequests;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalitySchedulingPlacementSet.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalityAppPlacementAllocator.java"
      }
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n   public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n-      NodeType type, SchedulerNode node, ResourceRequest request) {\n+      NodeType type, SchedulerNode node) {\n     try {\n       writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n-      if (null \u003d\u003d request) {\n-        if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-          request \u003d resourceRequestMap.get(node.getNodeName());\n-        } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-          request \u003d resourceRequestMap.get(node.getRackName());\n-        } else{\n-          request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n-        }\n+      ResourceRequest request;\n+      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n+        request \u003d resourceRequestMap.get(node.getNodeName());\n+      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n+        request \u003d resourceRequestMap.get(node.getRackName());\n+      } else{\n+        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n         allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n       return resourceRequests;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      ResourceRequest request;\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getNodeName());\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getRackName());\n      } else{\n        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return resourceRequests;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalitySchedulingPlacementSet.java",
          "extendedDetails": {
            "oldValue": "[schedulerKey-SchedulerRequestKey, type-NodeType, node-SchedulerNode, request-ResourceRequest]",
            "newValue": "[schedulerKey-SchedulerRequestKey, type-NodeType, node-SchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n   public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n-      NodeType type, SchedulerNode node, ResourceRequest request) {\n+      NodeType type, SchedulerNode node) {\n     try {\n       writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n-      if (null \u003d\u003d request) {\n-        if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-          request \u003d resourceRequestMap.get(node.getNodeName());\n-        } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-          request \u003d resourceRequestMap.get(node.getRackName());\n-        } else{\n-          request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n-        }\n+      ResourceRequest request;\n+      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n+        request \u003d resourceRequestMap.get(node.getNodeName());\n+      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n+        request \u003d resourceRequestMap.get(node.getRackName());\n+      } else{\n+        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n         allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n         allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n         allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n       return resourceRequests;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      ResourceRequest request;\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getNodeName());\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        request \u003d resourceRequestMap.get(node.getRackName());\n      } else{\n        request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return resourceRequests;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalitySchedulingPlacementSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "28/12/16 9:18 AM",
          "commitNameOld": "9ca54f4810de182195263bd594afb56dab564105",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 8.05,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public List\u003cResourceRequest\u003e allocate(NodeType type, SchedulerNode node,\n-      ResourceRequest request) {\n+  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n+      NodeType type, SchedulerNode node, ResourceRequest request) {\n     try {\n       writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n       if (null \u003d\u003d request) {\n         if (type \u003d\u003d NodeType.NODE_LOCAL) {\n           request \u003d resourceRequestMap.get(node.getNodeName());\n         } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n           request \u003d resourceRequestMap.get(node.getRackName());\n         } else{\n           request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n         }\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-        allocateNodeLocal(node, request, resourceRequests);\n+        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-        allocateRackLocal(node, request, resourceRequests);\n+        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n-        allocateOffSwitch(request, resourceRequests);\n+        allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n       return resourceRequests;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node, ResourceRequest request) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      if (null \u003d\u003d request) {\n        if (type \u003d\u003d NodeType.NODE_LOCAL) {\n          request \u003d resourceRequestMap.get(node.getNodeName());\n        } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n          request \u003d resourceRequestMap.get(node.getRackName());\n        } else{\n          request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n        }\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return resourceRequests;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalitySchedulingPlacementSet.java",
          "extendedDetails": {
            "oldValue": "[type-NodeType, node-SchedulerNode, request-ResourceRequest]",
            "newValue": "[schedulerKey-SchedulerRequestKey, type-NodeType, node-SchedulerNode, request-ResourceRequest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "28/12/16 9:18 AM",
          "commitNameOld": "9ca54f4810de182195263bd594afb56dab564105",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 8.05,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public List\u003cResourceRequest\u003e allocate(NodeType type, SchedulerNode node,\n-      ResourceRequest request) {\n+  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n+      NodeType type, SchedulerNode node, ResourceRequest request) {\n     try {\n       writeLock.lock();\n \n       List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n \n       if (null \u003d\u003d request) {\n         if (type \u003d\u003d NodeType.NODE_LOCAL) {\n           request \u003d resourceRequestMap.get(node.getNodeName());\n         } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n           request \u003d resourceRequestMap.get(node.getRackName());\n         } else{\n           request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n         }\n       }\n \n       if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-        allocateNodeLocal(node, request, resourceRequests);\n+        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n       } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-        allocateRackLocal(node, request, resourceRequests);\n+        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n       } else{\n-        allocateOffSwitch(request, resourceRequests);\n+        allocateOffSwitch(schedulerKey, request, resourceRequests);\n       }\n \n       return resourceRequests;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cResourceRequest\u003e allocate(SchedulerRequestKey schedulerKey,\n      NodeType type, SchedulerNode node, ResourceRequest request) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      if (null \u003d\u003d request) {\n        if (type \u003d\u003d NodeType.NODE_LOCAL) {\n          request \u003d resourceRequestMap.get(node.getNodeName());\n        } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n          request \u003d resourceRequestMap.get(node.getRackName());\n        } else{\n          request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n        }\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(schedulerKey, node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(schedulerKey, node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(schedulerKey, request, resourceRequests);\n      }\n\n      return resourceRequests;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalitySchedulingPlacementSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "9ca54f4810de182195263bd594afb56dab564105": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5906. Update AppSchedulingInfo to use SchedulingPlacementSet. Contributed by Wangda Tan.\n",
      "commitDate": "28/12/16 9:18 AM",
      "commitName": "9ca54f4810de182195263bd594afb56dab564105",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,30 @@\n+  public List\u003cResourceRequest\u003e allocate(NodeType type, SchedulerNode node,\n+      ResourceRequest request) {\n+    try {\n+      writeLock.lock();\n+\n+      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n+\n+      if (null \u003d\u003d request) {\n+        if (type \u003d\u003d NodeType.NODE_LOCAL) {\n+          request \u003d resourceRequestMap.get(node.getNodeName());\n+        } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n+          request \u003d resourceRequestMap.get(node.getRackName());\n+        } else{\n+          request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n+        }\n+      }\n+\n+      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n+        allocateNodeLocal(node, request, resourceRequests);\n+      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n+        allocateRackLocal(node, request, resourceRequests);\n+      } else{\n+        allocateOffSwitch(request, resourceRequests);\n+      }\n+\n+      return resourceRequests;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cResourceRequest\u003e allocate(NodeType type, SchedulerNode node,\n      ResourceRequest request) {\n    try {\n      writeLock.lock();\n\n      List\u003cResourceRequest\u003e resourceRequests \u003d new ArrayList\u003c\u003e();\n\n      if (null \u003d\u003d request) {\n        if (type \u003d\u003d NodeType.NODE_LOCAL) {\n          request \u003d resourceRequestMap.get(node.getNodeName());\n        } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n          request \u003d resourceRequestMap.get(node.getRackName());\n        } else{\n          request \u003d resourceRequestMap.get(ResourceRequest.ANY);\n        }\n      }\n\n      if (type \u003d\u003d NodeType.NODE_LOCAL) {\n        allocateNodeLocal(node, request, resourceRequests);\n      } else if (type \u003d\u003d NodeType.RACK_LOCAL) {\n        allocateRackLocal(node, request, resourceRequests);\n      } else{\n        allocateOffSwitch(request, resourceRequests);\n      }\n\n      return resourceRequests;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/LocalitySchedulingPlacementSet.java"
    }
  }
}