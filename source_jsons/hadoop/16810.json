{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationUtil.java",
  "functionName": "getJmx",
  "functionId": "getJmx___beanQuery-String__webAddress-String__connectionFactory-URLConnectionFactory__scheme-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java",
  "functionStartLine": 67,
  "functionEndLine": 120,
  "numCommitsSeen": 18,
  "timeTaken": 3174,
  "changeHistory": [
    "0315ef844862ee863d646b562ba6d8889876ffa9",
    "ddbe08db3323431693ceb91ca00bc138be7577b0",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "d8c81073320320a019fb3868be4f06f46aebea43"
  ],
  "changeHistoryShort": {
    "0315ef844862ee863d646b562ba6d8889876ffa9": "Ybodychange",
    "ddbe08db3323431693ceb91ca00bc138be7577b0": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "d8c81073320320a019fb3868be4f06f46aebea43": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0315ef844862ee863d646b562ba6d8889876ffa9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15100. RBF: Print stacktrace when DFSRouter fails to fetch/parse JMX output from NameNode. (#1800)\n\n",
      "commitDate": "09/01/20 8:16 PM",
      "commitName": "0315ef844862ee863d646b562ba6d8889876ffa9",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "29/11/19 10:25 AM",
      "commitNameOld": "6b2d6d4aafb110bef1b77d4ccbba4350e624b57d",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 41.41,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   public static JSONArray getJmx(String beanQuery, String webAddress,\n       URLConnectionFactory connectionFactory, String scheme) {\n     JSONArray ret \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       String host \u003d webAddress;\n       int port \u003d -1;\n       if (webAddress.indexOf(\":\") \u003e 0) {\n         String[] webAddressSplit \u003d webAddress.split(\":\");\n         host \u003d webAddressSplit[0];\n         port \u003d Integer.parseInt(webAddressSplit[1]);\n       }\n       URL jmxURL \u003d new URL(scheme, host, port, \"/jmx?qry\u003d\" + beanQuery);\n       LOG.debug(\"JMX URL: {}\", jmxURL);\n       // Create a URL connection\n       URLConnection conn \u003d connectionFactory.openConnection(\n           jmxURL, UserGroupInformation.isSecurityEnabled());\n       conn.setConnectTimeout(5 * 1000);\n       conn.setReadTimeout(5 * 1000);\n       InputStream in \u003d conn.getInputStream();\n       InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n       reader \u003d new BufferedReader(isr);\n \n       StringBuilder sb \u003d new StringBuilder();\n       String line \u003d null;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n       String jmxOutput \u003d sb.toString();\n \n       // Parse JSON\n       JSONObject json \u003d new JSONObject(jmxOutput);\n       ret \u003d json.getJSONArray(\"beans\");\n     } catch (IOException e) {\n-      LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n-          beanQuery, webAddress, e.getMessage());\n+      LOG.error(\"Cannot read JMX bean {} from server {}\",\n+          beanQuery, webAddress, e);\n     } catch (JSONException e) {\n+      // We shouldn\u0027t need more details if the JSON parsing fails.\n       LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n           beanQuery, webAddress, e.getMessage());\n     } catch (Exception e) {\n-      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n+      LOG.error(\"Cannot parse JMX output for {} from server {}\",\n           beanQuery, webAddress, e);\n     } finally {\n       if (reader !\u003d null) {\n         try {\n           reader.close();\n         } catch (IOException e) {\n           LOG.error(\"Problem closing {}\", webAddress, e);\n         }\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static JSONArray getJmx(String beanQuery, String webAddress,\n      URLConnectionFactory connectionFactory, String scheme) {\n    JSONArray ret \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      String host \u003d webAddress;\n      int port \u003d -1;\n      if (webAddress.indexOf(\":\") \u003e 0) {\n        String[] webAddressSplit \u003d webAddress.split(\":\");\n        host \u003d webAddressSplit[0];\n        port \u003d Integer.parseInt(webAddressSplit[1]);\n      }\n      URL jmxURL \u003d new URL(scheme, host, port, \"/jmx?qry\u003d\" + beanQuery);\n      LOG.debug(\"JMX URL: {}\", jmxURL);\n      // Create a URL connection\n      URLConnection conn \u003d connectionFactory.openConnection(\n          jmxURL, UserGroupInformation.isSecurityEnabled());\n      conn.setConnectTimeout(5 * 1000);\n      conn.setReadTimeout(5 * 1000);\n      InputStream in \u003d conn.getInputStream();\n      InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n      reader \u003d new BufferedReader(isr);\n\n      StringBuilder sb \u003d new StringBuilder();\n      String line \u003d null;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n      String jmxOutput \u003d sb.toString();\n\n      // Parse JSON\n      JSONObject json \u003d new JSONObject(jmxOutput);\n      ret \u003d json.getJSONArray(\"beans\");\n    } catch (IOException e) {\n      LOG.error(\"Cannot read JMX bean {} from server {}\",\n          beanQuery, webAddress, e);\n    } catch (JSONException e) {\n      // We shouldn\u0027t need more details if the JSON parsing fails.\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (Exception e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}\",\n          beanQuery, webAddress, e);\n    } finally {\n      if (reader !\u003d null) {\n        try {\n          reader.close();\n        } catch (IOException e) {\n          LOG.error(\"Problem closing {}\", webAddress, e);\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java",
      "extendedDetails": {}
    },
    "ddbe08db3323431693ceb91ca00bc138be7577b0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13955. RBF: Support secure Namenode in NamenodeHeartbeatService. Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "ddbe08db3323431693ceb91ca00bc138be7577b0",
      "commitAuthor": "Ayush Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13955. RBF: Support secure Namenode in NamenodeHeartbeatService. Contributed by CR Hota.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "ddbe08db3323431693ceb91ca00bc138be7577b0",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "b320caecb32e0eb739ad925a4646bef1a85caebd",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n-  public static JSONArray getJmx(String beanQuery, String webAddress) {\n+  public static JSONArray getJmx(String beanQuery, String webAddress,\n+      URLConnectionFactory connectionFactory, String scheme) {\n     JSONArray ret \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       String host \u003d webAddress;\n       int port \u003d -1;\n       if (webAddress.indexOf(\":\") \u003e 0) {\n         String[] webAddressSplit \u003d webAddress.split(\":\");\n         host \u003d webAddressSplit[0];\n         port \u003d Integer.parseInt(webAddressSplit[1]);\n       }\n-      URL jmxURL \u003d new URL(\"http\", host, port, \"/jmx?qry\u003d\" + beanQuery);\n-      URLConnection conn \u003d jmxURL.openConnection();\n+      URL jmxURL \u003d new URL(scheme, host, port, \"/jmx?qry\u003d\" + beanQuery);\n+      LOG.debug(\"JMX URL: {}\", jmxURL);\n+      // Create a URL connection\n+      URLConnection conn \u003d connectionFactory.openConnection(\n+          jmxURL, UserGroupInformation.isSecurityEnabled());\n       conn.setConnectTimeout(5 * 1000);\n       conn.setReadTimeout(5 * 1000);\n       InputStream in \u003d conn.getInputStream();\n       InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n       reader \u003d new BufferedReader(isr);\n \n       StringBuilder sb \u003d new StringBuilder();\n       String line \u003d null;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n       String jmxOutput \u003d sb.toString();\n \n       // Parse JSON\n       JSONObject json \u003d new JSONObject(jmxOutput);\n       ret \u003d json.getJSONArray(\"beans\");\n     } catch (IOException e) {\n       LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n           beanQuery, webAddress, e.getMessage());\n     } catch (JSONException e) {\n       LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n           beanQuery, webAddress, e.getMessage());\n     } catch (Exception e) {\n       LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n           beanQuery, webAddress, e);\n     } finally {\n       if (reader !\u003d null) {\n         try {\n           reader.close();\n         } catch (IOException e) {\n           LOG.error(\"Problem closing {}\", webAddress, e);\n         }\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static JSONArray getJmx(String beanQuery, String webAddress,\n      URLConnectionFactory connectionFactory, String scheme) {\n    JSONArray ret \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      String host \u003d webAddress;\n      int port \u003d -1;\n      if (webAddress.indexOf(\":\") \u003e 0) {\n        String[] webAddressSplit \u003d webAddress.split(\":\");\n        host \u003d webAddressSplit[0];\n        port \u003d Integer.parseInt(webAddressSplit[1]);\n      }\n      URL jmxURL \u003d new URL(scheme, host, port, \"/jmx?qry\u003d\" + beanQuery);\n      LOG.debug(\"JMX URL: {}\", jmxURL);\n      // Create a URL connection\n      URLConnection conn \u003d connectionFactory.openConnection(\n          jmxURL, UserGroupInformation.isSecurityEnabled());\n      conn.setConnectTimeout(5 * 1000);\n      conn.setReadTimeout(5 * 1000);\n      InputStream in \u003d conn.getInputStream();\n      InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n      reader \u003d new BufferedReader(isr);\n\n      StringBuilder sb \u003d new StringBuilder();\n      String line \u003d null;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n      String jmxOutput \u003d sb.toString();\n\n      // Parse JSON\n      JSONObject json \u003d new JSONObject(jmxOutput);\n      ret \u003d json.getJSONArray(\"beans\");\n    } catch (IOException e) {\n      LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (JSONException e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (Exception e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e);\n    } finally {\n      if (reader !\u003d null) {\n        try {\n          reader.close();\n        } catch (IOException e) {\n          LOG.error(\"Problem closing {}\", webAddress, e);\n        }\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java",
          "extendedDetails": {
            "oldValue": "[beanQuery-String, webAddress-String]",
            "newValue": "[beanQuery-String, webAddress-String, connectionFactory-URLConnectionFactory, scheme-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13955. RBF: Support secure Namenode in NamenodeHeartbeatService. Contributed by CR Hota.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "ddbe08db3323431693ceb91ca00bc138be7577b0",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "b320caecb32e0eb739ad925a4646bef1a85caebd",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n-  public static JSONArray getJmx(String beanQuery, String webAddress) {\n+  public static JSONArray getJmx(String beanQuery, String webAddress,\n+      URLConnectionFactory connectionFactory, String scheme) {\n     JSONArray ret \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       String host \u003d webAddress;\n       int port \u003d -1;\n       if (webAddress.indexOf(\":\") \u003e 0) {\n         String[] webAddressSplit \u003d webAddress.split(\":\");\n         host \u003d webAddressSplit[0];\n         port \u003d Integer.parseInt(webAddressSplit[1]);\n       }\n-      URL jmxURL \u003d new URL(\"http\", host, port, \"/jmx?qry\u003d\" + beanQuery);\n-      URLConnection conn \u003d jmxURL.openConnection();\n+      URL jmxURL \u003d new URL(scheme, host, port, \"/jmx?qry\u003d\" + beanQuery);\n+      LOG.debug(\"JMX URL: {}\", jmxURL);\n+      // Create a URL connection\n+      URLConnection conn \u003d connectionFactory.openConnection(\n+          jmxURL, UserGroupInformation.isSecurityEnabled());\n       conn.setConnectTimeout(5 * 1000);\n       conn.setReadTimeout(5 * 1000);\n       InputStream in \u003d conn.getInputStream();\n       InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n       reader \u003d new BufferedReader(isr);\n \n       StringBuilder sb \u003d new StringBuilder();\n       String line \u003d null;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n       String jmxOutput \u003d sb.toString();\n \n       // Parse JSON\n       JSONObject json \u003d new JSONObject(jmxOutput);\n       ret \u003d json.getJSONArray(\"beans\");\n     } catch (IOException e) {\n       LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n           beanQuery, webAddress, e.getMessage());\n     } catch (JSONException e) {\n       LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n           beanQuery, webAddress, e.getMessage());\n     } catch (Exception e) {\n       LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n           beanQuery, webAddress, e);\n     } finally {\n       if (reader !\u003d null) {\n         try {\n           reader.close();\n         } catch (IOException e) {\n           LOG.error(\"Problem closing {}\", webAddress, e);\n         }\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static JSONArray getJmx(String beanQuery, String webAddress,\n      URLConnectionFactory connectionFactory, String scheme) {\n    JSONArray ret \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      String host \u003d webAddress;\n      int port \u003d -1;\n      if (webAddress.indexOf(\":\") \u003e 0) {\n        String[] webAddressSplit \u003d webAddress.split(\":\");\n        host \u003d webAddressSplit[0];\n        port \u003d Integer.parseInt(webAddressSplit[1]);\n      }\n      URL jmxURL \u003d new URL(scheme, host, port, \"/jmx?qry\u003d\" + beanQuery);\n      LOG.debug(\"JMX URL: {}\", jmxURL);\n      // Create a URL connection\n      URLConnection conn \u003d connectionFactory.openConnection(\n          jmxURL, UserGroupInformation.isSecurityEnabled());\n      conn.setConnectTimeout(5 * 1000);\n      conn.setReadTimeout(5 * 1000);\n      InputStream in \u003d conn.getInputStream();\n      InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n      reader \u003d new BufferedReader(isr);\n\n      StringBuilder sb \u003d new StringBuilder();\n      String line \u003d null;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n      String jmxOutput \u003d sb.toString();\n\n      // Parse JSON\n      JSONObject json \u003d new JSONObject(jmxOutput);\n      ret \u003d json.getJSONArray(\"beans\");\n    } catch (IOException e) {\n      LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (JSONException e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (Exception e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e);\n    } finally {\n      if (reader !\u003d null) {\n        try {\n          reader.close();\n        } catch (IOException e) {\n          LOG.error(\"Problem closing {}\", webAddress, e);\n        }\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static JSONArray getJmx(String beanQuery, String webAddress) {\n    JSONArray ret \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      String host \u003d webAddress;\n      int port \u003d -1;\n      if (webAddress.indexOf(\":\") \u003e 0) {\n        String[] webAddressSplit \u003d webAddress.split(\":\");\n        host \u003d webAddressSplit[0];\n        port \u003d Integer.parseInt(webAddressSplit[1]);\n      }\n      URL jmxURL \u003d new URL(\"http\", host, port, \"/jmx?qry\u003d\" + beanQuery);\n      URLConnection conn \u003d jmxURL.openConnection();\n      conn.setConnectTimeout(5 * 1000);\n      conn.setReadTimeout(5 * 1000);\n      InputStream in \u003d conn.getInputStream();\n      InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n      reader \u003d new BufferedReader(isr);\n\n      StringBuilder sb \u003d new StringBuilder();\n      String line \u003d null;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n      String jmxOutput \u003d sb.toString();\n\n      // Parse JSON\n      JSONObject json \u003d new JSONObject(jmxOutput);\n      ret \u003d json.getJSONArray(\"beans\");\n    } catch (IOException e) {\n      LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (JSONException e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (Exception e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e);\n    } finally {\n      if (reader !\u003d null) {\n        try {\n          reader.close();\n        } catch (IOException e) {\n          LOG.error(\"Problem closing {}\", webAddress, e);\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java"
      }
    },
    "d8c81073320320a019fb3868be4f06f46aebea43": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11826. Federation Namenode Heartbeat. Contributed by Inigo Goiri.\n\n(cherry picked from commit 928f8dab52191e733984d37f47b69719ccf11313)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "d8c81073320320a019fb3868be4f06f46aebea43",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,49 @@\n+  public static JSONArray getJmx(String beanQuery, String webAddress) {\n+    JSONArray ret \u003d null;\n+    BufferedReader reader \u003d null;\n+    try {\n+      String host \u003d webAddress;\n+      int port \u003d -1;\n+      if (webAddress.indexOf(\":\") \u003e 0) {\n+        String[] webAddressSplit \u003d webAddress.split(\":\");\n+        host \u003d webAddressSplit[0];\n+        port \u003d Integer.parseInt(webAddressSplit[1]);\n+      }\n+      URL jmxURL \u003d new URL(\"http\", host, port, \"/jmx?qry\u003d\" + beanQuery);\n+      URLConnection conn \u003d jmxURL.openConnection();\n+      conn.setConnectTimeout(5 * 1000);\n+      conn.setReadTimeout(5 * 1000);\n+      InputStream in \u003d conn.getInputStream();\n+      InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n+      reader \u003d new BufferedReader(isr);\n+\n+      StringBuilder sb \u003d new StringBuilder();\n+      String line \u003d null;\n+      while ((line \u003d reader.readLine()) !\u003d null) {\n+        sb.append(line);\n+      }\n+      String jmxOutput \u003d sb.toString();\n+\n+      // Parse JSON\n+      JSONObject json \u003d new JSONObject(jmxOutput);\n+      ret \u003d json.getJSONArray(\"beans\");\n+    } catch (IOException e) {\n+      LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n+          beanQuery, webAddress, e.getMessage());\n+    } catch (JSONException e) {\n+      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n+          beanQuery, webAddress, e.getMessage());\n+    } catch (Exception e) {\n+      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n+          beanQuery, webAddress, e);\n+    } finally {\n+      if (reader !\u003d null) {\n+        try {\n+          reader.close();\n+        } catch (IOException e) {\n+          LOG.error(\"Problem closing {}\", webAddress, e);\n+        }\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static JSONArray getJmx(String beanQuery, String webAddress) {\n    JSONArray ret \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      String host \u003d webAddress;\n      int port \u003d -1;\n      if (webAddress.indexOf(\":\") \u003e 0) {\n        String[] webAddressSplit \u003d webAddress.split(\":\");\n        host \u003d webAddressSplit[0];\n        port \u003d Integer.parseInt(webAddressSplit[1]);\n      }\n      URL jmxURL \u003d new URL(\"http\", host, port, \"/jmx?qry\u003d\" + beanQuery);\n      URLConnection conn \u003d jmxURL.openConnection();\n      conn.setConnectTimeout(5 * 1000);\n      conn.setReadTimeout(5 * 1000);\n      InputStream in \u003d conn.getInputStream();\n      InputStreamReader isr \u003d new InputStreamReader(in, \"UTF-8\");\n      reader \u003d new BufferedReader(isr);\n\n      StringBuilder sb \u003d new StringBuilder();\n      String line \u003d null;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n      String jmxOutput \u003d sb.toString();\n\n      // Parse JSON\n      JSONObject json \u003d new JSONObject(jmxOutput);\n      ret \u003d json.getJSONArray(\"beans\");\n    } catch (IOException e) {\n      LOG.error(\"Cannot read JMX bean {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (JSONException e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e.getMessage());\n    } catch (Exception e) {\n      LOG.error(\"Cannot parse JMX output for {} from server {}: {}\",\n          beanQuery, webAddress, e);\n    } finally {\n      if (reader !\u003d null) {\n        try {\n          reader.close();\n        } catch (IOException e) {\n          LOG.error(\"Problem closing {}\", webAddress, e);\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/FederationUtil.java"
    }
  }
}