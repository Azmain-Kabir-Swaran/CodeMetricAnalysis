{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "getEntityTimelines",
  "functionId": "getEntityTimelines___entityType-String__entityIds-SortedSet__String____limit-Long__windowStart-Long__windowEnd-Long__eventTypes-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 1105,
  "functionEndLine": 1134,
  "numCommitsSeen": 17,
  "timeTaken": 1980,
  "changeHistory": [
    "f1552f6edb8fe152003fd71944851b2b46a6677d",
    "7f3c306e2ed9e865171324898decb9b587d90e73",
    "705286ccaeea36941d97ec1c1700746b74264924",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "f1552f6edb8fe152003fd71944851b2b46a6677d": "Ybodychange",
    "7f3c306e2ed9e865171324898decb9b587d90e73": "Ybodychange",
    "705286ccaeea36941d97ec1c1700746b74264924": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f1552f6edb8fe152003fd71944851b2b46a6677d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9553. Fix NPE in EntityGroupFSTimelineStore#getEntityTimelines. Contributed by Prabhu Joseph.\n",
      "commitDate": "30/05/19 11:42 AM",
      "commitName": "f1552f6edb8fe152003fd71944851b2b46a6677d",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "23/05/19 9:08 AM",
      "commitNameOld": "7b03072fd466de5817fdcd65f9dd88fd59c0bb00",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 7.11,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   public TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n     LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n     TimelineEvents returnEvents \u003d new TimelineEvents();\n     List\u003cEntityCacheItem\u003e relatedCacheItems \u003d new ArrayList\u003c\u003e();\n+\n+    if (entityIds \u003d\u003d null || entityIds.isEmpty()) {\n+      return returnEvents;\n+    }\n+\n     for (String entityId : entityIds) {\n       LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n       List\u003cTimelineStore\u003e stores\n           \u003d getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\n       for (TimelineStore store : stores) {\n         LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n             store.toString());\n         SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n         entityIdSet.add(entityId);\n         TimelineEvents events \u003d\n             store.getEntityTimelines(entityType, entityIdSet, limit,\n                 windowStart, windowEnd, eventTypes);\n         if (events !\u003d null) {\n           returnEvents.addEvents(events.getAllEvents());\n         }\n       }\n     }\n     return returnEvents;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n    LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n    TimelineEvents returnEvents \u003d new TimelineEvents();\n    List\u003cEntityCacheItem\u003e relatedCacheItems \u003d new ArrayList\u003c\u003e();\n\n    if (entityIds \u003d\u003d null || entityIds.isEmpty()) {\n      return returnEvents;\n    }\n\n    for (String entityId : entityIds) {\n      LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n      List\u003cTimelineStore\u003e stores\n          \u003d getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\n      for (TimelineStore store : stores) {\n        LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n            store.toString());\n        SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n        entityIdSet.add(entityId);\n        TimelineEvents events \u003d\n            store.getEntityTimelines(entityType, entityIdSet, limit,\n                windowStart, windowEnd, eventTypes);\n        if (events !\u003d null) {\n          returnEvents.addEvents(events.getAllEvents());\n        }\n      }\n    }\n    return returnEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "7f3c306e2ed9e865171324898decb9b587d90e73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5432. Lock already held by another process while LevelDB cache store creation for dag. Contributed by Li Lu.\n",
      "commitDate": "28/07/16 6:35 AM",
      "commitName": "7f3c306e2ed9e865171324898decb9b587d90e73",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/07/16 10:37 PM",
      "commitNameOld": "673e5e02feba9171498a518c06ae70639c5f8854",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.33,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   public TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n     LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n     TimelineEvents returnEvents \u003d new TimelineEvents();\n     List\u003cEntityCacheItem\u003e relatedCacheItems \u003d new ArrayList\u003c\u003e();\n     for (String entityId : entityIds) {\n       LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n       List\u003cTimelineStore\u003e stores\n           \u003d getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\n       for (TimelineStore store : stores) {\n         LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n             store.toString());\n         SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n         entityIdSet.add(entityId);\n         TimelineEvents events \u003d\n             store.getEntityTimelines(entityType, entityIdSet, limit,\n                 windowStart, windowEnd, eventTypes);\n         if (events !\u003d null) {\n           returnEvents.addEvents(events.getAllEvents());\n         }\n       }\n     }\n-    tryReleaseCacheItems(relatedCacheItems);\n     return returnEvents;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n    LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n    TimelineEvents returnEvents \u003d new TimelineEvents();\n    List\u003cEntityCacheItem\u003e relatedCacheItems \u003d new ArrayList\u003c\u003e();\n    for (String entityId : entityIds) {\n      LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n      List\u003cTimelineStore\u003e stores\n          \u003d getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\n      for (TimelineStore store : stores) {\n        LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n            store.toString());\n        SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n        entityIdSet.add(entityId);\n        TimelineEvents events \u003d\n            store.getEntityTimelines(entityType, entityIdSet, limit,\n                windowStart, windowEnd, eventTypes);\n        if (events !\u003d null) {\n          returnEvents.addEvents(events.getAllEvents());\n        }\n      }\n    }\n    return returnEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "705286ccaeea36941d97ec1c1700746b74264924": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
      "commitDate": "27/05/16 6:58 AM",
      "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
      "commitAuthor": "Junping Du",
      "commitDateOld": "03/05/16 4:16 AM",
      "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 24.11,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   public TimelineEvents getEntityTimelines(String entityType,\n       SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n       Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n     LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n     TimelineEvents returnEvents \u003d new TimelineEvents();\n+    List\u003cEntityCacheItem\u003e relatedCacheItems \u003d new ArrayList\u003c\u003e();\n     for (String entityId : entityIds) {\n       LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n       List\u003cTimelineStore\u003e stores\n-          \u003d getTimelineStoresForRead(entityId, entityType);\n+          \u003d getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\n       for (TimelineStore store : stores) {\n         LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n             store.toString());\n         SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n         entityIdSet.add(entityId);\n         TimelineEvents events \u003d\n             store.getEntityTimelines(entityType, entityIdSet, limit,\n                 windowStart, windowEnd, eventTypes);\n-        returnEvents.addEvents(events.getAllEvents());\n+        if (events !\u003d null) {\n+          returnEvents.addEvents(events.getAllEvents());\n+        }\n       }\n     }\n+    tryReleaseCacheItems(relatedCacheItems);\n     return returnEvents;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n    LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n    TimelineEvents returnEvents \u003d new TimelineEvents();\n    List\u003cEntityCacheItem\u003e relatedCacheItems \u003d new ArrayList\u003c\u003e();\n    for (String entityId : entityIds) {\n      LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n      List\u003cTimelineStore\u003e stores\n          \u003d getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\n      for (TimelineStore store : stores) {\n        LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n            store.toString());\n        SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n        entityIdSet.add(entityId);\n        TimelineEvents events \u003d\n            store.getEntityTimelines(entityType, entityIdSet, limit,\n                windowStart, windowEnd, eventTypes);\n        if (events !\u003d null) {\n          returnEvents.addEvents(events.getAllEvents());\n        }\n      }\n    }\n    tryReleaseCacheItems(relatedCacheItems);\n    return returnEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,22 @@\n+  public TimelineEvents getEntityTimelines(String entityType,\n+      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n+      Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n+    LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n+    TimelineEvents returnEvents \u003d new TimelineEvents();\n+    for (String entityId : entityIds) {\n+      LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n+      List\u003cTimelineStore\u003e stores\n+          \u003d getTimelineStoresForRead(entityId, entityType);\n+      for (TimelineStore store : stores) {\n+        LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n+            store.toString());\n+        SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n+        entityIdSet.add(entityId);\n+        TimelineEvents events \u003d\n+            store.getEntityTimelines(entityType, entityIdSet, limit,\n+                windowStart, windowEnd, eventTypes);\n+        returnEvents.addEvents(events.getAllEvents());\n+      }\n+    }\n+    return returnEvents;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEntityTimelines(String entityType,\n      SortedSet\u003cString\u003e entityIds, Long limit, Long windowStart,\n      Long windowEnd, Set\u003cString\u003e eventTypes) throws IOException {\n    LOG.debug(\"getEntityTimelines type\u003d{} ids\u003d{}\", entityType, entityIds);\n    TimelineEvents returnEvents \u003d new TimelineEvents();\n    for (String entityId : entityIds) {\n      LOG.debug(\"getEntityTimeline type\u003d{} id\u003d{}\", entityType, entityId);\n      List\u003cTimelineStore\u003e stores\n          \u003d getTimelineStoresForRead(entityId, entityType);\n      for (TimelineStore store : stores) {\n        LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(),\n            store.toString());\n        SortedSet\u003cString\u003e entityIdSet \u003d new TreeSet\u003c\u003e();\n        entityIdSet.add(entityId);\n        TimelineEvents events \u003d\n            store.getEntityTimelines(entityType, entityIdSet, limit,\n                windowStart, windowEnd, eventTypes);\n        returnEvents.addEvents(events.getAllEvents());\n      }\n    }\n    return returnEvents;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}