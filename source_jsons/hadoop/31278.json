{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationClientInterceptor.java",
  "functionName": "getClientRMProxyForSubCluster",
  "functionId": "getClientRMProxyForSubCluster___subClusterId-SubClusterId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/FederationClientInterceptor.java",
  "functionStartLine": 210,
  "functionEndLine": 237,
  "numCommitsSeen": 16,
  "timeTaken": 1833,
  "changeHistory": [
    "7d0adddf095962751a4e1f0fadc21720d51ceced",
    "86f05c33125af3b435d6793551680ffa35047aa7",
    "43a97174fe49aa0c25d03b8a970a46d4bebf1aa8"
  ],
  "changeHistoryShort": {
    "7d0adddf095962751a4e1f0fadc21720d51ceced": "Ybodychange",
    "86f05c33125af3b435d6793551680ffa35047aa7": "Ybodychange",
    "43a97174fe49aa0c25d03b8a970a46d4bebf1aa8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7d0adddf095962751a4e1f0fadc21720d51ceced": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9689: Support proxy user for Router to support kerberos (#1654)\n\n",
      "commitDate": "04/11/19 5:13 PM",
      "commitName": "7d0adddf095962751a4e1f0fadc21720d51ceced",
      "commitAuthor": "zhoukang",
      "commitDateOld": "23/04/19 7:58 PM",
      "commitNameOld": "3f2f4186f6543272cf4bb7c815f1f46ba50e7640",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 194.93,
      "commitsBetweenForRepo": 1436,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,28 @@\n   protected ApplicationClientProtocol getClientRMProxyForSubCluster(\n       SubClusterId subClusterId) throws YarnException {\n \n     if (clientRMProxies.containsKey(subClusterId)) {\n       return clientRMProxies.get(subClusterId);\n     }\n \n     ApplicationClientProtocol clientRMProxy \u003d null;\n     try {\n+      boolean serviceAuthEnabled \u003d getConf().getBoolean(\n+              CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false);\n+      UserGroupInformation realUser \u003d user;\n+      if (serviceAuthEnabled) {\n+        realUser \u003d UserGroupInformation.createProxyUser(\n+                user.getShortUserName(), UserGroupInformation.getLoginUser());\n+      }\n       clientRMProxy \u003d FederationProxyProviderUtil.createRMProxy(getConf(),\n-          ApplicationClientProtocol.class, subClusterId, user);\n+          ApplicationClientProtocol.class, subClusterId, realUser);\n     } catch (Exception e) {\n       RouterServerUtil.logAndThrowException(\n           \"Unable to create the interface to reach the SubCluster \"\n               + subClusterId,\n           e);\n     }\n \n     clientRMProxies.put(subClusterId, clientRMProxy);\n     return clientRMProxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationClientProtocol getClientRMProxyForSubCluster(\n      SubClusterId subClusterId) throws YarnException {\n\n    if (clientRMProxies.containsKey(subClusterId)) {\n      return clientRMProxies.get(subClusterId);\n    }\n\n    ApplicationClientProtocol clientRMProxy \u003d null;\n    try {\n      boolean serviceAuthEnabled \u003d getConf().getBoolean(\n              CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false);\n      UserGroupInformation realUser \u003d user;\n      if (serviceAuthEnabled) {\n        realUser \u003d UserGroupInformation.createProxyUser(\n                user.getShortUserName(), UserGroupInformation.getLoginUser());\n      }\n      clientRMProxy \u003d FederationProxyProviderUtil.createRMProxy(getConf(),\n          ApplicationClientProtocol.class, subClusterId, realUser);\n    } catch (Exception e) {\n      RouterServerUtil.logAndThrowException(\n          \"Unable to create the interface to reach the SubCluster \"\n              + subClusterId,\n          e);\n    }\n\n    clientRMProxies.put(subClusterId, clientRMProxy);\n    return clientRMProxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/FederationClientInterceptor.java",
      "extendedDetails": {}
    },
    "86f05c33125af3b435d6793551680ffa35047aa7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6866. Minor clean-up and fixes in anticipation of YARN-2915 merge with trunk. (Botong Huang via Subru).\n\n(cherry picked from commit 40453879ec860819b080ccc82454480a436c0adc)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "86f05c33125af3b435d6793551680ffa35047aa7",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "43a97174fe49aa0c25d03b8a970a46d4bebf1aa8",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,21 @@\n   protected ApplicationClientProtocol getClientRMProxyForSubCluster(\n       SubClusterId subClusterId) throws YarnException {\n \n     if (clientRMProxies.containsKey(subClusterId)) {\n       return clientRMProxies.get(subClusterId);\n     }\n \n     ApplicationClientProtocol clientRMProxy \u003d null;\n     try {\n-      clientRMProxy \u003d\n-          user.doAs(new PrivilegedExceptionAction\u003cApplicationClientProtocol\u003e() {\n-            @Override\n-            public ApplicationClientProtocol run() throws Exception {\n-              return ClientRMProxy.createRMProxy(getConf(),\n-                  ApplicationClientProtocol.class);\n-            }\n-          });\n+      clientRMProxy \u003d FederationProxyProviderUtil.createRMProxy(getConf(),\n+          ApplicationClientProtocol.class, subClusterId, user);\n     } catch (Exception e) {\n       RouterServerUtil.logAndThrowException(\n           \"Unable to create the interface to reach the SubCluster \"\n               + subClusterId,\n           e);\n     }\n \n     clientRMProxies.put(subClusterId, clientRMProxy);\n     return clientRMProxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationClientProtocol getClientRMProxyForSubCluster(\n      SubClusterId subClusterId) throws YarnException {\n\n    if (clientRMProxies.containsKey(subClusterId)) {\n      return clientRMProxies.get(subClusterId);\n    }\n\n    ApplicationClientProtocol clientRMProxy \u003d null;\n    try {\n      clientRMProxy \u003d FederationProxyProviderUtil.createRMProxy(getConf(),\n          ApplicationClientProtocol.class, subClusterId, user);\n    } catch (Exception e) {\n      RouterServerUtil.logAndThrowException(\n          \"Unable to create the interface to reach the SubCluster \"\n              + subClusterId,\n          e);\n    }\n\n    clientRMProxies.put(subClusterId, clientRMProxy);\n    return clientRMProxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/FederationClientInterceptor.java",
      "extendedDetails": {}
    },
    "43a97174fe49aa0c25d03b8a970a46d4bebf1aa8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3659. Federation: routing client invocations transparently to multiple RMs. (Giovanni Matteo Fumarola via Subru).\n\n(cherry picked from commit 52daa6d971ae408d121b3737ea8c0575e7e8516d)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "43a97174fe49aa0c25d03b8a970a46d4bebf1aa8",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,27 @@\n+  protected ApplicationClientProtocol getClientRMProxyForSubCluster(\n+      SubClusterId subClusterId) throws YarnException {\n+\n+    if (clientRMProxies.containsKey(subClusterId)) {\n+      return clientRMProxies.get(subClusterId);\n+    }\n+\n+    ApplicationClientProtocol clientRMProxy \u003d null;\n+    try {\n+      clientRMProxy \u003d\n+          user.doAs(new PrivilegedExceptionAction\u003cApplicationClientProtocol\u003e() {\n+            @Override\n+            public ApplicationClientProtocol run() throws Exception {\n+              return ClientRMProxy.createRMProxy(getConf(),\n+                  ApplicationClientProtocol.class);\n+            }\n+          });\n+    } catch (Exception e) {\n+      RouterServerUtil.logAndThrowException(\n+          \"Unable to create the interface to reach the SubCluster \"\n+              + subClusterId,\n+          e);\n+    }\n+\n+    clientRMProxies.put(subClusterId, clientRMProxy);\n+    return clientRMProxy;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationClientProtocol getClientRMProxyForSubCluster(\n      SubClusterId subClusterId) throws YarnException {\n\n    if (clientRMProxies.containsKey(subClusterId)) {\n      return clientRMProxies.get(subClusterId);\n    }\n\n    ApplicationClientProtocol clientRMProxy \u003d null;\n    try {\n      clientRMProxy \u003d\n          user.doAs(new PrivilegedExceptionAction\u003cApplicationClientProtocol\u003e() {\n            @Override\n            public ApplicationClientProtocol run() throws Exception {\n              return ClientRMProxy.createRMProxy(getConf(),\n                  ApplicationClientProtocol.class);\n            }\n          });\n    } catch (Exception e) {\n      RouterServerUtil.logAndThrowException(\n          \"Unable to create the interface to reach the SubCluster \"\n              + subClusterId,\n          e);\n    }\n\n    clientRMProxies.put(subClusterId, clientRMProxy);\n    return clientRMProxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/FederationClientInterceptor.java"
    }
  }
}