{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeHeartbeatService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___configuration-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
  "functionStartLine": 117,
  "functionEndLine": 169,
  "numCommitsSeen": 14,
  "timeTaken": 2864,
  "changeHistory": [
    "ddbe08db3323431693ceb91ca00bc138be7577b0",
    "19088e1b496edd55cc2110ecee973d2be8068111",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "67785fe0063cfbfecab0e8deaae4a45d9c7c0073",
    "d8c81073320320a019fb3868be4f06f46aebea43"
  ],
  "changeHistoryShort": {
    "ddbe08db3323431693ceb91ca00bc138be7577b0": "Ybodychange",
    "19088e1b496edd55cc2110ecee973d2be8068111": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "67785fe0063cfbfecab0e8deaae4a45d9c7c0073": "Ybodychange",
    "d8c81073320320a019fb3868be4f06f46aebea43": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ddbe08db3323431693ceb91ca00bc138be7577b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13955. RBF: Support secure Namenode in NamenodeHeartbeatService. Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "ddbe08db3323431693ceb91ca00bc138be7577b0",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "1ce25e702b5086fc81f7fc23fcb87db167f3804d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,53 @@\n   protected void serviceInit(Configuration configuration) throws Exception {\n \n     this.conf \u003d DFSHAAdmin.addSecurityConfiguration(configuration);\n \n     String nnDesc \u003d nameserviceId;\n     if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n       this.localTarget \u003d new NNHAServiceTarget(\n           conf, nameserviceId, namenodeId);\n       nnDesc +\u003d \"-\" + namenodeId;\n     } else {\n       this.localTarget \u003d null;\n     }\n \n     // Get the RPC address for the clients to connect\n     this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n     LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n \n     // Get the Service RPC address for monitoring\n     this.serviceAddress \u003d\n         DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n     if (this.serviceAddress \u003d\u003d null) {\n       LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n           \"using RPC address {}\", nnDesc, this.rpcAddress);\n       this.serviceAddress \u003d this.rpcAddress;\n     }\n     LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n \n     // Get the Lifeline RPC address for faster monitoring\n     this.lifelineAddress \u003d\n         DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n     if (this.lifelineAddress \u003d\u003d null) {\n       this.lifelineAddress \u003d this.serviceAddress;\n     }\n     LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n \n     // Get the Web address for UI\n     this.webAddress \u003d\n         DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n     LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n \n+    this.connectionFactory \u003d\n+        URLConnectionFactory.newDefaultURLConnectionFactory(conf);\n+\n+    this.scheme \u003d\n+        DFSUtil.getHttpPolicy(conf).isHttpEnabled() ? \"http\" : \"https\";\n+\n     this.setIntervalMs(conf.getLong(\n         DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n         DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n \n \n     super.serviceInit(configuration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration configuration) throws Exception {\n\n    this.conf \u003d DFSHAAdmin.addSecurityConfiguration(configuration);\n\n    String nnDesc \u003d nameserviceId;\n    if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n      this.localTarget \u003d new NNHAServiceTarget(\n          conf, nameserviceId, namenodeId);\n      nnDesc +\u003d \"-\" + namenodeId;\n    } else {\n      this.localTarget \u003d null;\n    }\n\n    // Get the RPC address for the clients to connect\n    this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n\n    // Get the Service RPC address for monitoring\n    this.serviceAddress \u003d\n        DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n    if (this.serviceAddress \u003d\u003d null) {\n      LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n          \"using RPC address {}\", nnDesc, this.rpcAddress);\n      this.serviceAddress \u003d this.rpcAddress;\n    }\n    LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n\n    // Get the Lifeline RPC address for faster monitoring\n    this.lifelineAddress \u003d\n        DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n    if (this.lifelineAddress \u003d\u003d null) {\n      this.lifelineAddress \u003d this.serviceAddress;\n    }\n    LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n\n    // Get the Web address for UI\n    this.webAddress \u003d\n        DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n\n    this.connectionFactory \u003d\n        URLConnectionFactory.newDefaultURLConnectionFactory(conf);\n\n    this.scheme \u003d\n        DFSUtil.getHttpPolicy(conf).isHttpEnabled() ? \"http\" : \"https\";\n\n    this.setIntervalMs(conf.getLong(\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n\n\n    super.serviceInit(configuration);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "19088e1b496edd55cc2110ecee973d2be8068111": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14089. RBF: Failed to specify server\u0027s Kerberos pricipal name in NamenodeHeartbeatService. Contributed by Ranith Sardar.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "19088e1b496edd55cc2110ecee973d2be8068111",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "7b0bc492edbbd30c6945c89d8bc5ad0f6cf42b76",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   protected void serviceInit(Configuration configuration) throws Exception {\n \n-    this.conf \u003d configuration;\n+    this.conf \u003d DFSHAAdmin.addSecurityConfiguration(configuration);\n \n     String nnDesc \u003d nameserviceId;\n     if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n       this.localTarget \u003d new NNHAServiceTarget(\n           conf, nameserviceId, namenodeId);\n       nnDesc +\u003d \"-\" + namenodeId;\n     } else {\n       this.localTarget \u003d null;\n     }\n \n     // Get the RPC address for the clients to connect\n     this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n     LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n \n     // Get the Service RPC address for monitoring\n     this.serviceAddress \u003d\n         DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n     if (this.serviceAddress \u003d\u003d null) {\n       LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n           \"using RPC address {}\", nnDesc, this.rpcAddress);\n       this.serviceAddress \u003d this.rpcAddress;\n     }\n     LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n \n     // Get the Lifeline RPC address for faster monitoring\n     this.lifelineAddress \u003d\n         DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n     if (this.lifelineAddress \u003d\u003d null) {\n       this.lifelineAddress \u003d this.serviceAddress;\n     }\n     LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n \n     // Get the Web address for UI\n     this.webAddress \u003d\n         DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n     LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n \n     this.setIntervalMs(conf.getLong(\n         DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n         DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n \n \n     super.serviceInit(configuration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration configuration) throws Exception {\n\n    this.conf \u003d DFSHAAdmin.addSecurityConfiguration(configuration);\n\n    String nnDesc \u003d nameserviceId;\n    if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n      this.localTarget \u003d new NNHAServiceTarget(\n          conf, nameserviceId, namenodeId);\n      nnDesc +\u003d \"-\" + namenodeId;\n    } else {\n      this.localTarget \u003d null;\n    }\n\n    // Get the RPC address for the clients to connect\n    this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n\n    // Get the Service RPC address for monitoring\n    this.serviceAddress \u003d\n        DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n    if (this.serviceAddress \u003d\u003d null) {\n      LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n          \"using RPC address {}\", nnDesc, this.rpcAddress);\n      this.serviceAddress \u003d this.rpcAddress;\n    }\n    LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n\n    // Get the Lifeline RPC address for faster monitoring\n    this.lifelineAddress \u003d\n        DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n    if (this.lifelineAddress \u003d\u003d null) {\n      this.lifelineAddress \u003d this.serviceAddress;\n    }\n    LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n\n    // Get the Web address for UI\n    this.webAddress \u003d\n        DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n\n    this.setIntervalMs(conf.getLong(\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n\n\n    super.serviceInit(configuration);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void serviceInit(Configuration configuration) throws Exception {\n\n    this.conf \u003d configuration;\n\n    String nnDesc \u003d nameserviceId;\n    if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n      this.localTarget \u003d new NNHAServiceTarget(\n          conf, nameserviceId, namenodeId);\n      nnDesc +\u003d \"-\" + namenodeId;\n    } else {\n      this.localTarget \u003d null;\n    }\n\n    // Get the RPC address for the clients to connect\n    this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n\n    // Get the Service RPC address for monitoring\n    this.serviceAddress \u003d\n        DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n    if (this.serviceAddress \u003d\u003d null) {\n      LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n          \"using RPC address {}\", nnDesc, this.rpcAddress);\n      this.serviceAddress \u003d this.rpcAddress;\n    }\n    LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n\n    // Get the Lifeline RPC address for faster monitoring\n    this.lifelineAddress \u003d\n        DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n    if (this.lifelineAddress \u003d\u003d null) {\n      this.lifelineAddress \u003d this.serviceAddress;\n    }\n    LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n\n    // Get the Web address for UI\n    this.webAddress \u003d\n        DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n\n    this.setIntervalMs(conf.getLong(\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n\n\n    super.serviceInit(configuration);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java"
      }
    },
    "67785fe0063cfbfecab0e8deaae4a45d9c7c0073": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12450. Fixing TestNamenodeHeartbeat and support non-HA. Contributed by Inigo Goiri.\n\n(cherry picked from commit 928d1e87f9dbe64f89b858ccc1780723f3af58e7)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "67785fe0063cfbfecab0e8deaae4a45d9c7c0073",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "d8c81073320320a019fb3868be4f06f46aebea43",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   protected void serviceInit(Configuration configuration) throws Exception {\n \n     this.conf \u003d configuration;\n \n+    String nnDesc \u003d nameserviceId;\n     if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n       this.localTarget \u003d new NNHAServiceTarget(\n           conf, nameserviceId, namenodeId);\n+      nnDesc +\u003d \"-\" + namenodeId;\n     } else {\n       this.localTarget \u003d null;\n     }\n \n     // Get the RPC address for the clients to connect\n     this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n-    LOG.info(\"{}-{} RPC address: {}\",\n-        nameserviceId, namenodeId, rpcAddress);\n+    LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n \n     // Get the Service RPC address for monitoring\n     this.serviceAddress \u003d\n         DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n     if (this.serviceAddress \u003d\u003d null) {\n-      LOG.error(\"Cannot locate RPC service address for NN {}-{}, \" +\n-          \"using RPC address {}\", nameserviceId, namenodeId, this.rpcAddress);\n+      LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n+          \"using RPC address {}\", nnDesc, this.rpcAddress);\n       this.serviceAddress \u003d this.rpcAddress;\n     }\n-    LOG.info(\"{}-{} Service RPC address: {}\",\n-        nameserviceId, namenodeId, serviceAddress);\n+    LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n \n     // Get the Lifeline RPC address for faster monitoring\n     this.lifelineAddress \u003d\n         DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n     if (this.lifelineAddress \u003d\u003d null) {\n       this.lifelineAddress \u003d this.serviceAddress;\n     }\n-    LOG.info(\"{}-{} Lifeline RPC address: {}\",\n-        nameserviceId, namenodeId, lifelineAddress);\n+    LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n \n     // Get the Web address for UI\n     this.webAddress \u003d\n         DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n-    LOG.info(\"{}-{} Web address: {}\", nameserviceId, namenodeId, webAddress);\n+    LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n \n     this.setIntervalMs(conf.getLong(\n         DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n         DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n \n \n     super.serviceInit(configuration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration configuration) throws Exception {\n\n    this.conf \u003d configuration;\n\n    String nnDesc \u003d nameserviceId;\n    if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n      this.localTarget \u003d new NNHAServiceTarget(\n          conf, nameserviceId, namenodeId);\n      nnDesc +\u003d \"-\" + namenodeId;\n    } else {\n      this.localTarget \u003d null;\n    }\n\n    // Get the RPC address for the clients to connect\n    this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} RPC address: {}\", nnDesc, rpcAddress);\n\n    // Get the Service RPC address for monitoring\n    this.serviceAddress \u003d\n        DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n    if (this.serviceAddress \u003d\u003d null) {\n      LOG.error(\"Cannot locate RPC service address for NN {}, \" +\n          \"using RPC address {}\", nnDesc, this.rpcAddress);\n      this.serviceAddress \u003d this.rpcAddress;\n    }\n    LOG.info(\"{} Service RPC address: {}\", nnDesc, serviceAddress);\n\n    // Get the Lifeline RPC address for faster monitoring\n    this.lifelineAddress \u003d\n        DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n    if (this.lifelineAddress \u003d\u003d null) {\n      this.lifelineAddress \u003d this.serviceAddress;\n    }\n    LOG.info(\"{} Lifeline RPC address: {}\", nnDesc, lifelineAddress);\n\n    // Get the Web address for UI\n    this.webAddress \u003d\n        DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n    LOG.info(\"{} Web address: {}\", nnDesc, webAddress);\n\n    this.setIntervalMs(conf.getLong(\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n\n\n    super.serviceInit(configuration);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java",
      "extendedDetails": {}
    },
    "d8c81073320320a019fb3868be4f06f46aebea43": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11826. Federation Namenode Heartbeat. Contributed by Inigo Goiri.\n\n(cherry picked from commit 928f8dab52191e733984d37f47b69719ccf11313)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "d8c81073320320a019fb3868be4f06f46aebea43",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,48 @@\n+  protected void serviceInit(Configuration configuration) throws Exception {\n+\n+    this.conf \u003d configuration;\n+\n+    if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n+      this.localTarget \u003d new NNHAServiceTarget(\n+          conf, nameserviceId, namenodeId);\n+    } else {\n+      this.localTarget \u003d null;\n+    }\n+\n+    // Get the RPC address for the clients to connect\n+    this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n+    LOG.info(\"{}-{} RPC address: {}\",\n+        nameserviceId, namenodeId, rpcAddress);\n+\n+    // Get the Service RPC address for monitoring\n+    this.serviceAddress \u003d\n+        DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n+    if (this.serviceAddress \u003d\u003d null) {\n+      LOG.error(\"Cannot locate RPC service address for NN {}-{}, \" +\n+          \"using RPC address {}\", nameserviceId, namenodeId, this.rpcAddress);\n+      this.serviceAddress \u003d this.rpcAddress;\n+    }\n+    LOG.info(\"{}-{} Service RPC address: {}\",\n+        nameserviceId, namenodeId, serviceAddress);\n+\n+    // Get the Lifeline RPC address for faster monitoring\n+    this.lifelineAddress \u003d\n+        DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n+    if (this.lifelineAddress \u003d\u003d null) {\n+      this.lifelineAddress \u003d this.serviceAddress;\n+    }\n+    LOG.info(\"{}-{} Lifeline RPC address: {}\",\n+        nameserviceId, namenodeId, lifelineAddress);\n+\n+    // Get the Web address for UI\n+    this.webAddress \u003d\n+        DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n+    LOG.info(\"{}-{} Web address: {}\", nameserviceId, namenodeId, webAddress);\n+\n+    this.setIntervalMs(conf.getLong(\n+        DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n+        DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n+\n+\n+    super.serviceInit(configuration);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration configuration) throws Exception {\n\n    this.conf \u003d configuration;\n\n    if (this.namenodeId !\u003d null \u0026\u0026 !this.namenodeId.isEmpty()) {\n      this.localTarget \u003d new NNHAServiceTarget(\n          conf, nameserviceId, namenodeId);\n    } else {\n      this.localTarget \u003d null;\n    }\n\n    // Get the RPC address for the clients to connect\n    this.rpcAddress \u003d getRpcAddress(conf, nameserviceId, namenodeId);\n    LOG.info(\"{}-{} RPC address: {}\",\n        nameserviceId, namenodeId, rpcAddress);\n\n    // Get the Service RPC address for monitoring\n    this.serviceAddress \u003d\n        DFSUtil.getNamenodeServiceAddr(conf, nameserviceId, namenodeId);\n    if (this.serviceAddress \u003d\u003d null) {\n      LOG.error(\"Cannot locate RPC service address for NN {}-{}, \" +\n          \"using RPC address {}\", nameserviceId, namenodeId, this.rpcAddress);\n      this.serviceAddress \u003d this.rpcAddress;\n    }\n    LOG.info(\"{}-{} Service RPC address: {}\",\n        nameserviceId, namenodeId, serviceAddress);\n\n    // Get the Lifeline RPC address for faster monitoring\n    this.lifelineAddress \u003d\n        DFSUtil.getNamenodeLifelineAddr(conf, nameserviceId, namenodeId);\n    if (this.lifelineAddress \u003d\u003d null) {\n      this.lifelineAddress \u003d this.serviceAddress;\n    }\n    LOG.info(\"{}-{} Lifeline RPC address: {}\",\n        nameserviceId, namenodeId, lifelineAddress);\n\n    // Get the Web address for UI\n    this.webAddress \u003d\n        DFSUtil.getNamenodeWebAddr(conf, nameserviceId, namenodeId);\n    LOG.info(\"{}-{} Web address: {}\", nameserviceId, namenodeId, webAddress);\n\n    this.setIntervalMs(conf.getLong(\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS,\n        DFS_ROUTER_HEARTBEAT_INTERVAL_MS_DEFAULT));\n\n\n    super.serviceInit(configuration);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/NamenodeHeartbeatService.java"
    }
  }
}