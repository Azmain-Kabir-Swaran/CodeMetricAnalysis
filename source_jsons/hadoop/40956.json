{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSConfigToCSConfigArgumentHandler.java",
  "functionName": "parseAndConvert",
  "functionId": "parseAndConvert___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigArgumentHandler.java",
  "functionStartLine": 135,
  "functionEndLine": 194,
  "numCommitsSeen": 9,
  "timeTaken": 3362,
  "changeHistory": [
    "004e95534817b3966d8e1727469c657cf1d043d7",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9",
    "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "004e95534817b3966d8e1727469c657cf1d043d7": "Ybodychange",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": "Ybodychange",
    "8c9018d5c7830ae8ec85f446985cafbc8a14d688": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "004e95534817b3966d8e1727469c657cf1d043d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10167. FS-CS Converter: Need to validate c-s.xml after converting. Contributed by Peter Bacsko\n",
      "commitDate": "05/03/20 12:56 AM",
      "commitName": "004e95534817b3966d8e1727469c657cf1d043d7",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "03/03/20 12:46 AM",
      "commitNameOld": "c0d084247c0d1b7b701bc82e8847096912e5d8a0",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,60 @@\n   int parseAndConvert(String[] args) throws Exception {\n     Options opts \u003d createOptions();\n     int retVal \u003d 0;\n \n     try {\n       if (args.length \u003d\u003d 0) {\n         LOG.info(\"Missing command line arguments\");\n         printHelp(opts);\n         return 0;\n       }\n \n       CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n \n       if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n         printHelp(opts);\n         return 0;\n       }\n \n       FSConfigToCSConfigConverter converter \u003d\n           prepareAndGetConverter(cliParser);\n \n       converter.convert(converterParams);\n+\n+      String outputDir \u003d converterParams.getOutputDirectory();\n+      boolean skipVerification \u003d\n+          cliParser.hasOption(CliOption.SKIP_VERIFICATION.shortSwitch);\n+      if (outputDir !\u003d null \u0026\u0026 !skipVerification) {\n+        validator.validateConvertedConfig(\n+            converterParams.getOutputDirectory());\n+      }\n     } catch (ParseException e) {\n       String msg \u003d \"Options parsing failed: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       printHelp(opts);\n       retVal \u003d -1;\n     } catch (PreconditionException e) {\n       String msg \u003d \"Cannot start FS config conversion due to the following\"\n           + \" precondition error: \" + e.getMessage();\n       handleException(e, msg);\n       retVal \u003d -1;\n     } catch (UnsupportedPropertyException e) {\n       String msg \u003d \"Unsupported property/setting encountered during FS config \"\n           + \"conversion: \" + e.getMessage();\n       handleException(e, msg);\n       retVal \u003d -1;\n     } catch (ConversionException | IllegalArgumentException e) {\n       String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n       handleException(e, msg);\n       retVal \u003d -1;\n+    } catch (VerificationException e) {\n+      Throwable cause \u003d e.getCause();\n+      String msg \u003d \"Verification failed: \" + e.getCause().getMessage();\n+      conversionOptions.handleVerificationFailure(cause, msg);\n+      retVal \u003d -1;\n     }\n \n     conversionOptions.handleParsingFinished();\n \n     return retVal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int parseAndConvert(String[] args) throws Exception {\n    Options opts \u003d createOptions();\n    int retVal \u003d 0;\n\n    try {\n      if (args.length \u003d\u003d 0) {\n        LOG.info(\"Missing command line arguments\");\n        printHelp(opts);\n        return 0;\n      }\n\n      CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n        printHelp(opts);\n        return 0;\n      }\n\n      FSConfigToCSConfigConverter converter \u003d\n          prepareAndGetConverter(cliParser);\n\n      converter.convert(converterParams);\n\n      String outputDir \u003d converterParams.getOutputDirectory();\n      boolean skipVerification \u003d\n          cliParser.hasOption(CliOption.SKIP_VERIFICATION.shortSwitch);\n      if (outputDir !\u003d null \u0026\u0026 !skipVerification) {\n        validator.validateConvertedConfig(\n            converterParams.getOutputDirectory());\n      }\n    } catch (ParseException e) {\n      String msg \u003d \"Options parsing failed: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      printHelp(opts);\n      retVal \u003d -1;\n    } catch (PreconditionException e) {\n      String msg \u003d \"Cannot start FS config conversion due to the following\"\n          + \" precondition error: \" + e.getMessage();\n      handleException(e, msg);\n      retVal \u003d -1;\n    } catch (UnsupportedPropertyException e) {\n      String msg \u003d \"Unsupported property/setting encountered during FS config \"\n          + \"conversion: \" + e.getMessage();\n      handleException(e, msg);\n      retVal \u003d -1;\n    } catch (ConversionException | IllegalArgumentException e) {\n      String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n      handleException(e, msg);\n      retVal \u003d -1;\n    } catch (VerificationException e) {\n      Throwable cause \u003d e.getCause();\n      String msg \u003d \"Verification failed: \" + e.getCause().getMessage();\n      conversionOptions.handleVerificationFailure(cause, msg);\n      retVal \u003d -1;\n    }\n\n    conversionOptions.handleParsingFinished();\n\n    return retVal;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigArgumentHandler.java",
      "extendedDetails": {}
    },
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko\n",
      "commitDate": "12/01/20 4:48 AM",
      "commitName": "24e6a9e43a210cdecaa8e87926eef09c869988f9",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "26/11/19 12:22 PM",
      "commitNameOld": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 46.68,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n   int parseAndConvert(String[] args) throws Exception {\n     Options opts \u003d createOptions();\n+    int retVal \u003d 0;\n \n     try {\n       if (args.length \u003d\u003d 0) {\n         LOG.info(\"Missing command line arguments\");\n         printHelp(opts);\n         return 0;\n       }\n \n       CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n \n       if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n         printHelp(opts);\n         return 0;\n       }\n \n-      checkOptionPresent(cliParser, CliOption.YARN_SITE);\n-      checkOutputDefined(cliParser);\n+      FSConfigToCSConfigConverter converter \u003d\n+          prepareAndGetConverter(cliParser);\n \n-      FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n-      converter.convert(params);\n+      converter.convert(converterParams);\n     } catch (ParseException e) {\n       String msg \u003d \"Options parsing failed: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       printHelp(opts);\n-      return -1;\n+      retVal \u003d -1;\n     } catch (PreconditionException e) {\n       String msg \u003d \"Cannot start FS config conversion due to the following\"\n           + \" precondition error: \" + e.getMessage();\n-      logAndStdErr(e, msg);\n-      return -1;\n+      handleException(e, msg);\n+      retVal \u003d -1;\n     } catch (UnsupportedPropertyException e) {\n       String msg \u003d \"Unsupported property/setting encountered during FS config \"\n           + \"conversion: \" + e.getMessage();\n-      logAndStdErr(e, msg);\n-      return -1;\n+      handleException(e, msg);\n+      retVal \u003d -1;\n     } catch (ConversionException | IllegalArgumentException e) {\n       String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n-      logAndStdErr(e, msg);\n-      return -1;\n+      handleException(e, msg);\n+      retVal \u003d -1;\n     }\n \n-    return 0;\n+    conversionOptions.handleParsingFinished();\n+\n+    return retVal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int parseAndConvert(String[] args) throws Exception {\n    Options opts \u003d createOptions();\n    int retVal \u003d 0;\n\n    try {\n      if (args.length \u003d\u003d 0) {\n        LOG.info(\"Missing command line arguments\");\n        printHelp(opts);\n        return 0;\n      }\n\n      CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n        printHelp(opts);\n        return 0;\n      }\n\n      FSConfigToCSConfigConverter converter \u003d\n          prepareAndGetConverter(cliParser);\n\n      converter.convert(converterParams);\n    } catch (ParseException e) {\n      String msg \u003d \"Options parsing failed: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      printHelp(opts);\n      retVal \u003d -1;\n    } catch (PreconditionException e) {\n      String msg \u003d \"Cannot start FS config conversion due to the following\"\n          + \" precondition error: \" + e.getMessage();\n      handleException(e, msg);\n      retVal \u003d -1;\n    } catch (UnsupportedPropertyException e) {\n      String msg \u003d \"Unsupported property/setting encountered during FS config \"\n          + \"conversion: \" + e.getMessage();\n      handleException(e, msg);\n      retVal \u003d -1;\n    } catch (ConversionException | IllegalArgumentException e) {\n      String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n      handleException(e, msg);\n      retVal \u003d -1;\n    }\n\n    conversionOptions.handleParsingFinished();\n\n    return retVal;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigArgumentHandler.java",
      "extendedDetails": {}
    },
    "8c9018d5c7830ae8ec85f446985cafbc8a14d688": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9899. Migration tool that help to generate CS config based on FS config [Phase 2]. Contributed by Peter Bacsko\n",
      "commitDate": "26/11/19 12:22 PM",
      "commitName": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9899. Migration tool that help to generate CS config based on FS config [Phase 2]. Contributed by Peter Bacsko\n",
          "commitDate": "26/11/19 12:22 PM",
          "commitName": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "21/10/19 1:16 PM",
          "commitNameOld": "3f7756dc6cd541918eec2b221891864d29b174d3",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 36.0,
          "commitsBetweenForRepo": 137,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,45 @@\n-  public int parseAndConvert(String[] args) throws Exception {\n+  int parseAndConvert(String[] args) throws Exception {\n     Options opts \u003d createOptions();\n \n     try {\n+      if (args.length \u003d\u003d 0) {\n+        LOG.info(\"Missing command line arguments\");\n+        printHelp(opts);\n+        return 0;\n+      }\n+\n       CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n+\n+      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n+        printHelp(opts);\n+        return 0;\n+      }\n+\n       checkOptionPresent(cliParser, CliOption.YARN_SITE);\n-      checkOptionPresent(cliParser, CliOption.OUTPUT_DIR);\n+      checkOutputDefined(cliParser);\n \n       FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n       converter.convert(params);\n-    } catch (MissingArgumentException e) {\n-      String msg \u003d \"Missing argument for options\" + e.getMessage();\n+    } catch (ParseException e) {\n+      String msg \u003d \"Options parsing failed: \" + e.getMessage();\n       logAndStdErr(e, msg);\n+      printHelp(opts);\n       return -1;\n     } catch (PreconditionException e) {\n       String msg \u003d \"Cannot start FS config conversion due to the following\"\n           + \" precondition error: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       return -1;\n     } catch (UnsupportedPropertyException e) {\n       String msg \u003d \"Unsupported property/setting encountered during FS config \"\n           + \"conversion: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       return -1;\n     } catch (ConversionException | IllegalArgumentException e) {\n       String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       return -1;\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int parseAndConvert(String[] args) throws Exception {\n    Options opts \u003d createOptions();\n\n    try {\n      if (args.length \u003d\u003d 0) {\n        LOG.info(\"Missing command line arguments\");\n        printHelp(opts);\n        return 0;\n      }\n\n      CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n        printHelp(opts);\n        return 0;\n      }\n\n      checkOptionPresent(cliParser, CliOption.YARN_SITE);\n      checkOutputDefined(cliParser);\n\n      FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n      converter.convert(params);\n    } catch (ParseException e) {\n      String msg \u003d \"Options parsing failed: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      printHelp(opts);\n      return -1;\n    } catch (PreconditionException e) {\n      String msg \u003d \"Cannot start FS config conversion due to the following\"\n          + \" precondition error: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (UnsupportedPropertyException e) {\n      String msg \u003d \"Unsupported property/setting encountered during FS config \"\n          + \"conversion: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (ConversionException | IllegalArgumentException e) {\n      String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    }\n\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigArgumentHandler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9899. Migration tool that help to generate CS config based on FS config [Phase 2]. Contributed by Peter Bacsko\n",
          "commitDate": "26/11/19 12:22 PM",
          "commitName": "8c9018d5c7830ae8ec85f446985cafbc8a14d688",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "21/10/19 1:16 PM",
          "commitNameOld": "3f7756dc6cd541918eec2b221891864d29b174d3",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 36.0,
          "commitsBetweenForRepo": 137,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,45 @@\n-  public int parseAndConvert(String[] args) throws Exception {\n+  int parseAndConvert(String[] args) throws Exception {\n     Options opts \u003d createOptions();\n \n     try {\n+      if (args.length \u003d\u003d 0) {\n+        LOG.info(\"Missing command line arguments\");\n+        printHelp(opts);\n+        return 0;\n+      }\n+\n       CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n+\n+      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n+        printHelp(opts);\n+        return 0;\n+      }\n+\n       checkOptionPresent(cliParser, CliOption.YARN_SITE);\n-      checkOptionPresent(cliParser, CliOption.OUTPUT_DIR);\n+      checkOutputDefined(cliParser);\n \n       FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n       converter.convert(params);\n-    } catch (MissingArgumentException e) {\n-      String msg \u003d \"Missing argument for options\" + e.getMessage();\n+    } catch (ParseException e) {\n+      String msg \u003d \"Options parsing failed: \" + e.getMessage();\n       logAndStdErr(e, msg);\n+      printHelp(opts);\n       return -1;\n     } catch (PreconditionException e) {\n       String msg \u003d \"Cannot start FS config conversion due to the following\"\n           + \" precondition error: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       return -1;\n     } catch (UnsupportedPropertyException e) {\n       String msg \u003d \"Unsupported property/setting encountered during FS config \"\n           + \"conversion: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       return -1;\n     } catch (ConversionException | IllegalArgumentException e) {\n       String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n       logAndStdErr(e, msg);\n       return -1;\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int parseAndConvert(String[] args) throws Exception {\n    Options opts \u003d createOptions();\n\n    try {\n      if (args.length \u003d\u003d 0) {\n        LOG.info(\"Missing command line arguments\");\n        printHelp(opts);\n        return 0;\n      }\n\n      CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n      if (cliParser.hasOption(CliOption.HELP.shortSwitch)) {\n        printHelp(opts);\n        return 0;\n      }\n\n      checkOptionPresent(cliParser, CliOption.YARN_SITE);\n      checkOutputDefined(cliParser);\n\n      FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n      converter.convert(params);\n    } catch (ParseException e) {\n      String msg \u003d \"Options parsing failed: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      printHelp(opts);\n      return -1;\n    } catch (PreconditionException e) {\n      String msg \u003d \"Cannot start FS config conversion due to the following\"\n          + \" precondition error: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (UnsupportedPropertyException e) {\n      String msg \u003d \"Unsupported property/setting encountered during FS config \"\n          + \"conversion: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (ConversionException | IllegalArgumentException e) {\n      String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    }\n\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigArgumentHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,32 @@\n+  public int parseAndConvert(String[] args) throws Exception {\n+    Options opts \u003d createOptions();\n+\n+    try {\n+      CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n+      checkOptionPresent(cliParser, CliOption.YARN_SITE);\n+      checkOptionPresent(cliParser, CliOption.OUTPUT_DIR);\n+\n+      FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n+      converter.convert(params);\n+    } catch (MissingArgumentException e) {\n+      String msg \u003d \"Missing argument for options\" + e.getMessage();\n+      logAndStdErr(e, msg);\n+      return -1;\n+    } catch (PreconditionException e) {\n+      String msg \u003d \"Cannot start FS config conversion due to the following\"\n+          + \" precondition error: \" + e.getMessage();\n+      logAndStdErr(e, msg);\n+      return -1;\n+    } catch (UnsupportedPropertyException e) {\n+      String msg \u003d \"Unsupported property/setting encountered during FS config \"\n+          + \"conversion: \" + e.getMessage();\n+      logAndStdErr(e, msg);\n+      return -1;\n+    } catch (ConversionException | IllegalArgumentException e) {\n+      String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n+      logAndStdErr(e, msg);\n+      return -1;\n+    }\n+\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int parseAndConvert(String[] args) throws Exception {\n    Options opts \u003d createOptions();\n\n    try {\n      CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n      checkOptionPresent(cliParser, CliOption.YARN_SITE);\n      checkOptionPresent(cliParser, CliOption.OUTPUT_DIR);\n\n      FSConfigToCSConfigConverterParams params \u003d validateInputFiles(cliParser);\n      converter.convert(params);\n    } catch (MissingArgumentException e) {\n      String msg \u003d \"Missing argument for options\" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (PreconditionException e) {\n      String msg \u003d \"Cannot start FS config conversion due to the following\"\n          + \" precondition error: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (UnsupportedPropertyException e) {\n      String msg \u003d \"Unsupported property/setting encountered during FS config \"\n          + \"conversion: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    } catch (ConversionException | IllegalArgumentException e) {\n      String msg \u003d \"Fatal error during FS config conversion: \" + e.getMessage();\n      logAndStdErr(e, msg);\n      return -1;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigArgumentHandler.java"
    }
  }
}