{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeManagerHardwareUtils.java",
  "functionName": "getVCoresInternal",
  "functionId": "getVCoresInternal___plugin-ResourceCalculatorPlugin__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
  "functionStartLine": 215,
  "functionEndLine": 247,
  "numCommitsSeen": 10,
  "timeTaken": 2243,
  "changeHistory": [
    "46e18c8da76ea8d91a16e59ba1154c30f37cb9fd",
    "3541ed80685f25486f33ef0f553854ccbdeb51d4"
  ],
  "changeHistoryShort": {
    "46e18c8da76ea8d91a16e59ba1154c30f37cb9fd": "Ybodychange",
    "3541ed80685f25486f33ef0f553854ccbdeb51d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "46e18c8da76ea8d91a16e59ba1154c30f37cb9fd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14914. Change to a safely casting long to int. Contributed by Ajay Kumar.\n",
      "commitDate": "13/12/17 2:56 PM",
      "commitName": "46e18c8da76ea8d91a16e59ba1154c30f37cb9fd",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 92.28,
      "commitsBetweenForRepo": 727,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private static int getVCoresInternal(ResourceCalculatorPlugin plugin,\n       Configuration conf) {\n     String message;\n     int cores \u003d conf.getInt(YarnConfiguration.NM_VCORES, -1);\n     if (cores \u003d\u003d -1) {\n       float physicalCores \u003d\n           NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n       float multiplier \u003d\n           conf.getFloat(YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER,\n               YarnConfiguration.DEFAULT_NM_PCORES_VCORES_MULTIPLIER);\n       if (multiplier \u003e 0) {\n         float tmp \u003d physicalCores * multiplier;\n         if (tmp \u003e 0 \u0026\u0026 tmp \u003c 1) {\n           // on a single core machine - tmp can be between 0 and 1\n           cores \u003d 1;\n         } else {\n-          cores \u003d (int) tmp;\n+          cores \u003d Math.round(tmp);\n         }\n       } else {\n         message \u003d \"Illegal value for \"\n             + YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER\n             + \". Value must be greater than 0.\";\n         throw new IllegalArgumentException(message);\n       }\n     }\n     if(cores \u003c\u003d 0) {\n       message \u003d \"Illegal value for \" + YarnConfiguration.NM_VCORES\n           + \". Value must be greater than 0.\";\n       throw new IllegalArgumentException(message);\n     }\n \n     return cores;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static int getVCoresInternal(ResourceCalculatorPlugin plugin,\n      Configuration conf) {\n    String message;\n    int cores \u003d conf.getInt(YarnConfiguration.NM_VCORES, -1);\n    if (cores \u003d\u003d -1) {\n      float physicalCores \u003d\n          NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n      float multiplier \u003d\n          conf.getFloat(YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER,\n              YarnConfiguration.DEFAULT_NM_PCORES_VCORES_MULTIPLIER);\n      if (multiplier \u003e 0) {\n        float tmp \u003d physicalCores * multiplier;\n        if (tmp \u003e 0 \u0026\u0026 tmp \u003c 1) {\n          // on a single core machine - tmp can be between 0 and 1\n          cores \u003d 1;\n        } else {\n          cores \u003d Math.round(tmp);\n        }\n      } else {\n        message \u003d \"Illegal value for \"\n            + YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER\n            + \". Value must be greater than 0.\";\n        throw new IllegalArgumentException(message);\n      }\n    }\n    if(cores \u003c\u003d 0) {\n      message \u003d \"Illegal value for \" + YarnConfiguration.NM_VCORES\n          + \". Value must be greater than 0.\";\n      throw new IllegalArgumentException(message);\n    }\n\n    return cores;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java",
      "extendedDetails": {}
    },
    "3541ed80685f25486f33ef0f553854ccbdeb51d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4330. MiniYARNCluster is showing multiple  Failed to instantiate default resource calculator warning messages. Contributed by Varun Saxena\n",
      "commitDate": "23/11/16 12:42 AM",
      "commitName": "3541ed80685f25486f33ef0f553854ccbdeb51d4",
      "commitAuthor": "Naganarasimha",
      "diff": "@@ -0,0 +1,33 @@\n+  private static int getVCoresInternal(ResourceCalculatorPlugin plugin,\n+      Configuration conf) {\n+    String message;\n+    int cores \u003d conf.getInt(YarnConfiguration.NM_VCORES, -1);\n+    if (cores \u003d\u003d -1) {\n+      float physicalCores \u003d\n+          NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n+      float multiplier \u003d\n+          conf.getFloat(YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER,\n+              YarnConfiguration.DEFAULT_NM_PCORES_VCORES_MULTIPLIER);\n+      if (multiplier \u003e 0) {\n+        float tmp \u003d physicalCores * multiplier;\n+        if (tmp \u003e 0 \u0026\u0026 tmp \u003c 1) {\n+          // on a single core machine - tmp can be between 0 and 1\n+          cores \u003d 1;\n+        } else {\n+          cores \u003d (int) tmp;\n+        }\n+      } else {\n+        message \u003d \"Illegal value for \"\n+            + YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER\n+            + \". Value must be greater than 0.\";\n+        throw new IllegalArgumentException(message);\n+      }\n+    }\n+    if(cores \u003c\u003d 0) {\n+      message \u003d \"Illegal value for \" + YarnConfiguration.NM_VCORES\n+          + \". Value must be greater than 0.\";\n+      throw new IllegalArgumentException(message);\n+    }\n+\n+    return cores;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static int getVCoresInternal(ResourceCalculatorPlugin plugin,\n      Configuration conf) {\n    String message;\n    int cores \u003d conf.getInt(YarnConfiguration.NM_VCORES, -1);\n    if (cores \u003d\u003d -1) {\n      float physicalCores \u003d\n          NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n      float multiplier \u003d\n          conf.getFloat(YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER,\n              YarnConfiguration.DEFAULT_NM_PCORES_VCORES_MULTIPLIER);\n      if (multiplier \u003e 0) {\n        float tmp \u003d physicalCores * multiplier;\n        if (tmp \u003e 0 \u0026\u0026 tmp \u003c 1) {\n          // on a single core machine - tmp can be between 0 and 1\n          cores \u003d 1;\n        } else {\n          cores \u003d (int) tmp;\n        }\n      } else {\n        message \u003d \"Illegal value for \"\n            + YarnConfiguration.NM_PCORES_VCORES_MULTIPLIER\n            + \". Value must be greater than 0.\";\n        throw new IllegalArgumentException(message);\n      }\n    }\n    if(cores \u003c\u003d 0) {\n      message \u003d \"Illegal value for \" + YarnConfiguration.NM_VCORES\n          + \". Value must be greater than 0.\";\n      throw new IllegalArgumentException(message);\n    }\n\n    return cores;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/NodeManagerHardwareUtils.java"
    }
  }
}