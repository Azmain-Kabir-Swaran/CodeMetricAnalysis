{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeQueueLoadMonitor.java",
  "functionName": "selectAnyNode",
  "functionId": "selectAnyNode___blacklist-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
  "functionStartLine": 376,
  "functionEndLine": 396,
  "numCommitsSeen": 12,
  "timeTaken": 2110,
  "changeHistory": [
    "fb512f50877438acb01fe6b3ec96c12b4db61694"
  ],
  "changeHistoryShort": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9697. Efficient allocation of Opportunistic containers. Contributed by Abhishek Modi.\n",
      "commitDate": "12/11/19 3:04 AM",
      "commitName": "fb512f50877438acb01fe6b3ec96c12b4db61694",
      "commitAuthor": "Abhishek Modi",
      "diff": "@@ -0,0 +1,21 @@\n+  public RMNode selectAnyNode(Set\u003cString\u003e blacklist) {\n+    List\u003cNodeId\u003e nodeIds \u003d selectLeastLoadedNodes(numNodesForAnyAllocation);\n+    int size \u003d nodeIds.size();\n+    if (size \u003c\u003d 0) {\n+      return null;\n+    }\n+    Random rand \u003d new Random();\n+    int startIndex \u003d rand.nextInt(size);\n+    for (int i \u003d 0; i \u003c size; ++i) {\n+      int index \u003d i + startIndex;\n+      index %\u003d size;\n+      NodeId nodeId \u003d nodeIds.get(index);\n+      if (nodeId !\u003d null \u0026\u0026 !blacklist.contains(nodeId.getHost())) {\n+        ClusterNode node \u003d clusterNodes.get(nodeId);\n+        if (node !\u003d null \u0026\u0026 comparator.compareAndIncrement(node, 1)) {\n+          return nodeByHostName.get(nodeId.getHost());\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RMNode selectAnyNode(Set\u003cString\u003e blacklist) {\n    List\u003cNodeId\u003e nodeIds \u003d selectLeastLoadedNodes(numNodesForAnyAllocation);\n    int size \u003d nodeIds.size();\n    if (size \u003c\u003d 0) {\n      return null;\n    }\n    Random rand \u003d new Random();\n    int startIndex \u003d rand.nextInt(size);\n    for (int i \u003d 0; i \u003c size; ++i) {\n      int index \u003d i + startIndex;\n      index %\u003d size;\n      NodeId nodeId \u003d nodeIds.get(index);\n      if (nodeId !\u003d null \u0026\u0026 !blacklist.contains(nodeId.getHost())) {\n        ClusterNode node \u003d clusterNodes.get(nodeId);\n        if (node !\u003d null \u0026\u0026 comparator.compareAndIncrement(node, 1)) {\n          return nodeByHostName.get(nodeId.getHost());\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java"
    }
  }
}