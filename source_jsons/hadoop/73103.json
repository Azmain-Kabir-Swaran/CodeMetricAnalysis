{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoInputStream.java",
  "functionName": "decrypt",
  "functionId": "decrypt___decryptor-Decryptor__inBuffer-ByteBuffer__outBuffer-ByteBuffer__padding-byte",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
  "functionStartLine": 242,
  "functionEndLine": 261,
  "numCommitsSeen": 21,
  "timeTaken": 1352,
  "changeHistory": [
    "9c2848e076a5c72bda3ec928de1790137c70fbbc",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d"
  ],
  "changeHistoryShort": {
    "9c2848e076a5c72bda3ec928de1790137c70fbbc": "Ymultichange(Yparameterchange,Ybodychange)",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": "Ybodychange",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c2848e076a5c72bda3ec928de1790137c70fbbc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10632. Minor improvements to Crypto input and output streams. Contributed by Yi Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 1:08 AM",
      "commitName": "9c2848e076a5c72bda3ec928de1790137c70fbbc",
      "commitAuthor": "Yi Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10632. Minor improvements to Crypto input and output streams. Contributed by Yi Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598485 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/14 1:08 AM",
          "commitName": "9c2848e076a5c72bda3ec928de1790137c70fbbc",
          "commitAuthor": "Yi Liu",
          "commitDateOld": "29/05/14 3:09 PM",
          "commitNameOld": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,20 @@\n-  private void decrypt() throws IOException {\n+  private void decrypt(Decryptor decryptor, ByteBuffer inBuffer, \n+      ByteBuffer outBuffer, byte padding) throws IOException {\n     Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n     if(inBuffer.position() \u003d\u003d padding) {\n       // There is no real data in inBuffer.\n       return;\n     }\n     inBuffer.flip();\n     outBuffer.clear();\n     decryptor.decrypt(inBuffer, outBuffer);\n     inBuffer.clear();\n     outBuffer.flip();\n     if (padding \u003e 0) {\n       /*\n        * The plain text and cipher text have a 1:1 mapping, they start at the \n        * same position.\n        */\n       outBuffer.position(padding);\n-      padding \u003d 0;\n-    }\n-    if (decryptor.isContextReset()) {\n-      /*\n-       * This code is generally not executed since the decryptor usually \n-       * maintains decryption context (e.g. the counter) internally. However, \n-       * some implementations can\u0027t maintain context so a re-init is necessary \n-       * after each decryption call.\n-       */\n-      updateDecryptor();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void decrypt(Decryptor decryptor, ByteBuffer inBuffer, \n      ByteBuffer outBuffer, byte padding) throws IOException {\n    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n    if(inBuffer.position() \u003d\u003d padding) {\n      // There is no real data in inBuffer.\n      return;\n    }\n    inBuffer.flip();\n    outBuffer.clear();\n    decryptor.decrypt(inBuffer, outBuffer);\n    inBuffer.clear();\n    outBuffer.flip();\n    if (padding \u003e 0) {\n      /*\n       * The plain text and cipher text have a 1:1 mapping, they start at the \n       * same position.\n       */\n      outBuffer.position(padding);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[decryptor-Decryptor, inBuffer-ByteBuffer, outBuffer-ByteBuffer, padding-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10632. Minor improvements to Crypto input and output streams. Contributed by Yi Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598485 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/14 1:08 AM",
          "commitName": "9c2848e076a5c72bda3ec928de1790137c70fbbc",
          "commitAuthor": "Yi Liu",
          "commitDateOld": "29/05/14 3:09 PM",
          "commitNameOld": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,20 @@\n-  private void decrypt() throws IOException {\n+  private void decrypt(Decryptor decryptor, ByteBuffer inBuffer, \n+      ByteBuffer outBuffer, byte padding) throws IOException {\n     Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n     if(inBuffer.position() \u003d\u003d padding) {\n       // There is no real data in inBuffer.\n       return;\n     }\n     inBuffer.flip();\n     outBuffer.clear();\n     decryptor.decrypt(inBuffer, outBuffer);\n     inBuffer.clear();\n     outBuffer.flip();\n     if (padding \u003e 0) {\n       /*\n        * The plain text and cipher text have a 1:1 mapping, they start at the \n        * same position.\n        */\n       outBuffer.position(padding);\n-      padding \u003d 0;\n-    }\n-    if (decryptor.isContextReset()) {\n-      /*\n-       * This code is generally not executed since the decryptor usually \n-       * maintains decryption context (e.g. the counter) internally. However, \n-       * some implementations can\u0027t maintain context so a re-init is necessary \n-       * after each decryption call.\n-       */\n-      updateDecryptor();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void decrypt(Decryptor decryptor, ByteBuffer inBuffer, \n      ByteBuffer outBuffer, byte padding) throws IOException {\n    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n    if(inBuffer.position() \u003d\u003d padding) {\n      // There is no real data in inBuffer.\n      return;\n    }\n    inBuffer.flip();\n    outBuffer.clear();\n    decryptor.decrypt(inBuffer, outBuffer);\n    inBuffer.clear();\n    outBuffer.flip();\n    if (padding \u003e 0) {\n      /*\n       * The plain text and cipher text have a 1:1 mapping, they start at the \n       * same position.\n       */\n      outBuffer.position(padding);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10628. Javadoc and few code style improvement for Crypto input and output streams. (yliu via clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 3:09 PM",
      "commitName": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/05/14 6:19 PM",
      "commitNameOld": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private void decrypt() throws IOException {\n     Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n     if(inBuffer.position() \u003d\u003d padding) {\n       // There is no real data in inBuffer.\n       return;\n     }\n     inBuffer.flip();\n     outBuffer.clear();\n     decryptor.decrypt(inBuffer, outBuffer);\n     inBuffer.clear();\n     outBuffer.flip();\n     if (padding \u003e 0) {\n-      /**\n-       * The plain text and cipher text have 1:1 mapping, they start at same \n-       * position.\n+      /*\n+       * The plain text and cipher text have a 1:1 mapping, they start at the \n+       * same position.\n        */\n       outBuffer.position(padding);\n       padding \u003d 0;\n     }\n     if (decryptor.isContextReset()) {\n-      /**\n-       * Typically we will not get here. To improve performance in CTR mode,\n-       * we rely on the decryptor maintaining context, for example calculating \n-       * the counter. Unfortunately, some bad implementations can\u0027t maintain \n-       * context so we need to re-init after doing decryption.\n+      /*\n+       * This code is generally not executed since the decryptor usually \n+       * maintains decryption context (e.g. the counter) internally. However, \n+       * some implementations can\u0027t maintain context so a re-init is necessary \n+       * after each decryption call.\n        */\n       updateDecryptor();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void decrypt() throws IOException {\n    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n    if(inBuffer.position() \u003d\u003d padding) {\n      // There is no real data in inBuffer.\n      return;\n    }\n    inBuffer.flip();\n    outBuffer.clear();\n    decryptor.decrypt(inBuffer, outBuffer);\n    inBuffer.clear();\n    outBuffer.flip();\n    if (padding \u003e 0) {\n      /*\n       * The plain text and cipher text have a 1:1 mapping, they start at the \n       * same position.\n       */\n      outBuffer.position(padding);\n      padding \u003d 0;\n    }\n    if (decryptor.isContextReset()) {\n      /*\n       * This code is generally not executed since the decryptor usually \n       * maintains decryption context (e.g. the counter) internally. However, \n       * some implementations can\u0027t maintain context so a re-init is necessary \n       * after each decryption call.\n       */\n      updateDecryptor();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10603. Crypto input and output streams implementing Hadoop stream interfaces. Contributed by Yi Liu and Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1597230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:19 PM",
      "commitName": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthor": "Yi Liu",
      "diff": "@@ -0,0 +1,29 @@\n+  private void decrypt() throws IOException {\n+    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n+    if(inBuffer.position() \u003d\u003d padding) {\n+      // There is no real data in inBuffer.\n+      return;\n+    }\n+    inBuffer.flip();\n+    outBuffer.clear();\n+    decryptor.decrypt(inBuffer, outBuffer);\n+    inBuffer.clear();\n+    outBuffer.flip();\n+    if (padding \u003e 0) {\n+      /**\n+       * The plain text and cipher text have 1:1 mapping, they start at same \n+       * position.\n+       */\n+      outBuffer.position(padding);\n+      padding \u003d 0;\n+    }\n+    if (decryptor.isContextReset()) {\n+      /**\n+       * Typically we will not get here. To improve performance in CTR mode,\n+       * we rely on the decryptor maintaining context, for example calculating \n+       * the counter. Unfortunately, some bad implementations can\u0027t maintain \n+       * context so we need to re-init after doing decryption.\n+       */\n+      updateDecryptor();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void decrypt() throws IOException {\n    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n    if(inBuffer.position() \u003d\u003d padding) {\n      // There is no real data in inBuffer.\n      return;\n    }\n    inBuffer.flip();\n    outBuffer.clear();\n    decryptor.decrypt(inBuffer, outBuffer);\n    inBuffer.clear();\n    outBuffer.flip();\n    if (padding \u003e 0) {\n      /**\n       * The plain text and cipher text have 1:1 mapping, they start at same \n       * position.\n       */\n      outBuffer.position(padding);\n      padding \u003d 0;\n    }\n    if (decryptor.isContextReset()) {\n      /**\n       * Typically we will not get here. To improve performance in CTR mode,\n       * we rely on the decryptor maintaining context, for example calculating \n       * the counter. Unfortunately, some bad implementations can\u0027t maintain \n       * context so we need to re-init after doing decryption.\n       */\n      updateDecryptor();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java"
    }
  }
}