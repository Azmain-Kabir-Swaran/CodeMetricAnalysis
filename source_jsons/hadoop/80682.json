{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FutureIOSupport.java",
  "functionName": "unwrapInnerException",
  "functionId": "unwrapInnerException___e-Throwable(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/impl/FutureIOSupport.java",
  "functionStartLine": 143,
  "functionEndLine": 162,
  "numCommitsSeen": 3,
  "timeTaken": 1601,
  "changeHistory": [
    "e02eb24e0a9139418120027b694492e0738df20a"
  ],
  "changeHistoryShort": {
    "e02eb24e0a9139418120027b694492e0738df20a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,20 @@\n+  private static IOException unwrapInnerException(final Throwable e) {\n+    Throwable cause \u003d e.getCause();\n+    if (cause instanceof IOException) {\n+      return (IOException) cause;\n+    } else if (cause instanceof WrappedIOException){\n+      return ((WrappedIOException) cause).getCause();\n+    } else if (cause instanceof CompletionException){\n+      return unwrapInnerException(cause);\n+    } else if (cause instanceof ExecutionException){\n+      return unwrapInnerException(cause);\n+    } else if (cause instanceof RuntimeException){\n+      throw (RuntimeException) cause;\n+    } else if (cause !\u003d null) {\n+      // other type: wrap with a new IOE\n+      return new IOException(cause);\n+    } else {\n+      // this only happens if there was no cause.\n+      return new IOException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static IOException unwrapInnerException(final Throwable e) {\n    Throwable cause \u003d e.getCause();\n    if (cause instanceof IOException) {\n      return (IOException) cause;\n    } else if (cause instanceof WrappedIOException){\n      return ((WrappedIOException) cause).getCause();\n    } else if (cause instanceof CompletionException){\n      return unwrapInnerException(cause);\n    } else if (cause instanceof ExecutionException){\n      return unwrapInnerException(cause);\n    } else if (cause instanceof RuntimeException){\n      throw (RuntimeException) cause;\n    } else if (cause !\u003d null) {\n      // other type: wrap with a new IOE\n      return new IOException(cause);\n    } else {\n      // this only happens if there was no cause.\n      return new IOException(e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/impl/FutureIOSupport.java"
    }
  }
}