{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XAttrFormat.java",
  "functionName": "getXAttr",
  "functionId": "getXAttr___attrs-byte[]__prefixedName-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/XAttrFormat.java",
  "functionStartLine": 135,
  "functionEndLine": 163,
  "numCommitsSeen": 4,
  "timeTaken": 2652,
  "changeHistory": [
    "b60ca37914b22550e3630fa02742d40697decb31",
    "0a1e922f3d8eca4e852be57124ec1bcafaadb289",
    "e166c038c0aaa57b245f985a1c0fadd5fe33c384",
    "eee0d4563c62647cfaaed6605ee713aaf69add78"
  ],
  "changeHistoryShort": {
    "b60ca37914b22550e3630fa02742d40697decb31": "Ybodychange",
    "0a1e922f3d8eca4e852be57124ec1bcafaadb289": "Ybodychange",
    "e166c038c0aaa57b245f985a1c0fadd5fe33c384": "Ybodychange",
    "eee0d4563c62647cfaaed6605ee713aaf69add78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b60ca37914b22550e3630fa02742d40697decb31": {
      "type": "Ybodychange",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
      "commitDate": "15/10/18 3:18 AM",
      "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "16/07/18 6:24 PM",
      "commitNameOld": "0a1e922f3d8eca4e852be57124ec1bcafaadb289",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 90.37,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   static XAttr getXAttr(byte[] attrs, String prefixedName) {\n     if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n       return null;\n     }\n \n     XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n     for (int i \u003d 0; i \u003c attrs.length;) {\n       // big-endian\n       int v \u003d Ints.fromBytes(attrs[i], attrs[i + 1],\n           attrs[i + 2], attrs[i + 3]);\n       i +\u003d 4;\n-      XAttr.NameSpace namespace \u003d XAttrStatusFormat.getNamespace(v);\n-      String name \u003d XAttrStatusFormat.getName(v);\n+      XAttr.NameSpace namespace \u003d XAttrFormat.getNamespace(v);\n+      String name \u003d XAttrFormat.getName(v);\n       int vlen \u003d ((0xff \u0026 attrs[i]) \u003c\u003c 8) | (0xff \u0026 attrs[i + 1]);\n       i +\u003d 2;\n       if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n           xAttr.getName().equals(name)) {\n         if (vlen \u003e 0) {\n           byte[] value \u003d new byte[vlen];\n           System.arraycopy(attrs, i, value, 0, vlen);\n           return new XAttr.Builder().setNameSpace(namespace).\n               setName(name).setValue(value).build();\n         }\n         return xAttr;\n       }\n       i +\u003d vlen;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static XAttr getXAttr(byte[] attrs, String prefixedName) {\n    if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n      return null;\n    }\n\n    XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n    for (int i \u003d 0; i \u003c attrs.length;) {\n      // big-endian\n      int v \u003d Ints.fromBytes(attrs[i], attrs[i + 1],\n          attrs[i + 2], attrs[i + 3]);\n      i +\u003d 4;\n      XAttr.NameSpace namespace \u003d XAttrFormat.getNamespace(v);\n      String name \u003d XAttrFormat.getName(v);\n      int vlen \u003d ((0xff \u0026 attrs[i]) \u003c\u003c 8) | (0xff \u0026 attrs[i + 1]);\n      i +\u003d 2;\n      if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n          xAttr.getName().equals(name)) {\n        if (vlen \u003e 0) {\n          byte[] value \u003d new byte[vlen];\n          System.arraycopy(attrs, i, value, 0, vlen);\n          return new XAttr.Builder().setNameSpace(namespace).\n              setName(name).setValue(value).build();\n        }\n        return xAttr;\n      }\n      i +\u003d vlen;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/XAttrFormat.java",
      "extendedDetails": {}
    },
    "0a1e922f3d8eca4e852be57124ec1bcafaadb289": {
      "type": "Ybodychange",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Ekanth Sethuramalingam \u0026 Arpit Agarwal.",
      "commitDate": "16/07/18 6:24 PM",
      "commitName": "0a1e922f3d8eca4e852be57124ec1bcafaadb289",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "27/08/15 7:54 PM",
      "commitNameOld": "e166c038c0aaa57b245f985a1c0fadd5fe33c384",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 1053.94,
      "commitsBetweenForRepo": 7738,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   static XAttr getXAttr(byte[] attrs, String prefixedName) {\n     if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n       return null;\n     }\n \n     XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n     for (int i \u003d 0; i \u003c attrs.length;) {\n       // big-endian\n       int v \u003d Ints.fromBytes(attrs[i], attrs[i + 1],\n           attrs[i + 2], attrs[i + 3]);\n       i +\u003d 4;\n-      int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n-      int nid \u003d v \u0026 XATTR_NAME_MASK;\n-      XAttr.NameSpace namespace \u003d XATTR_NAMESPACE_VALUES[ns];\n-      String name \u003d XAttrStorage.getName(nid);\n+      XAttr.NameSpace namespace \u003d XAttrStatusFormat.getNamespace(v);\n+      String name \u003d XAttrStatusFormat.getName(v);\n       int vlen \u003d ((0xff \u0026 attrs[i]) \u003c\u003c 8) | (0xff \u0026 attrs[i + 1]);\n       i +\u003d 2;\n       if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n           xAttr.getName().equals(name)) {\n         if (vlen \u003e 0) {\n           byte[] value \u003d new byte[vlen];\n           System.arraycopy(attrs, i, value, 0, vlen);\n           return new XAttr.Builder().setNameSpace(namespace).\n               setName(name).setValue(value).build();\n         }\n         return xAttr;\n       }\n       i +\u003d vlen;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static XAttr getXAttr(byte[] attrs, String prefixedName) {\n    if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n      return null;\n    }\n\n    XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n    for (int i \u003d 0; i \u003c attrs.length;) {\n      // big-endian\n      int v \u003d Ints.fromBytes(attrs[i], attrs[i + 1],\n          attrs[i + 2], attrs[i + 3]);\n      i +\u003d 4;\n      XAttr.NameSpace namespace \u003d XAttrStatusFormat.getNamespace(v);\n      String name \u003d XAttrStatusFormat.getName(v);\n      int vlen \u003d ((0xff \u0026 attrs[i]) \u003c\u003c 8) | (0xff \u0026 attrs[i + 1]);\n      i +\u003d 2;\n      if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n          xAttr.getName().equals(name)) {\n        if (vlen \u003e 0) {\n          byte[] value \u003d new byte[vlen];\n          System.arraycopy(attrs, i, value, 0, vlen);\n          return new XAttr.Builder().setNameSpace(namespace).\n              setName(name).setValue(value).build();\n        }\n        return xAttr;\n      }\n      i +\u003d vlen;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/XAttrFormat.java",
      "extendedDetails": {}
    },
    "e166c038c0aaa57b245f985a1c0fadd5fe33c384": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8963. Fix incorrect sign extension of xattr length in HDFS-8900. (Colin Patrick McCabe via yliu)\n",
      "commitDate": "27/08/15 7:54 PM",
      "commitName": "e166c038c0aaa57b245f985a1c0fadd5fe33c384",
      "commitAuthor": "yliu",
      "commitDateOld": "25/08/15 1:16 AM",
      "commitNameOld": "eee0d4563c62647cfaaed6605ee713aaf69add78",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   static XAttr getXAttr(byte[] attrs, String prefixedName) {\n     if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n       return null;\n     }\n \n     XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n     for (int i \u003d 0; i \u003c attrs.length;) {\n       // big-endian\n-      int v \u003d Ints.fromBytes(attrs[i++], attrs[i++], attrs[i++], attrs[i++]);\n+      int v \u003d Ints.fromBytes(attrs[i], attrs[i + 1],\n+          attrs[i + 2], attrs[i + 3]);\n+      i +\u003d 4;\n       int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n       int nid \u003d v \u0026 XATTR_NAME_MASK;\n       XAttr.NameSpace namespace \u003d XATTR_NAMESPACE_VALUES[ns];\n       String name \u003d XAttrStorage.getName(nid);\n-      int vlen \u003d (attrs[i++] \u003c\u003c 8) | attrs[i++];\n+      int vlen \u003d ((0xff \u0026 attrs[i]) \u003c\u003c 8) | (0xff \u0026 attrs[i + 1]);\n+      i +\u003d 2;\n       if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n           xAttr.getName().equals(name)) {\n         if (vlen \u003e 0) {\n           byte[] value \u003d new byte[vlen];\n           System.arraycopy(attrs, i, value, 0, vlen);\n           return new XAttr.Builder().setNameSpace(namespace).\n               setName(name).setValue(value).build();\n         }\n         return xAttr;\n       }\n       i +\u003d vlen;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static XAttr getXAttr(byte[] attrs, String prefixedName) {\n    if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n      return null;\n    }\n\n    XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n    for (int i \u003d 0; i \u003c attrs.length;) {\n      // big-endian\n      int v \u003d Ints.fromBytes(attrs[i], attrs[i + 1],\n          attrs[i + 2], attrs[i + 3]);\n      i +\u003d 4;\n      int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n      int nid \u003d v \u0026 XATTR_NAME_MASK;\n      XAttr.NameSpace namespace \u003d XATTR_NAMESPACE_VALUES[ns];\n      String name \u003d XAttrStorage.getName(nid);\n      int vlen \u003d ((0xff \u0026 attrs[i]) \u003c\u003c 8) | (0xff \u0026 attrs[i + 1]);\n      i +\u003d 2;\n      if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n          xAttr.getName().equals(name)) {\n        if (vlen \u003e 0) {\n          byte[] value \u003d new byte[vlen];\n          System.arraycopy(attrs, i, value, 0, vlen);\n          return new XAttr.Builder().setNameSpace(namespace).\n              setName(name).setValue(value).build();\n        }\n        return xAttr;\n      }\n      i +\u003d vlen;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/XAttrFormat.java",
      "extendedDetails": {}
    },
    "eee0d4563c62647cfaaed6605ee713aaf69add78": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)\n",
      "commitDate": "25/08/15 1:16 AM",
      "commitName": "eee0d4563c62647cfaaed6605ee713aaf69add78",
      "commitAuthor": "yliu",
      "diff": "@@ -0,0 +1,28 @@\n+  static XAttr getXAttr(byte[] attrs, String prefixedName) {\n+    if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n+      return null;\n+    }\n+\n+    XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n+    for (int i \u003d 0; i \u003c attrs.length;) {\n+      // big-endian\n+      int v \u003d Ints.fromBytes(attrs[i++], attrs[i++], attrs[i++], attrs[i++]);\n+      int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n+      int nid \u003d v \u0026 XATTR_NAME_MASK;\n+      XAttr.NameSpace namespace \u003d XATTR_NAMESPACE_VALUES[ns];\n+      String name \u003d XAttrStorage.getName(nid);\n+      int vlen \u003d (attrs[i++] \u003c\u003c 8) | attrs[i++];\n+      if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n+          xAttr.getName().equals(name)) {\n+        if (vlen \u003e 0) {\n+          byte[] value \u003d new byte[vlen];\n+          System.arraycopy(attrs, i, value, 0, vlen);\n+          return new XAttr.Builder().setNameSpace(namespace).\n+              setName(name).setValue(value).build();\n+        }\n+        return xAttr;\n+      }\n+      i +\u003d vlen;\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static XAttr getXAttr(byte[] attrs, String prefixedName) {\n    if (prefixedName \u003d\u003d null || attrs \u003d\u003d null) {\n      return null;\n    }\n\n    XAttr xAttr \u003d XAttrHelper.buildXAttr(prefixedName);\n    for (int i \u003d 0; i \u003c attrs.length;) {\n      // big-endian\n      int v \u003d Ints.fromBytes(attrs[i++], attrs[i++], attrs[i++], attrs[i++]);\n      int ns \u003d (v \u003e\u003e XATTR_NAMESPACE_OFFSET) \u0026 XATTR_NAMESPACE_MASK;\n      int nid \u003d v \u0026 XATTR_NAME_MASK;\n      XAttr.NameSpace namespace \u003d XATTR_NAMESPACE_VALUES[ns];\n      String name \u003d XAttrStorage.getName(nid);\n      int vlen \u003d (attrs[i++] \u003c\u003c 8) | attrs[i++];\n      if (xAttr.getNameSpace() \u003d\u003d namespace \u0026\u0026\n          xAttr.getName().equals(name)) {\n        if (vlen \u003e 0) {\n          byte[] value \u003d new byte[vlen];\n          System.arraycopy(attrs, i, value, 0, vlen);\n          return new XAttr.Builder().setNameSpace(namespace).\n              setName(name).setValue(value).build();\n        }\n        return xAttr;\n      }\n      i +\u003d vlen;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/XAttrFormat.java"
    }
  }
}