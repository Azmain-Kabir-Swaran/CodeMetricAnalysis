{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GetJournalEditServlet.java",
  "functionName": "isValidRequestor",
  "functionId": "isValidRequestor___request-HttpServletRequest__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
  "functionStartLine": 78,
  "functionEndLine": 139,
  "numCommitsSeen": 18,
  "timeTaken": 1764,
  "changeHistory": [
    "ba1d4ad25b301f7247f3f23df15e7f800e50feed",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
    "df801074c929d5414b92cc9fc0cc8a2794e02751",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "ba1d4ad25b301f7247f3f23df15e7f800e50feed": "Ybodychange",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": "Ybodychange",
    "df801074c929d5414b92cc9fc0cc8a2794e02751": "Ymultichange(Yparameterchange,Ybodychange)",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba1d4ad25b301f7247f3f23df15e7f800e50feed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7359. NameNode in secured HA cluster fails to start if dfs.namenode.secondary.http-address cannot be interpreted as a network address. Contributed by Chris Nauroth.\n",
      "commitDate": "05/11/14 3:09 PM",
      "commitName": "ba1d4ad25b301f7247f3f23df15e7f800e50feed",
      "commitAuthor": "cnauroth",
      "commitDateOld": "07/04/14 11:55 AM",
      "commitNameOld": "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 212.18,
      "commitsBetweenForRepo": 1762,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,62 @@\n   protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n       throws IOException {\n     String remotePrincipal \u003d request.getUserPrincipal().getName();\n     String remoteShortName \u003d request.getRemoteUser();\n     if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to \" +\n           \"GetJournalEditServlet\");\n       return false;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Validating request made by \" + remotePrincipal +\n           \" / \" + remoteShortName + \". This user is: \" +\n           UserGroupInformation.getLoginUser());\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n     validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n-    validRequestors.add(\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n-            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    try {\n+      validRequestors.add(\n+          SecurityUtil.getServerPrincipal(conf\n+              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n+              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+    } catch (Exception e) {\n+      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n+      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n+      String msg \u003d String.format(\n+        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n+        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n+        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n+        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n+        conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n+          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n+      LOG.warn(msg);\n+    }\n \n     // Check the full principal name of all the configured valid requestors.\n     for (String v : validRequestors) {\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n       if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n         return true;\n       }\n     }\n \n     // Additionally, we compare the short name of the requestor to this JN\u0027s\n     // username, because we want to allow requests from other JNs during\n     // recovery, but we can\u0027t enumerate the full list of JNs.\n     if (remoteShortName.equals(\n           UserGroupInformation.getLoginUser().getShortUserName())) {\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n             remotePrincipal);\n       return true;\n     }\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n      throws IOException {\n    String remotePrincipal \u003d request.getUserPrincipal().getName();\n    String remoteShortName \u003d request.getRemoteUser();\n    if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to \" +\n          \"GetJournalEditServlet\");\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Validating request made by \" + remotePrincipal +\n          \" / \" + remoteShortName + \". This user is: \" +\n          UserGroupInformation.getLoginUser());\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n    validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n    try {\n      validRequestors.add(\n          SecurityUtil.getServerPrincipal(conf\n              .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n              SecondaryNameNode.getHttpAddress(conf).getHostName()));\n    } catch (Exception e) {\n      // Don\u0027t halt if SecondaryNameNode principal could not be added.\n      LOG.debug(\"SecondaryNameNode principal could not be added\", e);\n      String msg \u003d String.format(\n        \"SecondaryNameNode principal not considered, %s \u003d %s, %s \u003d %s\",\n        DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,\n        conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n        DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n        conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,\n          DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));\n      LOG.warn(msg);\n    }\n\n    // Check the full principal name of all the configured valid requestors.\n    for (String v : validRequestors) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n      if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n        return true;\n      }\n    }\n\n    // Additionally, we compare the short name of the requestor to this JN\u0027s\n    // username, because we want to allow requests from other JNs during\n    // recovery, but we can\u0027t enumerate the full list of JNs.\n    if (remoteShortName.equals(\n          UserGroupInformation.getLoginUser().getShortUserName())) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n            remotePrincipal);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6181. Fix the wrong property names in NFS user guide. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1585563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/14 11:55 AM",
      "commitName": "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "08/03/14 1:25 PM",
      "commitNameOld": "94a1632fcb677fda6f4d812614026417f1d0a360",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 29.9,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n       throws IOException {\n     String remotePrincipal \u003d request.getUserPrincipal().getName();\n     String remoteShortName \u003d request.getRemoteUser();\n     if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to \" +\n           \"GetJournalEditServlet\");\n       return false;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Validating request made by \" + remotePrincipal +\n           \" / \" + remoteShortName + \". This user is: \" +\n           UserGroupInformation.getLoginUser());\n     }\n \n     Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n     validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n     validRequestors.add(\n         SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n             SecondaryNameNode.getHttpAddress(conf).getHostName()));\n \n     // Check the full principal name of all the configured valid requestors.\n     for (String v : validRequestors) {\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n       if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n         return true;\n       }\n     }\n \n     // Additionally, we compare the short name of the requestor to this JN\u0027s\n     // username, because we want to allow requests from other JNs during\n     // recovery, but we can\u0027t enumerate the full list of JNs.\n     if (remoteShortName.equals(\n           UserGroupInformation.getLoginUser().getShortUserName())) {\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n             remotePrincipal);\n       return true;\n     }\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n      throws IOException {\n    String remotePrincipal \u003d request.getUserPrincipal().getName();\n    String remoteShortName \u003d request.getRemoteUser();\n    if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to \" +\n          \"GetJournalEditServlet\");\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Validating request made by \" + remotePrincipal +\n          \" / \" + remoteShortName + \". This user is: \" +\n          UserGroupInformation.getLoginUser());\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n    validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    // Check the full principal name of all the configured valid requestors.\n    for (String v : validRequestors) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n      if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n        return true;\n      }\n    }\n\n    // Additionally, we compare the short name of the requestor to this JN\u0027s\n    // username, because we want to allow requests from other JNs during\n    // recovery, but we can\u0027t enumerate the full list of JNs.\n    if (remoteShortName.equals(\n          UserGroupInformation.getLoginUser().getShortUserName())) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n            remotePrincipal);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "df801074c929d5414b92cc9fc0cc8a2794e02751": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 2:42 PM",
      "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/12 2:42 PM",
          "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "25/07/12 2:47 PM",
          "commitNameOld": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 43.0,
          "commitsBetweenForRepo": 253,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,49 @@\n-  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n+  protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n       throws IOException {\n-    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    String remotePrincipal \u003d request.getUserPrincipal().getName();\n+    String remoteShortName \u003d request.getRemoteUser();\n+    if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to \" +\n           \"GetJournalEditServlet\");\n       return false;\n     }\n \n-    String[] validRequestors \u003d {\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()),\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_JOURNALNODE_USER_NAME_KEY),\n-            NameNode.getAddress(conf).getHostName()) };\n-    // TODO: above principal is not correct, since each JN will have a\n-    // different hostname.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Validating request made by \" + remotePrincipal +\n+          \" / \" + remoteShortName + \". This user is: \" +\n+          UserGroupInformation.getLoginUser());\n+    }\n \n+    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n+    validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n+    validRequestors.add(\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+\n+    // Check the full principal name of all the configured valid requestors.\n     for (String v : validRequestors) {\n-      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n+      if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n         if (LOG.isDebugEnabled())\n-          LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n+          LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n         return true;\n       }\n     }\n+\n+    // Additionally, we compare the short name of the requestor to this JN\u0027s\n+    // username, because we want to allow requests from other JNs during\n+    // recovery, but we can\u0027t enumerate the full list of JNs.\n+    if (remoteShortName.equals(\n+          UserGroupInformation.getLoginUser().getShortUserName())) {\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n+            remotePrincipal);\n+      return true;\n+    }\n+\n     if (LOG.isDebugEnabled())\n-      LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n+      LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n      throws IOException {\n    String remotePrincipal \u003d request.getUserPrincipal().getName();\n    String remoteShortName \u003d request.getRemoteUser();\n    if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to \" +\n          \"GetJournalEditServlet\");\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Validating request made by \" + remotePrincipal +\n          \" / \" + remoteShortName + \". This user is: \" +\n          UserGroupInformation.getLoginUser());\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n    validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    // Check the full principal name of all the configured valid requestors.\n    for (String v : validRequestors) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n      if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n        return true;\n      }\n    }\n\n    // Additionally, we compare the short name of the requestor to this JN\u0027s\n    // username, because we want to allow requests from other JNs during\n    // recovery, but we can\u0027t enumerate the full list of JNs.\n    if (remoteShortName.equals(\n          UserGroupInformation.getLoginUser().getShortUserName())) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n            remotePrincipal);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
          "extendedDetails": {
            "oldValue": "[remoteUser-String, conf-Configuration]",
            "newValue": "[request-HttpServletRequest, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/12 2:42 PM",
          "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "25/07/12 2:47 PM",
          "commitNameOld": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 43.0,
          "commitsBetweenForRepo": 253,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,49 @@\n-  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n+  protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n       throws IOException {\n-    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+    String remotePrincipal \u003d request.getUserPrincipal().getName();\n+    String remoteShortName \u003d request.getRemoteUser();\n+    if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n       LOG.warn(\"Received null remoteUser while authorizing access to \" +\n           \"GetJournalEditServlet\");\n       return false;\n     }\n \n-    String[] validRequestors \u003d {\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n-            .getAddress(conf).getHostName()),\n-        SecurityUtil.getServerPrincipal(conf\n-            .get(DFSConfigKeys.DFS_JOURNALNODE_USER_NAME_KEY),\n-            NameNode.getAddress(conf).getHostName()) };\n-    // TODO: above principal is not correct, since each JN will have a\n-    // different hostname.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Validating request made by \" + remotePrincipal +\n+          \" / \" + remoteShortName + \". This user is: \" +\n+          UserGroupInformation.getLoginUser());\n+    }\n \n+    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n+    validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n+    validRequestors.add(\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n+            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n+\n+    // Check the full principal name of all the configured valid requestors.\n     for (String v : validRequestors) {\n-      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n+      if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n         if (LOG.isDebugEnabled())\n-          LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n+          LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n         return true;\n       }\n     }\n+\n+    // Additionally, we compare the short name of the requestor to this JN\u0027s\n+    // username, because we want to allow requests from other JNs during\n+    // recovery, but we can\u0027t enumerate the full list of JNs.\n+    if (remoteShortName.equals(\n+          UserGroupInformation.getLoginUser().getShortUserName())) {\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n+            remotePrincipal);\n+      return true;\n+    }\n+\n     if (LOG.isDebugEnabled())\n-      LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n+      LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected boolean isValidRequestor(HttpServletRequest request, Configuration conf)\n      throws IOException {\n    String remotePrincipal \u003d request.getUserPrincipal().getName();\n    String remoteShortName \u003d request.getRemoteUser();\n    if (remotePrincipal \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to \" +\n          \"GetJournalEditServlet\");\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Validating request made by \" + remotePrincipal +\n          \" / \" + remoteShortName + \". This user is: \" +\n          UserGroupInformation.getLoginUser());\n    }\n\n    Set\u003cString\u003e validRequestors \u003d new HashSet\u003cString\u003e();\n    validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));\n    validRequestors.add(\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY),\n            SecondaryNameNode.getHttpAddress(conf).getHostName()));\n\n    // Check the full principal name of all the configured valid requestors.\n    for (String v : validRequestors) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is comparing to valid requestor: \" + v);\n      if (v !\u003d null \u0026\u0026 v.equals(remotePrincipal)) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"isValidRequestor is allowing: \" + remotePrincipal);\n        return true;\n      }\n    }\n\n    // Additionally, we compare the short name of the requestor to this JN\u0027s\n    // username, because we want to allow requests from other JNs during\n    // recovery, but we can\u0027t enumerate the full list of JNs.\n    if (remoteShortName.equals(\n          UserGroupInformation.getLoginUser().getShortUserName())) {\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"isValidRequestor is allowing other JN principal: \" +\n            remotePrincipal);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"isValidRequestor is rejecting: \" + remotePrincipal);\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n+      throws IOException {\n+    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n+      LOG.warn(\"Received null remoteUser while authorizing access to \" +\n+          \"GetJournalEditServlet\");\n+      return false;\n+    }\n+\n+    String[] validRequestors \u003d {\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n+            .getAddress(conf).getHostName()),\n+        SecurityUtil.getServerPrincipal(conf\n+            .get(DFSConfigKeys.DFS_JOURNALNODE_USER_NAME_KEY),\n+            NameNode.getAddress(conf).getHostName()) };\n+    // TODO: above principal is not correct, since each JN will have a\n+    // different hostname.\n+\n+    for (String v : validRequestors) {\n+      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n+        if (LOG.isDebugEnabled())\n+          LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n+        return true;\n+      }\n+    }\n+    if (LOG.isDebugEnabled())\n+      LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean isValidRequestor(String remoteUser, Configuration conf)\n      throws IOException {\n    if (remoteUser \u003d\u003d null) { // This really shouldn\u0027t happen...\n      LOG.warn(\"Received null remoteUser while authorizing access to \" +\n          \"GetJournalEditServlet\");\n      return false;\n    }\n\n    String[] validRequestors \u003d {\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY), NameNode\n            .getAddress(conf).getHostName()),\n        SecurityUtil.getServerPrincipal(conf\n            .get(DFSConfigKeys.DFS_JOURNALNODE_USER_NAME_KEY),\n            NameNode.getAddress(conf).getHostName()) };\n    // TODO: above principal is not correct, since each JN will have a\n    // different hostname.\n\n    for (String v : validRequestors) {\n      if (v !\u003d null \u0026\u0026 v.equals(remoteUser)) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"isValidRequestor is allowing: \" + remoteUser);\n        return true;\n      }\n    }\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"isValidRequestor is rejecting: \" + remoteUser);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java"
    }
  }
}