{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueManager.java",
  "functionName": "setChildResourceLimits",
  "functionId": "setChildResourceLimits___parent-FSParentQueue__child-FSQueue__queueConf-AllocationConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
  "functionStartLine": 398,
  "functionEndLine": 414,
  "numCommitsSeen": 52,
  "timeTaken": 2706,
  "changeHistory": [
    "10d0e4be6eade7c1685b9c6962bc9b18e33122a8",
    "99292adcefdc6b8f280b8e100605fb39f755c38a",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57",
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b"
  ],
  "changeHistoryShort": {
    "10d0e4be6eade7c1685b9c6962bc9b18e33122a8": "Ymodifierchange",
    "99292adcefdc6b8f280b8e100605fb39f755c38a": "Ybodychange",
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": "Ybodychange",
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10d0e4be6eade7c1685b9c6962bc9b18e33122a8": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-8325. Miscellaneous QueueManager code clean up. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "12/06/18 10:11 AM",
      "commitName": "10d0e4be6eade7c1685b9c6962bc9b18e33122a8",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "24/05/18 5:12 PM",
      "commitNameOld": "86bc6425d425913899f1d951498bd040e453b3d0",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 18.71,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-  void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n-      AllocationConfiguration queueConf) {\n+  private void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n+          AllocationConfiguration queueConf) {\n     Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n         queueConf.getConfiguredQueues();\n \n     // Ad hoc queues do not exist in the configured queues map\n     if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n         !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n       // For ad hoc queues, set their max reource allocations based on\n       // their parents\u0027 default child settings.\n       ConfigurableResource maxChild \u003d parent.getMaxChildQueueResource();\n \n       if (maxChild !\u003d null) {\n         child.setMaxShare(maxChild);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n          AllocationConfiguration queueConf) {\n    Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n        queueConf.getConfiguredQueues();\n\n    // Ad hoc queues do not exist in the configured queues map\n    if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n        !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n      // For ad hoc queues, set their max reource allocations based on\n      // their parents\u0027 default child settings.\n      ConfigurableResource maxChild \u003d parent.getMaxChildQueueResource();\n\n      if (maxChild !\u003d null) {\n        child.setMaxShare(maxChild);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[private]"
      }
    },
    "99292adcefdc6b8f280b8e100605fb39f755c38a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage. (Yufei Gu)\n",
      "commitDate": "05/10/17 11:51 PM",
      "commitName": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "09/05/17 9:22 AM",
      "commitNameOld": "543aac9f281871a40473e83061f6deadc0bbdab7",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 149.6,
      "commitsBetweenForRepo": 1028,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n       AllocationConfiguration queueConf) {\n     Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n         queueConf.getConfiguredQueues();\n \n     // Ad hoc queues do not exist in the configured queues map\n     if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n         !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n       // For ad hoc queues, set their max reource allocations based on\n       // their parents\u0027 default child settings.\n-      Resource maxChild \u003d parent.getMaxChildQueueResource();\n+      ConfigurableResource maxChild \u003d parent.getMaxChildQueueResource();\n \n       if (maxChild !\u003d null) {\n         child.setMaxShare(maxChild);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n      AllocationConfiguration queueConf) {\n    Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n        queueConf.getConfiguredQueues();\n\n    // Ad hoc queues do not exist in the configured queues map\n    if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n        !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n      // For ad hoc queues, set their max reource allocations based on\n      // their parents\u0027 default child settings.\n      ConfigurableResource maxChild \u003d parent.getMaxChildQueueResource();\n\n      if (maxChild !\u003d null) {\n        child.setMaxShare(maxChild);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "f6ea9be5473ab66798b0536317d2f32c5348eb57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5264. Store all queue-specific information in FSQueue. (Yufei Gu via kasha)\n",
      "commitDate": "02/09/16 2:56 PM",
      "commitName": "f6ea9be5473ab66798b0536317d2f32c5348eb57",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/08/16 5:40 PM",
      "commitNameOld": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.89,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n       AllocationConfiguration queueConf) {\n     Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n         queueConf.getConfiguredQueues();\n \n     // Ad hoc queues do not exist in the configured queues map\n     if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n         !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n       // For ad hoc queues, set their max reource allocations based on\n       // their parents\u0027 default child settings.\n-      Resource maxChild \u003d queueConf.getMaxChildResources(parent.getName());\n+      Resource maxChild \u003d parent.getMaxChildQueueResource();\n \n       if (maxChild !\u003d null) {\n-        queueConf.setMaxResources(child.getName(), maxChild);\n+        child.setMaxShare(maxChild);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n      AllocationConfiguration queueConf) {\n    Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n        queueConf.getConfiguredQueues();\n\n    // Ad hoc queues do not exist in the configured queues map\n    if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n        !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n      // For ad hoc queues, set their max reource allocations based on\n      // their parents\u0027 default child settings.\n      Resource maxChild \u003d parent.getMaxChildQueueResource();\n\n      if (maxChild !\u003d null) {\n        child.setMaxShare(maxChild);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
      "commitDate": "17/08/16 5:40 PM",
      "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,17 @@\n+  void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n+      AllocationConfiguration queueConf) {\n+    Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n+        queueConf.getConfiguredQueues();\n+\n+    // Ad hoc queues do not exist in the configured queues map\n+    if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n+        !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n+      // For ad hoc queues, set their max reource allocations based on\n+      // their parents\u0027 default child settings.\n+      Resource maxChild \u003d queueConf.getMaxChildResources(parent.getName());\n+\n+      if (maxChild !\u003d null) {\n+        queueConf.setMaxResources(child.getName(), maxChild);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildResourceLimits(FSParentQueue parent, FSQueue child,\n      AllocationConfiguration queueConf) {\n    Map\u003cFSQueueType, Set\u003cString\u003e\u003e configuredQueues \u003d\n        queueConf.getConfiguredQueues();\n\n    // Ad hoc queues do not exist in the configured queues map\n    if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) \u0026\u0026\n        !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {\n      // For ad hoc queues, set their max reource allocations based on\n      // their parents\u0027 default child settings.\n      Resource maxChild \u003d queueConf.getMaxChildResources(parent.getName());\n\n      if (maxChild !\u003d null) {\n        queueConf.setMaxResources(child.getName(), maxChild);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java"
    }
  }
}