{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNFileSystem.java",
  "functionName": "copyDirectory",
  "functionId": "copyDirectory___srcPath-Path__dstPath-Path",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java",
  "functionStartLine": 709,
  "functionEndLine": 756,
  "numCommitsSeen": 1,
  "timeTaken": 339,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,48 @@\n+  private boolean copyDirectory(Path srcPath, Path dstPath) throws IOException {\n+    String srcKey \u003d pathToKey(srcPath);\n+    if (!srcKey.endsWith(PATH_DELIMITER)) {\n+      srcKey +\u003d PATH_DELIMITER;\n+    }\n+    String dstKey \u003d pathToKey(dstPath);\n+    if (!dstKey.endsWith(PATH_DELIMITER)) {\n+      dstKey +\u003d PATH_DELIMITER;\n+    }\n+\n+    if (dstKey.startsWith(srcKey)) {\n+      throw new IOException(\n+          \"can not copy a directory to a subdirectory of self\");\n+    }\n+\n+    this.store.storeEmptyFile(dstKey);\n+    CosNCopyFileContext copyFileContext \u003d new CosNCopyFileContext();\n+\n+    int copiesToFinishes \u003d 0;\n+    String priorLastKey \u003d null;\n+    do {\n+      PartialListing objectList \u003d this.store.list(\n+          srcKey, Constants.COS_MAX_LISTING_LENGTH, priorLastKey, true);\n+      for (FileMetadata file : objectList.getFiles()) {\n+        this.boundedCopyThreadPool.execute(new CosNCopyFileTask(\n+            this.store,\n+            file.getKey(),\n+            dstKey.concat(file.getKey().substring(srcKey.length())),\n+            copyFileContext));\n+        copiesToFinishes++;\n+        if (!copyFileContext.isCopySuccess()) {\n+          break;\n+        }\n+      }\n+      priorLastKey \u003d objectList.getPriorLastKey();\n+    } while (null !\u003d priorLastKey);\n+\n+    copyFileContext.lock();\n+    try {\n+      copyFileContext.awaitAllFinish(copiesToFinishes);\n+    } catch (InterruptedException e) {\n+      LOG.warn(\"interrupted when wait copies to finish\");\n+    } finally {\n+      copyFileContext.lock();\n+    }\n+\n+    return copyFileContext.isCopySuccess();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean copyDirectory(Path srcPath, Path dstPath) throws IOException {\n    String srcKey \u003d pathToKey(srcPath);\n    if (!srcKey.endsWith(PATH_DELIMITER)) {\n      srcKey +\u003d PATH_DELIMITER;\n    }\n    String dstKey \u003d pathToKey(dstPath);\n    if (!dstKey.endsWith(PATH_DELIMITER)) {\n      dstKey +\u003d PATH_DELIMITER;\n    }\n\n    if (dstKey.startsWith(srcKey)) {\n      throw new IOException(\n          \"can not copy a directory to a subdirectory of self\");\n    }\n\n    this.store.storeEmptyFile(dstKey);\n    CosNCopyFileContext copyFileContext \u003d new CosNCopyFileContext();\n\n    int copiesToFinishes \u003d 0;\n    String priorLastKey \u003d null;\n    do {\n      PartialListing objectList \u003d this.store.list(\n          srcKey, Constants.COS_MAX_LISTING_LENGTH, priorLastKey, true);\n      for (FileMetadata file : objectList.getFiles()) {\n        this.boundedCopyThreadPool.execute(new CosNCopyFileTask(\n            this.store,\n            file.getKey(),\n            dstKey.concat(file.getKey().substring(srcKey.length())),\n            copyFileContext));\n        copiesToFinishes++;\n        if (!copyFileContext.isCopySuccess()) {\n          break;\n        }\n      }\n      priorLastKey \u003d objectList.getPriorLastKey();\n    } while (null !\u003d priorLastKey);\n\n    copyFileContext.lock();\n    try {\n      copyFileContext.awaitAllFinish(copiesToFinishes);\n    } catch (InterruptedException e) {\n      LOG.warn(\"interrupted when wait copies to finish\");\n    } finally {\n      copyFileContext.lock();\n    }\n\n    return copyFileContext.isCopySuccess();\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java"
    }
  }
}