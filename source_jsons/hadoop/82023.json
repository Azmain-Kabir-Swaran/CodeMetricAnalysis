{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopExecutors.java",
  "functionName": "shutdown",
  "functionId": "shutdown___executorService-ExecutorService__logger-Logger__timeout-long__unit-TimeUnit",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/concurrent/HadoopExecutors.java",
  "functionStartLine": 108,
  "functionEndLine": 142,
  "numCommitsSeen": 4,
  "timeTaken": 1688,
  "changeHistory": [
    "a139a8761054906accadf9ebbabcb16528325991",
    "d18d0859ebfc46a18fd9140b42fb95f1da96380e",
    "0b345b765370515d7222154ad5cae9b86f137a76"
  ],
  "changeHistoryShort": {
    "a139a8761054906accadf9ebbabcb16528325991": "Ybodychange",
    "d18d0859ebfc46a18fd9140b42fb95f1da96380e": "Ybodychange",
    "0b345b765370515d7222154ad5cae9b86f137a76": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a139a8761054906accadf9ebbabcb16528325991": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16708. HadoopExecutors cleanup to only log at debug.\n\nContributed by David Mollitor.\n\nChange-Id: Ib501a3ed6ed299ccd3c773c4dc086441a5728e73\n",
      "commitDate": "14/11/19 9:51 AM",
      "commitName": "a139a8761054906accadf9ebbabcb16528325991",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "22/03/19 3:29 AM",
      "commitNameOld": "d18d0859ebfc46a18fd9140b42fb95f1da96380e",
      "commitAuthorOld": "David Mollitor",
      "daysBetweenCommits": 237.31,
      "commitsBetweenForRepo": 1696,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public static void shutdown(ExecutorService executorService, Logger logger,\n       long timeout, TimeUnit unit) {\n \n     if (executorService \u003d\u003d null) {\n       return;\n     }\n \n     try {\n       executorService.shutdown();\n \n-      logger.info(\n+      logger.debug(\n           \"Gracefully shutting down executor service. Waiting max {} {}\",\n           timeout, unit);\n       if (!executorService.awaitTermination(timeout, unit)) {\n-        logger.info(\n+        logger.debug(\n             \"Executor service has not shutdown yet. Forcing. \"\n                 + \"Will wait up to an additional {} {} for shutdown\",\n             timeout, unit);\n         executorService.shutdownNow();\n       }\n       if (executorService.awaitTermination(timeout, unit)) {\n-        logger.info(\"Succesfully shutdown executor service\");\n+        logger.debug(\"Succesfully shutdown executor service\");\n       } else {\n         logger.error(\"Unable to shutdown executor service after timeout {} {}\",\n             (2 * timeout), unit);\n       }\n     } catch (InterruptedException e) {\n       logger.error(\"Interrupted while attempting to shutdown\", e);\n       executorService.shutdownNow();\n     } catch (Exception e) {\n       logger.warn(\"Exception closing executor service {}\", e.getMessage());\n       logger.debug(\"Exception closing executor service\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void shutdown(ExecutorService executorService, Logger logger,\n      long timeout, TimeUnit unit) {\n\n    if (executorService \u003d\u003d null) {\n      return;\n    }\n\n    try {\n      executorService.shutdown();\n\n      logger.debug(\n          \"Gracefully shutting down executor service. Waiting max {} {}\",\n          timeout, unit);\n      if (!executorService.awaitTermination(timeout, unit)) {\n        logger.debug(\n            \"Executor service has not shutdown yet. Forcing. \"\n                + \"Will wait up to an additional {} {} for shutdown\",\n            timeout, unit);\n        executorService.shutdownNow();\n      }\n      if (executorService.awaitTermination(timeout, unit)) {\n        logger.debug(\"Succesfully shutdown executor service\");\n      } else {\n        logger.error(\"Unable to shutdown executor service after timeout {} {}\",\n            (2 * timeout), unit);\n      }\n    } catch (InterruptedException e) {\n      logger.error(\"Interrupted while attempting to shutdown\", e);\n      executorService.shutdownNow();\n    } catch (Exception e) {\n      logger.warn(\"Exception closing executor service {}\", e.getMessage());\n      logger.debug(\"Exception closing executor service\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/concurrent/HadoopExecutors.java",
      "extendedDetails": {}
    },
    "d18d0859ebfc46a18fd9140b42fb95f1da96380e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16181. HadoopExecutors shutdown Cleanup.\n\nAuthor:    David Mollitor \u003cdavid.mollitor@cloudera.com\u003e\n",
      "commitDate": "22/03/19 3:29 AM",
      "commitName": "d18d0859ebfc46a18fd9140b42fb95f1da96380e",
      "commitAuthor": "David Mollitor",
      "commitDateOld": "07/04/18 3:59 AM",
      "commitNameOld": "0b345b765370515d7222154ad5cae9b86f137a76",
      "commitAuthorOld": "Mukul Kumar Singh",
      "daysBetweenCommits": 348.98,
      "commitsBetweenForRepo": 3212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,35 @@\n   public static void shutdown(ExecutorService executorService, Logger logger,\n       long timeout, TimeUnit unit) {\n-    try {\n-      if (executorService !\u003d null) {\n-        executorService.shutdown();\n-        try {\n-          if (!executorService.awaitTermination(timeout, unit)) {\n-            executorService.shutdownNow();\n-          }\n \n-          if (!executorService.awaitTermination(timeout, unit)) {\n-            logger.error(\"Unable to shutdown properly.\");\n-          }\n-        } catch (InterruptedException e) {\n-          logger.error(\"Error attempting to shutdown.\", e);\n-          executorService.shutdownNow();\n-        }\n+    if (executorService \u003d\u003d null) {\n+      return;\n+    }\n+\n+    try {\n+      executorService.shutdown();\n+\n+      logger.info(\n+          \"Gracefully shutting down executor service. Waiting max {} {}\",\n+          timeout, unit);\n+      if (!executorService.awaitTermination(timeout, unit)) {\n+        logger.info(\n+            \"Executor service has not shutdown yet. Forcing. \"\n+                + \"Will wait up to an additional {} {} for shutdown\",\n+            timeout, unit);\n+        executorService.shutdownNow();\n       }\n+      if (executorService.awaitTermination(timeout, unit)) {\n+        logger.info(\"Succesfully shutdown executor service\");\n+      } else {\n+        logger.error(\"Unable to shutdown executor service after timeout {} {}\",\n+            (2 * timeout), unit);\n+      }\n+    } catch (InterruptedException e) {\n+      logger.error(\"Interrupted while attempting to shutdown\", e);\n+      executorService.shutdownNow();\n     } catch (Exception e) {\n-      logger.error(\"Error during shutdown: \", e);\n+      logger.warn(\"Exception closing executor service {}\", e.getMessage());\n+      logger.debug(\"Exception closing executor service\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void shutdown(ExecutorService executorService, Logger logger,\n      long timeout, TimeUnit unit) {\n\n    if (executorService \u003d\u003d null) {\n      return;\n    }\n\n    try {\n      executorService.shutdown();\n\n      logger.info(\n          \"Gracefully shutting down executor service. Waiting max {} {}\",\n          timeout, unit);\n      if (!executorService.awaitTermination(timeout, unit)) {\n        logger.info(\n            \"Executor service has not shutdown yet. Forcing. \"\n                + \"Will wait up to an additional {} {} for shutdown\",\n            timeout, unit);\n        executorService.shutdownNow();\n      }\n      if (executorService.awaitTermination(timeout, unit)) {\n        logger.info(\"Succesfully shutdown executor service\");\n      } else {\n        logger.error(\"Unable to shutdown executor service after timeout {} {}\",\n            (2 * timeout), unit);\n      }\n    } catch (InterruptedException e) {\n      logger.error(\"Interrupted while attempting to shutdown\", e);\n      executorService.shutdownNow();\n    } catch (Exception e) {\n      logger.warn(\"Exception closing executor service {}\", e.getMessage());\n      logger.debug(\"Exception closing executor service\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/concurrent/HadoopExecutors.java",
      "extendedDetails": {}
    },
    "0b345b765370515d7222154ad5cae9b86f137a76": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15366. Add a helper shutdown routine in HadoopExecutor to ensure clean shutdown. Contributed by Shashikant Banerjee.\n",
      "commitDate": "07/04/18 3:59 AM",
      "commitName": "0b345b765370515d7222154ad5cae9b86f137a76",
      "commitAuthor": "Mukul Kumar Singh",
      "diff": "@@ -0,0 +1,23 @@\n+  public static void shutdown(ExecutorService executorService, Logger logger,\n+      long timeout, TimeUnit unit) {\n+    try {\n+      if (executorService !\u003d null) {\n+        executorService.shutdown();\n+        try {\n+          if (!executorService.awaitTermination(timeout, unit)) {\n+            executorService.shutdownNow();\n+          }\n+\n+          if (!executorService.awaitTermination(timeout, unit)) {\n+            logger.error(\"Unable to shutdown properly.\");\n+          }\n+        } catch (InterruptedException e) {\n+          logger.error(\"Error attempting to shutdown.\", e);\n+          executorService.shutdownNow();\n+        }\n+      }\n+    } catch (Exception e) {\n+      logger.error(\"Error during shutdown: \", e);\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void shutdown(ExecutorService executorService, Logger logger,\n      long timeout, TimeUnit unit) {\n    try {\n      if (executorService !\u003d null) {\n        executorService.shutdown();\n        try {\n          if (!executorService.awaitTermination(timeout, unit)) {\n            executorService.shutdownNow();\n          }\n\n          if (!executorService.awaitTermination(timeout, unit)) {\n            logger.error(\"Unable to shutdown properly.\");\n          }\n        } catch (InterruptedException e) {\n          logger.error(\"Error attempting to shutdown.\", e);\n          executorService.shutdownNow();\n        }\n      }\n    } catch (Exception e) {\n      logger.error(\"Error during shutdown: \", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/concurrent/HadoopExecutors.java"
    }
  }
}