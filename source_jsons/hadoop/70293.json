{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "quote",
  "functionId": "quote___string-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 367,
  "functionEndLine": 417,
  "numCommitsSeen": 66,
  "timeTaken": 2848,
  "changeHistory": [
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40"
  ],
  "changeHistoryShort": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,51 @@\n+    private String quote(String string) {\n+        if (string \u003d\u003d null || string.length() \u003d\u003d 0) {\n+            return \"\\\"\\\"\";\n+        }\n+\n+        char c \u003d 0;\n+        int  i;\n+        int  len \u003d string.length();\n+        StringBuilder sb \u003d new StringBuilder(len + 4);\n+        String t;\n+\n+        sb.append(\u0027\"\u0027);\n+        for (i \u003d 0; i \u003c len; i +\u003d 1) {\n+            c \u003d string.charAt(i);\n+            switch (c) {\n+            case \u0027\\\\\u0027:\n+            case \u0027\"\u0027:\n+                sb.append(\u0027\\\\\u0027);\n+                sb.append(c);\n+                break;\n+            case \u0027/\u0027:\n+                sb.append(\u0027\\\\\u0027);\n+                sb.append(c);\n+                break;\n+            case \u0027\\b\u0027:\n+                sb.append(\"\\\\b\");\n+                break;\n+            case \u0027\\t\u0027:\n+                sb.append(\"\\\\t\");\n+                break;\n+            case \u0027\\n\u0027:\n+                sb.append(\"\\\\n\");\n+                break;\n+            case \u0027\\f\u0027:\n+                sb.append(\"\\\\f\");\n+                break;\n+            case \u0027\\r\u0027:\n+                sb.append(\"\\\\r\");\n+                break;\n+            default:\n+                if (c \u003c \u0027 \u0027) {\n+                    t \u003d \"000\" + Integer.toHexString(c);\n+                    sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n+                } else {\n+                    sb.append(c);\n+                }\n+            }\n+        }\n+        sb.append(\u0027\"\u0027);\n+        return sb.toString();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private String quote(String string) {\n        if (string \u003d\u003d null || string.length() \u003d\u003d 0) {\n            return \"\\\"\\\"\";\n        }\n\n        char c \u003d 0;\n        int  i;\n        int  len \u003d string.length();\n        StringBuilder sb \u003d new StringBuilder(len + 4);\n        String t;\n\n        sb.append(\u0027\"\u0027);\n        for (i \u003d 0; i \u003c len; i +\u003d 1) {\n            c \u003d string.charAt(i);\n            switch (c) {\n            case \u0027\\\\\u0027:\n            case \u0027\"\u0027:\n                sb.append(\u0027\\\\\u0027);\n                sb.append(c);\n                break;\n            case \u0027/\u0027:\n                sb.append(\u0027\\\\\u0027);\n                sb.append(c);\n                break;\n            case \u0027\\b\u0027:\n                sb.append(\"\\\\b\");\n                break;\n            case \u0027\\t\u0027:\n                sb.append(\"\\\\t\");\n                break;\n            case \u0027\\n\u0027:\n                sb.append(\"\\\\n\");\n                break;\n            case \u0027\\f\u0027:\n                sb.append(\"\\\\f\");\n                break;\n            case \u0027\\r\u0027:\n                sb.append(\"\\\\r\");\n                break;\n            default:\n                if (c \u003c \u0027 \u0027) {\n                    t \u003d \"000\" + Integer.toHexString(c);\n                    sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n                } else {\n                    sb.append(c);\n                }\n            }\n        }\n        sb.append(\u0027\"\u0027);\n        return sb.toString();\n    }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}