{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "getNodeResourceInformation",
  "functionId": "getNodeResourceInformation___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 540,
  "functionEndLine": 556,
  "numCommitsSeen": 41,
  "timeTaken": 3966,
  "changeHistory": [
    "cbcada804d119b837ad99de71d7f44cb4629026e",
    "ca1043ab9030339d7cdd3275c3f8f4713b8bff59",
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
    "805095496dfd8e50f71b70cf20845e954d3ba47c",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a"
  ],
  "changeHistoryShort": {
    "cbcada804d119b837ad99de71d7f44cb4629026e": "Ybodychange",
    "ca1043ab9030339d7cdd3275c3f8f4713b8bff59": "Ybodychange",
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b": "Ybodychange",
    "805095496dfd8e50f71b70cf20845e954d3ba47c": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ymultichange(Yfilerename,Ybodychange)",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": "Ybodychange",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbcada804d119b837ad99de71d7f44cb4629026e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9124. Resolve contradiction in ResourceUtils: addMandatoryResources / checkMandatoryResources work differently (#1121)\n\n",
      "commitDate": "02/08/19 4:04 AM",
      "commitName": "cbcada804d119b837ad99de71d7f44cb4629026e",
      "commitAuthor": "Adam Antal",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 139.49,
      "commitsBetweenForRepo": 976,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n     if (!initializedNodeResources) {\n       synchronized (ResourceUtils.class) {\n         if (!initializedNodeResources) {\n           Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n               conf);\n-          checkMandatoryResources(nodeResources);\n+          checkSpecialResources(nodeResources);\n           addMandatoryResources(nodeResources);\n           setAllocationForMandatoryResources(nodeResources, conf);\n           readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n           initializedNodeResources \u003d true;\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (!initializedNodeResources) {\n      synchronized (ResourceUtils.class) {\n        if (!initializedNodeResources) {\n          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n              conf);\n          checkSpecialResources(nodeResources);\n          addMandatoryResources(nodeResources);\n          setAllocationForMandatoryResources(nodeResources, conf);\n          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          initializedNodeResources \u003d true;\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "ca1043ab9030339d7cdd3275c3f8f4713b8bff59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7328. ResourceUtils allows yarn.nodemanager.resource-types.memory-mb and .vcores to override yarn.nodemanager.resource.memory-mb and .cpu-vcores. (lovekesh bansal via wangda)\n\nChange-Id: Ibb1faf0beefec079dae2208986976b2f64650672\n",
      "commitDate": "16/02/18 8:28 PM",
      "commitName": "ca1043ab9030339d7cdd3275c3f8f4713b8bff59",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/18 5:35 AM",
      "commitNameOld": "06cceba1cb07340c412c4467439c16ea6812e685",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 29.62,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n     if (!initializedNodeResources) {\n       synchronized (ResourceUtils.class) {\n         if (!initializedNodeResources) {\n           Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n               conf);\n-          addMandatoryResources(nodeResources);\n           checkMandatoryResources(nodeResources);\n+          addMandatoryResources(nodeResources);\n           setAllocationForMandatoryResources(nodeResources, conf);\n           readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n           initializedNodeResources \u003d true;\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (!initializedNodeResources) {\n      synchronized (ResourceUtils.class) {\n        if (!initializedNodeResources) {\n          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n              conf);\n          checkMandatoryResources(nodeResources);\n          addMandatoryResources(nodeResources);\n          setAllocationForMandatoryResources(nodeResources, conf);\n          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          initializedNodeResources \u003d true;\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6953. Clean up ResourceUtils.setMinimumAllocationForMandatoryResources() and setMaximumAllocationForMandatoryResources()\n(Contributed by Manikandan R via Daniel Templeton)\n",
      "commitDate": "15/11/17 10:03 AM",
      "commitName": "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "13/11/17 11:03 AM",
      "commitNameOld": "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n     if (!initializedNodeResources) {\n       synchronized (ResourceUtils.class) {\n         if (!initializedNodeResources) {\n           Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n               conf);\n           addMandatoryResources(nodeResources);\n           checkMandatoryResources(nodeResources);\n-          setMinimumAllocationForMandatoryResources(nodeResources, conf);\n-          setMaximumAllocationForMandatoryResources(nodeResources, conf);\n+          setAllocationForMandatoryResources(nodeResources, conf);\n           readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n           initializedNodeResources \u003d true;\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (!initializedNodeResources) {\n      synchronized (ResourceUtils.class) {\n        if (!initializedNodeResources) {\n          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n              conf);\n          addMandatoryResources(nodeResources);\n          checkMandatoryResources(nodeResources);\n          setAllocationForMandatoryResources(nodeResources, conf);\n          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          initializedNodeResources \u003d true;\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "805095496dfd8e50f71b70cf20845e954d3ba47c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6933. [YARN-3926] ResourceUtils.DISALLOWED_NAMES check is duplicated. Contributed by Manikandan R.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "805095496dfd8e50f71b70cf20845e954d3ba47c",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "53df3eac503064b8c4cd8eb2b659567622f4d8a7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n     if (!initializedNodeResources) {\n       synchronized (ResourceUtils.class) {\n         if (!initializedNodeResources) {\n           Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n               conf);\n-          addManadtoryResources(nodeResources);\n-          checkMandatatoryResources(nodeResources);\n+          addMandatoryResources(nodeResources);\n+          checkMandatoryResources(nodeResources);\n           setMinimumAllocationForMandatoryResources(nodeResources, conf);\n           setMaximumAllocationForMandatoryResources(nodeResources, conf);\n           readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n           initializedNodeResources \u003d true;\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (!initializedNodeResources) {\n      synchronized (ResourceUtils.class) {\n        if (!initializedNodeResources) {\n          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n              conf);\n          addMandatoryResources(nodeResources);\n          checkMandatoryResources(nodeResources);\n          setMinimumAllocationForMandatoryResources(nodeResources, conf);\n          setMaximumAllocationForMandatoryResources(nodeResources, conf);\n          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          initializedNodeResources \u003d true;\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n-    if (nodeLock \u003d\u003d null) {\n+    if (!initializedNodeResources) {\n       synchronized (ResourceUtils.class) {\n-        if (nodeLock \u003d\u003d null) {\n-          synchronized (ResourceUtils.class) {\n-            Map\u003cString, ResourceInformation\u003e nodeResources \u003d\n-                initializeNodeResourceInformation(conf);\n-            addManadtoryResources(nodeResources);\n-            checkMandatatoryResources(nodeResources);\n-            readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n-            nodeLock \u003d new Object();\n-          }\n+        if (!initializedNodeResources) {\n+          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n+              conf);\n+          addManadtoryResources(nodeResources);\n+          checkMandatatoryResources(nodeResources);\n+          setMinimumAllocationForMandatoryResources(nodeResources, conf);\n+          setMaximumAllocationForMandatoryResources(nodeResources, conf);\n+          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n+          initializedNodeResources \u003d true;\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (!initializedNodeResources) {\n      synchronized (ResourceUtils.class) {\n        if (!initializedNodeResources) {\n          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n              conf);\n          addManadtoryResources(nodeResources);\n          checkMandatatoryResources(nodeResources);\n          setMinimumAllocationForMandatoryResources(nodeResources, conf);\n          setMaximumAllocationForMandatoryResources(nodeResources, conf);\n          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          initializedNodeResources \u003d true;\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n-    if (nodeLock \u003d\u003d null) {\n+    if (!initializedNodeResources) {\n       synchronized (ResourceUtils.class) {\n-        if (nodeLock \u003d\u003d null) {\n-          synchronized (ResourceUtils.class) {\n-            Map\u003cString, ResourceInformation\u003e nodeResources \u003d\n-                initializeNodeResourceInformation(conf);\n-            addManadtoryResources(nodeResources);\n-            checkMandatatoryResources(nodeResources);\n-            readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n-            nodeLock \u003d new Object();\n-          }\n+        if (!initializedNodeResources) {\n+          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n+              conf);\n+          addManadtoryResources(nodeResources);\n+          checkMandatatoryResources(nodeResources);\n+          setMinimumAllocationForMandatoryResources(nodeResources, conf);\n+          setMaximumAllocationForMandatoryResources(nodeResources, conf);\n+          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n+          initializedNodeResources \u003d true;\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (!initializedNodeResources) {\n      synchronized (ResourceUtils.class) {\n        if (!initializedNodeResources) {\n          Map\u003cString, ResourceInformation\u003e nodeResources \u003d initializeNodeResourceInformation(\n              conf);\n          addManadtoryResources(nodeResources);\n          checkMandatatoryResources(nodeResources);\n          setMinimumAllocationForMandatoryResources(nodeResources, conf);\n          setMaximumAllocationForMandatoryResources(nodeResources, conf);\n          readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          initializedNodeResources \u003d true;\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5242. Update DominantResourceCalculator to consider all resource types in calculations. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n       Configuration conf) {\n     if (nodeLock \u003d\u003d null) {\n       synchronized (ResourceUtils.class) {\n         if (nodeLock \u003d\u003d null) {\n           synchronized (ResourceUtils.class) {\n-            nodeLock \u003d new Object();\n             Map\u003cString, ResourceInformation\u003e nodeResources \u003d\n                 initializeNodeResourceInformation(conf);\n             addManadtoryResources(nodeResources);\n             checkMandatatoryResources(nodeResources);\n             readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n+            nodeLock \u003d new Object();\n           }\n         }\n       }\n     }\n     return readOnlyNodeResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (nodeLock \u003d\u003d null) {\n      synchronized (ResourceUtils.class) {\n        if (nodeLock \u003d\u003d null) {\n          synchronized (ResourceUtils.class) {\n            Map\u003cString, ResourceInformation\u003e nodeResources \u003d\n                initializeNodeResourceInformation(conf);\n            addManadtoryResources(nodeResources);\n            checkMandatatoryResources(nodeResources);\n            readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n            nodeLock \u003d new Object();\n          }\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,18 @@\n+  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n+      Configuration conf) {\n+    if (nodeLock \u003d\u003d null) {\n+      synchronized (ResourceUtils.class) {\n+        if (nodeLock \u003d\u003d null) {\n+          synchronized (ResourceUtils.class) {\n+            nodeLock \u003d new Object();\n+            Map\u003cString, ResourceInformation\u003e nodeResources \u003d\n+                initializeNodeResourceInformation(conf);\n+            addManadtoryResources(nodeResources);\n+            checkMandatatoryResources(nodeResources);\n+            readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n+          }\n+        }\n+      }\n+    }\n+    return readOnlyNodeResources;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ResourceInformation\u003e getNodeResourceInformation(\n      Configuration conf) {\n    if (nodeLock \u003d\u003d null) {\n      synchronized (ResourceUtils.class) {\n        if (nodeLock \u003d\u003d null) {\n          synchronized (ResourceUtils.class) {\n            nodeLock \u003d new Object();\n            Map\u003cString, ResourceInformation\u003e nodeResources \u003d\n                initializeNodeResourceInformation(conf);\n            addManadtoryResources(nodeResources);\n            checkMandatatoryResources(nodeResources);\n            readOnlyNodeResources \u003d Collections.unmodifiableMap(nodeResources);\n          }\n        }\n      }\n    }\n    return readOnlyNodeResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}