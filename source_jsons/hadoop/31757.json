{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowRunRowKey.java",
  "functionName": "encode",
  "functionId": "encode___rowKey-FlowRunRowKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-common/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
  "functionStartLine": 158,
  "functionEndLine": 175,
  "numCommitsSeen": 14,
  "timeTaken": 3167,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ymultichange(Ymovefromfile,Ybodychange)",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public byte[] encode(FlowRunRowKey rowKey) {\n      byte[] first \u003d\n          Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Separator\n              .encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n                  Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));\n      if (rowKey.getFlowRunId() \u003d\u003d null) {\n        return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n      } else {\n        // Note that flowRunId is a long, so we can\u0027t encode them all at the\n        // same\n        // time.\n        byte[] second \u003d\n            Bytes.toBytes(LongConverter.invertLong(rowKey.getFlowRunId()));\n        return Separator.QUALIFIERS.join(first, second);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-common/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-common/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public byte[] encode(FlowRunRowKey rowKey) {\n      byte[] first \u003d\n          Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Separator\n              .encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n                  Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));\n      if (rowKey.getFlowRunId() \u003d\u003d null) {\n        return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n      } else {\n        // Note that flowRunId is a long, so we can\u0027t encode them all at the\n        // same\n        // time.\n        byte[] second \u003d\n            Bytes.toBytes(LongConverter.invertLong(rowKey.getFlowRunId()));\n        return Separator.QUALIFIERS.join(first, second);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "3832795e3c3ea9dcf5c70f348f894882b2ace98e",
          "commitAuthorOld": "Vrushali Channapattan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  public byte[] encode(FlowRunRowKey rowKey) {\n-    byte[] first \u003d Separator.QUALIFIERS.join(\n-        Separator.encode(rowKey.getClusterId(), Separator.SPACE, Separator.TAB,\n-            Separator.QUALIFIERS),\n-        Separator.encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n-            Separator.QUALIFIERS),\n-        Separator.encode(rowKey.getFlowName(), Separator.SPACE, Separator.TAB,\n-            Separator.QUALIFIERS));\n-    if (rowKey.getFlowRunId() \u003d\u003d null) {\n-      return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n-    } else {\n-      // Note that flowRunId is a long, so we can\u0027t encode them all at the same\n-      // time.\n-      byte[] second \u003d Bytes.toBytes(TimelineStorageUtils.invertLong(\n-          rowKey.getFlowRunId()));\n-      return Separator.QUALIFIERS.join(first, second);\n-    }\n-  }\n\\ No newline at end of file\n+    public byte[] encode(FlowRunRowKey rowKey) {\n+      byte[] first \u003d\n+          Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),\n+              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Separator\n+              .encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n+                  Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),\n+              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));\n+      if (rowKey.getFlowRunId() \u003d\u003d null) {\n+        return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n+      } else {\n+        // Note that flowRunId is a long, so we can\u0027t encode them all at the\n+        // same\n+        // time.\n+        byte[] second \u003d\n+            Bytes.toBytes(LongConverter.invertLong(rowKey.getFlowRunId()));\n+        return Separator.QUALIFIERS.join(first, second);\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public byte[] encode(FlowRunRowKey rowKey) {\n      byte[] first \u003d\n          Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Separator\n              .encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n                  Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));\n      if (rowKey.getFlowRunId() \u003d\u003d null) {\n        return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n      } else {\n        // Note that flowRunId is a long, so we can\u0027t encode them all at the\n        // same\n        // time.\n        byte[] second \u003d\n            Bytes.toBytes(LongConverter.invertLong(rowKey.getFlowRunId()));\n        return Separator.QUALIFIERS.join(first, second);\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKeyConverter.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
            "oldMethodName": "encode",
            "newMethodName": "encode"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "3832795e3c3ea9dcf5c70f348f894882b2ace98e",
          "commitAuthorOld": "Vrushali Channapattan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  public byte[] encode(FlowRunRowKey rowKey) {\n-    byte[] first \u003d Separator.QUALIFIERS.join(\n-        Separator.encode(rowKey.getClusterId(), Separator.SPACE, Separator.TAB,\n-            Separator.QUALIFIERS),\n-        Separator.encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n-            Separator.QUALIFIERS),\n-        Separator.encode(rowKey.getFlowName(), Separator.SPACE, Separator.TAB,\n-            Separator.QUALIFIERS));\n-    if (rowKey.getFlowRunId() \u003d\u003d null) {\n-      return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n-    } else {\n-      // Note that flowRunId is a long, so we can\u0027t encode them all at the same\n-      // time.\n-      byte[] second \u003d Bytes.toBytes(TimelineStorageUtils.invertLong(\n-          rowKey.getFlowRunId()));\n-      return Separator.QUALIFIERS.join(first, second);\n-    }\n-  }\n\\ No newline at end of file\n+    public byte[] encode(FlowRunRowKey rowKey) {\n+      byte[] first \u003d\n+          Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),\n+              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Separator\n+              .encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n+                  Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),\n+              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));\n+      if (rowKey.getFlowRunId() \u003d\u003d null) {\n+        return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n+      } else {\n+        // Note that flowRunId is a long, so we can\u0027t encode them all at the\n+        // same\n+        // time.\n+        byte[] second \u003d\n+            Bytes.toBytes(LongConverter.invertLong(rowKey.getFlowRunId()));\n+        return Separator.QUALIFIERS.join(first, second);\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public byte[] encode(FlowRunRowKey rowKey) {\n      byte[] first \u003d\n          Separator.QUALIFIERS.join(Separator.encode(rowKey.getClusterId(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS), Separator\n              .encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n                  Separator.QUALIFIERS), Separator.encode(rowKey.getFlowName(),\n              Separator.SPACE, Separator.TAB, Separator.QUALIFIERS));\n      if (rowKey.getFlowRunId() \u003d\u003d null) {\n        return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n      } else {\n        // Note that flowRunId is a long, so we can\u0027t encode them all at the\n        // same\n        // time.\n        byte[] second \u003d\n            Bytes.toBytes(LongConverter.invertLong(rowKey.getFlowRunId()));\n        return Separator.QUALIFIERS.join(first, second);\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKey.java",
          "extendedDetails": {}
        }
      ]
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,18 @@\n+  public byte[] encode(FlowRunRowKey rowKey) {\n+    byte[] first \u003d Separator.QUALIFIERS.join(\n+        Separator.encode(rowKey.getClusterId(), Separator.SPACE, Separator.TAB,\n+            Separator.QUALIFIERS),\n+        Separator.encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n+            Separator.QUALIFIERS),\n+        Separator.encode(rowKey.getFlowName(), Separator.SPACE, Separator.TAB,\n+            Separator.QUALIFIERS));\n+    if (rowKey.getFlowRunId() \u003d\u003d null) {\n+      return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n+    } else {\n+      // Note that flowRunId is a long, so we can\u0027t encode them all at the same\n+      // time.\n+      byte[] second \u003d Bytes.toBytes(TimelineStorageUtils.invertLong(\n+          rowKey.getFlowRunId()));\n+      return Separator.QUALIFIERS.join(first, second);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public byte[] encode(FlowRunRowKey rowKey) {\n    byte[] first \u003d Separator.QUALIFIERS.join(\n        Separator.encode(rowKey.getClusterId(), Separator.SPACE, Separator.TAB,\n            Separator.QUALIFIERS),\n        Separator.encode(rowKey.getUserId(), Separator.SPACE, Separator.TAB,\n            Separator.QUALIFIERS),\n        Separator.encode(rowKey.getFlowName(), Separator.SPACE, Separator.TAB,\n            Separator.QUALIFIERS));\n    if (rowKey.getFlowRunId() \u003d\u003d null) {\n      return Separator.QUALIFIERS.join(first, Separator.EMPTY_BYTES);\n    } else {\n      // Note that flowRunId is a long, so we can\u0027t encode them all at the same\n      // time.\n      byte[] second \u003d Bytes.toBytes(TimelineStorageUtils.invertLong(\n          rowKey.getFlowRunId()));\n      return Separator.QUALIFIERS.join(first, second);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowRunRowKeyConverter.java"
    }
  }
}