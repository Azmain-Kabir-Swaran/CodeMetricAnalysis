{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedOpportunisticContainerAllocator.java",
  "functionName": "allocate",
  "functionId": "allocate___rmIdentifier-long__appContext-OpportunisticContainerContext__schedKey-SchedulerRequestKey__appAttId-ApplicationAttemptId__userName-String__blackList-Set__String____allocatedNodes-Set__String____maxAllocations-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
  "functionStartLine": 140,
  "functionEndLine": 175,
  "numCommitsSeen": 66,
  "timeTaken": 10638,
  "changeHistory": [
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
    "96e3027e46a953ca995e4b44ef50bc2a30c7e838",
    "aeadb9432f84e679f00a9a12f63675c456bc14a8",
    "b733348dde18a242e6c9074c512116a8baf1d281",
    "4a877737182808fe3392a116762ba59973a477a6",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "1597630681c784a3d59f5605b87e96197b8139d7",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "96e3027e46a953ca995e4b44ef50bc2a30c7e838": "Ymultichange(Yparameterchange,Ybodychange)",
    "aeadb9432f84e679f00a9a12f63675c456bc14a8": "Ymultichange(Yparameterchange,Ybodychange)",
    "b733348dde18a242e6c9074c512116a8baf1d281": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "4a877737182808fe3392a116762ba59973a477a6": "Ybodychange",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": "Ymultichange(Yparameterchange,Ybodychange)",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ymultichange(Yparameterchange,Ybodychange)",
    "1597630681c784a3d59f5605b87e96197b8139d7": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-9859. Refactoring of OpportunisticContainerAllocator. Contributed by Abhishek Modi.\n",
      "commitDate": "30/09/19 11:10 AM",
      "commitName": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
      "commitAuthor": "Abhishek Modi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-9859. Refactoring of OpportunisticContainerAllocator. Contributed by Abhishek Modi.\n",
          "commitDate": "30/09/19 11:10 AM",
          "commitName": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
          "commitAuthor": "Abhishek Modi",
          "commitDateOld": "30/09/19 8:06 AM",
          "commitNameOld": "98ca07ebed2ae3d7e41e5029b5bba6d089d41d43",
          "commitAuthorOld": "bshashikant",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n       Set\u003cString\u003e allocatedNodes, int maxAllocations)\n       throws YarnException {\n     Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       int remainingAllocs \u003d -1;\n       if (maxAllocations \u003e 0) {\n         int totalAllocated \u003d 0;\n         for (List\u003cAllocation\u003e allocs : containers.values()) {\n           totalAllocated +\u003d allocs.size();\n         }\n         remainingAllocs \u003d maxAllocations - totalAllocated;\n         if (remainingAllocs \u003c\u003d 0) {\n           LOG.info(\"Not allocating more containers as max allocations per AM \"\n-                  + \"heartbeat {} has reached\", maxAllocationsPerAMHeartbeat);\n+              + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\n           break;\n         }\n       }\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n           appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n           remainingAllocs);\n       ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n-            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n-            + \"allocated \u003d {}\", anyAsk.getPriority(),\n+                + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n+                + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, int maxAllocations)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      int remainingAllocs \u003d -1;\n      if (maxAllocations \u003e 0) {\n        int totalAllocated \u003d 0;\n        for (List\u003cAllocation\u003e allocs : containers.values()) {\n          totalAllocated +\u003d allocs.size();\n        }\n        remainingAllocs \u003d maxAllocations - totalAllocated;\n        if (remainingAllocs \u003c\u003d 0) {\n          LOG.info(\"Not allocating more containers as max allocations per AM \"\n              + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\n          break;\n        }\n      }\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n          remainingAllocs);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n                + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n                + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
            "oldMethodName": "allocate",
            "newMethodName": "allocate"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9859. Refactoring of OpportunisticContainerAllocator. Contributed by Abhishek Modi.\n",
          "commitDate": "30/09/19 11:10 AM",
          "commitName": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
          "commitAuthor": "Abhishek Modi",
          "commitDateOld": "30/09/19 8:06 AM",
          "commitNameOld": "98ca07ebed2ae3d7e41e5029b5bba6d089d41d43",
          "commitAuthorOld": "bshashikant",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n       Set\u003cString\u003e allocatedNodes, int maxAllocations)\n       throws YarnException {\n     Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       int remainingAllocs \u003d -1;\n       if (maxAllocations \u003e 0) {\n         int totalAllocated \u003d 0;\n         for (List\u003cAllocation\u003e allocs : containers.values()) {\n           totalAllocated +\u003d allocs.size();\n         }\n         remainingAllocs \u003d maxAllocations - totalAllocated;\n         if (remainingAllocs \u003c\u003d 0) {\n           LOG.info(\"Not allocating more containers as max allocations per AM \"\n-                  + \"heartbeat {} has reached\", maxAllocationsPerAMHeartbeat);\n+              + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\n           break;\n         }\n       }\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n           appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n           remainingAllocs);\n       ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n-            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n-            + \"allocated \u003d {}\", anyAsk.getPriority(),\n+                + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n+                + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, int maxAllocations)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      int remainingAllocs \u003d -1;\n      if (maxAllocations \u003e 0) {\n        int totalAllocated \u003d 0;\n        for (List\u003cAllocation\u003e allocs : containers.values()) {\n          totalAllocated +\u003d allocs.size();\n        }\n        remainingAllocs \u003d maxAllocations - totalAllocated;\n        if (remainingAllocs \u003c\u003d 0) {\n          LOG.info(\"Not allocating more containers as max allocations per AM \"\n              + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\n          break;\n        }\n      }\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n          remainingAllocs);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n                + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n                + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "96e3027e46a953ca995e4b44ef50bc2a30c7e838": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2889. Limit the number of opportunistic container allocated per AM heartbeat. Contributed by Abhishek Modi.\n",
      "commitDate": "22/04/19 9:49 AM",
      "commitName": "96e3027e46a953ca995e4b44ef50bc2a30c7e838",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2889. Limit the number of opportunistic container allocated per AM heartbeat. Contributed by Abhishek Modi.\n",
          "commitDate": "22/04/19 9:49 AM",
          "commitName": "96e3027e46a953ca995e4b44ef50bc2a30c7e838",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "19/04/19 9:41 AM",
          "commitNameOld": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,36 @@\n   private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n-      Set\u003cString\u003e allocatedNodes)\n+      Set\u003cString\u003e allocatedNodes, int maxAllocations)\n       throws YarnException {\n     Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n+      int remainingAllocs \u003d -1;\n+      if (maxAllocations \u003e 0) {\n+        int totalAllocated \u003d 0;\n+        for (List\u003cAllocation\u003e allocs : containers.values()) {\n+          totalAllocated +\u003d allocs.size();\n+        }\n+        remainingAllocs \u003d maxAllocations - totalAllocated;\n+        if (remainingAllocs \u003c\u003d 0) {\n+          LOG.info(\"Not allocating more containers as max allocations per AM \"\n+                  + \"heartbeat {} has reached\", maxAllocationsPerAMHeartbeat);\n+          break;\n+        }\n+      }\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n-          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);\n+          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n+          remainingAllocs);\n       ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, int maxAllocations)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      int remainingAllocs \u003d -1;\n      if (maxAllocations \u003e 0) {\n        int totalAllocated \u003d 0;\n        for (List\u003cAllocation\u003e allocs : containers.values()) {\n          totalAllocated +\u003d allocs.size();\n        }\n        remainingAllocs \u003d maxAllocations - totalAllocated;\n        if (remainingAllocs \u003c\u003d 0) {\n          LOG.info(\"Not allocating more containers as max allocations per AM \"\n                  + \"heartbeat {} has reached\", maxAllocationsPerAMHeartbeat);\n          break;\n        }\n      }\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n          remainingAllocs);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String, blackList-Set\u003cString\u003e, allocatedNodes-Set\u003cString\u003e]",
            "newValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String, blackList-Set\u003cString\u003e, allocatedNodes-Set\u003cString\u003e, maxAllocations-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2889. Limit the number of opportunistic container allocated per AM heartbeat. Contributed by Abhishek Modi.\n",
          "commitDate": "22/04/19 9:49 AM",
          "commitName": "96e3027e46a953ca995e4b44ef50bc2a30c7e838",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "19/04/19 9:41 AM",
          "commitNameOld": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,36 @@\n   private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n-      Set\u003cString\u003e allocatedNodes)\n+      Set\u003cString\u003e allocatedNodes, int maxAllocations)\n       throws YarnException {\n     Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n+      int remainingAllocs \u003d -1;\n+      if (maxAllocations \u003e 0) {\n+        int totalAllocated \u003d 0;\n+        for (List\u003cAllocation\u003e allocs : containers.values()) {\n+          totalAllocated +\u003d allocs.size();\n+        }\n+        remainingAllocs \u003d maxAllocations - totalAllocated;\n+        if (remainingAllocs \u003c\u003d 0) {\n+          LOG.info(\"Not allocating more containers as max allocations per AM \"\n+                  + \"heartbeat {} has reached\", maxAllocationsPerAMHeartbeat);\n+          break;\n+        }\n+      }\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n-          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);\n+          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n+          remainingAllocs);\n       ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, int maxAllocations)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      int remainingAllocs \u003d -1;\n      if (maxAllocations \u003e 0) {\n        int totalAllocated \u003d 0;\n        for (List\u003cAllocation\u003e allocs : containers.values()) {\n          totalAllocated +\u003d allocs.size();\n        }\n        remainingAllocs \u003d maxAllocations - totalAllocated;\n        if (remainingAllocs \u003c\u003d 0) {\n          LOG.info(\"Not allocating more containers as max allocations per AM \"\n                  + \"heartbeat {} has reached\", maxAllocationsPerAMHeartbeat);\n          break;\n        }\n      }\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk,\n          remainingAllocs);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "aeadb9432f84e679f00a9a12f63675c456bc14a8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
      "commitDate": "19/04/19 9:41 AM",
      "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
          "commitDate": "19/04/19 9:41 AM",
          "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/04/19 11:49 AM",
          "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.91,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n   private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n-      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n+      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n+      Set\u003cString\u003e allocatedNodes)\n       throws YarnException {\n     Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n-          appContext.getContainerIdGenerator(), blackList, appAttId,\n-          appContext.getNodeMap(), userName, containers, enrichedAsk);\n+          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n+          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);\n       ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String, blackList-Set\u003cString\u003e]",
            "newValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String, blackList-Set\u003cString\u003e, allocatedNodes-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
          "commitDate": "19/04/19 9:41 AM",
          "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/04/19 11:49 AM",
          "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.91,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n   private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n-      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n+      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n+      Set\u003cString\u003e allocatedNodes)\n       throws YarnException {\n     Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n-          appContext.getContainerIdGenerator(), blackList, appAttId,\n-          appContext.getNodeMap(), userName, containers, enrichedAsk);\n+          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n+          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);\n       ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, allocatedNodes,\n          appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "b733348dde18a242e6c9074c512116a8baf1d281": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
      "commitDate": "05/10/17 9:58 AM",
      "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
          "commitDate": "05/10/17 9:58 AM",
          "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "03/10/17 2:06 PM",
          "commitNameOld": "4a877737182808fe3392a116762ba59973a477a6",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,21 @@\n-  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n-      ApplicationAttemptId appAttId, String userName) throws YarnException {\n-    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk :\n+      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n+      throws YarnException {\n+    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n+    for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n-          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n-          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n+          appContext.getContainerIdGenerator(), blackList, appAttId,\n+          appContext.getNodeMap(), userName, containers, enrichedAsk);\n+      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, appAttId,\n          appContext.getNodeMap(), userName, containers, enrichedAsk);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String]",
            "newValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String, blackList-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
          "commitDate": "05/10/17 9:58 AM",
          "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "03/10/17 2:06 PM",
          "commitNameOld": "4a877737182808fe3392a116762ba59973a477a6",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,21 @@\n-  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n-      ApplicationAttemptId appAttId, String userName) throws YarnException {\n-    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk :\n+      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n+      throws YarnException {\n+    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n+    for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n-          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n-          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n+          appContext.getContainerIdGenerator(), blackList, appAttId,\n+          appContext.getNodeMap(), userName, containers, enrichedAsk);\n+      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, appAttId,\n          appContext.getNodeMap(), userName, containers, enrichedAsk);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "Map\u003cResource,List\u003cContainer\u003e\u003e",
            "newValue": "Map\u003cResource,List\u003cAllocation\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
          "commitDate": "05/10/17 9:58 AM",
          "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "03/10/17 2:06 PM",
          "commitNameOld": "4a877737182808fe3392a116762ba59973a477a6",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,21 @@\n-  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n-      ApplicationAttemptId appAttId, String userName) throws YarnException {\n-    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk :\n+      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n+      throws YarnException {\n+    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n+    for (EnrichedResourceRequest enrichedAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n-          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n-          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n+          appContext.getContainerIdGenerator(), blackList, appAttId,\n+          appContext.getNodeMap(), userName, containers, enrichedAsk);\n+      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n       if (!containers.isEmpty()) {\n         LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n             + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n             + \"allocated \u003d {}\", anyAsk.getPriority(),\n             anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n             anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName, Set\u003cString\u003e blackList)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList, appAttId,\n          appContext.getNodeMap(), userName, containers, enrichedAsk);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "4a877737182808fe3392a116762ba59973a477a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6916. Moving logging APIs over to slf4j in hadoop-yarn-server-common. Contributed by Bibin A Chundatt and Akira Ajisaka.\n",
      "commitDate": "03/10/17 2:06 PM",
      "commitName": "4a877737182808fe3392a116762ba59973a477a6",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 271.11,
      "commitsBetweenForRepo": 1688,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n   private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n       OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (ResourceRequest anyAsk :\n         appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n           appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n       if (!containers.isEmpty()) {\n-        LOG.info(\"Opportunistic allocation requested for [\"\n-            + \"priority\u003d\" + anyAsk.getPriority()\n-            + \", allocationRequestId\u003d\" + anyAsk.getAllocationRequestId()\n-            + \", num_containers\u003d\" + anyAsk.getNumContainers()\n-            + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n-            + \" allocated \u003d \" + containers.keySet());\n+        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n+            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n+            + \"allocated \u003d {}\", anyAsk.getPriority(),\n+            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n+            anyAsk.getCapability(), containers.keySet());\n       }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n            + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n            + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), containers.keySet());\n      }\n    }\n    return containers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
      "commitDate": "27/12/16 12:40 PM",
      "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "09/11/16 12:11 AM",
          "commitNameOld": "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 48.52,
          "commitsBetweenForRepo": 269,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,20 @@\n   private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n-      OpportunisticContainerContext appContext, Priority priority,\n+      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (ResourceRequest anyAsk :\n-        appContext.getOutstandingOpReqs().get(priority).values()) {\n+        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n           appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n-      LOG.info(\"Opportunistic allocation requested for [\"\n-          + \"priority\u003d\" + anyAsk.getPriority()\n-          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n-          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n-          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n+      if (!containers.isEmpty()) {\n+        LOG.info(\"Opportunistic allocation requested for [\"\n+            + \"priority\u003d\" + anyAsk.getPriority()\n+            + \", allocationRequestId\u003d\" + anyAsk.getAllocationRequestId()\n+            + \", num_containers\u003d\" + anyAsk.getNumContainers()\n+            + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n+            + \" allocated \u003d \" + containers.keySet());\n+      }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [\"\n            + \"priority\u003d\" + anyAsk.getPriority()\n            + \", allocationRequestId\u003d\" + anyAsk.getAllocationRequestId()\n            + \", num_containers\u003d\" + anyAsk.getNumContainers()\n            + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n            + \" allocated \u003d \" + containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, priority-Priority, appAttId-ApplicationAttemptId, userName-String]",
            "newValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, schedKey-SchedulerRequestKey, appAttId-ApplicationAttemptId, userName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "09/11/16 12:11 AM",
          "commitNameOld": "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 48.52,
          "commitsBetweenForRepo": 269,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,20 @@\n   private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n-      OpportunisticContainerContext appContext, Priority priority,\n+      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n       ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     for (ResourceRequest anyAsk :\n-        appContext.getOutstandingOpReqs().get(priority).values()) {\n+        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n       allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n           appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n           appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n-      LOG.info(\"Opportunistic allocation requested for [\"\n-          + \"priority\u003d\" + anyAsk.getPriority()\n-          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n-          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n-          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n+      if (!containers.isEmpty()) {\n+        LOG.info(\"Opportunistic allocation requested for [\"\n+            + \"priority\u003d\" + anyAsk.getPriority()\n+            + \", allocationRequestId\u003d\" + anyAsk.getAllocationRequestId()\n+            + \", num_containers\u003d\" + anyAsk.getNumContainers()\n+            + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n+            + \" allocated \u003d \" + containers.keySet());\n+      }\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, SchedulerRequestKey schedKey,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      if (!containers.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [\"\n            + \"priority\u003d\" + anyAsk.getPriority()\n            + \", allocationRequestId\u003d\" + anyAsk.getAllocationRequestId()\n            + \", num_containers\u003d\" + anyAsk.getNumContainers()\n            + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n            + \" allocated \u003d \" + containers.keySet());\n      }\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n-      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n-      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n-      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n-      String userName) throws YarnException {\n+  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+      OpportunisticContainerContext appContext, Priority priority,\n+      ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk : resourceAsks) {\n-      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n-          allNodes, userName, containers, anyAsk);\n+    for (ResourceRequest anyAsk :\n+        appContext.getOutstandingOpReqs().get(priority).values()) {\n+      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n+          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n+          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n       LOG.info(\"Opportunistic allocation requested for [\"\n           + \"priority\u003d\" + anyAsk.getPriority()\n           + \", num_containers\u003d\" + anyAsk.getNumContainers()\n           + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n           + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, Priority priority,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(priority).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
            "oldMethodName": "allocate",
            "newMethodName": "allocate"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n-      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n-      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n-      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n-      String userName) throws YarnException {\n+  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+      OpportunisticContainerContext appContext, Priority priority,\n+      ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk : resourceAsks) {\n-      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n-          allNodes, userName, containers, anyAsk);\n+    for (ResourceRequest anyAsk :\n+        appContext.getOutstandingOpReqs().get(priority).values()) {\n+      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n+          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n+          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n       LOG.info(\"Opportunistic allocation requested for [\"\n           + \"priority\u003d\" + anyAsk.getPriority()\n           + \", num_containers\u003d\" + anyAsk.getNumContainers()\n           + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n           + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, Priority priority,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(priority).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n-      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n-      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n-      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n-      String userName) throws YarnException {\n+  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+      OpportunisticContainerContext appContext, Priority priority,\n+      ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk : resourceAsks) {\n-      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n-          allNodes, userName, containers, anyAsk);\n+    for (ResourceRequest anyAsk :\n+        appContext.getOutstandingOpReqs().get(priority).values()) {\n+      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n+          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n+          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n       LOG.info(\"Opportunistic allocation requested for [\"\n           + \"priority\u003d\" + anyAsk.getPriority()\n           + \", num_containers\u003d\" + anyAsk.getNumContainers()\n           + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n           + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, Priority priority,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(priority).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n-      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n-      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n-      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n-      String userName) throws YarnException {\n+  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n+      OpportunisticContainerContext appContext, Priority priority,\n+      ApplicationAttemptId appAttId, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    for (ResourceRequest anyAsk : resourceAsks) {\n-      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n-          allNodes, userName, containers, anyAsk);\n+    for (ResourceRequest anyAsk :\n+        appContext.getOutstandingOpReqs().get(priority).values()) {\n+      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n+          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n+          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n       LOG.info(\"Opportunistic allocation requested for [\"\n           + \"priority\u003d\" + anyAsk.getPriority()\n           + \", num_containers\u003d\" + anyAsk.getNumContainers()\n           + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n           + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cResource, List\u003cContainer\u003e\u003e allocate(long rmIdentifier,\n      OpportunisticContainerContext appContext, Priority priority,\n      ApplicationAttemptId appAttId, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk :\n        appContext.getOutstandingOpReqs().get(priority).values()) {\n      allocateContainersInternal(rmIdentifier, appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), appContext.getBlacklist(),\n          appAttId, appContext.getNodeMap(), userName, containers, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[appParams-DistributedSchedulerParams, idCounter-ContainerIdCounter, resourceAsks-Collection\u003cResourceRequest\u003e, blacklist-Set\u003cString\u003e, appAttId-ApplicationAttemptId, allNodes-Map\u003cString,NodeId\u003e, userName-String]",
            "newValue": "[rmIdentifier-long, appContext-OpportunisticContainerContext, priority-Priority, appAttId-ApplicationAttemptId, userName-String]"
          }
        }
      ]
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "27/05/16 2:06 PM",
          "commitNameOld": "aa975bc7811fc7c52b814ad9635bff8c2d34655b",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 64.9,
          "commitsBetweenForRepo": 536,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(DistSchedulerParams appParams,\n-      ContainerIdCounter idCounter, Collection\u003cResourceRequest\u003e resourceAsks,\n-      Set\u003cString\u003e blacklist, ApplicationAttemptId appAttId,\n-      Map\u003cString, NodeId\u003e allNodes, String userName) throws YarnException {\n+  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n+      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n+      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n+      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n+      String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    Set\u003cString\u003e nodesAllocated \u003d new HashSet\u003c\u003e();\n     for (ResourceRequest anyAsk : resourceAsks) {\n       allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n-          allNodes, userName, containers, nodesAllocated, anyAsk);\n+          allNodes, userName, containers, anyAsk);\n       LOG.info(\"Opportunistic allocation requested for [\"\n           + \"priority\u003d\" + anyAsk.getPriority()\n           + \", num_containers\u003d\" + anyAsk.getNumContainers()\n           + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n           + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n      String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk : resourceAsks) {\n      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n          allNodes, userName, containers, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[appParams-DistSchedulerParams, idCounter-ContainerIdCounter, resourceAsks-Collection\u003cResourceRequest\u003e, blacklist-Set\u003cString\u003e, appAttId-ApplicationAttemptId, allNodes-Map\u003cString,NodeId\u003e, userName-String]",
            "newValue": "[appParams-DistributedSchedulerParams, idCounter-ContainerIdCounter, resourceAsks-Collection\u003cResourceRequest\u003e, blacklist-Set\u003cString\u003e, appAttId-ApplicationAttemptId, allNodes-Map\u003cString,NodeId\u003e, userName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "27/05/16 2:06 PM",
          "commitNameOld": "aa975bc7811fc7c52b814ad9635bff8c2d34655b",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 64.9,
          "commitsBetweenForRepo": 536,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(DistSchedulerParams appParams,\n-      ContainerIdCounter idCounter, Collection\u003cResourceRequest\u003e resourceAsks,\n-      Set\u003cString\u003e blacklist, ApplicationAttemptId appAttId,\n-      Map\u003cString, NodeId\u003e allNodes, String userName) throws YarnException {\n+  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n+      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n+      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n+      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n+      String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n-    Set\u003cString\u003e nodesAllocated \u003d new HashSet\u003c\u003e();\n     for (ResourceRequest anyAsk : resourceAsks) {\n       allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n-          allNodes, userName, containers, nodesAllocated, anyAsk);\n+          allNodes, userName, containers, anyAsk);\n       LOG.info(\"Opportunistic allocation requested for [\"\n           + \"priority\u003d\" + anyAsk.getPriority()\n           + \", num_containers\u003d\" + anyAsk.getNumContainers()\n           + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n           + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(\n      DistributedSchedulerParams appParams, ContainerIdCounter idCounter,\n      Collection\u003cResourceRequest\u003e resourceAsks, Set\u003cString\u003e blacklist,\n      ApplicationAttemptId appAttId, Map\u003cString, NodeId\u003e allNodes,\n      String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    for (ResourceRequest anyAsk : resourceAsks) {\n      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n          allNodes, userName, containers, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "1597630681c784a3d59f5605b87e96197b8139d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5110. Fix OpportunisticContainerAllocator to insert complete HostAddress in issued ContainerTokenIds. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "18/05/16 6:46 PM",
      "commitName": "1597630681c784a3d59f5605b87e96197b8139d7",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 23.84,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(DistSchedulerParams appParams,\n       ContainerIdCounter idCounter, Collection\u003cResourceRequest\u003e resourceAsks,\n       Set\u003cString\u003e blacklist, ApplicationAttemptId appAttId,\n       Map\u003cString, NodeId\u003e allNodes, String userName) throws YarnException {\n     Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n     Set\u003cString\u003e nodesAllocated \u003d new HashSet\u003c\u003e();\n-    int numAsks \u003d resourceAsks.size();\n     for (ResourceRequest anyAsk : resourceAsks) {\n       allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n           allNodes, userName, containers, nodesAllocated, anyAsk);\n-    }\n-    if (numAsks \u003e 0) {\n-      LOG.info(\"Opportunistic allocation requested for: \" + numAsks\n-          + \" containers; allocated \u003d \" + containers.size());\n+      LOG.info(\"Opportunistic allocation requested for [\"\n+          + \"priority\u003d\" + anyAsk.getPriority()\n+          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n+          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n+          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n     }\n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(DistSchedulerParams appParams,\n      ContainerIdCounter idCounter, Collection\u003cResourceRequest\u003e resourceAsks,\n      Set\u003cString\u003e blacklist, ApplicationAttemptId appAttId,\n      Map\u003cString, NodeId\u003e allNodes, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    Set\u003cString\u003e nodesAllocated \u003d new HashSet\u003c\u003e();\n    for (ResourceRequest anyAsk : resourceAsks) {\n      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n          allNodes, userName, containers, nodesAllocated, anyAsk);\n      LOG.info(\"Opportunistic allocation requested for [\"\n          + \"priority\u003d\" + anyAsk.getPriority()\n          + \", num_containers\u003d\" + anyAsk.getNumContainers()\n          + \", capability\u003d\" + anyAsk.getCapability() + \"]\"\n          + \" allocated \u003d \" + containers.get(anyAsk.getCapability()).size());\n    }\n    return containers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,17 @@\n+  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(DistSchedulerParams appParams,\n+      ContainerIdCounter idCounter, Collection\u003cResourceRequest\u003e resourceAsks,\n+      Set\u003cString\u003e blacklist, ApplicationAttemptId appAttId,\n+      Map\u003cString, NodeId\u003e allNodes, String userName) throws YarnException {\n+    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n+    Set\u003cString\u003e nodesAllocated \u003d new HashSet\u003c\u003e();\n+    int numAsks \u003d resourceAsks.size();\n+    for (ResourceRequest anyAsk : resourceAsks) {\n+      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n+          allNodes, userName, containers, nodesAllocated, anyAsk);\n+    }\n+    if (numAsks \u003e 0) {\n+      LOG.info(\"Opportunistic allocation requested for: \" + numAsks\n+          + \" containers; allocated \u003d \" + containers.size());\n+    }\n+    return containers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cResource, List\u003cContainer\u003e\u003e allocate(DistSchedulerParams appParams,\n      ContainerIdCounter idCounter, Collection\u003cResourceRequest\u003e resourceAsks,\n      Set\u003cString\u003e blacklist, ApplicationAttemptId appAttId,\n      Map\u003cString, NodeId\u003e allNodes, String userName) throws YarnException {\n    Map\u003cResource, List\u003cContainer\u003e\u003e containers \u003d new HashMap\u003c\u003e();\n    Set\u003cString\u003e nodesAllocated \u003d new HashSet\u003c\u003e();\n    int numAsks \u003d resourceAsks.size();\n    for (ResourceRequest anyAsk : resourceAsks) {\n      allocateOpportunisticContainers(appParams, idCounter, blacklist, appAttId,\n          allNodes, userName, containers, nodesAllocated, anyAsk);\n    }\n    if (numAsks \u003e 0) {\n      LOG.info(\"Opportunistic allocation requested for: \" + numAsks\n          + \" containers; allocated \u003d \" + containers.size());\n    }\n    return containers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java"
    }
  }
}