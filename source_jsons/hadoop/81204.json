{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DNS.java",
  "functionName": "getHosts",
  "functionId": "getHosts___strInterface-String__nameserver-String(annotations-@Nullable)__tryfallbackResolution-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
  "functionStartLine": 243,
  "functionEndLine": 272,
  "numCommitsSeen": 21,
  "timeTaken": 2195,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "df31c446bfa628bee9fab88addcfec5a13edda30",
    "d8cc362350bddf64fbb9df7fda1ee202c6e94487",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "df31c446bfa628bee9fab88addcfec5a13edda30": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "d8cc362350bddf64fbb9df7fda1ee202c6e94487": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 211.49,
      "commitsBetweenForRepo": 1578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public static String[] getHosts(String strInterface,\n                                   @Nullable String nameserver,\n                                   boolean tryfallbackResolution)\n       throws UnknownHostException {\n     final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n     final List\u003cInetAddress\u003e addresses \u003d\n         getIPsAsInetAddressList(strInterface, true);\n     for (InetAddress address : addresses) {\n       try {\n         hosts.add(reverseDns(address, nameserver));\n       } catch (NamingException ignored) {\n       }\n     }\n     if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n       for (InetAddress address : addresses) {\n         final String canonicalHostName \u003d address.getCanonicalHostName();\n         // Don\u0027t use the result if it looks like an IP address.\n         if (!InetAddresses.isInetAddress(canonicalHostName)) {\n           hosts.add(canonicalHostName);\n         }\n       }\n     }\n \n     if (hosts.isEmpty()) {\n-      LOG.warn(\"Unable to determine hostname for interface \" +\n+      LOG.warn(\"Unable to determine hostname for interface {}\",\n           strInterface);\n       hosts.add(cachedHostname);\n     }\n     return hosts.toArray(new String[hosts.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getHosts(String strInterface,\n                                  @Nullable String nameserver,\n                                  boolean tryfallbackResolution)\n      throws UnknownHostException {\n    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    final List\u003cInetAddress\u003e addresses \u003d\n        getIPsAsInetAddressList(strInterface, true);\n    for (InetAddress address : addresses) {\n      try {\n        hosts.add(reverseDns(address, nameserver));\n      } catch (NamingException ignored) {\n      }\n    }\n    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n      for (InetAddress address : addresses) {\n        final String canonicalHostName \u003d address.getCanonicalHostName();\n        // Don\u0027t use the result if it looks like an IP address.\n        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n          hosts.add(canonicalHostName);\n        }\n      }\n    }\n\n    if (hosts.isEmpty()) {\n      LOG.warn(\"Unable to determine hostname for interface {}\",\n          strInterface);\n      hosts.add(cachedHostname);\n    }\n    return hosts.toArray(new String[hosts.size()]);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {}
    },
    "df31c446bfa628bee9fab88addcfec5a13edda30": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-12437. Allow SecurityUtil to lookup alternate hostnames. (Contributed by Arpit Agarwal)\n",
      "commitDate": "24/09/15 11:41 AM",
      "commitName": "df31c446bfa628bee9fab88addcfec5a13edda30",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12437. Allow SecurityUtil to lookup alternate hostnames. (Contributed by Arpit Agarwal)\n",
          "commitDate": "24/09/15 11:41 AM",
          "commitName": "df31c446bfa628bee9fab88addcfec5a13edda30",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "07/03/13 3:50 PM",
          "commitNameOld": "21a1c8acbafc8364a204f23369a3adbefdff1f3e",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 930.79,
          "commitsBetweenForRepo": 6823,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,30 @@\n-  public static String[] getHosts(String strInterface, String nameserver)\n-    throws UnknownHostException {\n-    String[] ips \u003d getIPs(strInterface);\n-    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n-    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++) {\n+  public static String[] getHosts(String strInterface,\n+                                  @Nullable String nameserver,\n+                                  boolean tryfallbackResolution)\n+      throws UnknownHostException {\n+    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n+    final List\u003cInetAddress\u003e addresses \u003d\n+        getIPsAsInetAddressList(strInterface, true);\n+    for (InetAddress address : addresses) {\n       try {\n-        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n-                             nameserver));\n-      } catch (UnknownHostException ignored) {\n+        hosts.add(reverseDns(address, nameserver));\n       } catch (NamingException ignored) {\n       }\n     }\n-    if (hosts.isEmpty()) {\n-      LOG.warn(\"Unable to determine hostname for interface \" + strInterface);\n-      return new String[] { cachedHostname };\n-    } else {\n-      return hosts.toArray(new String[hosts.size()]);\n+    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n+      for (InetAddress address : addresses) {\n+        final String canonicalHostName \u003d address.getCanonicalHostName();\n+        // Don\u0027t use the result if it looks like an IP address.\n+        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n+          hosts.add(canonicalHostName);\n+        }\n+      }\n     }\n+\n+    if (hosts.isEmpty()) {\n+      LOG.warn(\"Unable to determine hostname for interface \" +\n+          strInterface);\n+      hosts.add(cachedHostname);\n+    }\n+    return hosts.toArray(new String[hosts.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String[] getHosts(String strInterface,\n                                  @Nullable String nameserver,\n                                  boolean tryfallbackResolution)\n      throws UnknownHostException {\n    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    final List\u003cInetAddress\u003e addresses \u003d\n        getIPsAsInetAddressList(strInterface, true);\n    for (InetAddress address : addresses) {\n      try {\n        hosts.add(reverseDns(address, nameserver));\n      } catch (NamingException ignored) {\n      }\n    }\n    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n      for (InetAddress address : addresses) {\n        final String canonicalHostName \u003d address.getCanonicalHostName();\n        // Don\u0027t use the result if it looks like an IP address.\n        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n          hosts.add(canonicalHostName);\n        }\n      }\n    }\n\n    if (hosts.isEmpty()) {\n      LOG.warn(\"Unable to determine hostname for interface \" +\n          strInterface);\n      hosts.add(cachedHostname);\n    }\n    return hosts.toArray(new String[hosts.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
          "extendedDetails": {
            "oldValue": "[strInterface-String, nameserver-String]",
            "newValue": "[strInterface-String, nameserver-String(annotations-@Nullable), tryfallbackResolution-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12437. Allow SecurityUtil to lookup alternate hostnames. (Contributed by Arpit Agarwal)\n",
          "commitDate": "24/09/15 11:41 AM",
          "commitName": "df31c446bfa628bee9fab88addcfec5a13edda30",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "07/03/13 3:50 PM",
          "commitNameOld": "21a1c8acbafc8364a204f23369a3adbefdff1f3e",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 930.79,
          "commitsBetweenForRepo": 6823,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,30 @@\n-  public static String[] getHosts(String strInterface, String nameserver)\n-    throws UnknownHostException {\n-    String[] ips \u003d getIPs(strInterface);\n-    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n-    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++) {\n+  public static String[] getHosts(String strInterface,\n+                                  @Nullable String nameserver,\n+                                  boolean tryfallbackResolution)\n+      throws UnknownHostException {\n+    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n+    final List\u003cInetAddress\u003e addresses \u003d\n+        getIPsAsInetAddressList(strInterface, true);\n+    for (InetAddress address : addresses) {\n       try {\n-        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n-                             nameserver));\n-      } catch (UnknownHostException ignored) {\n+        hosts.add(reverseDns(address, nameserver));\n       } catch (NamingException ignored) {\n       }\n     }\n-    if (hosts.isEmpty()) {\n-      LOG.warn(\"Unable to determine hostname for interface \" + strInterface);\n-      return new String[] { cachedHostname };\n-    } else {\n-      return hosts.toArray(new String[hosts.size()]);\n+    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n+      for (InetAddress address : addresses) {\n+        final String canonicalHostName \u003d address.getCanonicalHostName();\n+        // Don\u0027t use the result if it looks like an IP address.\n+        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n+          hosts.add(canonicalHostName);\n+        }\n+      }\n     }\n+\n+    if (hosts.isEmpty()) {\n+      LOG.warn(\"Unable to determine hostname for interface \" +\n+          strInterface);\n+      hosts.add(cachedHostname);\n+    }\n+    return hosts.toArray(new String[hosts.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String[] getHosts(String strInterface,\n                                  @Nullable String nameserver,\n                                  boolean tryfallbackResolution)\n      throws UnknownHostException {\n    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    final List\u003cInetAddress\u003e addresses \u003d\n        getIPsAsInetAddressList(strInterface, true);\n    for (InetAddress address : addresses) {\n      try {\n        hosts.add(reverseDns(address, nameserver));\n      } catch (NamingException ignored) {\n      }\n    }\n    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n      for (InetAddress address : addresses) {\n        final String canonicalHostName \u003d address.getCanonicalHostName();\n        // Don\u0027t use the result if it looks like an IP address.\n        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n          hosts.add(canonicalHostName);\n        }\n      }\n    }\n\n    if (hosts.isEmpty()) {\n      LOG.warn(\"Unable to determine hostname for interface \" +\n          strInterface);\n      hosts.add(cachedHostname);\n    }\n    return hosts.toArray(new String[hosts.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-12437. Allow SecurityUtil to lookup alternate hostnames. (Contributed by Arpit Agarwal)\n",
          "commitDate": "24/09/15 11:41 AM",
          "commitName": "df31c446bfa628bee9fab88addcfec5a13edda30",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "07/03/13 3:50 PM",
          "commitNameOld": "21a1c8acbafc8364a204f23369a3adbefdff1f3e",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 930.79,
          "commitsBetweenForRepo": 6823,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,30 @@\n-  public static String[] getHosts(String strInterface, String nameserver)\n-    throws UnknownHostException {\n-    String[] ips \u003d getIPs(strInterface);\n-    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n-    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++) {\n+  public static String[] getHosts(String strInterface,\n+                                  @Nullable String nameserver,\n+                                  boolean tryfallbackResolution)\n+      throws UnknownHostException {\n+    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n+    final List\u003cInetAddress\u003e addresses \u003d\n+        getIPsAsInetAddressList(strInterface, true);\n+    for (InetAddress address : addresses) {\n       try {\n-        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n-                             nameserver));\n-      } catch (UnknownHostException ignored) {\n+        hosts.add(reverseDns(address, nameserver));\n       } catch (NamingException ignored) {\n       }\n     }\n-    if (hosts.isEmpty()) {\n-      LOG.warn(\"Unable to determine hostname for interface \" + strInterface);\n-      return new String[] { cachedHostname };\n-    } else {\n-      return hosts.toArray(new String[hosts.size()]);\n+    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n+      for (InetAddress address : addresses) {\n+        final String canonicalHostName \u003d address.getCanonicalHostName();\n+        // Don\u0027t use the result if it looks like an IP address.\n+        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n+          hosts.add(canonicalHostName);\n+        }\n+      }\n     }\n+\n+    if (hosts.isEmpty()) {\n+      LOG.warn(\"Unable to determine hostname for interface \" +\n+          strInterface);\n+      hosts.add(cachedHostname);\n+    }\n+    return hosts.toArray(new String[hosts.size()]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String[] getHosts(String strInterface,\n                                  @Nullable String nameserver,\n                                  boolean tryfallbackResolution)\n      throws UnknownHostException {\n    final List\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    final List\u003cInetAddress\u003e addresses \u003d\n        getIPsAsInetAddressList(strInterface, true);\n    for (InetAddress address : addresses) {\n      try {\n        hosts.add(reverseDns(address, nameserver));\n      } catch (NamingException ignored) {\n      }\n    }\n    if (hosts.isEmpty() \u0026\u0026 tryfallbackResolution) {\n      for (InetAddress address : addresses) {\n        final String canonicalHostName \u003d address.getCanonicalHostName();\n        // Don\u0027t use the result if it looks like an IP address.\n        if (!InetAddresses.isInetAddress(canonicalHostName)) {\n          hosts.add(canonicalHostName);\n        }\n      }\n    }\n\n    if (hosts.isEmpty()) {\n      LOG.warn(\"Unable to determine hostname for interface \" +\n          strInterface);\n      hosts.add(cachedHostname);\n    }\n    return hosts.toArray(new String[hosts.size()]);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
          "extendedDetails": {
            "oldValue": "[strInterface-String, nameserver-String]",
            "newValue": "[strInterface-String, nameserver-String(annotations-@Nullable), tryfallbackResolution-boolean]"
          }
        }
      ]
    },
    "d8cc362350bddf64fbb9df7fda1ee202c6e94487": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8154. DNS#getIPs shouldn\u0027t silently return the local host IP for bogus interface names. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1298696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/12 7:51 PM",
      "commitName": "d8cc362350bddf64fbb9df7fda1ee202c6e94487",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 197.15,
      "commitsBetweenForRepo": 1417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   public static String[] getHosts(String strInterface, String nameserver)\n     throws UnknownHostException {\n     String[] ips \u003d getIPs(strInterface);\n     Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n-    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++)\n+    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++) {\n       try {\n         hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n                              nameserver));\n       } catch (UnknownHostException ignored) {\n       } catch (NamingException ignored) {\n       }\n-\n+    }\n     if (hosts.isEmpty()) {\n+      LOG.warn(\"Unable to determine hostname for interface \" + strInterface);\n       return new String[] { cachedHostname };\n     } else {\n       return hosts.toArray(new String[hosts.size()]);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getHosts(String strInterface, String nameserver)\n    throws UnknownHostException {\n    String[] ips \u003d getIPs(strInterface);\n    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++) {\n      try {\n        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n                             nameserver));\n      } catch (UnknownHostException ignored) {\n      } catch (NamingException ignored) {\n      }\n    }\n    if (hosts.isEmpty()) {\n      LOG.warn(\"Unable to determine hostname for interface \" + strInterface);\n      return new String[] { cachedHostname };\n    } else {\n      return hosts.toArray(new String[hosts.size()]);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String[] getHosts(String strInterface, String nameserver)\n    throws UnknownHostException {\n    String[] ips \u003d getIPs(strInterface);\n    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++)\n      try {\n        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n                             nameserver));\n      } catch (UnknownHostException ignored) {\n      } catch (NamingException ignored) {\n      }\n\n    if (hosts.isEmpty()) {\n      return new String[] { cachedHostname };\n    } else {\n      return hosts.toArray(new String[hosts.size()]);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String[] getHosts(String strInterface, String nameserver)\n    throws UnknownHostException {\n    String[] ips \u003d getIPs(strInterface);\n    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++)\n      try {\n        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n                             nameserver));\n      } catch (UnknownHostException ignored) {\n      } catch (NamingException ignored) {\n      }\n\n    if (hosts.isEmpty()) {\n      return new String[] { cachedHostname };\n    } else {\n      return hosts.toArray(new String[hosts.size()]);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/DNS.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String[] getHosts(String strInterface, String nameserver)\n    throws UnknownHostException {\n    String[] ips \u003d getIPs(strInterface);\n    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++)\n      try {\n        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n                             nameserver));\n      } catch (UnknownHostException ignored) {\n      } catch (NamingException ignored) {\n      }\n\n    if (hosts.isEmpty()) {\n      return new String[] { cachedHostname };\n    } else {\n      return hosts.toArray(new String[hosts.size()]);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/DNS.java",
        "newPath": "common/src/java/org/apache/hadoop/net/DNS.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,18 @@\n+  public static String[] getHosts(String strInterface, String nameserver)\n+    throws UnknownHostException {\n+    String[] ips \u003d getIPs(strInterface);\n+    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n+    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++)\n+      try {\n+        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n+                             nameserver));\n+      } catch (UnknownHostException ignored) {\n+      } catch (NamingException ignored) {\n+      }\n+\n+    if (hosts.isEmpty()) {\n+      return new String[] { cachedHostname };\n+    } else {\n+      return hosts.toArray(new String[hosts.size()]);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getHosts(String strInterface, String nameserver)\n    throws UnknownHostException {\n    String[] ips \u003d getIPs(strInterface);\n    Vector\u003cString\u003e hosts \u003d new Vector\u003cString\u003e();\n    for (int ctr \u003d 0; ctr \u003c ips.length; ctr++)\n      try {\n        hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n                             nameserver));\n      } catch (UnknownHostException ignored) {\n      } catch (NamingException ignored) {\n      }\n\n    if (hosts.isEmpty()) {\n      return new String[] { cachedHostname };\n    } else {\n      return hosts.toArray(new String[hosts.size()]);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/net/DNS.java"
    }
  }
}