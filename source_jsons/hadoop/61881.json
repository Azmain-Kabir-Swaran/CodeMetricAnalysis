{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineEntityV2Converter.java",
  "functionName": "convertToApplicationAttemptReport",
  "functionId": "convertToApplicationAttemptReport___entity-TimelineEntity",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/timeline/TimelineEntityV2Converter.java",
  "functionStartLine": 166,
  "functionEndLine": 251,
  "numCommitsSeen": 4,
  "timeTaken": 784,
  "changeHistory": [
    "ee3355be3cd1cd956296a1b79b264177ff139ce6"
  ],
  "changeHistoryShort": {
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8303. YarnClient should contact TimelineReader for application/attempt/container report.\n",
      "commitDate": "16/11/18 4:28 AM",
      "commitName": "ee3355be3cd1cd956296a1b79b264177ff139ce6",
      "commitAuthor": "Rohith Sharma K S",
      "diff": "@@ -0,0 +1,86 @@\n+  public static ApplicationAttemptReport convertToApplicationAttemptReport(\n+      TimelineEntity entity) {\n+    String host \u003d null;\n+    int rpcPort \u003d -1;\n+    ContainerId amContainerId \u003d null;\n+    String trackingUrl \u003d null;\n+    String originalTrackingUrl \u003d null;\n+    String diagnosticsInfo \u003d null;\n+    YarnApplicationAttemptState state \u003d null;\n+    Map\u003cString, Object\u003e entityInfo \u003d entity.getInfo();\n+    long startTime \u003d 0;\n+    long finishTime \u003d 0;\n+\n+    if (entityInfo !\u003d null) {\n+      if (entityInfo.containsKey(AppAttemptMetricsConstants.HOST_INFO)) {\n+        host \u003d\n+            entityInfo.get(AppAttemptMetricsConstants.HOST_INFO)\n+                .toString();\n+      }\n+      if (entityInfo\n+          .containsKey(AppAttemptMetricsConstants.RPC_PORT_INFO)) {\n+        rpcPort \u003d (Integer) entityInfo.get(\n+            AppAttemptMetricsConstants.RPC_PORT_INFO);\n+      }\n+      if (entityInfo\n+          .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n+        amContainerId \u003d\n+            ContainerId.fromString(entityInfo.get(\n+                AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n+                .toString());\n+      }\n+      if (entityInfo\n+          .containsKey(AppAttemptMetricsConstants.TRACKING_URL_INFO)) {\n+        trackingUrl \u003d\n+            entityInfo.get(\n+                AppAttemptMetricsConstants.TRACKING_URL_INFO)\n+                .toString();\n+      }\n+      if (entityInfo\n+          .containsKey(\n+              AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)) {\n+        originalTrackingUrl \u003d\n+            entityInfo\n+                .get(\n+                    AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)\n+                .toString();\n+      }\n+      if (entityInfo\n+          .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO)) {\n+        diagnosticsInfo \u003d\n+            entityInfo.get(\n+                AppAttemptMetricsConstants.DIAGNOSTICS_INFO)\n+                .toString();\n+      }\n+      if (entityInfo\n+          .containsKey(AppAttemptMetricsConstants.STATE_INFO)) {\n+        state \u003d\n+            YarnApplicationAttemptState.valueOf(entityInfo.get(\n+                AppAttemptMetricsConstants.STATE_INFO)\n+                .toString());\n+      }\n+      if (entityInfo\n+          .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n+        amContainerId \u003d\n+            ContainerId.fromString(entityInfo.get(\n+                AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n+                .toString());\n+      }\n+    }\n+    NavigableSet\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n+    if (events !\u003d null) {\n+      for (TimelineEvent event : events) {\n+        if (event.getId().equals(\n+            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n+          startTime \u003d event.getTimestamp();\n+        } else if (event.getId().equals(\n+            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n+          finishTime \u003d event.getTimestamp();\n+        }\n+      }\n+    }\n+    return ApplicationAttemptReport.newInstance(\n+        ApplicationAttemptId.fromString(entity.getId()),\n+        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n+        state, amContainerId, startTime, finishTime);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ApplicationAttemptReport convertToApplicationAttemptReport(\n      TimelineEntity entity) {\n    String host \u003d null;\n    int rpcPort \u003d -1;\n    ContainerId amContainerId \u003d null;\n    String trackingUrl \u003d null;\n    String originalTrackingUrl \u003d null;\n    String diagnosticsInfo \u003d null;\n    YarnApplicationAttemptState state \u003d null;\n    Map\u003cString, Object\u003e entityInfo \u003d entity.getInfo();\n    long startTime \u003d 0;\n    long finishTime \u003d 0;\n\n    if (entityInfo !\u003d null) {\n      if (entityInfo.containsKey(AppAttemptMetricsConstants.HOST_INFO)) {\n        host \u003d\n            entityInfo.get(AppAttemptMetricsConstants.HOST_INFO)\n                .toString();\n      }\n      if (entityInfo\n          .containsKey(AppAttemptMetricsConstants.RPC_PORT_INFO)) {\n        rpcPort \u003d (Integer) entityInfo.get(\n            AppAttemptMetricsConstants.RPC_PORT_INFO);\n      }\n      if (entityInfo\n          .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n        amContainerId \u003d\n            ContainerId.fromString(entityInfo.get(\n                AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n                .toString());\n      }\n      if (entityInfo\n          .containsKey(AppAttemptMetricsConstants.TRACKING_URL_INFO)) {\n        trackingUrl \u003d\n            entityInfo.get(\n                AppAttemptMetricsConstants.TRACKING_URL_INFO)\n                .toString();\n      }\n      if (entityInfo\n          .containsKey(\n              AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)) {\n        originalTrackingUrl \u003d\n            entityInfo\n                .get(\n                    AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)\n                .toString();\n      }\n      if (entityInfo\n          .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO)) {\n        diagnosticsInfo \u003d\n            entityInfo.get(\n                AppAttemptMetricsConstants.DIAGNOSTICS_INFO)\n                .toString();\n      }\n      if (entityInfo\n          .containsKey(AppAttemptMetricsConstants.STATE_INFO)) {\n        state \u003d\n            YarnApplicationAttemptState.valueOf(entityInfo.get(\n                AppAttemptMetricsConstants.STATE_INFO)\n                .toString());\n      }\n      if (entityInfo\n          .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n        amContainerId \u003d\n            ContainerId.fromString(entityInfo.get(\n                AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n                .toString());\n      }\n    }\n    NavigableSet\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event.getId().equals(\n            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n          startTime \u003d event.getTimestamp();\n        } else if (event.getId().equals(\n            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n          finishTime \u003d event.getTimestamp();\n        }\n      }\n    }\n    return ApplicationAttemptReport.newInstance(\n        ApplicationAttemptId.fromString(entity.getId()),\n        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n        state, amContainerId, startTime, finishTime);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/timeline/TimelineEntityV2Converter.java"
    }
  }
}