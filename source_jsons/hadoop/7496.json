{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNode.java",
  "functionName": "getProtocolVersion",
  "functionId": "getProtocolVersion___protocol-String__clientVersion-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
  "functionStartLine": 358,
  "functionEndLine": 379,
  "numCommitsSeen": 210,
  "timeTaken": 4094,
  "changeHistory": [
    "55302ccfba199ddf070119be30df06afd2511e05",
    "d00605f8f0214ed8e2304db8688e140f0a1d62d8"
  ],
  "changeHistoryShort": {
    "55302ccfba199ddf070119be30df06afd2511e05": "Ybodychange",
    "d00605f8f0214ed8e2304db8688e140f0a1d62d8": "Ybodychange"
  },
  "changeHistoryDetails": {
    "55302ccfba199ddf070119be30df06afd2511e05": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6956. Allow dynamically changing the tracing level in Hadoop servers (cmccabe)\n",
      "commitDate": "26/09/14 10:30 AM",
      "commitName": "55302ccfba199ddf070119be30df06afd2511e05",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "23/09/14 2:10 PM",
      "commitNameOld": "f48686a1ad81823000534665a76264bba51182f4",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.85,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   public long getProtocolVersion(String protocol, \n                                  long clientVersion) throws IOException {\n     if (protocol.equals(ClientProtocol.class.getName())) {\n       return ClientProtocol.versionID; \n     } else if (protocol.equals(DatanodeProtocol.class.getName())){\n       return DatanodeProtocol.versionID;\n     } else if (protocol.equals(NamenodeProtocol.class.getName())){\n       return NamenodeProtocol.versionID;\n     } else if (protocol.equals(RefreshAuthorizationPolicyProtocol.class.getName())){\n       return RefreshAuthorizationPolicyProtocol.versionID;\n     } else if (protocol.equals(RefreshUserMappingsProtocol.class.getName())){\n       return RefreshUserMappingsProtocol.versionID;\n     } else if (protocol.equals(RefreshCallQueueProtocol.class.getName())) {\n       return RefreshCallQueueProtocol.versionID;\n     } else if (protocol.equals(GetUserMappingsProtocol.class.getName())){\n       return GetUserMappingsProtocol.versionID;\n+    } else if (protocol.equals(TraceAdminProtocol.class.getName())){\n+      return TraceAdminProtocol.versionID;\n     } else {\n       throw new IOException(\"Unknown protocol to name node: \" + protocol);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getProtocolVersion(String protocol, \n                                 long clientVersion) throws IOException {\n    if (protocol.equals(ClientProtocol.class.getName())) {\n      return ClientProtocol.versionID; \n    } else if (protocol.equals(DatanodeProtocol.class.getName())){\n      return DatanodeProtocol.versionID;\n    } else if (protocol.equals(NamenodeProtocol.class.getName())){\n      return NamenodeProtocol.versionID;\n    } else if (protocol.equals(RefreshAuthorizationPolicyProtocol.class.getName())){\n      return RefreshAuthorizationPolicyProtocol.versionID;\n    } else if (protocol.equals(RefreshUserMappingsProtocol.class.getName())){\n      return RefreshUserMappingsProtocol.versionID;\n    } else if (protocol.equals(RefreshCallQueueProtocol.class.getName())) {\n      return RefreshCallQueueProtocol.versionID;\n    } else if (protocol.equals(GetUserMappingsProtocol.class.getName())){\n      return GetUserMappingsProtocol.versionID;\n    } else if (protocol.equals(TraceAdminProtocol.class.getName())){\n      return TraceAdminProtocol.versionID;\n    } else {\n      throw new IOException(\"Unknown protocol to name node: \" + protocol);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "d00605f8f0214ed8e2304db8688e140f0a1d62d8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10285. Admin interface to swap callqueue at runtime. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573052 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/14 11:48 AM",
      "commitName": "d00605f8f0214ed8e2304db8688e140f0a1d62d8",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/02/14 10:07 AM",
      "commitNameOld": "72f63c8957880ed5e432fef0a1612b8cb44bd1e4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 14.07,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   public long getProtocolVersion(String protocol, \n                                  long clientVersion) throws IOException {\n     if (protocol.equals(ClientProtocol.class.getName())) {\n       return ClientProtocol.versionID; \n     } else if (protocol.equals(DatanodeProtocol.class.getName())){\n       return DatanodeProtocol.versionID;\n     } else if (protocol.equals(NamenodeProtocol.class.getName())){\n       return NamenodeProtocol.versionID;\n     } else if (protocol.equals(RefreshAuthorizationPolicyProtocol.class.getName())){\n       return RefreshAuthorizationPolicyProtocol.versionID;\n     } else if (protocol.equals(RefreshUserMappingsProtocol.class.getName())){\n       return RefreshUserMappingsProtocol.versionID;\n+    } else if (protocol.equals(RefreshCallQueueProtocol.class.getName())) {\n+      return RefreshCallQueueProtocol.versionID;\n     } else if (protocol.equals(GetUserMappingsProtocol.class.getName())){\n       return GetUserMappingsProtocol.versionID;\n     } else {\n       throw new IOException(\"Unknown protocol to name node: \" + protocol);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getProtocolVersion(String protocol, \n                                 long clientVersion) throws IOException {\n    if (protocol.equals(ClientProtocol.class.getName())) {\n      return ClientProtocol.versionID; \n    } else if (protocol.equals(DatanodeProtocol.class.getName())){\n      return DatanodeProtocol.versionID;\n    } else if (protocol.equals(NamenodeProtocol.class.getName())){\n      return NamenodeProtocol.versionID;\n    } else if (protocol.equals(RefreshAuthorizationPolicyProtocol.class.getName())){\n      return RefreshAuthorizationPolicyProtocol.versionID;\n    } else if (protocol.equals(RefreshUserMappingsProtocol.class.getName())){\n      return RefreshUserMappingsProtocol.versionID;\n    } else if (protocol.equals(RefreshCallQueueProtocol.class.getName())) {\n      return RefreshCallQueueProtocol.versionID;\n    } else if (protocol.equals(GetUserMappingsProtocol.class.getName())){\n      return GetUserMappingsProtocol.versionID;\n    } else {\n      throw new IOException(\"Unknown protocol to name node: \" + protocol);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    }
  }
}