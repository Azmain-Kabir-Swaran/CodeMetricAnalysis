{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "mergeAllocateResponses",
  "functionId": "mergeAllocateResponses___mergedResponse-AllocateResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 1334,
  "functionEndLine": 1352,
  "numCommitsSeen": 32,
  "timeTaken": 3597,
  "changeHistory": [
    "3090922805699b8374a359e92323884a4177dc4e",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f"
  ],
  "changeHistoryShort": {
    "3090922805699b8374a359e92323884a4177dc4e": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": "Ybodychange",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Ybodychange",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,19 @@\n-  private AllocateResponse mergeAllocateResponses(\n-      AllocateResponse homeResponse) {\n-    // Timing issue, we need to remove the completed and then save the new ones.\n-    removeFinishedContainersFromCache(\n-        homeResponse.getCompletedContainersStatuses());\n-    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n-        this.homeSubClusterId);\n-\n+  private void mergeAllocateResponses(AllocateResponse mergedResponse) {\n     synchronized (this.asyncResponseSink) {\n-      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n-          .entrySet()) {\n+      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry :\n+          this.asyncResponseSink.entrySet()) {\n         SubClusterId subClusterId \u003d entry.getKey();\n         List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n         if (responses.size() \u003e 0) {\n           for (AllocateResponse response : responses) {\n             removeFinishedContainersFromCache(\n                 response.getCompletedContainersStatuses());\n             cacheAllocatedContainers(response.getAllocatedContainers(),\n                 subClusterId);\n-            mergeAllocateResponse(homeResponse, response, subClusterId);\n+            mergeAllocateResponse(mergedResponse, response, subClusterId);\n           }\n           responses.clear();\n         }\n       }\n     }\n-\n-    return homeResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergeAllocateResponses(AllocateResponse mergedResponse) {\n    synchronized (this.asyncResponseSink) {\n      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry :\n          this.asyncResponseSink.entrySet()) {\n        SubClusterId subClusterId \u003d entry.getKey();\n        List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n        if (responses.size() \u003e 0) {\n          for (AllocateResponse response : responses) {\n            removeFinishedContainersFromCache(\n                response.getCompletedContainersStatuses());\n            cacheAllocatedContainers(response.getAllocatedContainers(),\n                subClusterId);\n            mergeAllocateResponse(mergedResponse, response, subClusterId);\n          }\n          responses.clear();\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {
            "oldValue": "[homeResponse-AllocateResponse]",
            "newValue": "[mergedResponse-AllocateResponse]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,19 @@\n-  private AllocateResponse mergeAllocateResponses(\n-      AllocateResponse homeResponse) {\n-    // Timing issue, we need to remove the completed and then save the new ones.\n-    removeFinishedContainersFromCache(\n-        homeResponse.getCompletedContainersStatuses());\n-    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n-        this.homeSubClusterId);\n-\n+  private void mergeAllocateResponses(AllocateResponse mergedResponse) {\n     synchronized (this.asyncResponseSink) {\n-      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n-          .entrySet()) {\n+      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry :\n+          this.asyncResponseSink.entrySet()) {\n         SubClusterId subClusterId \u003d entry.getKey();\n         List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n         if (responses.size() \u003e 0) {\n           for (AllocateResponse response : responses) {\n             removeFinishedContainersFromCache(\n                 response.getCompletedContainersStatuses());\n             cacheAllocatedContainers(response.getAllocatedContainers(),\n                 subClusterId);\n-            mergeAllocateResponse(homeResponse, response, subClusterId);\n+            mergeAllocateResponse(mergedResponse, response, subClusterId);\n           }\n           responses.clear();\n         }\n       }\n     }\n-\n-    return homeResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergeAllocateResponses(AllocateResponse mergedResponse) {\n    synchronized (this.asyncResponseSink) {\n      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry :\n          this.asyncResponseSink.entrySet()) {\n        SubClusterId subClusterId \u003d entry.getKey();\n        List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n        if (responses.size() \u003e 0) {\n          for (AllocateResponse response : responses) {\n            removeFinishedContainersFromCache(\n                response.getCompletedContainersStatuses());\n            cacheAllocatedContainers(response.getAllocatedContainers(),\n                subClusterId);\n            mergeAllocateResponse(mergedResponse, response, subClusterId);\n          }\n          responses.clear();\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {
            "oldValue": "AllocateResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,19 @@\n-  private AllocateResponse mergeAllocateResponses(\n-      AllocateResponse homeResponse) {\n-    // Timing issue, we need to remove the completed and then save the new ones.\n-    removeFinishedContainersFromCache(\n-        homeResponse.getCompletedContainersStatuses());\n-    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n-        this.homeSubClusterId);\n-\n+  private void mergeAllocateResponses(AllocateResponse mergedResponse) {\n     synchronized (this.asyncResponseSink) {\n-      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n-          .entrySet()) {\n+      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry :\n+          this.asyncResponseSink.entrySet()) {\n         SubClusterId subClusterId \u003d entry.getKey();\n         List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n         if (responses.size() \u003e 0) {\n           for (AllocateResponse response : responses) {\n             removeFinishedContainersFromCache(\n                 response.getCompletedContainersStatuses());\n             cacheAllocatedContainers(response.getAllocatedContainers(),\n                 subClusterId);\n-            mergeAllocateResponse(homeResponse, response, subClusterId);\n+            mergeAllocateResponse(mergedResponse, response, subClusterId);\n           }\n           responses.clear();\n         }\n       }\n     }\n-\n-    return homeResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergeAllocateResponses(AllocateResponse mergedResponse) {\n    synchronized (this.asyncResponseSink) {\n      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry :\n          this.asyncResponseSink.entrySet()) {\n        SubClusterId subClusterId \u003d entry.getKey();\n        List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n        if (responses.size() \u003e 0) {\n          for (AllocateResponse response : responses) {\n            removeFinishedContainersFromCache(\n                response.getCompletedContainersStatuses());\n            cacheAllocatedContainers(response.getAllocatedContainers(),\n                subClusterId);\n            mergeAllocateResponse(mergedResponse, response, subClusterId);\n          }\n          responses.clear();\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {}
        }
      ]
    },
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6704. Add support for work preserving NM restart when FederationInterceptor is enabled in AMRMProxyService. (Botong Huang via Subru).\n",
      "commitDate": "08/12/17 3:39 PM",
      "commitName": "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,28 @@\n   private AllocateResponse mergeAllocateResponses(\n       AllocateResponse homeResponse) {\n     // Timing issue, we need to remove the completed and then save the new ones.\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Remove containers: \"\n-          + homeResponse.getCompletedContainersStatuses());\n-      LOG.debug(\"Adding containers: \" + homeResponse.getAllocatedContainers());\n-    }\n     removeFinishedContainersFromCache(\n         homeResponse.getCompletedContainersStatuses());\n     cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n         this.homeSubClusterId);\n \n     synchronized (this.asyncResponseSink) {\n       for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n           .entrySet()) {\n         SubClusterId subClusterId \u003d entry.getKey();\n         List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n         if (responses.size() \u003e 0) {\n           for (AllocateResponse response : responses) {\n             removeFinishedContainersFromCache(\n                 response.getCompletedContainersStatuses());\n             cacheAllocatedContainers(response.getAllocatedContainers(),\n                 subClusterId);\n             mergeAllocateResponse(homeResponse, response, subClusterId);\n           }\n           responses.clear();\n         }\n       }\n     }\n \n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private AllocateResponse mergeAllocateResponses(\n      AllocateResponse homeResponse) {\n    // Timing issue, we need to remove the completed and then save the new ones.\n    removeFinishedContainersFromCache(\n        homeResponse.getCompletedContainersStatuses());\n    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n        this.homeSubClusterId);\n\n    synchronized (this.asyncResponseSink) {\n      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n          .entrySet()) {\n        SubClusterId subClusterId \u003d entry.getKey();\n        List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n        if (responses.size() \u003e 0) {\n          for (AllocateResponse response : responses) {\n            removeFinishedContainersFromCache(\n                response.getCompletedContainersStatuses());\n            cacheAllocatedContainers(response.getAllocatedContainers(),\n                subClusterId);\n            mergeAllocateResponse(homeResponse, response, subClusterId);\n          }\n          responses.clear();\n        }\n      }\n    }\n\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,33 @@\n   private AllocateResponse mergeAllocateResponses(\n       AllocateResponse homeResponse) {\n     // Timing issue, we need to remove the completed and then save the new ones.\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Remove containers: \"\n           + homeResponse.getCompletedContainersStatuses());\n       LOG.debug(\"Adding containers: \" + homeResponse.getAllocatedContainers());\n     }\n     removeFinishedContainersFromCache(\n         homeResponse.getCompletedContainersStatuses());\n     cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n         this.homeSubClusterId);\n \n+    synchronized (this.asyncResponseSink) {\n+      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n+          .entrySet()) {\n+        SubClusterId subClusterId \u003d entry.getKey();\n+        List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n+        if (responses.size() \u003e 0) {\n+          for (AllocateResponse response : responses) {\n+            removeFinishedContainersFromCache(\n+                response.getCompletedContainersStatuses());\n+            cacheAllocatedContainers(response.getAllocatedContainers(),\n+                subClusterId);\n+            mergeAllocateResponse(homeResponse, response, subClusterId);\n+          }\n+          responses.clear();\n+        }\n+      }\n+    }\n+\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private AllocateResponse mergeAllocateResponses(\n      AllocateResponse homeResponse) {\n    // Timing issue, we need to remove the completed and then save the new ones.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remove containers: \"\n          + homeResponse.getCompletedContainersStatuses());\n      LOG.debug(\"Adding containers: \" + homeResponse.getAllocatedContainers());\n    }\n    removeFinishedContainersFromCache(\n        homeResponse.getCompletedContainersStatuses());\n    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n        this.homeSubClusterId);\n\n    synchronized (this.asyncResponseSink) {\n      for (Entry\u003cSubClusterId, List\u003cAllocateResponse\u003e\u003e entry : asyncResponseSink\n          .entrySet()) {\n        SubClusterId subClusterId \u003d entry.getKey();\n        List\u003cAllocateResponse\u003e responses \u003d entry.getValue();\n        if (responses.size() \u003e 0) {\n          for (AllocateResponse response : responses) {\n            removeFinishedContainersFromCache(\n                response.getCompletedContainersStatuses());\n            cacheAllocatedContainers(response.getAllocatedContainers(),\n                subClusterId);\n            mergeAllocateResponse(homeResponse, response, subClusterId);\n          }\n          responses.clear();\n        }\n      }\n    }\n\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3666. Federation Intercepting and propagating AM- home RM communications. (Botong Huang via Subru).\n\n(cherry picked from commit 2399eb8200609246cb623c74450ca4a2032063cc)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,15 @@\n+  private AllocateResponse mergeAllocateResponses(\n+      AllocateResponse homeResponse) {\n+    // Timing issue, we need to remove the completed and then save the new ones.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Remove containers: \"\n+          + homeResponse.getCompletedContainersStatuses());\n+      LOG.debug(\"Adding containers: \" + homeResponse.getAllocatedContainers());\n+    }\n+    removeFinishedContainersFromCache(\n+        homeResponse.getCompletedContainersStatuses());\n+    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n+        this.homeSubClusterId);\n+\n+    return homeResponse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AllocateResponse mergeAllocateResponses(\n      AllocateResponse homeResponse) {\n    // Timing issue, we need to remove the completed and then save the new ones.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remove containers: \"\n          + homeResponse.getCompletedContainersStatuses());\n      LOG.debug(\"Adding containers: \" + homeResponse.getAllocatedContainers());\n    }\n    removeFinishedContainersFromCache(\n        homeResponse.getCompletedContainersStatuses());\n    cacheAllocatedContainers(homeResponse.getAllocatedContainers(),\n        this.homeSubClusterId);\n\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}