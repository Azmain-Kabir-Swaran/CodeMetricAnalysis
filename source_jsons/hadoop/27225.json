{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemTimelineReaderImpl.java",
  "functionName": "mergeEntities",
  "functionId": "mergeEntities___entity1-TimelineEntity__entity2-TimelineEntity",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
  "functionStartLine": 212,
  "functionEndLine": 254,
  "numCommitsSeen": 20,
  "timeTaken": 1159,
  "changeHistory": [
    "8c8183e515b42b7fff7d56a14ea7af78d3fdc772",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59"
  ],
  "changeHistoryShort": {
    "8c8183e515b42b7fff7d56a14ea7af78d3fdc772": "Ybodychange",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ybodychange",
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c8183e515b42b7fff7d56a14ea7af78d3fdc772": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5093. created time shows 0 in most REST output (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8c8183e515b42b7fff7d56a14ea7af78d3fdc772",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private static void mergeEntities(TimelineEntity entity1,\n       TimelineEntity entity2) {\n     // Ideally created time wont change except in the case of issue from client.\n-    if (entity2.getCreatedTime() \u003e 0) {\n+    if (entity2.getCreatedTime() !\u003d null \u0026\u0026 entity2.getCreatedTime() \u003e 0) {\n       entity1.setCreatedTime(entity2.getCreatedTime());\n     }\n     for (Entry\u003cString, String\u003e configEntry : entity2.getConfigs().entrySet()) {\n       entity1.addConfig(configEntry.getKey(), configEntry.getValue());\n     }\n     for (Entry\u003cString, Object\u003e infoEntry : entity2.getInfo().entrySet()) {\n       entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\n     }\n     for (Entry\u003cString, Set\u003cString\u003e\u003e isRelatedToEntry :\n         entity2.getIsRelatedToEntities().entrySet()) {\n       String type \u003d isRelatedToEntry.getKey();\n       for (String entityId : isRelatedToEntry.getValue()) {\n         entity1.addIsRelatedToEntity(type, entityId);\n       }\n     }\n     for (Entry\u003cString, Set\u003cString\u003e\u003e relatesToEntry :\n         entity2.getRelatesToEntities().entrySet()) {\n       String type \u003d relatesToEntry.getKey();\n       for (String entityId : relatesToEntry.getValue()) {\n         entity1.addRelatesToEntity(type, entityId);\n       }\n     }\n     for (TimelineEvent event : entity2.getEvents()) {\n       entity1.addEvent(event);\n     }\n     for (TimelineMetric metric2 : entity2.getMetrics()) {\n       boolean found \u003d false;\n       for (TimelineMetric metric1 : entity1.getMetrics()) {\n         if (metric1.getId().equals(metric2.getId())) {\n           metric1.addValues(metric2.getValues());\n           found \u003d true;\n           break;\n         }\n       }\n       if (!found) {\n         entity1.addMetric(metric2);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void mergeEntities(TimelineEntity entity1,\n      TimelineEntity entity2) {\n    // Ideally created time wont change except in the case of issue from client.\n    if (entity2.getCreatedTime() !\u003d null \u0026\u0026 entity2.getCreatedTime() \u003e 0) {\n      entity1.setCreatedTime(entity2.getCreatedTime());\n    }\n    for (Entry\u003cString, String\u003e configEntry : entity2.getConfigs().entrySet()) {\n      entity1.addConfig(configEntry.getKey(), configEntry.getValue());\n    }\n    for (Entry\u003cString, Object\u003e infoEntry : entity2.getInfo().entrySet()) {\n      entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\n    }\n    for (Entry\u003cString, Set\u003cString\u003e\u003e isRelatedToEntry :\n        entity2.getIsRelatedToEntities().entrySet()) {\n      String type \u003d isRelatedToEntry.getKey();\n      for (String entityId : isRelatedToEntry.getValue()) {\n        entity1.addIsRelatedToEntity(type, entityId);\n      }\n    }\n    for (Entry\u003cString, Set\u003cString\u003e\u003e relatesToEntry :\n        entity2.getRelatesToEntities().entrySet()) {\n      String type \u003d relatesToEntry.getKey();\n      for (String entityId : relatesToEntry.getValue()) {\n        entity1.addRelatesToEntity(type, entityId);\n      }\n    }\n    for (TimelineEvent event : entity2.getEvents()) {\n      entity1.addEvent(event);\n    }\n    for (TimelineMetric metric2 : entity2.getMetrics()) {\n      boolean found \u003d false;\n      for (TimelineMetric metric1 : entity1.getMetrics()) {\n        if (metric1.getId().equals(metric2.getId())) {\n          metric1.addValues(metric2.getValues());\n          found \u003d true;\n          break;\n        }\n      }\n      if (!found) {\n        entity1.addMetric(metric2);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
      "extendedDetails": {}
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,43 @@\n   private static void mergeEntities(TimelineEntity entity1,\n       TimelineEntity entity2) {\n     // Ideally created time wont change except in the case of issue from client.\n     if (entity2.getCreatedTime() \u003e 0) {\n       entity1.setCreatedTime(entity2.getCreatedTime());\n     }\n-    if (entity2.getModifiedTime() \u003e 0) {\n-      entity1.setModifiedTime(entity2.getModifiedTime());\n-    }\n     for (Entry\u003cString, String\u003e configEntry : entity2.getConfigs().entrySet()) {\n       entity1.addConfig(configEntry.getKey(), configEntry.getValue());\n     }\n     for (Entry\u003cString, Object\u003e infoEntry : entity2.getInfo().entrySet()) {\n       entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\n     }\n     for (Entry\u003cString, Set\u003cString\u003e\u003e isRelatedToEntry :\n         entity2.getIsRelatedToEntities().entrySet()) {\n       String type \u003d isRelatedToEntry.getKey();\n       for (String entityId : isRelatedToEntry.getValue()) {\n         entity1.addIsRelatedToEntity(type, entityId);\n       }\n     }\n     for (Entry\u003cString, Set\u003cString\u003e\u003e relatesToEntry :\n         entity2.getRelatesToEntities().entrySet()) {\n       String type \u003d relatesToEntry.getKey();\n       for (String entityId : relatesToEntry.getValue()) {\n         entity1.addRelatesToEntity(type, entityId);\n       }\n     }\n     for (TimelineEvent event : entity2.getEvents()) {\n       entity1.addEvent(event);\n     }\n     for (TimelineMetric metric2 : entity2.getMetrics()) {\n       boolean found \u003d false;\n       for (TimelineMetric metric1 : entity1.getMetrics()) {\n         if (metric1.getId().equals(metric2.getId())) {\n           metric1.addValues(metric2.getValues());\n           found \u003d true;\n           break;\n         }\n       }\n       if (!found) {\n         entity1.addMetric(metric2);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void mergeEntities(TimelineEntity entity1,\n      TimelineEntity entity2) {\n    // Ideally created time wont change except in the case of issue from client.\n    if (entity2.getCreatedTime() \u003e 0) {\n      entity1.setCreatedTime(entity2.getCreatedTime());\n    }\n    for (Entry\u003cString, String\u003e configEntry : entity2.getConfigs().entrySet()) {\n      entity1.addConfig(configEntry.getKey(), configEntry.getValue());\n    }\n    for (Entry\u003cString, Object\u003e infoEntry : entity2.getInfo().entrySet()) {\n      entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\n    }\n    for (Entry\u003cString, Set\u003cString\u003e\u003e isRelatedToEntry :\n        entity2.getIsRelatedToEntities().entrySet()) {\n      String type \u003d isRelatedToEntry.getKey();\n      for (String entityId : isRelatedToEntry.getValue()) {\n        entity1.addIsRelatedToEntity(type, entityId);\n      }\n    }\n    for (Entry\u003cString, Set\u003cString\u003e\u003e relatesToEntry :\n        entity2.getRelatesToEntities().entrySet()) {\n      String type \u003d relatesToEntry.getKey();\n      for (String entityId : relatesToEntry.getValue()) {\n        entity1.addRelatesToEntity(type, entityId);\n      }\n    }\n    for (TimelineEvent event : entity2.getEvents()) {\n      entity1.addEvent(event);\n    }\n    for (TimelineMetric metric2 : entity2.getMetrics()) {\n      boolean found \u003d false;\n      for (TimelineMetric metric1 : entity1.getMetrics()) {\n        if (metric1.getId().equals(metric2.getId())) {\n          metric1.addValues(metric2.getValues());\n          found \u003d true;\n          break;\n        }\n      }\n      if (!found) {\n        entity1.addMetric(metric2);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
      "extendedDetails": {}
    },
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3051. Created storage oriented reader interface for fetching raw entity data and made the filesystem based implementation. Contributed by Varun Saxena.\n\n(cherry picked from commit 499ce52c7b645ec0b1cc8ac62dc9a3127b987a20)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2d59bc4458eaeba6e5b98709340db6f0f1204b59",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,46 @@\n+  private static void mergeEntities(TimelineEntity entity1,\n+      TimelineEntity entity2) {\n+    // Ideally created time wont change except in the case of issue from client.\n+    if (entity2.getCreatedTime() \u003e 0) {\n+      entity1.setCreatedTime(entity2.getCreatedTime());\n+    }\n+    if (entity2.getModifiedTime() \u003e 0) {\n+      entity1.setModifiedTime(entity2.getModifiedTime());\n+    }\n+    for (Entry\u003cString, String\u003e configEntry : entity2.getConfigs().entrySet()) {\n+      entity1.addConfig(configEntry.getKey(), configEntry.getValue());\n+    }\n+    for (Entry\u003cString, Object\u003e infoEntry : entity2.getInfo().entrySet()) {\n+      entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\n+    }\n+    for (Entry\u003cString, Set\u003cString\u003e\u003e isRelatedToEntry :\n+        entity2.getIsRelatedToEntities().entrySet()) {\n+      String type \u003d isRelatedToEntry.getKey();\n+      for (String entityId : isRelatedToEntry.getValue()) {\n+        entity1.addIsRelatedToEntity(type, entityId);\n+      }\n+    }\n+    for (Entry\u003cString, Set\u003cString\u003e\u003e relatesToEntry :\n+        entity2.getRelatesToEntities().entrySet()) {\n+      String type \u003d relatesToEntry.getKey();\n+      for (String entityId : relatesToEntry.getValue()) {\n+        entity1.addRelatesToEntity(type, entityId);\n+      }\n+    }\n+    for (TimelineEvent event : entity2.getEvents()) {\n+      entity1.addEvent(event);\n+    }\n+    for (TimelineMetric metric2 : entity2.getMetrics()) {\n+      boolean found \u003d false;\n+      for (TimelineMetric metric1 : entity1.getMetrics()) {\n+        if (metric1.getId().equals(metric2.getId())) {\n+          metric1.addValues(metric2.getValues());\n+          found \u003d true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        entity1.addMetric(metric2);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void mergeEntities(TimelineEntity entity1,\n      TimelineEntity entity2) {\n    // Ideally created time wont change except in the case of issue from client.\n    if (entity2.getCreatedTime() \u003e 0) {\n      entity1.setCreatedTime(entity2.getCreatedTime());\n    }\n    if (entity2.getModifiedTime() \u003e 0) {\n      entity1.setModifiedTime(entity2.getModifiedTime());\n    }\n    for (Entry\u003cString, String\u003e configEntry : entity2.getConfigs().entrySet()) {\n      entity1.addConfig(configEntry.getKey(), configEntry.getValue());\n    }\n    for (Entry\u003cString, Object\u003e infoEntry : entity2.getInfo().entrySet()) {\n      entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\n    }\n    for (Entry\u003cString, Set\u003cString\u003e\u003e isRelatedToEntry :\n        entity2.getIsRelatedToEntities().entrySet()) {\n      String type \u003d isRelatedToEntry.getKey();\n      for (String entityId : isRelatedToEntry.getValue()) {\n        entity1.addIsRelatedToEntity(type, entityId);\n      }\n    }\n    for (Entry\u003cString, Set\u003cString\u003e\u003e relatesToEntry :\n        entity2.getRelatesToEntities().entrySet()) {\n      String type \u003d relatesToEntry.getKey();\n      for (String entityId : relatesToEntry.getValue()) {\n        entity1.addRelatesToEntity(type, entityId);\n      }\n    }\n    for (TimelineEvent event : entity2.getEvents()) {\n      entity1.addEvent(event);\n    }\n    for (TimelineMetric metric2 : entity2.getMetrics()) {\n      boolean found \u003d false;\n      for (TimelineMetric metric1 : entity1.getMetrics()) {\n        if (metric1.getId().equals(metric2.getId())) {\n          metric1.addValues(metric2.getValues());\n          found \u003d true;\n          break;\n        }\n      }\n      if (!found) {\n        entity1.addMetric(metric2);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java"
    }
  }
}