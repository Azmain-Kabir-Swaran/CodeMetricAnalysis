{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SampleContainerLogAggregationPolicy.java",
  "functionName": "shouldDoLogAggregation",
  "functionId": "shouldDoLogAggregation___logContext-ContainerLogContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/SampleContainerLogAggregationPolicy.java",
  "functionStartLine": 104,
  "functionEndLine": 123,
  "numCommitsSeen": 2,
  "timeTaken": 946,
  "changeHistory": [
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c"
  ],
  "changeHistoryShort": {
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
      "commitDate": "22/08/15 4:25 PM",
      "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,20 @@\n+  public boolean shouldDoLogAggregation(ContainerLogContext logContext) {\n+    if (logContext.getContainerType() \u003d\u003d\n+        ContainerType.APPLICATION_MASTER || logContext.getExitCode() !\u003d 0) {\n+      // If it is AM or failed or killed container, enable log aggregation.\n+      return true;\n+    }\n+\n+    // Only sample log aggregation for large applications.\n+    // We assume the container id is continuously allocated from number 1 and\n+    // Worker containers start from id 2. So logs of worker containers with ids\n+    // in [2, minThreshold + 1] will be aggregated.\n+    if ((logContext.getContainerId().getContainerId() \u0026\n+        ContainerId.CONTAINER_ID_BITMASK) \u003c minThreshold + 2) {\n+      return true;\n+    }\n+\n+    // Sample log aggregation for the rest of successful worker containers\n+    return (sampleRate !\u003d 0 \u0026\u0026\n+        logContext.getContainerId().hashCode() % (1/sampleRate) \u003d\u003d 0);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean shouldDoLogAggregation(ContainerLogContext logContext) {\n    if (logContext.getContainerType() \u003d\u003d\n        ContainerType.APPLICATION_MASTER || logContext.getExitCode() !\u003d 0) {\n      // If it is AM or failed or killed container, enable log aggregation.\n      return true;\n    }\n\n    // Only sample log aggregation for large applications.\n    // We assume the container id is continuously allocated from number 1 and\n    // Worker containers start from id 2. So logs of worker containers with ids\n    // in [2, minThreshold + 1] will be aggregated.\n    if ((logContext.getContainerId().getContainerId() \u0026\n        ContainerId.CONTAINER_ID_BITMASK) \u003c minThreshold + 2) {\n      return true;\n    }\n\n    // Sample log aggregation for the rest of successful worker containers\n    return (sampleRate !\u003d 0 \u0026\u0026\n        logContext.getContainerId().hashCode() % (1/sampleRate) \u003d\u003d 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/SampleContainerLogAggregationPolicy.java"
    }
  }
}