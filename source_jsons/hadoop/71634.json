{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "serveNIOUDP",
  "functionId": "serveNIOUDP___channel-DatagramChannel__addr-InetAddress__port-int",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 948,
  "functionEndLine": 1000,
  "numCommitsSeen": 15,
  "timeTaken": 1906,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "603a57476ce0bf9514f0432a235f29432ca4c323",
    "d2775fbccaa187729d86459542210434ce4c3b8b",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "603a57476ce0bf9514f0432a235f29432ca4c323": "Ymodifierchange",
    "d2775fbccaa187729d86459542210434ce4c3b8b": "Ybodychange",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void serveNIOUDP(DatagramChannel channel,\n      InetAddress addr, int port) throws Exception {\n    SocketAddress remoteAddress \u003d null;\n    try {\n\n      ByteBuffer input \u003d ByteBuffer.allocate(4096);\n      ByteBuffer output \u003d ByteBuffer.allocate(4096);\n      byte[] in \u003d null;\n\n      while (true) {\n        input.clear();\n        try {\n          remoteAddress \u003d channel.receive(input);\n        } catch (IOException e) {\n          LOG.debug(\"Error during message receipt\", e);\n          continue;\n        }\n        Message query;\n        byte[] response \u003d null;\n        try {\n          int position \u003d input.position();\n          in \u003d new byte[position];\n          input.flip();\n          input.get(in);\n          query \u003d new Message(in);\n          LOG.info(\"{}: received UDP query {}\", remoteAddress,\n              query.getQuestion());\n          response \u003d generateReply(query, null);\n          if (response \u003d\u003d null) {\n            continue;\n          }\n        } catch (IOException e) {\n          response \u003d formErrorMessage(in);\n        }\n        output.clear();\n        output.put(response);\n        output.flip();\n\n        LOG.debug(\"{}:  sending response\", remoteAddress);\n        channel.send(output, remoteAddress);\n      }\n    } catch (Exception e) {\n      if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n        throw NetUtils.wrapException(addr.getHostName(),\n            port,\n            ((InetSocketAddress) remoteAddress).getHostName(),\n            ((InetSocketAddress) remoteAddress).getPort(),\n            (IOException) e);\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
      }
    },
    "603a57476ce0bf9514f0432a235f29432ca4c323": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-8600. RegistryDNS hang when remote lookup does not reply. Contributed by Eric Yang\n",
      "commitDate": "01/08/18 11:22 AM",
      "commitName": "603a57476ce0bf9514f0432a235f29432ca4c323",
      "commitAuthor": "Shane Kumpf",
      "commitDateOld": "14/06/18 12:54 PM",
      "commitNameOld": "9591765040b85927ac69179ab46383eef9560a28",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 47.94,
      "commitsBetweenForRepo": 288,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n-  private void serveNIOUDP(DatagramChannel channel,\n+  private synchronized void serveNIOUDP(DatagramChannel channel,\n       InetAddress addr, int port) throws Exception {\n     SocketAddress remoteAddress \u003d null;\n     try {\n \n       ByteBuffer input \u003d ByteBuffer.allocate(4096);\n       ByteBuffer output \u003d ByteBuffer.allocate(4096);\n       byte[] in \u003d null;\n \n       while (true) {\n         input.clear();\n         try {\n           remoteAddress \u003d channel.receive(input);\n         } catch (IOException e) {\n           LOG.debug(\"Error during message receipt\", e);\n           continue;\n         }\n         Message query;\n         byte[] response \u003d null;\n         try {\n           int position \u003d input.position();\n           in \u003d new byte[position];\n           input.flip();\n           input.get(in);\n           query \u003d new Message(in);\n           LOG.info(\"{}: received UDP query {}\", remoteAddress,\n               query.getQuestion());\n           response \u003d generateReply(query, null);\n           if (response \u003d\u003d null) {\n             continue;\n           }\n         } catch (IOException e) {\n           response \u003d formErrorMessage(in);\n         }\n         output.clear();\n         output.put(response);\n         output.flip();\n \n         LOG.debug(\"{}:  sending response\", remoteAddress);\n         channel.send(output, remoteAddress);\n       }\n     } catch (Exception e) {\n       if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n         throw NetUtils.wrapException(addr.getHostName(),\n             port,\n             ((InetSocketAddress) remoteAddress).getHostName(),\n             ((InetSocketAddress) remoteAddress).getPort(),\n             (IOException) e);\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void serveNIOUDP(DatagramChannel channel,\n      InetAddress addr, int port) throws Exception {\n    SocketAddress remoteAddress \u003d null;\n    try {\n\n      ByteBuffer input \u003d ByteBuffer.allocate(4096);\n      ByteBuffer output \u003d ByteBuffer.allocate(4096);\n      byte[] in \u003d null;\n\n      while (true) {\n        input.clear();\n        try {\n          remoteAddress \u003d channel.receive(input);\n        } catch (IOException e) {\n          LOG.debug(\"Error during message receipt\", e);\n          continue;\n        }\n        Message query;\n        byte[] response \u003d null;\n        try {\n          int position \u003d input.position();\n          in \u003d new byte[position];\n          input.flip();\n          input.get(in);\n          query \u003d new Message(in);\n          LOG.info(\"{}: received UDP query {}\", remoteAddress,\n              query.getQuestion());\n          response \u003d generateReply(query, null);\n          if (response \u003d\u003d null) {\n            continue;\n          }\n        } catch (IOException e) {\n          response \u003d formErrorMessage(in);\n        }\n        output.clear();\n        output.put(response);\n        output.flip();\n\n        LOG.debug(\"{}:  sending response\", remoteAddress);\n        channel.send(output, remoteAddress);\n      }\n    } catch (Exception e) {\n      if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n        throw NetUtils.wrapException(addr.getHostName(),\n            port,\n            ((InetSocketAddress) remoteAddress).getHostName(),\n            ((InetSocketAddress) remoteAddress).getPort(),\n            (IOException) e);\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, synchronized]"
      }
    },
    "d2775fbccaa187729d86459542210434ce4c3b8b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7351. Fix high CPU usage issue in RegistryDNS. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "d2775fbccaa187729d86459542210434ce4c3b8b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "501be9b4be7d549b23cc501b26fdfdce0a7aa911",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private void serveNIOUDP(DatagramChannel channel,\n       InetAddress addr, int port) throws Exception {\n     SocketAddress remoteAddress \u003d null;\n     try {\n \n       ByteBuffer input \u003d ByteBuffer.allocate(4096);\n       ByteBuffer output \u003d ByteBuffer.allocate(4096);\n       byte[] in \u003d null;\n \n       while (true) {\n         input.clear();\n         try {\n           remoteAddress \u003d channel.receive(input);\n         } catch (IOException e) {\n           LOG.debug(\"Error during message receipt\", e);\n           continue;\n         }\n         Message query;\n         byte[] response \u003d null;\n         try {\n           int position \u003d input.position();\n           in \u003d new byte[position];\n           input.flip();\n           input.get(in);\n           query \u003d new Message(in);\n-          LOG.info(\"{}:  received query {}\", remoteAddress,\n+          LOG.info(\"{}: received UDP query {}\", remoteAddress,\n               query.getQuestion());\n           response \u003d generateReply(query, null);\n           if (response \u003d\u003d null) {\n             continue;\n           }\n         } catch (IOException e) {\n           response \u003d formErrorMessage(in);\n         }\n         output.clear();\n         output.put(response);\n         output.flip();\n \n-        LOG.info(\"{}:  sending response\", remoteAddress);\n+        LOG.debug(\"{}:  sending response\", remoteAddress);\n         channel.send(output, remoteAddress);\n       }\n     } catch (Exception e) {\n       if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n         throw NetUtils.wrapException(addr.getHostName(),\n             port,\n             ((InetSocketAddress) remoteAddress).getHostName(),\n             ((InetSocketAddress) remoteAddress).getPort(),\n             (IOException) e);\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void serveNIOUDP(DatagramChannel channel,\n      InetAddress addr, int port) throws Exception {\n    SocketAddress remoteAddress \u003d null;\n    try {\n\n      ByteBuffer input \u003d ByteBuffer.allocate(4096);\n      ByteBuffer output \u003d ByteBuffer.allocate(4096);\n      byte[] in \u003d null;\n\n      while (true) {\n        input.clear();\n        try {\n          remoteAddress \u003d channel.receive(input);\n        } catch (IOException e) {\n          LOG.debug(\"Error during message receipt\", e);\n          continue;\n        }\n        Message query;\n        byte[] response \u003d null;\n        try {\n          int position \u003d input.position();\n          in \u003d new byte[position];\n          input.flip();\n          input.get(in);\n          query \u003d new Message(in);\n          LOG.info(\"{}: received UDP query {}\", remoteAddress,\n              query.getQuestion());\n          response \u003d generateReply(query, null);\n          if (response \u003d\u003d null) {\n            continue;\n          }\n        } catch (IOException e) {\n          response \u003d formErrorMessage(in);\n        }\n        output.clear();\n        output.put(response);\n        output.flip();\n\n        LOG.debug(\"{}:  sending response\", remoteAddress);\n        channel.send(output, remoteAddress);\n      }\n    } catch (Exception e) {\n      if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n        throw NetUtils.wrapException(addr.getHostName(),\n            port,\n            ((InetSocketAddress) remoteAddress).getHostName(),\n            ((InetSocketAddress) remoteAddress).getPort(),\n            (IOException) e);\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,53 @@\n+  private void serveNIOUDP(DatagramChannel channel,\n+      InetAddress addr, int port) throws Exception {\n+    SocketAddress remoteAddress \u003d null;\n+    try {\n+\n+      ByteBuffer input \u003d ByteBuffer.allocate(4096);\n+      ByteBuffer output \u003d ByteBuffer.allocate(4096);\n+      byte[] in \u003d null;\n+\n+      while (true) {\n+        input.clear();\n+        try {\n+          remoteAddress \u003d channel.receive(input);\n+        } catch (IOException e) {\n+          LOG.debug(\"Error during message receipt\", e);\n+          continue;\n+        }\n+        Message query;\n+        byte[] response \u003d null;\n+        try {\n+          int position \u003d input.position();\n+          in \u003d new byte[position];\n+          input.flip();\n+          input.get(in);\n+          query \u003d new Message(in);\n+          LOG.info(\"{}:  received query {}\", remoteAddress,\n+              query.getQuestion());\n+          response \u003d generateReply(query, null);\n+          if (response \u003d\u003d null) {\n+            continue;\n+          }\n+        } catch (IOException e) {\n+          response \u003d formErrorMessage(in);\n+        }\n+        output.clear();\n+        output.put(response);\n+        output.flip();\n+\n+        LOG.info(\"{}:  sending response\", remoteAddress);\n+        channel.send(output, remoteAddress);\n+      }\n+    } catch (Exception e) {\n+      if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n+        throw NetUtils.wrapException(addr.getHostName(),\n+            port,\n+            ((InetSocketAddress) remoteAddress).getHostName(),\n+            ((InetSocketAddress) remoteAddress).getPort(),\n+            (IOException) e);\n+      } else {\n+        throw e;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void serveNIOUDP(DatagramChannel channel,\n      InetAddress addr, int port) throws Exception {\n    SocketAddress remoteAddress \u003d null;\n    try {\n\n      ByteBuffer input \u003d ByteBuffer.allocate(4096);\n      ByteBuffer output \u003d ByteBuffer.allocate(4096);\n      byte[] in \u003d null;\n\n      while (true) {\n        input.clear();\n        try {\n          remoteAddress \u003d channel.receive(input);\n        } catch (IOException e) {\n          LOG.debug(\"Error during message receipt\", e);\n          continue;\n        }\n        Message query;\n        byte[] response \u003d null;\n        try {\n          int position \u003d input.position();\n          in \u003d new byte[position];\n          input.flip();\n          input.get(in);\n          query \u003d new Message(in);\n          LOG.info(\"{}:  received query {}\", remoteAddress,\n              query.getQuestion());\n          response \u003d generateReply(query, null);\n          if (response \u003d\u003d null) {\n            continue;\n          }\n        } catch (IOException e) {\n          response \u003d formErrorMessage(in);\n        }\n        output.clear();\n        output.put(response);\n        output.flip();\n\n        LOG.info(\"{}:  sending response\", remoteAddress);\n        channel.send(output, remoteAddress);\n      }\n    } catch (Exception e) {\n      if (e instanceof IOException \u0026\u0026 remoteAddress !\u003d null) {\n        throw NetUtils.wrapException(addr.getHostName(),\n            port,\n            ((InetSocketAddress) remoteAddress).getHostName(),\n            ((InetSocketAddress) remoteAddress).getPort(),\n            (IOException) e);\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}