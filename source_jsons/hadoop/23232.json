{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyFieldBasedComparator.java",
  "functionName": "decimalCompare",
  "functionId": "decimalCompare___a-byte[]__i-int__end1-int__b-byte[]__j-int__end2-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
  "functionStartLine": 233,
  "functionEndLine": 281,
  "numCommitsSeen": 4,
  "timeTaken": 4314,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int decimalCompare(byte[] a, int i, int end1, \n                             byte[] b, int j, int end2) {\n    if (i \u003e end1) {\n      //if a[] has nothing remaining\n      return -decimalCompare1(b, ++j, end2);\n    }\n    if (j \u003e end2) {\n      //if b[] has nothing remaining\n      return decimalCompare1(a, ++i, end1);\n    }\n    if (a[i] \u003d\u003d DECIMAL \u0026\u0026 b[j] \u003d\u003d DECIMAL) {\n      while (i \u003c\u003d end1 \u0026\u0026 j \u003c\u003d end2) {\n        if (a[i] !\u003d b[j]) {\n          if (isdigit(a[i]) \u0026\u0026 isdigit(b[j])) {\n            return a[i] - b[j];\n          }\n          if (isdigit(a[i])) {\n            return 1;\n          }\n          if (isdigit(b[j])) {\n            return -1;\n          }\n          return 0;\n        }\n        i++; j++;\n      }\n      if (i \u003e end1 \u0026\u0026 j \u003e end2) {\n        return 0;\n      }\n        \n      if (i \u003e end1) {\n        //check whether there is a non-ZERO digit after potentially\n        //a number of ZEROs (e.g., a\u003d.4444, b\u003d.444400004)\n        return -decimalCompare1(b, j, end2);\n      }\n      if (j \u003e end2) {\n        //check whether there is a non-ZERO digit after potentially\n        //a number of ZEROs (e.g., b\u003d.4444, a\u003d.444400004)\n        return decimalCompare1(a, i, end1);\n      }\n    }\n    else if (a[i] \u003d\u003d DECIMAL) {\n      return decimalCompare1(a, ++i, end1);\n    }\n    else if (b[j] \u003d\u003d DECIMAL) {\n      return -decimalCompare1(b, ++j, end2);\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int decimalCompare(byte[] a, int i, int end1, \n                             byte[] b, int j, int end2) {\n    if (i \u003e end1) {\n      //if a[] has nothing remaining\n      return -decimalCompare1(b, ++j, end2);\n    }\n    if (j \u003e end2) {\n      //if b[] has nothing remaining\n      return decimalCompare1(a, ++i, end1);\n    }\n    if (a[i] \u003d\u003d DECIMAL \u0026\u0026 b[j] \u003d\u003d DECIMAL) {\n      while (i \u003c\u003d end1 \u0026\u0026 j \u003c\u003d end2) {\n        if (a[i] !\u003d b[j]) {\n          if (isdigit(a[i]) \u0026\u0026 isdigit(b[j])) {\n            return a[i] - b[j];\n          }\n          if (isdigit(a[i])) {\n            return 1;\n          }\n          if (isdigit(b[j])) {\n            return -1;\n          }\n          return 0;\n        }\n        i++; j++;\n      }\n      if (i \u003e end1 \u0026\u0026 j \u003e end2) {\n        return 0;\n      }\n        \n      if (i \u003e end1) {\n        //check whether there is a non-ZERO digit after potentially\n        //a number of ZEROs (e.g., a\u003d.4444, b\u003d.444400004)\n        return -decimalCompare1(b, j, end2);\n      }\n      if (j \u003e end2) {\n        //check whether there is a non-ZERO digit after potentially\n        //a number of ZEROs (e.g., b\u003d.4444, a\u003d.444400004)\n        return decimalCompare1(a, i, end1);\n      }\n    }\n    else if (a[i] \u003d\u003d DECIMAL) {\n      return decimalCompare1(a, ++i, end1);\n    }\n    else if (b[j] \u003d\u003d DECIMAL) {\n      return -decimalCompare1(b, ++j, end2);\n    }\n    return 0;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,49 @@\n+  private int decimalCompare(byte[] a, int i, int end1, \n+                             byte[] b, int j, int end2) {\n+    if (i \u003e end1) {\n+      //if a[] has nothing remaining\n+      return -decimalCompare1(b, ++j, end2);\n+    }\n+    if (j \u003e end2) {\n+      //if b[] has nothing remaining\n+      return decimalCompare1(a, ++i, end1);\n+    }\n+    if (a[i] \u003d\u003d DECIMAL \u0026\u0026 b[j] \u003d\u003d DECIMAL) {\n+      while (i \u003c\u003d end1 \u0026\u0026 j \u003c\u003d end2) {\n+        if (a[i] !\u003d b[j]) {\n+          if (isdigit(a[i]) \u0026\u0026 isdigit(b[j])) {\n+            return a[i] - b[j];\n+          }\n+          if (isdigit(a[i])) {\n+            return 1;\n+          }\n+          if (isdigit(b[j])) {\n+            return -1;\n+          }\n+          return 0;\n+        }\n+        i++; j++;\n+      }\n+      if (i \u003e end1 \u0026\u0026 j \u003e end2) {\n+        return 0;\n+      }\n+        \n+      if (i \u003e end1) {\n+        //check whether there is a non-ZERO digit after potentially\n+        //a number of ZEROs (e.g., a\u003d.4444, b\u003d.444400004)\n+        return -decimalCompare1(b, j, end2);\n+      }\n+      if (j \u003e end2) {\n+        //check whether there is a non-ZERO digit after potentially\n+        //a number of ZEROs (e.g., b\u003d.4444, a\u003d.444400004)\n+        return decimalCompare1(a, i, end1);\n+      }\n+    }\n+    else if (a[i] \u003d\u003d DECIMAL) {\n+      return decimalCompare1(a, ++i, end1);\n+    }\n+    else if (b[j] \u003d\u003d DECIMAL) {\n+      return -decimalCompare1(b, ++j, end2);\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int decimalCompare(byte[] a, int i, int end1, \n                             byte[] b, int j, int end2) {\n    if (i \u003e end1) {\n      //if a[] has nothing remaining\n      return -decimalCompare1(b, ++j, end2);\n    }\n    if (j \u003e end2) {\n      //if b[] has nothing remaining\n      return decimalCompare1(a, ++i, end1);\n    }\n    if (a[i] \u003d\u003d DECIMAL \u0026\u0026 b[j] \u003d\u003d DECIMAL) {\n      while (i \u003c\u003d end1 \u0026\u0026 j \u003c\u003d end2) {\n        if (a[i] !\u003d b[j]) {\n          if (isdigit(a[i]) \u0026\u0026 isdigit(b[j])) {\n            return a[i] - b[j];\n          }\n          if (isdigit(a[i])) {\n            return 1;\n          }\n          if (isdigit(b[j])) {\n            return -1;\n          }\n          return 0;\n        }\n        i++; j++;\n      }\n      if (i \u003e end1 \u0026\u0026 j \u003e end2) {\n        return 0;\n      }\n        \n      if (i \u003e end1) {\n        //check whether there is a non-ZERO digit after potentially\n        //a number of ZEROs (e.g., a\u003d.4444, b\u003d.444400004)\n        return -decimalCompare1(b, j, end2);\n      }\n      if (j \u003e end2) {\n        //check whether there is a non-ZERO digit after potentially\n        //a number of ZEROs (e.g., b\u003d.4444, a\u003d.444400004)\n        return decimalCompare1(a, i, end1);\n      }\n    }\n    else if (a[i] \u003d\u003d DECIMAL) {\n      return decimalCompare1(a, ++i, end1);\n    }\n    else if (b[j] \u003d\u003d DECIMAL) {\n      return -decimalCompare1(b, ++j, end2);\n    }\n    return 0;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/KeyFieldBasedComparator.java"
    }
  }
}