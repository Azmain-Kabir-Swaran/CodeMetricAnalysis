{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulingMonitorManager.java",
  "functionName": "updateSchedulingMonitors",
  "functionId": "updateSchedulingMonitors___conf-Configuration__startImmediately-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitorManager.java",
  "functionStartLine": 46,
  "functionEndLine": 116,
  "numCommitsSeen": 2,
  "timeTaken": 1157,
  "changeHistory": [
    "a63d19d36520fa55bf523483f14329756f6eadd3"
  ],
  "changeHistoryShort": {
    "a63d19d36520fa55bf523483f14329756f6eadd3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a63d19d36520fa55bf523483f14329756f6eadd3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6124. Make SchedulingEditPolicy can be enabled / disabled / updated with RMAdmin -refreshQueues. (Zian Chen via wangda)\n\nChange-Id: Id93656f3af7dcd78cafa94e33663c78d410d43c2\n",
      "commitDate": "30/11/17 3:57 PM",
      "commitName": "a63d19d36520fa55bf523483f14329756f6eadd3",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,71 @@\n+  private void updateSchedulingMonitors(Configuration conf,\n+      boolean startImmediately) throws YarnException {\n+    boolean monitorsEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n+\n+    if (!monitorsEnabled) {\n+      if (!runningSchedulingMonitors.isEmpty()) {\n+        // If monitors disabled while we have some running monitors, we should\n+        // stop them.\n+        LOG.info(\"Scheduling Monitor disabled, stopping all services\");\n+        stopAndRemoveAll();\n+      }\n+\n+      return;\n+    }\n+\n+    // When monitor is enabled, loading policies\n+    String[] configuredPolicies \u003d conf.getStrings(\n+        YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES);\n+    if (configuredPolicies \u003d\u003d null || configuredPolicies.length \u003d\u003d 0) {\n+      return;\n+    }\n+\n+    Set\u003cString\u003e configurePoliciesSet \u003d new HashSet\u003c\u003e();\n+    for (String s : configuredPolicies) {\n+      configurePoliciesSet.add(s);\n+    }\n+\n+    // Add new monitor when needed\n+    for (String s : configurePoliciesSet) {\n+      if (!runningSchedulingMonitors.containsKey(s)) {\n+        Class\u003c?\u003e policyClass;\n+        try {\n+          policyClass \u003d Class.forName(s);\n+        } catch (ClassNotFoundException e) {\n+          String message \u003d \"Failed to find class of specified policy\u003d\" + s;\n+          LOG.warn(message);\n+          throw new YarnException(message);\n+        }\n+\n+        if (SchedulingEditPolicy.class.isAssignableFrom(policyClass)) {\n+          SchedulingEditPolicy policyInstance \u003d\n+              (SchedulingEditPolicy) ReflectionUtils.newInstance(policyClass,\n+                  null);\n+          SchedulingMonitor mon \u003d new SchedulingMonitor(rmContext,\n+              policyInstance);\n+          mon.init(conf);\n+          if (startImmediately) {\n+            mon.start();\n+          }\n+          runningSchedulingMonitors.put(s, mon);\n+        } else {\n+          String message \u003d\n+              \"Specified policy\u003d\" + s + \" is not a SchedulingEditPolicy class.\";\n+          LOG.warn(message);\n+          throw new YarnException(message);\n+        }\n+      }\n+    }\n+\n+    // Stop monitor when needed.\n+    Set\u003cString\u003e disabledPolicies \u003d Sets.difference(\n+        runningSchedulingMonitors.keySet(), configurePoliciesSet);\n+    for (String disabledPolicy : disabledPolicies) {\n+      LOG.info(\"SchedulingEditPolicy\u003d\" + disabledPolicy\n+          + \" removed, stopping it now ...\");\n+      silentlyStopSchedulingMonitor(disabledPolicy);\n+      runningSchedulingMonitors.remove(disabledPolicy);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateSchedulingMonitors(Configuration conf,\n      boolean startImmediately) throws YarnException {\n    boolean monitorsEnabled \u003d conf.getBoolean(\n        YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n\n    if (!monitorsEnabled) {\n      if (!runningSchedulingMonitors.isEmpty()) {\n        // If monitors disabled while we have some running monitors, we should\n        // stop them.\n        LOG.info(\"Scheduling Monitor disabled, stopping all services\");\n        stopAndRemoveAll();\n      }\n\n      return;\n    }\n\n    // When monitor is enabled, loading policies\n    String[] configuredPolicies \u003d conf.getStrings(\n        YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES);\n    if (configuredPolicies \u003d\u003d null || configuredPolicies.length \u003d\u003d 0) {\n      return;\n    }\n\n    Set\u003cString\u003e configurePoliciesSet \u003d new HashSet\u003c\u003e();\n    for (String s : configuredPolicies) {\n      configurePoliciesSet.add(s);\n    }\n\n    // Add new monitor when needed\n    for (String s : configurePoliciesSet) {\n      if (!runningSchedulingMonitors.containsKey(s)) {\n        Class\u003c?\u003e policyClass;\n        try {\n          policyClass \u003d Class.forName(s);\n        } catch (ClassNotFoundException e) {\n          String message \u003d \"Failed to find class of specified policy\u003d\" + s;\n          LOG.warn(message);\n          throw new YarnException(message);\n        }\n\n        if (SchedulingEditPolicy.class.isAssignableFrom(policyClass)) {\n          SchedulingEditPolicy policyInstance \u003d\n              (SchedulingEditPolicy) ReflectionUtils.newInstance(policyClass,\n                  null);\n          SchedulingMonitor mon \u003d new SchedulingMonitor(rmContext,\n              policyInstance);\n          mon.init(conf);\n          if (startImmediately) {\n            mon.start();\n          }\n          runningSchedulingMonitors.put(s, mon);\n        } else {\n          String message \u003d\n              \"Specified policy\u003d\" + s + \" is not a SchedulingEditPolicy class.\";\n          LOG.warn(message);\n          throw new YarnException(message);\n        }\n      }\n    }\n\n    // Stop monitor when needed.\n    Set\u003cString\u003e disabledPolicies \u003d Sets.difference(\n        runningSchedulingMonitors.keySet(), configurePoliciesSet);\n    for (String disabledPolicy : disabledPolicies) {\n      LOG.info(\"SchedulingEditPolicy\u003d\" + disabledPolicy\n          + \" removed, stopping it now ...\");\n      silentlyStopSchedulingMonitor(disabledPolicy);\n      runningSchedulingMonitors.remove(disabledPolicy);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitorManager.java"
    }
  }
}