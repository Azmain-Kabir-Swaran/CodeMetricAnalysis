{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterPolicyFacade.java",
  "functionName": "singlePolicyReinit",
  "functionId": "singlePolicyReinit___policyMap-Map__String,FederationRouterPolicy____cachedConfs-Map__String,SubClusterPolicyConfiguration____queue-String__conf-SubClusterPolicyConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/RouterPolicyFacade.java",
  "functionStartLine": 215,
  "functionEndLine": 240,
  "numCommitsSeen": 6,
  "timeTaken": 1106,
  "changeHistory": [
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
    "083a05bc1420d6d6aa30d98ab48c2ed8ead5b810"
  ],
  "changeHistoryShort": {
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Ybodychange",
    "083a05bc1420d6d6aa30d98ab48c2ed8ead5b810": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "4128c9522dcdc16bb3527f74a48ed1242458a165",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private void singlePolicyReinit(Map\u003cString, FederationRouterPolicy\u003e policyMap,\n       Map\u003cString, SubClusterPolicyConfiguration\u003e cachedConfs, String queue,\n       SubClusterPolicyConfiguration conf)\n       throws FederationPolicyInitializationException {\n \n     FederationPolicyInitializationContext context \u003d\n         new FederationPolicyInitializationContext(conf, subClusterResolver,\n             federationFacade, null);\n     String newType \u003d context.getSubClusterPolicyConfiguration().getType();\n     FederationRouterPolicy routerPolicy \u003d policyMap.get(queue);\n \n     FederationPolicyManager federationPolicyManager \u003d\n-        instantiatePolicyManager(newType);\n+        FederationPolicyUtils.instantiatePolicyManager(newType);\n     // set queue, reinit policy if required (implementation lazily check\n     // content of conf), and cache it\n     federationPolicyManager.setQueue(queue);\n     routerPolicy \u003d\n         federationPolicyManager.getRouterPolicy(context, routerPolicy);\n \n     // we need the two put to be atomic (across multiple threads invoking\n     // this and reset operations)\n     synchronized (this) {\n       policyMap.put(queue, routerPolicy);\n       cachedConfs.put(queue, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void singlePolicyReinit(Map\u003cString, FederationRouterPolicy\u003e policyMap,\n      Map\u003cString, SubClusterPolicyConfiguration\u003e cachedConfs, String queue,\n      SubClusterPolicyConfiguration conf)\n      throws FederationPolicyInitializationException {\n\n    FederationPolicyInitializationContext context \u003d\n        new FederationPolicyInitializationContext(conf, subClusterResolver,\n            federationFacade, null);\n    String newType \u003d context.getSubClusterPolicyConfiguration().getType();\n    FederationRouterPolicy routerPolicy \u003d policyMap.get(queue);\n\n    FederationPolicyManager federationPolicyManager \u003d\n        FederationPolicyUtils.instantiatePolicyManager(newType);\n    // set queue, reinit policy if required (implementation lazily check\n    // content of conf), and cache it\n    federationPolicyManager.setQueue(queue);\n    routerPolicy \u003d\n        federationPolicyManager.getRouterPolicy(context, routerPolicy);\n\n    // we need the two put to be atomic (across multiple threads invoking\n    // this and reset operations)\n    synchronized (this) {\n      policyMap.put(queue, routerPolicy);\n      cachedConfs.put(queue, conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/RouterPolicyFacade.java",
      "extendedDetails": {}
    },
    "083a05bc1420d6d6aa30d98ab48c2ed8ead5b810": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5634. Simplify initialization/use of RouterPolicy via a RouterPolicyFacade. (Carlo Curino via Subru).\n\n(cherry picked from commit d7672ce2bddb40fbaa77d3f6fec8c99f5589177f)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "083a05bc1420d6d6aa30d98ab48c2ed8ead5b810",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,26 @@\n+  private void singlePolicyReinit(Map\u003cString, FederationRouterPolicy\u003e policyMap,\n+      Map\u003cString, SubClusterPolicyConfiguration\u003e cachedConfs, String queue,\n+      SubClusterPolicyConfiguration conf)\n+      throws FederationPolicyInitializationException {\n+\n+    FederationPolicyInitializationContext context \u003d\n+        new FederationPolicyInitializationContext(conf, subClusterResolver,\n+            federationFacade, null);\n+    String newType \u003d context.getSubClusterPolicyConfiguration().getType();\n+    FederationRouterPolicy routerPolicy \u003d policyMap.get(queue);\n+\n+    FederationPolicyManager federationPolicyManager \u003d\n+        instantiatePolicyManager(newType);\n+    // set queue, reinit policy if required (implementation lazily check\n+    // content of conf), and cache it\n+    federationPolicyManager.setQueue(queue);\n+    routerPolicy \u003d\n+        federationPolicyManager.getRouterPolicy(context, routerPolicy);\n+\n+    // we need the two put to be atomic (across multiple threads invoking\n+    // this and reset operations)\n+    synchronized (this) {\n+      policyMap.put(queue, routerPolicy);\n+      cachedConfs.put(queue, conf);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void singlePolicyReinit(Map\u003cString, FederationRouterPolicy\u003e policyMap,\n      Map\u003cString, SubClusterPolicyConfiguration\u003e cachedConfs, String queue,\n      SubClusterPolicyConfiguration conf)\n      throws FederationPolicyInitializationException {\n\n    FederationPolicyInitializationContext context \u003d\n        new FederationPolicyInitializationContext(conf, subClusterResolver,\n            federationFacade, null);\n    String newType \u003d context.getSubClusterPolicyConfiguration().getType();\n    FederationRouterPolicy routerPolicy \u003d policyMap.get(queue);\n\n    FederationPolicyManager federationPolicyManager \u003d\n        instantiatePolicyManager(newType);\n    // set queue, reinit policy if required (implementation lazily check\n    // content of conf), and cache it\n    federationPolicyManager.setQueue(queue);\n    routerPolicy \u003d\n        federationPolicyManager.getRouterPolicy(context, routerPolicy);\n\n    // we need the two put to be atomic (across multiple threads invoking\n    // this and reset operations)\n    synchronized (this) {\n      policyMap.put(queue, routerPolicy);\n      cachedConfs.put(queue, conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/RouterPolicyFacade.java"
    }
  }
}