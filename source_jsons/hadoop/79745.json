{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrashPolicyDefault.java",
  "functionName": "createCheckpoint",
  "functionId": "createCheckpoint___trashRoot-Path__date-Date",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
  "functionStartLine": 327,
  "functionEndLine": 351,
  "numCommitsSeen": 29,
  "timeTaken": 1120,
  "changeHistory": [
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf"
  ],
  "changeHistoryShort": {
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8831. Trash Support for deletion in HDFS encryption zone. Contributed by Xiaoyu Yao.\n",
      "commitDate": "04/12/15 10:39 AM",
      "commitName": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,25 @@\n+  private void createCheckpoint(Path trashRoot, Date date) throws IOException {\n+    if (!fs.exists(new Path(trashRoot, CURRENT))) {\n+      return;\n+    }\n+    Path checkpointBase;\n+    synchronized (CHECKPOINT) {\n+      checkpointBase \u003d new Path(trashRoot, CHECKPOINT.format(date));\n+    }\n+    Path checkpoint \u003d checkpointBase;\n+    Path current \u003d new Path(trashRoot, CURRENT);\n+\n+    int attempt \u003d 0;\n+    while (true) {\n+      try {\n+        fs.rename(current, checkpoint, Rename.NONE);\n+        LOG.info(\"Created trash checkpoint: \" + checkpoint.toUri().getPath());\n+        break;\n+      } catch (FileAlreadyExistsException e) {\n+        if (++attempt \u003e 1000) {\n+          throw new IOException(\"Failed to checkpoint trash: \" + checkpoint);\n+        }\n+        checkpoint \u003d checkpointBase.suffix(\"-\" + attempt);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createCheckpoint(Path trashRoot, Date date) throws IOException {\n    if (!fs.exists(new Path(trashRoot, CURRENT))) {\n      return;\n    }\n    Path checkpointBase;\n    synchronized (CHECKPOINT) {\n      checkpointBase \u003d new Path(trashRoot, CHECKPOINT.format(date));\n    }\n    Path checkpoint \u003d checkpointBase;\n    Path current \u003d new Path(trashRoot, CURRENT);\n\n    int attempt \u003d 0;\n    while (true) {\n      try {\n        fs.rename(current, checkpoint, Rename.NONE);\n        LOG.info(\"Created trash checkpoint: \" + checkpoint.toUri().getPath());\n        break;\n      } catch (FileAlreadyExistsException e) {\n        if (++attempt \u003e 1000) {\n          throw new IOException(\"Failed to checkpoint trash: \" + checkpoint);\n        }\n        checkpoint \u003d checkpointBase.suffix(\"-\" + attempt);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
    }
  }
}