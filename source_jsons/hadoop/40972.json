{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSQueueConverter.java",
  "functionName": "convertQueueHierarchy",
  "functionId": "convertQueueHierarchy___queue-FSQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
  "functionStartLine": 76,
  "functionEndLine": 96,
  "numCommitsSeen": 9,
  "timeTaken": 2874,
  "changeHistory": [
    "9a297ff31d3e5d16ac648de584d430fc856afefe",
    "004e95534817b3966d8e1727469c657cf1d043d7",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "9a297ff31d3e5d16ac648de584d430fc856afefe": "Ybodychange",
    "004e95534817b3966d8e1727469c657cf1d043d7": "Ybodychange",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a297ff31d3e5d16ac648de584d430fc856afefe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10197. FS-CS converter: fix emitted ordering policy string and max-am-resource percent value. Contributed by Peter Bacsko\n",
      "commitDate": "26/03/20 4:35 AM",
      "commitName": "9a297ff31d3e5d16ac648de584d430fc856afefe",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "12/03/20 4:18 AM",
      "commitNameOld": "38d87883b6d4fe6a974e99b937b03cab55bc3820",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,21 @@\n   public void convertQueueHierarchy(FSQueue queue) {\n     List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n     final String queueName \u003d queue.getName();\n \n-    if (queue instanceof FSLeafQueue) {\n-      String shortName \u003d getQueueShortName(queueName);\n-      if (!leafQueueNames.add(shortName)) {\n-        String msg \u003d String.format(\"Leaf queues must be unique, \"\n-                + \"%s is defined at least twice\", shortName);\n-        conversionOptions.handleConversionError(msg);\n-      }\n-    }\n-\n     emitChildQueues(queueName, children);\n     emitMaxAMShare(queueName, queue);\n     emitMaxRunningApps(queueName, queue);\n     emitMaxAllocations(queueName, queue);\n     emitPreemptionDisabled(queueName, queue);\n \n     emitChildCapacity(queue);\n     emitMaximumCapacity(queueName, queue);\n     emitAutoCreateChildQueue(queueName, queue);\n     emitSizeBasedWeight(queueName);\n     emitOrderingPolicy(queueName, queue);\n     checkMaxChildCapacitySetting(queue);\n \n     for (FSQueue childQueue : children) {\n       convertQueueHierarchy(childQueue);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void convertQueueHierarchy(FSQueue queue) {\n    List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n    final String queueName \u003d queue.getName();\n\n    emitChildQueues(queueName, children);\n    emitMaxAMShare(queueName, queue);\n    emitMaxRunningApps(queueName, queue);\n    emitMaxAllocations(queueName, queue);\n    emitPreemptionDisabled(queueName, queue);\n\n    emitChildCapacity(queue);\n    emitMaximumCapacity(queueName, queue);\n    emitAutoCreateChildQueue(queueName, queue);\n    emitSizeBasedWeight(queueName);\n    emitOrderingPolicy(queueName, queue);\n    checkMaxChildCapacitySetting(queue);\n\n    for (FSQueue childQueue : children) {\n      convertQueueHierarchy(childQueue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "004e95534817b3966d8e1727469c657cf1d043d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10167. FS-CS Converter: Need to validate c-s.xml after converting. Contributed by Peter Bacsko\n",
      "commitDate": "05/03/20 12:56 AM",
      "commitName": "004e95534817b3966d8e1727469c657cf1d043d7",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "11/02/20 8:31 AM",
      "commitNameOld": "e6377972113db844d7e7b99867fad19d3cbc58bd",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 22.68,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void convertQueueHierarchy(FSQueue queue) {\n     List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n     final String queueName \u003d queue.getName();\n \n     if (queue instanceof FSLeafQueue) {\n       String shortName \u003d getQueueShortName(queueName);\n       if (!leafQueueNames.add(shortName)) {\n         String msg \u003d String.format(\"Leaf queues must be unique, \"\n                 + \"%s is defined at least twice\", shortName);\n         conversionOptions.handleConversionError(msg);\n       }\n     }\n \n     emitChildQueues(queueName, children);\n     emitMaxAMShare(queueName, queue);\n     emitMaxRunningApps(queueName, queue);\n     emitMaxAllocations(queueName, queue);\n     emitPreemptionDisabled(queueName, queue);\n \n     emitChildCapacity(queue);\n     emitMaximumCapacity(queueName, queue);\n-    emitAutoCreateChildQueue(queueName);\n+    emitAutoCreateChildQueue(queueName, queue);\n     emitSizeBasedWeight(queueName);\n     emitOrderingPolicy(queueName, queue);\n     checkMaxChildCapacitySetting(queue);\n \n     for (FSQueue childQueue : children) {\n       convertQueueHierarchy(childQueue);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void convertQueueHierarchy(FSQueue queue) {\n    List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n    final String queueName \u003d queue.getName();\n\n    if (queue instanceof FSLeafQueue) {\n      String shortName \u003d getQueueShortName(queueName);\n      if (!leafQueueNames.add(shortName)) {\n        String msg \u003d String.format(\"Leaf queues must be unique, \"\n                + \"%s is defined at least twice\", shortName);\n        conversionOptions.handleConversionError(msg);\n      }\n    }\n\n    emitChildQueues(queueName, children);\n    emitMaxAMShare(queueName, queue);\n    emitMaxRunningApps(queueName, queue);\n    emitMaxAllocations(queueName, queue);\n    emitPreemptionDisabled(queueName, queue);\n\n    emitChildCapacity(queue);\n    emitMaximumCapacity(queueName, queue);\n    emitAutoCreateChildQueue(queueName, queue);\n    emitSizeBasedWeight(queueName);\n    emitOrderingPolicy(queueName, queue);\n    checkMaxChildCapacitySetting(queue);\n\n    for (FSQueue childQueue : children) {\n      convertQueueHierarchy(childQueue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko\n",
      "commitDate": "12/01/20 4:48 AM",
      "commitName": "24e6a9e43a210cdecaa8e87926eef09c869988f9",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/10/19 8:19 AM",
      "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 89.9,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   public void convertQueueHierarchy(FSQueue queue) {\n     List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n     final String queueName \u003d queue.getName();\n \n     if (queue instanceof FSLeafQueue) {\n       String shortName \u003d getQueueShortName(queueName);\n       if (!leafQueueNames.add(shortName)) {\n-        throw new ConversionException(\n-            \"Leaf queues must be unique, \"\n-                + shortName + \" is defined at least twice\");\n+        String msg \u003d String.format(\"Leaf queues must be unique, \"\n+                + \"%s is defined at least twice\", shortName);\n+        conversionOptions.handleConversionError(msg);\n       }\n     }\n \n     emitChildQueues(queueName, children);\n     emitMaxAMShare(queueName, queue);\n     emitMaxRunningApps(queueName, queue);\n     emitMaxAllocations(queueName, queue);\n     emitPreemptionDisabled(queueName, queue);\n \n-    // TODO: COULD BE incorrect! Needs further clarifications\n     emitChildCapacity(queue);\n     emitMaximumCapacity(queueName, queue);\n     emitAutoCreateChildQueue(queueName);\n     emitSizeBasedWeight(queueName);\n     emitOrderingPolicy(queueName, queue);\n     checkMaxChildCapacitySetting(queue);\n \n     for (FSQueue childQueue : children) {\n       convertQueueHierarchy(childQueue);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void convertQueueHierarchy(FSQueue queue) {\n    List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n    final String queueName \u003d queue.getName();\n\n    if (queue instanceof FSLeafQueue) {\n      String shortName \u003d getQueueShortName(queueName);\n      if (!leafQueueNames.add(shortName)) {\n        String msg \u003d String.format(\"Leaf queues must be unique, \"\n                + \"%s is defined at least twice\", shortName);\n        conversionOptions.handleConversionError(msg);\n      }\n    }\n\n    emitChildQueues(queueName, children);\n    emitMaxAMShare(queueName, queue);\n    emitMaxRunningApps(queueName, queue);\n    emitMaxAllocations(queueName, queue);\n    emitPreemptionDisabled(queueName, queue);\n\n    emitChildCapacity(queue);\n    emitMaximumCapacity(queueName, queue);\n    emitAutoCreateChildQueue(queueName);\n    emitSizeBasedWeight(queueName);\n    emitOrderingPolicy(queueName, queue);\n    checkMaxChildCapacitySetting(queue);\n\n    for (FSQueue childQueue : children) {\n      convertQueueHierarchy(childQueue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,31 @@\n+  public void convertQueueHierarchy(FSQueue queue) {\n+    List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n+    final String queueName \u003d queue.getName();\n+\n+    if (queue instanceof FSLeafQueue) {\n+      String shortName \u003d getQueueShortName(queueName);\n+      if (!leafQueueNames.add(shortName)) {\n+        throw new ConversionException(\n+            \"Leaf queues must be unique, \"\n+                + shortName + \" is defined at least twice\");\n+      }\n+    }\n+\n+    emitChildQueues(queueName, children);\n+    emitMaxAMShare(queueName, queue);\n+    emitMaxRunningApps(queueName, queue);\n+    emitMaxAllocations(queueName, queue);\n+    emitPreemptionDisabled(queueName, queue);\n+\n+    // TODO: COULD BE incorrect! Needs further clarifications\n+    emitChildCapacity(queue);\n+    emitMaximumCapacity(queueName, queue);\n+    emitAutoCreateChildQueue(queueName);\n+    emitSizeBasedWeight(queueName);\n+    emitOrderingPolicy(queueName, queue);\n+    checkMaxChildCapacitySetting(queue);\n+\n+    for (FSQueue childQueue : children) {\n+      convertQueueHierarchy(childQueue);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void convertQueueHierarchy(FSQueue queue) {\n    List\u003cFSQueue\u003e children \u003d queue.getChildQueues();\n    final String queueName \u003d queue.getName();\n\n    if (queue instanceof FSLeafQueue) {\n      String shortName \u003d getQueueShortName(queueName);\n      if (!leafQueueNames.add(shortName)) {\n        throw new ConversionException(\n            \"Leaf queues must be unique, \"\n                + shortName + \" is defined at least twice\");\n      }\n    }\n\n    emitChildQueues(queueName, children);\n    emitMaxAMShare(queueName, queue);\n    emitMaxRunningApps(queueName, queue);\n    emitMaxAllocations(queueName, queue);\n    emitPreemptionDisabled(queueName, queue);\n\n    // TODO: COULD BE incorrect! Needs further clarifications\n    emitChildCapacity(queue);\n    emitMaximumCapacity(queueName, queue);\n    emitAutoCreateChildQueue(queueName);\n    emitSizeBasedWeight(queueName);\n    emitOrderingPolicy(queueName, queue);\n    checkMaxChildCapacitySetting(queue);\n\n    for (FSQueue childQueue : children) {\n      convertQueueHierarchy(childQueue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java"
    }
  }
}