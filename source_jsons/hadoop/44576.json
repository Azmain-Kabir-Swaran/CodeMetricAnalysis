{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "printContainerLogsFromRunningApplication",
  "functionId": "printContainerLogsFromRunningApplication___conf-Configuration__request-ContainerLogsRequest__logCliHelper-LogCLIHelpers__useRegex-boolean__ignoreSizeLimit-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 570,
  "functionEndLine": 622,
  "numCommitsSeen": 146,
  "timeTaken": 11952,
  "changeHistory": [
    "b65815d6914996fed25bd9fef4d37d00828bc664",
    "7836bc4c3533e93e7adc0c7da0659bc04bdf2494",
    "9520b2ad790bd8527033a03e7ee50da71a85df1d",
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "1a84c24b0cf6674fa755403971fa57d8e412b320",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
    "871dc420f8a4f151189c0925e062c64859a8f275",
    "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
    "e3037c564117fe53742c130665b047dd17eff6d0",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "7e5355c14e55fd6540f7f070df4b78fa94a81618",
    "429347289c7787364e654334cd84115ae40bb22d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "4c9e1aeb94247a6e97215e902bdc71a325244243",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
    "25064fb2fb79751cedbb8019900d811e07549ecf",
    "d6284428e8bd09a06cf18ff81a7064d744ef47d0",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
    "4e1f56e111a88c2bc600aaa601010295075676c9",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "ef1757790d89cc72f88f5330761b1c8901c59e94",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
    "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
    "34ef1a092bcab369bb845481efffb8c47adef53a",
    "a77d628339afaf2f5a085c73fd81a805b18348c9"
  ],
  "changeHistoryShort": {
    "b65815d6914996fed25bd9fef4d37d00828bc664": "Ybodychange",
    "7836bc4c3533e93e7adc0c7da0659bc04bdf2494": "Ybodychange",
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": "Ybodychange",
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yparameterchange,Ybodychange)",
    "1a84c24b0cf6674fa755403971fa57d8e412b320": "Ybodychange",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Ybodychange",
    "871dc420f8a4f151189c0925e062c64859a8f275": "Ybodychange",
    "327c9980aafce52cc02d2b8885fc4e9f628ab23c": "Ybodychange",
    "e3037c564117fe53742c130665b047dd17eff6d0": "Ybodychange",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ymultichange(Yparameterchange,Ybodychange)",
    "7e5355c14e55fd6540f7f070df4b78fa94a81618": "Ybodychange",
    "429347289c7787364e654334cd84115ae40bb22d": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ybodychange",
    "4c9e1aeb94247a6e97215e902bdc71a325244243": "Ybodychange",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": "Ymultichange(Yreturntypechange,Ybodychange)",
    "25064fb2fb79751cedbb8019900d811e07549ecf": "Ybodychange",
    "d6284428e8bd09a06cf18ff81a7064d744ef47d0": "Ybodychange",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": "Ybodychange",
    "4e1f56e111a88c2bc600aaa601010295075676c9": "Ymodifierchange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "ef1757790d89cc72f88f5330761b1c8901c59e94": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": "Ymultichange(Yparameterchange,Ybodychange)",
    "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5": "Ybodychange",
    "34ef1a092bcab369bb845481efffb8c47adef53a": "Ybodychange",
    "a77d628339afaf2f5a085c73fd81a805b18348c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b65815d6914996fed25bd9fef4d37d00828bc664": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-9606. Set sslfactory for AuthenticatedURL() while creating LogsCLI#webServiceClient.\"\n\nThis reverts commit 7836bc4c3533e93e7adc0c7da0659bc04bdf2494.\n",
      "commitDate": "18/05/20 12:29 AM",
      "commitName": "b65815d6914996fed25bd9fef4d37d00828bc664",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/05/20 7:10 AM",
      "commitNameOld": "7836bc4c3533e93e7adc0c7da0659bc04bdf2494",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 3.72,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : request.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponseFromNMWebService(conf,\n-              client, request, logFile);\n+              webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : request.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponseFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "7836bc4c3533e93e7adc0c7da0659bc04bdf2494": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9606. Set sslfactory for AuthenticatedURL() while creating LogsCLI#webServiceClient.\n\nContributed by Bilwa S T. Reviewed by Brahma Reddy Battula.\n",
      "commitDate": "14/05/20 7:10 AM",
      "commitName": "7836bc4c3533e93e7adc0c7da0659bc04bdf2494",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "06/02/20 3:25 AM",
      "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 98.11,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : request.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponseFromNMWebService(conf,\n-              webServiceClient, request, logFile);\n+              client, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : request.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponseFromNMWebService(conf,\n              client, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10083. Provide utility to ask whether an application is in final status. Contributed by Adam Antal\n",
      "commitDate": "22/01/20 7:25 AM",
      "commitName": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/06/19 1:41 PM",
      "commitNameOld": "cb9bc6e64c590622ae04aea2c81962be59037f7a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 229.78,
      "commitsBetweenForRepo": 1467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : request.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n-          ClientResponse response \u003d getResponeFromNMWebService(conf,\n+          ClientResponse response \u003d getResponseFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : request.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponseFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,53 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n-      boolean useRegex) throws IOException {\n+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n-    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n-    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n-      System.err.println(\"Can not get the logs for the container: \"\n-          + containerIdStr);\n-      System.err.println(\"The node http address is required to get container \"\n-          + \"logs for the Running application.\");\n-      return -1;\n-    }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n-      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n-          useRegex);\n-      if (matchedFiles.isEmpty()) {\n-        System.err.println(\"Can not find any log file matching the pattern: \"\n-            + request.getLogTypes() + \" for the container: \" + containerIdStr\n-            + \" within the application: \" + request.getAppId());\n-        return -1;\n-      }\n-      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n-      newOptions.setLogTypes(matchedFiles);\n-\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n-      for (String logFile : newOptions.getLogTypes()) {\n+      for (String logFile : request.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponeFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : request.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, request-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean, ignoreSizeLimit-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,53 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n-      boolean useRegex) throws IOException {\n+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n-    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n-    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n-      System.err.println(\"Can not get the logs for the container: \"\n-          + containerIdStr);\n-      System.err.println(\"The node http address is required to get container \"\n-          + \"logs for the Running application.\");\n-      return -1;\n-    }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n-      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n-          useRegex);\n-      if (matchedFiles.isEmpty()) {\n-        System.err.println(\"Can not find any log file matching the pattern: \"\n-            + request.getLogTypes() + \" for the container: \" + containerIdStr\n-            + \" within the application: \" + request.getAppId());\n-        return -1;\n-      }\n-      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n-      newOptions.setLogTypes(matchedFiles);\n-\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n-      for (String logFile : newOptions.getLogTypes()) {\n+      for (String logFile : request.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponeFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : request.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "1a84c24b0cf6674fa755403971fa57d8e412b320": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7174. Add retry logic in LogsCLI when fetch running application logs. Contributed by Xuan Gong.\n",
      "commitDate": "15/09/17 3:33 PM",
      "commitName": "1a84c24b0cf6674fa755403971fa57d8e412b320",
      "commitAuthor": "Junping Du",
      "commitDateOld": "08/09/17 3:16 PM",
      "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.01,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,72 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n           useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n-      Client webServiceClient \u003d Client.create();\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : newOptions.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponeFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : newOptions.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/05/17 6:08 AM",
      "commitNameOld": "64f68cb0b8c0b93d37699893b812b37c4b05c939",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 130.38,
      "commitsBetweenForRepo": 830,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n-    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n+    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n           useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : newOptions.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponeFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n \n       if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d LogToolUtils.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : newOptions.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "871dc420f8a4f151189c0925e062c64859a8f275": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
      "commitDate": "14/03/17 12:58 PM",
      "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthor": "Junping Du",
      "commitDateOld": "02/02/17 12:41 AM",
      "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 40.47,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,73 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n           useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : newOptions.getLogTypes()) {\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponeFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n-      // for the case, we have already uploaded partial logs in HDFS\n-      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n-          newOptions, false);\n-      if (result \u003d\u003d 0 || foundAnyLogs) {\n+\n+      if (foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : newOptions.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      if (foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "327c9980aafce52cc02d2b8885fc4e9f628ab23c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6100. Improve YARN webservice to output aggregated container logs. Contributed by Xuan Gong.\n",
      "commitDate": "02/02/17 12:41 AM",
      "commitName": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
      "commitAuthor": "Junping Du",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "1a16431bd0df52d2df32c594f8b9b506c2101ad8",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.76,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,75 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n           useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n-      String containerString \u003d String.format(\n-          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n-      out.println(containerString);\n-      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       byte[] buffer \u003d new byte[65536];\n       for (String logFile : newOptions.getLogTypes()) {\n-        out.println(\"LogType:\" + logFile);\n-        out.println(\"Log Upload Time:\"\n-            + Times.format(System.currentTimeMillis()));\n-        out.println(\"Log Contents:\");\n         InputStream is \u003d null;\n         try {\n           ClientResponse response \u003d getResponeFromNMWebService(conf,\n               webServiceClient, request, logFile);\n           if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n               ClientResponse.Status.OK.getStatusCode()) {\n             is \u003d response.getEntityInputStream();\n             int len \u003d 0;\n             while((len \u003d is.read(buffer)) !\u003d -1) {\n               out.write(buffer, 0, len);\n             }\n             out.println();\n           } else {\n             out.println(\"Can not get any logs for the log file: \" + logFile);\n             String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                 \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                 \"not successful,\" + \" HTTP error code: \" +\n                 response.getStatus() + \", Server response:\\n\" +\n                 response.getEntity(String.class));\n             out.println(msg);\n           }\n-          StringBuilder sb \u003d new StringBuilder();\n-          sb.append(\"End of LogType:\" + logFile + \".\");\n-          if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n-            sb.append(\" This log file belongs\"\n-                + \" to a running container (\" + containerIdStr + \") and so may\"\n-                + \" not be complete.\");\n-          }\n-          out.println(sb.toString());\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         } finally {\n           IOUtils.closeQuietly(is);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : newOptions.getLogTypes()) {\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "e3037c564117fe53742c130665b047dd17eff6d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5523. Yarn running container log fetching causes OutOfMemoryError (Xuan Gong via Varun Saxena)\n",
      "commitDate": "17/08/16 1:15 PM",
      "commitName": "e3037c564117fe53742c130665b047dd17eff6d0",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "08/08/16 2:28 PM",
      "commitNameOld": "83a2ffec408fc3ebb89ab13ab4788d9f02fae33b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 8.95,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,91 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n       boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n-      // fetch all the log files for the container\n-      // filter the log files based on the given -log_files pattern\n-      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n-          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n-      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n-      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n-        fileNames.add(fileInfo.getFileName());\n-      }\n-      Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames,\n+      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n           useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d String.format(\n           LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n+      byte[] buffer \u003d new byte[65536];\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n+        InputStream is \u003d null;\n         try {\n-          WebResource webResource \u003d\n-              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n-                  + nodeHttpAddress);\n-          ClientResponse response \u003d\n-              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n-                .path(\"containers\").path(containerIdStr).path(\"logs\")\n-                .path(logFile)\n-                .queryParam(\"size\", Long.toString(request.getBytes()))\n-                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n-          out.println(response.getEntity(String.class));\n+          ClientResponse response \u003d getResponeFromNMWebService(conf,\n+              webServiceClient, request, logFile);\n+          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n+              ClientResponse.Status.OK.getStatusCode()) {\n+            is \u003d response.getEntityInputStream();\n+            int len \u003d 0;\n+            while((len \u003d is.read(buffer)) !\u003d -1) {\n+              out.write(buffer, 0, len);\n+            }\n+            out.println();\n+          } else {\n+            out.println(\"Can not get any logs for the log file: \" + logFile);\n+            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n+                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n+                \"not successful,\" + \" HTTP error code: \" +\n+                response.getStatus() + \", Server response:\\n\" +\n+                response.getEntity(String.class));\n+            out.println(msg);\n+          }\n           StringBuilder sb \u003d new StringBuilder();\n           sb.append(\"End of LogType:\" + logFile + \".\");\n           if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n             sb.append(\" This log file belongs\"\n                 + \" to a running container (\" + containerIdStr + \") and so may\"\n                 + \" not be complete.\");\n           }\n           out.println(sb.toString());\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n+        } finally {\n+          IOUtils.closeQuietly(is);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      Set\u003cString\u003e matchedFiles \u003d getMatchedContainerLogFiles(request,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      byte[] buffer \u003d new byte[65536];\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        InputStream is \u003d null;\n        try {\n          ClientResponse response \u003d getResponeFromNMWebService(conf,\n              webServiceClient, request, logFile);\n          if (response !\u003d null \u0026\u0026 response.getStatusInfo().getStatusCode() \u003d\u003d\n              ClientResponse.Status.OK.getStatusCode()) {\n            is \u003d response.getEntityInputStream();\n            int len \u003d 0;\n            while((len \u003d is.read(buffer)) !\u003d -1) {\n              out.write(buffer, 0, len);\n            }\n            out.println();\n          } else {\n            out.println(\"Can not get any logs for the log file: \" + logFile);\n            String msg \u003d \"Response from the NodeManager:\" + nodeId +\n                \" WebService is \" + ((response \u003d\u003d null) ? \"null\":\n                \"not successful,\" + \" HTTP error code: \" +\n                response.getStatus() + \", Server response:\\n\" +\n                response.getEntity(String.class));\n            out.println(msg);\n          }\n          StringBuilder sb \u003d new StringBuilder();\n          sb.append(\"End of LogType:\" + logFile + \".\");\n          if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n            sb.append(\" This log file belongs\"\n                + \" to a running container (\" + containerIdStr + \") and so may\"\n                + \" not be complete.\");\n          }\n          out.println(sb.toString());\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,86 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n-      throws IOException {\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n+      boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given -log_files pattern\n       List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n       for (PerLogFileInfo fileInfo : allLogFileInfos) {\n         fileNames.add(fileInfo.getFileName());\n       }\n-      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n+      Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames,\n+          useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d String.format(\n           LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containers\").path(containerIdStr).path(\"logs\")\n                 .path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           StringBuilder sb \u003d new StringBuilder();\n           sb.append(\"End of LogType:\" + logFile + \".\");\n           if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n             sb.append(\" This log file belongs\"\n                 + \" to a running container (\" + containerIdStr + \") and so may\"\n                 + \" not be complete.\");\n           }\n           out.println(sb.toString());\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given -log_files pattern\n      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n        fileNames.add(fileInfo.getFileName());\n      }\n      Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containers\").path(containerIdStr).path(\"logs\")\n                .path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          StringBuilder sb \u003d new StringBuilder();\n          sb.append(\"End of LogType:\" + logFile + \".\");\n          if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n            sb.append(\" This log file belongs\"\n                + \" to a running container (\" + containerIdStr + \") and so may\"\n                + \" not be complete.\");\n          }\n          out.println(sb.toString());\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, request-ContainerLogsRequest, logCliHelper-LogCLIHelpers]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,86 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n-      throws IOException {\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n+      boolean useRegex) throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given -log_files pattern\n       List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n       for (PerLogFileInfo fileInfo : allLogFileInfos) {\n         fileNames.add(fileInfo.getFileName());\n       }\n-      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n+      Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames,\n+          useRegex);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d String.format(\n           LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containers\").path(containerIdStr).path(\"logs\")\n                 .path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           StringBuilder sb \u003d new StringBuilder();\n           sb.append(\"End of LogType:\" + logFile + \".\");\n           if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n             sb.append(\" This log file belongs\"\n                 + \" to a running container (\" + containerIdStr + \") and so may\"\n                 + \" not be complete.\");\n           }\n           out.println(sb.toString());\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given -log_files pattern\n      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n        fileNames.add(fileInfo.getFileName());\n      }\n      Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames,\n          useRegex);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containers\").path(containerIdStr).path(\"logs\")\n                .path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          StringBuilder sb \u003d new StringBuilder();\n          sb.append(\"End of LogType:\" + logFile + \".\");\n          if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n            sb.append(\" This log file belongs\"\n                + \" to a running container (\" + containerIdStr + \") and so may\"\n                + \" not be complete.\");\n          }\n          out.println(sb.toString());\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "7e5355c14e55fd6540f7f070df4b78fa94a81618": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5339. Passing file to -out for YARN log CLI doesnt give warning or error code. Contributed by Xuan Gong.\n",
      "commitDate": "15/07/16 9:23 AM",
      "commitName": "7e5355c14e55fd6540f7f070df4b78fa94a81618",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/07/16 10:20 AM",
      "commitNameOld": "429347289c7787364e654334cd84115ae40bb22d",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,85 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given -log_files pattern\n       List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n       for (PerLogFileInfo fileInfo : allLogFileInfos) {\n         fileNames.add(fileInfo.getFileName());\n       }\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d String.format(\n           LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containers\").path(containerIdStr).path(\"logs\")\n                 .path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n-          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n-              + \" to a running container (\" + containerIdStr + \") and so may\"\n-              + \" not be complete.\");\n+          StringBuilder sb \u003d new StringBuilder();\n+          sb.append(\"End of LogType:\" + logFile + \".\");\n+          if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n+            sb.append(\" This log file belongs\"\n+                + \" to a running container (\" + containerIdStr + \") and so may\"\n+                + \" not be complete.\");\n+          }\n+          out.println(sb.toString());\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given -log_files pattern\n      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n        fileNames.add(fileInfo.getFileName());\n      }\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containers\").path(containerIdStr).path(\"logs\")\n                .path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          StringBuilder sb \u003d new StringBuilder();\n          sb.append(\"End of LogType:\" + logFile + \".\");\n          if (request.getContainerState() \u003d\u003d ContainerState.RUNNING) {\n            sb.append(\" This log file belongs\"\n                + \" to a running container (\" + containerIdStr + \") and so may\"\n                + \" not be complete.\");\n          }\n          out.println(sb.toString());\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "429347289c7787364e654334cd84115ae40bb22d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5363. For AM containers, or for containers of running-apps, \"yarn logs\" incorrectly only (tries to) shows syslog file-type by default. (Contributed by Vinod Kumar Vavilapalli)\n",
      "commitDate": "14/07/16 10:20 AM",
      "commitName": "429347289c7787364e654334cd84115ae40bb22d",
      "commitAuthor": "Xuan",
      "commitDateOld": "13/07/16 2:52 PM",
      "commitNameOld": "d18050522c5c6bd9e32eb9a1be4ffe2288624c40",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n       System.err.println(\"Can not get the logs for the container: \"\n           + containerIdStr);\n       System.err.println(\"The node http address is required to get container \"\n           + \"logs for the Running application.\");\n       return -1;\n     }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n-      // filter the log files based on the given --logFiles pattern\n+      // filter the log files based on the given -log_files pattern\n       List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n       for (PerLogFileInfo fileInfo : allLogFileInfos) {\n         fileNames.add(fileInfo.getFileName());\n       }\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d String.format(\n           LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containers\").path(containerIdStr).path(\"logs\")\n                 .path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n               + \" to a running container (\" + containerIdStr + \") and so may\"\n               + \" not be complete.\");\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given -log_files pattern\n      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n        fileNames.add(fileInfo.getFileName());\n      }\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containers\").path(containerIdStr).path(\"logs\")\n                .path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/07/16 8:29 AM",
      "commitNameOld": "7705812c7e3a9f3f774130e25443fda249c08c9c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,80 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n+    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+      System.err.println(\"Can not get the logs for the container: \"\n+          + containerIdStr);\n+      System.err.println(\"The node http address is required to get container \"\n+          + \"logs for the Running application.\");\n+      return -1;\n+    }\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n-      List\u003cString\u003e allLogs\u003d\n+      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n-      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n+      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n+      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n+        fileNames.add(fileInfo.getFileName());\n+      }\n+      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n-      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n-          + nodeId;\n+      String containerString \u003d String.format(\n+          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containers\").path(containerIdStr).path(\"logs\")\n                 .path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n               + \" to a running container (\" + containerIdStr + \") and so may\"\n               + \" not be complete.\");\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n      System.err.println(\"Can not get the logs for the container: \"\n          + containerIdStr);\n      System.err.println(\"The node http address is required to get container \"\n          + \"logs for the Running application.\");\n      return -1;\n    }\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cPerLogFileInfo\u003e allLogFileInfos\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e fileNames \u003d new ArrayList\u003cString\u003e();\n      for (PerLogFileInfo fileInfo : allLogFileInfos) {\n        fileNames.add(fileInfo.getFileName());\n      }\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, fileNames);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d String.format(\n          LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerIdStr, nodeId);\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containers\").path(containerIdStr).path(\"logs\")\n                .path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "4c9e1aeb94247a6e97215e902bdc71a325244243": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5224. Added new web-services /containers/{containerid}/logs \u0026 /containers/{containerid}/logs/{filename} and using them in \"yarn logs\" CLI to get logs of finished containers of a running application. Contributed by Xuan Gong.\n",
      "commitDate": "06/07/16 2:10 PM",
      "commitName": "4c9e1aeb94247a6e97215e902bdc71a325244243",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/07/16 10:43 AM",
      "commitNameOld": "d169f5052fe83debcea7cf2f317dcd990890a857",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n   public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n       if (matchedFiles.isEmpty()) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + request.getLogTypes() + \" for the container: \" + containerIdStr\n             + \" within the application: \" + request.getAppId());\n         return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n           + nodeId;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n-                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n+                .path(\"containers\").path(containerIdStr).path(\"logs\")\n+                .path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n               + \" to a running container (\" + containerIdStr + \") and so may\"\n               + \" not be complete.\");\n           out.flush();\n           foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n           newOptions, false);\n       if (result \u003d\u003d 0 || foundAnyLogs) {\n         return 0;\n       } else {\n         return -1;\n       }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n          + nodeId;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containers\").path(containerIdStr).path(\"logs\")\n                .path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
      "commitDate": "22/06/16 9:48 PM",
      "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
          "commitDate": "22/06/16 9:48 PM",
          "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthor": "Xuan",
          "commitDateOld": "20/06/16 4:05 PM",
          "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 2.24,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,68 @@\n-  public void printContainerLogsFromRunningApplication(Configuration conf,\n+  public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n-      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n-          request, allLogs, true);\n+      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n       if (matchedFiles.isEmpty()) {\n-        return;\n+        System.err.println(\"Can not find any log file matching the pattern: \"\n+            + request.getLogTypes() + \" for the container: \" + containerIdStr\n+            + \" within the application: \" + request.getAppId());\n+        return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n           + nodeId;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-\n+      boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n               + \" to a running container (\" + containerIdStr + \") and so may\"\n               + \" not be complete.\");\n           out.flush();\n+          foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n-      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n+      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n+          newOptions, false);\n+      if (result \u003d\u003d 0 || foundAnyLogs) {\n+        return 0;\n+      } else {\n+        return -1;\n+      }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n          + nodeId;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
          "commitDate": "22/06/16 9:48 PM",
          "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthor": "Xuan",
          "commitDateOld": "20/06/16 4:05 PM",
          "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
          "commitAuthorOld": "Tsuyoshi Ozawa",
          "daysBetweenCommits": 2.24,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,68 @@\n-  public void printContainerLogsFromRunningApplication(Configuration conf,\n+  public int printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n-      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n-          request, allLogs, true);\n+      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n       if (matchedFiles.isEmpty()) {\n-        return;\n+        System.err.println(\"Can not find any log file matching the pattern: \"\n+            + request.getLogTypes() + \" for the container: \" + containerIdStr\n+            + \" within the application: \" + request.getAppId());\n+        return -1;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n           + nodeId;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-\n+      boolean foundAnyLogs \u003d false;\n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n               + \" to a running container (\" + containerIdStr + \") and so may\"\n               + \" not be complete.\");\n           out.flush();\n+          foundAnyLogs \u003d true;\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n-      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n+      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n+          newOptions, false);\n+      if (result \u003d\u003d 0 || foundAnyLogs) {\n+        return 0;\n+      } else {\n+        return -1;\n+      }\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, allLogs);\n      if (matchedFiles.isEmpty()) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + request.getLogTypes() + \" for the container: \" + containerIdStr\n            + \" within the application: \" + request.getAppId());\n        return -1;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n          + nodeId;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      boolean foundAnyLogs \u003d false;\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n          foundAnyLogs \u003d true;\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      int result \u003d logCliHelper.dumpAContainerLogsForLogType(\n          newOptions, false);\n      if (result \u003d\u003d 0 || foundAnyLogs) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "25064fb2fb79751cedbb8019900d811e07549ecf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5223. Container line in yarn logs output for a live application should include the hostname for the container. Contributed by Xuan Gong.\n",
      "commitDate": "15/06/16 12:12 AM",
      "commitName": "25064fb2fb79751cedbb8019900d811e07549ecf",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "15/06/16 12:05 AM",
      "commitNameOld": "d6284428e8bd09a06cf18ff81a7064d744ef47d0",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public void printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n           request, allLogs, true);\n       if (matchedFiles.isEmpty()) {\n         return;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n-      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n+      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n+          + nodeId;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n               + \" to a running container (\" + containerIdStr + \") and so may\"\n               + \" not be complete.\");\n           out.flush();\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n          request, allLogs, true);\n      if (matchedFiles.isEmpty()) {\n        return;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr + \" on \"\n          + nodeId;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "d6284428e8bd09a06cf18ff81a7064d744ef47d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5122. \"yarn logs\" for running containers should print an explicit footer saying that the log may be incomplete. Contributed by Jian He.\n",
      "commitDate": "15/06/16 12:05 AM",
      "commitName": "d6284428e8bd09a06cf18ff81a7064d744ef47d0",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   public void printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n           request, allLogs, true);\n       if (matchedFiles.isEmpty()) {\n         return;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n-          out.println(\"End of LogType:\" + logFile);\n+          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n+              + \" to a running container (\" + containerIdStr + \") and so may\"\n+              + \" not be complete.\");\n           out.flush();\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n          request, allLogs, true);\n      if (matchedFiles.isEmpty()) {\n        return;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile + \". This log file belongs\"\n              + \" to a running container (\" + containerIdStr + \") and so may\"\n              + \" not be complete.\");\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
      "commitDate": "01/06/16 1:44 PM",
      "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
      "commitAuthor": "Xuan",
      "commitDateOld": "29/05/16 9:23 AM",
      "commitNameOld": "4e1f56e111a88c2bc600aaa601010295075676c9",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 3.18,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   public void printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n           request, allLogs, true);\n       if (matchedFiles.isEmpty()) {\n         return;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n+                .queryParam(\"size\", Long.toString(request.getBytes()))\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile);\n           out.flush();\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n          request, allLogs, true);\n      if (matchedFiles.isEmpty()) {\n        return;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .queryParam(\"size\", Long.toString(request.getBytes()))\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile);\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "4e1f56e111a88c2bc600aaa601010295075676c9": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-5141. Get Container logs for the Running application from Yarn Logs CommandLine. Contributed by Xuan Gong.\n",
      "commitDate": "29/05/16 9:23 AM",
      "commitName": "4e1f56e111a88c2bc600aaa601010295075676c9",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/05/16 11:49 PM",
      "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n-  private void printContainerLogsFromRunningApplication(Configuration conf,\n+  public void printContainerLogsFromRunningApplication(Configuration conf,\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n     String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n       // filter the log files based on the given --logFiles pattern\n       List\u003cString\u003e allLogs\u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n           request, allLogs, true);\n       if (matchedFiles.isEmpty()) {\n         return;\n       }\n       ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n       newOptions.setLogTypes(matchedFiles);\n \n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n       for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile);\n           out.flush();\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n       // for the case, we have already uploaded partial logs in HDFS\n       logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n          request, allLogs, true);\n      if (matchedFiles.isEmpty()) {\n        return;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile);\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[public]"
      }
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,55 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n-      ContainerLogsRequest request, String[] logFiles,\n-      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n-    String appId \u003d request.getAppId().toString();\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n+      throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n-    String[] requestedLogFiles \u003d logFiles;\n+    String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n-    String appOwner \u003d request.getAppOwner();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n-      if (fetchAllLogFiles(logFiles)) {\n-        requestedLogFiles \u003d\n-            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n+      // filter the log files based on the given --logFiles pattern\n+      List\u003cString\u003e allLogs\u003d\n+          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n+      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n+          request, allLogs, true);\n+      if (matchedFiles.isEmpty()) {\n+        return;\n       }\n+      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n+      newOptions.setLogTypes(matchedFiles);\n+\n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n-      for (String logFile : requestedLogFiles) {\n+      for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile);\n           out.flush();\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n+      // for the case, we have already uploaded partial logs in HDFS\n+      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n-    // for the case, we have already uploaded partial logs in HDFS\n-    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n-        appOwner, Arrays.asList(requestedLogFiles), false, localDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n          request, allLogs, true);\n      if (matchedFiles.isEmpty()) {\n        return;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile);\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, request-ContainerLogsRequest, logFiles-String[], logCliHelper-LogCLIHelpers, localDir-String]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, logCliHelper-LogCLIHelpers]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,55 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n-      ContainerLogsRequest request, String[] logFiles,\n-      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n-    String appId \u003d request.getAppId().toString();\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n+      throws IOException {\n     String containerIdStr \u003d request.getContainerId().toString();\n-    String[] requestedLogFiles \u003d logFiles;\n+    String localDir \u003d request.getOutputLocalDir();\n     String nodeHttpAddress \u003d request.getNodeHttpAddress();\n     String nodeId \u003d request.getNodeId();\n-    String appOwner \u003d request.getAppOwner();\n     PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n         containerIdStr);\n     try {\n       // fetch all the log files for the container\n-      if (fetchAllLogFiles(logFiles)) {\n-        requestedLogFiles \u003d\n-            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n+      // filter the log files based on the given --logFiles pattern\n+      List\u003cString\u003e allLogs\u003d\n+          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n+      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n+          request, allLogs, true);\n+      if (matchedFiles.isEmpty()) {\n+        return;\n       }\n+      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n+      newOptions.setLogTypes(matchedFiles);\n+\n       Client webServiceClient \u003d Client.create();\n       String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n-      for (String logFile : requestedLogFiles) {\n+      for (String logFile : newOptions.getLogTypes()) {\n         out.println(\"LogType:\" + logFile);\n         out.println(\"Log Upload Time:\"\n             + Times.format(System.currentTimeMillis()));\n         out.println(\"Log Contents:\");\n         try {\n           WebResource webResource \u003d\n               webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                   + nodeHttpAddress);\n           ClientResponse response \u003d\n               webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                 .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                 .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n           out.println(response.getEntity(String.class));\n           out.println(\"End of LogType:\" + logFile);\n           out.flush();\n         } catch (ClientHandlerException | UniformInterfaceException ex) {\n           System.err.println(\"Can not find the log file:\" + logFile\n               + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n               + nodeId);\n         }\n       }\n+      // for the case, we have already uploaded partial logs in HDFS\n+      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n     } finally {\n       logCliHelper.closePrintStream(out);\n     }\n-    // for the case, we have already uploaded partial logs in HDFS\n-    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n-        appOwner, Arrays.asList(requestedLogFiles), false, localDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    String containerIdStr \u003d request.getContainerId().toString();\n    String localDir \u003d request.getOutputLocalDir();\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      // filter the log files based on the given --logFiles pattern\n      List\u003cString\u003e allLogs\u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      List\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(\n          request, allLogs, true);\n      if (matchedFiles.isEmpty()) {\n        return;\n      }\n      ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n      newOptions.setLogTypes(matchedFiles);\n\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : newOptions.getLogTypes()) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile);\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n      // for the case, we have already uploaded partial logs in HDFS\n      logCliHelper.dumpAContainersLogsForALogType(newOptions, false);\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "ef1757790d89cc72f88f5330761b1c8901c59e94": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
      "commitDate": "18/05/16 10:14 AM",
      "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "14/05/16 12:19 PM",
          "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,51 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n-      ContainerId containerId, String nodeHttpAddress,\n-      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n-      String appOwner) throws IOException {\n-    String appId \u003d containerId.getApplicationAttemptId()\n-        .getApplicationId().toString();\n-    String containerIdStr \u003d containerId.toString();\n+      ContainerLogsRequest request, String[] logFiles,\n+      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n+    String appId \u003d request.getAppId().toString();\n+    String containerIdStr \u003d request.getContainerId().toString();\n     String[] requestedLogFiles \u003d logFiles;\n-    // fetch all the log files for the container\n-    if (fetchAllLogFiles(logFiles)) {\n-      requestedLogFiles \u003d\n-          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n-    }\n-    Client webServiceClient \u003d Client.create();\n-    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n-    System.out.println(containerString);\n-    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-\n-    for (String logFile : requestedLogFiles) {\n-      System.out.println(\"LogType:\" + logFile);\n-      System.out.println(\"Log Upload Time:\"\n-          + Times.format(System.currentTimeMillis()));\n-      System.out.println(\"Log Contents:\");\n-      try {\n-        WebResource webResource \u003d\n-            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n-                + nodeHttpAddress);\n-        ClientResponse response \u003d\n-            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n-              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n-              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n-        System.out.println(response.getEntity(String.class));\n-        System.out.println(\"End of LogType:\" + logFile);\n-      } catch (ClientHandlerException | UniformInterfaceException ex) {\n-        System.err.println(\"Can not find the log file:\" + logFile\n-            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n-            + nodeId);\n+    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n+    String nodeId \u003d request.getNodeId();\n+    String appOwner \u003d request.getAppOwner();\n+    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n+        containerIdStr);\n+    try {\n+      // fetch all the log files for the container\n+      if (fetchAllLogFiles(logFiles)) {\n+        requestedLogFiles \u003d\n+            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       }\n+      Client webServiceClient \u003d Client.create();\n+      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n+      out.println(containerString);\n+      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+\n+      for (String logFile : requestedLogFiles) {\n+        out.println(\"LogType:\" + logFile);\n+        out.println(\"Log Upload Time:\"\n+            + Times.format(System.currentTimeMillis()));\n+        out.println(\"Log Contents:\");\n+        try {\n+          WebResource webResource \u003d\n+              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n+                  + nodeHttpAddress);\n+          ClientResponse response \u003d\n+              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n+                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n+                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n+          out.println(response.getEntity(String.class));\n+          out.println(\"End of LogType:\" + logFile);\n+          out.flush();\n+        } catch (ClientHandlerException | UniformInterfaceException ex) {\n+          System.err.println(\"Can not find the log file:\" + logFile\n+              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n+              + nodeId);\n+        }\n+      }\n+    } finally {\n+      logCliHelper.closePrintStream(out);\n     }\n     // for the case, we have already uploaded partial logs in HDFS\n     logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n-        appOwner, Arrays.asList(requestedLogFiles), false);\n+        appOwner, Arrays.asList(requestedLogFiles), false, localDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, String[] logFiles,\n      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n    String appId \u003d request.getAppId().toString();\n    String containerIdStr \u003d request.getContainerId().toString();\n    String[] requestedLogFiles \u003d logFiles;\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    String appOwner \u003d request.getAppOwner();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      if (fetchAllLogFiles(logFiles)) {\n        requestedLogFiles \u003d\n            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      }\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : requestedLogFiles) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile);\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n        appOwner, Arrays.asList(requestedLogFiles), false, localDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, containerId-ContainerId, nodeHttpAddress-String, nodeId-String, logFiles-String[], logCliHelper-LogCLIHelpers, appOwner-String]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, logFiles-String[], logCliHelper-LogCLIHelpers, localDir-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "14/05/16 12:19 PM",
          "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,51 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n-      ContainerId containerId, String nodeHttpAddress,\n-      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n-      String appOwner) throws IOException {\n-    String appId \u003d containerId.getApplicationAttemptId()\n-        .getApplicationId().toString();\n-    String containerIdStr \u003d containerId.toString();\n+      ContainerLogsRequest request, String[] logFiles,\n+      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n+    String appId \u003d request.getAppId().toString();\n+    String containerIdStr \u003d request.getContainerId().toString();\n     String[] requestedLogFiles \u003d logFiles;\n-    // fetch all the log files for the container\n-    if (fetchAllLogFiles(logFiles)) {\n-      requestedLogFiles \u003d\n-          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n-    }\n-    Client webServiceClient \u003d Client.create();\n-    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n-    System.out.println(containerString);\n-    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-\n-    for (String logFile : requestedLogFiles) {\n-      System.out.println(\"LogType:\" + logFile);\n-      System.out.println(\"Log Upload Time:\"\n-          + Times.format(System.currentTimeMillis()));\n-      System.out.println(\"Log Contents:\");\n-      try {\n-        WebResource webResource \u003d\n-            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n-                + nodeHttpAddress);\n-        ClientResponse response \u003d\n-            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n-              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n-              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n-        System.out.println(response.getEntity(String.class));\n-        System.out.println(\"End of LogType:\" + logFile);\n-      } catch (ClientHandlerException | UniformInterfaceException ex) {\n-        System.err.println(\"Can not find the log file:\" + logFile\n-            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n-            + nodeId);\n+    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n+    String nodeId \u003d request.getNodeId();\n+    String appOwner \u003d request.getAppOwner();\n+    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n+        containerIdStr);\n+    try {\n+      // fetch all the log files for the container\n+      if (fetchAllLogFiles(logFiles)) {\n+        requestedLogFiles \u003d\n+            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n       }\n+      Client webServiceClient \u003d Client.create();\n+      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n+      out.println(containerString);\n+      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+\n+      for (String logFile : requestedLogFiles) {\n+        out.println(\"LogType:\" + logFile);\n+        out.println(\"Log Upload Time:\"\n+            + Times.format(System.currentTimeMillis()));\n+        out.println(\"Log Contents:\");\n+        try {\n+          WebResource webResource \u003d\n+              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n+                  + nodeHttpAddress);\n+          ClientResponse response \u003d\n+              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n+                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n+                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n+          out.println(response.getEntity(String.class));\n+          out.println(\"End of LogType:\" + logFile);\n+          out.flush();\n+        } catch (ClientHandlerException | UniformInterfaceException ex) {\n+          System.err.println(\"Can not find the log file:\" + logFile\n+              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n+              + nodeId);\n+        }\n+      }\n+    } finally {\n+      logCliHelper.closePrintStream(out);\n     }\n     // for the case, we have already uploaded partial logs in HDFS\n     logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n-        appOwner, Arrays.asList(requestedLogFiles), false);\n+        appOwner, Arrays.asList(requestedLogFiles), false, localDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerLogsRequest request, String[] logFiles,\n      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n    String appId \u003d request.getAppId().toString();\n    String containerIdStr \u003d request.getContainerId().toString();\n    String[] requestedLogFiles \u003d logFiles;\n    String nodeHttpAddress \u003d request.getNodeHttpAddress();\n    String nodeId \u003d request.getNodeId();\n    String appOwner \u003d request.getAppOwner();\n    PrintStream out \u003d logCliHelper.createPrintStream(localDir, nodeId,\n        containerIdStr);\n    try {\n      // fetch all the log files for the container\n      if (fetchAllLogFiles(logFiles)) {\n        requestedLogFiles \u003d\n            getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n      }\n      Client webServiceClient \u003d Client.create();\n      String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n      for (String logFile : requestedLogFiles) {\n        out.println(\"LogType:\" + logFile);\n        out.println(\"Log Upload Time:\"\n            + Times.format(System.currentTimeMillis()));\n        out.println(\"Log Contents:\");\n        try {\n          WebResource webResource \u003d\n              webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                  + nodeHttpAddress);\n          ClientResponse response \u003d\n              webResource.path(\"ws\").path(\"v1\").path(\"node\")\n                .path(\"containerlogs\").path(containerIdStr).path(logFile)\n                .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n          out.println(response.getEntity(String.class));\n          out.println(\"End of LogType:\" + logFile);\n          out.flush();\n        } catch (ClientHandlerException | UniformInterfaceException ex) {\n          System.err.println(\"Can not find the log file:\" + logFile\n              + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n              + nodeId);\n        }\n      }\n    } finally {\n      logCliHelper.closePrintStream(out);\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n        appOwner, Arrays.asList(requestedLogFiles), false, localDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 2:16 PM",
      "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
          "commitDate": "04/05/16 2:16 PM",
          "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "27/04/16 3:26 AM",
          "commitNameOld": "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 7.45,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,43 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n-      String appId, String containerIdStr, String nodeHttpAddress,\n+      ContainerId containerId, String nodeHttpAddress,\n       String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n       String appOwner) throws IOException {\n-    String [] requestedLogFiles \u003d logFiles;\n+    String appId \u003d containerId.getApplicationAttemptId()\n+        .getApplicationId().toString();\n+    String containerIdStr \u003d containerId.toString();\n+    String[] requestedLogFiles \u003d logFiles;\n     // fetch all the log files for the container\n     if (fetchAllLogFiles(logFiles)) {\n       requestedLogFiles \u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n     }\n     Client webServiceClient \u003d Client.create();\n     String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n     System.out.println(containerString);\n     System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n     for (String logFile : requestedLogFiles) {\n       System.out.println(\"LogType:\" + logFile);\n       System.out.println(\"Log Upload Time:\"\n           + Times.format(System.currentTimeMillis()));\n       System.out.println(\"Log Contents:\");\n       try {\n         WebResource webResource \u003d\n             webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                 + nodeHttpAddress);\n         ClientResponse response \u003d\n             webResource.path(\"ws\").path(\"v1\").path(\"node\")\n               .path(\"containerlogs\").path(containerIdStr).path(logFile)\n               .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n         System.out.println(response.getEntity(String.class));\n         System.out.println(\"End of LogType:\" + logFile);\n       } catch (ClientHandlerException | UniformInterfaceException ex) {\n-        System.out.println(\"Can not find the log file:\" + logFile\n+        System.err.println(\"Can not find the log file:\" + logFile\n             + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n             + nodeId);\n       }\n     }\n     // for the case, we have already uploaded partial logs in HDFS\n     logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n         appOwner, Arrays.asList(requestedLogFiles), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerId containerId, String nodeHttpAddress,\n      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n      String appOwner) throws IOException {\n    String appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId().toString();\n    String containerIdStr \u003d containerId.toString();\n    String[] requestedLogFiles \u003d logFiles;\n    // fetch all the log files for the container\n    if (fetchAllLogFiles(logFiles)) {\n      requestedLogFiles \u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n    }\n    Client webServiceClient \u003d Client.create();\n    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n    System.out.println(containerString);\n    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n    for (String logFile : requestedLogFiles) {\n      System.out.println(\"LogType:\" + logFile);\n      System.out.println(\"Log Upload Time:\"\n          + Times.format(System.currentTimeMillis()));\n      System.out.println(\"Log Contents:\");\n      try {\n        WebResource webResource \u003d\n            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                + nodeHttpAddress);\n        ClientResponse response \u003d\n            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n        System.out.println(response.getEntity(String.class));\n        System.out.println(\"End of LogType:\" + logFile);\n      } catch (ClientHandlerException | UniformInterfaceException ex) {\n        System.err.println(\"Can not find the log file:\" + logFile\n            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n            + nodeId);\n      }\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n        appOwner, Arrays.asList(requestedLogFiles), false);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, appId-String, containerIdStr-String, nodeHttpAddress-String, nodeId-String, logFiles-String[], logCliHelper-LogCLIHelpers, appOwner-String]",
            "newValue": "[conf-Configuration, containerId-ContainerId, nodeHttpAddress-String, nodeId-String, logFiles-String[], logCliHelper-LogCLIHelpers, appOwner-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
          "commitDate": "04/05/16 2:16 PM",
          "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "27/04/16 3:26 AM",
          "commitNameOld": "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 7.45,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,43 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n-      String appId, String containerIdStr, String nodeHttpAddress,\n+      ContainerId containerId, String nodeHttpAddress,\n       String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n       String appOwner) throws IOException {\n-    String [] requestedLogFiles \u003d logFiles;\n+    String appId \u003d containerId.getApplicationAttemptId()\n+        .getApplicationId().toString();\n+    String containerIdStr \u003d containerId.toString();\n+    String[] requestedLogFiles \u003d logFiles;\n     // fetch all the log files for the container\n     if (fetchAllLogFiles(logFiles)) {\n       requestedLogFiles \u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n     }\n     Client webServiceClient \u003d Client.create();\n     String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n     System.out.println(containerString);\n     System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n     for (String logFile : requestedLogFiles) {\n       System.out.println(\"LogType:\" + logFile);\n       System.out.println(\"Log Upload Time:\"\n           + Times.format(System.currentTimeMillis()));\n       System.out.println(\"Log Contents:\");\n       try {\n         WebResource webResource \u003d\n             webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                 + nodeHttpAddress);\n         ClientResponse response \u003d\n             webResource.path(\"ws\").path(\"v1\").path(\"node\")\n               .path(\"containerlogs\").path(containerIdStr).path(logFile)\n               .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n         System.out.println(response.getEntity(String.class));\n         System.out.println(\"End of LogType:\" + logFile);\n       } catch (ClientHandlerException | UniformInterfaceException ex) {\n-        System.out.println(\"Can not find the log file:\" + logFile\n+        System.err.println(\"Can not find the log file:\" + logFile\n             + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n             + nodeId);\n       }\n     }\n     // for the case, we have already uploaded partial logs in HDFS\n     logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n         appOwner, Arrays.asList(requestedLogFiles), false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      ContainerId containerId, String nodeHttpAddress,\n      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n      String appOwner) throws IOException {\n    String appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId().toString();\n    String containerIdStr \u003d containerId.toString();\n    String[] requestedLogFiles \u003d logFiles;\n    // fetch all the log files for the container\n    if (fetchAllLogFiles(logFiles)) {\n      requestedLogFiles \u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n    }\n    Client webServiceClient \u003d Client.create();\n    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n    System.out.println(containerString);\n    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n    for (String logFile : requestedLogFiles) {\n      System.out.println(\"LogType:\" + logFile);\n      System.out.println(\"Log Upload Time:\"\n          + Times.format(System.currentTimeMillis()));\n      System.out.println(\"Log Contents:\");\n      try {\n        WebResource webResource \u003d\n            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                + nodeHttpAddress);\n        ClientResponse response \u003d\n            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n        System.out.println(response.getEntity(String.class));\n        System.out.println(\"End of LogType:\" + logFile);\n      } catch (ClientHandlerException | UniformInterfaceException ex) {\n        System.err.println(\"Can not find the log file:\" + logFile\n            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n            + nodeId);\n      }\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n        appOwner, Arrays.asList(requestedLogFiles), false);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4966. Improve yarn logs to fetch container logs without specifying nodeId. Contributed by Xuan Gong.\n",
      "commitDate": "27/04/16 3:26 AM",
      "commitName": "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "15/09/15 2:36 PM",
      "commitNameOld": "34ef1a092bcab369bb845481efffb8c47adef53a",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 224.53,
      "commitsBetweenForRepo": 1508,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n       String appId, String containerIdStr, String nodeHttpAddress,\n       String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n       String appOwner) throws IOException {\n     String [] requestedLogFiles \u003d logFiles;\n     // fetch all the log files for the container\n     if (fetchAllLogFiles(logFiles)) {\n       requestedLogFiles \u003d\n           getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n     }\n     Client webServiceClient \u003d Client.create();\n     String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n     System.out.println(containerString);\n     System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n \n     for (String logFile : requestedLogFiles) {\n       System.out.println(\"LogType:\" + logFile);\n       System.out.println(\"Log Upload Time:\"\n           + Times.format(System.currentTimeMillis()));\n       System.out.println(\"Log Contents:\");\n       try {\n         WebResource webResource \u003d\n             webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                 + nodeHttpAddress);\n         ClientResponse response \u003d\n             webResource.path(\"ws\").path(\"v1\").path(\"node\")\n               .path(\"containerlogs\").path(containerIdStr).path(logFile)\n               .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n         System.out.println(response.getEntity(String.class));\n         System.out.println(\"End of LogType:\" + logFile);\n       } catch (ClientHandlerException | UniformInterfaceException ex) {\n         System.out.println(\"Can not find the log file:\" + logFile\n             + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n             + nodeId);\n       }\n     }\n     // for the case, we have already uploaded partial logs in HDFS\n     logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n-      appOwner, Arrays.asList(requestedLogFiles));\n+        appOwner, Arrays.asList(requestedLogFiles), false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      String appId, String containerIdStr, String nodeHttpAddress,\n      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n      String appOwner) throws IOException {\n    String [] requestedLogFiles \u003d logFiles;\n    // fetch all the log files for the container\n    if (fetchAllLogFiles(logFiles)) {\n      requestedLogFiles \u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n    }\n    Client webServiceClient \u003d Client.create();\n    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n    System.out.println(containerString);\n    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n    for (String logFile : requestedLogFiles) {\n      System.out.println(\"LogType:\" + logFile);\n      System.out.println(\"Log Upload Time:\"\n          + Times.format(System.currentTimeMillis()));\n      System.out.println(\"Log Contents:\");\n      try {\n        WebResource webResource \u003d\n            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                + nodeHttpAddress);\n        ClientResponse response \u003d\n            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n        System.out.println(response.getEntity(String.class));\n        System.out.println(\"End of LogType:\" + logFile);\n      } catch (ClientHandlerException | UniformInterfaceException ex) {\n        System.out.println(\"Can not find the log file:\" + logFile\n            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n            + nodeId);\n      }\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n        appOwner, Arrays.asList(requestedLogFiles), false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "34ef1a092bcab369bb845481efffb8c47adef53a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4149. yarn logs -am should provide an option to fetch all the log\nfiles. Contributed by Varun Vasudev\n",
      "commitDate": "15/09/15 2:36 PM",
      "commitName": "34ef1a092bcab369bb845481efffb8c47adef53a",
      "commitAuthor": "Xuan",
      "commitDateOld": "13/04/15 5:29 PM",
      "commitNameOld": "a77d628339afaf2f5a085c73fd81a805b18348c9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 154.88,
      "commitsBetweenForRepo": 1122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n   private void printContainerLogsFromRunningApplication(Configuration conf,\n       String appId, String containerIdStr, String nodeHttpAddress,\n       String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n       String appOwner) throws IOException {\n+    String [] requestedLogFiles \u003d logFiles;\n+    // fetch all the log files for the container\n+    if (fetchAllLogFiles(logFiles)) {\n+      requestedLogFiles \u003d\n+          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n+    }\n     Client webServiceClient \u003d Client.create();\n     String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n     System.out.println(containerString);\n     System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-    for (String logFile : logFiles) {\n+\n+    for (String logFile : requestedLogFiles) {\n       System.out.println(\"LogType:\" + logFile);\n       System.out.println(\"Log Upload Time:\"\n           + Times.format(System.currentTimeMillis()));\n       System.out.println(\"Log Contents:\");\n       try {\n         WebResource webResource \u003d\n             webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                 + nodeHttpAddress);\n         ClientResponse response \u003d\n             webResource.path(\"ws\").path(\"v1\").path(\"node\")\n               .path(\"containerlogs\").path(containerIdStr).path(logFile)\n               .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n         System.out.println(response.getEntity(String.class));\n         System.out.println(\"End of LogType:\" + logFile);\n       } catch (ClientHandlerException | UniformInterfaceException ex) {\n         System.out.println(\"Can not find the log file:\" + logFile\n             + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n             + nodeId);\n       }\n     }\n     // for the case, we have already uploaded partial logs in HDFS\n     logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n-      appOwner, Arrays.asList(logFiles));\n+      appOwner, Arrays.asList(requestedLogFiles));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      String appId, String containerIdStr, String nodeHttpAddress,\n      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n      String appOwner) throws IOException {\n    String [] requestedLogFiles \u003d logFiles;\n    // fetch all the log files for the container\n    if (fetchAllLogFiles(logFiles)) {\n      requestedLogFiles \u003d\n          getContainerLogFiles(getConf(), containerIdStr, nodeHttpAddress);\n    }\n    Client webServiceClient \u003d Client.create();\n    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n    System.out.println(containerString);\n    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n\n    for (String logFile : requestedLogFiles) {\n      System.out.println(\"LogType:\" + logFile);\n      System.out.println(\"Log Upload Time:\"\n          + Times.format(System.currentTimeMillis()));\n      System.out.println(\"Log Contents:\");\n      try {\n        WebResource webResource \u003d\n            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                + nodeHttpAddress);\n        ClientResponse response \u003d\n            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n        System.out.println(response.getEntity(String.class));\n        System.out.println(\"End of LogType:\" + logFile);\n      } catch (ClientHandlerException | UniformInterfaceException ex) {\n        System.out.println(\"Can not find the log file:\" + logFile\n            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n            + nodeId);\n      }\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n      appOwner, Arrays.asList(requestedLogFiles));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "a77d628339afaf2f5a085c73fd81a805b18348c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3347. Improve YARN log command to get AMContainer logs as well as running containers logs. Contributed by Xuan Gong.\n",
      "commitDate": "13/04/15 5:29 PM",
      "commitName": "a77d628339afaf2f5a085c73fd81a805b18348c9",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,33 @@\n+  private void printContainerLogsFromRunningApplication(Configuration conf,\n+      String appId, String containerIdStr, String nodeHttpAddress,\n+      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n+      String appOwner) throws IOException {\n+    Client webServiceClient \u003d Client.create();\n+    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n+    System.out.println(containerString);\n+    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+    for (String logFile : logFiles) {\n+      System.out.println(\"LogType:\" + logFile);\n+      System.out.println(\"Log Upload Time:\"\n+          + Times.format(System.currentTimeMillis()));\n+      System.out.println(\"Log Contents:\");\n+      try {\n+        WebResource webResource \u003d\n+            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n+                + nodeHttpAddress);\n+        ClientResponse response \u003d\n+            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n+              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n+              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n+        System.out.println(response.getEntity(String.class));\n+        System.out.println(\"End of LogType:\" + logFile);\n+      } catch (ClientHandlerException | UniformInterfaceException ex) {\n+        System.out.println(\"Can not find the log file:\" + logFile\n+            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n+            + nodeId);\n+      }\n+    }\n+    // for the case, we have already uploaded partial logs in HDFS\n+    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n+      appOwner, Arrays.asList(logFiles));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printContainerLogsFromRunningApplication(Configuration conf,\n      String appId, String containerIdStr, String nodeHttpAddress,\n      String nodeId, String[] logFiles, LogCLIHelpers logCliHelper,\n      String appOwner) throws IOException {\n    Client webServiceClient \u003d Client.create();\n    String containerString \u003d \"\\n\\nContainer: \" + containerIdStr;\n    System.out.println(containerString);\n    System.out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n    for (String logFile : logFiles) {\n      System.out.println(\"LogType:\" + logFile);\n      System.out.println(\"Log Upload Time:\"\n          + Times.format(System.currentTimeMillis()));\n      System.out.println(\"Log Contents:\");\n      try {\n        WebResource webResource \u003d\n            webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf)\n                + nodeHttpAddress);\n        ClientResponse response \u003d\n            webResource.path(\"ws\").path(\"v1\").path(\"node\")\n              .path(\"containerlogs\").path(containerIdStr).path(logFile)\n              .accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\n        System.out.println(response.getEntity(String.class));\n        System.out.println(\"End of LogType:\" + logFile);\n      } catch (ClientHandlerException | UniformInterfaceException ex) {\n        System.out.println(\"Can not find the log file:\" + logFile\n            + \" for the container:\" + containerIdStr + \" in NodeManager:\"\n            + nodeId);\n      }\n    }\n    // for the case, we have already uploaded partial logs in HDFS\n    logCliHelper.dumpAContainersLogsForALogType(appId, containerIdStr, nodeId,\n      appOwner, Arrays.asList(logFiles));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}