{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "assignNodeLocalContainers",
  "functionId": "assignNodeLocalContainers___node-FiCaSchedulerNode__application-FifoAppAttempt__schedulerKey-SchedulerRequestKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 614,
  "functionEndLine": 634,
  "numCommitsSeen": 327,
  "timeTaken": 10972,
  "changeHistory": [
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
    "c2592021f36b9dd97b4c9faf7a7a66e021a49694",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "5183e881097b37b723f07f4d6af06721a326bea1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yparameterchange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": "Ybodychange",
    "c2592021f36b9dd97b4c9faf7a7a66e021a49694": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "5183e881097b37b723f07f4d6af06721a326bea1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,21 @@\n   private int assignNodeLocalContainers(FiCaSchedulerNode node, \n       FifoAppAttempt application, SchedulerRequestKey schedulerKey) {\n     int assignedContainers \u003d 0;\n-    ResourceRequest request \u003d\n-        application.getResourceRequest(schedulerKey, node.getNodeName());\n-    if (request !\u003d null) {\n+    PendingAsk nodeLocalAsk \u003d application.getPendingAsk(schedulerKey,\n+        node.getNodeName());\n+    if (nodeLocalAsk.getCount() \u003e 0) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n-      ResourceRequest rackRequest \u003d\n-          application.getResourceRequest(schedulerKey,\n-              node.getRMNode().getRackName());\n-      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n+      if (application.getOutstandingAsksCount(schedulerKey,\n+          node.getRackName()) \u003c\u003d 0) {\n         return 0;\n       }\n-      \n-      int assignableContainers \u003d \n-        Math.min(\n-            getMaxAllocatableContainers(application, schedulerKey, node,\n-                NodeType.NODE_LOCAL), \n-                request.getNumContainers());\n+\n+      int assignableContainers \u003d Math.min(\n+          getMaxAllocatableContainers(application, schedulerKey, node,\n+              NodeType.NODE_LOCAL), nodeLocalAsk.getCount());\n       assignedContainers \u003d \n-        assignContainer(node, application, schedulerKey,\n-            assignableContainers, request, NodeType.NODE_LOCAL);\n+        assignContainer(node, application, schedulerKey, assignableContainers,\n+            nodeLocalAsk.getPerAllocationResource(), NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FifoAppAttempt application, SchedulerRequestKey schedulerKey) {\n    int assignedContainers \u003d 0;\n    PendingAsk nodeLocalAsk \u003d application.getPendingAsk(schedulerKey,\n        node.getNodeName());\n    if (nodeLocalAsk.getCount() \u003e 0) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      if (application.getOutstandingAsksCount(schedulerKey,\n          node.getRackName()) \u003c\u003d 0) {\n        return 0;\n      }\n\n      int assignableContainers \u003d Math.min(\n          getMaxAllocatableContainers(application, schedulerKey, node,\n              NodeType.NODE_LOCAL), nodeLocalAsk.getCount());\n      assignedContainers \u003d \n        assignContainer(node, application, schedulerKey, assignableContainers,\n            nodeLocalAsk.getPerAllocationResource(), NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/10/16 9:17 PM",
      "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.58,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private int assignNodeLocalContainers(FiCaSchedulerNode node, \n-      FiCaSchedulerApp application, SchedulerRequestKey schedulerKey) {\n+      FifoAppAttempt application, SchedulerRequestKey schedulerKey) {\n     int assignedContainers \u003d 0;\n     ResourceRequest request \u003d\n         application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (request !\u003d null) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n       ResourceRequest rackRequest \u003d\n           application.getResourceRequest(schedulerKey,\n               node.getRMNode().getRackName());\n       if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n         return 0;\n       }\n       \n       int assignableContainers \u003d \n         Math.min(\n             getMaxAllocatableContainers(application, schedulerKey, node,\n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n         assignContainer(node, application, schedulerKey,\n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FifoAppAttempt application, SchedulerRequestKey schedulerKey) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(schedulerKey,\n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, schedulerKey, node,\n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, schedulerKey,\n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, schedulerKey-SchedulerRequestKey]",
        "newValue": "[node-FiCaSchedulerNode, application-FifoAppAttempt, schedulerKey-SchedulerRequestKey]"
      }
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private int assignNodeLocalContainers(FiCaSchedulerNode node, \n-      FiCaSchedulerApp application, Priority priority) {\n+      FiCaSchedulerApp application, SchedulerRequestKey schedulerKey) {\n     int assignedContainers \u003d 0;\n-    ResourceRequest request \u003d \n-      application.getResourceRequest(priority, node.getNodeName());\n+    ResourceRequest request \u003d\n+        application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (request !\u003d null) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n       ResourceRequest rackRequest \u003d\n-          application.getResourceRequest(priority, \n+          application.getResourceRequest(schedulerKey,\n               node.getRMNode().getRackName());\n       if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n         return 0;\n       }\n       \n       int assignableContainers \u003d \n         Math.min(\n-            getMaxAllocatableContainers(application, priority, node, \n+            getMaxAllocatableContainers(application, schedulerKey, node,\n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n-        assignContainer(node, application, priority, \n+        assignContainer(node, application, schedulerKey,\n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FiCaSchedulerApp application, SchedulerRequestKey schedulerKey) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(schedulerKey,\n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, schedulerKey, node,\n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, schedulerKey,\n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority]",
            "newValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, schedulerKey-SchedulerRequestKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   private int assignNodeLocalContainers(FiCaSchedulerNode node, \n-      FiCaSchedulerApp application, Priority priority) {\n+      FiCaSchedulerApp application, SchedulerRequestKey schedulerKey) {\n     int assignedContainers \u003d 0;\n-    ResourceRequest request \u003d \n-      application.getResourceRequest(priority, node.getNodeName());\n+    ResourceRequest request \u003d\n+        application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (request !\u003d null) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n       ResourceRequest rackRequest \u003d\n-          application.getResourceRequest(priority, \n+          application.getResourceRequest(schedulerKey,\n               node.getRMNode().getRackName());\n       if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n         return 0;\n       }\n       \n       int assignableContainers \u003d \n         Math.min(\n-            getMaxAllocatableContainers(application, priority, node, \n+            getMaxAllocatableContainers(application, schedulerKey, node,\n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n-        assignContainer(node, application, priority, \n+        assignContainer(node, application, schedulerKey,\n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FiCaSchedulerApp application, SchedulerRequestKey schedulerKey) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(schedulerKey,\n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, schedulerKey, node,\n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, schedulerKey,\n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1008. MiniYARNCluster with multiple nodemanagers, all nodes have same key for allocations. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 8:39 AM",
      "commitName": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/06/13 1:18 PM",
      "commitNameOld": "8eb3be63f598daae01f0a0c09eab5086881f153d",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 57.81,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private int assignNodeLocalContainers(FiCaSchedulerNode node, \n       FiCaSchedulerApp application, Priority priority) {\n     int assignedContainers \u003d 0;\n     ResourceRequest request \u003d \n-      application.getResourceRequest(priority, node.getHostName());\n+      application.getResourceRequest(priority, node.getNodeName());\n     if (request !\u003d null) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n       ResourceRequest rackRequest \u003d\n           application.getResourceRequest(priority, \n               node.getRMNode().getRackName());\n       if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n         return 0;\n       }\n       \n       int assignableContainers \u003d \n         Math.min(\n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n         assignContainer(node, application, priority, \n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FiCaSchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getNodeName());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(priority, \n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "c2592021f36b9dd97b4c9faf7a7a66e021a49694": {
      "type": "Ybodychange",
      "commitMessage": "YARN-412. Fixed FifoScheduler to check hostname of a NodeManager rather than its host:port during scheduling which caused incorrect locality for containers. Contributed by Roger Hoover.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467244 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/04/13 5:12 AM",
      "commitName": "c2592021f36b9dd97b4c9faf7a7a66e021a49694",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "05/04/13 10:45 AM",
      "commitNameOld": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private int assignNodeLocalContainers(FiCaSchedulerNode node, \n       FiCaSchedulerApp application, Priority priority) {\n     int assignedContainers \u003d 0;\n     ResourceRequest request \u003d \n-      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n+      application.getResourceRequest(priority, node.getHostName());\n     if (request !\u003d null) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n       ResourceRequest rackRequest \u003d\n           application.getResourceRequest(priority, \n               node.getRMNode().getRackName());\n       if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n         return 0;\n       }\n       \n       int assignableContainers \u003d \n         Math.min(\n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n         assignContainer(node, application, priority, \n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FiCaSchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getHostName());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(priority, \n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FiCaSchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(priority, \n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/07/12 1:53 PM",
      "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-  private int assignNodeLocalContainers(SchedulerNode node, \n-      SchedulerApp application, Priority priority) {\n+  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n+      FiCaSchedulerApp application, Priority priority) {\n     int assignedContainers \u003d 0;\n     ResourceRequest request \u003d \n       application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n     if (request !\u003d null) {\n       // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n       ResourceRequest rackRequest \u003d\n           application.getResourceRequest(priority, \n               node.getRMNode().getRackName());\n       if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n         return 0;\n       }\n       \n       int assignableContainers \u003d \n         Math.min(\n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n         assignContainer(node, application, priority, \n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(FiCaSchedulerNode node, \n      FiCaSchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(priority, \n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldValue": "[node-SchedulerNode, application-SchedulerApp, priority-Priority]",
        "newValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority]"
      }
    },
    "5183e881097b37b723f07f4d6af06721a326bea1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3005. Fix both FifoScheduler and CapacityScheduler to correctly enforce locality constraints.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170879 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/11 3:46 PM",
      "commitName": "5183e881097b37b723f07f4d6af06721a326bea1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,25 @@\n   private int assignNodeLocalContainers(SchedulerNode node, \n       SchedulerApp application, Priority priority) {\n     int assignedContainers \u003d 0;\n     ResourceRequest request \u003d \n       application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n     if (request !\u003d null) {\n+      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n+      ResourceRequest rackRequest \u003d\n+          application.getResourceRequest(priority, \n+              node.getRMNode().getRackName());\n+      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n+        return 0;\n+      }\n+      \n       int assignableContainers \u003d \n         Math.min(\n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.NODE_LOCAL), \n                 request.getNumContainers());\n       assignedContainers \u003d \n         assignContainer(node, application, priority, \n             assignableContainers, request, NodeType.NODE_LOCAL);\n     }\n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(SchedulerNode node, \n      SchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n    if (request !\u003d null) {\n      // Don\u0027t allocate on this node if we don\u0027t need containers on this rack\n      ResourceRequest rackRequest \u003d\n          application.getResourceRequest(priority, \n              node.getRMNode().getRackName());\n      if (rackRequest \u003d\u003d null || rackRequest.getNumContainers() \u003c\u003d 0) {\n        return 0;\n      }\n      \n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int assignNodeLocalContainers(SchedulerNode node, \n      SchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n    if (request !\u003d null) {\n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  private int assignNodeLocalContainers(SchedulerNode node, \n+      SchedulerApp application, Priority priority) {\n+    int assignedContainers \u003d 0;\n+    ResourceRequest request \u003d \n+      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n+    if (request !\u003d null) {\n+      int assignableContainers \u003d \n+        Math.min(\n+            getMaxAllocatableContainers(application, priority, node, \n+                NodeType.NODE_LOCAL), \n+                request.getNumContainers());\n+      assignedContainers \u003d \n+        assignContainer(node, application, priority, \n+            assignableContainers, request, NodeType.NODE_LOCAL);\n+    }\n+    return assignedContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignNodeLocalContainers(SchedulerNode node, \n      SchedulerApp application, Priority priority) {\n    int assignedContainers \u003d 0;\n    ResourceRequest request \u003d \n      application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n    if (request !\u003d null) {\n      int assignableContainers \u003d \n        Math.min(\n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.NODE_LOCAL), \n                request.getNumContainers());\n      assignedContainers \u003d \n        assignContainer(node, application, priority, \n            assignableContainers, request, NodeType.NODE_LOCAL);\n    }\n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}