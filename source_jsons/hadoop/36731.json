{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppLogAggregationStatusBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppLogAggregationStatusBlock.java",
  "functionStartLine": 64,
  "functionEndLine": 161,
  "numCommitsSeen": 5,
  "timeTaken": 1915,
  "changeHistory": [
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1",
    "92431c961741747b5d6442f4025016d48d9a6863"
  ],
  "changeHistoryShort": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Ybodychange",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": "Ybodychange",
    "92431c961741747b5d6442f4025016d48d9a6863": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/05/15 10:58 AM",
      "commitNameOld": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 805.26,
      "commitsBetweenForRepo": 5373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,98 @@\n   protected void render(Block html) {\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appId;\n     try {\n       appId \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     setTitle(join(\"Application \", aid));\n \n     // Add LogAggregationStatus description table\n     // to explain the meaning of different LogAggregationStatus\n     DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n     TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n         div_description.table(\"#LogAggregationStatusDecription\");\n     table_description.\n       tr().\n         th(_TH, \"Log Aggregation Status\").\n         th(_TH, \"Description\").\n-      _();\n+        __();\n     table_description.tr().td(LogAggregationStatus.DISABLED.name())\n-      .td(\"Log Aggregation is Disabled.\")._();\n+      .td(\"Log Aggregation is Disabled.\").__();\n     table_description.tr().td(LogAggregationStatus.NOT_START.name())\n-      .td(\"Log Aggregation does not Start.\")._();\n+      .td(\"Log Aggregation does not Start.\").__();\n     table_description.tr().td(LogAggregationStatus.RUNNING.name())\n-      .td(\"Log Aggregation is Running.\")._();\n+      .td(\"Log Aggregation is Running.\").__();\n     table_description.tr().td(LogAggregationStatus.RUNNING_WITH_FAILURE.name())\n       .td(\"Log Aggregation is Running, but has failures \"\n-          + \"in previous cycles\")._();\n+          + \"in previous cycles\").__();\n     table_description.tr().td(LogAggregationStatus.SUCCEEDED.name())\n       .td(\"Log Aggregation is Succeeded. All of the logs have been \"\n-          + \"aggregated successfully.\")._();\n+          + \"aggregated successfully.\").__();\n     table_description.tr().td(LogAggregationStatus.FAILED.name())\n       .td(\"Log Aggregation is Failed. At least one of the logs \"\n-          + \"have not been aggregated.\")._();\n+          + \"have not been aggregated.\").__();\n     table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n       .td(\"The application is finished, but the log aggregation status is \"\n           + \"not updated for a long time. Not sure whether the log aggregation \"\n-          + \"is finished or not.\")._();\n-    table_description._();\n-    div_description._();\n+          + \"is finished or not.\").__();\n+    table_description.__();\n+    div_description.__();\n \n     RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n     // Application Log aggregation status Table\n     DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n     TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n         div.h3(\n           \"Log Aggregation: \"\n               + (rmApp \u003d\u003d null ? \"N/A\" : rmApp\n                 .getLogAggregationStatusForAppReport() \u003d\u003d null ? \"N/A\" : rmApp\n                 .getLogAggregationStatusForAppReport().name())).table(\n           \"#LogAggregationStatus\");\n \n     int maxLogAggregationDiagnosticsInMemory \u003d conf.getInt(\n       YarnConfiguration.RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY,\n       YarnConfiguration.DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY);\n     table\n       .tr()\n       .th(_TH, \"NodeId\")\n       .th(_TH, \"Log Aggregation Status\")\n       .th(_TH, \"Last \"\n           + maxLogAggregationDiagnosticsInMemory + \" Diagnostic Messages\")\n       .th(_TH, \"Last \"\n-          + maxLogAggregationDiagnosticsInMemory + \" Failure Messages\")._();\n+          + maxLogAggregationDiagnosticsInMemory + \" Failure Messages\").__();\n \n     if (rmApp !\u003d null) {\n       Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n           rmApp.getLogAggregationReportsForApp();\n       if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n         for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n             logAggregationReports.entrySet()) {\n           LogAggregationStatus status \u003d\n               report.getValue() \u003d\u003d null ? null : report.getValue()\n                 .getLogAggregationStatus();\n           String message \u003d\n               report.getValue() \u003d\u003d null ? null : report.getValue()\n                 .getDiagnosticMessage();\n           String failureMessage \u003d\n               report.getValue() \u003d\u003d null ? null : ((RMAppImpl)rmApp)\n                   .getLogAggregationFailureMessagesForNM(report.getKey());\n           table.tr()\n             .td(report.getKey().toString())\n             .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n             .td(message \u003d\u003d null ? \"N/A\" : message)\n-            .td(failureMessage \u003d\u003d null ? \"N/A\" : failureMessage)._();\n+            .td(failureMessage \u003d\u003d null ? \"N/A\" : failureMessage).__();\n         }\n       }\n     }\n-    table._();\n-    div._();\n+    table.__();\n+    div.__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appId;\n    try {\n      appId \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    setTitle(join(\"Application \", aid));\n\n    // Add LogAggregationStatus description table\n    // to explain the meaning of different LogAggregationStatus\n    DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n        div_description.table(\"#LogAggregationStatusDecription\");\n    table_description.\n      tr().\n        th(_TH, \"Log Aggregation Status\").\n        th(_TH, \"Description\").\n        __();\n    table_description.tr().td(LogAggregationStatus.DISABLED.name())\n      .td(\"Log Aggregation is Disabled.\").__();\n    table_description.tr().td(LogAggregationStatus.NOT_START.name())\n      .td(\"Log Aggregation does not Start.\").__();\n    table_description.tr().td(LogAggregationStatus.RUNNING.name())\n      .td(\"Log Aggregation is Running.\").__();\n    table_description.tr().td(LogAggregationStatus.RUNNING_WITH_FAILURE.name())\n      .td(\"Log Aggregation is Running, but has failures \"\n          + \"in previous cycles\").__();\n    table_description.tr().td(LogAggregationStatus.SUCCEEDED.name())\n      .td(\"Log Aggregation is Succeeded. All of the logs have been \"\n          + \"aggregated successfully.\").__();\n    table_description.tr().td(LogAggregationStatus.FAILED.name())\n      .td(\"Log Aggregation is Failed. At least one of the logs \"\n          + \"have not been aggregated.\").__();\n    table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n      .td(\"The application is finished, but the log aggregation status is \"\n          + \"not updated for a long time. Not sure whether the log aggregation \"\n          + \"is finished or not.\").__();\n    table_description.__();\n    div_description.__();\n\n    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n    // Application Log aggregation status Table\n    DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n        div.h3(\n          \"Log Aggregation: \"\n              + (rmApp \u003d\u003d null ? \"N/A\" : rmApp\n                .getLogAggregationStatusForAppReport() \u003d\u003d null ? \"N/A\" : rmApp\n                .getLogAggregationStatusForAppReport().name())).table(\n          \"#LogAggregationStatus\");\n\n    int maxLogAggregationDiagnosticsInMemory \u003d conf.getInt(\n      YarnConfiguration.RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY,\n      YarnConfiguration.DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY);\n    table\n      .tr()\n      .th(_TH, \"NodeId\")\n      .th(_TH, \"Log Aggregation Status\")\n      .th(_TH, \"Last \"\n          + maxLogAggregationDiagnosticsInMemory + \" Diagnostic Messages\")\n      .th(_TH, \"Last \"\n          + maxLogAggregationDiagnosticsInMemory + \" Failure Messages\").__();\n\n    if (rmApp !\u003d null) {\n      Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n          rmApp.getLogAggregationReportsForApp();\n      if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n            logAggregationReports.entrySet()) {\n          LogAggregationStatus status \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getLogAggregationStatus();\n          String message \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getDiagnosticMessage();\n          String failureMessage \u003d\n              report.getValue() \u003d\u003d null ? null : ((RMAppImpl)rmApp)\n                  .getLogAggregationFailureMessagesForNM(report.getKey());\n          table.tr()\n            .td(report.getKey().toString())\n            .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n            .td(message \u003d\u003d null ? \"N/A\" : message)\n            .td(failureMessage \u003d\u003d null ? \"N/A\" : failureMessage).__();\n        }\n      }\n    }\n    table.__();\n    div.__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppLogAggregationStatusBlock.java",
      "extendedDetails": {}
    },
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "17/04/15 1:18 PM",
      "commitNameOld": "1db355a875c3ecc40a244045c6812e00c8d36ef1",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 26.9,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,98 @@\n   protected void render(Block html) {\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appId;\n     try {\n       appId \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     setTitle(join(\"Application \", aid));\n \n     // Add LogAggregationStatus description table\n     // to explain the meaning of different LogAggregationStatus\n     DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n     TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n         div_description.table(\"#LogAggregationStatusDecription\");\n     table_description.\n       tr().\n         th(_TH, \"Log Aggregation Status\").\n         th(_TH, \"Description\").\n       _();\n     table_description.tr().td(LogAggregationStatus.DISABLED.name())\n       .td(\"Log Aggregation is Disabled.\")._();\n     table_description.tr().td(LogAggregationStatus.NOT_START.name())\n       .td(\"Log Aggregation does not Start.\")._();\n     table_description.tr().td(LogAggregationStatus.RUNNING.name())\n       .td(\"Log Aggregation is Running.\")._();\n+    table_description.tr().td(LogAggregationStatus.RUNNING_WITH_FAILURE.name())\n+      .td(\"Log Aggregation is Running, but has failures \"\n+          + \"in previous cycles\")._();\n     table_description.tr().td(LogAggregationStatus.SUCCEEDED.name())\n       .td(\"Log Aggregation is Succeeded. All of the logs have been \"\n           + \"aggregated successfully.\")._();\n     table_description.tr().td(LogAggregationStatus.FAILED.name())\n       .td(\"Log Aggregation is Failed. At least one of the logs \"\n           + \"have not been aggregated.\")._();\n     table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n       .td(\"The application is finished, but the log aggregation status is \"\n           + \"not updated for a long time. Not sure whether the log aggregation \"\n           + \"is finished or not.\")._();\n     table_description._();\n     div_description._();\n \n-    boolean logAggregationEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n-          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n+    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n     // Application Log aggregation status Table\n     DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n     TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n         div.h3(\n           \"Log Aggregation: \"\n-              + (logAggregationEnabled ? \"Enabled\" : \"Disabled\")).table(\n+              + (rmApp \u003d\u003d null ? \"N/A\" : rmApp\n+                .getLogAggregationStatusForAppReport() \u003d\u003d null ? \"N/A\" : rmApp\n+                .getLogAggregationStatusForAppReport().name())).table(\n           \"#LogAggregationStatus\");\n-    table.\n-      tr().\n-        th(_TH, \"NodeId\").\n-        th(_TH, \"Log Aggregation Status\").\n-        th(_TH, \"Diagnostis Message\").\n-      _();\n \n-    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n+    int maxLogAggregationDiagnosticsInMemory \u003d conf.getInt(\n+      YarnConfiguration.RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY,\n+      YarnConfiguration.DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY);\n+    table\n+      .tr()\n+      .th(_TH, \"NodeId\")\n+      .th(_TH, \"Log Aggregation Status\")\n+      .th(_TH, \"Last \"\n+          + maxLogAggregationDiagnosticsInMemory + \" Diagnostic Messages\")\n+      .th(_TH, \"Last \"\n+          + maxLogAggregationDiagnosticsInMemory + \" Failure Messages\")._();\n+\n     if (rmApp !\u003d null) {\n       Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n           rmApp.getLogAggregationReportsForApp();\n       if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n         for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n             logAggregationReports.entrySet()) {\n           LogAggregationStatus status \u003d\n               report.getValue() \u003d\u003d null ? null : report.getValue()\n                 .getLogAggregationStatus();\n           String message \u003d\n               report.getValue() \u003d\u003d null ? null : report.getValue()\n                 .getDiagnosticMessage();\n+          String failureMessage \u003d\n+              report.getValue() \u003d\u003d null ? null : ((RMAppImpl)rmApp)\n+                  .getLogAggregationFailureMessagesForNM(report.getKey());\n           table.tr()\n             .td(report.getKey().toString())\n             .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n-            .td(message \u003d\u003d null ? \"N/A\" : message)._();\n+            .td(message \u003d\u003d null ? \"N/A\" : message)\n+            .td(failureMessage \u003d\u003d null ? \"N/A\" : failureMessage)._();\n         }\n       }\n     }\n     table._();\n     div._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appId;\n    try {\n      appId \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    setTitle(join(\"Application \", aid));\n\n    // Add LogAggregationStatus description table\n    // to explain the meaning of different LogAggregationStatus\n    DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n        div_description.table(\"#LogAggregationStatusDecription\");\n    table_description.\n      tr().\n        th(_TH, \"Log Aggregation Status\").\n        th(_TH, \"Description\").\n      _();\n    table_description.tr().td(LogAggregationStatus.DISABLED.name())\n      .td(\"Log Aggregation is Disabled.\")._();\n    table_description.tr().td(LogAggregationStatus.NOT_START.name())\n      .td(\"Log Aggregation does not Start.\")._();\n    table_description.tr().td(LogAggregationStatus.RUNNING.name())\n      .td(\"Log Aggregation is Running.\")._();\n    table_description.tr().td(LogAggregationStatus.RUNNING_WITH_FAILURE.name())\n      .td(\"Log Aggregation is Running, but has failures \"\n          + \"in previous cycles\")._();\n    table_description.tr().td(LogAggregationStatus.SUCCEEDED.name())\n      .td(\"Log Aggregation is Succeeded. All of the logs have been \"\n          + \"aggregated successfully.\")._();\n    table_description.tr().td(LogAggregationStatus.FAILED.name())\n      .td(\"Log Aggregation is Failed. At least one of the logs \"\n          + \"have not been aggregated.\")._();\n    table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n      .td(\"The application is finished, but the log aggregation status is \"\n          + \"not updated for a long time. Not sure whether the log aggregation \"\n          + \"is finished or not.\")._();\n    table_description._();\n    div_description._();\n\n    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n    // Application Log aggregation status Table\n    DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n        div.h3(\n          \"Log Aggregation: \"\n              + (rmApp \u003d\u003d null ? \"N/A\" : rmApp\n                .getLogAggregationStatusForAppReport() \u003d\u003d null ? \"N/A\" : rmApp\n                .getLogAggregationStatusForAppReport().name())).table(\n          \"#LogAggregationStatus\");\n\n    int maxLogAggregationDiagnosticsInMemory \u003d conf.getInt(\n      YarnConfiguration.RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY,\n      YarnConfiguration.DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY);\n    table\n      .tr()\n      .th(_TH, \"NodeId\")\n      .th(_TH, \"Log Aggregation Status\")\n      .th(_TH, \"Last \"\n          + maxLogAggregationDiagnosticsInMemory + \" Diagnostic Messages\")\n      .th(_TH, \"Last \"\n          + maxLogAggregationDiagnosticsInMemory + \" Failure Messages\")._();\n\n    if (rmApp !\u003d null) {\n      Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n          rmApp.getLogAggregationReportsForApp();\n      if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n            logAggregationReports.entrySet()) {\n          LogAggregationStatus status \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getLogAggregationStatus();\n          String message \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getDiagnosticMessage();\n          String failureMessage \u003d\n              report.getValue() \u003d\u003d null ? null : ((RMAppImpl)rmApp)\n                  .getLogAggregationFailureMessagesForNM(report.getKey());\n          table.tr()\n            .td(report.getKey().toString())\n            .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n            .td(message \u003d\u003d null ? \"N/A\" : message)\n            .td(failureMessage \u003d\u003d null ? \"N/A\" : failureMessage)._();\n        }\n      }\n    }\n    table._();\n    div._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppLogAggregationStatusBlock.java",
      "extendedDetails": {}
    },
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1402. Update related Web UI and CLI with exposing client API to check log aggregation status. Contributed by Xuan Gong.\n",
      "commitDate": "17/04/15 1:18 PM",
      "commitName": "1db355a875c3ecc40a244045c6812e00c8d36ef1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,86 @@\n   protected void render(Block html) {\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appId;\n     try {\n       appId \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     setTitle(join(\"Application \", aid));\n \n     // Add LogAggregationStatus description table\n     // to explain the meaning of different LogAggregationStatus\n     DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n     TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n         div_description.table(\"#LogAggregationStatusDecription\");\n     table_description.\n       tr().\n         th(_TH, \"Log Aggregation Status\").\n         th(_TH, \"Description\").\n       _();\n     table_description.tr().td(LogAggregationStatus.DISABLED.name())\n       .td(\"Log Aggregation is Disabled.\")._();\n     table_description.tr().td(LogAggregationStatus.NOT_START.name())\n       .td(\"Log Aggregation does not Start.\")._();\n     table_description.tr().td(LogAggregationStatus.RUNNING.name())\n       .td(\"Log Aggregation is Running.\")._();\n-    table_description.tr().td(LogAggregationStatus.FINISHED.name())\n-      .td(\"Log Aggregation is Finished. All of the logs have been \"\n+    table_description.tr().td(LogAggregationStatus.SUCCEEDED.name())\n+      .td(\"Log Aggregation is Succeeded. All of the logs have been \"\n           + \"aggregated successfully.\")._();\n     table_description.tr().td(LogAggregationStatus.FAILED.name())\n       .td(\"Log Aggregation is Failed. At least one of the logs \"\n           + \"have not been aggregated.\")._();\n     table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n-      .td(\"Does not get the Log aggregation status for a long time. \"\n-          + \"Not sure what is the current Log Aggregation Status.\")._();\n+      .td(\"The application is finished, but the log aggregation status is \"\n+          + \"not updated for a long time. Not sure whether the log aggregation \"\n+          + \"is finished or not.\")._();\n     table_description._();\n     div_description._();\n \n     boolean logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n     // Application Log aggregation status Table\n     DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n     TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n         div.h3(\n           \"Log Aggregation: \"\n               + (logAggregationEnabled ? \"Enabled\" : \"Disabled\")).table(\n           \"#LogAggregationStatus\");\n     table.\n       tr().\n         th(_TH, \"NodeId\").\n         th(_TH, \"Log Aggregation Status\").\n         th(_TH, \"Diagnostis Message\").\n       _();\n \n     RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n     if (rmApp !\u003d null) {\n       Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n           rmApp.getLogAggregationReportsForApp();\n       if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n         for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n             logAggregationReports.entrySet()) {\n           LogAggregationStatus status \u003d\n               report.getValue() \u003d\u003d null ? null : report.getValue()\n                 .getLogAggregationStatus();\n           String message \u003d\n               report.getValue() \u003d\u003d null ? null : report.getValue()\n                 .getDiagnosticMessage();\n           table.tr()\n             .td(report.getKey().toString())\n             .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n             .td(message \u003d\u003d null ? \"N/A\" : message)._();\n         }\n       }\n     }\n     table._();\n     div._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appId;\n    try {\n      appId \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    setTitle(join(\"Application \", aid));\n\n    // Add LogAggregationStatus description table\n    // to explain the meaning of different LogAggregationStatus\n    DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n        div_description.table(\"#LogAggregationStatusDecription\");\n    table_description.\n      tr().\n        th(_TH, \"Log Aggregation Status\").\n        th(_TH, \"Description\").\n      _();\n    table_description.tr().td(LogAggregationStatus.DISABLED.name())\n      .td(\"Log Aggregation is Disabled.\")._();\n    table_description.tr().td(LogAggregationStatus.NOT_START.name())\n      .td(\"Log Aggregation does not Start.\")._();\n    table_description.tr().td(LogAggregationStatus.RUNNING.name())\n      .td(\"Log Aggregation is Running.\")._();\n    table_description.tr().td(LogAggregationStatus.SUCCEEDED.name())\n      .td(\"Log Aggregation is Succeeded. All of the logs have been \"\n          + \"aggregated successfully.\")._();\n    table_description.tr().td(LogAggregationStatus.FAILED.name())\n      .td(\"Log Aggregation is Failed. At least one of the logs \"\n          + \"have not been aggregated.\")._();\n    table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n      .td(\"The application is finished, but the log aggregation status is \"\n          + \"not updated for a long time. Not sure whether the log aggregation \"\n          + \"is finished or not.\")._();\n    table_description._();\n    div_description._();\n\n    boolean logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n    // Application Log aggregation status Table\n    DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n        div.h3(\n          \"Log Aggregation: \"\n              + (logAggregationEnabled ? \"Enabled\" : \"Disabled\")).table(\n          \"#LogAggregationStatus\");\n    table.\n      tr().\n        th(_TH, \"NodeId\").\n        th(_TH, \"Log Aggregation Status\").\n        th(_TH, \"Diagnostis Message\").\n      _();\n\n    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n    if (rmApp !\u003d null) {\n      Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n          rmApp.getLogAggregationReportsForApp();\n      if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n            logAggregationReports.entrySet()) {\n          LogAggregationStatus status \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getLogAggregationStatus();\n          String message \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getDiagnosticMessage();\n          table.tr()\n            .td(report.getKey().toString())\n            .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n            .td(message \u003d\u003d null ? \"N/A\" : message)._();\n        }\n      }\n    }\n    table._();\n    div._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppLogAggregationStatusBlock.java",
      "extendedDetails": {}
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,85 @@\n+  protected void render(Block html) {\n+    String aid \u003d $(APPLICATION_ID);\n+    if (aid.isEmpty()) {\n+      puts(\"Bad request: requires Application ID\");\n+      return;\n+    }\n+\n+    ApplicationId appId;\n+    try {\n+      appId \u003d Apps.toAppID(aid);\n+    } catch (Exception e) {\n+      puts(\"Invalid Application ID: \" + aid);\n+      return;\n+    }\n+\n+    setTitle(join(\"Application \", aid));\n+\n+    // Add LogAggregationStatus description table\n+    // to explain the meaning of different LogAggregationStatus\n+    DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n+    TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n+        div_description.table(\"#LogAggregationStatusDecription\");\n+    table_description.\n+      tr().\n+        th(_TH, \"Log Aggregation Status\").\n+        th(_TH, \"Description\").\n+      _();\n+    table_description.tr().td(LogAggregationStatus.DISABLED.name())\n+      .td(\"Log Aggregation is Disabled.\")._();\n+    table_description.tr().td(LogAggregationStatus.NOT_START.name())\n+      .td(\"Log Aggregation does not Start.\")._();\n+    table_description.tr().td(LogAggregationStatus.RUNNING.name())\n+      .td(\"Log Aggregation is Running.\")._();\n+    table_description.tr().td(LogAggregationStatus.FINISHED.name())\n+      .td(\"Log Aggregation is Finished. All of the logs have been \"\n+          + \"aggregated successfully.\")._();\n+    table_description.tr().td(LogAggregationStatus.FAILED.name())\n+      .td(\"Log Aggregation is Failed. At least one of the logs \"\n+          + \"have not been aggregated.\")._();\n+    table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n+      .td(\"Does not get the Log aggregation status for a long time. \"\n+          + \"Not sure what is the current Log Aggregation Status.\")._();\n+    table_description._();\n+    div_description._();\n+\n+    boolean logAggregationEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n+          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n+    // Application Log aggregation status Table\n+    DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n+    TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n+        div.h3(\n+          \"Log Aggregation: \"\n+              + (logAggregationEnabled ? \"Enabled\" : \"Disabled\")).table(\n+          \"#LogAggregationStatus\");\n+    table.\n+      tr().\n+        th(_TH, \"NodeId\").\n+        th(_TH, \"Log Aggregation Status\").\n+        th(_TH, \"Diagnostis Message\").\n+      _();\n+\n+    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n+    if (rmApp !\u003d null) {\n+      Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n+          rmApp.getLogAggregationReportsForApp();\n+      if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n+        for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n+            logAggregationReports.entrySet()) {\n+          LogAggregationStatus status \u003d\n+              report.getValue() \u003d\u003d null ? null : report.getValue()\n+                .getLogAggregationStatus();\n+          String message \u003d\n+              report.getValue() \u003d\u003d null ? null : report.getValue()\n+                .getDiagnosticMessage();\n+          table.tr()\n+            .td(report.getKey().toString())\n+            .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n+            .td(message \u003d\u003d null ? \"N/A\" : message)._();\n+        }\n+      }\n+    }\n+    table._();\n+    div._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appId;\n    try {\n      appId \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    setTitle(join(\"Application \", aid));\n\n    // Add LogAggregationStatus description table\n    // to explain the meaning of different LogAggregationStatus\n    DIV\u003cHamlet\u003e div_description \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table_description \u003d\n        div_description.table(\"#LogAggregationStatusDecription\");\n    table_description.\n      tr().\n        th(_TH, \"Log Aggregation Status\").\n        th(_TH, \"Description\").\n      _();\n    table_description.tr().td(LogAggregationStatus.DISABLED.name())\n      .td(\"Log Aggregation is Disabled.\")._();\n    table_description.tr().td(LogAggregationStatus.NOT_START.name())\n      .td(\"Log Aggregation does not Start.\")._();\n    table_description.tr().td(LogAggregationStatus.RUNNING.name())\n      .td(\"Log Aggregation is Running.\")._();\n    table_description.tr().td(LogAggregationStatus.FINISHED.name())\n      .td(\"Log Aggregation is Finished. All of the logs have been \"\n          + \"aggregated successfully.\")._();\n    table_description.tr().td(LogAggregationStatus.FAILED.name())\n      .td(\"Log Aggregation is Failed. At least one of the logs \"\n          + \"have not been aggregated.\")._();\n    table_description.tr().td(LogAggregationStatus.TIME_OUT.name())\n      .td(\"Does not get the Log aggregation status for a long time. \"\n          + \"Not sure what is the current Log Aggregation Status.\")._();\n    table_description._();\n    div_description._();\n\n    boolean logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n    // Application Log aggregation status Table\n    DIV\u003cHamlet\u003e div \u003d html.div(_INFO_WRAP);\n    TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d\n        div.h3(\n          \"Log Aggregation: \"\n              + (logAggregationEnabled ? \"Enabled\" : \"Disabled\")).table(\n          \"#LogAggregationStatus\");\n    table.\n      tr().\n        th(_TH, \"NodeId\").\n        th(_TH, \"Log Aggregation Status\").\n        th(_TH, \"Diagnostis Message\").\n      _();\n\n    RMApp rmApp \u003d rm.getRMContext().getRMApps().get(appId);\n    if (rmApp !\u003d null) {\n      Map\u003cNodeId, LogAggregationReport\u003e logAggregationReports \u003d\n          rmApp.getLogAggregationReportsForApp();\n      if (logAggregationReports !\u003d null \u0026\u0026 !logAggregationReports.isEmpty()) {\n        for (Entry\u003cNodeId, LogAggregationReport\u003e report :\n            logAggregationReports.entrySet()) {\n          LogAggregationStatus status \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getLogAggregationStatus();\n          String message \u003d\n              report.getValue() \u003d\u003d null ? null : report.getValue()\n                .getDiagnosticMessage();\n          table.tr()\n            .td(report.getKey().toString())\n            .td(status \u003d\u003d null ? \"N/A\" : status.toString())\n            .td(message \u003d\u003d null ? \"N/A\" : message)._();\n        }\n      }\n    }\n    table._();\n    div._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppLogAggregationStatusBlock.java"
    }
  }
}