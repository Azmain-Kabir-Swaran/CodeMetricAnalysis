{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IdentityTransformer.java",
  "functionName": "transformAclEntriesForSetRequest",
  "functionId": "transformAclEntriesForSetRequest___aclEntries-List__AclEntry__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java",
  "functionStartLine": 184,
  "functionEndLine": 222,
  "numCommitsSeen": 5,
  "timeTaken": 1621,
  "changeHistory": [
    "43a91f820a5fce75ea69f78a62331bdc58e09a37",
    "1f1655028eede24197705a594b6ef19e6737db35"
  ],
  "changeHistoryShort": {
    "43a91f820a5fce75ea69f78a62331bdc58e09a37": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1f1655028eede24197705a594b6ef19e6737db35": "Yintroduced"
  },
  "changeHistoryDetails": {
    "43a91f820a5fce75ea69f78a62331bdc58e09a37": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16315. ABFS: transform full UPN for named user in AclStatus\n\nContributed by Da Zhou\n\nChange-Id: Ibc78322415fcbeff89c06c8586c53f5695550290\n",
      "commitDate": "09/08/19 4:38 AM",
      "commitName": "43a91f820a5fce75ea69f78a62331bdc58e09a37",
      "commitAuthor": "Da Zhou",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16315. ABFS: transform full UPN for named user in AclStatus\n\nContributed by Da Zhou\n\nChange-Id: Ibc78322415fcbeff89c06c8586c53f5695550290\n",
          "commitDate": "09/08/19 4:38 AM",
          "commitName": "43a91f820a5fce75ea69f78a62331bdc58e09a37",
          "commitAuthor": "Da Zhou",
          "commitDateOld": "26/02/19 7:37 AM",
          "commitNameOld": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
          "commitAuthorOld": "Da Zhou",
          "daysBetweenCommits": 163.83,
          "commitsBetweenForRepo": 1215,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  public List\u003cAclEntry\u003e transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n+  public void transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n     if (skipUserIdentityReplacement) {\n-      return aclEntries;\n+      return;\n     }\n \n     for (int i \u003d 0; i \u003c aclEntries.size(); i++) {\n       AclEntry aclEntry \u003d aclEntries.get(i);\n       String name \u003d aclEntry.getName();\n       String transformedName \u003d name;\n       if (name \u003d\u003d null || name.isEmpty() || aclEntry.getType().equals(AclEntryType.OTHER) || aclEntry.getType().equals(AclEntryType.MASK)) {\n         continue;\n       }\n \n       // case 1: when the user or group name to be set is stated in substitution list.\n       if (isInSubstitutionList(name)) {\n         transformedName \u003d servicePrincipalId;\n       } else if (aclEntry.getType().equals(AclEntryType.USER) // case 2: when the owner is a short name\n               \u0026\u0026 shouldUseFullyQualifiedUserName(name)) {     //         of the user principal name (UPN).\n         // Notice: for group type ACL entry, if name is shortName.\n         //         It won\u0027t be converted to Full Name. This is\n         //         to make the behavior consistent with HDI.\n         transformedName \u003d getFullyQualifiedName(name);\n       }\n \n       // Avoid unnecessary new AclEntry allocation\n       if (transformedName.equals(name)) {\n         continue;\n       }\n \n       AclEntry.Builder aclEntryBuilder \u003d new AclEntry.Builder();\n       aclEntryBuilder.setType(aclEntry.getType());\n       aclEntryBuilder.setName(transformedName);\n       aclEntryBuilder.setScope(aclEntry.getScope());\n       aclEntryBuilder.setPermission(aclEntry.getPermission());\n \n       // Replace the original AclEntry\n       aclEntries.set(i, aclEntryBuilder.build());\n     }\n-    return aclEntries;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n    if (skipUserIdentityReplacement) {\n      return;\n    }\n\n    for (int i \u003d 0; i \u003c aclEntries.size(); i++) {\n      AclEntry aclEntry \u003d aclEntries.get(i);\n      String name \u003d aclEntry.getName();\n      String transformedName \u003d name;\n      if (name \u003d\u003d null || name.isEmpty() || aclEntry.getType().equals(AclEntryType.OTHER) || aclEntry.getType().equals(AclEntryType.MASK)) {\n        continue;\n      }\n\n      // case 1: when the user or group name to be set is stated in substitution list.\n      if (isInSubstitutionList(name)) {\n        transformedName \u003d servicePrincipalId;\n      } else if (aclEntry.getType().equals(AclEntryType.USER) // case 2: when the owner is a short name\n              \u0026\u0026 shouldUseFullyQualifiedUserName(name)) {     //         of the user principal name (UPN).\n        // Notice: for group type ACL entry, if name is shortName.\n        //         It won\u0027t be converted to Full Name. This is\n        //         to make the behavior consistent with HDI.\n        transformedName \u003d getFullyQualifiedName(name);\n      }\n\n      // Avoid unnecessary new AclEntry allocation\n      if (transformedName.equals(name)) {\n        continue;\n      }\n\n      AclEntry.Builder aclEntryBuilder \u003d new AclEntry.Builder();\n      aclEntryBuilder.setType(aclEntry.getType());\n      aclEntryBuilder.setName(transformedName);\n      aclEntryBuilder.setScope(aclEntry.getScope());\n      aclEntryBuilder.setPermission(aclEntry.getPermission());\n\n      // Replace the original AclEntry\n      aclEntries.set(i, aclEntryBuilder.build());\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java",
          "extendedDetails": {
            "oldValue": "List\u003cAclEntry\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16315. ABFS: transform full UPN for named user in AclStatus\n\nContributed by Da Zhou\n\nChange-Id: Ibc78322415fcbeff89c06c8586c53f5695550290\n",
          "commitDate": "09/08/19 4:38 AM",
          "commitName": "43a91f820a5fce75ea69f78a62331bdc58e09a37",
          "commitAuthor": "Da Zhou",
          "commitDateOld": "26/02/19 7:37 AM",
          "commitNameOld": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
          "commitAuthorOld": "Da Zhou",
          "daysBetweenCommits": 163.83,
          "commitsBetweenForRepo": 1215,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  public List\u003cAclEntry\u003e transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n+  public void transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n     if (skipUserIdentityReplacement) {\n-      return aclEntries;\n+      return;\n     }\n \n     for (int i \u003d 0; i \u003c aclEntries.size(); i++) {\n       AclEntry aclEntry \u003d aclEntries.get(i);\n       String name \u003d aclEntry.getName();\n       String transformedName \u003d name;\n       if (name \u003d\u003d null || name.isEmpty() || aclEntry.getType().equals(AclEntryType.OTHER) || aclEntry.getType().equals(AclEntryType.MASK)) {\n         continue;\n       }\n \n       // case 1: when the user or group name to be set is stated in substitution list.\n       if (isInSubstitutionList(name)) {\n         transformedName \u003d servicePrincipalId;\n       } else if (aclEntry.getType().equals(AclEntryType.USER) // case 2: when the owner is a short name\n               \u0026\u0026 shouldUseFullyQualifiedUserName(name)) {     //         of the user principal name (UPN).\n         // Notice: for group type ACL entry, if name is shortName.\n         //         It won\u0027t be converted to Full Name. This is\n         //         to make the behavior consistent with HDI.\n         transformedName \u003d getFullyQualifiedName(name);\n       }\n \n       // Avoid unnecessary new AclEntry allocation\n       if (transformedName.equals(name)) {\n         continue;\n       }\n \n       AclEntry.Builder aclEntryBuilder \u003d new AclEntry.Builder();\n       aclEntryBuilder.setType(aclEntry.getType());\n       aclEntryBuilder.setName(transformedName);\n       aclEntryBuilder.setScope(aclEntry.getScope());\n       aclEntryBuilder.setPermission(aclEntry.getPermission());\n \n       // Replace the original AclEntry\n       aclEntries.set(i, aclEntryBuilder.build());\n     }\n-    return aclEntries;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n    if (skipUserIdentityReplacement) {\n      return;\n    }\n\n    for (int i \u003d 0; i \u003c aclEntries.size(); i++) {\n      AclEntry aclEntry \u003d aclEntries.get(i);\n      String name \u003d aclEntry.getName();\n      String transformedName \u003d name;\n      if (name \u003d\u003d null || name.isEmpty() || aclEntry.getType().equals(AclEntryType.OTHER) || aclEntry.getType().equals(AclEntryType.MASK)) {\n        continue;\n      }\n\n      // case 1: when the user or group name to be set is stated in substitution list.\n      if (isInSubstitutionList(name)) {\n        transformedName \u003d servicePrincipalId;\n      } else if (aclEntry.getType().equals(AclEntryType.USER) // case 2: when the owner is a short name\n              \u0026\u0026 shouldUseFullyQualifiedUserName(name)) {     //         of the user principal name (UPN).\n        // Notice: for group type ACL entry, if name is shortName.\n        //         It won\u0027t be converted to Full Name. This is\n        //         to make the behavior consistent with HDI.\n        transformedName \u003d getFullyQualifiedName(name);\n      }\n\n      // Avoid unnecessary new AclEntry allocation\n      if (transformedName.equals(name)) {\n        continue;\n      }\n\n      AclEntry.Builder aclEntryBuilder \u003d new AclEntry.Builder();\n      aclEntryBuilder.setType(aclEntry.getType());\n      aclEntryBuilder.setName(transformedName);\n      aclEntryBuilder.setScope(aclEntry.getScope());\n      aclEntryBuilder.setPermission(aclEntry.getPermission());\n\n      // Replace the original AclEntry\n      aclEntries.set(i, aclEntryBuilder.build());\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f1655028eede24197705a594b6ef19e6737db35": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\n\nContributed by Da Zhou and Junhua Gu.\n",
      "commitDate": "07/02/19 1:58 PM",
      "commitName": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthor": "Da Zhou",
      "diff": "@@ -0,0 +1,40 @@\n+  public List\u003cAclEntry\u003e transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n+    if (skipUserIdentityReplacement) {\n+      return aclEntries;\n+    }\n+\n+    for (int i \u003d 0; i \u003c aclEntries.size(); i++) {\n+      AclEntry aclEntry \u003d aclEntries.get(i);\n+      String name \u003d aclEntry.getName();\n+      String transformedName \u003d name;\n+      if (name \u003d\u003d null || name.isEmpty() || aclEntry.getType().equals(AclEntryType.OTHER) || aclEntry.getType().equals(AclEntryType.MASK)) {\n+        continue;\n+      }\n+\n+      // case 1: when the user or group name to be set is stated in substitution list.\n+      if (isInSubstitutionList(name)) {\n+        transformedName \u003d servicePrincipalId;\n+      } else if (aclEntry.getType().equals(AclEntryType.USER) // case 2: when the owner is a short name\n+              \u0026\u0026 shouldUseFullyQualifiedUserName(name)) {     //         of the user principal name (UPN).\n+        // Notice: for group type ACL entry, if name is shortName.\n+        //         It won\u0027t be converted to Full Name. This is\n+        //         to make the behavior consistent with HDI.\n+        transformedName \u003d getFullyQualifiedName(name);\n+      }\n+\n+      // Avoid unnecessary new AclEntry allocation\n+      if (transformedName.equals(name)) {\n+        continue;\n+      }\n+\n+      AclEntry.Builder aclEntryBuilder \u003d new AclEntry.Builder();\n+      aclEntryBuilder.setType(aclEntry.getType());\n+      aclEntryBuilder.setName(transformedName);\n+      aclEntryBuilder.setScope(aclEntry.getScope());\n+      aclEntryBuilder.setPermission(aclEntry.getPermission());\n+\n+      // Replace the original AclEntry\n+      aclEntries.set(i, aclEntryBuilder.build());\n+    }\n+    return aclEntries;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cAclEntry\u003e transformAclEntriesForSetRequest(final List\u003cAclEntry\u003e aclEntries) {\n    if (skipUserIdentityReplacement) {\n      return aclEntries;\n    }\n\n    for (int i \u003d 0; i \u003c aclEntries.size(); i++) {\n      AclEntry aclEntry \u003d aclEntries.get(i);\n      String name \u003d aclEntry.getName();\n      String transformedName \u003d name;\n      if (name \u003d\u003d null || name.isEmpty() || aclEntry.getType().equals(AclEntryType.OTHER) || aclEntry.getType().equals(AclEntryType.MASK)) {\n        continue;\n      }\n\n      // case 1: when the user or group name to be set is stated in substitution list.\n      if (isInSubstitutionList(name)) {\n        transformedName \u003d servicePrincipalId;\n      } else if (aclEntry.getType().equals(AclEntryType.USER) // case 2: when the owner is a short name\n              \u0026\u0026 shouldUseFullyQualifiedUserName(name)) {     //         of the user principal name (UPN).\n        // Notice: for group type ACL entry, if name is shortName.\n        //         It won\u0027t be converted to Full Name. This is\n        //         to make the behavior consistent with HDI.\n        transformedName \u003d getFullyQualifiedName(name);\n      }\n\n      // Avoid unnecessary new AclEntry allocation\n      if (transformedName.equals(name)) {\n        continue;\n      }\n\n      AclEntry.Builder aclEntryBuilder \u003d new AclEntry.Builder();\n      aclEntryBuilder.setType(aclEntry.getType());\n      aclEntryBuilder.setName(transformedName);\n      aclEntryBuilder.setScope(aclEntry.getScope());\n      aclEntryBuilder.setPermission(aclEntry.getPermission());\n\n      // Replace the original AclEntry\n      aclEntries.set(i, aclEntryBuilder.build());\n    }\n    return aclEntries;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java"
    }
  }
}