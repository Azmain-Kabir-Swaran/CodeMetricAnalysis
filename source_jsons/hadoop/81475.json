{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogThrottlingHelper.java",
  "functionName": "record",
  "functionId": "record___recorderName-String__currentTimeMs-long__values-double",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/log/LogThrottlingHelper.java",
  "functionStartLine": 245,
  "functionEndLine": 273,
  "numCommitsSeen": 5,
  "timeTaken": 531,
  "changeHistory": [
    "a30b4f9e71cf53f79c38878d6cbe5bbe79bcb277"
  ],
  "changeHistoryShort": {
    "a30b4f9e71cf53f79c38878d6cbe5bbe79bcb277": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a30b4f9e71cf53f79c38878d6cbe5bbe79bcb277": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15726. Create utility to limit frequency of log statements. Contributed by Erik Krogen.\n",
      "commitDate": "19/09/18 1:22 PM",
      "commitName": "a30b4f9e71cf53f79c38878d6cbe5bbe79bcb277",
      "commitAuthor": "Chen Liang",
      "diff": "@@ -0,0 +1,29 @@\n+  public LogAction record(String recorderName, long currentTimeMs,\n+      double... values) {\n+    if (primaryRecorderName \u003d\u003d null) {\n+      primaryRecorderName \u003d recorderName;\n+    }\n+    LoggingAction currentLog \u003d currentLogs.get(recorderName);\n+    if (currentLog \u003d\u003d null || currentLog.hasLogged()) {\n+      currentLog \u003d new LoggingAction(values.length);\n+      if (!currentLogs.containsKey(recorderName)) {\n+        // Always log newly created loggers\n+        currentLog.setShouldLog();\n+      }\n+      currentLogs.put(recorderName, currentLog);\n+    }\n+    currentLog.recordValues(values);\n+    if (primaryRecorderName.equals(recorderName) \u0026\u0026\n+        currentTimeMs - minLogPeriodMs \u003e\u003d lastLogTimestampMs) {\n+      lastLogTimestampMs \u003d currentTimeMs;\n+      for (LoggingAction log : currentLogs.values()) {\n+        log.setShouldLog();\n+      }\n+    }\n+    if (currentLog.shouldLog()) {\n+      currentLog.setHasLogged();\n+      return currentLog;\n+    } else {\n+      return DO_NOT_LOG;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public LogAction record(String recorderName, long currentTimeMs,\n      double... values) {\n    if (primaryRecorderName \u003d\u003d null) {\n      primaryRecorderName \u003d recorderName;\n    }\n    LoggingAction currentLog \u003d currentLogs.get(recorderName);\n    if (currentLog \u003d\u003d null || currentLog.hasLogged()) {\n      currentLog \u003d new LoggingAction(values.length);\n      if (!currentLogs.containsKey(recorderName)) {\n        // Always log newly created loggers\n        currentLog.setShouldLog();\n      }\n      currentLogs.put(recorderName, currentLog);\n    }\n    currentLog.recordValues(values);\n    if (primaryRecorderName.equals(recorderName) \u0026\u0026\n        currentTimeMs - minLogPeriodMs \u003e\u003d lastLogTimestampMs) {\n      lastLogTimestampMs \u003d currentTimeMs;\n      for (LoggingAction log : currentLogs.values()) {\n        log.setShouldLog();\n      }\n    }\n    if (currentLog.shouldLog()) {\n      currentLog.setHasLogged();\n      return currentLog;\n    } else {\n      return DO_NOT_LOG;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/log/LogThrottlingHelper.java"
    }
  }
}