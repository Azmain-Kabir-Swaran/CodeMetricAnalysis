{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "initiateUpgrade",
  "functionId": "initiateUpgrade___service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 343,
  "functionEndLine": 364,
  "numCommitsSeen": 77,
  "timeTaken": 2660,
  "changeHistory": [
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
    "23f394240e1568a38025e63e9dc0842e8c5235f7",
    "14b47990af39de71b0a09d995208f45ea3b79c23",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "27d60a16342fd39973d43b61008f54a8815a6237"
  ],
  "changeHistoryShort": {
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": "Ybodychange",
    "23f394240e1568a38025e63e9dc0842e8c5235f7": "Ybodychange",
    "14b47990af39de71b0a09d995208f45ea3b79c23": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ymultichange(Yrename,Ybodychange)",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8298.  Added express upgrade for YARN service.\n            Contributed by Chandni Singh\n",
      "commitDate": "21/08/18 4:49 PM",
      "commitName": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/08/18 5:41 PM",
      "commitNameOld": "23f394240e1568a38025e63e9dc0842e8c5235f7",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 19.96,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,22 @@\n   public int initiateUpgrade(Service service) throws YarnException,\n       IOException {\n-    boolean upgradeEnabled \u003d getConfig().getBoolean(\n-        YARN_SERVICE_UPGRADE_ENABLED,\n-        YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n-    if (!upgradeEnabled) {\n-      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n-    }\n-    Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, service.getName());\n-    if (!StringUtils.isEmpty(persistedService.getId())) {\n-      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n-          ApplicationId.fromString(persistedService.getId()),\n-          persistedService.getKerberosPrincipal().getPrincipalName()));\n-    }\n-\n-    if (persistedService.getVersion().equals(service.getVersion())) {\n-      String message \u003d\n-          service.getName() + \" is already at version \" + service.getVersion()\n-              + \". There is nothing to upgrade.\";\n-      LOG.error(message);\n-      throw new YarnException(message);\n-    }\n-\n-    Service liveService \u003d getStatus(service.getName());\n-    if (!liveService.getState().equals(ServiceState.STABLE)) {\n-      String message \u003d service.getName() + \" is at \" +\n-          liveService.getState()\n-          + \" state and upgrade can only be initiated when service is STABLE.\";\n-      LOG.error(message);\n-      throw new YarnException(message);\n-    }\n-\n-    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n-    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n-    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n-\n-    ApplicationReport appReport \u003d\n-        yarnClient.getApplicationReport(getAppId(service.getName()));\n-    if (StringUtils.isEmpty(appReport.getHost())) {\n-      throw new YarnException(service.getName() + \" AM hostname is empty\");\n-    }\n+    ApplicationReport appReport \u003d upgradePrecheck(service);\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n     UpgradeServiceRequestProto.Builder requestBuilder \u003d\n         UpgradeServiceRequestProto.newBuilder();\n     requestBuilder.setVersion(service.getVersion());\n     if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n       requestBuilder.setAutoFinalize(true);\n     }\n     UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n         requestBuilder.build());\n     if (responseProto.hasError()) {\n       LOG.error(\"Service {} upgrade to version {} failed because {}\",\n           service.getName(), service.getVersion(), responseProto.getError());\n       throw new YarnException(\"Failed to upgrade service \" + service.getName()\n           + \" to version \" + service.getVersion() + \" because \" +\n           responseProto.getError());\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int initiateUpgrade(Service service) throws YarnException,\n      IOException {\n    ApplicationReport appReport \u003d upgradePrecheck(service);\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      requestBuilder.setAutoFinalize(true);\n    }\n    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n        requestBuilder.build());\n    if (responseProto.hasError()) {\n      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n          service.getName(), service.getVersion(), responseProto.getError());\n      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n          + \" to version \" + service.getVersion() + \" because \" +\n          responseProto.getError());\n    }\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "23f394240e1568a38025e63e9dc0842e8c5235f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8610.  Fixed initiate upgrade error message.\n            Contributed by Chandni Singh\n",
      "commitDate": "01/08/18 5:41 PM",
      "commitName": "23f394240e1568a38025e63e9dc0842e8c5235f7",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/07/18 2:41 PM",
      "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.13,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   public int initiateUpgrade(Service service) throws YarnException,\n       IOException {\n     boolean upgradeEnabled \u003d getConfig().getBoolean(\n         YARN_SERVICE_UPGRADE_ENABLED,\n         YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n     if (!upgradeEnabled) {\n       throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n     }\n     Service persistedService \u003d\n         ServiceApiUtil.loadService(fs, service.getName());\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppInfo.put(persistedService.getName(), new AppInfo(\n           ApplicationId.fromString(persistedService.getId()),\n           persistedService.getKerberosPrincipal().getPrincipalName()));\n     }\n \n     if (persistedService.getVersion().equals(service.getVersion())) {\n       String message \u003d\n           service.getName() + \" is already at version \" + service.getVersion()\n               + \". There is nothing to upgrade.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     Service liveService \u003d getStatus(service.getName());\n     if (!liveService.getState().equals(ServiceState.STABLE)) {\n       String message \u003d service.getName() + \" is at \" +\n           liveService.getState()\n-          + \" state, upgrade can not be invoked when service is STABLE.\";\n+          + \" state and upgrade can only be initiated when service is STABLE.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n \n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(service.getName() + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n     UpgradeServiceRequestProto.Builder requestBuilder \u003d\n         UpgradeServiceRequestProto.newBuilder();\n     requestBuilder.setVersion(service.getVersion());\n     if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n       requestBuilder.setAutoFinalize(true);\n     }\n     UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n         requestBuilder.build());\n     if (responseProto.hasError()) {\n       LOG.error(\"Service {} upgrade to version {} failed because {}\",\n           service.getName(), service.getVersion(), responseProto.getError());\n       throw new YarnException(\"Failed to upgrade service \" + service.getName()\n           + \" to version \" + service.getVersion() + \" because \" +\n           responseProto.getError());\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int initiateUpgrade(Service service) throws YarnException,\n      IOException {\n    boolean upgradeEnabled \u003d getConfig().getBoolean(\n        YARN_SERVICE_UPGRADE_ENABLED,\n        YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n    if (!upgradeEnabled) {\n      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n    }\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d\n          service.getName() + \" is already at version \" + service.getVersion()\n              + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(service.getName());\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\n      String message \u003d service.getName() + \" is at \" +\n          liveService.getState()\n          + \" state and upgrade can only be initiated when service is STABLE.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      requestBuilder.setAutoFinalize(true);\n    }\n    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n        requestBuilder.build());\n    if (responseProto.hasError()) {\n      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n          service.getName(), service.getVersion(), responseProto.getError());\n      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n          + \" to version \" + service.getVersion() + \" because \" +\n          responseProto.getError());\n    }\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "14b47990af39de71b0a09d995208f45ea3b79c23": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8204.  Added a flag to disable YARN service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "27/04/18 9:24 AM",
      "commitName": "14b47990af39de71b0a09d995208f45ea3b79c23",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,61 @@\n   public int initiateUpgrade(Service service) throws YarnException,\n       IOException {\n+    boolean upgradeEnabled \u003d getConfig().getBoolean(\n+        YARN_SERVICE_UPGRADE_ENABLED,\n+        YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n+    if (!upgradeEnabled) {\n+      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n+    }\n     Service persistedService \u003d\n         ServiceApiUtil.loadService(fs, service.getName());\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppInfo.put(persistedService.getName(), new AppInfo(\n           ApplicationId.fromString(persistedService.getId()),\n           persistedService.getKerberosPrincipal().getPrincipalName()));\n     }\n \n     if (persistedService.getVersion().equals(service.getVersion())) {\n       String message \u003d\n           service.getName() + \" is already at version \" + service.getVersion()\n               + \". There is nothing to upgrade.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     Service liveService \u003d getStatus(service.getName());\n     if (!liveService.getState().equals(ServiceState.STABLE)) {\n       String message \u003d service.getName() + \" is at \" +\n           liveService.getState()\n           + \" state, upgrade can not be invoked when service is STABLE.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n \n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(service.getName() + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n     UpgradeServiceRequestProto.Builder requestBuilder \u003d\n         UpgradeServiceRequestProto.newBuilder();\n     requestBuilder.setVersion(service.getVersion());\n     if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n       requestBuilder.setAutoFinalize(true);\n     }\n     UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n         requestBuilder.build());\n     if (responseProto.hasError()) {\n       LOG.error(\"Service {} upgrade to version {} failed because {}\",\n           service.getName(), service.getVersion(), responseProto.getError());\n       throw new YarnException(\"Failed to upgrade service \" + service.getName()\n           + \" to version \" + service.getVersion() + \" because \" +\n           responseProto.getError());\n     }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int initiateUpgrade(Service service) throws YarnException,\n      IOException {\n    boolean upgradeEnabled \u003d getConfig().getBoolean(\n        YARN_SERVICE_UPGRADE_ENABLED,\n        YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n    if (!upgradeEnabled) {\n      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n    }\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d\n          service.getName() + \" is already at version \" + service.getVersion()\n              + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(service.getName());\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\n      String message \u003d service.getName() + \" is at \" +\n          liveService.getState()\n          + \" state, upgrade can not be invoked when service is STABLE.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      requestBuilder.setAutoFinalize(true);\n    }\n    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n        requestBuilder.build());\n    if (responseProto.hasError()) {\n      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n          service.getName(), service.getVersion(), responseProto.getError());\n      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n          + \" to version \" + service.getVersion() + \" because \" +\n          responseProto.getError());\n    }\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,55 @@\n-  public int actionUpgrade(Service service) throws YarnException, IOException {\n+  public int initiateUpgrade(Service service) throws YarnException,\n+      IOException {\n     Service persistedService \u003d\n         ServiceApiUtil.loadService(fs, service.getName());\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppInfo.put(persistedService.getName(), new AppInfo(\n           ApplicationId.fromString(persistedService.getId()),\n           persistedService.getKerberosPrincipal().getPrincipalName()));\n     }\n \n     if (persistedService.getVersion().equals(service.getVersion())) {\n       String message \u003d\n           service.getName() + \" is already at version \" + service.getVersion()\n               + \". There is nothing to upgrade.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n+    Service liveService \u003d getStatus(service.getName());\n+    if (!liveService.getState().equals(ServiceState.STABLE)) {\n+      String message \u003d service.getName() + \" is at \" +\n+          liveService.getState()\n+          + \" state, upgrade can not be invoked when service is STABLE.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n     Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n \n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(service.getName() + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n     UpgradeServiceRequestProto.Builder requestBuilder \u003d\n         UpgradeServiceRequestProto.newBuilder();\n     requestBuilder.setVersion(service.getVersion());\n-\n-    proxy.upgrade(requestBuilder.build());\n+    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n+      requestBuilder.setAutoFinalize(true);\n+    }\n+    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n+        requestBuilder.build());\n+    if (responseProto.hasError()) {\n+      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n+          service.getName(), service.getVersion(), responseProto.getError());\n+      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n+          + \" to version \" + service.getVersion() + \" because \" +\n+          responseProto.getError());\n+    }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int initiateUpgrade(Service service) throws YarnException,\n      IOException {\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d\n          service.getName() + \" is already at version \" + service.getVersion()\n              + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(service.getName());\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\n      String message \u003d service.getName() + \" is at \" +\n          liveService.getState()\n          + \" state, upgrade can not be invoked when service is STABLE.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      requestBuilder.setAutoFinalize(true);\n    }\n    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n        requestBuilder.build());\n    if (responseProto.hasError()) {\n      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n          service.getName(), service.getVersion(), responseProto.getError());\n      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n          + \" to version \" + service.getVersion() + \" because \" +\n          responseProto.getError());\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "actionUpgrade",
            "newValue": "initiateUpgrade"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,55 @@\n-  public int actionUpgrade(Service service) throws YarnException, IOException {\n+  public int initiateUpgrade(Service service) throws YarnException,\n+      IOException {\n     Service persistedService \u003d\n         ServiceApiUtil.loadService(fs, service.getName());\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppInfo.put(persistedService.getName(), new AppInfo(\n           ApplicationId.fromString(persistedService.getId()),\n           persistedService.getKerberosPrincipal().getPrincipalName()));\n     }\n \n     if (persistedService.getVersion().equals(service.getVersion())) {\n       String message \u003d\n           service.getName() + \" is already at version \" + service.getVersion()\n               + \". There is nothing to upgrade.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n+    Service liveService \u003d getStatus(service.getName());\n+    if (!liveService.getState().equals(ServiceState.STABLE)) {\n+      String message \u003d service.getName() + \" is at \" +\n+          liveService.getState()\n+          + \" state, upgrade can not be invoked when service is STABLE.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n     Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n \n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(service.getName() + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n     UpgradeServiceRequestProto.Builder requestBuilder \u003d\n         UpgradeServiceRequestProto.newBuilder();\n     requestBuilder.setVersion(service.getVersion());\n-\n-    proxy.upgrade(requestBuilder.build());\n+    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n+      requestBuilder.setAutoFinalize(true);\n+    }\n+    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n+        requestBuilder.build());\n+    if (responseProto.hasError()) {\n+      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n+          service.getName(), service.getVersion(), responseProto.getError());\n+      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n+          + \" to version \" + service.getVersion() + \" because \" +\n+          responseProto.getError());\n+    }\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int initiateUpgrade(Service service) throws YarnException,\n      IOException {\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d\n          service.getName() + \" is already at version \" + service.getVersion()\n              + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(service.getName());\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\n      String message \u003d service.getName() + \" is at \" +\n          liveService.getState()\n          + \" state, upgrade can not be invoked when service is STABLE.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      requestBuilder.setAutoFinalize(true);\n    }\n    UpgradeServiceResponseProto responseProto \u003d proxy.upgrade(\n        requestBuilder.build());\n    if (responseProto.hasError()) {\n      LOG.error(\"Service {} upgrade to version {} failed because {}\",\n          service.getName(), service.getVersion(), responseProto.getError());\n      throw new YarnException(\"Failed to upgrade service \" + service.getName()\n          + \" to version \" + service.getVersion() + \" because \" +\n          responseProto.getError());\n    }\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,35 @@\n+  public int actionUpgrade(Service service) throws YarnException, IOException {\n+    Service persistedService \u003d\n+        ServiceApiUtil.loadService(fs, service.getName());\n+    if (!StringUtils.isEmpty(persistedService.getId())) {\n+      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n+          ApplicationId.fromString(persistedService.getId()),\n+          persistedService.getKerberosPrincipal().getPrincipalName()));\n+    }\n+\n+    if (persistedService.getVersion().equals(service.getVersion())) {\n+      String message \u003d\n+          service.getName() + \" is already at version \" + service.getVersion()\n+              + \". There is nothing to upgrade.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n+    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n+    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n+\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(service.getName()));\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(service.getName() + \" AM hostname is empty\");\n+    }\n+    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n+\n+    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n+        UpgradeServiceRequestProto.newBuilder();\n+    requestBuilder.setVersion(service.getVersion());\n+\n+    proxy.upgrade(requestBuilder.build());\n+    return EXIT_SUCCESS;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionUpgrade(Service service) throws YarnException, IOException {\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d\n          service.getName() + \" is already at version \" + service.getVersion()\n              + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n\n    proxy.upgrade(requestBuilder.build());\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}