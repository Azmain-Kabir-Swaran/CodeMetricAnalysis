{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "getLocalityWaitFactor",
  "functionId": "getLocalityWaitFactor___uniqAsks-int__clusterNodes-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 283,
  "functionEndLine": 290,
  "numCommitsSeen": 76,
  "timeTaken": 5840,
  "changeHistory": [
    "2a0fa50f9d718d51036ccdf30c7d998362fe423b",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "ba2313d6145a1234777938a747187373f4cd58d9"
  ],
  "changeHistoryShort": {
    "2a0fa50f9d718d51036ccdf30c7d998362fe423b": "Ymultichange(Yparameterchange,Ybodychange)",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymodifierchange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2a0fa50f9d718d51036ccdf30c7d998362fe423b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8193. YARN RM hangs abruptly (stops allocating resources) when running successive applications. (Zian Chen via wangda)\n\nChange-Id: Ia83dd2499ee9000b9e09ae5a932f21a13c0ddee6\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "2a0fa50f9d718d51036ccdf30c7d998362fe423b",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8193. YARN RM hangs abruptly (stops allocating resources) when running successive applications. (Zian Chen via wangda)\n\nChange-Id: Ia83dd2499ee9000b9e09ae5a932f21a13c0ddee6\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "2a0fa50f9d718d51036ccdf30c7d998362fe423b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 85.48,
          "commitsBetweenForRepo": 1196,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,8 @@\n-  public float getLocalityWaitFactor(\n-      SchedulerRequestKey schedulerKey, int clusterNodes) {\n+  public float getLocalityWaitFactor(int uniqAsks, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n-    int requiredResources \u003d Math.max(\n-        application.getAppPlacementAllocator(schedulerKey)\n-            .getUniqueLocationAsks() - 1, 0);\n+    int requiredResources \u003d Math.max(uniqAsks - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public float getLocalityWaitFactor(int uniqAsks, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d Math.max(uniqAsks - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[schedulerKey-SchedulerRequestKey, clusterNodes-int]",
            "newValue": "[uniqAsks-int, clusterNodes-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8193. YARN RM hangs abruptly (stops allocating resources) when running successive applications. (Zian Chen via wangda)\n\nChange-Id: Ia83dd2499ee9000b9e09ae5a932f21a13c0ddee6\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "2a0fa50f9d718d51036ccdf30c7d998362fe423b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 85.48,
          "commitsBetweenForRepo": 1196,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,8 @@\n-  public float getLocalityWaitFactor(\n-      SchedulerRequestKey schedulerKey, int clusterNodes) {\n+  public float getLocalityWaitFactor(int uniqAsks, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n-    int requiredResources \u003d Math.max(\n-        application.getAppPlacementAllocator(schedulerKey)\n-            .getUniqueLocationAsks() - 1, 0);\n+    int requiredResources \u003d Math.max(uniqAsks - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public float getLocalityWaitFactor(int uniqAsks, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d Math.max(uniqAsks - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "17/09/17 9:20 PM",
      "commitNameOld": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 52.69,
      "commitsBetweenForRepo": 485,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   public float getLocalityWaitFactor(\n       SchedulerRequestKey schedulerKey, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n     int requiredResources \u003d Math.max(\n-        application.getSchedulingPlacementSet(schedulerKey)\n+        application.getAppPlacementAllocator(schedulerKey)\n             .getUniqueLocationAsks() - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float getLocalityWaitFactor(\n      SchedulerRequestKey schedulerKey, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d Math.max(\n        application.getAppPlacementAllocator(schedulerKey)\n            .getUniqueLocationAsks() - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,11 @@\n   public float getLocalityWaitFactor(\n       SchedulerRequestKey schedulerKey, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n-    int requiredResources \u003d \n-        Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n+    int requiredResources \u003d Math.max(\n+        application.getSchedulingPlacementSet(schedulerKey)\n+            .getUniqueLocationAsks() - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float getLocalityWaitFactor(\n      SchedulerRequestKey schedulerKey, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d Math.max(\n        application.getSchedulingPlacementSet(schedulerKey)\n            .getUniqueLocationAsks() - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/16 10:43 AM",
      "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 44.64,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n-  public synchronized float getLocalityWaitFactor(\n+  public float getLocalityWaitFactor(\n       SchedulerRequestKey schedulerKey, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n     int requiredResources \u003d \n         Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float getLocalityWaitFactor(\n      SchedulerRequestKey schedulerKey, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d \n        Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n   public synchronized float getLocalityWaitFactor(\n-      Priority priority, int clusterNodes) {\n+      SchedulerRequestKey schedulerKey, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n     int requiredResources \u003d \n-        Math.max(application.getResourceRequests(priority).size() - 1, 0);\n+        Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized float getLocalityWaitFactor(\n      SchedulerRequestKey schedulerKey, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d \n        Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, clusterNodes-int]",
            "newValue": "[schedulerKey-SchedulerRequestKey, clusterNodes-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n   public synchronized float getLocalityWaitFactor(\n-      Priority priority, int clusterNodes) {\n+      SchedulerRequestKey schedulerKey, int clusterNodes) {\n     // Estimate: Required unique resources (i.e. hosts + racks)\n     int requiredResources \u003d \n-        Math.max(application.getResourceRequests(priority).size() - 1, 0);\n+        Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n     \n     // waitFactor can\u0027t be more than \u00271\u0027 \n     // i.e. no point skipping more than clustersize opportunities\n     return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized float getLocalityWaitFactor(\n      SchedulerRequestKey schedulerKey, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d \n        Math.max(application.getResourceRequests(schedulerKey).size() - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,10 @@\n+  public synchronized float getLocalityWaitFactor(\n+      Priority priority, int clusterNodes) {\n+    // Estimate: Required unique resources (i.e. hosts + racks)\n+    int requiredResources \u003d \n+        Math.max(application.getResourceRequests(priority).size() - 1, 0);\n+    \n+    // waitFactor can\u0027t be more than \u00271\u0027 \n+    // i.e. no point skipping more than clustersize opportunities\n+    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized float getLocalityWaitFactor(\n      Priority priority, int clusterNodes) {\n    // Estimate: Required unique resources (i.e. hosts + racks)\n    int requiredResources \u003d \n        Math.max(application.getResourceRequests(priority).size() - 1, 0);\n    \n    // waitFactor can\u0027t be more than \u00271\u0027 \n    // i.e. no point skipping more than clustersize opportunities\n    return Math.min(((float)requiredResources / clusterNodes), 1.0f);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java"
    }
  }
}