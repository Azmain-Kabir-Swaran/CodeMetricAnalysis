{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServerWebApp.java",
  "functionName": "startWebApp",
  "functionId": "startWebApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
  "functionStartLine": 125,
  "functionEndLine": 160,
  "numCommitsSeen": 9,
  "timeTaken": 5605,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "ef5a3628c2428a1f8b0b17e1ff2aabe6820b63d5",
    "18bf0dce28a9a602f67a0c28fe5c350065931bd0"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Ymovefromfile,Ybodychange)",
    "ef5a3628c2428a1f8b0b17e1ff2aabe6820b63d5": "Ybodychange",
    "18bf0dce28a9a602f67a0c28fe5c350065931bd0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void startWebApp() throws IOException {\n    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n\n    apiServer \u003d new HttpServer2.Builder()\n        .setName(\"api-server\")\n        .setConf(getConfig())\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n        .addEndpoint(uri).build();\n\n    String apiPackages \u003d\n        ApiServer.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n\n    try {\n      logger.info(\"Service starting up. Logging start...\");\n      apiServer.start();\n      logger.info(\"Server status \u003d {}\", apiServer.toString());\n      for (Configuration conf : apiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\", Collections\n          .singletonList(apiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java"
      }
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  protected void startWebApp() throws IOException {\n-    // The port that we should run on can be set into an environment variable\n-    // Look for that variable and default to 9191 if it isn\u0027t there.\n-    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n-    if (StringUtils.isEmpty(webPort)) {\n-      webPort \u003d \"9191\";\n-    }\n+  private void startWebApp() throws IOException {\n+    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n \n-    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n-    if (StringUtils.isEmpty(webHost)) {\n-      webHost \u003d InetAddress.getLocalHost().getHostName();\n-    }\n-    logger.info(\"YARN native services REST API running on host {} and port {}\",\n-        webHost, webPort);\n-    logger.info(\"Configuration \u003d {}\", getConfig());\n-\n-    applicationApiServer \u003d new HttpServer2.Builder()\n-        .setName(\"services-rest-api\")\n-        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n+    apiServer \u003d new HttpServer2.Builder()\n+        .setName(\"api-server\")\n+        .setConf(getConfig())\n+        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n+        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n+        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+        .addEndpoint(uri).build();\n \n     String apiPackages \u003d\n-        ApplicationApiService.class.getPackage().getName() + SEP\n+        ApiServer.class.getPackage().getName() + SEP\n             + GenericExceptionHandler.class.getPackage().getName() + SEP\n             + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n-    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n+    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n \n     try {\n-      logger.info(\"Application starting up. Logging start...\");\n-      applicationApiServer.start();\n-      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n-      for (Configuration conf : applicationApiServer.getWebAppContext()\n+      logger.info(\"Service starting up. Logging start...\");\n+      apiServer.start();\n+      logger.info(\"Server status \u003d {}\", apiServer.toString());\n+      for (Configuration conf : apiServer.getWebAppContext()\n           .getConfigurations()) {\n         logger.info(\"Configurations \u003d {}\", conf);\n       }\n-      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n-          .getWebAppContext().getContextPath()));\n-      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n-          .getWebAppContext().getResourceBase()));\n-      logger.info(\"War \u003d {}\",\n-          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n+      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n+          apiServer.getWebAppContext().getContextPath()));\n+      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n+          apiServer.getWebAppContext().getResourceBase()));\n+      logger.info(\"War \u003d {}\", Collections\n+          .singletonList(apiServer.getWebAppContext().getWar()));\n     } catch (Exception ex) {\n       logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n       throw ex;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() throws IOException {\n    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n\n    apiServer \u003d new HttpServer2.Builder()\n        .setName(\"api-server\")\n        .setConf(getConfig())\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n        .addEndpoint(uri).build();\n\n    String apiPackages \u003d\n        ApiServer.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n\n    try {\n      logger.info(\"Service starting up. Logging start...\");\n      apiServer.start();\n      logger.info(\"Server status \u003d {}\", apiServer.toString());\n      for (Configuration conf : apiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\", Collections\n          .singletonList(apiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiWebApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
            "oldMethodName": "startWebApp",
            "newMethodName": "startWebApp"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  protected void startWebApp() throws IOException {\n-    // The port that we should run on can be set into an environment variable\n-    // Look for that variable and default to 9191 if it isn\u0027t there.\n-    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n-    if (StringUtils.isEmpty(webPort)) {\n-      webPort \u003d \"9191\";\n-    }\n+  private void startWebApp() throws IOException {\n+    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n \n-    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n-    if (StringUtils.isEmpty(webHost)) {\n-      webHost \u003d InetAddress.getLocalHost().getHostName();\n-    }\n-    logger.info(\"YARN native services REST API running on host {} and port {}\",\n-        webHost, webPort);\n-    logger.info(\"Configuration \u003d {}\", getConfig());\n-\n-    applicationApiServer \u003d new HttpServer2.Builder()\n-        .setName(\"services-rest-api\")\n-        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n+    apiServer \u003d new HttpServer2.Builder()\n+        .setName(\"api-server\")\n+        .setConf(getConfig())\n+        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n+        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n+        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+        .addEndpoint(uri).build();\n \n     String apiPackages \u003d\n-        ApplicationApiService.class.getPackage().getName() + SEP\n+        ApiServer.class.getPackage().getName() + SEP\n             + GenericExceptionHandler.class.getPackage().getName() + SEP\n             + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n-    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n+    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n \n     try {\n-      logger.info(\"Application starting up. Logging start...\");\n-      applicationApiServer.start();\n-      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n-      for (Configuration conf : applicationApiServer.getWebAppContext()\n+      logger.info(\"Service starting up. Logging start...\");\n+      apiServer.start();\n+      logger.info(\"Server status \u003d {}\", apiServer.toString());\n+      for (Configuration conf : apiServer.getWebAppContext()\n           .getConfigurations()) {\n         logger.info(\"Configurations \u003d {}\", conf);\n       }\n-      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n-          .getWebAppContext().getContextPath()));\n-      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n-          .getWebAppContext().getResourceBase()));\n-      logger.info(\"War \u003d {}\",\n-          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n+      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n+          apiServer.getWebAppContext().getContextPath()));\n+      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n+          apiServer.getWebAppContext().getResourceBase()));\n+      logger.info(\"War \u003d {}\", Collections\n+          .singletonList(apiServer.getWebAppContext().getWar()));\n     } catch (Exception ex) {\n       logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n       throw ex;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() throws IOException {\n    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n\n    apiServer \u003d new HttpServer2.Builder()\n        .setName(\"api-server\")\n        .setConf(getConfig())\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n        .addEndpoint(uri).build();\n\n    String apiPackages \u003d\n        ApiServer.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n\n    try {\n      logger.info(\"Service starting up. Logging start...\");\n      apiServer.start();\n      logger.info(\"Server status \u003d {}\", apiServer.toString());\n      for (Configuration conf : apiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\", Collections\n          .singletonList(apiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,36 @@\n-  protected void startWebApp() throws IOException {\n-    // The port that we should run on can be set into an environment variable\n-    // Look for that variable and default to 9191 if it isn\u0027t there.\n-    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n-    if (StringUtils.isEmpty(webPort)) {\n-      webPort \u003d \"9191\";\n-    }\n+  private void startWebApp() throws IOException {\n+    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n \n-    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n-    if (StringUtils.isEmpty(webHost)) {\n-      webHost \u003d InetAddress.getLocalHost().getHostName();\n-    }\n-    logger.info(\"YARN native services REST API running on host {} and port {}\",\n-        webHost, webPort);\n-    logger.info(\"Configuration \u003d {}\", getConfig());\n-\n-    applicationApiServer \u003d new HttpServer2.Builder()\n-        .setName(\"services-rest-api\")\n-        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n+    apiServer \u003d new HttpServer2.Builder()\n+        .setName(\"api-server\")\n+        .setConf(getConfig())\n+        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n+        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n+        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+        .addEndpoint(uri).build();\n \n     String apiPackages \u003d\n-        ApplicationApiService.class.getPackage().getName() + SEP\n+        ApiServer.class.getPackage().getName() + SEP\n             + GenericExceptionHandler.class.getPackage().getName() + SEP\n             + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n-    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n+    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n \n     try {\n-      logger.info(\"Application starting up. Logging start...\");\n-      applicationApiServer.start();\n-      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n-      for (Configuration conf : applicationApiServer.getWebAppContext()\n+      logger.info(\"Service starting up. Logging start...\");\n+      apiServer.start();\n+      logger.info(\"Server status \u003d {}\", apiServer.toString());\n+      for (Configuration conf : apiServer.getWebAppContext()\n           .getConfigurations()) {\n         logger.info(\"Configurations \u003d {}\", conf);\n       }\n-      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n-          .getWebAppContext().getContextPath()));\n-      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n-          .getWebAppContext().getResourceBase()));\n-      logger.info(\"War \u003d {}\",\n-          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n+      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n+          apiServer.getWebAppContext().getContextPath()));\n+      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n+          apiServer.getWebAppContext().getResourceBase()));\n+      logger.info(\"War \u003d {}\", Collections\n+          .singletonList(apiServer.getWebAppContext().getWar()));\n     } catch (Exception ex) {\n       logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n       throw ex;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() throws IOException {\n    URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(bindAddress));\n\n    apiServer \u003d new HttpServer2.Builder()\n        .setName(\"api-server\")\n        .setConf(getConfig())\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n        .setKeytabConfKey(RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n        .addEndpoint(uri).build();\n\n    String apiPackages \u003d\n        ApiServer.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    apiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n\n    try {\n      logger.info(\"Service starting up. Logging start...\");\n      apiServer.start();\n      logger.info(\"Server status \u003d {}\", apiServer.toString());\n      for (Configuration conf : apiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Collections.singletonList(\n          apiServer.getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\", Collections\n          .singletonList(apiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServerWebApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n   protected void startWebApp() throws IOException {\n     // The port that we should run on can be set into an environment variable\n     // Look for that variable and default to 9191 if it isn\u0027t there.\n     String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n     if (StringUtils.isEmpty(webPort)) {\n       webPort \u003d \"9191\";\n     }\n \n     String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n     if (StringUtils.isEmpty(webHost)) {\n       webHost \u003d InetAddress.getLocalHost().getHostName();\n     }\n     logger.info(\"YARN native services REST API running on host {} and port {}\",\n         webHost, webPort);\n     logger.info(\"Configuration \u003d {}\", getConfig());\n \n     applicationApiServer \u003d new HttpServer2.Builder()\n         .setName(\"services-rest-api\")\n         .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n \n     String apiPackages \u003d\n         ApplicationApiService.class.getPackage().getName() + SEP\n             + GenericExceptionHandler.class.getPackage().getName() + SEP\n             + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n-    applicationApiServer.addJerseyResourcePackage(apiPackages, CONTEXT_ROOT\n-        + \"/*\");\n+    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n \n     try {\n       logger.info(\"Application starting up. Logging start...\");\n       applicationApiServer.start();\n       logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n       for (Configuration conf : applicationApiServer.getWebAppContext()\n           .getConfigurations()) {\n         logger.info(\"Configurations \u003d {}\", conf);\n       }\n       logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n           .getWebAppContext().getContextPath()));\n       logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n           .getWebAppContext().getResourceBase()));\n       logger.info(\"War \u003d {}\",\n           Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n     } catch (Exception ex) {\n       logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n       throw ex;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void startWebApp() throws IOException {\n    // The port that we should run on can be set into an environment variable\n    // Look for that variable and default to 9191 if it isn\u0027t there.\n    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n    if (StringUtils.isEmpty(webPort)) {\n      webPort \u003d \"9191\";\n    }\n\n    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n    if (StringUtils.isEmpty(webHost)) {\n      webHost \u003d InetAddress.getLocalHost().getHostName();\n    }\n    logger.info(\"YARN native services REST API running on host {} and port {}\",\n        webHost, webPort);\n    logger.info(\"Configuration \u003d {}\", getConfig());\n\n    applicationApiServer \u003d new HttpServer2.Builder()\n        .setName(\"services-rest-api\")\n        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n\n    String apiPackages \u003d\n        ApplicationApiService.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n\n    try {\n      logger.info(\"Application starting up. Logging start...\");\n      applicationApiServer.start();\n      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n      for (Configuration conf : applicationApiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\",\n          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiWebApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/webapp/ApplicationApiWebApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiWebApp.java",
            "oldMethodName": "startWebApp",
            "newMethodName": "startWebApp"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n   protected void startWebApp() throws IOException {\n     // The port that we should run on can be set into an environment variable\n     // Look for that variable and default to 9191 if it isn\u0027t there.\n     String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n     if (StringUtils.isEmpty(webPort)) {\n       webPort \u003d \"9191\";\n     }\n \n     String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n     if (StringUtils.isEmpty(webHost)) {\n       webHost \u003d InetAddress.getLocalHost().getHostName();\n     }\n     logger.info(\"YARN native services REST API running on host {} and port {}\",\n         webHost, webPort);\n     logger.info(\"Configuration \u003d {}\", getConfig());\n \n     applicationApiServer \u003d new HttpServer2.Builder()\n         .setName(\"services-rest-api\")\n         .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n \n     String apiPackages \u003d\n         ApplicationApiService.class.getPackage().getName() + SEP\n             + GenericExceptionHandler.class.getPackage().getName() + SEP\n             + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n-    applicationApiServer.addJerseyResourcePackage(apiPackages, CONTEXT_ROOT\n-        + \"/*\");\n+    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n \n     try {\n       logger.info(\"Application starting up. Logging start...\");\n       applicationApiServer.start();\n       logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n       for (Configuration conf : applicationApiServer.getWebAppContext()\n           .getConfigurations()) {\n         logger.info(\"Configurations \u003d {}\", conf);\n       }\n       logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n           .getWebAppContext().getContextPath()));\n       logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n           .getWebAppContext().getResourceBase()));\n       logger.info(\"War \u003d {}\",\n           Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n     } catch (Exception ex) {\n       logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n       throw ex;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void startWebApp() throws IOException {\n    // The port that we should run on can be set into an environment variable\n    // Look for that variable and default to 9191 if it isn\u0027t there.\n    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n    if (StringUtils.isEmpty(webPort)) {\n      webPort \u003d \"9191\";\n    }\n\n    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n    if (StringUtils.isEmpty(webHost)) {\n      webHost \u003d InetAddress.getLocalHost().getHostName();\n    }\n    logger.info(\"YARN native services REST API running on host {} and port {}\",\n        webHost, webPort);\n    logger.info(\"Configuration \u003d {}\", getConfig());\n\n    applicationApiServer \u003d new HttpServer2.Builder()\n        .setName(\"services-rest-api\")\n        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n\n    String apiPackages \u003d\n        ApplicationApiService.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    applicationApiServer.addJerseyResourcePackage(apiPackages, \"/*\");\n\n    try {\n      logger.info(\"Application starting up. Logging start...\");\n      applicationApiServer.start();\n      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n      for (Configuration conf : applicationApiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\",\n          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiWebApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "ef5a3628c2428a1f8b0b17e1ff2aabe6820b63d5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5770. Performance improvement of native-services REST API service. Contributed by Gour Saha\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "ef5a3628c2428a1f8b0b17e1ff2aabe6820b63d5",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "18bf0dce28a9a602f67a0c28fe5c350065931bd0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,46 @@\n   protected void startWebApp() throws IOException {\n     // The port that we should run on can be set into an environment variable\n     // Look for that variable and default to 9191 if it isn\u0027t there.\n     String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n     if (StringUtils.isEmpty(webPort)) {\n       webPort \u003d \"9191\";\n     }\n \n     String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n     if (StringUtils.isEmpty(webHost)) {\n       webHost \u003d InetAddress.getLocalHost().getHostName();\n     }\n     logger.info(\"YARN native services REST API running on host {} and port {}\",\n         webHost, webPort);\n     logger.info(\"Configuration \u003d {}\", getConfig());\n \n     applicationApiServer \u003d new HttpServer2.Builder()\n         .setName(\"services-rest-api\")\n         .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n \n-    String apiPackages \u003d \"org.apache.hadoop.yarn.services.api\" + SEP\n-        + \"org.apache.hadoop.yarn.services.api.impl\" + SEP\n-        + \"org.apache.hadoop.yarn.services.resource\" + SEP\n-        + \"org.apache.hadoop.yarn.services.utils\" + SEP\n-        + \"org.apache.hadoop.yarn.services.webapp\" + SEP\n-        + GenericExceptionHandler.class.getPackage().getName() + SEP\n-        + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n+    String apiPackages \u003d\n+        ApplicationApiService.class.getPackage().getName() + SEP\n+            + GenericExceptionHandler.class.getPackage().getName() + SEP\n+            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n     applicationApiServer.addJerseyResourcePackage(apiPackages, CONTEXT_ROOT\n         + \"/*\");\n \n     try {\n       logger.info(\"Application starting up. Logging start...\");\n       applicationApiServer.start();\n       logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n       for (Configuration conf : applicationApiServer.getWebAppContext()\n           .getConfigurations()) {\n         logger.info(\"Configurations \u003d {}\", conf);\n       }\n       logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n           .getWebAppContext().getContextPath()));\n       logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n           .getWebAppContext().getResourceBase()));\n       logger.info(\"War \u003d {}\",\n           Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n     } catch (Exception ex) {\n       logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n       throw ex;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() throws IOException {\n    // The port that we should run on can be set into an environment variable\n    // Look for that variable and default to 9191 if it isn\u0027t there.\n    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n    if (StringUtils.isEmpty(webPort)) {\n      webPort \u003d \"9191\";\n    }\n\n    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n    if (StringUtils.isEmpty(webHost)) {\n      webHost \u003d InetAddress.getLocalHost().getHostName();\n    }\n    logger.info(\"YARN native services REST API running on host {} and port {}\",\n        webHost, webPort);\n    logger.info(\"Configuration \u003d {}\", getConfig());\n\n    applicationApiServer \u003d new HttpServer2.Builder()\n        .setName(\"services-rest-api\")\n        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n\n    String apiPackages \u003d\n        ApplicationApiService.class.getPackage().getName() + SEP\n            + GenericExceptionHandler.class.getPackage().getName() + SEP\n            + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    applicationApiServer.addJerseyResourcePackage(apiPackages, CONTEXT_ROOT\n        + \"/*\");\n\n    try {\n      logger.info(\"Application starting up. Logging start...\");\n      applicationApiServer.start();\n      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n      for (Configuration conf : applicationApiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\",\n          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/webapp/ApplicationApiWebApp.java",
      "extendedDetails": {}
    },
    "18bf0dce28a9a602f67a0c28fe5c350065931bd0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5610. Initial code for native services REST API. Contributed by Gour Saha\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "18bf0dce28a9a602f67a0c28fe5c350065931bd0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,49 @@\n+  protected void startWebApp() throws IOException {\n+    // The port that we should run on can be set into an environment variable\n+    // Look for that variable and default to 9191 if it isn\u0027t there.\n+    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n+    if (StringUtils.isEmpty(webPort)) {\n+      webPort \u003d \"9191\";\n+    }\n+\n+    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n+    if (StringUtils.isEmpty(webHost)) {\n+      webHost \u003d InetAddress.getLocalHost().getHostName();\n+    }\n+    logger.info(\"YARN native services REST API running on host {} and port {}\",\n+        webHost, webPort);\n+    logger.info(\"Configuration \u003d {}\", getConfig());\n+\n+    applicationApiServer \u003d new HttpServer2.Builder()\n+        .setName(\"services-rest-api\")\n+        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n+\n+    String apiPackages \u003d \"org.apache.hadoop.yarn.services.api\" + SEP\n+        + \"org.apache.hadoop.yarn.services.api.impl\" + SEP\n+        + \"org.apache.hadoop.yarn.services.resource\" + SEP\n+        + \"org.apache.hadoop.yarn.services.utils\" + SEP\n+        + \"org.apache.hadoop.yarn.services.webapp\" + SEP\n+        + GenericExceptionHandler.class.getPackage().getName() + SEP\n+        + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n+    applicationApiServer.addJerseyResourcePackage(apiPackages, CONTEXT_ROOT\n+        + \"/*\");\n+\n+    try {\n+      logger.info(\"Application starting up. Logging start...\");\n+      applicationApiServer.start();\n+      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n+      for (Configuration conf : applicationApiServer.getWebAppContext()\n+          .getConfigurations()) {\n+        logger.info(\"Configurations \u003d {}\", conf);\n+      }\n+      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n+          .getWebAppContext().getContextPath()));\n+      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n+          .getWebAppContext().getResourceBase()));\n+      logger.info(\"War \u003d {}\",\n+          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n+    } catch (Exception ex) {\n+      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n+      throw ex;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() throws IOException {\n    // The port that we should run on can be set into an environment variable\n    // Look for that variable and default to 9191 if it isn\u0027t there.\n    String webPort \u003d System.getenv(PROPERTY_REST_SERVICE_PORT);\n    if (StringUtils.isEmpty(webPort)) {\n      webPort \u003d \"9191\";\n    }\n\n    String webHost \u003d System.getenv(PROPERTY_REST_SERVICE_HOST);\n    if (StringUtils.isEmpty(webHost)) {\n      webHost \u003d InetAddress.getLocalHost().getHostName();\n    }\n    logger.info(\"YARN native services REST API running on host {} and port {}\",\n        webHost, webPort);\n    logger.info(\"Configuration \u003d {}\", getConfig());\n\n    applicationApiServer \u003d new HttpServer2.Builder()\n        .setName(\"services-rest-api\")\n        .addEndpoint(URI.create(\"http://\" + webHost + \":\" + webPort)).build();\n\n    String apiPackages \u003d \"org.apache.hadoop.yarn.services.api\" + SEP\n        + \"org.apache.hadoop.yarn.services.api.impl\" + SEP\n        + \"org.apache.hadoop.yarn.services.resource\" + SEP\n        + \"org.apache.hadoop.yarn.services.utils\" + SEP\n        + \"org.apache.hadoop.yarn.services.webapp\" + SEP\n        + GenericExceptionHandler.class.getPackage().getName() + SEP\n        + YarnJacksonJaxbJsonProvider.class.getPackage().getName();\n    applicationApiServer.addJerseyResourcePackage(apiPackages, CONTEXT_ROOT\n        + \"/*\");\n\n    try {\n      logger.info(\"Application starting up. Logging start...\");\n      applicationApiServer.start();\n      logger.info(\"Server status \u003d {}\", applicationApiServer.toString());\n      for (Configuration conf : applicationApiServer.getWebAppContext()\n          .getConfigurations()) {\n        logger.info(\"Configurations \u003d {}\", conf);\n      }\n      logger.info(\"Context Path \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getContextPath()));\n      logger.info(\"ResourceBase \u003d {}\", Arrays.asList(applicationApiServer\n          .getWebAppContext().getResourceBase()));\n      logger.info(\"War \u003d {}\",\n          Arrays.asList(applicationApiServer.getWebAppContext().getWar()));\n    } catch (Exception ex) {\n      logger.error(\"Hadoop HttpServer2 App **failed**\", ex);\n      throw ex;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/webapp/ApplicationApiWebApp.java"
    }
  }
}