{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Storage.java",
  "functionName": "analyzeStorage",
  "functionId": "analyzeStorage___startOpt-StartupOption__storage-Storage__checkCurrentIsEmpty-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
  "functionStartLine": 658,
  "functionEndLine": 780,
  "numCommitsSeen": 97,
  "timeTaken": 8558,
  "changeHistory": [
    "07e3cf952eac9e47e7bd5e195b0f9fc28c468313",
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "cf552aa87b4c47f0c73f51f44f3bc1d267c524cf",
    "fe38d2e9b5ac7e13f97cd2d3d2a984ab6bbaaf77",
    "3704e091a8d6c4181dfb29ac9d950e997b1170c0",
    "e2091275dc26745c4e919cd767283d32608a1817",
    "fb30240b87500c1b3c9f8036bb9e6712ec8e2655",
    "312eb235981166b905a668c82c146ce373ecaffa",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "07e3cf952eac9e47e7bd5e195b0f9fc28c468313": "Ybodychange",
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ybodychange",
    "cf552aa87b4c47f0c73f51f44f3bc1d267c524cf": "Ymultichange(Yparameterchange,Ybodychange)",
    "fe38d2e9b5ac7e13f97cd2d3d2a984ab6bbaaf77": "Ybodychange",
    "3704e091a8d6c4181dfb29ac9d950e997b1170c0": "Ybodychange",
    "e2091275dc26745c4e919cd767283d32608a1817": "Ybodychange",
    "fb30240b87500c1b3c9f8036bb9e6712ec8e2655": "Ybodychange",
    "312eb235981166b905a668c82c146ce373ecaffa": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ymultichange(Yparameterchange,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "07e3cf952eac9e47e7bd5e195b0f9fc28c468313": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2470. NN should automatically set permissions on dfs.namenode.*.dir. Contributed by Siddharth Wagle.\n",
      "commitDate": "26/08/19 3:57 PM",
      "commitName": "07e3cf952eac9e47e7bd5e195b0f9fc28c468313",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/02/18 10:45 AM",
      "commitNameOld": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 571.18,
      "commitsBetweenForRepo": 4926,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,122 +1,123 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n         boolean checkCurrentIsEmpty)\n         throws IOException {\n \n       if (location !\u003d null \u0026\u0026\n           location.getStorageType() \u003d\u003d StorageType.PROVIDED) {\n         // currently we assume that PROVIDED storages are always NORMAL\n         return StorageState.NORMAL;\n       }\n \n       assert root !\u003d null : \"root is null\";\n       boolean hadMkdirs \u003d false;\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n               startOpt !\u003d StartupOption.HOTSWAP) {\n             LOG.warn(\"Storage directory {} does not exist\", rootPath);\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(\"{} does not exist. Creating ...\", rootPath);\n-          if (!root.mkdirs())\n+          if (!root.mkdirs()) {\n             throw new IOException(\"Cannot create directory \" + rootPath);\n+          }\n           hadMkdirs \u003d true;\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(\"{} is not a directory\", rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n         if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory {}\", rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory {}\", rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n       // while it also checks the layout version.\n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n           (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n         if (checkCurrentIsEmpty) {\n           checkEmptyCurrent();\n         }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         if (checkCurrentIsEmpty) {\n           checkEmptyCurrent();\n         }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n        boolean checkCurrentIsEmpty)\n        throws IOException {\n\n      if (location !\u003d null \u0026\u0026\n          location.getStorageType() \u003d\u003d StorageType.PROVIDED) {\n        // currently we assume that PROVIDED storages are always NORMAL\n        return StorageState.NORMAL;\n      }\n\n      assert root !\u003d null : \"root is null\";\n      boolean hadMkdirs \u003d false;\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n              startOpt !\u003d StartupOption.HOTSWAP) {\n            LOG.warn(\"Storage directory {} does not exist\", rootPath);\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(\"{} does not exist. Creating ...\", rootPath);\n          if (!root.mkdirs()) {\n            throw new IOException(\"Cannot create directory \" + rootPath);\n          }\n          hadMkdirs \u003d true;\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(\"{} is not a directory\", rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory {}\", rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory {}\", rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n      // while it also checks the layout version.\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,122 +1,122 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n         boolean checkCurrentIsEmpty)\n         throws IOException {\n \n       if (location !\u003d null \u0026\u0026\n           location.getStorageType() \u003d\u003d StorageType.PROVIDED) {\n         // currently we assume that PROVIDED storages are always NORMAL\n         return StorageState.NORMAL;\n       }\n \n       assert root !\u003d null : \"root is null\";\n       boolean hadMkdirs \u003d false;\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n               startOpt !\u003d StartupOption.HOTSWAP) {\n-            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n+            LOG.warn(\"Storage directory {} does not exist\", rootPath);\n             return StorageState.NON_EXISTENT;\n           }\n-          LOG.info(rootPath + \" does not exist. Creating ...\");\n+          LOG.info(\"{} does not exist. Creating ...\", rootPath);\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n           hadMkdirs \u003d true;\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n-          LOG.warn(rootPath + \"is not a directory\");\n+          LOG.warn(\"{} is not a directory\", rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n         if (!FileUtil.canWrite(root)) {\n-          LOG.warn(\"Cannot access storage directory \" + rootPath);\n+          LOG.warn(\"Cannot access storage directory {}\", rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n-        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n+        LOG.warn(\"Cannot access storage directory {}\", rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n       // while it also checks the layout version.\n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n           (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n         if (checkCurrentIsEmpty) {\n           checkEmptyCurrent();\n         }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         if (checkCurrentIsEmpty) {\n           checkEmptyCurrent();\n         }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n        boolean checkCurrentIsEmpty)\n        throws IOException {\n\n      if (location !\u003d null \u0026\u0026\n          location.getStorageType() \u003d\u003d StorageType.PROVIDED) {\n        // currently we assume that PROVIDED storages are always NORMAL\n        return StorageState.NORMAL;\n      }\n\n      assert root !\u003d null : \"root is null\";\n      boolean hadMkdirs \u003d false;\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n              startOpt !\u003d StartupOption.HOTSWAP) {\n            LOG.warn(\"Storage directory {} does not exist\", rootPath);\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(\"{} does not exist. Creating ...\", rootPath);\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n          hadMkdirs \u003d true;\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(\"{} is not a directory\", rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory {}\", rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory {}\", rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n      // while it also checks the layout version.\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "06/04/17 2:33 PM",
      "commitNameOld": "a49fac5302128a6f5d971f5818d0fd874c3932e3",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 253.18,
      "commitsBetweenForRepo": 1749,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,115 +1,122 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n         boolean checkCurrentIsEmpty)\n         throws IOException {\n+\n+      if (location !\u003d null \u0026\u0026\n+          location.getStorageType() \u003d\u003d StorageType.PROVIDED) {\n+        //currently we assume that PROVIDED storages are always NORMAL\n+        return StorageState.NORMAL;\n+      }\n+\n       assert root !\u003d null : \"root is null\";\n       boolean hadMkdirs \u003d false;\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n               startOpt !\u003d StartupOption.HOTSWAP) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n           hadMkdirs \u003d true;\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n       // while it also checks the layout version.\n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n           (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n         if (checkCurrentIsEmpty) {\n           checkEmptyCurrent();\n         }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         if (checkCurrentIsEmpty) {\n           checkEmptyCurrent();\n         }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n        boolean checkCurrentIsEmpty)\n        throws IOException {\n\n      if (location !\u003d null \u0026\u0026\n          location.getStorageType() \u003d\u003d StorageType.PROVIDED) {\n        //currently we assume that PROVIDED storages are always NORMAL\n        return StorageState.NORMAL;\n      }\n\n      assert root !\u003d null : \"root is null\";\n      boolean hadMkdirs \u003d false;\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n              startOpt !\u003d StartupOption.HOTSWAP) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n          hadMkdirs \u003d true;\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n      // while it also checks the layout version.\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "cf552aa87b4c47f0c73f51f44f3bc1d267c524cf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10360. DataNode may format directory and lose blocks if current/VERSION is missing. (Wei-Chiu Chuang via lei)\n",
      "commitDate": "18/05/16 9:38 AM",
      "commitName": "cf552aa87b4c47f0c73f51f44f3bc1d267c524cf",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10360. DataNode may format directory and lose blocks if current/VERSION is missing. (Wei-Chiu Chuang via lei)\n",
          "commitDate": "18/05/16 9:38 AM",
          "commitName": "cf552aa87b4c47f0c73f51f44f3bc1d267c524cf",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 111.57,
          "commitsBetweenForRepo": 714,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,107 +1,115 @@\n-    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n+    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n+        boolean checkCurrentIsEmpty)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       boolean hadMkdirs \u003d false;\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n               startOpt !\u003d StartupOption.HOTSWAP) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n           hadMkdirs \u003d true;\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n       // while it also checks the layout version.\n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n-          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs))\n+          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n+        if (checkCurrentIsEmpty) {\n+          checkEmptyCurrent();\n+        }\n         return StorageState.NOT_FORMATTED;\n+      }\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n+        if (checkCurrentIsEmpty) {\n+          checkEmptyCurrent();\n+        }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n        boolean checkCurrentIsEmpty)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      boolean hadMkdirs \u003d false;\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n              startOpt !\u003d StartupOption.HOTSWAP) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n          hadMkdirs \u003d true;\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n      // while it also checks the layout version.\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
          "extendedDetails": {
            "oldValue": "[startOpt-StartupOption, storage-Storage]",
            "newValue": "[startOpt-StartupOption, storage-Storage, checkCurrentIsEmpty-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10360. DataNode may format directory and lose blocks if current/VERSION is missing. (Wei-Chiu Chuang via lei)\n",
          "commitDate": "18/05/16 9:38 AM",
          "commitName": "cf552aa87b4c47f0c73f51f44f3bc1d267c524cf",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 111.57,
          "commitsBetweenForRepo": 714,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,107 +1,115 @@\n-    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n+    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n+        boolean checkCurrentIsEmpty)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       boolean hadMkdirs \u003d false;\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n               startOpt !\u003d StartupOption.HOTSWAP) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n           hadMkdirs \u003d true;\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n       // while it also checks the layout version.\n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n-          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs))\n+          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n+        if (checkCurrentIsEmpty) {\n+          checkEmptyCurrent();\n+        }\n         return StorageState.NOT_FORMATTED;\n+      }\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n+        if (checkCurrentIsEmpty) {\n+          checkEmptyCurrent();\n+        }\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage,\n        boolean checkCurrentIsEmpty)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      boolean hadMkdirs \u003d false;\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n              startOpt !\u003d StartupOption.HOTSWAP) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n          hadMkdirs \u003d true;\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n      // while it also checks the layout version.\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs)) {\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        if (checkCurrentIsEmpty) {\n          checkEmptyCurrent();\n        }\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
          "extendedDetails": {}
        }
      ]
    },
    "fe38d2e9b5ac7e13f97cd2d3d2a984ab6bbaaf77": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6727. Refresh data volumes on DataNode based on configuration changes (Lei Xu via Colin Patrick McCabe)\n",
      "commitDate": "18/09/14 4:52 PM",
      "commitName": "fe38d2e9b5ac7e13f97cd2d3d2a984ab6bbaaf77",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "23/04/14 1:13 PM",
      "commitNameOld": "876fd8ab7913a259ff9f69c16cc2d9af46ad3f9b",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 148.15,
      "commitsBetweenForRepo": 1155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,107 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n+      boolean hadMkdirs \u003d false;\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n-          if (startOpt !\u003d StartupOption.FORMAT) {\n+          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n+              startOpt !\u003d StartupOption.HOTSWAP) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n+          hadMkdirs \u003d true;\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n-      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n+      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n+      // while it also checks the layout version.\n+      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n+          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs))\n         return StorageState.NOT_FORMATTED;\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      boolean hadMkdirs \u003d false;\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT \u0026\u0026\n              startOpt !\u003d StartupOption.HOTSWAP) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n          hadMkdirs \u003d true;\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      // If startOpt is HOTSWAP, it returns NOT_FORMATTED for empty directory,\n      // while it also checks the layout version.\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT ||\n          (startOpt \u003d\u003d StartupOption.HOTSWAP \u0026\u0026 hadMkdirs))\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "3704e091a8d6c4181dfb29ac9d950e997b1170c0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4610. Use common utils FileUtil#setReadable/Writable/Executable and FileUtil#canRead/Write/Execute. Contrbitued by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477427 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 5:35 PM",
      "commitName": "3704e091a8d6c4181dfb29ac9d950e997b1170c0",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "29/04/13 3:40 PM",
      "commitNameOld": "e2091275dc26745c4e919cd767283d32608a1817",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,101 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n-        if (!root.canWrite()) {\n+        if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "e2091275dc26745c4e919cd767283d32608a1817": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4610. Reverting the patch Jenkins build is not run.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 3:40 PM",
      "commitName": "e2091275dc26745c4e919cd767283d32608a1817",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "29/04/13 3:26 PM",
      "commitNameOld": "fb30240b87500c1b3c9f8036bb9e6712ec8e2655",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,101 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n-        if (!FileUtil.canWrite(root)) {\n+        if (!root.canWrite()) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "fb30240b87500c1b3c9f8036bb9e6712ec8e2655": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4610. Use common utils FileUtil#setReadable/Writable/Executable \u0026 FileUtil#canRead/Write/Execute. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477385 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 3:26 PM",
      "commitName": "fb30240b87500c1b3c9f8036bb9e6712ec8e2655",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/03/13 4:13 PM",
      "commitNameOld": "9daa958c5a69d5577e742fad94167e713abf688f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 48.97,
      "commitsBetweenForRepo": 281,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,101 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n             LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n-        if (!root.canWrite()) {\n+        if (!FileUtil.canWrite(root)) {\n           LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!FileUtil.canWrite(root)) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "312eb235981166b905a668c82c146ce373ecaffa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4048. Use ERROR instead of INFO for volume failure logs. Contributed by Stephen Chu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407345 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/12 6:57 PM",
      "commitName": "312eb235981166b905a668c82c146ce373ecaffa",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "28/10/12 4:10 PM",
      "commitNameOld": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 11.16,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,101 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n-            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n+            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n-          LOG.info(rootPath + \"is not a directory\");\n+          LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!root.canWrite()) {\n-          LOG.info(\"Cannot access storage directory \" + rootPath);\n+          LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n-        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n+        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.warn(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.warn(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "04/09/12 9:57 PM",
      "commitNameOld": "99ec5bd8d36a01cba7a0b2ab1feed3203f493ce6",
      "commitAuthorOld": "",
      "daysBetweenCommits": 53.76,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,101 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n-            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n+            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n-          LOG.info(rootPath + \"is not a directory.\");\n+          LOG.info(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!root.canWrite()) {\n           LOG.info(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n \n       if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,101 @@\n     public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n         throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n             LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.info(rootPath + \"is not a directory.\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!root.canWrite()) {\n           LOG.info(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n-      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n+      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n \n-      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n+      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n         storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory.\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsServerConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsServerConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory.\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory.\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/Storage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/07/11 8:19 PM",
          "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 45.22,
          "commitsBetweenForRepo": 158,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,99 +1,101 @@\n-    public StorageState analyzeStorage(StartupOption startOpt) throws IOException {\n+    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n+        throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n             LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.info(rootPath + \"is not a directory.\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!root.canWrite()) {\n           LOG.info(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n+\n       if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n-        checkOldLayoutStorage(this);\n+        storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory.\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/Storage.java",
          "extendedDetails": {
            "oldValue": "[startOpt-StartupOption]",
            "newValue": "[startOpt-StartupOption, storage-Storage]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/07/11 8:19 PM",
          "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 45.22,
          "commitsBetweenForRepo": 158,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,99 +1,101 @@\n-    public StorageState analyzeStorage(StartupOption startOpt) throws IOException {\n+    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n+        throws IOException {\n       assert root !\u003d null : \"root is null\";\n       String rootPath \u003d root.getCanonicalPath();\n       try { // check that storage exists\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt !\u003d StartupOption.FORMAT) {\n             LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n           if (!root.mkdirs())\n             throw new IOException(\"Cannot create directory \" + rootPath);\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n           LOG.info(rootPath + \"is not a directory.\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!root.canWrite()) {\n           LOG.info(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n         LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n       this.lock(); // lock storage if it exists\n \n       if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n         return StorageState.NOT_FORMATTED;\n+\n       if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n-        checkOldLayoutStorage(this);\n+        storage.checkOldLayoutStorage(this);\n       }\n \n       // check whether current directory is valid\n       File versionFile \u003d getVersionFile();\n       boolean hasCurrent \u003d versionFile.exists();\n \n       // check which directories exist\n       boolean hasPrevious \u003d getPreviousDir().exists();\n       boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n       boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n       boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n       boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n \n       if (!(hasPreviousTmp || hasRemovedTmp\n           || hasFinalizedTmp || hasCheckpointTmp)) {\n         // no temp dirs - no recovery\n         if (hasCurrent)\n           return StorageState.NORMAL;\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                               \"version file in current directory is missing.\");\n         return StorageState.NOT_FORMATTED;\n       }\n \n       if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n           + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n         // more than one temp dirs\n         throw new InconsistentFSStateException(root,\n                                                \"too many temporary directories.\");\n \n       // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n       if (hasCheckpointTmp) {\n         return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                           : StorageState.RECOVER_CHECKPOINT;\n       }\n \n       if (hasFinalizedTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                  + \"cannot exist together.\");\n         return StorageState.COMPLETE_FINALIZE;\n       }\n \n       if (hasPreviousTmp) {\n         if (hasPrevious)\n           throw new InconsistentFSStateException(root,\n                                                  STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                  + \" cannot exist together.\");\n         if (hasCurrent)\n           return StorageState.COMPLETE_UPGRADE;\n         return StorageState.RECOVER_UPGRADE;\n       }\n       \n       assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n       if (!(hasCurrent ^ hasPrevious))\n         throw new InconsistentFSStateException(root,\n                                                \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                                + \" or \" + STORAGE_DIR_PREVIOUS \n                                                + \" must be present when \" + STORAGE_TMP_REMOVED\n                                                + \" exists.\");\n       if (hasCurrent)\n         return StorageState.COMPLETE_ROLLBACK;\n       return StorageState.RECOVER_ROLLBACK;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt, Storage storage)\n        throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory.\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n\n      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n        storage.checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/Storage.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,99 @@\n+    public StorageState analyzeStorage(StartupOption startOpt) throws IOException {\n+      assert root !\u003d null : \"root is null\";\n+      String rootPath \u003d root.getCanonicalPath();\n+      try { // check that storage exists\n+        if (!root.exists()) {\n+          // storage directory does not exist\n+          if (startOpt !\u003d StartupOption.FORMAT) {\n+            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n+            return StorageState.NON_EXISTENT;\n+          }\n+          LOG.info(rootPath + \" does not exist. Creating ...\");\n+          if (!root.mkdirs())\n+            throw new IOException(\"Cannot create directory \" + rootPath);\n+        }\n+        // or is inaccessible\n+        if (!root.isDirectory()) {\n+          LOG.info(rootPath + \"is not a directory.\");\n+          return StorageState.NON_EXISTENT;\n+        }\n+        if (!root.canWrite()) {\n+          LOG.info(\"Cannot access storage directory \" + rootPath);\n+          return StorageState.NON_EXISTENT;\n+        }\n+      } catch(SecurityException ex) {\n+        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n+        return StorageState.NON_EXISTENT;\n+      }\n+\n+      this.lock(); // lock storage if it exists\n+\n+      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n+        return StorageState.NOT_FORMATTED;\n+      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n+        checkOldLayoutStorage(this);\n+      }\n+\n+      // check whether current directory is valid\n+      File versionFile \u003d getVersionFile();\n+      boolean hasCurrent \u003d versionFile.exists();\n+\n+      // check which directories exist\n+      boolean hasPrevious \u003d getPreviousDir().exists();\n+      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n+      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n+      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n+      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n+\n+      if (!(hasPreviousTmp || hasRemovedTmp\n+          || hasFinalizedTmp || hasCheckpointTmp)) {\n+        // no temp dirs - no recovery\n+        if (hasCurrent)\n+          return StorageState.NORMAL;\n+        if (hasPrevious)\n+          throw new InconsistentFSStateException(root,\n+                              \"version file in current directory is missing.\");\n+        return StorageState.NOT_FORMATTED;\n+      }\n+\n+      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n+          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n+        // more than one temp dirs\n+        throw new InconsistentFSStateException(root,\n+                                               \"too many temporary directories.\");\n+\n+      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n+      if (hasCheckpointTmp) {\n+        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n+                          : StorageState.RECOVER_CHECKPOINT;\n+      }\n+\n+      if (hasFinalizedTmp) {\n+        if (hasPrevious)\n+          throw new InconsistentFSStateException(root,\n+                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n+                                                 + \"cannot exist together.\");\n+        return StorageState.COMPLETE_FINALIZE;\n+      }\n+\n+      if (hasPreviousTmp) {\n+        if (hasPrevious)\n+          throw new InconsistentFSStateException(root,\n+                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n+                                                 + \" cannot exist together.\");\n+        if (hasCurrent)\n+          return StorageState.COMPLETE_UPGRADE;\n+        return StorageState.RECOVER_UPGRADE;\n+      }\n+      \n+      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n+      if (!(hasCurrent ^ hasPrevious))\n+        throw new InconsistentFSStateException(root,\n+                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n+                                               + \" or \" + STORAGE_DIR_PREVIOUS \n+                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n+                                               + \" exists.\");\n+      if (hasCurrent)\n+        return StorageState.COMPLETE_ROLLBACK;\n+      return StorageState.RECOVER_ROLLBACK;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public StorageState analyzeStorage(StartupOption startOpt) throws IOException {\n      assert root !\u003d null : \"root is null\";\n      String rootPath \u003d root.getCanonicalPath();\n      try { // check that storage exists\n        if (!root.exists()) {\n          // storage directory does not exist\n          if (startOpt !\u003d StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist.\");\n            return StorageState.NON_EXISTENT;\n          }\n          LOG.info(rootPath + \" does not exist. Creating ...\");\n          if (!root.mkdirs())\n            throw new IOException(\"Cannot create directory \" + rootPath);\n        }\n        // or is inaccessible\n        if (!root.isDirectory()) {\n          LOG.info(rootPath + \"is not a directory.\");\n          return StorageState.NON_EXISTENT;\n        }\n        if (!root.canWrite()) {\n          LOG.info(\"Cannot access storage directory \" + rootPath);\n          return StorageState.NON_EXISTENT;\n        }\n      } catch(SecurityException ex) {\n        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n        return StorageState.NON_EXISTENT;\n      }\n\n      this.lock(); // lock storage if it exists\n\n      if (startOpt \u003d\u003d HdfsConstants.StartupOption.FORMAT)\n        return StorageState.NOT_FORMATTED;\n      if (startOpt !\u003d HdfsConstants.StartupOption.IMPORT) {\n        checkOldLayoutStorage(this);\n      }\n\n      // check whether current directory is valid\n      File versionFile \u003d getVersionFile();\n      boolean hasCurrent \u003d versionFile.exists();\n\n      // check which directories exist\n      boolean hasPrevious \u003d getPreviousDir().exists();\n      boolean hasPreviousTmp \u003d getPreviousTmp().exists();\n      boolean hasRemovedTmp \u003d getRemovedTmp().exists();\n      boolean hasFinalizedTmp \u003d getFinalizedTmp().exists();\n      boolean hasCheckpointTmp \u003d getLastCheckpointTmp().exists();\n\n      if (!(hasPreviousTmp || hasRemovedTmp\n          || hasFinalizedTmp || hasCheckpointTmp)) {\n        // no temp dirs - no recovery\n        if (hasCurrent)\n          return StorageState.NORMAL;\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                              \"version file in current directory is missing.\");\n        return StorageState.NOT_FORMATTED;\n      }\n\n      if ((hasPreviousTmp?1:0) + (hasRemovedTmp?1:0)\n          + (hasFinalizedTmp?1:0) + (hasCheckpointTmp?1:0) \u003e 1)\n        // more than one temp dirs\n        throw new InconsistentFSStateException(root,\n                                               \"too many temporary directories.\");\n\n      // # of temp dirs \u003d\u003d 1 should either recover or complete a transition\n      if (hasCheckpointTmp) {\n        return hasCurrent ? StorageState.COMPLETE_CHECKPOINT\n                          : StorageState.RECOVER_CHECKPOINT;\n      }\n\n      if (hasFinalizedTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_FINALIZED\n                                                 + \"cannot exist together.\");\n        return StorageState.COMPLETE_FINALIZE;\n      }\n\n      if (hasPreviousTmp) {\n        if (hasPrevious)\n          throw new InconsistentFSStateException(root,\n                                                 STORAGE_DIR_PREVIOUS + \" and \" + STORAGE_TMP_PREVIOUS\n                                                 + \" cannot exist together.\");\n        if (hasCurrent)\n          return StorageState.COMPLETE_UPGRADE;\n        return StorageState.RECOVER_UPGRADE;\n      }\n      \n      assert hasRemovedTmp : \"hasRemovedTmp must be true\";\n      if (!(hasCurrent ^ hasPrevious))\n        throw new InconsistentFSStateException(root,\n                                               \"one and only one directory \" + STORAGE_DIR_CURRENT \n                                               + \" or \" + STORAGE_DIR_PREVIOUS \n                                               + \" must be present when \" + STORAGE_TMP_REMOVED\n                                               + \" exists.\");\n      if (hasCurrent)\n        return StorageState.COMPLETE_ROLLBACK;\n      return StorageState.RECOVER_ROLLBACK;\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/common/Storage.java"
    }
  }
}