{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "httpServerTemplateForNNAndJN",
  "functionId": "httpServerTemplateForNNAndJN___conf-Configuration__httpAddr-InetSocketAddress(modifiers-final)__httpsAddr-InetSocketAddress(modifiers-final)__name-String__spnegoUserNameKey-String__spnegoKeytabFileKey-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 1621,
  "functionEndLine": 1685,
  "numCommitsSeen": 154,
  "timeTaken": 3682,
  "changeHistory": [
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
    "6da830cfdff62307e722bd995e5a481fd704d268",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "87a6db45b70a1a07165e0773c4452d1327258bfa"
  ],
  "changeHistoryShort": {
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49": "Ybodychange",
    "6da830cfdff62307e722bd995e5a481fd704d268": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ymultichange(Yreturntypechange,Ybodychange)",
    "87a6db45b70a1a07165e0773c4452d1327258bfa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ea6c2f457496461afc63f38ef4cef3ab0efce49": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16354.  Enable AuthFilter as default for WebHDFS.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "11/06/19 3:41 PM",
      "commitName": "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/05/19 10:09 AM",
      "commitNameOld": "865c3289308327788f3bed355864c510deb40956",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 40.23,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,65 @@\n   public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n       Configuration conf, final InetSocketAddress httpAddr,\n       final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n       String spnegoKeytabFileKey) throws IOException {\n     HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n \n+    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n+    String initializers \u003d conf.get(filterInitializerConfKey, \"\");\n+\n+    String[] parts \u003d initializers.split(\",\");\n+    Set\u003cString\u003e target \u003d new LinkedHashSet\u003cString\u003e();\n+    for (String filterInitializer : parts) {\n+      filterInitializer \u003d filterInitializer.trim();\n+      if (filterInitializer.equals(\n+          AuthenticationFilterInitializer.class.getName()) ||\n+          filterInitializer.equals(\n+          ProxyUserAuthenticationFilterInitializer.class.getName()) ||\n+          filterInitializer.isEmpty()) {\n+        continue;\n+      }\n+      target.add(filterInitializer);\n+    }\n+    target.add(AuthFilterInitializer.class.getName());\n+    initializers \u003d StringUtils.join(target, \",\");\n+    conf.set(filterInitializerConfKey, initializers);\n+\n+    LOG.info(\"Filter initializers set : \" + initializers);\n+\n     HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n         .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n         .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n         .setUsernameConfKey(spnegoUserNameKey)\n         .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n \n     // initialize the webserver for uploading/downloading files.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Starting web server as: \"\n           + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n               httpAddr.getHostName()));\n     }\n \n     if (policy.isHttpEnabled()) {\n       if (httpAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n \n     if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n       Configuration sslConf \u003d loadSslConfiguration(conf);\n       loadSslConfToHttpServerBuilder(builder, sslConf);\n \n       if (httpsAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n     return builder;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n      Configuration conf, final InetSocketAddress httpAddr,\n      final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n      String spnegoKeytabFileKey) throws IOException {\n    HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String initializers \u003d conf.get(filterInitializerConfKey, \"\");\n\n    String[] parts \u003d initializers.split(\",\");\n    Set\u003cString\u003e target \u003d new LinkedHashSet\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(\n          AuthenticationFilterInitializer.class.getName()) ||\n          filterInitializer.equals(\n          ProxyUserAuthenticationFilterInitializer.class.getName()) ||\n          filterInitializer.isEmpty()) {\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    target.add(AuthFilterInitializer.class.getName());\n    initializers \u003d StringUtils.join(target, \",\");\n    conf.set(filterInitializerConfKey, initializers);\n\n    LOG.info(\"Filter initializers set : \" + initializers);\n\n    HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n        .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(spnegoUserNameKey)\n        .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n\n    // initialize the webserver for uploading/downloading files.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Starting web server as: \"\n          + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n              httpAddr.getHostName()));\n    }\n\n    if (policy.isHttpEnabled()) {\n      if (httpAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n\n    if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n      Configuration sslConf \u003d loadSslConfiguration(conf);\n      loadSslConfToHttpServerBuilder(builder, sslConf);\n\n      if (httpsAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n    return builder;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "6da830cfdff62307e722bd995e5a481fd704d268": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6823. dfs.web.authentication.kerberos.principal shows up in logs for insecure HDFS\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 11:21 AM",
      "commitName": "6da830cfdff62307e722bd995e5a481fd704d268",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "05/08/14 5:50 PM",
      "commitNameOld": "812ac91add512c518394178c5162720d61957e1f",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 2.73,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n       Configuration conf, final InetSocketAddress httpAddr,\n       final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n       String spnegoKeytabFileKey) throws IOException {\n     HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n \n     HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n         .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n         .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n         .setUsernameConfKey(spnegoUserNameKey)\n         .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n \n     // initialize the webserver for uploading/downloading files.\n-    LOG.info(\"Starting web server as: \"\n-        + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n-            httpAddr.getHostName()));\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      LOG.info(\"Starting web server as: \"\n+          + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n+              httpAddr.getHostName()));\n+    }\n \n     if (policy.isHttpEnabled()) {\n       if (httpAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n \n     if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n       Configuration sslConf \u003d loadSslConfiguration(conf);\n       loadSslConfToHttpServerBuilder(builder, sslConf);\n \n       if (httpsAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n     return builder;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n      Configuration conf, final InetSocketAddress httpAddr,\n      final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n      String spnegoKeytabFileKey) throws IOException {\n    HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n\n    HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n        .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(spnegoUserNameKey)\n        .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n\n    // initialize the webserver for uploading/downloading files.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Starting web server as: \"\n          + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n              httpAddr.getHostName()));\n    }\n\n    if (policy.isHttpEnabled()) {\n      if (httpAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n\n    if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n      Configuration sslConf \u003d loadSslConfiguration(conf);\n      loadSslConfToHttpServerBuilder(builder, sslConf);\n\n      if (httpsAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n    return builder;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/14 11:32 PM",
          "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "25/01/14 12:01 PM",
          "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.48,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-  public static HttpServer.Builder httpServerTemplateForNNAndJN(\n+  public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n       Configuration conf, final InetSocketAddress httpAddr,\n       final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n       String spnegoKeytabFileKey) throws IOException {\n     HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n \n-    HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n+    HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n         .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n         .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n         .setUsernameConfKey(spnegoUserNameKey)\n         .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n \n     // initialize the webserver for uploading/downloading files.\n     LOG.info(\"Starting web server as: \"\n         + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n             httpAddr.getHostName()));\n \n     if (policy.isHttpEnabled()) {\n       if (httpAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n \n     if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n       Configuration sslConf \u003d loadSslConfiguration(conf);\n       loadSslConfToHttpServerBuilder(builder, sslConf);\n \n       if (httpsAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n     return builder;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n      Configuration conf, final InetSocketAddress httpAddr,\n      final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n      String spnegoKeytabFileKey) throws IOException {\n    HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n\n    HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n        .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(spnegoUserNameKey)\n        .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"\n        + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n            httpAddr.getHostName()));\n\n    if (policy.isHttpEnabled()) {\n      if (httpAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n\n    if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n      Configuration sslConf \u003d loadSslConfiguration(conf);\n      loadSslConfToHttpServerBuilder(builder, sslConf);\n\n      if (httpsAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n    return builder;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {
            "oldValue": "HttpServer.Builder",
            "newValue": "HttpServer2.Builder"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/14 11:32 PM",
          "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "25/01/14 12:01 PM",
          "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.48,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-  public static HttpServer.Builder httpServerTemplateForNNAndJN(\n+  public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n       Configuration conf, final InetSocketAddress httpAddr,\n       final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n       String spnegoKeytabFileKey) throws IOException {\n     HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n \n-    HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n+    HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n         .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n         .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n         .setUsernameConfKey(spnegoUserNameKey)\n         .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n \n     // initialize the webserver for uploading/downloading files.\n     LOG.info(\"Starting web server as: \"\n         + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n             httpAddr.getHostName()));\n \n     if (policy.isHttpEnabled()) {\n       if (httpAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n \n     if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n       Configuration sslConf \u003d loadSslConfiguration(conf);\n       loadSslConfToHttpServerBuilder(builder, sslConf);\n \n       if (httpsAddr.getPort() \u003d\u003d 0) {\n         builder.setFindPort(true);\n       }\n \n       URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n       builder.addEndpoint(uri);\n       LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n     }\n     return builder;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static HttpServer2.Builder httpServerTemplateForNNAndJN(\n      Configuration conf, final InetSocketAddress httpAddr,\n      final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n      String spnegoKeytabFileKey) throws IOException {\n    HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n\n    HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n        .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(spnegoUserNameKey)\n        .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"\n        + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n            httpAddr.getHostName()));\n\n    if (policy.isHttpEnabled()) {\n      if (httpAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n\n    if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n      Configuration sslConf \u003d loadSslConfiguration(conf);\n      loadSslConfToHttpServerBuilder(builder, sslConf);\n\n      if (httpsAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n    return builder;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "87a6db45b70a1a07165e0773c4452d1327258bfa": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5629. Support HTTPS in JournalNode and SecondaryNameNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1549692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/13 1:58 PM",
      "commitName": "87a6db45b70a1a07165e0773c4452d1327258bfa",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,41 @@\n+  public static HttpServer.Builder httpServerTemplateForNNAndJN(\n+      Configuration conf, final InetSocketAddress httpAddr,\n+      final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n+      String spnegoKeytabFileKey) throws IOException {\n+    HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n+\n+    HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n+        .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n+        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n+        .setUsernameConfKey(spnegoUserNameKey)\n+        .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n+\n+    // initialize the webserver for uploading/downloading files.\n+    LOG.info(\"Starting web server as: \"\n+        + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n+            httpAddr.getHostName()));\n+\n+    if (policy.isHttpEnabled()) {\n+      if (httpAddr.getPort() \u003d\u003d 0) {\n+        builder.setFindPort(true);\n+      }\n+\n+      URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n+      builder.addEndpoint(uri);\n+      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n+    }\n+\n+    if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n+      Configuration sslConf \u003d loadSslConfiguration(conf);\n+      loadSslConfToHttpServerBuilder(builder, sslConf);\n+\n+      if (httpsAddr.getPort() \u003d\u003d 0) {\n+        builder.setFindPort(true);\n+      }\n+\n+      URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n+      builder.addEndpoint(uri);\n+      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n+    }\n+    return builder;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static HttpServer.Builder httpServerTemplateForNNAndJN(\n      Configuration conf, final InetSocketAddress httpAddr,\n      final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey,\n      String spnegoKeytabFileKey) throws IOException {\n    HttpConfig.Policy policy \u003d getHttpPolicy(conf);\n\n    HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n        .setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN, \" \")))\n        .setSecurityEnabled(UserGroupInformation.isSecurityEnabled())\n        .setUsernameConfKey(spnegoUserNameKey)\n        .setKeytabConfKey(getSpnegoKeytabKey(conf, spnegoKeytabFileKey));\n\n    // initialize the webserver for uploading/downloading files.\n    LOG.info(\"Starting web server as: \"\n        + SecurityUtil.getServerPrincipal(conf.get(spnegoUserNameKey),\n            httpAddr.getHostName()));\n\n    if (policy.isHttpEnabled()) {\n      if (httpAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"http://\" + NetUtils.getHostPortString(httpAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n\n    if (policy.isHttpsEnabled() \u0026\u0026 httpsAddr !\u003d null) {\n      Configuration sslConf \u003d loadSslConfiguration(conf);\n      loadSslConfToHttpServerBuilder(builder, sslConf);\n\n      if (httpsAddr.getPort() \u003d\u003d 0) {\n        builder.setFindPort(true);\n      }\n\n      URI uri \u003d URI.create(\"https://\" + NetUtils.getHostPortString(httpsAddr));\n      builder.addEndpoint(uri);\n      LOG.info(\"Starting Web-server for \" + name + \" at: \" + uri);\n    }\n    return builder;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}