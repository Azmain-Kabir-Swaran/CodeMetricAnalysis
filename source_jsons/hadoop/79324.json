{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileUtil.java",
  "functionName": "unZip",
  "functionId": "unZip___inFile-File__unzipDir-File",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
  "functionStartLine": 667,
  "functionEndLine": 708,
  "numCommitsSeen": 68,
  "timeTaken": 2752,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "745f203e577bacb35b042206db94615141fa5e6f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "745f203e577bacb35b042206db94615141fa5e6f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "11/01/19 10:54 AM",
      "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 111.04,
      "commitsBetweenForRepo": 826,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public static void unZip(File inFile, File unzipDir) throws IOException {\n     Enumeration\u003c? extends ZipEntry\u003e entries;\n     ZipFile zipFile \u003d new ZipFile(inFile);\n \n     try {\n       entries \u003d zipFile.entries();\n       String targetDirPath \u003d unzipDir.getCanonicalPath() + File.separator;\n       while (entries.hasMoreElements()) {\n         ZipEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory()) {\n           InputStream in \u003d zipFile.getInputStream(entry);\n           try {\n             File file \u003d new File(unzipDir, entry.getName());\n             if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n               throw new IOException(\"expanding \" + entry.getName()\n                   + \" would create file outside of \" + unzipDir);\n             }\n             if (!file.getParentFile().mkdirs()) {\n               if (!file.getParentFile().isDirectory()) {\n                 throw new IOException(\"Mkdirs failed to create \" +\n                                       file.getParentFile().toString());\n               }\n             }\n-            OutputStream out \u003d new FileOutputStream(file);\n+            OutputStream out \u003d Files.newOutputStream(file.toPath());\n             try {\n               byte[] buffer \u003d new byte[8192];\n               int i;\n               while ((i \u003d in.read(buffer)) !\u003d -1) {\n                 out.write(buffer, 0, i);\n               }\n             } finally {\n               out.close();\n             }\n           } finally {\n             in.close();\n           }\n         }\n       }\n     } finally {\n       zipFile.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration\u003c? extends ZipEntry\u003e entries;\n    ZipFile zipFile \u003d new ZipFile(inFile);\n\n    try {\n      entries \u003d zipFile.entries();\n      String targetDirPath \u003d unzipDir.getCanonicalPath() + File.separator;\n      while (entries.hasMoreElements()) {\n        ZipEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d zipFile.getInputStream(entry);\n          try {\n            File file \u003d new File(unzipDir, entry.getName());\n            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n              throw new IOException(\"expanding \" + entry.getName()\n                  + \" would create file outside of \" + unzipDir);\n            }\n            if (!file.getParentFile().mkdirs()) {\n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" +\n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d Files.newOutputStream(file.toPath());\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "745f203e577bacb35b042206db94615141fa5e6f": {
      "type": "Ybodychange",
      "commitMessage": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n",
      "commitDate": "23/05/18 1:16 AM",
      "commitName": "745f203e577bacb35b042206db94615141fa5e6f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/02/18 9:33 AM",
      "commitNameOld": "460d77bd646d03d3eb7670f9017aeeb5410c4a95",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 109.61,
      "commitsBetweenForRepo": 1371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,42 @@\n   public static void unZip(File inFile, File unzipDir) throws IOException {\n     Enumeration\u003c? extends ZipEntry\u003e entries;\n     ZipFile zipFile \u003d new ZipFile(inFile);\n \n     try {\n       entries \u003d zipFile.entries();\n+      String targetDirPath \u003d unzipDir.getCanonicalPath() + File.separator;\n       while (entries.hasMoreElements()) {\n         ZipEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory()) {\n           InputStream in \u003d zipFile.getInputStream(entry);\n           try {\n             File file \u003d new File(unzipDir, entry.getName());\n+            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+              throw new IOException(\"expanding \" + entry.getName()\n+                  + \" would create file outside of \" + unzipDir);\n+            }\n             if (!file.getParentFile().mkdirs()) {\n               if (!file.getParentFile().isDirectory()) {\n                 throw new IOException(\"Mkdirs failed to create \" +\n                                       file.getParentFile().toString());\n               }\n             }\n             OutputStream out \u003d new FileOutputStream(file);\n             try {\n               byte[] buffer \u003d new byte[8192];\n               int i;\n               while ((i \u003d in.read(buffer)) !\u003d -1) {\n                 out.write(buffer, 0, i);\n               }\n             } finally {\n               out.close();\n             }\n           } finally {\n             in.close();\n           }\n         }\n       }\n     } finally {\n       zipFile.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration\u003c? extends ZipEntry\u003e entries;\n    ZipFile zipFile \u003d new ZipFile(inFile);\n\n    try {\n      entries \u003d zipFile.entries();\n      String targetDirPath \u003d unzipDir.getCanonicalPath() + File.separator;\n      while (entries.hasMoreElements()) {\n        ZipEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d zipFile.getInputStream(entry);\n          try {\n            File file \u003d new File(unzipDir, entry.getName());\n            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n              throw new IOException(\"expanding \" + entry.getName()\n                  + \" would create file outside of \" + unzipDir);\n            }\n            if (!file.getParentFile().mkdirs()) {\n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" +\n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration\u003c? extends ZipEntry\u003e entries;\n    ZipFile zipFile \u003d new ZipFile(inFile);\n\n    try {\n      entries \u003d zipFile.entries();\n      while (entries.hasMoreElements()) {\n        ZipEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d zipFile.getInputStream(entry);\n          try {\n            File file \u003d new File(unzipDir, entry.getName());\n            if (!file.getParentFile().mkdirs()) {           \n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" + \n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration\u003c? extends ZipEntry\u003e entries;\n    ZipFile zipFile \u003d new ZipFile(inFile);\n\n    try {\n      entries \u003d zipFile.entries();\n      while (entries.hasMoreElements()) {\n        ZipEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d zipFile.getInputStream(entry);\n          try {\n            File file \u003d new File(unzipDir, entry.getName());\n            if (!file.getParentFile().mkdirs()) {           \n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" + \n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileUtil.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration\u003c? extends ZipEntry\u003e entries;\n    ZipFile zipFile \u003d new ZipFile(inFile);\n\n    try {\n      entries \u003d zipFile.entries();\n      while (entries.hasMoreElements()) {\n        ZipEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d zipFile.getInputStream(entry);\n          try {\n            File file \u003d new File(unzipDir, entry.getName());\n            if (!file.getParentFile().mkdirs()) {           \n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" + \n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileUtil.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileUtil.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,37 @@\n+  public static void unZip(File inFile, File unzipDir) throws IOException {\n+    Enumeration\u003c? extends ZipEntry\u003e entries;\n+    ZipFile zipFile \u003d new ZipFile(inFile);\n+\n+    try {\n+      entries \u003d zipFile.entries();\n+      while (entries.hasMoreElements()) {\n+        ZipEntry entry \u003d entries.nextElement();\n+        if (!entry.isDirectory()) {\n+          InputStream in \u003d zipFile.getInputStream(entry);\n+          try {\n+            File file \u003d new File(unzipDir, entry.getName());\n+            if (!file.getParentFile().mkdirs()) {           \n+              if (!file.getParentFile().isDirectory()) {\n+                throw new IOException(\"Mkdirs failed to create \" + \n+                                      file.getParentFile().toString());\n+              }\n+            }\n+            OutputStream out \u003d new FileOutputStream(file);\n+            try {\n+              byte[] buffer \u003d new byte[8192];\n+              int i;\n+              while ((i \u003d in.read(buffer)) !\u003d -1) {\n+                out.write(buffer, 0, i);\n+              }\n+            } finally {\n+              out.close();\n+            }\n+          } finally {\n+            in.close();\n+          }\n+        }\n+      }\n+    } finally {\n+      zipFile.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unZip(File inFile, File unzipDir) throws IOException {\n    Enumeration\u003c? extends ZipEntry\u003e entries;\n    ZipFile zipFile \u003d new ZipFile(inFile);\n\n    try {\n      entries \u003d zipFile.entries();\n      while (entries.hasMoreElements()) {\n        ZipEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d zipFile.getInputStream(entry);\n          try {\n            File file \u003d new File(unzipDir, entry.getName());\n            if (!file.getParentFile().mkdirs()) {           \n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" + \n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      zipFile.close();\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileUtil.java"
    }
  }
}