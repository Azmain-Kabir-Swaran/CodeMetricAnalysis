{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AUtils.java",
  "functionName": "initProxySupport",
  "functionId": "initProxySupport___conf-Configuration__bucket-String__awsConf-ClientConfiguration",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
  "functionStartLine": 1349,
  "functionEndLine": 1396,
  "numCommitsSeen": 97,
  "timeTaken": 6525,
  "changeHistory": [
    "da9a39eed138210de29b59b90c449b28da1c04f9",
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "d152557cf7f4d2288524c222fcbaf152bdc038b0",
    "27c4e90efce04e1b1302f668b5eb22412e00d033",
    "76fab26c5c02cef38924d04136407489fd9457d9"
  ],
  "changeHistoryShort": {
    "da9a39eed138210de29b59b90c449b28da1c04f9": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ymovefromfile",
    "d152557cf7f4d2288524c222fcbaf152bdc038b0": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "27c4e90efce04e1b1302f668b5eb22412e00d033": "Yexceptionschange",
    "76fab26c5c02cef38924d04136407489fd9457d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da9a39eed138210de29b59b90c449b28da1c04f9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
      "commitDate": "08/08/18 10:57 PM",
      "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "08/08/18 4:47 PM",
          "commitNameOld": "d81cd3611a449bcd7970ff2f1392a5e868e28f7e",
          "commitAuthorOld": "Hanisha Koneru",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,48 @@\n-  private static void initProxySupport(Configuration conf,\n-      ClientConfiguration awsConf) throws IllegalArgumentException {\n+  public static void initProxySupport(Configuration conf,\n+      String bucket,\n+      ClientConfiguration awsConf) throws IllegalArgumentException,\n+      IOException {\n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n     if (!proxyHost.isEmpty()) {\n       awsConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         awsConf.setProxyPort(proxyPort);\n       } else {\n         if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           awsConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           awsConf.setProxyPort(80);\n         }\n       }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n+          null, null);\n+      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n+          null, null);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n             PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       awsConf.setProxyUsername(proxyUsername);\n       awsConf.setProxyPassword(proxyPassword);\n       awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n       awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                 \"domain {} as workstation {}\", awsConf.getProxyHost(),\n             awsConf.getProxyPort(),\n             String.valueOf(awsConf.getProxyUsername()),\n             awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n             awsConf.getProxyWorkstation());\n       }\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d\n           \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initProxySupport(Configuration conf,\n      String bucket,\n      ClientConfiguration awsConf) throws IllegalArgumentException,\n      IOException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n          null, null);\n      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n          null, null);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d\n          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/DefaultS3ClientFactory.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
            "oldMethodName": "initProxySupport",
            "newMethodName": "initProxySupport"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "08/08/18 4:47 PM",
          "commitNameOld": "d81cd3611a449bcd7970ff2f1392a5e868e28f7e",
          "commitAuthorOld": "Hanisha Koneru",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,48 @@\n-  private static void initProxySupport(Configuration conf,\n-      ClientConfiguration awsConf) throws IllegalArgumentException {\n+  public static void initProxySupport(Configuration conf,\n+      String bucket,\n+      ClientConfiguration awsConf) throws IllegalArgumentException,\n+      IOException {\n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n     if (!proxyHost.isEmpty()) {\n       awsConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         awsConf.setProxyPort(proxyPort);\n       } else {\n         if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           awsConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           awsConf.setProxyPort(80);\n         }\n       }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n+          null, null);\n+      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n+          null, null);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n             PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       awsConf.setProxyUsername(proxyUsername);\n       awsConf.setProxyPassword(proxyPassword);\n       awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n       awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                 \"domain {} as workstation {}\", awsConf.getProxyHost(),\n             awsConf.getProxyPort(),\n             String.valueOf(awsConf.getProxyUsername()),\n             awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n             awsConf.getProxyWorkstation());\n       }\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d\n           \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initProxySupport(Configuration conf,\n      String bucket,\n      ClientConfiguration awsConf) throws IllegalArgumentException,\n      IOException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n          null, null);\n      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n          null, null);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d\n          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "08/08/18 4:47 PM",
          "commitNameOld": "d81cd3611a449bcd7970ff2f1392a5e868e28f7e",
          "commitAuthorOld": "Hanisha Koneru",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,48 @@\n-  private static void initProxySupport(Configuration conf,\n-      ClientConfiguration awsConf) throws IllegalArgumentException {\n+  public static void initProxySupport(Configuration conf,\n+      String bucket,\n+      ClientConfiguration awsConf) throws IllegalArgumentException,\n+      IOException {\n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n     if (!proxyHost.isEmpty()) {\n       awsConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         awsConf.setProxyPort(proxyPort);\n       } else {\n         if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           awsConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           awsConf.setProxyPort(80);\n         }\n       }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n+          null, null);\n+      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n+          null, null);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n             PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       awsConf.setProxyUsername(proxyUsername);\n       awsConf.setProxyPassword(proxyPassword);\n       awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n       awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                 \"domain {} as workstation {}\", awsConf.getProxyHost(),\n             awsConf.getProxyPort(),\n             String.valueOf(awsConf.getProxyUsername()),\n             awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n             awsConf.getProxyWorkstation());\n       }\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d\n           \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initProxySupport(Configuration conf,\n      String bucket,\n      ClientConfiguration awsConf) throws IllegalArgumentException,\n      IOException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n          null, null);\n      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n          null, null);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d\n          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[IllegalArgumentException]",
            "newValue": "[IllegalArgumentException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "08/08/18 4:47 PM",
          "commitNameOld": "d81cd3611a449bcd7970ff2f1392a5e868e28f7e",
          "commitAuthorOld": "Hanisha Koneru",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,48 @@\n-  private static void initProxySupport(Configuration conf,\n-      ClientConfiguration awsConf) throws IllegalArgumentException {\n+  public static void initProxySupport(Configuration conf,\n+      String bucket,\n+      ClientConfiguration awsConf) throws IllegalArgumentException,\n+      IOException {\n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n     if (!proxyHost.isEmpty()) {\n       awsConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         awsConf.setProxyPort(proxyPort);\n       } else {\n         if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           awsConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           awsConf.setProxyPort(80);\n         }\n       }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n+          null, null);\n+      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n+          null, null);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n             PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       awsConf.setProxyUsername(proxyUsername);\n       awsConf.setProxyPassword(proxyPassword);\n       awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n       awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                 \"domain {} as workstation {}\", awsConf.getProxyHost(),\n             awsConf.getProxyPort(),\n             String.valueOf(awsConf.getProxyUsername()),\n             awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n             awsConf.getProxyWorkstation());\n       }\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d\n           \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initProxySupport(Configuration conf,\n      String bucket,\n      ClientConfiguration awsConf) throws IllegalArgumentException,\n      IOException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n          null, null);\n      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n          null, null);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d\n          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "08/08/18 4:47 PM",
          "commitNameOld": "d81cd3611a449bcd7970ff2f1392a5e868e28f7e",
          "commitAuthorOld": "Hanisha Koneru",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,48 @@\n-  private static void initProxySupport(Configuration conf,\n-      ClientConfiguration awsConf) throws IllegalArgumentException {\n+  public static void initProxySupport(Configuration conf,\n+      String bucket,\n+      ClientConfiguration awsConf) throws IllegalArgumentException,\n+      IOException {\n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n     if (!proxyHost.isEmpty()) {\n       awsConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         awsConf.setProxyPort(proxyPort);\n       } else {\n         if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           awsConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           awsConf.setProxyPort(80);\n         }\n       }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n+          null, null);\n+      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n+          null, null);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n             PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       awsConf.setProxyUsername(proxyUsername);\n       awsConf.setProxyPassword(proxyPassword);\n       awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n       awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                 \"domain {} as workstation {}\", awsConf.getProxyHost(),\n             awsConf.getProxyPort(),\n             String.valueOf(awsConf.getProxyUsername()),\n             awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n             awsConf.getProxyWorkstation());\n       }\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d\n           \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initProxySupport(Configuration conf,\n      String bucket,\n      ClientConfiguration awsConf) throws IllegalArgumentException,\n      IOException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      final String proxyUsername \u003d lookupPassword(bucket, conf, PROXY_USERNAME,\n          null, null);\n      final String proxyPassword \u003d lookupPassword(bucket, conf, PROXY_PASSWORD,\n          null, null);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d\n          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, awsConf-ClientConfiguration]",
            "newValue": "[conf-Configuration, bucket-String, awsConf-ClientConfiguration]"
          }
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ymovefromfile",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "01/09/17 2:48 AM",
      "commitNameOld": "7a96033b15580a01a2867fa3cab9c1e409dbaafd",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n-    private static void initProxySupport(Configuration conf,\n-        ClientConfiguration awsConf) throws IllegalArgumentException {\n-      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n-      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n-      if (!proxyHost.isEmpty()) {\n-        awsConf.setProxyHost(proxyHost);\n-        if (proxyPort \u003e\u003d 0) {\n-          awsConf.setProxyPort(proxyPort);\n+  private static void initProxySupport(Configuration conf,\n+      ClientConfiguration awsConf) throws IllegalArgumentException {\n+    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n+    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n+    if (!proxyHost.isEmpty()) {\n+      awsConf.setProxyHost(proxyHost);\n+      if (proxyPort \u003e\u003d 0) {\n+        awsConf.setProxyPort(proxyPort);\n+      } else {\n+        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n+          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+          awsConf.setProxyPort(443);\n         } else {\n-          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n-            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n-            awsConf.setProxyPort(443);\n-          } else {\n-            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n-            awsConf.setProxyPort(80);\n-          }\n+          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+          awsConf.setProxyPort(80);\n         }\n-        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n-        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n-          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n-              PROXY_PASSWORD + \" set without the other.\";\n-          LOG.error(msg);\n-          throw new IllegalArgumentException(msg);\n-        }\n-        awsConf.setProxyUsername(proxyUsername);\n-        awsConf.setProxyPassword(proxyPassword);\n-        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n-        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n-                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n-              awsConf.getProxyPort(),\n-              String.valueOf(awsConf.getProxyUsername()),\n-              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n-              awsConf.getProxyWorkstation());\n-        }\n-      } else if (proxyPort \u003e\u003d 0) {\n-        String msg \u003d\n-            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n+      }\n+      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n+      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n+            PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n-    }\n\\ No newline at end of file\n+      awsConf.setProxyUsername(proxyUsername);\n+      awsConf.setProxyPassword(proxyPassword);\n+      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n+      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n+                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n+            awsConf.getProxyPort(),\n+            String.valueOf(awsConf.getProxyUsername()),\n+            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n+            awsConf.getProxyWorkstation());\n+      }\n+    } else if (proxyPort \u003e\u003d 0) {\n+      String msg \u003d\n+          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void initProxySupport(Configuration conf,\n      ClientConfiguration awsConf) throws IllegalArgumentException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d\n          \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/DefaultS3ClientFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ClientFactory.java",
        "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/DefaultS3ClientFactory.java",
        "oldMethodName": "initProxySupport",
        "newMethodName": "initProxySupport"
      }
    },
    "d152557cf7f4d2288524c222fcbaf152bdc038b0": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-13447. Refactor S3AFileSystem to support introduction of separate metadata repository and tests. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 9:36 AM",
      "commitName": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13447. Refactor S3AFileSystem to support introduction of separate metadata repository and tests. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 9:36 AM",
          "commitName": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "06/09/16 8:02 AM",
          "commitNameOld": "39d1b1d747b1e325792b897b3264272f32b756a9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n-  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n-      boolean secureConnections) throws IllegalArgumentException {\n-    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n-    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n-    if (!proxyHost.isEmpty()) {\n-      awsConf.setProxyHost(proxyHost);\n-      if (proxyPort \u003e\u003d 0) {\n-        awsConf.setProxyPort(proxyPort);\n-      } else {\n-        if (secureConnections) {\n-          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n-          awsConf.setProxyPort(443);\n+    private static void initProxySupport(Configuration conf,\n+        ClientConfiguration awsConf) throws IllegalArgumentException {\n+      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n+      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n+      if (!proxyHost.isEmpty()) {\n+        awsConf.setProxyHost(proxyHost);\n+        if (proxyPort \u003e\u003d 0) {\n+          awsConf.setProxyPort(proxyPort);\n         } else {\n-          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n-          awsConf.setProxyPort(80);\n+          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n+            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+            awsConf.setProxyPort(443);\n+          } else {\n+            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+            awsConf.setProxyPort(80);\n+          }\n         }\n-      }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n-      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n-        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n-            PROXY_PASSWORD + \" set without the other.\";\n+        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n+        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n+              PROXY_PASSWORD + \" set without the other.\";\n+          LOG.error(msg);\n+          throw new IllegalArgumentException(msg);\n+        }\n+        awsConf.setProxyUsername(proxyUsername);\n+        awsConf.setProxyPassword(proxyPassword);\n+        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n+        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n+                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n+              awsConf.getProxyPort(),\n+              String.valueOf(awsConf.getProxyUsername()),\n+              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n+              awsConf.getProxyWorkstation());\n+        }\n+      } else if (proxyPort \u003e\u003d 0) {\n+        String msg \u003d\n+            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n-      awsConf.setProxyUsername(proxyUsername);\n-      awsConf.setProxyPassword(proxyPassword);\n-      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n-      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n-                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n-            awsConf.getProxyPort(),\n-            String.valueOf(awsConf.getProxyUsername()),\n-            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n-            awsConf.getProxyWorkstation());\n-      }\n-    } else if (proxyPort \u003e\u003d 0) {\n-      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n-      LOG.error(msg);\n-      throw new IllegalArgumentException(msg);\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private static void initProxySupport(Configuration conf,\n        ClientConfiguration awsConf) throws IllegalArgumentException {\n      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n      if (!proxyHost.isEmpty()) {\n        awsConf.setProxyHost(proxyHost);\n        if (proxyPort \u003e\u003d 0) {\n          awsConf.setProxyPort(proxyPort);\n        } else {\n          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n            awsConf.setProxyPort(443);\n          } else {\n            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n            awsConf.setProxyPort(80);\n          }\n        }\n        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n              PROXY_PASSWORD + \" set without the other.\";\n          LOG.error(msg);\n          throw new IllegalArgumentException(msg);\n        }\n        awsConf.setProxyUsername(proxyUsername);\n        awsConf.setProxyPassword(proxyPassword);\n        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n              awsConf.getProxyPort(),\n              String.valueOf(awsConf.getProxyUsername()),\n              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n              awsConf.getProxyWorkstation());\n        }\n      } else if (proxyPort \u003e\u003d 0) {\n        String msg \u003d\n            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n    }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ClientFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ClientFactory.java",
            "oldMethodName": "initProxySupport",
            "newMethodName": "initProxySupport"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13447. Refactor S3AFileSystem to support introduction of separate metadata repository and tests. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 9:36 AM",
          "commitName": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "06/09/16 8:02 AM",
          "commitNameOld": "39d1b1d747b1e325792b897b3264272f32b756a9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n-  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n-      boolean secureConnections) throws IllegalArgumentException {\n-    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n-    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n-    if (!proxyHost.isEmpty()) {\n-      awsConf.setProxyHost(proxyHost);\n-      if (proxyPort \u003e\u003d 0) {\n-        awsConf.setProxyPort(proxyPort);\n-      } else {\n-        if (secureConnections) {\n-          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n-          awsConf.setProxyPort(443);\n+    private static void initProxySupport(Configuration conf,\n+        ClientConfiguration awsConf) throws IllegalArgumentException {\n+      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n+      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n+      if (!proxyHost.isEmpty()) {\n+        awsConf.setProxyHost(proxyHost);\n+        if (proxyPort \u003e\u003d 0) {\n+          awsConf.setProxyPort(proxyPort);\n         } else {\n-          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n-          awsConf.setProxyPort(80);\n+          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n+            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+            awsConf.setProxyPort(443);\n+          } else {\n+            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+            awsConf.setProxyPort(80);\n+          }\n         }\n-      }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n-      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n-        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n-            PROXY_PASSWORD + \" set without the other.\";\n+        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n+        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n+              PROXY_PASSWORD + \" set without the other.\";\n+          LOG.error(msg);\n+          throw new IllegalArgumentException(msg);\n+        }\n+        awsConf.setProxyUsername(proxyUsername);\n+        awsConf.setProxyPassword(proxyPassword);\n+        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n+        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n+                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n+              awsConf.getProxyPort(),\n+              String.valueOf(awsConf.getProxyUsername()),\n+              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n+              awsConf.getProxyWorkstation());\n+        }\n+      } else if (proxyPort \u003e\u003d 0) {\n+        String msg \u003d\n+            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n-      awsConf.setProxyUsername(proxyUsername);\n-      awsConf.setProxyPassword(proxyPassword);\n-      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n-      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n-                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n-            awsConf.getProxyPort(),\n-            String.valueOf(awsConf.getProxyUsername()),\n-            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n-            awsConf.getProxyWorkstation());\n-      }\n-    } else if (proxyPort \u003e\u003d 0) {\n-      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n-      LOG.error(msg);\n-      throw new IllegalArgumentException(msg);\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private static void initProxySupport(Configuration conf,\n        ClientConfiguration awsConf) throws IllegalArgumentException {\n      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n      if (!proxyHost.isEmpty()) {\n        awsConf.setProxyHost(proxyHost);\n        if (proxyPort \u003e\u003d 0) {\n          awsConf.setProxyPort(proxyPort);\n        } else {\n          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n            awsConf.setProxyPort(443);\n          } else {\n            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n            awsConf.setProxyPort(80);\n          }\n        }\n        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n              PROXY_PASSWORD + \" set without the other.\";\n          LOG.error(msg);\n          throw new IllegalArgumentException(msg);\n        }\n        awsConf.setProxyUsername(proxyUsername);\n        awsConf.setProxyPassword(proxyPassword);\n        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n              awsConf.getProxyPort(),\n              String.valueOf(awsConf.getProxyUsername()),\n              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n              awsConf.getProxyWorkstation());\n        }\n      } else if (proxyPort \u003e\u003d 0) {\n        String msg \u003d\n            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n    }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ClientFactory.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13447. Refactor S3AFileSystem to support introduction of separate metadata repository and tests. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 9:36 AM",
          "commitName": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "06/09/16 8:02 AM",
          "commitNameOld": "39d1b1d747b1e325792b897b3264272f32b756a9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n-  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n-      boolean secureConnections) throws IllegalArgumentException {\n-    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n-    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n-    if (!proxyHost.isEmpty()) {\n-      awsConf.setProxyHost(proxyHost);\n-      if (proxyPort \u003e\u003d 0) {\n-        awsConf.setProxyPort(proxyPort);\n-      } else {\n-        if (secureConnections) {\n-          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n-          awsConf.setProxyPort(443);\n+    private static void initProxySupport(Configuration conf,\n+        ClientConfiguration awsConf) throws IllegalArgumentException {\n+      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n+      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n+      if (!proxyHost.isEmpty()) {\n+        awsConf.setProxyHost(proxyHost);\n+        if (proxyPort \u003e\u003d 0) {\n+          awsConf.setProxyPort(proxyPort);\n         } else {\n-          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n-          awsConf.setProxyPort(80);\n+          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n+            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+            awsConf.setProxyPort(443);\n+          } else {\n+            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+            awsConf.setProxyPort(80);\n+          }\n         }\n-      }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n-      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n-        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n-            PROXY_PASSWORD + \" set without the other.\";\n+        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n+        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n+              PROXY_PASSWORD + \" set without the other.\";\n+          LOG.error(msg);\n+          throw new IllegalArgumentException(msg);\n+        }\n+        awsConf.setProxyUsername(proxyUsername);\n+        awsConf.setProxyPassword(proxyPassword);\n+        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n+        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n+                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n+              awsConf.getProxyPort(),\n+              String.valueOf(awsConf.getProxyUsername()),\n+              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n+              awsConf.getProxyWorkstation());\n+        }\n+      } else if (proxyPort \u003e\u003d 0) {\n+        String msg \u003d\n+            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n-      awsConf.setProxyUsername(proxyUsername);\n-      awsConf.setProxyPassword(proxyPassword);\n-      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n-      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n-                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n-            awsConf.getProxyPort(),\n-            String.valueOf(awsConf.getProxyUsername()),\n-            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n-            awsConf.getProxyWorkstation());\n-      }\n-    } else if (proxyPort \u003e\u003d 0) {\n-      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n-      LOG.error(msg);\n-      throw new IllegalArgumentException(msg);\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private static void initProxySupport(Configuration conf,\n        ClientConfiguration awsConf) throws IllegalArgumentException {\n      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n      if (!proxyHost.isEmpty()) {\n        awsConf.setProxyHost(proxyHost);\n        if (proxyPort \u003e\u003d 0) {\n          awsConf.setProxyPort(proxyPort);\n        } else {\n          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n            awsConf.setProxyPort(443);\n          } else {\n            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n            awsConf.setProxyPort(80);\n          }\n        }\n        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n              PROXY_PASSWORD + \" set without the other.\";\n          LOG.error(msg);\n          throw new IllegalArgumentException(msg);\n        }\n        awsConf.setProxyUsername(proxyUsername);\n        awsConf.setProxyPassword(proxyPassword);\n        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n              awsConf.getProxyPort(),\n              String.valueOf(awsConf.getProxyUsername()),\n              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n              awsConf.getProxyWorkstation());\n        }\n      } else if (proxyPort \u003e\u003d 0) {\n        String msg \u003d\n            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n    }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ClientFactory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13447. Refactor S3AFileSystem to support introduction of separate metadata repository and tests. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 9:36 AM",
          "commitName": "d152557cf7f4d2288524c222fcbaf152bdc038b0",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "06/09/16 8:02 AM",
          "commitNameOld": "39d1b1d747b1e325792b897b3264272f32b756a9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n-  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n-      boolean secureConnections) throws IllegalArgumentException {\n-    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n-    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n-    if (!proxyHost.isEmpty()) {\n-      awsConf.setProxyHost(proxyHost);\n-      if (proxyPort \u003e\u003d 0) {\n-        awsConf.setProxyPort(proxyPort);\n-      } else {\n-        if (secureConnections) {\n-          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n-          awsConf.setProxyPort(443);\n+    private static void initProxySupport(Configuration conf,\n+        ClientConfiguration awsConf) throws IllegalArgumentException {\n+      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n+      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n+      if (!proxyHost.isEmpty()) {\n+        awsConf.setProxyHost(proxyHost);\n+        if (proxyPort \u003e\u003d 0) {\n+          awsConf.setProxyPort(proxyPort);\n         } else {\n-          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n-          awsConf.setProxyPort(80);\n+          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n+            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+            awsConf.setProxyPort(443);\n+          } else {\n+            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+            awsConf.setProxyPort(80);\n+          }\n         }\n-      }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n-      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n-        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n-            PROXY_PASSWORD + \" set without the other.\";\n+        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n+        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n+              PROXY_PASSWORD + \" set without the other.\";\n+          LOG.error(msg);\n+          throw new IllegalArgumentException(msg);\n+        }\n+        awsConf.setProxyUsername(proxyUsername);\n+        awsConf.setProxyPassword(proxyPassword);\n+        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n+        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n+                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n+              awsConf.getProxyPort(),\n+              String.valueOf(awsConf.getProxyUsername()),\n+              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n+              awsConf.getProxyWorkstation());\n+        }\n+      } else if (proxyPort \u003e\u003d 0) {\n+        String msg \u003d\n+            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n-      awsConf.setProxyUsername(proxyUsername);\n-      awsConf.setProxyPassword(proxyPassword);\n-      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n-      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n-                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n-            awsConf.getProxyPort(),\n-            String.valueOf(awsConf.getProxyUsername()),\n-            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n-            awsConf.getProxyWorkstation());\n-      }\n-    } else if (proxyPort \u003e\u003d 0) {\n-      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n-      LOG.error(msg);\n-      throw new IllegalArgumentException(msg);\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private static void initProxySupport(Configuration conf,\n        ClientConfiguration awsConf) throws IllegalArgumentException {\n      String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n      int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n      if (!proxyHost.isEmpty()) {\n        awsConf.setProxyHost(proxyHost);\n        if (proxyPort \u003e\u003d 0) {\n          awsConf.setProxyPort(proxyPort);\n        } else {\n          if (conf.getBoolean(SECURE_CONNECTIONS, DEFAULT_SECURE_CONNECTIONS)) {\n            LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n            awsConf.setProxyPort(443);\n          } else {\n            LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n            awsConf.setProxyPort(80);\n          }\n        }\n        String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n        String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n        if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n          String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n              PROXY_PASSWORD + \" set without the other.\";\n          LOG.error(msg);\n          throw new IllegalArgumentException(msg);\n        }\n        awsConf.setProxyUsername(proxyUsername);\n        awsConf.setProxyPassword(proxyPassword);\n        awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n        awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                  \"domain {} as workstation {}\", awsConf.getProxyHost(),\n              awsConf.getProxyPort(),\n              String.valueOf(awsConf.getProxyUsername()),\n              awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n              awsConf.getProxyWorkstation());\n        }\n      } else if (proxyPort \u003e\u003d 0) {\n        String msg \u003d\n            \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n    }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3ClientFactory.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, awsConf-ClientConfiguration, secureConnections-boolean]",
            "newValue": "[conf-Configuration, awsConf-ClientConfiguration]"
          }
        }
      ]
    },
    "27c4e90efce04e1b1302f668b5eb22412e00d033": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel\npatch includes\nHADOOP-12844 Recover when S3A fails on IOException in read()\nHADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge\nHADOOP-13047 S3a Forward seek in stream length to be configurable\n",
      "commitDate": "12/05/16 11:24 AM",
      "commitName": "27c4e90efce04e1b1302f668b5eb22412e00d033",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/05/16 5:57 AM",
      "commitNameOld": "def2a6d3856452d5c804f04e5bf485541a3bc53a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n-      boolean secureConnections) throws IllegalArgumentException,\n-      IllegalArgumentException {\n+      boolean secureConnections) throws IllegalArgumentException {\n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n     if (!proxyHost.isEmpty()) {\n       awsConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         awsConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           awsConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           awsConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n             PROXY_PASSWORD + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       awsConf.setProxyUsername(proxyUsername);\n       awsConf.setProxyPassword(proxyPassword);\n       awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n       awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                 \"domain {} as workstation {}\", awsConf.getProxyHost(),\n-            awsConf.getProxyPort(), String.valueOf(awsConf.getProxyUsername()),\n+            awsConf.getProxyPort(),\n+            String.valueOf(awsConf.getProxyUsername()),\n             awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n             awsConf.getProxyWorkstation());\n       }\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n      boolean secureConnections) throws IllegalArgumentException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(),\n            String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {
        "oldValue": "[IllegalArgumentException, IllegalArgumentException]",
        "newValue": "[IllegalArgumentException]"
      }
    },
    "76fab26c5c02cef38924d04136407489fd9457d9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12548. Read s3a creds from a Credential Provider. Contributed by Larry McCay.\n",
      "commitDate": "17/02/16 12:19 PM",
      "commitName": "76fab26c5c02cef38924d04136407489fd9457d9",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,43 @@\n+  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n+      boolean secureConnections) throws IllegalArgumentException,\n+      IllegalArgumentException {\n+    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n+    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n+    if (!proxyHost.isEmpty()) {\n+      awsConf.setProxyHost(proxyHost);\n+      if (proxyPort \u003e\u003d 0) {\n+        awsConf.setProxyPort(proxyPort);\n+      } else {\n+        if (secureConnections) {\n+          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+          awsConf.setProxyPort(443);\n+        } else {\n+          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+          awsConf.setProxyPort(80);\n+        }\n+      }\n+      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n+      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n+      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n+            PROXY_PASSWORD + \" set without the other.\";\n+        LOG.error(msg);\n+        throw new IllegalArgumentException(msg);\n+      }\n+      awsConf.setProxyUsername(proxyUsername);\n+      awsConf.setProxyPassword(proxyPassword);\n+      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n+      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n+                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n+            awsConf.getProxyPort(), String.valueOf(awsConf.getProxyUsername()),\n+            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n+            awsConf.getProxyWorkstation());\n+      }\n+    } else if (proxyPort \u003e\u003d 0) {\n+      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void initProxySupport(Configuration conf, ClientConfiguration awsConf,\n      boolean secureConnections) throws IllegalArgumentException,\n      IllegalArgumentException {\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT, -1);\n    if (!proxyHost.isEmpty()) {\n      awsConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        awsConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          awsConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          awsConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME + \" or \" +\n            PROXY_PASSWORD + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      awsConf.setProxyUsername(proxyUsername);\n      awsConf.setProxyPassword(proxyPassword);\n      awsConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN));\n      awsConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION));\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Using proxy server {}:{} as user {} with password {} on \" +\n                \"domain {} as workstation {}\", awsConf.getProxyHost(),\n            awsConf.getProxyPort(), String.valueOf(awsConf.getProxyUsername()),\n            awsConf.getProxyPassword(), awsConf.getProxyDomain(),\n            awsConf.getProxyWorkstation());\n      }\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT + \" set without \" + PROXY_HOST;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}