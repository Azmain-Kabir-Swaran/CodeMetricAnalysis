{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferClient.java",
  "functionName": "send",
  "functionId": "send___addr-InetAddress__underlyingOut-OutputStream__underlyingIn-InputStream__encryptionKey-DataEncryptionKey__accessToken-Token__BlockTokenIdentifier____datanodeId-DatanodeID__secretKey-SecretKey",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
  "functionStartLine": 259,
  "functionEndLine": 300,
  "numCommitsSeen": 17,
  "timeTaken": 4126,
  "changeHistory": [
    "626fec652b9f3dae10c9af78fd220b1240f19fc7",
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "3b54223c0f32d42a84436c670d80b791a8e9696d"
  ],
  "changeHistoryShort": {
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Yfilerename",
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709": "Ybodychange",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ybodychange",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
      "commitDate": "12/04/19 5:37 PM",
      "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
      "commitAuthor": "Chen Liang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
          "commitDate": "12/04/19 5:37 PM",
          "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "31/01/18 10:47 AM",
          "commitNameOld": "37b753656849d0864ed3c8858edf3b85515cbf39",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 436.24,
          "commitsBetweenForRepo": 3917,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,42 @@\n   private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey,\n-      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n+      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId,\n+      SecretKey secretKey)\n       throws IOException {\n     if (encryptionKey !\u003d null) {\n       LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n           + \"datanodeId \u003d {}\", addr, datanodeId);\n       return getEncryptedStreams(addr, underlyingOut, underlyingIn,\n-          encryptionKey);\n+          encryptionKey, accessToken, secretKey);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n           + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n       LOG.debug(\n           \"SASL client skipping handshake in secured configuration with \"\n               + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n       LOG.debug(\n           \"SASL client skipping handshake in secured configuration with \"\n               + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     } else if (saslPropsResolver !\u003d null) {\n       LOG.debug(\n           \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n-      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken);\n+      return getSaslStreams(addr, underlyingOut, underlyingIn,\n+          accessToken, secretKey);\n     } else {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured so this is a rare edge case.\n       LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n               + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId,\n      SecretKey secretKey)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n          + \"datanodeId \u003d {}\", addr, datanodeId);\n      return getEncryptedStreams(addr, underlyingOut, underlyingIn,\n          encryptionKey, accessToken, secretKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n          + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n          \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn,\n          accessToken, secretKey);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured so this is a rare edge case.\n      LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n              + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {
            "oldValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey, accessToken-Token\u003cBlockTokenIdentifier\u003e, datanodeId-DatanodeID]",
            "newValue": "[addr-InetAddress, underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey, accessToken-Token\u003cBlockTokenIdentifier\u003e, datanodeId-DatanodeID, secretKey-SecretKey]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
          "commitDate": "12/04/19 5:37 PM",
          "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
          "commitAuthor": "Chen Liang",
          "commitDateOld": "31/01/18 10:47 AM",
          "commitNameOld": "37b753656849d0864ed3c8858edf3b85515cbf39",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 436.24,
          "commitsBetweenForRepo": 3917,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,42 @@\n   private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey,\n-      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n+      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId,\n+      SecretKey secretKey)\n       throws IOException {\n     if (encryptionKey !\u003d null) {\n       LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n           + \"datanodeId \u003d {}\", addr, datanodeId);\n       return getEncryptedStreams(addr, underlyingOut, underlyingIn,\n-          encryptionKey);\n+          encryptionKey, accessToken, secretKey);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n           + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n       LOG.debug(\n           \"SASL client skipping handshake in secured configuration with \"\n               + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n       LOG.debug(\n           \"SASL client skipping handshake in secured configuration with \"\n               + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     } else if (saslPropsResolver !\u003d null) {\n       LOG.debug(\n           \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n-      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken);\n+      return getSaslStreams(addr, underlyingOut, underlyingIn,\n+          accessToken, secretKey);\n     } else {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured so this is a rare edge case.\n       LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n               + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId,\n      SecretKey secretKey)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n          + \"datanodeId \u003d {}\", addr, datanodeId);\n      return getEncryptedStreams(addr, underlyingOut, underlyingIn,\n          encryptionKey, accessToken, secretKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n          + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n          \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn,\n          accessToken, secretKey);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured so this is a rare edge case.\n      LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n              + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "24/02/16 12:11 PM",
      "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
      "commitAuthor": "cnauroth",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 144.06,
      "commitsBetweenForRepo": 987,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey,\n       Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n       throws IOException {\n     if (encryptionKey !\u003d null) {\n       LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n           + \"datanodeId \u003d {}\", addr, datanodeId);\n-      return getEncryptedStreams(underlyingOut, underlyingIn,\n+      return getEncryptedStreams(addr, underlyingOut, underlyingIn,\n           encryptionKey);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n           + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n       LOG.debug(\n           \"SASL client skipping handshake in secured configuration with \"\n               + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n       LOG.debug(\n           \"SASL client skipping handshake in secured configuration with \"\n               + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     } else if (saslPropsResolver !\u003d null) {\n       LOG.debug(\n           \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken);\n     } else {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured so this is a rare edge case.\n       LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n               + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n           addr, datanodeId);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n          + \"datanodeId \u003d {}\", addr, datanodeId);\n      return getEncryptedStreams(addr, underlyingOut, underlyingIn,\n          encryptionKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n          + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n          \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured so this is a rare edge case.\n      LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n              + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 3:32 PM",
      "commitNameOld": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 29.84,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey,\n       Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n       throws IOException {\n     if (encryptionKey !\u003d null) {\n-      LOG.debug(\n-        \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n-        addr, datanodeId);\n+      LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n+          + \"datanodeId \u003d {}\", addr, datanodeId);\n       return getEncryptedStreams(underlyingOut, underlyingIn,\n-        encryptionKey);\n+          encryptionKey);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n-      LOG.debug(\n-        \"SASL client skipping handshake in unsecured configuration for \"\n-        + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n+      LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n+          + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n       LOG.debug(\n-        \"SASL client skipping handshake in secured configuration with \"\n-        + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n+          \"SASL client skipping handshake in secured configuration with \"\n+              + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n+          addr, datanodeId);\n       return null;\n     } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n       LOG.debug(\n-        \"SASL client skipping handshake in secured configuration with \"\n-        + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n+          \"SASL client skipping handshake in secured configuration with \"\n+              + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n+          addr, datanodeId);\n       return null;\n     } else if (saslPropsResolver !\u003d null) {\n       LOG.debug(\n-        \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n-        addr, datanodeId);\n-      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n-        datanodeId);\n+          \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n+          addr, datanodeId);\n+      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken);\n     } else {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n-      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n-      LOG.debug(\n-        \"SASL client skipping handshake in secured configuration with no SASL \"\n-        + \"protection configured for addr \u003d {}, datanodeId \u003d {}\",\n-        addr, datanodeId);\n+      // ignore.secure.ports.for.testing configured so this is a rare edge case.\n+      LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n+              + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n+          addr, datanodeId);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\"SASL client doing encrypted handshake for addr \u003d {}, \"\n          + \"datanodeId \u003d {}\", addr, datanodeId);\n      return getEncryptedStreams(underlyingOut, underlyingIn,\n          encryptionKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\"SASL client skipping handshake in unsecured configuration for \"\n          + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"privileged port for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n          \"SASL client skipping handshake in secured configuration with \"\n              + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n          \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured so this is a rare edge case.\n      LOG.debug(\"SASL client skipping handshake in secured configuration with \"\n              + \"no SASL protection configured for addr \u003d {}, datanodeId \u003d {}\",\n          addr, datanodeId);\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 1:26 PM",
      "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\n        \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getEncryptedStreams(underlyingOut, underlyingIn,\n        encryptionKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL client skipping handshake in unsecured configuration for \"\n        + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n        \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n        datanodeId);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
      }
    },
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7386. Replace check \"port number \u003c 1024\" with shared isPrivilegedPort method. Contributed by Yongjun Zhang.\n",
      "commitDate": "14/11/14 4:43 PM",
      "commitName": "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
      "commitAuthor": "cnauroth",
      "commitDateOld": "30/10/14 10:48 PM",
      "commitNameOld": "5573b3476a5a6fce0ac99c654a9a9ec90f744a20",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 14.79,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey,\n       Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n       throws IOException {\n     if (encryptionKey !\u003d null) {\n       LOG.debug(\n         \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n         addr, datanodeId);\n       return getEncryptedStreams(underlyingOut, underlyingIn,\n         encryptionKey);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\n         \"SASL client skipping handshake in unsecured configuration for \"\n         + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n-    } else if (datanodeId.getXferPort() \u003c 1024) {\n+    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n       LOG.debug(\n         \"SASL client skipping handshake in secured configuration with \"\n         + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n       LOG.debug(\n         \"SASL client skipping handshake in secured configuration with \"\n         + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (saslPropsResolver !\u003d null) {\n       LOG.debug(\n         \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n         addr, datanodeId);\n       return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n         datanodeId);\n     } else {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n       LOG.debug(\n         \"SASL client skipping handshake in secured configuration with no SASL \"\n         + \"protection configured for addr \u003d {}, datanodeId \u003d {}\",\n         addr, datanodeId);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\n        \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getEncryptedStreams(underlyingOut, underlyingIn,\n        encryptionKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL client skipping handshake in unsecured configuration for \"\n        + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (SecurityUtil.isPrivilegedPort(datanodeId.getXferPort())) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n        \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n        datanodeId);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "14/07/14 11:10 AM",
      "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 67.43,
      "commitsBetweenForRepo": 657,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n       InputStream underlyingIn, DataEncryptionKey encryptionKey,\n       Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n       throws IOException {\n     if (encryptionKey !\u003d null) {\n       LOG.debug(\n         \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n         addr, datanodeId);\n       return getEncryptedStreams(underlyingOut, underlyingIn,\n         encryptionKey);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\n         \"SASL client skipping handshake in unsecured configuration for \"\n         + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n     } else if (datanodeId.getXferPort() \u003c 1024) {\n       LOG.debug(\n         \"SASL client skipping handshake in secured configuration with \"\n         + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n-    } else if (accessToken.getIdentifier().length \u003d\u003d 0) {\n-      if (!fallbackToSimpleAuthAllowed) {\n-        throw new IOException(\n-          \"No block access token was provided (insecure cluster), but this \" +\n-          \"client is configured to allow only secure connections.\");\n-      }\n+    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n       LOG.debug(\n         \"SASL client skipping handshake in secured configuration with \"\n         + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n       return null;\n-    } else {\n+    } else if (saslPropsResolver !\u003d null) {\n       LOG.debug(\n         \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n         addr, datanodeId);\n       return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n         datanodeId);\n+    } else {\n+      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n+      // only way this can happen is if the DataNode has\n+      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n+      LOG.debug(\n+        \"SASL client skipping handshake in secured configuration with no SASL \"\n+        + \"protection configured for addr \u003d {}, datanodeId \u003d {}\",\n+        addr, datanodeId);\n+      return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\n        \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getEncryptedStreams(underlyingOut, underlyingIn,\n        encryptionKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL client skipping handshake in unsecured configuration for \"\n        + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (datanodeId.getXferPort() \u003c 1024) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (fallbackToSimpleAuth !\u003d null \u0026\u0026 fallbackToSimpleAuth.get()) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (saslPropsResolver !\u003d null) {\n      LOG.debug(\n        \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n        datanodeId);\n    } else {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java",
      "extendedDetails": {}
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,38 @@\n+  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n+      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n+      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n+      throws IOException {\n+    if (encryptionKey !\u003d null) {\n+      LOG.debug(\n+        \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n+        addr, datanodeId);\n+      return getEncryptedStreams(underlyingOut, underlyingIn,\n+        encryptionKey);\n+    } else if (!UserGroupInformation.isSecurityEnabled()) {\n+      LOG.debug(\n+        \"SASL client skipping handshake in unsecured configuration for \"\n+        + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n+      return null;\n+    } else if (datanodeId.getXferPort() \u003c 1024) {\n+      LOG.debug(\n+        \"SASL client skipping handshake in secured configuration with \"\n+        + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n+      return null;\n+    } else if (accessToken.getIdentifier().length \u003d\u003d 0) {\n+      if (!fallbackToSimpleAuthAllowed) {\n+        throw new IOException(\n+          \"No block access token was provided (insecure cluster), but this \" +\n+          \"client is configured to allow only secure connections.\");\n+      }\n+      LOG.debug(\n+        \"SASL client skipping handshake in secured configuration with \"\n+        + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n+      return null;\n+    } else {\n+      LOG.debug(\n+        \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n+        addr, datanodeId);\n+      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n+        datanodeId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair send(InetAddress addr, OutputStream underlyingOut,\n      InputStream underlyingIn, DataEncryptionKey encryptionKey,\n      Token\u003cBlockTokenIdentifier\u003e accessToken, DatanodeID datanodeId)\n      throws IOException {\n    if (encryptionKey !\u003d null) {\n      LOG.debug(\n        \"SASL client doing encrypted handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getEncryptedStreams(underlyingOut, underlyingIn,\n        encryptionKey);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL client skipping handshake in unsecured configuration for \"\n        + \"addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (datanodeId.getXferPort() \u003c 1024) {\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"privileged port for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else if (accessToken.getIdentifier().length \u003d\u003d 0) {\n      if (!fallbackToSimpleAuthAllowed) {\n        throw new IOException(\n          \"No block access token was provided (insecure cluster), but this \" +\n          \"client is configured to allow only secure connections.\");\n      }\n      LOG.debug(\n        \"SASL client skipping handshake in secured configuration with \"\n        + \"unsecured cluster for addr \u003d {}, datanodeId \u003d {}\", addr, datanodeId);\n      return null;\n    } else {\n      LOG.debug(\n        \"SASL client doing general handshake for addr \u003d {}, datanodeId \u003d {}\",\n        addr, datanodeId);\n      return getSaslStreams(addr, underlyingOut, underlyingIn, accessToken,\n        datanodeId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferClient.java"
    }
  }
}