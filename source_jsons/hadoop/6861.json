{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeDirectory.java",
  "functionName": "replaceChild",
  "functionId": "replaceChild___oldChild-INode__newChild-INode(modifiers-final)__inodeMap-INodeMap(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
  "functionStartLine": 350,
  "functionEndLine": 378,
  "numCommitsSeen": 284,
  "timeTaken": 3356,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "3a3e0f573129c8308332d4b301a9319ee579d85a",
    "36f43dcb4fad97f63fa53c5f7189be15c447b85b",
    "0fa5cad0b27780c27a284c23101b1099d4886506"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange",
    "3a3e0f573129c8308332d4b301a9319ee579d85a": "Ymultichange(Yparameterchange,Ybodychange)",
    "36f43dcb4fad97f63fa53c5f7189be15c447b85b": "Ymultichange(Ybodychange,Yparametermetachange)",
    "0fa5cad0b27780c27a284c23101b1099d4886506": "Ybodychange"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/02/18 2:46 PM",
      "commitNameOld": "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 31.04,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void replaceChild(INode oldChild, final INode newChild,\n       final INodeMap inodeMap) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n     Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n         || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n             .asReference().getReferredINode());\n     oldChild \u003d children.get(i);\n     \n     if (oldChild.isReference() \u0026\u0026 newChild.isReference()) {\n       // both are reference nodes, e.g., DstReference -\u003e WithName\n       final INodeReference.WithCount withCount \u003d \n           (WithCount) oldChild.asReference().getReferredINode();\n       withCount.removeReference(oldChild.asReference());\n     }\n     children.set(i, newChild);\n     \n     // replace the instance in the created list of the diff list\n     DirectoryWithSnapshotFeature sf \u003d this.getDirectoryWithSnapshotFeature();\n     if (sf !\u003d null) {\n-      sf.getDiffs().replaceChild(ListType.CREATED, oldChild, newChild);\n+      sf.getDiffs().replaceCreatedChild(oldChild, newChild);\n     }\n     \n     // update the inodeMap\n     if (inodeMap !\u003d null) {\n       inodeMap.put(newChild);\n     }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void replaceChild(INode oldChild, final INode newChild,\n      final INodeMap inodeMap) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n            .asReference().getReferredINode());\n    oldChild \u003d children.get(i);\n    \n    if (oldChild.isReference() \u0026\u0026 newChild.isReference()) {\n      // both are reference nodes, e.g., DstReference -\u003e WithName\n      final INodeReference.WithCount withCount \u003d \n          (WithCount) oldChild.asReference().getReferredINode();\n      withCount.removeReference(oldChild.asReference());\n    }\n    children.set(i, newChild);\n    \n    // replace the instance in the created list of the diff list\n    DirectoryWithSnapshotFeature sf \u003d this.getDirectoryWithSnapshotFeature();\n    if (sf !\u003d null) {\n      sf.getDiffs().replaceCreatedChild(oldChild, newChild);\n    }\n    \n    // update the inodeMap\n    if (inodeMap !\u003d null) {\n      inodeMap.put(newChild);\n    }    \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/12/13 10:26 AM",
      "commitNameOld": "5fd7230671bb3d90081d4138c364c3f65b35cdbc",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void replaceChild(INode oldChild, final INode newChild,\n       final INodeMap inodeMap) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n     Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n         || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n             .asReference().getReferredINode());\n     oldChild \u003d children.get(i);\n     \n-    if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n-      // replace the referred inode, e.g., \n-      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n-      final INode withCount \u003d oldChild.asReference().getReferredINode();\n-      withCount.asReference().setReferredINode(newChild);\n-    } else {\n-      if (oldChild.isReference()) {\n-        // both are reference nodes, e.g., DstReference -\u003e WithName\n-        final INodeReference.WithCount withCount \u003d \n-            (WithCount) oldChild.asReference().getReferredINode();\n-        withCount.removeReference(oldChild.asReference());\n-      }\n-      children.set(i, newChild);\n+    if (oldChild.isReference() \u0026\u0026 newChild.isReference()) {\n+      // both are reference nodes, e.g., DstReference -\u003e WithName\n+      final INodeReference.WithCount withCount \u003d \n+          (WithCount) oldChild.asReference().getReferredINode();\n+      withCount.removeReference(oldChild.asReference());\n     }\n+    children.set(i, newChild);\n+    \n+    // replace the instance in the created list of the diff list\n+    DirectoryWithSnapshotFeature sf \u003d this.getDirectoryWithSnapshotFeature();\n+    if (sf !\u003d null) {\n+      sf.getDiffs().replaceChild(ListType.CREATED, oldChild, newChild);\n+    }\n+    \n     // update the inodeMap\n     if (inodeMap !\u003d null) {\n       inodeMap.put(newChild);\n-    }\n+    }    \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void replaceChild(INode oldChild, final INode newChild,\n      final INodeMap inodeMap) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n            .asReference().getReferredINode());\n    oldChild \u003d children.get(i);\n    \n    if (oldChild.isReference() \u0026\u0026 newChild.isReference()) {\n      // both are reference nodes, e.g., DstReference -\u003e WithName\n      final INodeReference.WithCount withCount \u003d \n          (WithCount) oldChild.asReference().getReferredINode();\n      withCount.removeReference(oldChild.asReference());\n    }\n    children.set(i, newChild);\n    \n    // replace the instance in the created list of the diff list\n    DirectoryWithSnapshotFeature sf \u003d this.getDirectoryWithSnapshotFeature();\n    if (sf !\u003d null) {\n      sf.getDiffs().replaceChild(ListType.CREATED, oldChild, newChild);\n    }\n    \n    // update the inodeMap\n    if (inodeMap !\u003d null) {\n      inodeMap.put(newChild);\n    }    \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "3a3e0f573129c8308332d4b301a9319ee579d85a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4760. Update inodeMap after node replacement.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1477827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/13 2:05 PM",
      "commitName": "3a3e0f573129c8308332d4b301a9319ee579d85a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4760. Update inodeMap after node replacement.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1477827 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/04/13 2:05 PM",
          "commitName": "3a3e0f573129c8308332d4b301a9319ee579d85a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "25/04/13 11:53 AM",
          "commitNameOld": "36f43dcb4fad97f63fa53c5f7189be15c447b85b",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.09,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,29 @@\n-  public void replaceChild(INode oldChild, final INode newChild) {\n+  public void replaceChild(INode oldChild, final INode newChild,\n+      final INodeMap inodeMap) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n     Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n         || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n             .asReference().getReferredINode());\n     oldChild \u003d children.get(i);\n     \n     if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n       // replace the referred inode, e.g., \n       // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n       final INode withCount \u003d oldChild.asReference().getReferredINode();\n       withCount.asReference().setReferredINode(newChild);\n     } else {\n       if (oldChild.isReference()) {\n         // both are reference nodes, e.g., DstReference -\u003e WithName\n         final INodeReference.WithCount withCount \u003d \n             (WithCount) oldChild.asReference().getReferredINode();\n         withCount.removeReference(oldChild.asReference());\n       }\n-      // do the replacement\n       children.set(i, newChild);\n     }\n+    // update the inodeMap\n+    if (inodeMap !\u003d null) {\n+      inodeMap.put(newChild);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void replaceChild(INode oldChild, final INode newChild,\n      final INodeMap inodeMap) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n            .asReference().getReferredINode());\n    oldChild \u003d children.get(i);\n    \n    if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n      // replace the referred inode, e.g., \n      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n      final INode withCount \u003d oldChild.asReference().getReferredINode();\n      withCount.asReference().setReferredINode(newChild);\n    } else {\n      if (oldChild.isReference()) {\n        // both are reference nodes, e.g., DstReference -\u003e WithName\n        final INodeReference.WithCount withCount \u003d \n            (WithCount) oldChild.asReference().getReferredINode();\n        withCount.removeReference(oldChild.asReference());\n      }\n      children.set(i, newChild);\n    }\n    // update the inodeMap\n    if (inodeMap !\u003d null) {\n      inodeMap.put(newChild);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[oldChild-INode, newChild-INode(modifiers-final)]",
            "newValue": "[oldChild-INode, newChild-INode(modifiers-final), inodeMap-INodeMap(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4760. Update inodeMap after node replacement.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1477827 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/04/13 2:05 PM",
          "commitName": "3a3e0f573129c8308332d4b301a9319ee579d85a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "25/04/13 11:53 AM",
          "commitNameOld": "36f43dcb4fad97f63fa53c5f7189be15c447b85b",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.09,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,29 @@\n-  public void replaceChild(INode oldChild, final INode newChild) {\n+  public void replaceChild(INode oldChild, final INode newChild,\n+      final INodeMap inodeMap) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n     Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n         || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n             .asReference().getReferredINode());\n     oldChild \u003d children.get(i);\n     \n     if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n       // replace the referred inode, e.g., \n       // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n       final INode withCount \u003d oldChild.asReference().getReferredINode();\n       withCount.asReference().setReferredINode(newChild);\n     } else {\n       if (oldChild.isReference()) {\n         // both are reference nodes, e.g., DstReference -\u003e WithName\n         final INodeReference.WithCount withCount \u003d \n             (WithCount) oldChild.asReference().getReferredINode();\n         withCount.removeReference(oldChild.asReference());\n       }\n-      // do the replacement\n       children.set(i, newChild);\n     }\n+    // update the inodeMap\n+    if (inodeMap !\u003d null) {\n+      inodeMap.put(newChild);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void replaceChild(INode oldChild, final INode newChild,\n      final INodeMap inodeMap) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n            .asReference().getReferredINode());\n    oldChild \u003d children.get(i);\n    \n    if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n      // replace the referred inode, e.g., \n      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n      final INode withCount \u003d oldChild.asReference().getReferredINode();\n      withCount.asReference().setReferredINode(newChild);\n    } else {\n      if (oldChild.isReference()) {\n        // both are reference nodes, e.g., DstReference -\u003e WithName\n        final INodeReference.WithCount withCount \u003d \n            (WithCount) oldChild.asReference().getReferredINode();\n        withCount.removeReference(oldChild.asReference());\n      }\n      children.set(i, newChild);\n    }\n    // update the inodeMap\n    if (inodeMap !\u003d null) {\n      inodeMap.put(newChild);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "36f43dcb4fad97f63fa53c5f7189be15c447b85b": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-4742. Fix appending to a renamed file with snapshot.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1475903 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 11:53 AM",
      "commitName": "36f43dcb4fad97f63fa53c5f7189be15c447b85b",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4742. Fix appending to a renamed file with snapshot.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1475903 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/04/13 11:53 AM",
          "commitName": "36f43dcb4fad97f63fa53c5f7189be15c447b85b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/04/13 1:31 PM",
          "commitNameOld": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.93,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public void replaceChild(final INode oldChild, final INode newChild) {\n+  public void replaceChild(INode oldChild, final INode newChild) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n-    Preconditions.checkState(oldChild \u003d\u003d children.get(i));\n+    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n+        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n+            .asReference().getReferredINode());\n+    oldChild \u003d children.get(i);\n     \n     if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n       // replace the referred inode, e.g., \n       // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n-      // TODO: add a unit test for rename + append\n       final INode withCount \u003d oldChild.asReference().getReferredINode();\n       withCount.asReference().setReferredINode(newChild);\n     } else {\n       if (oldChild.isReference()) {\n         // both are reference nodes, e.g., DstReference -\u003e WithName\n         final INodeReference.WithCount withCount \u003d \n             (WithCount) oldChild.asReference().getReferredINode();\n         withCount.removeReference(oldChild.asReference());\n       }\n       // do the replacement\n-      final INode removed \u003d children.set(i, newChild);\n-      Preconditions.checkState(removed \u003d\u003d oldChild);\n+      children.set(i, newChild);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void replaceChild(INode oldChild, final INode newChild) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n            .asReference().getReferredINode());\n    oldChild \u003d children.get(i);\n    \n    if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n      // replace the referred inode, e.g., \n      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n      final INode withCount \u003d oldChild.asReference().getReferredINode();\n      withCount.asReference().setReferredINode(newChild);\n    } else {\n      if (oldChild.isReference()) {\n        // both are reference nodes, e.g., DstReference -\u003e WithName\n        final INodeReference.WithCount withCount \u003d \n            (WithCount) oldChild.asReference().getReferredINode();\n        withCount.removeReference(oldChild.asReference());\n      }\n      // do the replacement\n      children.set(i, newChild);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-4742. Fix appending to a renamed file with snapshot.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1475903 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/04/13 11:53 AM",
          "commitName": "36f43dcb4fad97f63fa53c5f7189be15c447b85b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/04/13 1:31 PM",
          "commitNameOld": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.93,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public void replaceChild(final INode oldChild, final INode newChild) {\n+  public void replaceChild(INode oldChild, final INode newChild) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n-    Preconditions.checkState(oldChild \u003d\u003d children.get(i));\n+    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n+        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n+            .asReference().getReferredINode());\n+    oldChild \u003d children.get(i);\n     \n     if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n       // replace the referred inode, e.g., \n       // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n-      // TODO: add a unit test for rename + append\n       final INode withCount \u003d oldChild.asReference().getReferredINode();\n       withCount.asReference().setReferredINode(newChild);\n     } else {\n       if (oldChild.isReference()) {\n         // both are reference nodes, e.g., DstReference -\u003e WithName\n         final INodeReference.WithCount withCount \u003d \n             (WithCount) oldChild.asReference().getReferredINode();\n         withCount.removeReference(oldChild.asReference());\n       }\n       // do the replacement\n-      final INode removed \u003d children.set(i, newChild);\n-      Preconditions.checkState(removed \u003d\u003d oldChild);\n+      children.set(i, newChild);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void replaceChild(INode oldChild, final INode newChild) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i)\n        || oldChild \u003d\u003d children.get(i).asReference().getReferredINode()\n            .asReference().getReferredINode());\n    oldChild \u003d children.get(i);\n    \n    if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n      // replace the referred inode, e.g., \n      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n      final INode withCount \u003d oldChild.asReference().getReferredINode();\n      withCount.asReference().setReferredINode(newChild);\n    } else {\n      if (oldChild.isReference()) {\n        // both are reference nodes, e.g., DstReference -\u003e WithName\n        final INodeReference.WithCount withCount \u003d \n            (WithCount) oldChild.asReference().getReferredINode();\n        withCount.removeReference(oldChild.asReference());\n      }\n      // do the replacement\n      children.set(i, newChild);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[oldChild-INode(modifiers-final), newChild-INode(modifiers-final)]",
            "newValue": "[oldChild-INode, newChild-INode(modifiers-final)]"
          }
        }
      ]
    },
    "0fa5cad0b27780c27a284c23101b1099d4886506": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/13 1:31 PM",
      "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "23/04/13 7:11 PM",
      "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,24 @@\n   public void replaceChild(final INode oldChild, final INode newChild) {\n     Preconditions.checkNotNull(children);\n     final int i \u003d searchChildren(newChild.getLocalNameBytes());\n     Preconditions.checkState(i \u003e\u003d 0);\n     Preconditions.checkState(oldChild \u003d\u003d children.get(i));\n     \n-    // TODO: the first case may never be hit\n     if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n+      // replace the referred inode, e.g., \n+      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n+      // TODO: add a unit test for rename + append\n       final INode withCount \u003d oldChild.asReference().getReferredINode();\n       withCount.asReference().setReferredINode(newChild);\n     } else {\n+      if (oldChild.isReference()) {\n+        // both are reference nodes, e.g., DstReference -\u003e WithName\n+        final INodeReference.WithCount withCount \u003d \n+            (WithCount) oldChild.asReference().getReferredINode();\n+        withCount.removeReference(oldChild.asReference());\n+      }\n+      // do the replacement\n       final INode removed \u003d children.set(i, newChild);\n       Preconditions.checkState(removed \u003d\u003d oldChild);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void replaceChild(final INode oldChild, final INode newChild) {\n    Preconditions.checkNotNull(children);\n    final int i \u003d searchChildren(newChild.getLocalNameBytes());\n    Preconditions.checkState(i \u003e\u003d 0);\n    Preconditions.checkState(oldChild \u003d\u003d children.get(i));\n    \n    if (oldChild.isReference() \u0026\u0026 !newChild.isReference()) {\n      // replace the referred inode, e.g., \n      // INodeFileWithSnapshot -\u003e INodeFileUnderConstructionWithSnapshot\n      // TODO: add a unit test for rename + append\n      final INode withCount \u003d oldChild.asReference().getReferredINode();\n      withCount.asReference().setReferredINode(newChild);\n    } else {\n      if (oldChild.isReference()) {\n        // both are reference nodes, e.g., DstReference -\u003e WithName\n        final INodeReference.WithCount withCount \u003d \n            (WithCount) oldChild.asReference().getReferredINode();\n        withCount.removeReference(oldChild.asReference());\n      }\n      // do the replacement\n      final INode removed \u003d children.set(i, newChild);\n      Preconditions.checkState(removed \u003d\u003d oldChild);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    }
  }
}