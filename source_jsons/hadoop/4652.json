{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientNamenodeProtocolServerSideTranslatorPB.java",
  "functionName": "listCacheDirectives",
  "functionId": "listCacheDirectives___controller-RpcController__request-ListCacheDirectivesRequestProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
  "functionStartLine": 1442,
  "functionEndLine": 1460,
  "numCommitsSeen": 314,
  "timeTaken": 6456,
  "changeHistory": [
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "f791e291ca39eac6aa0650319e8dd606d15d5804",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
    "f79b3e6b17450e9d34c483046b7437b09dd72016",
    "efe545b0c219eeba61ac5259aee4d518beb74316",
    "8111c3af6b06d6a814e235ad90af5860632d2c25",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be",
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
    "d56d0b46e1b82ae068083ddb99872d314684dc82",
    "920b4cc06f1bc15809902bdd1968cc434a694a08"
  ],
  "changeHistoryShort": {
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "f791e291ca39eac6aa0650319e8dd606d15d5804": "Ybodychange",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "f79b3e6b17450e9d34c483046b7437b09dd72016": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "efe545b0c219eeba61ac5259aee4d518beb74316": "Ybodychange",
    "8111c3af6b06d6a814e235ad90af5860632d2c25": "Ybodychange",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c": "Ybodychange",
    "d56d0b46e1b82ae068083ddb99872d314684dc82": "Ybodychange",
    "920b4cc06f1bc15809902bdd1968cc434a694a08": "Yintroduced"
  },
  "changeHistoryDetails": {
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:38 PM",
      "commitNameOld": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.18,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public ListCacheDirectivesResponseProto listCacheDirectives(\n       RpcController controller, ListCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n       CacheDirectiveInfo filter \u003d\n-          PBHelper.convert(request.getFilter());\n+          PBHelperClient.convert(request.getFilter());\n       BatchedEntries\u003cCacheDirectiveEntry\u003e entries \u003d\n         server.listCacheDirectives(request.getPrevId(), filter);\n       ListCacheDirectivesResponseProto.Builder builder \u003d\n           ListCacheDirectivesResponseProto.newBuilder();\n       builder.setHasMore(entries.hasMore());\n       for (int i\u003d0, n\u003dentries.size(); i\u003cn; i++) {\n-        builder.addElements(PBHelper.convert(entries.get(i)));\n+        builder.addElements(PBHelperClient.convert(entries.get(i)));\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ListCacheDirectivesResponseProto listCacheDirectives(\n      RpcController controller, ListCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      CacheDirectiveInfo filter \u003d\n          PBHelperClient.convert(request.getFilter());\n      BatchedEntries\u003cCacheDirectiveEntry\u003e entries \u003d\n        server.listCacheDirectives(request.getPrevId(), filter);\n      ListCacheDirectivesResponseProto.Builder builder \u003d\n          ListCacheDirectivesResponseProto.newBuilder();\n      builder.setHasMore(entries.hasMore());\n      for (int i\u003d0, n\u003dentries.size(); i\u003cn; i++) {\n        builder.addElements(PBHelperClient.convert(entries.get(i)));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "f791e291ca39eac6aa0650319e8dd606d15d5804": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5555. CacheAdmin commands fail when first listed NameNode is in Standby (jxiang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547895 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 12:06 PM",
      "commitName": "f791e291ca39eac6aa0650319e8dd606d15d5804",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "27/11/13 9:55 AM",
      "commitNameOld": "13edb391d06c479720202eb5ac81f1c71fe64748",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 7.09,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,19 @@\n   public ListCacheDirectivesResponseProto listCacheDirectives(\n       RpcController controller, ListCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n       CacheDirectiveInfo filter \u003d\n           PBHelper.convert(request.getFilter());\n-      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n-         server.listCacheDirectives(request.getPrevId(), filter);\n+      BatchedEntries\u003cCacheDirectiveEntry\u003e entries \u003d\n+        server.listCacheDirectives(request.getPrevId(), filter);\n       ListCacheDirectivesResponseProto.Builder builder \u003d\n           ListCacheDirectivesResponseProto.newBuilder();\n-      long prevId \u003d 0;\n-      while (iter.hasNext()) {\n-        CacheDirectiveEntry entry \u003d iter.next();\n-        builder.addElements(PBHelper.convert(entry));\n-        prevId \u003d entry.getInfo().getId();\n-      }\n-      if (prevId \u003d\u003d 0) {\n-        builder.setHasMore(false);\n-      } else {\n-        iter \u003d server.listCacheDirectives(prevId, filter);\n-        builder.setHasMore(iter.hasNext());\n+      builder.setHasMore(entries.hasMore());\n+      for (int i\u003d0, n\u003dentries.size(); i\u003cn; i++) {\n+        builder.addElements(PBHelper.convert(entries.get(i)));\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ListCacheDirectivesResponseProto listCacheDirectives(\n      RpcController controller, ListCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      CacheDirectiveInfo filter \u003d\n          PBHelper.convert(request.getFilter());\n      BatchedEntries\u003cCacheDirectiveEntry\u003e entries \u003d\n        server.listCacheDirectives(request.getPrevId(), filter);\n      ListCacheDirectivesResponseProto.Builder builder \u003d\n          ListCacheDirectivesResponseProto.newBuilder();\n      builder.setHasMore(entries.hasMore());\n      for (int i\u003d0, n\u003dentries.size(); i\u003cn; i++) {\n        builder.addElements(PBHelper.convert(entries.get(i)));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 9:12 AM",
      "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n-      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n+  public ListCacheDirectivesResponseProto listCacheDirectives(\n+      RpcController controller, ListCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      PathBasedCacheDirective filter \u003d\n+      CacheDirectiveInfo filter \u003d\n           PBHelper.convert(request.getFilter());\n-      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n-      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n+      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+         server.listCacheDirectives(request.getPrevId(), filter);\n+      ListCacheDirectivesResponseProto.Builder builder \u003d\n+          ListCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDirective directive \u003d iter.next();\n-        builder.addElements(\n-            ListPathBasedCacheDirectivesElementProto.newBuilder().\n-                setInfo(PBHelper.convert(directive)));\n-        prevId \u003d directive.getId();\n+        CacheDirectiveEntry entry \u003d iter.next();\n+        builder.addElements(PBHelper.convert(entry));\n+        prevId \u003d entry.getInfo().getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n+        iter \u003d server.listCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListCacheDirectivesResponseProto listCacheDirectives(\n      RpcController controller, ListCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      CacheDirectiveInfo filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n         server.listCacheDirectives(request.getPrevId(), filter);\n      ListCacheDirectivesResponseProto.Builder builder \u003d\n          ListCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        CacheDirectiveEntry entry \u003d iter.next();\n        builder.addElements(PBHelper.convert(entry));\n        prevId \u003d entry.getInfo().getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheDirectives",
            "newValue": "listCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n-      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n+  public ListCacheDirectivesResponseProto listCacheDirectives(\n+      RpcController controller, ListCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      PathBasedCacheDirective filter \u003d\n+      CacheDirectiveInfo filter \u003d\n           PBHelper.convert(request.getFilter());\n-      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n-      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n+      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+         server.listCacheDirectives(request.getPrevId(), filter);\n+      ListCacheDirectivesResponseProto.Builder builder \u003d\n+          ListCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDirective directive \u003d iter.next();\n-        builder.addElements(\n-            ListPathBasedCacheDirectivesElementProto.newBuilder().\n-                setInfo(PBHelper.convert(directive)));\n-        prevId \u003d directive.getId();\n+        CacheDirectiveEntry entry \u003d iter.next();\n+        builder.addElements(PBHelper.convert(entry));\n+        prevId \u003d entry.getInfo().getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n+        iter \u003d server.listCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListCacheDirectivesResponseProto listCacheDirectives(\n      RpcController controller, ListCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      CacheDirectiveInfo filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n         server.listCacheDirectives(request.getPrevId(), filter);\n      ListCacheDirectivesResponseProto.Builder builder \u003d\n          ListCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        CacheDirectiveEntry entry \u003d iter.next();\n        builder.addElements(PBHelper.convert(entry));\n        prevId \u003d entry.getInfo().getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-ListPathBasedCacheDirectivesRequestProto]",
            "newValue": "[controller-RpcController, request-ListCacheDirectivesRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n-      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n+  public ListCacheDirectivesResponseProto listCacheDirectives(\n+      RpcController controller, ListCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      PathBasedCacheDirective filter \u003d\n+      CacheDirectiveInfo filter \u003d\n           PBHelper.convert(request.getFilter());\n-      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n-      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n+      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+         server.listCacheDirectives(request.getPrevId(), filter);\n+      ListCacheDirectivesResponseProto.Builder builder \u003d\n+          ListCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDirective directive \u003d iter.next();\n-        builder.addElements(\n-            ListPathBasedCacheDirectivesElementProto.newBuilder().\n-                setInfo(PBHelper.convert(directive)));\n-        prevId \u003d directive.getId();\n+        CacheDirectiveEntry entry \u003d iter.next();\n+        builder.addElements(PBHelper.convert(entry));\n+        prevId \u003d entry.getInfo().getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n+        iter \u003d server.listCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListCacheDirectivesResponseProto listCacheDirectives(\n      RpcController controller, ListCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      CacheDirectiveInfo filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n         server.listCacheDirectives(request.getPrevId(), filter);\n      ListCacheDirectivesResponseProto.Builder builder \u003d\n          ListCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        CacheDirectiveEntry entry \u003d iter.next();\n        builder.addElements(PBHelper.convert(entry));\n        prevId \u003d entry.getInfo().getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "ListPathBasedCacheDirectivesResponseProto",
            "newValue": "ListCacheDirectivesResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/11/13 3:52 PM",
          "commitNameOld": "ce35e0950cef9250ce2ceffb3b8bfcff533c6b92",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 8.72,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n-      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n+  public ListCacheDirectivesResponseProto listCacheDirectives(\n+      RpcController controller, ListCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      PathBasedCacheDirective filter \u003d\n+      CacheDirectiveInfo filter \u003d\n           PBHelper.convert(request.getFilter());\n-      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n-      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n+      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+         server.listCacheDirectives(request.getPrevId(), filter);\n+      ListCacheDirectivesResponseProto.Builder builder \u003d\n+          ListCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDirective directive \u003d iter.next();\n-        builder.addElements(\n-            ListPathBasedCacheDirectivesElementProto.newBuilder().\n-                setInfo(PBHelper.convert(directive)));\n-        prevId \u003d directive.getId();\n+        CacheDirectiveEntry entry \u003d iter.next();\n+        builder.addElements(PBHelper.convert(entry));\n+        prevId \u003d entry.getInfo().getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n+        iter \u003d server.listCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListCacheDirectivesResponseProto listCacheDirectives(\n      RpcController controller, ListCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      CacheDirectiveInfo filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n         server.listCacheDirectives(request.getPrevId(), filter);\n      ListCacheDirectivesResponseProto.Builder builder \u003d\n          ListCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        CacheDirectiveEntry entry \u003d iter.next();\n        builder.addElements(PBHelper.convert(entry));\n        prevId \u003d entry.getInfo().getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "f79b3e6b17450e9d34c483046b7437b09dd72016": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 2:07 PM",
      "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "14/10/13 3:56 PM",
          "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 23.97,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n-      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n+  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n+      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-         server.listPathBasedCacheDescriptors(request.getPrevId(),\n-             request.hasPool() ? request.getPool() : null,\n-             request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n+      PathBasedCacheDirective filter \u003d\n+          PBHelper.convert(request.getFilter());\n+      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n+      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDescriptor directive \u003d iter.next();\n+        PathBasedCacheDirective directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n-              setId(directive.getEntryId()).\n-              setPath(directive.getPath().toUri().getPath()).\n-              setReplication(directive.getReplication()).\n-              setPool(directive.getPool()));\n-        prevId \u003d directive.getEntryId();\n+            ListPathBasedCacheDirectivesElementProto.newBuilder().\n+                setInfo(PBHelper.convert(directive)));\n+        prevId \u003d directive.getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n-            request.hasPool() ? request.getPool() : null,\n-            request.hasPath() ? request.getPath() : null);\n+        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      PathBasedCacheDirective filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDirective directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDirectivesElementProto.newBuilder().\n                setInfo(PBHelper.convert(directive)));\n        prevId \u003d directive.getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheDescriptors",
            "newValue": "listPathBasedCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "14/10/13 3:56 PM",
          "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 23.97,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n-      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n+  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n+      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-         server.listPathBasedCacheDescriptors(request.getPrevId(),\n-             request.hasPool() ? request.getPool() : null,\n-             request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n+      PathBasedCacheDirective filter \u003d\n+          PBHelper.convert(request.getFilter());\n+      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n+      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDescriptor directive \u003d iter.next();\n+        PathBasedCacheDirective directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n-              setId(directive.getEntryId()).\n-              setPath(directive.getPath().toUri().getPath()).\n-              setReplication(directive.getReplication()).\n-              setPool(directive.getPool()));\n-        prevId \u003d directive.getEntryId();\n+            ListPathBasedCacheDirectivesElementProto.newBuilder().\n+                setInfo(PBHelper.convert(directive)));\n+        prevId \u003d directive.getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n-            request.hasPool() ? request.getPool() : null,\n-            request.hasPath() ? request.getPath() : null);\n+        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      PathBasedCacheDirective filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDirective directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDirectivesElementProto.newBuilder().\n                setInfo(PBHelper.convert(directive)));\n        prevId \u003d directive.getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-ListPathBasedCacheDescriptorsRequestProto]",
            "newValue": "[controller-RpcController, request-ListPathBasedCacheDirectivesRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "14/10/13 3:56 PM",
          "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 23.97,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n-      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n+  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n+      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-         server.listPathBasedCacheDescriptors(request.getPrevId(),\n-             request.hasPool() ? request.getPool() : null,\n-             request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n+      PathBasedCacheDirective filter \u003d\n+          PBHelper.convert(request.getFilter());\n+      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n+      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDescriptor directive \u003d iter.next();\n+        PathBasedCacheDirective directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n-              setId(directive.getEntryId()).\n-              setPath(directive.getPath().toUri().getPath()).\n-              setReplication(directive.getReplication()).\n-              setPool(directive.getPool()));\n-        prevId \u003d directive.getEntryId();\n+            ListPathBasedCacheDirectivesElementProto.newBuilder().\n+                setInfo(PBHelper.convert(directive)));\n+        prevId \u003d directive.getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n-            request.hasPool() ? request.getPool() : null,\n-            request.hasPath() ? request.getPath() : null);\n+        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      PathBasedCacheDirective filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDirective directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDirectivesElementProto.newBuilder().\n                setInfo(PBHelper.convert(directive)));\n        prevId \u003d directive.getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "ListPathBasedCacheDescriptorsResponseProto",
            "newValue": "ListPathBasedCacheDirectivesResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "14/10/13 3:56 PM",
          "commitNameOld": "efe545b0c219eeba61ac5259aee4d518beb74316",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 23.97,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n-      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n+  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n+      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-         server.listPathBasedCacheDescriptors(request.getPrevId(),\n-             request.hasPool() ? request.getPool() : null,\n-             request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n-          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n+      PathBasedCacheDirective filter \u003d\n+          PBHelper.convert(request.getFilter());\n+      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n+      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheDescriptor directive \u003d iter.next();\n+        PathBasedCacheDirective directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n-              setId(directive.getEntryId()).\n-              setPath(directive.getPath().toUri().getPath()).\n-              setReplication(directive.getReplication()).\n-              setPool(directive.getPool()));\n-        prevId \u003d directive.getEntryId();\n+            ListPathBasedCacheDirectivesElementProto.newBuilder().\n+                setInfo(PBHelper.convert(directive)));\n+        prevId \u003d directive.getId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n-            request.hasPool() ? request.getPool() : null,\n-            request.hasPath() ? request.getPath() : null);\n+        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDirectivesResponseProto listPathBasedCacheDirectives(\n      RpcController controller, ListPathBasedCacheDirectivesRequestProto request)\n          throws ServiceException {\n    try {\n      PathBasedCacheDirective filter \u003d\n          PBHelper.convert(request.getFilter());\n      RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n         server.listPathBasedCacheDirectives(request.getPrevId(), filter);\n      ListPathBasedCacheDirectivesResponseProto.Builder builder \u003d\n          ListPathBasedCacheDirectivesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDirective directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDirectivesElementProto.newBuilder().\n                setInfo(PBHelper.convert(directive)));\n        prevId \u003d directive.getId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDirectives(prevId, filter);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "efe545b0c219eeba61ac5259aee4d518beb74316": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5358. Add replication field to PathBasedCacheDirective. (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 3:56 PM",
      "commitName": "efe545b0c219eeba61ac5259aee4d518beb74316",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/10/13 12:44 PM",
      "commitNameOld": "8111c3af6b06d6a814e235ad90af5860632d2c25",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n       RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n           throws ServiceException {\n     try {\n       RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n          server.listPathBasedCacheDescriptors(request.getPrevId(),\n              request.hasPool() ? request.getPool() : null,\n              request.hasPath() ? request.getPath() : null);\n       ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n           ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n         PathBasedCacheDescriptor directive \u003d iter.next();\n         builder.addElements(\n             ListPathBasedCacheDescriptorsElementProto.newBuilder().\n               setId(directive.getEntryId()).\n               setPath(directive.getPath().toUri().getPath()).\n+              setReplication(directive.getReplication()).\n               setPool(directive.getPool()));\n         prevId \u003d directive.getEntryId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n         iter \u003d server.listPathBasedCacheDescriptors(prevId, \n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         server.listPathBasedCacheDescriptors(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDescriptor directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n              setId(directive.getEntryId()).\n              setPath(directive.getPath().toUri().getPath()).\n              setReplication(directive.getReplication()).\n              setPool(directive.getPool()));\n        prevId \u003d directive.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n            request.hasPool() ? request.getPool() : null,\n            request.hasPath() ? request.getPath() : null);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "8111c3af6b06d6a814e235ad90af5860632d2c25": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5224. Refactor PathBasedCache* methods to use a Path rather than a String. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1531406 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/13 12:44 PM",
      "commitName": "8111c3af6b06d6a814e235ad90af5860632d2c25",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/09/13 5:20 PM",
      "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 20.81,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n       RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n           throws ServiceException {\n     try {\n       RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n          server.listPathBasedCacheDescriptors(request.getPrevId(),\n              request.hasPool() ? request.getPool() : null,\n              request.hasPath() ? request.getPath() : null);\n       ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n           ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n         PathBasedCacheDescriptor directive \u003d iter.next();\n         builder.addElements(\n             ListPathBasedCacheDescriptorsElementProto.newBuilder().\n               setId(directive.getEntryId()).\n-              setPath(directive.getPath()).\n+              setPath(directive.getPath().toUri().getPath()).\n               setPool(directive.getPool()));\n         prevId \u003d directive.getEntryId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n         iter \u003d server.listPathBasedCacheDescriptors(prevId, \n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         server.listPathBasedCacheDescriptors(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDescriptor directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n              setId(directive.getEntryId()).\n              setPath(directive.getPath().toUri().getPath()).\n              setPool(directive.getPool()));\n        prevId \u003d directive.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n            request.hasPool() ? request.getPool() : null,\n            request.hasPath() ? request.getPath() : null);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 1:43 PM",
      "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n-      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n+      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n-         server.listPathBasedCacheEntries(request.getPrevId(),\n+      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n+         server.listPathBasedCacheDescriptors(request.getPrevId(),\n              request.hasPool() ? request.getPool() : null,\n              request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheEntry entry \u003d iter.next();\n+        PathBasedCacheDescriptor directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheEntriesElementProto.newBuilder().\n-              setId(entry.getEntryId()).\n-              setPath(entry.getDirective().getPath()).\n-              setPool(entry.getDirective().getPool()));\n-        prevId \u003d entry.getEntryId();\n+            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n+              setId(directive.getEntryId()).\n+              setPath(directive.getPath()).\n+              setPool(directive.getPool()));\n+        prevId \u003d directive.getEntryId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n-            request.getPath());\n+        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n+            request.hasPool() ? request.getPool() : null,\n+            request.hasPath() ? request.getPath() : null);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         server.listPathBasedCacheDescriptors(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDescriptor directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n              setId(directive.getEntryId()).\n              setPath(directive.getPath()).\n              setPool(directive.getPool()));\n        prevId \u003d directive.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n            request.hasPool() ? request.getPool() : null,\n            request.hasPath() ? request.getPath() : null);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheEntries",
            "newValue": "listPathBasedCacheDescriptors"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n-      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n+      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n-         server.listPathBasedCacheEntries(request.getPrevId(),\n+      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n+         server.listPathBasedCacheDescriptors(request.getPrevId(),\n              request.hasPool() ? request.getPool() : null,\n              request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheEntry entry \u003d iter.next();\n+        PathBasedCacheDescriptor directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheEntriesElementProto.newBuilder().\n-              setId(entry.getEntryId()).\n-              setPath(entry.getDirective().getPath()).\n-              setPool(entry.getDirective().getPool()));\n-        prevId \u003d entry.getEntryId();\n+            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n+              setId(directive.getEntryId()).\n+              setPath(directive.getPath()).\n+              setPool(directive.getPool()));\n+        prevId \u003d directive.getEntryId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n-            request.getPath());\n+        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n+            request.hasPool() ? request.getPool() : null,\n+            request.hasPath() ? request.getPath() : null);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         server.listPathBasedCacheDescriptors(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDescriptor directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n              setId(directive.getEntryId()).\n              setPath(directive.getPath()).\n              setPool(directive.getPool()));\n        prevId \u003d directive.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n            request.hasPool() ? request.getPool() : null,\n            request.hasPath() ? request.getPath() : null);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-ListPathBasedCacheEntriesRequestProto]",
            "newValue": "[controller-RpcController, request-ListPathBasedCacheDescriptorsRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n-      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n+      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n-         server.listPathBasedCacheEntries(request.getPrevId(),\n+      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n+         server.listPathBasedCacheDescriptors(request.getPrevId(),\n              request.hasPool() ? request.getPool() : null,\n              request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheEntry entry \u003d iter.next();\n+        PathBasedCacheDescriptor directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheEntriesElementProto.newBuilder().\n-              setId(entry.getEntryId()).\n-              setPath(entry.getDirective().getPath()).\n-              setPool(entry.getDirective().getPool()));\n-        prevId \u003d entry.getEntryId();\n+            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n+              setId(directive.getEntryId()).\n+              setPath(directive.getPath()).\n+              setPool(directive.getPool()));\n+        prevId \u003d directive.getEntryId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n-            request.getPath());\n+        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n+            request.hasPool() ? request.getPool() : null,\n+            request.hasPath() ? request.getPath() : null);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         server.listPathBasedCacheDescriptors(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDescriptor directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n              setId(directive.getEntryId()).\n              setPath(directive.getPath()).\n              setPool(directive.getPool()));\n        prevId \u003d directive.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n            request.hasPool() ? request.getPool() : null,\n            request.hasPath() ? request.getPath() : null);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "ListPathBasedCacheEntriesResponseProto",
            "newValue": "ListPathBasedCacheDescriptorsResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n-      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n+      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n           throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n-         server.listPathBasedCacheEntries(request.getPrevId(),\n+      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n+         server.listPathBasedCacheDescriptors(request.getPrevId(),\n              request.hasPool() ? request.getPool() : null,\n              request.hasPath() ? request.getPath() : null);\n-      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n+          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n       long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathBasedCacheEntry entry \u003d iter.next();\n+        PathBasedCacheDescriptor directive \u003d iter.next();\n         builder.addElements(\n-            ListPathBasedCacheEntriesElementProto.newBuilder().\n-              setId(entry.getEntryId()).\n-              setPath(entry.getDirective().getPath()).\n-              setPool(entry.getDirective().getPool()));\n-        prevId \u003d entry.getEntryId();\n+            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n+              setId(directive.getEntryId()).\n+              setPath(directive.getPath()).\n+              setPool(directive.getPool()));\n+        prevId \u003d directive.getEntryId();\n       }\n       if (prevId \u003d\u003d 0) {\n         builder.setHasMore(false);\n       } else {\n-        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n-            request.getPath());\n+        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n+            request.hasPool() ? request.getPool() : null,\n+            request.hasPath() ? request.getPath() : null);\n         builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheDescriptorsResponseProto listPathBasedCacheDescriptors(\n      RpcController controller, ListPathBasedCacheDescriptorsRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         server.listPathBasedCacheDescriptors(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheDescriptorsResponseProto.Builder builder \u003d\n          ListPathBasedCacheDescriptorsResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheDescriptor directive \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheDescriptorsElementProto.newBuilder().\n              setId(directive.getEntryId()).\n              setPath(directive.getPath()).\n              setPool(directive.getPool()));\n        prevId \u003d directive.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheDescriptors(prevId, \n            request.hasPool() ? request.getPool() : null,\n            request.hasPath() ? request.getPath() : null);\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 8:55 PM",
      "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,32 @@\n-  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n-      ListPathCacheEntriesRequestProto request) throws ServiceException {\n+  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n+      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+          throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n-         server.listPathCacheEntries(request.getPrevId(), request.getPool());\n-      ListPathCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathCacheEntriesResponseProto.newBuilder();\n+      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n+         server.listPathBasedCacheEntries(request.getPrevId(),\n+             request.hasPool() ? request.getPool() : null,\n+             request.hasPath() ? request.getPath() : null);\n+      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathCacheEntry entry \u003d iter.next();\n+        PathBasedCacheEntry entry \u003d iter.next();\n         builder.addElements(\n-            ListPathCacheEntriesElementProto.newBuilder().\n+            ListPathBasedCacheEntriesElementProto.newBuilder().\n               setId(entry.getEntryId()).\n               setPath(entry.getDirective().getPath()).\n               setPool(entry.getDirective().getPool()));\n+        prevId \u003d entry.getEntryId();\n+      }\n+      if (prevId \u003d\u003d 0) {\n+        builder.setHasMore(false);\n+      } else {\n+        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n+            request.getPath());\n+        builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n         server.listPathBasedCacheEntries(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n          ListPathBasedCacheEntriesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheEntry entry \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheEntriesElementProto.newBuilder().\n              setId(entry.getEntryId()).\n              setPath(entry.getDirective().getPath()).\n              setPool(entry.getDirective().getPool()));\n        prevId \u003d entry.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n            request.getPath());\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "listPathCacheEntries",
            "newValue": "listPathBasedCacheEntries"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,32 @@\n-  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n-      ListPathCacheEntriesRequestProto request) throws ServiceException {\n+  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n+      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+          throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n-         server.listPathCacheEntries(request.getPrevId(), request.getPool());\n-      ListPathCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathCacheEntriesResponseProto.newBuilder();\n+      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n+         server.listPathBasedCacheEntries(request.getPrevId(),\n+             request.hasPool() ? request.getPool() : null,\n+             request.hasPath() ? request.getPath() : null);\n+      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathCacheEntry entry \u003d iter.next();\n+        PathBasedCacheEntry entry \u003d iter.next();\n         builder.addElements(\n-            ListPathCacheEntriesElementProto.newBuilder().\n+            ListPathBasedCacheEntriesElementProto.newBuilder().\n               setId(entry.getEntryId()).\n               setPath(entry.getDirective().getPath()).\n               setPool(entry.getDirective().getPool()));\n+        prevId \u003d entry.getEntryId();\n+      }\n+      if (prevId \u003d\u003d 0) {\n+        builder.setHasMore(false);\n+      } else {\n+        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n+            request.getPath());\n+        builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n         server.listPathBasedCacheEntries(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n          ListPathBasedCacheEntriesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheEntry entry \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheEntriesElementProto.newBuilder().\n              setId(entry.getEntryId()).\n              setPath(entry.getDirective().getPath()).\n              setPool(entry.getDirective().getPool()));\n        prevId \u003d entry.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n            request.getPath());\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[controller-RpcController, request-ListPathCacheEntriesRequestProto]",
            "newValue": "[controller-RpcController, request-ListPathBasedCacheEntriesRequestProto]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,32 @@\n-  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n-      ListPathCacheEntriesRequestProto request) throws ServiceException {\n+  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n+      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+          throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n-         server.listPathCacheEntries(request.getPrevId(), request.getPool());\n-      ListPathCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathCacheEntriesResponseProto.newBuilder();\n+      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n+         server.listPathBasedCacheEntries(request.getPrevId(),\n+             request.hasPool() ? request.getPool() : null,\n+             request.hasPath() ? request.getPath() : null);\n+      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathCacheEntry entry \u003d iter.next();\n+        PathBasedCacheEntry entry \u003d iter.next();\n         builder.addElements(\n-            ListPathCacheEntriesElementProto.newBuilder().\n+            ListPathBasedCacheEntriesElementProto.newBuilder().\n               setId(entry.getEntryId()).\n               setPath(entry.getDirective().getPath()).\n               setPool(entry.getDirective().getPool()));\n+        prevId \u003d entry.getEntryId();\n+      }\n+      if (prevId \u003d\u003d 0) {\n+        builder.setHasMore(false);\n+      } else {\n+        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n+            request.getPath());\n+        builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n         server.listPathBasedCacheEntries(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n          ListPathBasedCacheEntriesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheEntry entry \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheEntriesElementProto.newBuilder().\n              setId(entry.getEntryId()).\n              setPath(entry.getDirective().getPath()).\n              setPool(entry.getDirective().getPool()));\n        prevId \u003d entry.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n            request.getPath());\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "ListPathCacheEntriesResponseProto",
            "newValue": "ListPathBasedCacheEntriesResponseProto"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/13 8:55 PM",
          "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/09/13 11:52 AM",
          "commitNameOld": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.38,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,32 @@\n-  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n-      ListPathCacheEntriesRequestProto request) throws ServiceException {\n+  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n+      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n+          throws ServiceException {\n     try {\n-      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n-         server.listPathCacheEntries(request.getPrevId(), request.getPool());\n-      ListPathCacheEntriesResponseProto.Builder builder \u003d\n-          ListPathCacheEntriesResponseProto.newBuilder();\n+      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n+         server.listPathBasedCacheEntries(request.getPrevId(),\n+             request.hasPool() ? request.getPool() : null,\n+             request.hasPath() ? request.getPath() : null);\n+      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n+          ListPathBasedCacheEntriesResponseProto.newBuilder();\n+      long prevId \u003d 0;\n       while (iter.hasNext()) {\n-        PathCacheEntry entry \u003d iter.next();\n+        PathBasedCacheEntry entry \u003d iter.next();\n         builder.addElements(\n-            ListPathCacheEntriesElementProto.newBuilder().\n+            ListPathBasedCacheEntriesElementProto.newBuilder().\n               setId(entry.getEntryId()).\n               setPath(entry.getDirective().getPath()).\n               setPool(entry.getDirective().getPool()));\n+        prevId \u003d entry.getEntryId();\n+      }\n+      if (prevId \u003d\u003d 0) {\n+        builder.setHasMore(false);\n+      } else {\n+        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n+            request.getPath());\n+        builder.setHasMore(iter.hasNext());\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ListPathBasedCacheEntriesResponseProto listPathBasedCacheEntries(\n      RpcController controller, ListPathBasedCacheEntriesRequestProto request)\n          throws ServiceException {\n    try {\n      RemoteIterator\u003cPathBasedCacheEntry\u003e iter \u003d\n         server.listPathBasedCacheEntries(request.getPrevId(),\n             request.hasPool() ? request.getPool() : null,\n             request.hasPath() ? request.getPath() : null);\n      ListPathBasedCacheEntriesResponseProto.Builder builder \u003d\n          ListPathBasedCacheEntriesResponseProto.newBuilder();\n      long prevId \u003d 0;\n      while (iter.hasNext()) {\n        PathBasedCacheEntry entry \u003d iter.next();\n        builder.addElements(\n            ListPathBasedCacheEntriesElementProto.newBuilder().\n              setId(entry.getEntryId()).\n              setPath(entry.getDirective().getPath()).\n              setPool(entry.getDirective().getPool()));\n        prevId \u003d entry.getEntryId();\n      }\n      if (prevId \u003d\u003d 0) {\n        builder.setHasMore(false);\n      } else {\n        iter \u003d server.listPathBasedCacheEntries(prevId, request.getPool(),\n            request.getPath());\n        builder.setHasMore(iter.hasNext());\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "f41f8b8842c3f26d19f7fa928070c7c07f760e4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5163. Miscellaneous cache pool RPC fixes (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520665 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 11:52 AM",
      "commitName": "f41f8b8842c3f26d19f7fa928070c7c07f760e4c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "04/09/13 11:23 AM",
      "commitNameOld": "d56d0b46e1b82ae068083ddb99872d314684dc82",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n-  public ListPathCacheEntriesResponseProto listPathCacheEntries(\n-      RpcController controller, ListPathCacheEntriesRequestProto request)\n-      throws ServiceException {\n+  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n+      ListPathCacheEntriesRequestProto request) throws ServiceException {\n     try {\n-      CachePool pool \u003d PBHelper.convert(request.getPool());\n       RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n-         server.listPathCacheEntries(\n-             PBHelper.convert(request.getPrevEntry()).getEntryId(),\n-             pool.getId(),\n-             request.getMaxReplies());\n+         server.listPathCacheEntries(request.getPrevId(), request.getPool());\n       ListPathCacheEntriesResponseProto.Builder builder \u003d\n           ListPathCacheEntriesResponseProto.newBuilder();\n       while (iter.hasNext()) {\n         PathCacheEntry entry \u003d iter.next();\n-        builder.addEntries(PBHelper.convert(entry));\n+        builder.addElements(\n+            ListPathCacheEntriesElementProto.newBuilder().\n+              setId(entry.getEntryId()).\n+              setPath(entry.getDirective().getPath()).\n+              setPool(entry.getDirective().getPool()));\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n      ListPathCacheEntriesRequestProto request) throws ServiceException {\n    try {\n      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n         server.listPathCacheEntries(request.getPrevId(), request.getPool());\n      ListPathCacheEntriesResponseProto.Builder builder \u003d\n          ListPathCacheEntriesResponseProto.newBuilder();\n      while (iter.hasNext()) {\n        PathCacheEntry entry \u003d iter.next();\n        builder.addElements(\n            ListPathCacheEntriesElementProto.newBuilder().\n              setId(entry.getEntryId()).\n              setPath(entry.getDirective().getPath()).\n              setPool(entry.getDirective().getPool()));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "d56d0b46e1b82ae068083ddb99872d314684dc82": {
      "type": "Ybodychange",
      "commitMessage": "commit correct version of HDFS-5121\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1520090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/13 11:23 AM",
      "commitName": "d56d0b46e1b82ae068083ddb99872d314684dc82",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/09/13 1:38 PM",
      "commitNameOld": "97b7267977ef42201e5844df49bc37ec3d10ce16",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n-  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n-      ListPathCacheEntriesRequestProto request) throws ServiceException {\n+  public ListPathCacheEntriesResponseProto listPathCacheEntries(\n+      RpcController controller, ListPathCacheEntriesRequestProto request)\n+      throws ServiceException {\n     try {\n+      CachePool pool \u003d PBHelper.convert(request.getPool());\n       RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n-         server.listPathCacheEntries(request.getPrevId(),\n-             request.getPool(),\n+         server.listPathCacheEntries(\n+             PBHelper.convert(request.getPrevEntry()).getEntryId(),\n+             pool.getId(),\n              request.getMaxReplies());\n       ListPathCacheEntriesResponseProto.Builder builder \u003d\n           ListPathCacheEntriesResponseProto.newBuilder();\n       while (iter.hasNext()) {\n         PathCacheEntry entry \u003d iter.next();\n-        builder.addElements(\n-            ListPathCacheEntriesElementProto.newBuilder().\n-              setId(entry.getEntryId()).\n-              setPath(entry.getDirective().getPath()).\n-              setPool(entry.getDirective().getPool()));\n+        builder.addEntries(PBHelper.convert(entry));\n       }\n       return builder.build();\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ListPathCacheEntriesResponseProto listPathCacheEntries(\n      RpcController controller, ListPathCacheEntriesRequestProto request)\n      throws ServiceException {\n    try {\n      CachePool pool \u003d PBHelper.convert(request.getPool());\n      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n         server.listPathCacheEntries(\n             PBHelper.convert(request.getPrevEntry()).getEntryId(),\n             pool.getId(),\n             request.getMaxReplies());\n      ListPathCacheEntriesResponseProto.Builder builder \u003d\n          ListPathCacheEntriesResponseProto.newBuilder();\n      while (iter.hasNext()) {\n        PathCacheEntry entry \u003d iter.next();\n        builder.addEntries(PBHelper.convert(entry));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "920b4cc06f1bc15809902bdd1968cc434a694a08": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5052. Add cacheRequest/uncacheRequest support to NameNode.  (Contributed by Colin Patrick McCabe.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1516669 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/13 4:37 PM",
      "commitName": "920b4cc06f1bc15809902bdd1968cc434a694a08",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,22 @@\n+  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n+      ListPathCacheEntriesRequestProto request) throws ServiceException {\n+    try {\n+      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n+         server.listPathCacheEntries(request.getPrevId(),\n+             request.getPool(),\n+             request.getMaxReplies());\n+      ListPathCacheEntriesResponseProto.Builder builder \u003d\n+          ListPathCacheEntriesResponseProto.newBuilder();\n+      while (iter.hasNext()) {\n+        PathCacheEntry entry \u003d iter.next();\n+        builder.addElements(\n+            ListPathCacheEntriesElementProto.newBuilder().\n+              setId(entry.getEntryId()).\n+              setPath(entry.getDirective().getPath()).\n+              setPool(entry.getDirective().getPool()));\n+      }\n+      return builder.build();\n+    } catch (IOException e) {\n+      throw new ServiceException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ListPathCacheEntriesResponseProto listPathCacheEntries(RpcController controller,\n      ListPathCacheEntriesRequestProto request) throws ServiceException {\n    try {\n      RemoteIterator\u003cPathCacheEntry\u003e iter \u003d\n         server.listPathCacheEntries(request.getPrevId(),\n             request.getPool(),\n             request.getMaxReplies());\n      ListPathCacheEntriesResponseProto.Builder builder \u003d\n          ListPathCacheEntriesResponseProto.newBuilder();\n      while (iter.hasNext()) {\n        PathCacheEntry entry \u003d iter.next();\n        builder.addElements(\n            ListPathCacheEntriesElementProto.newBuilder().\n              setId(entry.getEntryId()).\n              setPath(entry.getDirective().getPath()).\n              setPool(entry.getDirective().getPool()));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java"
    }
  }
}