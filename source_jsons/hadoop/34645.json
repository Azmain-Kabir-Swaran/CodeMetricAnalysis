{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "recoverApplication",
  "functionId": "recoverApplication___p-ContainerManagerApplicationProto",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 403,
  "functionEndLine": 446,
  "numCommitsSeen": 139,
  "timeTaken": 5842,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "9b08f365d749185d7ed8e34dc379b2e415a29e99",
    "47474fffac085e0e5ea46336bf80ccd0677017a3",
    "6d943038f61211594d017f631710e6710ec71372",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
    "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "9b08f365d749185d7ed8e34dc379b2e415a29e99": "Ybodychange",
    "47474fffac085e0e5ea46336bf80ccd0677017a3": "Ybodychange",
    "6d943038f61211594d017f631710e6710ec71372": "Ybodychange",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": "Ybodychange",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": "Ybodychange",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": "Ybodychange",
    "e07519b8dbb96d73c48e910a4de12563c5c2f8aa": "Ybodychange",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": "Ybodychange",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/02/19 7:31 AM",
      "commitNameOld": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 21.33,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,44 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     FlowContext fc \u003d null;\n     if (p.getFlowContext() !\u003d null) {\n       FlowContextProto fcp \u003d p.getFlowContext();\n       fc \u003d new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(),\n           fcp.getFlowRunId());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"Recovering Flow context: \" + fc + \" for an application \" + appId);\n-      }\n+      LOG.debug(\n+          \"Recovering Flow context: {} for an application {}\", fc, appId);\n     } else {\n       // in upgrade situations, where there is no prior existing flow context,\n       // default would be used.\n       fc \u003d new FlowContext(TimelineUtils.generateDefaultFlowName(null, appId),\n           YarnConfiguration.DEFAULT_FLOW_VERSION, appId.getClusterTimestamp());\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"No prior existing flow context found. Using default Flow context: \"\n-                + fc + \" for an application \" + appId);\n-      }\n+      LOG.debug(\n+          \"No prior existing flow context found. Using default Flow context: \"\n+          + \"{} for an application {}\", fc, appId);\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n     ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), fc,\n         appId, creds, context, p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    FlowContext fc \u003d null;\n    if (p.getFlowContext() !\u003d null) {\n      FlowContextProto fcp \u003d p.getFlowContext();\n      fc \u003d new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(),\n          fcp.getFlowRunId());\n      LOG.debug(\n          \"Recovering Flow context: {} for an application {}\", fc, appId);\n    } else {\n      // in upgrade situations, where there is no prior existing flow context,\n      // default would be used.\n      fc \u003d new FlowContext(TimelineUtils.generateDefaultFlowName(null, appId),\n          YarnConfiguration.DEFAULT_FLOW_VERSION, appId.getClusterTimestamp());\n      LOG.debug(\n          \"No prior existing flow context found. Using default Flow context: \"\n          + \"{} for an application {}\", fc, appId);\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), fc,\n        appId, creds, context, p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "9b08f365d749185d7ed8e34dc379b2e415a29e99": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6323. Rolling upgrade/config change is broken on timeline v2. (Vrushali C via Haibo Chen)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "9b08f365d749185d7ed8e34dc379b2e415a29e99",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,48 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     FlowContext fc \u003d null;\n     if (p.getFlowContext() !\u003d null) {\n       FlowContextProto fcp \u003d p.getFlowContext();\n       fc \u003d new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(),\n           fcp.getFlowRunId());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"Recovering Flow context: \" + fc + \" for an application \" + appId);\n       }\n+    } else {\n+      // in upgrade situations, where there is no prior existing flow context,\n+      // default would be used.\n+      fc \u003d new FlowContext(TimelineUtils.generateDefaultFlowName(null, appId),\n+          YarnConfiguration.DEFAULT_FLOW_VERSION, appId.getClusterTimestamp());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"No prior existing flow context found. Using default Flow context: \"\n+                + fc + \" for an application \" + appId);\n+      }\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n     ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), fc,\n         appId, creds, context, p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    FlowContext fc \u003d null;\n    if (p.getFlowContext() !\u003d null) {\n      FlowContextProto fcp \u003d p.getFlowContext();\n      fc \u003d new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(),\n          fcp.getFlowRunId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Recovering Flow context: \" + fc + \" for an application \" + appId);\n      }\n    } else {\n      // in upgrade situations, where there is no prior existing flow context,\n      // default would be used.\n      fc \u003d new FlowContext(TimelineUtils.generateDefaultFlowName(null, appId),\n          YarnConfiguration.DEFAULT_FLOW_VERSION, appId.getClusterTimestamp());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"No prior existing flow context found. Using default Flow context: \"\n                + fc + \" for an application \" + appId);\n      }\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), fc,\n        appId, creds, context, p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "47474fffac085e0e5ea46336bf80ccd0677017a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6555. Store application flow context in NM state store for work-preserving restart. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "25/05/17 9:15 PM",
      "commitName": "47474fffac085e0e5ea46336bf80ccd0677017a3",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "08/05/17 3:14 PM",
      "commitNameOld": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 17.25,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,38 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n+    FlowContext fc \u003d null;\n+    if (p.getFlowContext() !\u003d null) {\n+      FlowContextProto fcp \u003d p.getFlowContext();\n+      fc \u003d new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(),\n+          fcp.getFlowRunId());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"Recovering Flow context: \" + fc + \" for an application \" + appId);\n+      }\n+    }\n+\n     LOG.info(\"Recovering application \" + appId);\n-    //TODO: Recover flow and flow run ID\n-    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n-        creds, context, p.getAppLogAggregationInitedTime());\n+    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), fc,\n+        appId, creds, context, p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    FlowContext fc \u003d null;\n    if (p.getFlowContext() !\u003d null) {\n      FlowContextProto fcp \u003d p.getFlowContext();\n      fc \u003d new FlowContext(fcp.getFlowName(), fcp.getFlowVersion(),\n          fcp.getFlowRunId());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Recovering Flow context: \" + fc + \" for an application \" + appId);\n      }\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), fc,\n        appId, creds, context, p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "6d943038f61211594d017f631710e6710ec71372": {
      "type": "Ybodychange",
      "commitMessage": "Cleanup changes during rebase with trunk (Vrushali C)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "6d943038f61211594d017f631710e6710ec71372",
      "commitAuthor": "Vrushali",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n     //TODO: Recover flow and flow run ID\n-    ApplicationImpl app \u003d new ApplicationImpl(\n-        dispatcher, p.getUser(), null, appId, creds, context, \n-        p.getAppLogAggregationInitedTime());\n+    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n+        creds, context, p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    //TODO: Recover flow and flow run ID\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n        creds, context, p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4356. Ensure the timeline service v.2 is disabled cleanly and has no\nimpact when it\u0027s turned off. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8d9476ec5f64795e2bdd60bea4d643eaafed2c50",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n     //TODO: Recover flow and flow run ID\n     ApplicationImpl app \u003d new ApplicationImpl(\n-        dispatcher, p.getUser(), null, null, 0L, appId, creds, context, \n+        dispatcher, p.getUser(), null, appId, creds, context, \n         p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    //TODO: Recover flow and flow run ID\n    ApplicationImpl app \u003d new ApplicationImpl(\n        dispatcher, p.getUser(), null, appId, creds, context, \n        p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3391. Clearly define flow ID/ flow run / flow version in API and storage. Contributed by Zhijie Shen\n\n(cherry picked from commit 68c6232f8423e55b4d152ef3d1d66aeb2d6a555e)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n     //TODO: Recover flow and flow run ID\n     ApplicationImpl app \u003d new ApplicationImpl(\n-        dispatcher, p.getUser(), null, null, appId, creds, context, p.getAppLogAggregationInitedTime());\n-\n+        dispatcher, p.getUser(), null, null, 0L, appId, creds, context, \n+        p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    //TODO: Recover flow and flow run ID\n    ApplicationImpl app \u003d new ApplicationImpl(\n        dispatcher, p.getUser(), null, null, 0L, appId, creds, context, \n        p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/06/16 2:30 PM",
      "commitNameOld": "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 33.76,
      "commitsBetweenForRepo": 236,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n-    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n-        creds, context, p.getAppLogAggregationInitedTime());\n+    //TODO: Recover flow and flow run ID\n+    ApplicationImpl app \u003d new ApplicationImpl(\n+        dispatcher, p.getUser(), null, null, appId, creds, context, p.getAppLogAggregationInitedTime());\n+\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    //TODO: Recover flow and flow run ID\n    ApplicationImpl app \u003d new ApplicationImpl(\n        dispatcher, p.getUser(), null, null, appId, creds, context, p.getAppLogAggregationInitedTime());\n\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "e07519b8dbb96d73c48e910a4de12563c5c2f8aa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4766. NM should not aggregate logs older than the retention policy (haibochen via rkanter)\n",
      "commitDate": "25/05/16 10:25 AM",
      "commitName": "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "13/05/16 1:38 PM",
      "commitNameOld": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 11.87,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n     LogAggregationContext logAggregationContext \u003d null;\n     if (p.getLogAggregationContext() !\u003d null) {\n       logAggregationContext \u003d\n           new LogAggregationContextPBImpl(p.getLogAggregationContext());\n     }\n \n     LOG.info(\"Recovering application \" + appId);\n     ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n-        creds, context);\n+        creds, context, p.getAppLogAggregationInitedTime());\n     context.getApplications().put(appId, app);\n     app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n        creds, context, p.getAppLogAggregationInitedTime());\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2581. Passed LogAggregationContext to NM via ContainerTokenIdentifier. Contributed by Xuan Gong.\n",
      "commitDate": "24/09/14 5:50 PM",
      "commitName": "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "12/08/14 3:56 AM",
      "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 43.58,
      "commitsBetweenForRepo": 426,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,27 @@\n   private void recoverApplication(ContainerManagerApplicationProto p)\n       throws IOException {\n     ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n     Credentials creds \u003d new Credentials();\n     creds.readTokenStorageStream(\n         new DataInputStream(p.getCredentials().newInput()));\n \n     List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n     Map\u003cApplicationAccessType, String\u003e acls \u003d\n         new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n     for (ApplicationACLMapProto aclProto : aclProtoList) {\n       acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n           aclProto.getAcl());\n     }\n \n+    LogAggregationContext logAggregationContext \u003d null;\n+    if (p.getLogAggregationContext() !\u003d null) {\n+      logAggregationContext \u003d\n+          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n+    }\n+\n     LOG.info(\"Recovering application \" + appId);\n     ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n         creds, context);\n     context.getApplications().put(appId, app);\n-    app.handle(new ApplicationInitEvent(appId, acls));\n+    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LogAggregationContext logAggregationContext \u003d null;\n    if (p.getLogAggregationContext() !\u003d null) {\n      logAggregationContext \u003d\n          new LogAggregationContextPBImpl(p.getLogAggregationContext());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n        creds, context);\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls, logAggregationContext));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 6:25 AM",
      "commitName": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,21 @@\n+  private void recoverApplication(ContainerManagerApplicationProto p)\n+      throws IOException {\n+    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n+    Credentials creds \u003d new Credentials();\n+    creds.readTokenStorageStream(\n+        new DataInputStream(p.getCredentials().newInput()));\n+\n+    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n+    Map\u003cApplicationAccessType, String\u003e acls \u003d\n+        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n+    for (ApplicationACLMapProto aclProto : aclProtoList) {\n+      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n+          aclProto.getAcl());\n+    }\n+\n+    LOG.info(\"Recovering application \" + appId);\n+    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n+        creds, context);\n+    context.getApplications().put(appId, app);\n+    app.handle(new ApplicationInitEvent(appId, acls));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void recoverApplication(ContainerManagerApplicationProto p)\n      throws IOException {\n    ApplicationId appId \u003d new ApplicationIdPBImpl(p.getId());\n    Credentials creds \u003d new Credentials();\n    creds.readTokenStorageStream(\n        new DataInputStream(p.getCredentials().newInput()));\n\n    List\u003cApplicationACLMapProto\u003e aclProtoList \u003d p.getAclsList();\n    Map\u003cApplicationAccessType, String\u003e acls \u003d\n        new HashMap\u003cApplicationAccessType, String\u003e(aclProtoList.size());\n    for (ApplicationACLMapProto aclProto : aclProtoList) {\n      acls.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()),\n          aclProto.getAcl());\n    }\n\n    LOG.info(\"Recovering application \" + appId);\n    ApplicationImpl app \u003d new ApplicationImpl(dispatcher, p.getUser(), appId,\n        creds, context);\n    context.getApplications().put(appId, app);\n    app.handle(new ApplicationInitEvent(appId, acls));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}