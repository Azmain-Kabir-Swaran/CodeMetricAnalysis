{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "createLocatedBlock",
  "functionId": "createLocatedBlock___locatedBlocks-LocatedBlockBuilder__blocks-BlockInfo[](modifiers-final)__endPos-long(modifiers-final)__mode-AccessMode(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1357,
  "functionEndLine": 1372,
  "numCommitsSeen": 1370,
  "timeTaken": 20737,
  "changeHistory": [
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "390eca2cdea5a83ea02e4c795d65a506e6a00039",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "b0944651681337e81b41250f43bd1e8eebc78125",
    "371f4a59059322000a40eb4bdf5386b96b626ece"
  ],
  "changeHistoryShort": {
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": "Ymultichange(Yparameterchange,Ybodychange)",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": "Ybodychange",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Yparameterchange",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ymultichange(Yparameterchange,Ybodychange)",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Yparameterchange",
    "390eca2cdea5a83ea02e4c795d65a506e6a00039": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": "Ybodychange",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "b0944651681337e81b41250f43bd1e8eebc78125": "Ybodychange",
    "371f4a59059322000a40eb4bdf5386b96b626ece": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
      "commitAuthor": "Virajith Jalaparti",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "05/12/17 8:48 PM",
          "commitNameOld": "56b1ff80dd9fbcde8d21a604eff0babb3a16418f",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 9.88,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n+      final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n     int curBlk;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n-    return createLocatedBlock(blocks[curBlk], curPos, mode);\n+    return createLocatedBlock(locatedBlocks, blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n      final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(locatedBlocks, blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blocks-BlockInfo[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]",
            "newValue": "[locatedBlocks-LocatedBlockBuilder, blocks-BlockInfo[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "05/12/17 8:48 PM",
          "commitNameOld": "56b1ff80dd9fbcde8d21a604eff0babb3a16418f",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 9.88,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n+      final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n     int curBlk;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n-    return createLocatedBlock(blocks[curBlk], curPos, mode);\n+    return createLocatedBlock(locatedBlocks, blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(LocatedBlockBuilder locatedBlocks,\n      final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(locatedBlocks, blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\"\n\nThis reverts commit de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "31/07/15 4:15 PM",
      "commitNameOld": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n-    int curBlk;\n+    int curBlk \u003d 0;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n     return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\n",
      "commitDate": "26/06/15 10:49 AM",
      "commitName": "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/06/15 2:42 PM",
      "commitNameOld": "afe9ea3c12e1f5a71922400eadb642960bc87ca1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n-    int curBlk \u003d 0;\n+    int curBlk;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n     return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/05/15 11:05 AM",
      "commitNameOld": "8860e352c394372e4eb3ebdf82ea899567f34e4e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n     int curBlk \u003d 0;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n     return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[blocks-BlockInfoContiguous[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]",
        "newValue": "[blocks-BlockInfo[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]"
      }
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:07 AM",
          "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 11:07 AM",
          "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n-    int curBlk \u003d 0;\n+    int curBlk;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n     return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blocks-BlockInfoContiguous[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]",
            "newValue": "[blocks-BlockInfo[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
          "commitDate": "26/05/15 11:07 AM",
          "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 11:07 AM",
          "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n-    int curBlk \u003d 0;\n+    int curBlk;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n     return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/02/15 11:31 AM",
      "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.01,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+  private LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n       final long endPos, final AccessMode mode) throws IOException {\n     int curBlk \u003d 0;\n     long curPos \u003d 0;\n     int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n     for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n       long blkSize \u003d blocks[curBlk].getNumBytes();\n       if (curPos + blkSize \u003e\u003d endPos) {\n         break;\n       }\n       curPos +\u003d blkSize;\n     }\n     \n     return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfoContiguous[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[blocks-BlockInfo[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]",
        "newValue": "[blocks-BlockInfoContiguous[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]"
      }
    },
    "390eca2cdea5a83ea02e4c795d65a506e6a00039": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-4873. callGetBlockLocations returns incorrect number of blocks for snapshotted files. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/13 2:03 PM",
      "commitName": "390eca2cdea5a83ea02e4c795d65a506e6a00039",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-4873. callGetBlockLocations returns incorrect number of blocks for snapshotted files. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491957 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/13 2:03 PM",
          "commitName": "390eca2cdea5a83ea02e4c795d65a506e6a00039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/06/13 6:39 PM",
          "commitNameOld": "8e0f166cf3386b63995bd712b497a933d2b68c11",
          "commitAuthorOld": "Konstantin Shvachko",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,15 @@\n-  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n-      final long fileSizeExcludeBlocksUnderConstruction,\n-      final boolean isFileUnderConstruction,\n-      final long offset, final long length, final boolean needBlockToken\n-      ) throws IOException {\n-    assert namesystem.hasReadOrWriteLock();\n-    if (blocks \u003d\u003d null) {\n-      return null;\n-    } else if (blocks.length \u003d\u003d 0) {\n-      return new LocatedBlocks(0, isFileUnderConstruction,\n-          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+      final long endPos, final AccessMode mode) throws IOException {\n+    int curBlk \u003d 0;\n+    long curPos \u003d 0;\n+    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n+    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n+      long blkSize \u003d blocks[curBlk].getNumBytes();\n+      if (curPos + blkSize \u003e\u003d endPos) {\n+        break;\n       }\n-      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n-      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE, mode);\n-\n-      final BlockInfo last \u003d blocks[blocks.length - 1];\n-      final long lastPos \u003d last.isComplete()?\n-          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n-          : fileSizeExcludeBlocksUnderConstruction;\n-      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n-      return new LocatedBlocks(\n-          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n-          locatedblocks, lastlb, last.isComplete());\n+      curPos +\u003d blkSize;\n     }\n+    \n+    return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "createLocatedBlocks",
            "newValue": "createLocatedBlock"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4873. callGetBlockLocations returns incorrect number of blocks for snapshotted files. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491957 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/13 2:03 PM",
          "commitName": "390eca2cdea5a83ea02e4c795d65a506e6a00039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/06/13 6:39 PM",
          "commitNameOld": "8e0f166cf3386b63995bd712b497a933d2b68c11",
          "commitAuthorOld": "Konstantin Shvachko",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,15 @@\n-  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n-      final long fileSizeExcludeBlocksUnderConstruction,\n-      final boolean isFileUnderConstruction,\n-      final long offset, final long length, final boolean needBlockToken\n-      ) throws IOException {\n-    assert namesystem.hasReadOrWriteLock();\n-    if (blocks \u003d\u003d null) {\n-      return null;\n-    } else if (blocks.length \u003d\u003d 0) {\n-      return new LocatedBlocks(0, isFileUnderConstruction,\n-          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+      final long endPos, final AccessMode mode) throws IOException {\n+    int curBlk \u003d 0;\n+    long curPos \u003d 0;\n+    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n+    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n+      long blkSize \u003d blocks[curBlk].getNumBytes();\n+      if (curPos + blkSize \u003e\u003d endPos) {\n+        break;\n       }\n-      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n-      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE, mode);\n-\n-      final BlockInfo last \u003d blocks[blocks.length - 1];\n-      final long lastPos \u003d last.isComplete()?\n-          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n-          : fileSizeExcludeBlocksUnderConstruction;\n-      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n-      return new LocatedBlocks(\n-          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n-          locatedblocks, lastlb, last.isComplete());\n+      curPos +\u003d blkSize;\n     }\n+    \n+    return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blocks-BlockInfo[](modifiers-final), fileSizeExcludeBlocksUnderConstruction-long(modifiers-final), isFileUnderConstruction-boolean(modifiers-final), offset-long(modifiers-final), length-long(modifiers-final), needBlockToken-boolean(modifiers-final)]",
            "newValue": "[blocks-BlockInfo[](modifiers-final), endPos-long(modifiers-final), mode-AccessMode(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4873. callGetBlockLocations returns incorrect number of blocks for snapshotted files. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491957 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/13 2:03 PM",
          "commitName": "390eca2cdea5a83ea02e4c795d65a506e6a00039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/06/13 6:39 PM",
          "commitNameOld": "8e0f166cf3386b63995bd712b497a933d2b68c11",
          "commitAuthorOld": "Konstantin Shvachko",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,15 @@\n-  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n-      final long fileSizeExcludeBlocksUnderConstruction,\n-      final boolean isFileUnderConstruction,\n-      final long offset, final long length, final boolean needBlockToken\n-      ) throws IOException {\n-    assert namesystem.hasReadOrWriteLock();\n-    if (blocks \u003d\u003d null) {\n-      return null;\n-    } else if (blocks.length \u003d\u003d 0) {\n-      return new LocatedBlocks(0, isFileUnderConstruction,\n-          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+      final long endPos, final AccessMode mode) throws IOException {\n+    int curBlk \u003d 0;\n+    long curPos \u003d 0;\n+    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n+    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n+      long blkSize \u003d blocks[curBlk].getNumBytes();\n+      if (curPos + blkSize \u003e\u003d endPos) {\n+        break;\n       }\n-      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n-      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE, mode);\n-\n-      final BlockInfo last \u003d blocks[blocks.length - 1];\n-      final long lastPos \u003d last.isComplete()?\n-          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n-          : fileSizeExcludeBlocksUnderConstruction;\n-      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n-      return new LocatedBlocks(\n-          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n-          locatedblocks, lastlb, last.isComplete());\n+      curPos +\u003d blkSize;\n     }\n+    \n+    return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "LocatedBlocks",
            "newValue": "LocatedBlock"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4873. callGetBlockLocations returns incorrect number of blocks for snapshotted files. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491957 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/13 2:03 PM",
          "commitName": "390eca2cdea5a83ea02e4c795d65a506e6a00039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/06/13 6:39 PM",
          "commitNameOld": "8e0f166cf3386b63995bd712b497a933d2b68c11",
          "commitAuthorOld": "Konstantin Shvachko",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,15 @@\n-  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n-      final long fileSizeExcludeBlocksUnderConstruction,\n-      final boolean isFileUnderConstruction,\n-      final long offset, final long length, final boolean needBlockToken\n-      ) throws IOException {\n-    assert namesystem.hasReadOrWriteLock();\n-    if (blocks \u003d\u003d null) {\n-      return null;\n-    } else if (blocks.length \u003d\u003d 0) {\n-      return new LocatedBlocks(0, isFileUnderConstruction,\n-          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+      final long endPos, final AccessMode mode) throws IOException {\n+    int curBlk \u003d 0;\n+    long curPos \u003d 0;\n+    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n+    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n+      long blkSize \u003d blocks[curBlk].getNumBytes();\n+      if (curPos + blkSize \u003e\u003d endPos) {\n+        break;\n       }\n-      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n-      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE, mode);\n-\n-      final BlockInfo last \u003d blocks[blocks.length - 1];\n-      final long lastPos \u003d last.isComplete()?\n-          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n-          : fileSizeExcludeBlocksUnderConstruction;\n-      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n-      return new LocatedBlocks(\n-          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n-          locatedblocks, lastlb, last.isComplete());\n+      curPos +\u003d blkSize;\n     }\n+    \n+    return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4873. callGetBlockLocations returns incorrect number of blocks for snapshotted files. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491957 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/06/13 2:03 PM",
          "commitName": "390eca2cdea5a83ea02e4c795d65a506e6a00039",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/06/13 6:39 PM",
          "commitNameOld": "8e0f166cf3386b63995bd712b497a933d2b68c11",
          "commitAuthorOld": "Konstantin Shvachko",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,15 @@\n-  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n-      final long fileSizeExcludeBlocksUnderConstruction,\n-      final boolean isFileUnderConstruction,\n-      final long offset, final long length, final boolean needBlockToken\n-      ) throws IOException {\n-    assert namesystem.hasReadOrWriteLock();\n-    if (blocks \u003d\u003d null) {\n-      return null;\n-    } else if (blocks.length \u003d\u003d 0) {\n-      return new LocatedBlocks(0, isFileUnderConstruction,\n-          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n+      final long endPos, final AccessMode mode) throws IOException {\n+    int curBlk \u003d 0;\n+    long curPos \u003d 0;\n+    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n+    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n+      long blkSize \u003d blocks[curBlk].getNumBytes();\n+      if (curPos + blkSize \u003e\u003d endPos) {\n+        break;\n       }\n-      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n-      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE, mode);\n-\n-      final BlockInfo last \u003d blocks[blocks.length - 1];\n-      final long lastPos \u003d last.isComplete()?\n-          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n-          : fileSizeExcludeBlocksUnderConstruction;\n-      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n-      return new LocatedBlocks(\n-          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n-          locatedblocks, lastlb, last.isComplete());\n+      curPos +\u003d blkSize;\n     }\n+    \n+    return createLocatedBlock(blocks[curBlk], curPos, mode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock createLocatedBlock(final BlockInfo[] blocks,\n      final long endPos, final AccessMode mode) throws IOException {\n    int curBlk \u003d 0;\n    long curPos \u003d 0;\n    int nrBlocks \u003d (blocks[0].getNumBytes() \u003d\u003d 0) ? 0 : blocks.length;\n    for (curBlk \u003d 0; curBlk \u003c nrBlocks; curBlk++) {\n      long blkSize \u003d blocks[curBlk].getNumBytes();\n      if (curPos + blkSize \u003e\u003d endPos) {\n        break;\n      }\n      curPos +\u003d blkSize;\n    }\n    \n    return createLocatedBlock(blocks[curBlk], curPos, mode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction,\n      final long offset, final long length, final boolean needBlockToken\n      ) throws IOException {\n    assert namesystem.hasReadOrWriteLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE, mode);\n\n      final BlockInfo last \u003d blocks[blocks.length - 1];\n      final long lastPos \u003d last.isComplete()?\n          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n          : fileSizeExcludeBlocksUnderConstruction;\n      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n      return new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n          locatedblocks, lastlb, last.isComplete());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 4:14 PM",
      "commitName": "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/08/11 3:28 PM",
      "commitNameOld": "513f17d115564e49124bb744cecf36d16a144ffc",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,29 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction,\n       final long offset, final long length, final boolean needBlockToken\n       ) throws IOException {\n     assert namesystem.hasReadOrWriteLock();\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n       }\n+      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n       final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE);\n+          blocks, offset, length, Integer.MAX_VALUE, mode);\n \n       final BlockInfo last \u003d blocks[blocks.length - 1];\n       final long lastPos \u003d last.isComplete()?\n           fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n           : fileSizeExcludeBlocksUnderConstruction;\n-      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos);\n-\n-      if (isBlockTokenEnabled() \u0026\u0026 needBlockToken) {\n-        for(LocatedBlock lb : locatedblocks) {\n-          setBlockToken(lb, AccessMode.READ);\n-        }\n-        setBlockToken(lastlb, AccessMode.READ);\n-      }\n+      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n       return new LocatedBlocks(\n           fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n           locatedblocks, lastlb, last.isComplete());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction,\n      final long offset, final long length, final boolean needBlockToken\n      ) throws IOException {\n    assert namesystem.hasReadOrWriteLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? AccessMode.READ: null;\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE, mode);\n\n      final BlockInfo last \u003d blocks[blocks.length - 1];\n      final long lastPos \u003d last.isComplete()?\n          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n          : fileSizeExcludeBlocksUnderConstruction;\n      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos, mode);\n      return new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n          locatedblocks, lastlb, last.isComplete());\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction,\n      final long offset, final long length, final boolean needBlockToken\n      ) throws IOException {\n    assert namesystem.hasReadOrWriteLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE);\n\n      final BlockInfo last \u003d blocks[blocks.length - 1];\n      final long lastPos \u003d last.isComplete()?\n          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n          : fileSizeExcludeBlocksUnderConstruction;\n      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos);\n\n      if (isBlockTokenEnabled() \u0026\u0026 needBlockToken) {\n        for(LocatedBlock lb : locatedblocks) {\n          setBlockToken(lb, AccessMode.READ);\n        }\n        setBlockToken(lastlb, AccessMode.READ);\n      }\n      return new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n          locatedblocks, lastlb, last.isComplete());\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "b0944651681337e81b41250f43bd1e8eebc78125": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2265. Remove unnecessary BlockTokenSecretManager fields/methods from BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1158743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/11 7:34 AM",
      "commitName": "b0944651681337e81b41250f43bd1e8eebc78125",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/08/11 3:16 PM",
      "commitNameOld": "1dd48b1aee2378c02ee7e78864a757cff3607274",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.68,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction,\n       final long offset, final long length, final boolean needBlockToken\n       ) throws IOException {\n     assert namesystem.hasReadOrWriteLock();\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n       }\n       final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n           blocks, offset, length, Integer.MAX_VALUE);\n \n       final BlockInfo last \u003d blocks[blocks.length - 1];\n       final long lastPos \u003d last.isComplete()?\n           fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n           : fileSizeExcludeBlocksUnderConstruction;\n       final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos);\n \n-      if (isBlockTokenEnabled \u0026\u0026 needBlockToken) {\n+      if (isBlockTokenEnabled() \u0026\u0026 needBlockToken) {\n         for(LocatedBlock lb : locatedblocks) {\n           setBlockToken(lb, AccessMode.READ);\n         }\n         setBlockToken(lastlb, AccessMode.READ);\n       }\n       return new LocatedBlocks(\n           fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n           locatedblocks, lastlb, last.isComplete());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction,\n      final long offset, final long length, final boolean needBlockToken\n      ) throws IOException {\n    assert namesystem.hasReadOrWriteLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE);\n\n      final BlockInfo last \u003d blocks[blocks.length - 1];\n      final long lastPos \u003d last.isComplete()?\n          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n          : fileSizeExcludeBlocksUnderConstruction;\n      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos);\n\n      if (isBlockTokenEnabled() \u0026\u0026 needBlockToken) {\n        for(LocatedBlock lb : locatedblocks) {\n          setBlockToken(lb, AccessMode.READ);\n        }\n        setBlockToken(lastlb, AccessMode.READ);\n      }\n      return new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n          locatedblocks, lastlb, last.isComplete());\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "371f4a59059322000a40eb4bdf5386b96b626ece": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2228. Move block and datanode code from FSNamesystem to BlockManager and DatanodeManager.  (szetszwo)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/11 3:06 AM",
      "commitName": "371f4a59059322000a40eb4bdf5386b96b626ece",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,35 @@\n+  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n+      final long fileSizeExcludeBlocksUnderConstruction,\n+      final boolean isFileUnderConstruction,\n+      final long offset, final long length, final boolean needBlockToken\n+      ) throws IOException {\n+    assert namesystem.hasReadOrWriteLock();\n+    if (blocks \u003d\u003d null) {\n+      return null;\n+    } else if (blocks.length \u003d\u003d 0) {\n+      return new LocatedBlocks(0, isFileUnderConstruction,\n+          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+      }\n+      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n+          blocks, offset, length, Integer.MAX_VALUE);\n+\n+      final BlockInfo last \u003d blocks[blocks.length - 1];\n+      final long lastPos \u003d last.isComplete()?\n+          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n+          : fileSizeExcludeBlocksUnderConstruction;\n+      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos);\n+\n+      if (isBlockTokenEnabled \u0026\u0026 needBlockToken) {\n+        for(LocatedBlock lb : locatedblocks) {\n+          setBlockToken(lb, AccessMode.READ);\n+        }\n+        setBlockToken(lastlb, AccessMode.READ);\n+      }\n+      return new LocatedBlocks(\n+          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n+          locatedblocks, lastlb, last.isComplete());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction,\n      final long offset, final long length, final boolean needBlockToken\n      ) throws IOException {\n    assert namesystem.hasReadOrWriteLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003eemptyList(), null, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE);\n\n      final BlockInfo last \u003d blocks[blocks.length - 1];\n      final long lastPos \u003d last.isComplete()?\n          fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n          : fileSizeExcludeBlocksUnderConstruction;\n      final LocatedBlock lastlb \u003d createLocatedBlock(last, lastPos);\n\n      if (isBlockTokenEnabled \u0026\u0026 needBlockToken) {\n        for(LocatedBlock lb : locatedblocks) {\n          setBlockToken(lb, AccessMode.READ);\n        }\n        setBlockToken(lastlb, AccessMode.READ);\n      }\n      return new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction, isFileUnderConstruction,\n          locatedblocks, lastlb, last.isComplete());\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
    }
  }
}