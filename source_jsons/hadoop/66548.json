{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SynthTraceJobProducer.java",
  "functionName": "createStory",
  "functionId": "createStory",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java",
  "functionStartLine": 133,
  "functionEndLine": 153,
  "numCommitsSeen": 7,
  "timeTaken": 3097,
  "changeHistory": [
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b"
  ],
  "changeHistoryShort": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
      "commitDate": "20/02/18 5:00 PM",
      "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthor": "Carlo Curino",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "04/05/17 5:21 PM",
          "commitNameOld": "3082552b3b991df846caf572b58e44308ddf8eeb",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 292.03,
          "commitsBetweenForRepo": 1971,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,21 @@\n-  void createStoryParams() {\n-\n+  private Queue\u003cStoryParams\u003e createStory() {\n+    // create priority queue to keep start-time sorted\n+    Queue\u003cStoryParams\u003e storyQueue \u003d\n+        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n+          @Override\n+          public int compare(StoryParams o1, StoryParams o2) {\n+            return Math\n+                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n+          }\n+        });\n     for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n-      int workload \u003d SynthUtils.getWeighted(weightList, rand);\n-      SynthWorkload pickedWorkload \u003d workloads.get(workload);\n-      long jobClass \u003d\n-          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);\n-      SynthJobClass pickedJobClass \u003d\n-          pickedWorkload.getClassList().get((int) jobClass);\n-      long actualSubmissionTime \u003d pickedWorkload.getBaseSubmissionTime(rand);\n-      // long actualSubmissionTime \u003d (i + 1) * 10;\n-      listStoryParams\n-          .add(new StoryParams(pickedJobClass, actualSubmissionTime));\n+      // Generate a workload\n+      Workload wl \u003d trace.generateWorkload();\n+      // Save all the parameters needed to completely define a job\n+      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n+      String queue \u003d wl.queue_name;\n+      JobDefinition job \u003d wl.generateJobDefinition();\n+      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n     }\n+    return storyQueue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Queue\u003cStoryParams\u003e createStory() {\n    // create priority queue to keep start-time sorted\n    Queue\u003cStoryParams\u003e storyQueue \u003d\n        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n          @Override\n          public int compare(StoryParams o1, StoryParams o2) {\n            return Math\n                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n          }\n        });\n    for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n      // Generate a workload\n      Workload wl \u003d trace.generateWorkload();\n      // Save all the parameters needed to completely define a job\n      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n      String queue \u003d wl.queue_name;\n      JobDefinition job \u003d wl.generateJobDefinition();\n      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n    }\n    return storyQueue;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java",
          "extendedDetails": {
            "oldValue": "createStoryParams",
            "newValue": "createStory"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "04/05/17 5:21 PM",
          "commitNameOld": "3082552b3b991df846caf572b58e44308ddf8eeb",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 292.03,
          "commitsBetweenForRepo": 1971,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,21 @@\n-  void createStoryParams() {\n-\n+  private Queue\u003cStoryParams\u003e createStory() {\n+    // create priority queue to keep start-time sorted\n+    Queue\u003cStoryParams\u003e storyQueue \u003d\n+        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n+          @Override\n+          public int compare(StoryParams o1, StoryParams o2) {\n+            return Math\n+                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n+          }\n+        });\n     for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n-      int workload \u003d SynthUtils.getWeighted(weightList, rand);\n-      SynthWorkload pickedWorkload \u003d workloads.get(workload);\n-      long jobClass \u003d\n-          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);\n-      SynthJobClass pickedJobClass \u003d\n-          pickedWorkload.getClassList().get((int) jobClass);\n-      long actualSubmissionTime \u003d pickedWorkload.getBaseSubmissionTime(rand);\n-      // long actualSubmissionTime \u003d (i + 1) * 10;\n-      listStoryParams\n-          .add(new StoryParams(pickedJobClass, actualSubmissionTime));\n+      // Generate a workload\n+      Workload wl \u003d trace.generateWorkload();\n+      // Save all the parameters needed to completely define a job\n+      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n+      String queue \u003d wl.queue_name;\n+      JobDefinition job \u003d wl.generateJobDefinition();\n+      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n     }\n+    return storyQueue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Queue\u003cStoryParams\u003e createStory() {\n    // create priority queue to keep start-time sorted\n    Queue\u003cStoryParams\u003e storyQueue \u003d\n        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n          @Override\n          public int compare(StoryParams o1, StoryParams o2) {\n            return Math\n                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n          }\n        });\n    for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n      // Generate a workload\n      Workload wl \u003d trace.generateWorkload();\n      // Save all the parameters needed to completely define a job\n      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n      String queue \u003d wl.queue_name;\n      JobDefinition job \u003d wl.generateJobDefinition();\n      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n    }\n    return storyQueue;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Queue\u003cStoryParams\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "04/05/17 5:21 PM",
          "commitNameOld": "3082552b3b991df846caf572b58e44308ddf8eeb",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 292.03,
          "commitsBetweenForRepo": 1971,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,21 @@\n-  void createStoryParams() {\n-\n+  private Queue\u003cStoryParams\u003e createStory() {\n+    // create priority queue to keep start-time sorted\n+    Queue\u003cStoryParams\u003e storyQueue \u003d\n+        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n+          @Override\n+          public int compare(StoryParams o1, StoryParams o2) {\n+            return Math\n+                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n+          }\n+        });\n     for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n-      int workload \u003d SynthUtils.getWeighted(weightList, rand);\n-      SynthWorkload pickedWorkload \u003d workloads.get(workload);\n-      long jobClass \u003d\n-          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);\n-      SynthJobClass pickedJobClass \u003d\n-          pickedWorkload.getClassList().get((int) jobClass);\n-      long actualSubmissionTime \u003d pickedWorkload.getBaseSubmissionTime(rand);\n-      // long actualSubmissionTime \u003d (i + 1) * 10;\n-      listStoryParams\n-          .add(new StoryParams(pickedJobClass, actualSubmissionTime));\n+      // Generate a workload\n+      Workload wl \u003d trace.generateWorkload();\n+      // Save all the parameters needed to completely define a job\n+      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n+      String queue \u003d wl.queue_name;\n+      JobDefinition job \u003d wl.generateJobDefinition();\n+      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n     }\n+    return storyQueue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Queue\u003cStoryParams\u003e createStory() {\n    // create priority queue to keep start-time sorted\n    Queue\u003cStoryParams\u003e storyQueue \u003d\n        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n          @Override\n          public int compare(StoryParams o1, StoryParams o2) {\n            return Math\n                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n          }\n        });\n    for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n      // Generate a workload\n      Workload wl \u003d trace.generateWorkload();\n      // Save all the parameters needed to completely define a job\n      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n      String queue \u003d wl.queue_name;\n      JobDefinition job \u003d wl.generateJobDefinition();\n      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n    }\n    return storyQueue;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "04/05/17 5:21 PM",
          "commitNameOld": "3082552b3b991df846caf572b58e44308ddf8eeb",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 292.03,
          "commitsBetweenForRepo": 1971,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,21 @@\n-  void createStoryParams() {\n-\n+  private Queue\u003cStoryParams\u003e createStory() {\n+    // create priority queue to keep start-time sorted\n+    Queue\u003cStoryParams\u003e storyQueue \u003d\n+        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n+          @Override\n+          public int compare(StoryParams o1, StoryParams o2) {\n+            return Math\n+                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n+          }\n+        });\n     for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n-      int workload \u003d SynthUtils.getWeighted(weightList, rand);\n-      SynthWorkload pickedWorkload \u003d workloads.get(workload);\n-      long jobClass \u003d\n-          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);\n-      SynthJobClass pickedJobClass \u003d\n-          pickedWorkload.getClassList().get((int) jobClass);\n-      long actualSubmissionTime \u003d pickedWorkload.getBaseSubmissionTime(rand);\n-      // long actualSubmissionTime \u003d (i + 1) * 10;\n-      listStoryParams\n-          .add(new StoryParams(pickedJobClass, actualSubmissionTime));\n+      // Generate a workload\n+      Workload wl \u003d trace.generateWorkload();\n+      // Save all the parameters needed to completely define a job\n+      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n+      String queue \u003d wl.queue_name;\n+      JobDefinition job \u003d wl.generateJobDefinition();\n+      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n     }\n+    return storyQueue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Queue\u003cStoryParams\u003e createStory() {\n    // create priority queue to keep start-time sorted\n    Queue\u003cStoryParams\u003e storyQueue \u003d\n        new PriorityQueue\u003c\u003e(this.numJobs.get(), new Comparator\u003cStoryParams\u003e() {\n          @Override\n          public int compare(StoryParams o1, StoryParams o2) {\n            return Math\n                .toIntExact(o1.actualSubmissionTime - o2.actualSubmissionTime);\n          }\n        });\n    for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n      // Generate a workload\n      Workload wl \u003d trace.generateWorkload();\n      // Save all the parameters needed to completely define a job\n      long actualSubmissionTime \u003d wl.generateSubmissionTime();\n      String queue \u003d wl.queue_name;\n      JobDefinition job \u003d wl.generateJobDefinition();\n      storyQueue.add(new StoryParams(actualSubmissionTime, queue, job));\n    }\n    return storyQueue;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java",
          "extendedDetails": {}
        }
      ]
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,15 @@\n+  void createStoryParams() {\n+\n+    for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n+      int workload \u003d SynthUtils.getWeighted(weightList, rand);\n+      SynthWorkload pickedWorkload \u003d workloads.get(workload);\n+      long jobClass \u003d\n+          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);\n+      SynthJobClass pickedJobClass \u003d\n+          pickedWorkload.getClassList().get((int) jobClass);\n+      long actualSubmissionTime \u003d pickedWorkload.getBaseSubmissionTime(rand);\n+      // long actualSubmissionTime \u003d (i + 1) * 10;\n+      listStoryParams\n+          .add(new StoryParams(pickedJobClass, actualSubmissionTime));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void createStoryParams() {\n\n    for (int i \u003d 0; i \u003c numJobs.get(); i++) {\n      int workload \u003d SynthUtils.getWeighted(weightList, rand);\n      SynthWorkload pickedWorkload \u003d workloads.get(workload);\n      long jobClass \u003d\n          SynthUtils.getWeighted(pickedWorkload.getWeightList(), rand);\n      SynthJobClass pickedJobClass \u003d\n          pickedWorkload.getClassList().get((int) jobClass);\n      long actualSubmissionTime \u003d pickedWorkload.getBaseSubmissionTime(rand);\n      // long actualSubmissionTime \u003d (i + 1) * 10;\n      listStoryParams\n          .add(new StoryParams(pickedJobClass, actualSubmissionTime));\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java"
    }
  }
}