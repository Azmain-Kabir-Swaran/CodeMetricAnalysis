{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CredentialShell.java",
  "functionName": "init",
  "functionId": "init___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
  "functionStartLine": 78,
  "functionEndLine": 125,
  "numCommitsSeen": 15,
  "timeTaken": 2827,
  "changeHistory": [
    "2eba2624723e2258bddef72d05a1e90576082315",
    "eebb39a56fe504672b79ea04c6040e360496b6d7",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
    "17146099197000d85b3aedc84a672111f2c7908a",
    "21c6f01831dd3a63c46c2cbb94289206a6239166",
    "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052",
    "5918e991512658aa9d2af45a15862a8d405590fb",
    "c79728478caadd8374bce2bc3f466db1da1e3ad1"
  ],
  "changeHistoryShort": {
    "2eba2624723e2258bddef72d05a1e90576082315": "Ybodychange",
    "eebb39a56fe504672b79ea04c6040e360496b6d7": "Ybodychange",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": "Ybodychange",
    "17146099197000d85b3aedc84a672111f2c7908a": "Ybodychange",
    "21c6f01831dd3a63c46c2cbb94289206a6239166": "Ybodychange",
    "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5918e991512658aa9d2af45a15862a8d405590fb": "Ybodychange",
    "c79728478caadd8374bce2bc3f466db1da1e3ad1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2eba2624723e2258bddef72d05a1e90576082315": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16615. Add password check for credential provider,\n\nContributed by hongdongdong.\n\nChange-Id: Iaac01bc8594860064a80c822a0e47981243ab7e1\n",
      "commitDate": "24/10/19 10:48 AM",
      "commitName": "2eba2624723e2258bddef72d05a1e90576082315",
      "commitAuthor": "hongdongdong",
      "commitDateOld": "11/01/19 10:54 AM",
      "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 285.95,
      "commitsBetweenForRepo": 2187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,48 @@\n   protected int init(String[] args) throws IOException {\n     // no args should print the help message\n     if (0 \u003d\u003d args.length) {\n       ToolRunner.printGenericCommandUsage(getErr());\n       return 1;\n     }\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         if (i \u003d\u003d args.length - 1) {\n           return 1;\n         }\n         setSubCommand(new CreateCommand(args[++i]));\n+      } else if (args[i].equals(\"check\")) {\n+        if (i \u003d\u003d args.length - 1) {\n+          return 1;\n+        }\n+        setSubCommand(new CheckCommand(args[++i]));\n       } else if (args[i].equals(\"delete\")) {\n         if (i \u003d\u003d args.length - 1) {\n           return 1;\n         }\n         setSubCommand(new DeleteCommand(args[++i]));\n       } else if (args[i].equals(\"list\")) {\n         setSubCommand(new ListCommand());\n       } else if (args[i].equals(\"-provider\")) {\n         if (i \u003d\u003d args.length - 1) {\n           return 1;\n         }\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n             args[++i]);\n       } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-strict\")) {\n         strict \u003d true;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n         printShellUsage();\n         return 0;\n       } else {\n         ToolRunner.printGenericCommandUsage(getErr());\n         return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      ToolRunner.printGenericCommandUsage(getErr());\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        setSubCommand(new CreateCommand(args[++i]));\n      } else if (args[i].equals(\"check\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        setSubCommand(new CheckCommand(args[++i]));\n      } else if (args[i].equals(\"delete\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        setSubCommand(new DeleteCommand(args[++i]));\n      } else if (args[i].equals(\"list\")) {\n        setSubCommand(new ListCommand());\n      } else if (args[i].equals(\"-provider\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n            args[++i]);\n      } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printShellUsage();\n        return 0;\n      } else {\n        ToolRunner.printGenericCommandUsage(getErr());\n        return 1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
      "extendedDetails": {}
    },
    "eebb39a56fe504672b79ea04c6040e360496b6d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13112. Change CredentialShell to use CommandShell base class (Matthew Paduano via aw)\n",
      "commitDate": "23/05/16 1:37 PM",
      "commitName": "eebb39a56fe504672b79ea04c6040e360496b6d7",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "17/05/16 5:44 PM",
      "commitNameOld": "7154ace71212e9fb9dd6209a92165fb075df7806",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 5.83,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,43 @@\n   protected int init(String[] args) throws IOException {\n     // no args should print the help message\n     if (0 \u003d\u003d args.length) {\n-      printCredShellUsage();\n-      ToolRunner.printGenericCommandUsage(System.err);\n+      ToolRunner.printGenericCommandUsage(getErr());\n       return 1;\n     }\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         if (i \u003d\u003d args.length - 1) {\n-          printCredShellUsage();\n           return 1;\n         }\n-        String alias \u003d args[++i];\n-        command \u003d new CreateCommand(alias);\n-        if (alias.equals(\"-help\")) {\n-          printCredShellUsage();\n-          return 0;\n-        }\n+        setSubCommand(new CreateCommand(args[++i]));\n       } else if (args[i].equals(\"delete\")) {\n         if (i \u003d\u003d args.length - 1) {\n-          printCredShellUsage();\n           return 1;\n         }\n-        String alias \u003d args[++i];\n-        command \u003d new DeleteCommand(alias);\n-        if (alias.equals(\"-help\")) {\n-          printCredShellUsage();\n-          return 0;\n-        }\n+        setSubCommand(new DeleteCommand(args[++i]));\n       } else if (args[i].equals(\"list\")) {\n-        command \u003d new ListCommand();\n+        setSubCommand(new ListCommand());\n       } else if (args[i].equals(\"-provider\")) {\n         if (i \u003d\u003d args.length - 1) {\n-          printCredShellUsage();\n           return 1;\n         }\n         userSuppliedProvider \u003d true;\n-        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n+        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n             args[++i]);\n       } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-strict\")) {\n         strict \u003d true;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n-        printCredShellUsage();\n+        printShellUsage();\n         return 0;\n       } else {\n-        printCredShellUsage();\n-        ToolRunner.printGenericCommandUsage(System.err);\n+        ToolRunner.printGenericCommandUsage(getErr());\n         return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      ToolRunner.printGenericCommandUsage(getErr());\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        setSubCommand(new CreateCommand(args[++i]));\n      } else if (args[i].equals(\"delete\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        setSubCommand(new DeleteCommand(args[++i]));\n      } else if (args[i].equals(\"list\")) {\n        setSubCommand(new ListCommand());\n      } else if (args[i].equals(\"-provider\")) {\n        if (i \u003d\u003d args.length - 1) {\n          return 1;\n        }\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,\n            args[++i]);\n      } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printShellUsage();\n        return 0;\n      } else {\n        ToolRunner.printGenericCommandUsage(getErr());\n        return 1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
      "extendedDetails": {}
    },
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
      "commitDate": "11/05/16 11:30 AM",
      "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthor": "Larry McCay",
      "commitDateOld": "24/03/15 4:57 AM",
      "commitNameOld": "6e891a921e00b122390a976dfd13838472a7fcc6",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 414.27,
      "commitsBetweenForRepo": 3094,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   protected int init(String[] args) throws IOException {\n     // no args should print the help message\n     if (0 \u003d\u003d args.length) {\n       printCredShellUsage();\n       ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         if (i \u003d\u003d args.length - 1) {\n           printCredShellUsage();\n           return 1;\n         }\n         String alias \u003d args[++i];\n         command \u003d new CreateCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return 0;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         if (i \u003d\u003d args.length - 1) {\n           printCredShellUsage();\n           return 1;\n         }\n         String alias \u003d args[++i];\n         command \u003d new DeleteCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return 0;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n       } else if (args[i].equals(\"-provider\")) {\n         if (i \u003d\u003d args.length - 1) {\n           printCredShellUsage();\n           return 1;\n         }\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n             args[++i]);\n       } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n         interactive \u003d false;\n+      } else if (args[i].equals(\"-strict\")) {\n+        strict \u003d true;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n         printCredShellUsage();\n         return 0;\n       } else {\n         printCredShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      printCredShellUsage();\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        if (i \u003d\u003d args.length - 1) {\n          printCredShellUsage();\n          return 1;\n        }\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        if (i \u003d\u003d args.length - 1) {\n          printCredShellUsage();\n          return 1;\n        }\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"-provider\")) {\n        if (i \u003d\u003d args.length - 1) {\n          printCredShellUsage();\n          return 1;\n        }\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printCredShellUsage();\n        return 0;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
      "extendedDetails": {}
    },
    "17146099197000d85b3aedc84a672111f2c7908a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11545. ArrayIndexOutOfBoundsException is thrown with \"hadoop credential list -provider\". Contributed by Brahma Reddy Battula.\n",
      "commitDate": "18/02/15 11:17 AM",
      "commitName": "17146099197000d85b3aedc84a672111f2c7908a",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "04/01/15 2:55 PM",
      "commitNameOld": "21c6f01831dd3a63c46c2cbb94289206a6239166",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 44.85,
      "commitsBetweenForRepo": 404,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,56 @@\n   protected int init(String[] args) throws IOException {\n     // no args should print the help message\n     if (0 \u003d\u003d args.length) {\n       printCredShellUsage();\n       ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n+        if (i \u003d\u003d args.length - 1) {\n+          printCredShellUsage();\n+          return 1;\n+        }\n         String alias \u003d args[++i];\n         command \u003d new CreateCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return 0;\n         }\n       } else if (args[i].equals(\"delete\")) {\n+        if (i \u003d\u003d args.length - 1) {\n+          printCredShellUsage();\n+          return 1;\n+        }\n         String alias \u003d args[++i];\n         command \u003d new DeleteCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return 0;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n       } else if (args[i].equals(\"-provider\")) {\n+        if (i \u003d\u003d args.length - 1) {\n+          printCredShellUsage();\n+          return 1;\n+        }\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n             args[++i]);\n       } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n         printCredShellUsage();\n         return 0;\n       } else {\n         printCredShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      printCredShellUsage();\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        if (i \u003d\u003d args.length - 1) {\n          printCredShellUsage();\n          return 1;\n        }\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        if (i \u003d\u003d args.length - 1) {\n          printCredShellUsage();\n          return 1;\n        }\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"-provider\")) {\n        if (i \u003d\u003d args.length - 1) {\n          printCredShellUsage();\n          return 1;\n        }\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printCredShellUsage();\n        return 0;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
      "extendedDetails": {}
    },
    "21c6f01831dd3a63c46c2cbb94289206a6239166": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11455. KMS and Credential CLI should request confirmation for deletion by default. (Charles Lamb via yliu)\n",
      "commitDate": "04/01/15 2:55 PM",
      "commitName": "21c6f01831dd3a63c46c2cbb94289206a6239166",
      "commitAuthor": "yliu",
      "commitDateOld": "04/08/14 5:20 PM",
      "commitNameOld": "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 152.94,
      "commitsBetweenForRepo": 1316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   protected int init(String[] args) throws IOException {\n     // no args should print the help message\n     if (0 \u003d\u003d args.length) {\n       printCredShellUsage();\n       ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         String alias \u003d args[++i];\n         command \u003d new CreateCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return 0;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String alias \u003d args[++i];\n         command \u003d new DeleteCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return 0;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n       } else if (args[i].equals(\"-provider\")) {\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n             args[++i]);\n-      } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n-        interactive \u003d true;\n+      } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n+        interactive \u003d false;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n         printCredShellUsage();\n         return 0;\n       } else {\n         printCredShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      printCredShellUsage();\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"-provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-f\") || (args[i].equals(\"-force\"))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printCredShellUsage();\n        return 0;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
      "extendedDetails": {}
    },
    "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10927. Fix CredentialShell help behavior and error codes. Contributed by Josh Elser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 5:20 PM",
      "commitName": "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10927. Fix CredentialShell help behavior and error codes. Contributed by Josh Elser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615827 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/08/14 5:20 PM",
          "commitName": "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "04/08/14 2:45 PM",
          "commitNameOld": "d7b5709bcb1db615fee56e2bb7acb9955a6f8cc2",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,44 @@\n-  private int init(String[] args) throws IOException {\n+  protected int init(String[] args) throws IOException {\n+    // no args should print the help message\n+    if (0 \u003d\u003d args.length) {\n+      printCredShellUsage();\n+      ToolRunner.printGenericCommandUsage(System.err);\n+      return 1;\n+    }\n+\n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         String alias \u003d args[++i];\n         command \u003d new CreateCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n-          return -1;\n+          return 0;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String alias \u003d args[++i];\n         command \u003d new DeleteCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n-          return -1;\n+          return 0;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n       } else if (args[i].equals(\"-provider\")) {\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n             args[++i]);\n       } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n         interactive \u003d true;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n         printCredShellUsage();\n-        return -1;\n+        return 0;\n       } else {\n         printCredShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n-        return -1;\n+        return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      printCredShellUsage();\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"-provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n        interactive \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printCredShellUsage();\n        return 0;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10927. Fix CredentialShell help behavior and error codes. Contributed by Josh Elser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615827 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/08/14 5:20 PM",
          "commitName": "c8abf5f20a7ca802e3e7c93c8c5d260902cb4052",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "04/08/14 2:45 PM",
          "commitNameOld": "d7b5709bcb1db615fee56e2bb7acb9955a6f8cc2",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,44 @@\n-  private int init(String[] args) throws IOException {\n+  protected int init(String[] args) throws IOException {\n+    // no args should print the help message\n+    if (0 \u003d\u003d args.length) {\n+      printCredShellUsage();\n+      ToolRunner.printGenericCommandUsage(System.err);\n+      return 1;\n+    }\n+\n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         String alias \u003d args[++i];\n         command \u003d new CreateCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n-          return -1;\n+          return 0;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String alias \u003d args[++i];\n         command \u003d new DeleteCommand(alias);\n         if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n-          return -1;\n+          return 0;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n       } else if (args[i].equals(\"-provider\")) {\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n             args[++i]);\n       } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n         interactive \u003d true;\n       } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n       } else if (args[i].equals(\"-help\")) {\n         printCredShellUsage();\n-        return -1;\n+        return 0;\n       } else {\n         printCredShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n-        return -1;\n+        return 1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int init(String[] args) throws IOException {\n    // no args should print the help message\n    if (0 \u003d\u003d args.length) {\n      printCredShellUsage();\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return 0;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"-provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n        interactive \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printCredShellUsage();\n        return 0;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
          "extendedDetails": {}
        }
      ]
    },
    "5918e991512658aa9d2af45a15862a8d405590fb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10900. CredentialShell args should use single-dash style. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 10:43 AM",
      "commitName": "5918e991512658aa9d2af45a15862a8d405590fb",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "17/07/14 11:09 AM",
      "commitNameOld": "1e7ce76bbab08a153b285739de51c3de924e3580",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 14.98,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private int init(String[] args) throws IOException {\n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         String alias \u003d args[++i];\n         command \u003d new CreateCommand(alias);\n-        if (alias.equals(\"--help\")) {\n+        if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String alias \u003d args[++i];\n         command \u003d new DeleteCommand(alias);\n-        if (alias.equals(\"--help\")) {\n+        if (alias.equals(\"-help\")) {\n           printCredShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n-      } else if (args[i].equals(\"--provider\")) {\n+      } else if (args[i].equals(\"-provider\")) {\n         userSuppliedProvider \u003d true;\n         getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n             args[++i]);\n-      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n+      } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n         interactive \u003d true;\n-      } else if (args[i].equals(\"-v\") || (args[i].equals(\"--value\"))) {\n+      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n         value \u003d args[++i];\n-      } else if (args[i].equals(\"--help\")) {\n+      } else if (args[i].equals(\"-help\")) {\n         printCredShellUsage();\n         return -1;\n       } else {\n         printCredShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return -1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"-help\")) {\n          printCredShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"-provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-i\") || (args[i].equals(\"-interactive\"))) {\n        interactive \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"-value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"-help\")) {\n        printCredShellUsage();\n        return -1;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java",
      "extendedDetails": {}
    },
    "c79728478caadd8374bce2bc3f466db1da1e3ad1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10607. Create API to separate credential/password storage from\napplications. (Larry McCay via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 8:45 AM",
      "commitName": "c79728478caadd8374bce2bc3f466db1da1e3ad1",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,37 @@\n+  private int init(String[] args) throws IOException {\n+    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n+      if (args[i].equals(\"create\")) {\n+        String alias \u003d args[++i];\n+        command \u003d new CreateCommand(alias);\n+        if (alias.equals(\"--help\")) {\n+          printCredShellUsage();\n+          return -1;\n+        }\n+      } else if (args[i].equals(\"delete\")) {\n+        String alias \u003d args[++i];\n+        command \u003d new DeleteCommand(alias);\n+        if (alias.equals(\"--help\")) {\n+          printCredShellUsage();\n+          return -1;\n+        }\n+      } else if (args[i].equals(\"list\")) {\n+        command \u003d new ListCommand();\n+      } else if (args[i].equals(\"--provider\")) {\n+        userSuppliedProvider \u003d true;\n+        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n+            args[++i]);\n+      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n+        interactive \u003d true;\n+      } else if (args[i].equals(\"-v\") || (args[i].equals(\"--value\"))) {\n+        value \u003d args[++i];\n+      } else if (args[i].equals(\"--help\")) {\n+        printCredShellUsage();\n+        return -1;\n+      } else {\n+        printCredShellUsage();\n+        ToolRunner.printGenericCommandUsage(System.err);\n+        return -1;\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String alias \u003d args[++i];\n        command \u003d new CreateCommand(alias);\n        if (alias.equals(\"--help\")) {\n          printCredShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String alias \u003d args[++i];\n        command \u003d new DeleteCommand(alias);\n        if (alias.equals(\"--help\")) {\n          printCredShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"--provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH, \n            args[++i]);\n      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n        interactive \u003d true;\n      } else if (args[i].equals(\"-v\") || (args[i].equals(\"--value\"))) {\n        value \u003d args[++i];\n      } else if (args[i].equals(\"--help\")) {\n        printCredShellUsage();\n        return -1;\n      } else {\n        printCredShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/CredentialShell.java"
    }
  }
}