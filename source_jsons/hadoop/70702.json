{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "storeEmptyFolder",
  "functionId": "storeEmptyFolder___key-String__permissionStatus-PermissionStatus",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 1743,
  "functionEndLine": 1788,
  "numCommitsSeen": 53,
  "timeTaken": 3199,
  "changeHistory": [
    "bb8ad096e785f7127a5c0de15167255d9b119578",
    "990aa34de23c625163745ebc338483065d955bbe",
    "1f7ecb0c84042783f9fcf3f77d7d889dc58c9ead",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "bb8ad096e785f7127a5c0de15167255d9b119578": "Ybodychange",
    "990aa34de23c625163745ebc338483065d955bbe": "Ybodychange",
    "1f7ecb0c84042783f9fcf3f77d7d889dc58c9ead": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb8ad096e785f7127a5c0de15167255d9b119578": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16157. [Clean-up] Remove NULL check before instanceof in AzureNativeFileSystemStore\n(Contributed by Shweta Yakkali via Daniel Templeton)\n\nChange-Id: I6269ae66378e46eed440a76f847ae1af1fa95450\n",
      "commitDate": "09/03/19 9:55 AM",
      "commitName": "bb8ad096e785f7127a5c0de15167255d9b119578",
      "commitAuthor": "Shweta Yakkali",
      "commitDateOld": "21/02/19 6:08 AM",
      "commitNameOld": "a868f59d523e1391b719507a76c1aa9fd58278b5",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 16.16,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n       throws AzureException {\n \n     if (null \u003d\u003d storageInteractionLayer) {\n       final String errMsg \u003d String.format(\n           \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n           sessionUri);\n       throw new AssertionError(errMsg);\n     }\n \n     // Check if there is an authenticated account associated with the file\n     // this instance of the WASB file system. If not the file system has not\n     // been authenticated and all access is anonymous.\n     if (!isAuthenticatedAccess()) {\n       // Preemptively raise an exception indicating no uploads are\n       // allowed to anonymous accounts.\n       throw new AzureException(\n           \"Uploads to to public accounts using anonymous access is prohibited.\");\n     }\n \n     try {\n       checkContainer(ContainerAccessType.PureWrite);\n \n       CloudBlobWrapper blob \u003d getBlobReference(key);\n       storePermissionStatus(blob, permissionStatus);\n       storeFolderAttribute(blob);\n       openOutputStream(blob).close();\n     } catch (StorageException e) {\n       // Caught exception while attempting upload. Re-throw as an Azure\n       // storage exception.\n       throw new AzureException(e);\n     } catch (URISyntaxException e) {\n       throw new AzureException(e);\n     } catch (IOException e) {\n       Throwable t \u003d e.getCause();\n-      if (t !\u003d null \u0026\u0026 t instanceof StorageException) {\n+      if (t instanceof StorageException) {\n         StorageException se \u003d (StorageException) t;\n         // If we got this exception, the blob should have already been created\n         if (!\"LeaseIdMissing\".equals(se.getErrorCode())) {\n           throw new AzureException(e);\n         }\n       } else {\n         throw new AzureException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n      throws AzureException {\n\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeFolderAttribute(blob);\n      openOutputStream(blob).close();\n    } catch (StorageException e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    } catch (URISyntaxException e) {\n      throw new AzureException(e);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if (t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        // If we got this exception, the blob should have already been created\n        if (!\"LeaseIdMissing\".equals(se.getErrorCode())) {\n          throw new AzureException(e);\n        }\n      } else {\n        throw new AzureException(e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "990aa34de23c625163745ebc338483065d955bbe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14609. NPE in AzureNativeFileSystemStore.checkContainer() if StorageException lacks an error code. Contributed by Steve Loughran\n",
      "commitDate": "28/06/17 2:18 PM",
      "commitName": "990aa34de23c625163745ebc338483065d955bbe",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "27/06/17 5:32 PM",
      "commitNameOld": "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n       throws AzureException {\n \n     if (null \u003d\u003d storageInteractionLayer) {\n       final String errMsg \u003d String.format(\n           \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n           sessionUri);\n       throw new AssertionError(errMsg);\n     }\n \n     // Check if there is an authenticated account associated with the file\n     // this instance of the WASB file system. If not the file system has not\n     // been authenticated and all access is anonymous.\n     if (!isAuthenticatedAccess()) {\n       // Preemptively raise an exception indicating no uploads are\n       // allowed to anonymous accounts.\n       throw new AzureException(\n           \"Uploads to to public accounts using anonymous access is prohibited.\");\n     }\n \n     try {\n       checkContainer(ContainerAccessType.PureWrite);\n \n       CloudBlobWrapper blob \u003d getBlobReference(key);\n       storePermissionStatus(blob, permissionStatus);\n       storeFolderAttribute(blob);\n       openOutputStream(blob).close();\n     } catch (StorageException e) {\n       // Caught exception while attempting upload. Re-throw as an Azure\n       // storage exception.\n       throw new AzureException(e);\n     } catch (URISyntaxException e) {\n       throw new AzureException(e);\n     } catch (IOException e) {\n       Throwable t \u003d e.getCause();\n       if (t !\u003d null \u0026\u0026 t instanceof StorageException) {\n         StorageException se \u003d (StorageException) t;\n         // If we got this exception, the blob should have already been created\n-        if (!se.getErrorCode().equals(\"LeaseIdMissing\")) {\n+        if (!\"LeaseIdMissing\".equals(se.getErrorCode())) {\n           throw new AzureException(e);\n         }\n       } else {\n         throw new AzureException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n      throws AzureException {\n\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeFolderAttribute(blob);\n      openOutputStream(blob).close();\n    } catch (StorageException e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    } catch (URISyntaxException e) {\n      throw new AzureException(e);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if (t !\u003d null \u0026\u0026 t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        // If we got this exception, the blob should have already been created\n        if (!\"LeaseIdMissing\".equals(se.getErrorCode())) {\n          throw new AzureException(e);\n        }\n      } else {\n        throw new AzureException(e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "1f7ecb0c84042783f9fcf3f77d7d889dc58c9ead": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11685. StorageException complaining \" no lease ID\" during HBase distributed log splitting. Contributed by Duo Xu.\n",
      "commitDate": "27/10/15 10:56 PM",
      "commitName": "1f7ecb0c84042783f9fcf3f77d7d889dc58c9ead",
      "commitAuthor": "cnauroth",
      "commitDateOld": "22/10/15 12:21 PM",
      "commitNameOld": "47641fcbc9c41f4a338d8899501e4a310d2e81ad",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 5.44,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,46 @@\n   public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n       throws AzureException {\n \n     if (null \u003d\u003d storageInteractionLayer) {\n       final String errMsg \u003d String.format(\n           \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n           sessionUri);\n       throw new AssertionError(errMsg);\n     }\n \n     // Check if there is an authenticated account associated with the file\n     // this instance of the WASB file system. If not the file system has not\n     // been authenticated and all access is anonymous.\n     if (!isAuthenticatedAccess()) {\n       // Preemptively raise an exception indicating no uploads are\n       // allowed to anonymous accounts.\n       throw new AzureException(\n           \"Uploads to to public accounts using anonymous access is prohibited.\");\n     }\n \n     try {\n       checkContainer(ContainerAccessType.PureWrite);\n \n       CloudBlobWrapper blob \u003d getBlobReference(key);\n       storePermissionStatus(blob, permissionStatus);\n       storeFolderAttribute(blob);\n       openOutputStream(blob).close();\n-    } catch (Exception e) {\n+    } catch (StorageException e) {\n       // Caught exception while attempting upload. Re-throw as an Azure\n       // storage exception.\n       throw new AzureException(e);\n+    } catch (URISyntaxException e) {\n+      throw new AzureException(e);\n+    } catch (IOException e) {\n+      Throwable t \u003d e.getCause();\n+      if (t !\u003d null \u0026\u0026 t instanceof StorageException) {\n+        StorageException se \u003d (StorageException) t;\n+        // If we got this exception, the blob should have already been created\n+        if (!se.getErrorCode().equals(\"LeaseIdMissing\")) {\n+          throw new AzureException(e);\n+        }\n+      } else {\n+        throw new AzureException(e);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n      throws AzureException {\n\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeFolderAttribute(blob);\n      openOutputStream(blob).close();\n    } catch (StorageException e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    } catch (URISyntaxException e) {\n      throw new AzureException(e);\n    } catch (IOException e) {\n      Throwable t \u003d e.getCause();\n      if (t !\u003d null \u0026\u0026 t instanceof StorageException) {\n        StorageException se \u003d (StorageException) t;\n        // If we got this exception, the blob should have already been created\n        if (!se.getErrorCode().equals(\"LeaseIdMissing\")) {\n          throw new AzureException(e);\n        }\n      } else {\n        throw new AzureException(e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "24/06/14 1:52 PM",
      "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 106.02,
      "commitsBetweenForRepo": 1005,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,33 @@\n   public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n       throws AzureException {\n \n     if (null \u003d\u003d storageInteractionLayer) {\n       final String errMsg \u003d String.format(\n           \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n           sessionUri);\n       throw new AssertionError(errMsg);\n     }\n \n     // Check if there is an authenticated account associated with the file\n     // this instance of the WASB file system. If not the file system has not\n     // been authenticated and all access is anonymous.\n     if (!isAuthenticatedAccess()) {\n       // Preemptively raise an exception indicating no uploads are\n       // allowed to anonymous accounts.\n       throw new AzureException(\n           \"Uploads to to public accounts using anonymous access is prohibited.\");\n     }\n \n     try {\n       checkContainer(ContainerAccessType.PureWrite);\n \n-      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n+      CloudBlobWrapper blob \u003d getBlobReference(key);\n       storePermissionStatus(blob, permissionStatus);\n       storeFolderAttribute(blob);\n-      blob.upload(new ByteArrayInputStream(new byte[0]),\n-          getInstrumentedContext());\n+      openOutputStream(blob).close();\n     } catch (Exception e) {\n       // Caught exception while attempting upload. Re-throw as an Azure\n       // storage exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n      throws AzureException {\n\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeFolderAttribute(blob);\n      openOutputStream(blob).close();\n    } catch (Exception e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,34 @@\n+  public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n+      throws AzureException {\n+\n+    if (null \u003d\u003d storageInteractionLayer) {\n+      final String errMsg \u003d String.format(\n+          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n+          sessionUri);\n+      throw new AssertionError(errMsg);\n+    }\n+\n+    // Check if there is an authenticated account associated with the file\n+    // this instance of the WASB file system. If not the file system has not\n+    // been authenticated and all access is anonymous.\n+    if (!isAuthenticatedAccess()) {\n+      // Preemptively raise an exception indicating no uploads are\n+      // allowed to anonymous accounts.\n+      throw new AzureException(\n+          \"Uploads to to public accounts using anonymous access is prohibited.\");\n+    }\n+\n+    try {\n+      checkContainer(ContainerAccessType.PureWrite);\n+\n+      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n+      storePermissionStatus(blob, permissionStatus);\n+      storeFolderAttribute(blob);\n+      blob.upload(new ByteArrayInputStream(new byte[0]),\n+          getInstrumentedContext());\n+    } catch (Exception e) {\n+      // Caught exception while attempting upload. Re-throw as an Azure\n+      // storage exception.\n+      throw new AzureException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void storeEmptyFolder(String key, PermissionStatus permissionStatus)\n      throws AzureException {\n\n    if (null \u003d\u003d storageInteractionLayer) {\n      final String errMsg \u003d String.format(\n          \"Storage session expected for URI \u0027%s\u0027 but does not exist.\",\n          sessionUri);\n      throw new AssertionError(errMsg);\n    }\n\n    // Check if there is an authenticated account associated with the file\n    // this instance of the WASB file system. If not the file system has not\n    // been authenticated and all access is anonymous.\n    if (!isAuthenticatedAccess()) {\n      // Preemptively raise an exception indicating no uploads are\n      // allowed to anonymous accounts.\n      throw new AzureException(\n          \"Uploads to to public accounts using anonymous access is prohibited.\");\n    }\n\n    try {\n      checkContainer(ContainerAccessType.PureWrite);\n\n      CloudBlockBlobWrapper blob \u003d getBlobReference(key);\n      storePermissionStatus(blob, permissionStatus);\n      storeFolderAttribute(blob);\n      blob.upload(new ByteArrayInputStream(new byte[0]),\n          getInstrumentedContext());\n    } catch (Exception e) {\n      // Caught exception while attempting upload. Re-throw as an Azure\n      // storage exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}