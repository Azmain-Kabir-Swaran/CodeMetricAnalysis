{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "getUGIFromTicketCache",
  "functionId": "getUGIFromTicketCache___ticketCache-String__user-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 608,
  "functionEndLine": 617,
  "numCommitsSeen": 104,
  "timeTaken": 3812,
  "changeHistory": [
    "59cf7588779145ad5850ad63426743dfe03d8347",
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba",
    "2e853be6577a5b98fd860e6d64f89ca6d160514a",
    "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
    "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
    "fb4a6ac9e995c79475af99aea044e0fc0558e9b6"
  ],
  "changeHistoryShort": {
    "59cf7588779145ad5850ad63426743dfe03d8347": "Ybodychange",
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba": "Ybodychange",
    "2e853be6577a5b98fd860e6d64f89ca6d160514a": "Ybodychange",
    "228742acad6b56c0e4fafe285099fcdfa5b6e47f": "Ybodychange",
    "86ce5f6c917131e79174f8c7ac55d6cb1abad09d": "Ybodychange",
    "fb4a6ac9e995c79475af99aea044e0fc0558e9b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "59cf7588779145ad5850ad63426743dfe03d8347": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
      "commitDate": "23/02/18 11:10 AM",
      "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/12/17 11:17 PM",
      "commitNameOld": "d31c9d8c495794a803fb20729b5ed6b374e23eb4",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 57.5,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,10 @@\n   public static UserGroupInformation getUGIFromTicketCache(\n             String ticketCache, String user) throws IOException {\n     if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n       return getBestUGI(null, user);\n     }\n-    try {\n-      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n-      if (IBM_JAVA) {\n-        krbOptions.put(\"useDefaultCcache\", \"true\");\n-        // The first value searched when \"useDefaultCcache\" is used.\n-        System.setProperty(\"KRB5CCNAME\", ticketCache);\n-      } else {\n-        krbOptions.put(\"doNotPrompt\", \"true\");\n-        krbOptions.put(\"useTicketCache\", \"true\");\n-        krbOptions.put(\"useKeyTab\", \"false\");\n-        krbOptions.put(\"ticketCache\", ticketCache);\n-      }\n-      krbOptions.put(\"renewTGT\", \"false\");\n-      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n-      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n-          KerberosUtil.getKrb5LoginModuleName(),\n-          LoginModuleControlFlag.REQUIRED,\n-          krbOptions);\n-      DynamicConfiguration dynConf \u003d\n-          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n-      LoginContext login \u003d newLoginContext(\n-          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n-      login.login();\n-\n-      Subject loginSubject \u003d login.getSubject();\n-      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n-      if (loginPrincipals.isEmpty()) {\n-        throw new RuntimeException(\"No login principals found!\");\n-      }\n-      if (loginPrincipals.size() !\u003d 1) {\n-        LOG.warn(\"found more than one principal in the ticket cache file \" +\n-          ticketCache);\n-      }\n-      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n-          AuthenticationMethod.KERBEROS, login);\n-      loginSubject.getPrincipals().add(ugiUser);\n-      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject, false);\n-      ugi.setLogin(login);\n-      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n-      return ugi;\n-    } catch (LoginException le) {\n-      KerberosAuthException kae \u003d\n-          new KerberosAuthException(FAILURE_TO_LOGIN, le);\n-      kae.setUser(user);\n-      kae.setTicketCacheFile(ticketCache);\n-      throw kae;\n-    }\n+    LoginParams params \u003d new LoginParams();\n+    params.put(LoginParam.PRINCIPAL, user);\n+    params.put(LoginParam.CCACHE, ticketCache);\n+    return doSubjectLogin(null, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGIFromTicketCache(\n            String ticketCache, String user) throws IOException {\n    if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n      return getBestUGI(null, user);\n    }\n    LoginParams params \u003d new LoginParams();\n    params.put(LoginParam.PRINCIPAL, user);\n    params.put(LoginParam.CCACHE, ticketCache);\n    return doSubjectLogin(null, params);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13805. UGI.getCurrentUser() fails if user does not have a keytab associated. Contributed by Xiao Chen, Wei-Chiu Chuang, Yongjun Zhang.\n",
      "commitDate": "17/02/17 9:18 AM",
      "commitName": "4c26c241ad2b907dc02cecefa9846cbe2b0465ba",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "25/01/17 1:29 PM",
      "commitNameOld": "7fc3e68a876132563aa2321519fc6941e37b2cae",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 22.83,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public static UserGroupInformation getUGIFromTicketCache(\n             String ticketCache, String user) throws IOException {\n     if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n       return getBestUGI(null, user);\n     }\n     try {\n       Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n       if (IBM_JAVA) {\n         krbOptions.put(\"useDefaultCcache\", \"true\");\n         // The first value searched when \"useDefaultCcache\" is used.\n         System.setProperty(\"KRB5CCNAME\", ticketCache);\n       } else {\n         krbOptions.put(\"doNotPrompt\", \"true\");\n         krbOptions.put(\"useTicketCache\", \"true\");\n         krbOptions.put(\"useKeyTab\", \"false\");\n         krbOptions.put(\"ticketCache\", ticketCache);\n       }\n       krbOptions.put(\"renewTGT\", \"false\");\n       krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n       AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n           KerberosUtil.getKrb5LoginModuleName(),\n           LoginModuleControlFlag.REQUIRED,\n           krbOptions);\n       DynamicConfiguration dynConf \u003d\n           new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n       LoginContext login \u003d newLoginContext(\n           HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n       login.login();\n \n       Subject loginSubject \u003d login.getSubject();\n       Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n       if (loginPrincipals.isEmpty()) {\n         throw new RuntimeException(\"No login principals found!\");\n       }\n       if (loginPrincipals.size() !\u003d 1) {\n         LOG.warn(\"found more than one principal in the ticket cache file \" +\n           ticketCache);\n       }\n       User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n           AuthenticationMethod.KERBEROS, login);\n       loginSubject.getPrincipals().add(ugiUser);\n-      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n+      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject, false);\n       ugi.setLogin(login);\n       ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n       return ugi;\n     } catch (LoginException le) {\n       KerberosAuthException kae \u003d\n           new KerberosAuthException(FAILURE_TO_LOGIN, le);\n       kae.setUser(user);\n       kae.setTicketCacheFile(ticketCache);\n       throw kae;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGIFromTicketCache(\n            String ticketCache, String user) throws IOException {\n    if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n      return getBestUGI(null, user);\n    }\n    try {\n      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n      if (IBM_JAVA) {\n        krbOptions.put(\"useDefaultCcache\", \"true\");\n        // The first value searched when \"useDefaultCcache\" is used.\n        System.setProperty(\"KRB5CCNAME\", ticketCache);\n      } else {\n        krbOptions.put(\"doNotPrompt\", \"true\");\n        krbOptions.put(\"useTicketCache\", \"true\");\n        krbOptions.put(\"useKeyTab\", \"false\");\n        krbOptions.put(\"ticketCache\", ticketCache);\n      }\n      krbOptions.put(\"renewTGT\", \"false\");\n      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n          KerberosUtil.getKrb5LoginModuleName(),\n          LoginModuleControlFlag.REQUIRED,\n          krbOptions);\n      DynamicConfiguration dynConf \u003d\n          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n      LoginContext login \u003d newLoginContext(\n          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n      login.login();\n\n      Subject loginSubject \u003d login.getSubject();\n      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n      if (loginPrincipals.isEmpty()) {\n        throw new RuntimeException(\"No login principals found!\");\n      }\n      if (loginPrincipals.size() !\u003d 1) {\n        LOG.warn(\"found more than one principal in the ticket cache file \" +\n          ticketCache);\n      }\n      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n          AuthenticationMethod.KERBEROS, login);\n      loginSubject.getPrincipals().add(ugiUser);\n      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject, false);\n      ugi.setLogin(login);\n      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n      return ugi;\n    } catch (LoginException le) {\n      KerberosAuthException kae \u003d\n          new KerberosAuthException(FAILURE_TO_LOGIN, le);\n      kae.setUser(user);\n      kae.setTicketCacheFile(ticketCache);\n      throw kae;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "2e853be6577a5b98fd860e6d64f89ca6d160514a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13627. Have an explicit KerberosAuthException for UGI to throw, text from public constants. Contributed by Xiao Chen.\n",
      "commitDate": "07/10/16 1:46 PM",
      "commitName": "2e853be6577a5b98fd860e6d64f89ca6d160514a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "05/10/16 5:36 PM",
      "commitNameOld": "c5ca2169151a5eec57152775789b6f53664e102c",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,53 @@\n   public static UserGroupInformation getUGIFromTicketCache(\n             String ticketCache, String user) throws IOException {\n     if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n       return getBestUGI(null, user);\n     }\n     try {\n       Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n       if (IBM_JAVA) {\n         krbOptions.put(\"useDefaultCcache\", \"true\");\n         // The first value searched when \"useDefaultCcache\" is used.\n         System.setProperty(\"KRB5CCNAME\", ticketCache);\n       } else {\n         krbOptions.put(\"doNotPrompt\", \"true\");\n         krbOptions.put(\"useTicketCache\", \"true\");\n         krbOptions.put(\"useKeyTab\", \"false\");\n         krbOptions.put(\"ticketCache\", ticketCache);\n       }\n       krbOptions.put(\"renewTGT\", \"false\");\n       krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n       AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n           KerberosUtil.getKrb5LoginModuleName(),\n           LoginModuleControlFlag.REQUIRED,\n           krbOptions);\n       DynamicConfiguration dynConf \u003d\n           new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n       LoginContext login \u003d newLoginContext(\n           HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n       login.login();\n \n       Subject loginSubject \u003d login.getSubject();\n       Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n       if (loginPrincipals.isEmpty()) {\n         throw new RuntimeException(\"No login principals found!\");\n       }\n       if (loginPrincipals.size() !\u003d 1) {\n         LOG.warn(\"found more than one principal in the ticket cache file \" +\n           ticketCache);\n       }\n       User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n           AuthenticationMethod.KERBEROS, login);\n       loginSubject.getPrincipals().add(ugiUser);\n       UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n       ugi.setLogin(login);\n       ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n       return ugi;\n     } catch (LoginException le) {\n-      throw new IOException(\"failure to login using ticket cache file \" +\n-          ticketCache, le);\n+      KerberosAuthException kae \u003d\n+          new KerberosAuthException(FAILURE_TO_LOGIN, le);\n+      kae.setUser(user);\n+      kae.setTicketCacheFile(ticketCache);\n+      throw kae;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGIFromTicketCache(\n            String ticketCache, String user) throws IOException {\n    if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n      return getBestUGI(null, user);\n    }\n    try {\n      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n      if (IBM_JAVA) {\n        krbOptions.put(\"useDefaultCcache\", \"true\");\n        // The first value searched when \"useDefaultCcache\" is used.\n        System.setProperty(\"KRB5CCNAME\", ticketCache);\n      } else {\n        krbOptions.put(\"doNotPrompt\", \"true\");\n        krbOptions.put(\"useTicketCache\", \"true\");\n        krbOptions.put(\"useKeyTab\", \"false\");\n        krbOptions.put(\"ticketCache\", ticketCache);\n      }\n      krbOptions.put(\"renewTGT\", \"false\");\n      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n          KerberosUtil.getKrb5LoginModuleName(),\n          LoginModuleControlFlag.REQUIRED,\n          krbOptions);\n      DynamicConfiguration dynConf \u003d\n          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n      LoginContext login \u003d newLoginContext(\n          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n      login.login();\n\n      Subject loginSubject \u003d login.getSubject();\n      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n      if (loginPrincipals.isEmpty()) {\n        throw new RuntimeException(\"No login principals found!\");\n      }\n      if (loginPrincipals.size() !\u003d 1) {\n        LOG.warn(\"found more than one principal in the ticket cache file \" +\n          ticketCache);\n      }\n      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n          AuthenticationMethod.KERBEROS, login);\n      loginSubject.getPrincipals().add(ugiUser);\n      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n      ugi.setLogin(login);\n      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n      return ugi;\n    } catch (LoginException le) {\n      KerberosAuthException kae \u003d\n          new KerberosAuthException(FAILURE_TO_LOGIN, le);\n      kae.setUser(user);\n      kae.setTicketCacheFile(ticketCache);\n      throw kae;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "228742acad6b56c0e4fafe285099fcdfa5b6e47f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9446. Support Kerberos SPNEGO for IBM JDK. (Yu Gao via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1513687 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/13 4:12 PM",
      "commitName": "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "19/07/13 6:37 AM",
      "commitNameOld": "aba335279a55573dd7d6f37d032794a2b190fe25",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 25.4,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,50 @@\n   public static UserGroupInformation getUGIFromTicketCache(\n             String ticketCache, String user) throws IOException {\n     if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n       return getBestUGI(null, user);\n     }\n     try {\n       Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n-      krbOptions.put(\"doNotPrompt\", \"true\");\n-      krbOptions.put(\"useTicketCache\", \"true\");\n-      krbOptions.put(\"useKeyTab\", \"false\");\n+      if (IBM_JAVA) {\n+        krbOptions.put(\"useDefaultCcache\", \"true\");\n+        // The first value searched when \"useDefaultCcache\" is used.\n+        System.setProperty(\"KRB5CCNAME\", ticketCache);\n+      } else {\n+        krbOptions.put(\"doNotPrompt\", \"true\");\n+        krbOptions.put(\"useTicketCache\", \"true\");\n+        krbOptions.put(\"useKeyTab\", \"false\");\n+        krbOptions.put(\"ticketCache\", ticketCache);\n+      }\n       krbOptions.put(\"renewTGT\", \"false\");\n-      krbOptions.put(\"ticketCache\", ticketCache);\n       krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n       AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n           KerberosUtil.getKrb5LoginModuleName(),\n           LoginModuleControlFlag.REQUIRED,\n           krbOptions);\n       DynamicConfiguration dynConf \u003d\n           new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n       LoginContext login \u003d newLoginContext(\n           HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n       login.login();\n \n       Subject loginSubject \u003d login.getSubject();\n       Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n       if (loginPrincipals.isEmpty()) {\n         throw new RuntimeException(\"No login principals found!\");\n       }\n       if (loginPrincipals.size() !\u003d 1) {\n         LOG.warn(\"found more than one principal in the ticket cache file \" +\n           ticketCache);\n       }\n       User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n           AuthenticationMethod.KERBEROS, login);\n       loginSubject.getPrincipals().add(ugiUser);\n       UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n       ugi.setLogin(login);\n       ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n       return ugi;\n     } catch (LoginException le) {\n       throw new IOException(\"failure to login using ticket cache file \" +\n           ticketCache, le);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGIFromTicketCache(\n            String ticketCache, String user) throws IOException {\n    if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n      return getBestUGI(null, user);\n    }\n    try {\n      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n      if (IBM_JAVA) {\n        krbOptions.put(\"useDefaultCcache\", \"true\");\n        // The first value searched when \"useDefaultCcache\" is used.\n        System.setProperty(\"KRB5CCNAME\", ticketCache);\n      } else {\n        krbOptions.put(\"doNotPrompt\", \"true\");\n        krbOptions.put(\"useTicketCache\", \"true\");\n        krbOptions.put(\"useKeyTab\", \"false\");\n        krbOptions.put(\"ticketCache\", ticketCache);\n      }\n      krbOptions.put(\"renewTGT\", \"false\");\n      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n          KerberosUtil.getKrb5LoginModuleName(),\n          LoginModuleControlFlag.REQUIRED,\n          krbOptions);\n      DynamicConfiguration dynConf \u003d\n          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n      LoginContext login \u003d newLoginContext(\n          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n      login.login();\n\n      Subject loginSubject \u003d login.getSubject();\n      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n      if (loginPrincipals.isEmpty()) {\n        throw new RuntimeException(\"No login principals found!\");\n      }\n      if (loginPrincipals.size() !\u003d 1) {\n        LOG.warn(\"found more than one principal in the ticket cache file \" +\n          ticketCache);\n      }\n      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n          AuthenticationMethod.KERBEROS, login);\n      loginSubject.getPrincipals().add(ugiUser);\n      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n      ugi.setLogin(login);\n      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n      return ugi;\n    } catch (LoginException le) {\n      throw new IOException(\"failure to login using ticket cache file \" +\n          ticketCache, le);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "86ce5f6c917131e79174f8c7ac55d6cb1abad09d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9035. Generalize setup of LoginContext (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1410018 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/11/12 1:14 PM",
      "commitName": "86ce5f6c917131e79174f8c7ac55d6cb1abad09d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "12/11/12 2:13 PM",
      "commitNameOld": "4755ef989ac771ad3c2c40f9914455725c931447",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public static UserGroupInformation getUGIFromTicketCache(\n             String ticketCache, String user) throws IOException {\n-    if (!isSecurityEnabled()) {\n+    if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n       return getBestUGI(null, user);\n     }\n     try {\n       Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n       krbOptions.put(\"doNotPrompt\", \"true\");\n       krbOptions.put(\"useTicketCache\", \"true\");\n       krbOptions.put(\"useKeyTab\", \"false\");\n       krbOptions.put(\"renewTGT\", \"false\");\n       krbOptions.put(\"ticketCache\", ticketCache);\n       krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n       AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n           KerberosUtil.getKrb5LoginModuleName(),\n           LoginModuleControlFlag.REQUIRED,\n           krbOptions);\n       DynamicConfiguration dynConf \u003d\n           new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n       LoginContext login \u003d newLoginContext(\n           HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n       login.login();\n \n       Subject loginSubject \u003d login.getSubject();\n       Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n       if (loginPrincipals.isEmpty()) {\n         throw new RuntimeException(\"No login principals found!\");\n       }\n       if (loginPrincipals.size() !\u003d 1) {\n         LOG.warn(\"found more than one principal in the ticket cache file \" +\n           ticketCache);\n       }\n       User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n           AuthenticationMethod.KERBEROS, login);\n       loginSubject.getPrincipals().add(ugiUser);\n       UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n       ugi.setLogin(login);\n       ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n       return ugi;\n     } catch (LoginException le) {\n       throw new IOException(\"failure to login using ticket cache file \" +\n           ticketCache, le);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGIFromTicketCache(\n            String ticketCache, String user) throws IOException {\n    if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) {\n      return getBestUGI(null, user);\n    }\n    try {\n      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n      krbOptions.put(\"doNotPrompt\", \"true\");\n      krbOptions.put(\"useTicketCache\", \"true\");\n      krbOptions.put(\"useKeyTab\", \"false\");\n      krbOptions.put(\"renewTGT\", \"false\");\n      krbOptions.put(\"ticketCache\", ticketCache);\n      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n          KerberosUtil.getKrb5LoginModuleName(),\n          LoginModuleControlFlag.REQUIRED,\n          krbOptions);\n      DynamicConfiguration dynConf \u003d\n          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n      LoginContext login \u003d newLoginContext(\n          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n      login.login();\n\n      Subject loginSubject \u003d login.getSubject();\n      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n      if (loginPrincipals.isEmpty()) {\n        throw new RuntimeException(\"No login principals found!\");\n      }\n      if (loginPrincipals.size() !\u003d 1) {\n        LOG.warn(\"found more than one principal in the ticket cache file \" +\n          ticketCache);\n      }\n      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n          AuthenticationMethod.KERBEROS, login);\n      loginSubject.getPrincipals().add(ugiUser);\n      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n      ugi.setLogin(login);\n      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n      return ugi;\n    } catch (LoginException le) {\n      throw new IOException(\"failure to login using ticket cache file \" +\n          ticketCache, le);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "fb4a6ac9e995c79475af99aea044e0fc0558e9b6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3568. fuse_dfs: add support for security. Contributed by Colin McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359824 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 11:28 AM",
      "commitName": "fb4a6ac9e995c79475af99aea044e0fc0558e9b6",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,44 @@\n+  public static UserGroupInformation getUGIFromTicketCache(\n+            String ticketCache, String user) throws IOException {\n+    if (!isSecurityEnabled()) {\n+      return getBestUGI(null, user);\n+    }\n+    try {\n+      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n+      krbOptions.put(\"doNotPrompt\", \"true\");\n+      krbOptions.put(\"useTicketCache\", \"true\");\n+      krbOptions.put(\"useKeyTab\", \"false\");\n+      krbOptions.put(\"renewTGT\", \"false\");\n+      krbOptions.put(\"ticketCache\", ticketCache);\n+      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n+      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n+          KerberosUtil.getKrb5LoginModuleName(),\n+          LoginModuleControlFlag.REQUIRED,\n+          krbOptions);\n+      DynamicConfiguration dynConf \u003d\n+          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n+      LoginContext login \u003d newLoginContext(\n+          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n+      login.login();\n+\n+      Subject loginSubject \u003d login.getSubject();\n+      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n+      if (loginPrincipals.isEmpty()) {\n+        throw new RuntimeException(\"No login principals found!\");\n+      }\n+      if (loginPrincipals.size() !\u003d 1) {\n+        LOG.warn(\"found more than one principal in the ticket cache file \" +\n+          ticketCache);\n+      }\n+      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n+          AuthenticationMethod.KERBEROS, login);\n+      loginSubject.getPrincipals().add(ugiUser);\n+      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n+      ugi.setLogin(login);\n+      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n+      return ugi;\n+    } catch (LoginException le) {\n+      throw new IOException(\"failure to login using ticket cache file \" +\n+          ticketCache, le);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation getUGIFromTicketCache(\n            String ticketCache, String user) throws IOException {\n    if (!isSecurityEnabled()) {\n      return getBestUGI(null, user);\n    }\n    try {\n      Map\u003cString,String\u003e krbOptions \u003d new HashMap\u003cString,String\u003e();\n      krbOptions.put(\"doNotPrompt\", \"true\");\n      krbOptions.put(\"useTicketCache\", \"true\");\n      krbOptions.put(\"useKeyTab\", \"false\");\n      krbOptions.put(\"renewTGT\", \"false\");\n      krbOptions.put(\"ticketCache\", ticketCache);\n      krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS);\n      AppConfigurationEntry ace \u003d new AppConfigurationEntry(\n          KerberosUtil.getKrb5LoginModuleName(),\n          LoginModuleControlFlag.REQUIRED,\n          krbOptions);\n      DynamicConfiguration dynConf \u003d\n          new DynamicConfiguration(new AppConfigurationEntry[]{ ace });\n      LoginContext login \u003d newLoginContext(\n          HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf);\n      login.login();\n\n      Subject loginSubject \u003d login.getSubject();\n      Set\u003cPrincipal\u003e loginPrincipals \u003d loginSubject.getPrincipals();\n      if (loginPrincipals.isEmpty()) {\n        throw new RuntimeException(\"No login principals found!\");\n      }\n      if (loginPrincipals.size() !\u003d 1) {\n        LOG.warn(\"found more than one principal in the ticket cache file \" +\n          ticketCache);\n      }\n      User ugiUser \u003d new User(loginPrincipals.iterator().next().getName(),\n          AuthenticationMethod.KERBEROS, login);\n      loginSubject.getPrincipals().add(ugiUser);\n      UserGroupInformation ugi \u003d new UserGroupInformation(loginSubject);\n      ugi.setLogin(login);\n      ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS);\n      return ugi;\n    } catch (LoginException le) {\n      throw new IOException(\"failure to login using ticket cache file \" +\n          ticketCache, le);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}