{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAclOp.java",
  "functionName": "unprotectedRemoveAcl",
  "functionId": "unprotectedRemoveAcl___fsd-FSDirectory__iip-INodesInPath",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
  "functionStartLine": 211,
  "functionEndLine": 242,
  "numCommitsSeen": 17,
  "timeTaken": 2494,
  "changeHistory": [
    "e76995755629579c7f83fbb417afde20ea747980",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "9297f980c2de8886ff970946a2513e6890cd5552"
  ],
  "changeHistoryShort": {
    "e76995755629579c7f83fbb417afde20ea747980": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ymultichange(Yparameterchange,Ybodychange)",
    "9297f980c2de8886ff970946a2513e6890cd5552": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e76995755629579c7f83fbb417afde20ea747980": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11275. Check groupEntryIndex and throw a helpful exception on failures when removing ACL.\n",
      "commitDate": "29/12/16 10:36 AM",
      "commitName": "e76995755629579c7f83fbb417afde20ea747980",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 65.85,
      "commitsBetweenForRepo": 478,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   private static void unprotectedRemoveAcl(FSDirectory fsd, INodesInPath iip)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     AclFeature f \u003d inode.getAclFeature();\n     if (f \u003d\u003d null) {\n       return;\n     }\n \n     FsPermission perm \u003d inode.getFsPermission();\n     List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n     if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n       // Restore group permissions from the feature\u0027s entry to permission\n       // bits, overwriting the mask, which is not part of a minimal ACL.\n       AclEntry groupEntryKey \u003d new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n       int groupEntryIndex \u003d Collections.binarySearch(\n           featureEntries, groupEntryKey,\n           AclTransformation.ACL_ENTRY_COMPARATOR);\n-      assert groupEntryIndex \u003e\u003d 0;\n+      Preconditions.checkPositionIndex(groupEntryIndex, featureEntries.size(),\n+          \"Invalid group entry index after binary-searching inode: \" +\n+              inode.getFullPathName() + \"(\" + inode.getId() + \") \"\n+              + \"with featureEntries:\" + featureEntries);\n       FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n       FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n           perm.getOtherAction(), perm.getStickyBit());\n       inode.setPermission(newPerm, snapshotId);\n     }\n \n     inode.removeAclFeature(snapshotId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unprotectedRemoveAcl(FSDirectory fsd, INodesInPath iip)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return;\n    }\n\n    FsPermission perm \u003d inode.getFsPermission();\n    List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n    if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n      // Restore group permissions from the feature\u0027s entry to permission\n      // bits, overwriting the mask, which is not part of a minimal ACL.\n      AclEntry groupEntryKey \u003d new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n      int groupEntryIndex \u003d Collections.binarySearch(\n          featureEntries, groupEntryKey,\n          AclTransformation.ACL_ENTRY_COMPARATOR);\n      Preconditions.checkPositionIndex(groupEntryIndex, featureEntries.size(),\n          \"Invalid group entry index after binary-searching inode: \" +\n              inode.getFullPathName() + \"(\" + inode.getId() + \") \"\n              + \"with featureEntries:\" + featureEntries);\n      FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n      FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n          perm.getOtherAction(), perm.getStickyBit());\n      inode.setPermission(newPerm, snapshotId);\n    }\n\n    inode.removeAclFeature(snapshotId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/12/14 10:23 AM",
          "commitNameOld": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 4.2,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,29 @@\n-  private static void unprotectedRemoveAcl(FSDirectory fsd, String src)\n+  private static void unprotectedRemoveAcl(FSDirectory fsd, INodesInPath iip)\n       throws IOException {\n     assert fsd.hasWriteLock();\n-    INodesInPath iip \u003d fsd.getINodesInPath4Write(\n-        FSDirectory.normalizePath(src), true);\n-    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n+    INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     AclFeature f \u003d inode.getAclFeature();\n     if (f \u003d\u003d null) {\n       return;\n     }\n \n     FsPermission perm \u003d inode.getFsPermission();\n     List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n     if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n       // Restore group permissions from the feature\u0027s entry to permission\n       // bits, overwriting the mask, which is not part of a minimal ACL.\n       AclEntry groupEntryKey \u003d new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n       int groupEntryIndex \u003d Collections.binarySearch(\n           featureEntries, groupEntryKey,\n           AclTransformation.ACL_ENTRY_COMPARATOR);\n       assert groupEntryIndex \u003e\u003d 0;\n       FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n       FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n           perm.getOtherAction(), perm.getStickyBit());\n       inode.setPermission(newPerm, snapshotId);\n     }\n \n     inode.removeAclFeature(snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void unprotectedRemoveAcl(FSDirectory fsd, INodesInPath iip)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return;\n    }\n\n    FsPermission perm \u003d inode.getFsPermission();\n    List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n    if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n      // Restore group permissions from the feature\u0027s entry to permission\n      // bits, overwriting the mask, which is not part of a minimal ACL.\n      AclEntry groupEntryKey \u003d new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n      int groupEntryIndex \u003d Collections.binarySearch(\n          featureEntries, groupEntryKey,\n          AclTransformation.ACL_ENTRY_COMPARATOR);\n      assert groupEntryIndex \u003e\u003d 0;\n      FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n      FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n          perm.getOtherAction(), perm.getStickyBit());\n      inode.setPermission(newPerm, snapshotId);\n    }\n\n    inode.removeAclFeature(snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String]",
            "newValue": "[fsd-FSDirectory, iip-INodesInPath]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/12/14 10:23 AM",
          "commitNameOld": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 4.2,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,29 @@\n-  private static void unprotectedRemoveAcl(FSDirectory fsd, String src)\n+  private static void unprotectedRemoveAcl(FSDirectory fsd, INodesInPath iip)\n       throws IOException {\n     assert fsd.hasWriteLock();\n-    INodesInPath iip \u003d fsd.getINodesInPath4Write(\n-        FSDirectory.normalizePath(src), true);\n-    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n+    INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     AclFeature f \u003d inode.getAclFeature();\n     if (f \u003d\u003d null) {\n       return;\n     }\n \n     FsPermission perm \u003d inode.getFsPermission();\n     List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n     if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n       // Restore group permissions from the feature\u0027s entry to permission\n       // bits, overwriting the mask, which is not part of a minimal ACL.\n       AclEntry groupEntryKey \u003d new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n       int groupEntryIndex \u003d Collections.binarySearch(\n           featureEntries, groupEntryKey,\n           AclTransformation.ACL_ENTRY_COMPARATOR);\n       assert groupEntryIndex \u003e\u003d 0;\n       FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n       FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n           perm.getOtherAction(), perm.getStickyBit());\n       inode.setPermission(newPerm, snapshotId);\n     }\n \n     inode.removeAclFeature(snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void unprotectedRemoveAcl(FSDirectory fsd, INodesInPath iip)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return;\n    }\n\n    FsPermission perm \u003d inode.getFsPermission();\n    List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n    if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n      // Restore group permissions from the feature\u0027s entry to permission\n      // bits, overwriting the mask, which is not part of a minimal ACL.\n      AclEntry groupEntryKey \u003d new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n      int groupEntryIndex \u003d Collections.binarySearch(\n          featureEntries, groupEntryKey,\n          AclTransformation.ACL_ENTRY_COMPARATOR);\n      assert groupEntryIndex \u003e\u003d 0;\n      FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n      FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n          perm.getOtherAction(), perm.getStickyBit());\n      inode.setPermission(newPerm, snapshotId);\n    }\n\n    inode.removeAclFeature(snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9297f980c2de8886ff970946a2513e6890cd5552": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
      "commitDate": "06/12/14 2:20 PM",
      "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,31 @@\n+  private static void unprotectedRemoveAcl(FSDirectory fsd, String src)\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(\n+        FSDirectory.normalizePath(src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n+    int snapshotId \u003d iip.getLatestSnapshotId();\n+    AclFeature f \u003d inode.getAclFeature();\n+    if (f \u003d\u003d null) {\n+      return;\n+    }\n+\n+    FsPermission perm \u003d inode.getFsPermission();\n+    List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n+    if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n+      // Restore group permissions from the feature\u0027s entry to permission\n+      // bits, overwriting the mask, which is not part of a minimal ACL.\n+      AclEntry groupEntryKey \u003d new AclEntry.Builder()\n+          .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n+      int groupEntryIndex \u003d Collections.binarySearch(\n+          featureEntries, groupEntryKey,\n+          AclTransformation.ACL_ENTRY_COMPARATOR);\n+      assert groupEntryIndex \u003e\u003d 0;\n+      FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n+      FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n+          perm.getOtherAction(), perm.getStickyBit());\n+      inode.setPermission(newPerm, snapshotId);\n+    }\n+\n+    inode.removeAclFeature(snapshotId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unprotectedRemoveAcl(FSDirectory fsd, String src)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(\n        FSDirectory.normalizePath(src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return;\n    }\n\n    FsPermission perm \u003d inode.getFsPermission();\n    List\u003cAclEntry\u003e featureEntries \u003d AclStorage.getEntriesFromAclFeature(f);\n    if (featureEntries.get(0).getScope() \u003d\u003d AclEntryScope.ACCESS) {\n      // Restore group permissions from the feature\u0027s entry to permission\n      // bits, overwriting the mask, which is not part of a minimal ACL.\n      AclEntry groupEntryKey \u003d new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS).setType(AclEntryType.GROUP).build();\n      int groupEntryIndex \u003d Collections.binarySearch(\n          featureEntries, groupEntryKey,\n          AclTransformation.ACL_ENTRY_COMPARATOR);\n      assert groupEntryIndex \u003e\u003d 0;\n      FsAction groupPerm \u003d featureEntries.get(groupEntryIndex).getPermission();\n      FsPermission newPerm \u003d new FsPermission(perm.getUserAction(), groupPerm,\n          perm.getOtherAction(), perm.getStickyBit());\n      inode.setPermission(newPerm, snapshotId);\n    }\n\n    inode.removeAclFeature(snapshotId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java"
    }
  }
}