{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WorkloadDriver.java",
  "functionName": "getMapperClass",
  "functionId": "getMapperClass___className-String",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
  "functionStartLine": 170,
  "functionEndLine": 192,
  "numCommitsSeen": 4,
  "timeTaken": 3149,
  "changeHistory": [
    "54e760511a2e2f8e5ecf1eb8762434fcd041f4d6",
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "54e760511a2e2f8e5ecf1eb8762434fcd041f4d6": "Ymultichange(Yexceptionschange,Ybodychange)",
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090": "Ymultichange(Yreturntypechange,Ybodychange)",
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "54e760511a2e2f8e5ecf1eb8762434fcd041f4d6": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-14825. [Dynamometer] Workload doesn\u0027t start unless an absolute path of Mapper class given. (#1693)\n\n",
      "commitDate": "03/12/19 6:28 PM",
      "commitName": "54e760511a2e2f8e5ecf1eb8762434fcd041f4d6",
      "commitAuthor": "Takanobu Asanuma",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-14825. [Dynamometer] Workload doesn\u0027t start unless an absolute path of Mapper class given. (#1693)\n\n",
          "commitDate": "03/12/19 6:28 PM",
          "commitName": "54e760511a2e2f8e5ecf1eb8762434fcd041f4d6",
          "commitAuthor": "Takanobu Asanuma",
          "commitDateOld": "01/11/19 9:32 AM",
          "commitNameOld": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 32.41,
          "commitsBetweenForRepo": 121,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,23 @@\n   private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n-      String className) throws ClassNotFoundException {\n-    if (!className.contains(\".\")) {\n-      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n+      String className) {\n+    String[] potentialQualifiedClassNames \u003d {\n+        WorkloadDriver.class.getPackage().getName() + \".\" + className,\n+        AuditReplayMapper.class.getPackage().getName() + \".\" + className,\n+        className\n+    };\n+    for (String qualifiedClassName : potentialQualifiedClassNames) {\n+      Class\u003c?\u003e mapperClass;\n+      try {\n+        mapperClass \u003d getConf().getClassByName(qualifiedClassName);\n+      } catch (ClassNotFoundException cnfe) {\n+        continue;\n+      }\n+      if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n+        throw new IllegalArgumentException(className + \" is not a subclass of \"\n+            + WorkloadMapper.class.getCanonicalName());\n+      }\n+      return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n     }\n-    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n-    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n-      throw new IllegalArgumentException(className + \" is not a subclass of \"\n-          + WorkloadMapper.class.getCanonicalName());\n-    }\n-    return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n+    throw new IllegalArgumentException(\"Unable to find workload mapper class: \"\n+        + className);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n      String className) {\n    String[] potentialQualifiedClassNames \u003d {\n        WorkloadDriver.class.getPackage().getName() + \".\" + className,\n        AuditReplayMapper.class.getPackage().getName() + \".\" + className,\n        className\n    };\n    for (String qualifiedClassName : potentialQualifiedClassNames) {\n      Class\u003c?\u003e mapperClass;\n      try {\n        mapperClass \u003d getConf().getClassByName(qualifiedClassName);\n      } catch (ClassNotFoundException cnfe) {\n        continue;\n      }\n      if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n        throw new IllegalArgumentException(className + \" is not a subclass of \"\n            + WorkloadMapper.class.getCanonicalName());\n      }\n      return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n    }\n    throw new IllegalArgumentException(\"Unable to find workload mapper class: \"\n        + className);\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {
            "oldValue": "[ClassNotFoundException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14825. [Dynamometer] Workload doesn\u0027t start unless an absolute path of Mapper class given. (#1693)\n\n",
          "commitDate": "03/12/19 6:28 PM",
          "commitName": "54e760511a2e2f8e5ecf1eb8762434fcd041f4d6",
          "commitAuthor": "Takanobu Asanuma",
          "commitDateOld": "01/11/19 9:32 AM",
          "commitNameOld": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 32.41,
          "commitsBetweenForRepo": 121,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,23 @@\n   private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n-      String className) throws ClassNotFoundException {\n-    if (!className.contains(\".\")) {\n-      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n+      String className) {\n+    String[] potentialQualifiedClassNames \u003d {\n+        WorkloadDriver.class.getPackage().getName() + \".\" + className,\n+        AuditReplayMapper.class.getPackage().getName() + \".\" + className,\n+        className\n+    };\n+    for (String qualifiedClassName : potentialQualifiedClassNames) {\n+      Class\u003c?\u003e mapperClass;\n+      try {\n+        mapperClass \u003d getConf().getClassByName(qualifiedClassName);\n+      } catch (ClassNotFoundException cnfe) {\n+        continue;\n+      }\n+      if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n+        throw new IllegalArgumentException(className + \" is not a subclass of \"\n+            + WorkloadMapper.class.getCanonicalName());\n+      }\n+      return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n     }\n-    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n-    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n-      throw new IllegalArgumentException(className + \" is not a subclass of \"\n-          + WorkloadMapper.class.getCanonicalName());\n-    }\n-    return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n+    throw new IllegalArgumentException(\"Unable to find workload mapper class: \"\n+        + className);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n      String className) {\n    String[] potentialQualifiedClassNames \u003d {\n        WorkloadDriver.class.getPackage().getName() + \".\" + className,\n        AuditReplayMapper.class.getPackage().getName() + \".\" + className,\n        className\n    };\n    for (String qualifiedClassName : potentialQualifiedClassNames) {\n      Class\u003c?\u003e mapperClass;\n      try {\n        mapperClass \u003d getConf().getClassByName(qualifiedClassName);\n      } catch (ClassNotFoundException cnfe) {\n        continue;\n      }\n      if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n        throw new IllegalArgumentException(className + \" is not a subclass of \"\n            + WorkloadMapper.class.getCanonicalName());\n      }\n      return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n    }\n    throw new IllegalArgumentException(\"Unable to find workload mapper class: \"\n        + className);\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {}
        }
      ]
    },
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
      "commitDate": "01/11/19 9:32 AM",
      "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
      "commitAuthor": "Takanobu Asanuma",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
          "commitDate": "01/11/19 9:32 AM",
          "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
          "commitAuthor": "Takanobu Asanuma",
          "commitDateOld": "11/07/19 8:29 AM",
          "commitNameOld": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 113.04,
          "commitsBetweenForRepo": 885,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  private Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e getMapperClass(String className)\n-      throws ClassNotFoundException {\n+  private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n+      String className) throws ClassNotFoundException {\n     if (!className.contains(\".\")) {\n       className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n     }\n     Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n     if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n       throw new IllegalArgumentException(className + \" is not a subclass of \"\n           + WorkloadMapper.class.getCanonicalName());\n     }\n-    return (Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e) mapperClass;\n+    return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n      String className) throws ClassNotFoundException {\n    if (!className.contains(\".\")) {\n      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n    }\n    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n      throw new IllegalArgumentException(className + \" is not a subclass of \"\n          + WorkloadMapper.class.getCanonicalName());\n    }\n    return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {
            "oldValue": "Class\u003c? extends WorkloadMapper\u003c?,?\u003e\u003e",
            "newValue": "Class\u003c? extends WorkloadMapper\u003c?,?,?,?\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
          "commitDate": "01/11/19 9:32 AM",
          "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
          "commitAuthor": "Takanobu Asanuma",
          "commitDateOld": "11/07/19 8:29 AM",
          "commitNameOld": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 113.04,
          "commitsBetweenForRepo": 885,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  private Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e getMapperClass(String className)\n-      throws ClassNotFoundException {\n+  private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n+      String className) throws ClassNotFoundException {\n     if (!className.contains(\".\")) {\n       className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n     }\n     Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n     if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n       throw new IllegalArgumentException(className + \" is not a subclass of \"\n           + WorkloadMapper.class.getCanonicalName());\n     }\n-    return (Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e) mapperClass;\n+    return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e getMapperClass(\n      String className) throws ClassNotFoundException {\n    if (!className.contains(\".\")) {\n      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n    }\n    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n      throw new IllegalArgumentException(className + \" is not a subclass of \"\n          + WorkloadMapper.class.getCanonicalName());\n    }\n    return (Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e) mapperClass;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {}
        }
      ]
    },
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
      "commitDate": "11/07/19 8:29 AM",
      "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
          "commitDate": "11/07/19 8:29 AM",
          "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "25/06/19 8:07 AM",
          "commitNameOld": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 16.02,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  private Class\u003c? extends WorkloadMapper\u003e getMapperClass(String className)\n+  private Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e getMapperClass(String className)\n       throws ClassNotFoundException {\n     if (!className.contains(\".\")) {\n       className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n     }\n     Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n     if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n       throw new IllegalArgumentException(className + \" is not a subclass of \"\n           + WorkloadMapper.class.getCanonicalName());\n     }\n-    return (Class\u003c? extends WorkloadMapper\u003e) mapperClass;\n+    return (Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e) mapperClass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e getMapperClass(String className)\n      throws ClassNotFoundException {\n    if (!className.contains(\".\")) {\n      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n    }\n    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n      throw new IllegalArgumentException(className + \" is not a subclass of \"\n          + WorkloadMapper.class.getCanonicalName());\n    }\n    return (Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e) mapperClass;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {
            "oldValue": "Class\u003c? extends WorkloadMapper\u003e",
            "newValue": "Class\u003c? extends WorkloadMapper\u003c?,?\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
          "commitDate": "11/07/19 8:29 AM",
          "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "25/06/19 8:07 AM",
          "commitNameOld": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 16.02,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  private Class\u003c? extends WorkloadMapper\u003e getMapperClass(String className)\n+  private Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e getMapperClass(String className)\n       throws ClassNotFoundException {\n     if (!className.contains(\".\")) {\n       className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n     }\n     Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n     if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n       throw new IllegalArgumentException(className + \" is not a subclass of \"\n           + WorkloadMapper.class.getCanonicalName());\n     }\n-    return (Class\u003c? extends WorkloadMapper\u003e) mapperClass;\n+    return (Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e) mapperClass;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e getMapperClass(String className)\n      throws ClassNotFoundException {\n    if (!className.contains(\".\")) {\n      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n    }\n    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n      throw new IllegalArgumentException(className + \" is not a subclass of \"\n          + WorkloadMapper.class.getCanonicalName());\n    }\n    return (Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e) mapperClass;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {}
        }
      ]
    },
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,12 @@\n+  private Class\u003c? extends WorkloadMapper\u003e getMapperClass(String className)\n+      throws ClassNotFoundException {\n+    if (!className.contains(\".\")) {\n+      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n+    }\n+    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n+    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n+      throw new IllegalArgumentException(className + \" is not a subclass of \"\n+          + WorkloadMapper.class.getCanonicalName());\n+    }\n+    return (Class\u003c? extends WorkloadMapper\u003e) mapperClass;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Class\u003c? extends WorkloadMapper\u003e getMapperClass(String className)\n      throws ClassNotFoundException {\n    if (!className.contains(\".\")) {\n      className \u003d WorkloadDriver.class.getPackage().getName() + \".\" + className;\n    }\n    Class\u003c?\u003e mapperClass \u003d getConf().getClassByName(className);\n    if (!WorkloadMapper.class.isAssignableFrom(mapperClass)) {\n      throw new IllegalArgumentException(className + \" is not a subclass of \"\n          + WorkloadMapper.class.getCanonicalName());\n    }\n    return (Class\u003c? extends WorkloadMapper\u003e) mapperClass;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java"
    }
  }
}