{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CLI.java",
  "functionName": "run",
  "functionId": "run___argv-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
  "functionStartLine": 89,
  "functionEndLine": 516,
  "numCommitsSeen": 39,
  "timeTaken": 8512,
  "changeHistory": [
    "178751ed8c9d47038acf8616c226f1f52e884feb",
    "992a49353f0bdbc71534bfeeb134112c5624b94b",
    "57ead18a85e15aef1993f49157cf05aed38f1c87",
    "4343a4cf7790b47dc7ecd18f8634e6b9c805e775",
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
    "d4e766de931c1cc478561a211215c517ba1f341c",
    "60fe6d53d92c19c103219827fdb321780f1b33e5",
    "fc470840a0b1f5dc8b3b13f7ed99fd68ba728216",
    "f634505d48d97e4d461980d68a0cbdf87223646d",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "ac8d52bf50bba1a29489ee75fd90717d8a2b0cc9",
    "6ff600d9e3496008d81361c17ea427a8675cd0d4",
    "52fe4e6be94e96dc214dac66a36718ceedf53f42",
    "8dc0d5af432cc4fc34630c0dcfada6823b1abd5c",
    "c9fce677b33bf7e5492bdd25dbd53cd57a2e6e99",
    "9ea20fc537b19a8811d0dbebaa7be7dad070c8b5",
    "6ba0375b21c4ce07d2b6b592c4963f705c35222b",
    "47a381e306877750b5a3ce5d76e0a5ff652ec188",
    "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": "Ybodychange",
    "992a49353f0bdbc71534bfeeb134112c5624b94b": "Ybodychange",
    "57ead18a85e15aef1993f49157cf05aed38f1c87": "Ybodychange",
    "4343a4cf7790b47dc7ecd18f8634e6b9c805e775": "Ybodychange",
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8": "Ybodychange",
    "d4e766de931c1cc478561a211215c517ba1f341c": "Ybodychange",
    "60fe6d53d92c19c103219827fdb321780f1b33e5": "Ybodychange",
    "fc470840a0b1f5dc8b3b13f7ed99fd68ba728216": "Ybodychange",
    "f634505d48d97e4d461980d68a0cbdf87223646d": "Ybodychange",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "ac8d52bf50bba1a29489ee75fd90717d8a2b0cc9": "Ybodychange",
    "6ff600d9e3496008d81361c17ea427a8675cd0d4": "Ybodychange",
    "52fe4e6be94e96dc214dac66a36718ceedf53f42": "Ybodychange",
    "8dc0d5af432cc4fc34630c0dcfada6823b1abd5c": "Ybodychange",
    "c9fce677b33bf7e5492bdd25dbd53cd57a2e6e99": "Ybodychange",
    "9ea20fc537b19a8811d0dbebaa7be7dad070c8b5": "Ybodychange",
    "6ba0375b21c4ce07d2b6b592c4963f705c35222b": "Ybodychange",
    "47a381e306877750b5a3ce5d76e0a5ff652ec188": "Ybodychange",
    "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4": "Ybodychange",
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6983. Moving logging APIs over to slf4j in hadoop-mapreduce-client-core. Contributed by Jinjiang Ling.\n",
      "commitDate": "02/11/17 1:43 AM",
      "commitName": "178751ed8c9d47038acf8616c226f1f52e884feb",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/06/16 8:26 AM",
      "commitNameOld": "0f23cd497b0baa0899c7565cd94e2f27dbc7c0ff",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 495.72,
      "commitsBetweenForRepo": 3302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,428 +1,428 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFileOrJobId \u003d null;\n     String historyOutFile \u003d null;\n     String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     String configOutFile \u003d null;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n     boolean downloadConfig \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n-          LOG.info(ne);\n+          LOG.info(\"Error number format: \", ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       viewHistory \u003d true;\n       if (argv.length \u003c 2 || argv.length \u003e 7) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n \n       // Some arguments are optional while others are not, and some require\n       // second arguments.  Due to this, the indexing can vary depending on\n       // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n       // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n       //   1                  2            3       4         5         6\n       //   1                  2            3       4\n       //   1                  2                              3         4\n       //   1                  2\n       //                      1            2       3         4         5\n       //                      1            2       3\n       //                      1                              2         3\n       //                      1\n \n       // \"all\" is optional, but comes first if specified\n       int index \u003d 1;\n       if (\"all\".equals(argv[index])) {\n         index++;\n         viewAllHistory \u003d true;\n         if (argv.length \u003d\u003d 2) {\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       // Get the job history file or job id argument\n       historyFileOrJobId \u003d argv[index++];\n       // \"-outfile\" is optional, but if specified requires a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n         index++;\n         historyOutFile \u003d argv[index++];\n       }\n       // \"-format\" is optional, but if specified required a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n         index++;\n         historyOutFormat \u003d argv[index++];\n       }\n       // Check for any extra arguments that don\u0027t belong here\n       if (argv.length \u003e index) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-config\".equals(cmd)) {\n       downloadConfig \u003d true;\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       configOutFile \u003d argv[2];\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n         // it\u0027s a Job ID\n         if (historyFileOrJobId.endsWith(\".jhist\")) {\n           viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n               historyOutFormat);\n           exitCode \u003d 0;\n         } else {\n           Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n           if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n           } else {\n             String historyUrl \u003d job.getHistoryUrl();\n             if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n               System.out.println(\"History file for job \" + historyFileOrJobId +\n                   \" is currently unavailable.\");\n             } else {\n               viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                   historyOutFormat);\n               exitCode \u003d 0;\n             }\n           }\n         }\n       } else if (listEvents) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           listEvents(job, fromEvent, nEvents);\n           exitCode \u003d 0;\n         }\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n           exitCode \u003d 0;\n         }\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         JobID jobID \u003d JobID.forName(jobid);\n         if (getJob(jobID) \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           try {\n             TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n             LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n             LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n             logDumper.setConf(getConf());\n             exitCode \u003d logDumper.dumpAContainersLogs(\n                     logParams.getApplicationId(), logParams.getContainerId(),\n                     logParams.getNodeId(), logParams.getOwner());\n           } catch (IOException e) {\n             if (e instanceof RemoteException) {\n               throw e;\n             }\n             System.out.println(e.getMessage());\n           }\n         }\n       } else if (downloadConfig) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           String jobFile \u003d job.getJobFile();\n           if (jobFile \u003d\u003d null || jobFile.isEmpty()) {\n             System.out.println(\"Config file for job \" + jobFile +\n                 \" could not be found.\");\n           } else {\n             Path configPath \u003d new Path(jobFile);\n             FileSystem fs \u003d FileSystem.get(getConf());\n             fs.copyToLocalFile(configPath, new Path(configOutFile));\n             exitCode \u003d 0;\n           }\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFileOrJobId \u003d null;\n    String historyOutFile \u003d null;\n    String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    String configOutFile \u003d null;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n    boolean downloadConfig \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(\"Error number format: \", ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      viewHistory \u003d true;\n      if (argv.length \u003c 2 || argv.length \u003e 7) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n\n      // Some arguments are optional while others are not, and some require\n      // second arguments.  Due to this, the indexing can vary depending on\n      // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n      // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n      //   1                  2            3       4         5         6\n      //   1                  2            3       4\n      //   1                  2                              3         4\n      //   1                  2\n      //                      1            2       3         4         5\n      //                      1            2       3\n      //                      1                              2         3\n      //                      1\n\n      // \"all\" is optional, but comes first if specified\n      int index \u003d 1;\n      if (\"all\".equals(argv[index])) {\n        index++;\n        viewAllHistory \u003d true;\n        if (argv.length \u003d\u003d 2) {\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      // Get the job history file or job id argument\n      historyFileOrJobId \u003d argv[index++];\n      // \"-outfile\" is optional, but if specified requires a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n        index++;\n        historyOutFile \u003d argv[index++];\n      }\n      // \"-format\" is optional, but if specified required a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n        index++;\n        historyOutFormat \u003d argv[index++];\n      }\n      // Check for any extra arguments that don\u0027t belong here\n      if (argv.length \u003e index) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-config\".equals(cmd)) {\n      downloadConfig \u003d true;\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      configOutFile \u003d argv[2];\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n        // it\u0027s a Job ID\n        if (historyFileOrJobId.endsWith(\".jhist\")) {\n          viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n              historyOutFormat);\n          exitCode \u003d 0;\n        } else {\n          Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n          if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n          } else {\n            String historyUrl \u003d job.getHistoryUrl();\n            if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n              System.out.println(\"History file for job \" + historyFileOrJobId +\n                  \" is currently unavailable.\");\n            } else {\n              viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                  historyOutFormat);\n              exitCode \u003d 0;\n            }\n          }\n        }\n      } else if (listEvents) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          listEvents(job, fromEvent, nEvents);\n          exitCode \u003d 0;\n        }\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n          exitCode \u003d 0;\n        }\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        JobID jobID \u003d JobID.forName(jobid);\n        if (getJob(jobID) \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          try {\n            TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n            LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n            LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n            logDumper.setConf(getConf());\n            exitCode \u003d logDumper.dumpAContainersLogs(\n                    logParams.getApplicationId(), logParams.getContainerId(),\n                    logParams.getNodeId(), logParams.getOwner());\n          } catch (IOException e) {\n            if (e instanceof RemoteException) {\n              throw e;\n            }\n            System.out.println(e.getMessage());\n          }\n        }\n      } else if (downloadConfig) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          String jobFile \u003d job.getJobFile();\n          if (jobFile \u003d\u003d null || jobFile.isEmpty()) {\n            System.out.println(\"Config file for job \" + jobFile +\n                \" could not be found.\");\n          } else {\n            Path configPath \u003d new Path(jobFile);\n            FileSystem fs \u003d FileSystem.get(getConf());\n            fs.copyToLocalFile(configPath, new Path(configOutFile));\n            exitCode \u003d 0;\n          }\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "992a49353f0bdbc71534bfeeb134112c5624b94b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6686. Add a way to download the job config from the mapred CLI (rkanter)\n",
      "commitDate": "18/05/16 12:16 PM",
      "commitName": "992a49353f0bdbc71534bfeeb134112c5624b94b",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "22/03/16 2:27 PM",
      "commitNameOld": "57ead18a85e15aef1993f49157cf05aed38f1c87",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 56.91,
      "commitsBetweenForRepo": 375,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,402 +1,428 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFileOrJobId \u003d null;\n     String historyOutFile \u003d null;\n     String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n+    String configOutFile \u003d null;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n+    boolean downloadConfig \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       viewHistory \u003d true;\n       if (argv.length \u003c 2 || argv.length \u003e 7) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n \n       // Some arguments are optional while others are not, and some require\n       // second arguments.  Due to this, the indexing can vary depending on\n       // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n       // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n       //   1                  2            3       4         5         6\n       //   1                  2            3       4\n       //   1                  2                              3         4\n       //   1                  2\n       //                      1            2       3         4         5\n       //                      1            2       3\n       //                      1                              2         3\n       //                      1\n \n       // \"all\" is optional, but comes first if specified\n       int index \u003d 1;\n       if (\"all\".equals(argv[index])) {\n         index++;\n         viewAllHistory \u003d true;\n         if (argv.length \u003d\u003d 2) {\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       // Get the job history file or job id argument\n       historyFileOrJobId \u003d argv[index++];\n       // \"-outfile\" is optional, but if specified requires a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n         index++;\n         historyOutFile \u003d argv[index++];\n       }\n       // \"-format\" is optional, but if specified required a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n         index++;\n         historyOutFormat \u003d argv[index++];\n       }\n       // Check for any extra arguments that don\u0027t belong here\n       if (argv.length \u003e index) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n+    } else if (\"-config\".equals(cmd)) {\n+      downloadConfig \u003d true;\n+      if (argv.length !\u003d 3) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      jobid \u003d argv[1];\n+      configOutFile \u003d argv[2];\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n         // it\u0027s a Job ID\n         if (historyFileOrJobId.endsWith(\".jhist\")) {\n           viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n               historyOutFormat);\n           exitCode \u003d 0;\n         } else {\n           Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n           if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n           } else {\n             String historyUrl \u003d job.getHistoryUrl();\n             if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n               System.out.println(\"History file for job \" + historyFileOrJobId +\n                   \" is currently unavailable.\");\n             } else {\n               viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                   historyOutFormat);\n               exitCode \u003d 0;\n             }\n           }\n         }\n       } else if (listEvents) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           listEvents(job, fromEvent, nEvents);\n           exitCode \u003d 0;\n         }\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n           exitCode \u003d 0;\n         }\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         JobID jobID \u003d JobID.forName(jobid);\n         if (getJob(jobID) \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           try {\n             TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n             LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n             LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n             logDumper.setConf(getConf());\n             exitCode \u003d logDumper.dumpAContainersLogs(\n                     logParams.getApplicationId(), logParams.getContainerId(),\n                     logParams.getNodeId(), logParams.getOwner());\n           } catch (IOException e) {\n             if (e instanceof RemoteException) {\n               throw e;\n             }\n             System.out.println(e.getMessage());\n           }\n         }\n+      } else if (downloadConfig) {\n+        Job job \u003d getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          String jobFile \u003d job.getJobFile();\n+          if (jobFile \u003d\u003d null || jobFile.isEmpty()) {\n+            System.out.println(\"Config file for job \" + jobFile +\n+                \" could not be found.\");\n+          } else {\n+            Path configPath \u003d new Path(jobFile);\n+            FileSystem fs \u003d FileSystem.get(getConf());\n+            fs.copyToLocalFile(configPath, new Path(configOutFile));\n+            exitCode \u003d 0;\n+          }\n+        }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFileOrJobId \u003d null;\n    String historyOutFile \u003d null;\n    String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    String configOutFile \u003d null;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n    boolean downloadConfig \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      viewHistory \u003d true;\n      if (argv.length \u003c 2 || argv.length \u003e 7) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n\n      // Some arguments are optional while others are not, and some require\n      // second arguments.  Due to this, the indexing can vary depending on\n      // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n      // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n      //   1                  2            3       4         5         6\n      //   1                  2            3       4\n      //   1                  2                              3         4\n      //   1                  2\n      //                      1            2       3         4         5\n      //                      1            2       3\n      //                      1                              2         3\n      //                      1\n\n      // \"all\" is optional, but comes first if specified\n      int index \u003d 1;\n      if (\"all\".equals(argv[index])) {\n        index++;\n        viewAllHistory \u003d true;\n        if (argv.length \u003d\u003d 2) {\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      // Get the job history file or job id argument\n      historyFileOrJobId \u003d argv[index++];\n      // \"-outfile\" is optional, but if specified requires a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n        index++;\n        historyOutFile \u003d argv[index++];\n      }\n      // \"-format\" is optional, but if specified required a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n        index++;\n        historyOutFormat \u003d argv[index++];\n      }\n      // Check for any extra arguments that don\u0027t belong here\n      if (argv.length \u003e index) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-config\".equals(cmd)) {\n      downloadConfig \u003d true;\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      configOutFile \u003d argv[2];\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n        // it\u0027s a Job ID\n        if (historyFileOrJobId.endsWith(\".jhist\")) {\n          viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n              historyOutFormat);\n          exitCode \u003d 0;\n        } else {\n          Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n          if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n          } else {\n            String historyUrl \u003d job.getHistoryUrl();\n            if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n              System.out.println(\"History file for job \" + historyFileOrJobId +\n                  \" is currently unavailable.\");\n            } else {\n              viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                  historyOutFormat);\n              exitCode \u003d 0;\n            }\n          }\n        }\n      } else if (listEvents) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          listEvents(job, fromEvent, nEvents);\n          exitCode \u003d 0;\n        }\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n          exitCode \u003d 0;\n        }\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        JobID jobID \u003d JobID.forName(jobid);\n        if (getJob(jobID) \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          try {\n            TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n            LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n            LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n            logDumper.setConf(getConf());\n            exitCode \u003d logDumper.dumpAContainersLogs(\n                    logParams.getApplicationId(), logParams.getContainerId(),\n                    logParams.getNodeId(), logParams.getOwner());\n          } catch (IOException e) {\n            if (e instanceof RemoteException) {\n              throw e;\n            }\n            System.out.println(e.getMessage());\n          }\n        }\n      } else if (downloadConfig) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          String jobFile \u003d job.getJobFile();\n          if (jobFile \u003d\u003d null || jobFile.isEmpty()) {\n            System.out.println(\"Config file for job \" + jobFile +\n                \" could not be found.\");\n          } else {\n            Path configPath \u003d new Path(jobFile);\n            FileSystem fs \u003d FileSystem.get(getConf());\n            fs.copyToLocalFile(configPath, new Path(configOutFile));\n            exitCode \u003d 0;\n          }\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "57ead18a85e15aef1993f49157cf05aed38f1c87": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6110. JobHistoryServer CLI throws NullPointerException with job ids that do not exist. (Kai Sasaki via gtcarrera9)\n",
      "commitDate": "22/03/16 2:27 PM",
      "commitName": "57ead18a85e15aef1993f49157cf05aed38f1c87",
      "commitAuthor": "Li Lu",
      "commitDateOld": "23/02/16 5:37 PM",
      "commitNameOld": "4343a4cf7790b47dc7ecd18f8634e6b9c805e775",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 27.83,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,388 +1,402 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFileOrJobId \u003d null;\n     String historyOutFile \u003d null;\n     String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       viewHistory \u003d true;\n       if (argv.length \u003c 2 || argv.length \u003e 7) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n \n       // Some arguments are optional while others are not, and some require\n       // second arguments.  Due to this, the indexing can vary depending on\n       // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n       // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n       //   1                  2            3       4         5         6\n       //   1                  2            3       4\n       //   1                  2                              3         4\n       //   1                  2\n       //                      1            2       3         4         5\n       //                      1            2       3\n       //                      1                              2         3\n       //                      1\n \n       // \"all\" is optional, but comes first if specified\n       int index \u003d 1;\n       if (\"all\".equals(argv[index])) {\n         index++;\n         viewAllHistory \u003d true;\n         if (argv.length \u003d\u003d 2) {\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       // Get the job history file or job id argument\n       historyFileOrJobId \u003d argv[index++];\n       // \"-outfile\" is optional, but if specified requires a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n         index++;\n         historyOutFile \u003d argv[index++];\n       }\n       // \"-format\" is optional, but if specified required a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n         index++;\n         historyOutFormat \u003d argv[index++];\n       }\n       // Check for any extra arguments that don\u0027t belong here\n       if (argv.length \u003e index) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n         // it\u0027s a Job ID\n         if (historyFileOrJobId.endsWith(\".jhist\")) {\n           viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n               historyOutFormat);\n           exitCode \u003d 0;\n         } else {\n           Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n           if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n           } else {\n             String historyUrl \u003d job.getHistoryUrl();\n             if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n               System.out.println(\"History file for job \" + historyFileOrJobId +\n                   \" is currently unavailable.\");\n             } else {\n               viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                   historyOutFormat);\n               exitCode \u003d 0;\n             }\n           }\n         }\n       } else if (listEvents) {\n-        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n-        exitCode \u003d 0;\n+        Job job \u003d getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          listEvents(job, fromEvent, nEvents);\n+          exitCode \u003d 0;\n+        }\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n-        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n-        exitCode \u003d 0;\n+        Job job \u003d getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n+          exitCode \u003d 0;\n+        }\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n-        try {\n         JobID jobID \u003d JobID.forName(jobid);\n-        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n-        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n-        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n-        logDumper.setConf(getConf());\n-        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n-            logParams.getContainerId(), logParams.getNodeId(),\n-            logParams.getOwner());\n-        } catch (IOException e) {\n-          if (e instanceof RemoteException) {\n-            throw e;\n-          } \n-          System.out.println(e.getMessage());\n+        if (getJob(jobID) \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          try {\n+            TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n+            LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n+            LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n+            logDumper.setConf(getConf());\n+            exitCode \u003d logDumper.dumpAContainersLogs(\n+                    logParams.getApplicationId(), logParams.getContainerId(),\n+                    logParams.getNodeId(), logParams.getOwner());\n+          } catch (IOException e) {\n+            if (e instanceof RemoteException) {\n+              throw e;\n+            }\n+            System.out.println(e.getMessage());\n+          }\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFileOrJobId \u003d null;\n    String historyOutFile \u003d null;\n    String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      viewHistory \u003d true;\n      if (argv.length \u003c 2 || argv.length \u003e 7) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n\n      // Some arguments are optional while others are not, and some require\n      // second arguments.  Due to this, the indexing can vary depending on\n      // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n      // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n      //   1                  2            3       4         5         6\n      //   1                  2            3       4\n      //   1                  2                              3         4\n      //   1                  2\n      //                      1            2       3         4         5\n      //                      1            2       3\n      //                      1                              2         3\n      //                      1\n\n      // \"all\" is optional, but comes first if specified\n      int index \u003d 1;\n      if (\"all\".equals(argv[index])) {\n        index++;\n        viewAllHistory \u003d true;\n        if (argv.length \u003d\u003d 2) {\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      // Get the job history file or job id argument\n      historyFileOrJobId \u003d argv[index++];\n      // \"-outfile\" is optional, but if specified requires a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n        index++;\n        historyOutFile \u003d argv[index++];\n      }\n      // \"-format\" is optional, but if specified required a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n        index++;\n        historyOutFormat \u003d argv[index++];\n      }\n      // Check for any extra arguments that don\u0027t belong here\n      if (argv.length \u003e index) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n        // it\u0027s a Job ID\n        if (historyFileOrJobId.endsWith(\".jhist\")) {\n          viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n              historyOutFormat);\n          exitCode \u003d 0;\n        } else {\n          Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n          if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n          } else {\n            String historyUrl \u003d job.getHistoryUrl();\n            if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n              System.out.println(\"History file for job \" + historyFileOrJobId +\n                  \" is currently unavailable.\");\n            } else {\n              viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                  historyOutFormat);\n              exitCode \u003d 0;\n            }\n          }\n        }\n      } else if (listEvents) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          listEvents(job, fromEvent, nEvents);\n          exitCode \u003d 0;\n        }\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n          exitCode \u003d 0;\n        }\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        JobID jobID \u003d JobID.forName(jobid);\n        if (getJob(jobID) \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          try {\n            TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n            LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n            LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n            logDumper.setConf(getConf());\n            exitCode \u003d logDumper.dumpAContainersLogs(\n                    logParams.getApplicationId(), logParams.getContainerId(),\n                    logParams.getNodeId(), logParams.getOwner());\n          } catch (IOException e) {\n            if (e instanceof RemoteException) {\n              throw e;\n            }\n            System.out.println(e.getMessage());\n          }\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "4343a4cf7790b47dc7ecd18f8634e6b9c805e775": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6640. mapred job -history command should be able to take Job ID (rkanter)\n",
      "commitDate": "23/02/16 5:37 PM",
      "commitName": "4343a4cf7790b47dc7ecd18f8634e6b9c805e775",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "18/02/16 5:58 PM",
      "commitNameOld": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,369 +1,388 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n-    String historyFile \u003d null;\n+    String historyFileOrJobId \u003d null;\n     String historyOutFile \u003d null;\n     String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       viewHistory \u003d true;\n       if (argv.length \u003c 2 || argv.length \u003e 7) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n \n       // Some arguments are optional while others are not, and some require\n       // second arguments.  Due to this, the indexing can vary depending on\n       // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n-      // [all] \u003cjobHistoryFile\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n-      //   1          2             3       4         5         6\n-      //   1          2             3       4\n-      //   1          2                               3         4\n-      //   1          2\n-      //              1             2       3         4         5\n-      //              1             2       3\n-      //              1                               2         3\n-      //              1\n+      // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n+      //   1                  2            3       4         5         6\n+      //   1                  2            3       4\n+      //   1                  2                              3         4\n+      //   1                  2\n+      //                      1            2       3         4         5\n+      //                      1            2       3\n+      //                      1                              2         3\n+      //                      1\n \n       // \"all\" is optional, but comes first if specified\n       int index \u003d 1;\n       if (\"all\".equals(argv[index])) {\n         index++;\n         viewAllHistory \u003d true;\n         if (argv.length \u003d\u003d 2) {\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n-      // Get the job history file argument\n-      historyFile \u003d argv[index++];\n+      // Get the job history file or job id argument\n+      historyFileOrJobId \u003d argv[index++];\n       // \"-outfile\" is optional, but if specified requires a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n         index++;\n         historyOutFile \u003d argv[index++];\n       }\n       // \"-format\" is optional, but if specified required a second argument\n       if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n         index++;\n         historyOutFormat \u003d argv[index++];\n       }\n       // Check for any extra arguments that don\u0027t belong here\n       if (argv.length \u003e index) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n-        viewHistory(historyFile, viewAllHistory, historyOutFile,\n-            historyOutFormat);\n-        exitCode \u003d 0;\n+        // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n+        // it\u0027s a Job ID\n+        if (historyFileOrJobId.endsWith(\".jhist\")) {\n+          viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n+              historyOutFormat);\n+          exitCode \u003d 0;\n+        } else {\n+          Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n+          if (job \u003d\u003d null) {\n+            System.out.println(\"Could not find job \" + jobid);\n+          } else {\n+            String historyUrl \u003d job.getHistoryUrl();\n+            if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n+              System.out.println(\"History file for job \" + historyFileOrJobId +\n+                  \" is currently unavailable.\");\n+            } else {\n+              viewHistory(historyUrl, viewAllHistory, historyOutFile,\n+                  historyOutFormat);\n+              exitCode \u003d 0;\n+            }\n+          }\n+        }\n       } else if (listEvents) {\n         listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFileOrJobId \u003d null;\n    String historyOutFile \u003d null;\n    String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      viewHistory \u003d true;\n      if (argv.length \u003c 2 || argv.length \u003e 7) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n\n      // Some arguments are optional while others are not, and some require\n      // second arguments.  Due to this, the indexing can vary depending on\n      // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n      // [all] \u003cjobHistoryFile|jobId\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n      //   1                  2            3       4         5         6\n      //   1                  2            3       4\n      //   1                  2                              3         4\n      //   1                  2\n      //                      1            2       3         4         5\n      //                      1            2       3\n      //                      1                              2         3\n      //                      1\n\n      // \"all\" is optional, but comes first if specified\n      int index \u003d 1;\n      if (\"all\".equals(argv[index])) {\n        index++;\n        viewAllHistory \u003d true;\n        if (argv.length \u003d\u003d 2) {\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      // Get the job history file or job id argument\n      historyFileOrJobId \u003d argv[index++];\n      // \"-outfile\" is optional, but if specified requires a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n        index++;\n        historyOutFile \u003d argv[index++];\n      }\n      // \"-format\" is optional, but if specified required a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n        index++;\n        historyOutFormat \u003d argv[index++];\n      }\n      // Check for any extra arguments that don\u0027t belong here\n      if (argv.length \u003e index) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        // If it ends with .jhist, assume it\u0027s a jhist file; otherwise, assume\n        // it\u0027s a Job ID\n        if (historyFileOrJobId.endsWith(\".jhist\")) {\n          viewHistory(historyFileOrJobId, viewAllHistory, historyOutFile,\n              historyOutFormat);\n          exitCode \u003d 0;\n        } else {\n          Job job \u003d getJob(JobID.forName(historyFileOrJobId));\n          if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n          } else {\n            String historyUrl \u003d job.getHistoryUrl();\n            if (historyUrl \u003d\u003d null || historyUrl.isEmpty()) {\n              System.out.println(\"History file for job \" + historyFileOrJobId +\n                  \" is currently unavailable.\");\n            } else {\n              viewHistory(historyUrl, viewAllHistory, historyOutFile,\n                  historyOutFormat);\n              exitCode \u003d 0;\n            }\n          }\n        }\n      } else if (listEvents) {\n        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
      "commitDate": "18/02/16 5:58 PM",
      "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "16/12/15 3:26 PM",
      "commitNameOld": "d4e766de931c1cc478561a211215c517ba1f341c",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 64.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,331 +1,369 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n+    String historyOutFile \u003d null;\n+    String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n-      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n-         displayUsage(cmd);\n-         return exitCode;\n-      }\n       viewHistory \u003d true;\n-      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n+      if (argv.length \u003c 2 || argv.length \u003e 7) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+\n+      // Some arguments are optional while others are not, and some require\n+      // second arguments.  Due to this, the indexing can vary depending on\n+      // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n+      // [all] \u003cjobHistoryFile\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n+      //   1          2             3       4         5         6\n+      //   1          2             3       4\n+      //   1          2                               3         4\n+      //   1          2\n+      //              1             2       3         4         5\n+      //              1             2       3\n+      //              1                               2         3\n+      //              1\n+\n+      // \"all\" is optional, but comes first if specified\n+      int index \u003d 1;\n+      if (\"all\".equals(argv[index])) {\n+        index++;\n         viewAllHistory \u003d true;\n-        historyFile \u003d argv[2];\n-      } else {\n-        historyFile \u003d argv[1];\n+        if (argv.length \u003d\u003d 2) {\n+          displayUsage(cmd);\n+          return exitCode;\n+        }\n+      }\n+      // Get the job history file argument\n+      historyFile \u003d argv[index++];\n+      // \"-outfile\" is optional, but if specified requires a second argument\n+      if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n+        index++;\n+        historyOutFile \u003d argv[index++];\n+      }\n+      // \"-format\" is optional, but if specified required a second argument\n+      if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n+        index++;\n+        historyOutFormat \u003d argv[index++];\n+      }\n+      // Check for any extra arguments that don\u0027t belong here\n+      if (argv.length \u003e index) {\n+        displayUsage(cmd);\n+        return exitCode;\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n-        viewHistory(historyFile, viewAllHistory);\n+        viewHistory(historyFile, viewAllHistory, historyOutFile,\n+            historyOutFormat);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String historyOutFile \u003d null;\n    String historyOutFormat \u003d HistoryViewer.HUMAN_FORMAT;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      viewHistory \u003d true;\n      if (argv.length \u003c 2 || argv.length \u003e 7) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n\n      // Some arguments are optional while others are not, and some require\n      // second arguments.  Due to this, the indexing can vary depending on\n      // what\u0027s specified and what\u0027s left out, as summarized in the below table:\n      // [all] \u003cjobHistoryFile\u003e [-outfile \u003cfile\u003e] [-format \u003chuman|json\u003e]\n      //   1          2             3       4         5         6\n      //   1          2             3       4\n      //   1          2                               3         4\n      //   1          2\n      //              1             2       3         4         5\n      //              1             2       3\n      //              1                               2         3\n      //              1\n\n      // \"all\" is optional, but comes first if specified\n      int index \u003d 1;\n      if (\"all\".equals(argv[index])) {\n        index++;\n        viewAllHistory \u003d true;\n        if (argv.length \u003d\u003d 2) {\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      // Get the job history file argument\n      historyFile \u003d argv[index++];\n      // \"-outfile\" is optional, but if specified requires a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-outfile\".equals(argv[index])) {\n        index++;\n        historyOutFile \u003d argv[index++];\n      }\n      // \"-format\" is optional, but if specified required a second argument\n      if (argv.length \u003e index + 1 \u0026\u0026 \"-format\".equals(argv[index])) {\n        index++;\n        historyOutFormat \u003d argv[index++];\n      }\n      // Check for any extra arguments that don\u0027t belong here\n      if (argv.length \u003e index) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory, historyOutFile,\n            historyOutFormat);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "d4e766de931c1cc478561a211215c517ba1f341c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6566. Add retry support to mapreduce CLI tool. Contributed by Varun Vasudev\n",
      "commitDate": "16/12/15 3:26 PM",
      "commitName": "d4e766de931c1cc478561a211215c517ba1f341c",
      "commitAuthor": "Xuan",
      "commitDateOld": "16/12/15 3:11 PM",
      "commitNameOld": "60fe6d53d92c19c103219827fdb321780f1b33e5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,331 +1,331 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n-        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n+        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n-        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n+        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n-        Job job \u003d cluster.getJob(taskID.getJobID());\n+        Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n-        Job job \u003d cluster.getJob(taskID.getJobID());\n+        Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "60fe6d53d92c19c103219827fdb321780f1b33e5": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"MAPREDUCE-6566. Add retry support to mapreduce CLI tool. Contributed by Varun Vasudev\"\n\nThis reverts commit fc470840a0b1f5dc8b3b13f7ed99fd68ba728216.\n",
      "commitDate": "16/12/15 3:11 PM",
      "commitName": "60fe6d53d92c19c103219827fdb321780f1b33e5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/12/15 2:15 PM",
      "commitNameOld": "fc470840a0b1f5dc8b3b13f7ed99fd68ba728216",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 9.04,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,331 +1,331 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n-        Job job \u003d getJob(JobID.forName(jobid));\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n-        Job job \u003d getJob(JobID.forName(jobid));\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n-        Job job \u003d getJob(JobID.forName(jobid));\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n-        Job job \u003d getJob(JobID.forName(jobid));\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n-        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n+        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n-        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n+        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n-        Job job \u003d getJob(taskID.getJobID());\n+        Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n-        Job job \u003d getJob(taskID.getJobID());\n+        Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "fc470840a0b1f5dc8b3b13f7ed99fd68ba728216": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6566. Add retry support to mapreduce CLI tool. Contributed by Varun Vasudev\n",
      "commitDate": "07/12/15 2:15 PM",
      "commitName": "fc470840a0b1f5dc8b3b13f7ed99fd68ba728216",
      "commitAuthor": "Xuan",
      "commitDateOld": "24/11/15 2:07 PM",
      "commitNameOld": "f634505d48d97e4d461980d68a0cbdf87223646d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 13.01,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,331 +1,331 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n         try {\n           jpvalue \u003d Integer.parseInt(argv[2]);\n         } catch (NumberFormatException ne) {\n           LOG.info(ne);\n           displayUsage(cmd);\n           return exitCode;\n         }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n-        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        Job job \u003d getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           if (jp !\u003d null) {\n             job.setPriority(jp);\n           } else {\n             job.setPriorityAsInteger(jpvalue);\n           }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n-        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n+        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n-        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n+        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n-        Job job \u003d cluster.getJob(taskID.getJobID());\n+        Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n-        Job job \u003d cluster.getJob(taskID.getJobID());\n+        Job job \u003d getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "f634505d48d97e4d461980d68a0cbdf87223646d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5870. Support for passing Job priority through Application Submission Context in Mapreduce Side. Contributed by Sunil G\n",
      "commitDate": "24/11/15 2:07 PM",
      "commitName": "f634505d48d97e4d461980d68a0cbdf87223646d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "08/10/15 6:54 PM",
      "commitNameOld": "584cf3bb35b96749f711b9e7145cf3fb71897cd9",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 46.84,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,322 +1,331 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n+    int jpvalue \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n-        jp \u003d JobPriority.valueOf(argv[2]); \n+        jp \u003d JobPriority.valueOf(argv[2]);\n       } catch (IllegalArgumentException iae) {\n-        LOG.info(iae);\n-        displayUsage(cmd);\n-        return exitCode;\n+        try {\n+          jpvalue \u003d Integer.parseInt(argv[2]);\n+        } catch (NumberFormatException ne) {\n+          LOG.info(ne);\n+          displayUsage(cmd);\n+          return exitCode;\n+        }\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(\n           org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(\n           org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n-          job.setPriority(jp);\n+          if (jp !\u003d null) {\n+            job.setPriority(jp);\n+          } else {\n+            job.setPriorityAsInteger(jpvalue);\n+          }\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    int jpvalue \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]);\n      } catch (IllegalArgumentException iae) {\n        try {\n          jpvalue \u003d Integer.parseInt(argv[2]);\n        } catch (NumberFormatException ne) {\n          LOG.info(ne);\n          displayUsage(cmd);\n          return exitCode;\n        }\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          if (jp !\u003d null) {\n            job.setPriority(jp);\n          } else {\n            job.setPriorityAsInteger(jpvalue);\n          }\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,320 +1,322 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n-      if (!taskTypes.contains(taskType.toUpperCase())) {\n+      if (!taskTypes.contains(\n+          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n-      if (!taskStates.contains(taskState.toLowerCase())) {\n+      if (!taskStates.contains(\n+          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(\n          org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(\n          org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,320 +1,320 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n-      if (!taskTypes.contains(taskType.toUpperCase(Locale.ENGLISH))) {\n+      if (!taskTypes.contains(taskType.toUpperCase())) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n-      if (!taskStates.contains(taskState.toLowerCase(Locale.ENGLISH))) {\n+      if (!taskStates.contains(taskState.toLowerCase())) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(taskType.toUpperCase())) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(taskState.toLowerCase())) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "12/02/15 3:35 AM",
      "commitNameOld": "ac8d52bf50bba1a29489ee75fd90717d8a2b0cc9",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.69,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,320 +1,320 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n-      if (!taskTypes.contains(taskType.toUpperCase())) {\n+      if (!taskTypes.contains(taskType.toUpperCase(Locale.ENGLISH))) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n-      if (!taskStates.contains(taskState.toLowerCase())) {\n+      if (!taskStates.contains(taskState.toLowerCase(Locale.ENGLISH))) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           JobStatus jobStatus \u003d job.getStatus();\n           if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n             System.out.println(\"Could not mark the job \" + jobid\n                 + \" as killed, as it has already failed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n             System.out\n                 .println(\"The job \" + jobid + \" has already been killed.\");\n             exitCode \u003d -1;\n           } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n             System.out.println(\"Could not kill the job \" + jobid\n                 + \", as it has already succeeded.\");\n             exitCode \u003d -1;\n           } else {\n             job.killJob();\n             System.out.println(\"Killed job \" + jobid);\n             exitCode \u003d 0;\n           }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(taskType.toUpperCase(Locale.ENGLISH))) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(taskState.toLowerCase(Locale.ENGLISH))) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "ac8d52bf50bba1a29489ee75fd90717d8a2b0cc9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4431. mapred command should print the reason on killing already completed jobs. Contributed by Devaraj K.\n",
      "commitDate": "12/02/15 3:35 AM",
      "commitName": "ac8d52bf50bba1a29489ee75fd90717d8a2b0cc9",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "03/10/13 7:36 PM",
      "commitNameOld": "6ff600d9e3496008d81361c17ea427a8675cd0d4",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 496.37,
      "commitsBetweenForRepo": 3763,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,305 +1,320 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(taskType.toUpperCase())) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(taskState.toLowerCase())) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n-          job.killJob();\n-          System.out.println(\"Killed job \" + jobid);\n-          exitCode \u003d 0;\n+          JobStatus jobStatus \u003d job.getStatus();\n+          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n+            System.out.println(\"Could not mark the job \" + jobid\n+                + \" as killed, as it has already failed.\");\n+            exitCode \u003d -1;\n+          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n+            System.out\n+                .println(\"The job \" + jobid + \" has already been killed.\");\n+            exitCode \u003d -1;\n+          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n+            System.out.println(\"Could not kill the job \" + jobid\n+                + \", as it has already succeeded.\");\n+            exitCode \u003d -1;\n+          } else {\n+            job.killJob();\n+            System.out.println(\"Killed job \" + jobid);\n+            exitCode \u003d 0;\n+          }\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(taskType.toUpperCase())) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(taskState.toLowerCase())) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          JobStatus jobStatus \u003d job.getStatus();\n          if (jobStatus.getState() \u003d\u003d JobStatus.State.FAILED) {\n            System.out.println(\"Could not mark the job \" + jobid\n                + \" as killed, as it has already failed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.KILLED) {\n            System.out\n                .println(\"The job \" + jobid + \" has already been killed.\");\n            exitCode \u003d -1;\n          } else if (jobStatus.getState() \u003d\u003d JobStatus.State.SUCCEEDED) {\n            System.out.println(\"Could not kill the job \" + jobid\n                + \", as it has already succeeded.\");\n            exitCode \u003d -1;\n          } else {\n            job.killJob();\n            System.out.println(\"Killed job \" + jobid);\n            exitCode \u003d 0;\n          }\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "6ff600d9e3496008d81361c17ea427a8675cd0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1131.  logs command should return an appropriate error message if YARN application is still running. Contributed by Siddharth Seth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529068 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 7:36 PM",
      "commitName": "6ff600d9e3496008d81361c17ea427a8675cd0d4",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "18/06/13 1:25 PM",
      "commitNameOld": "52fe4e6be94e96dc214dac66a36718ceedf53f42",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 107.26,
      "commitsBetweenForRepo": 619,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,305 +1,305 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(taskType.toUpperCase())) {\n         System.out.println(\"Error: Invalid task-type: \" + taskType);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (!taskStates.contains(taskState.toLowerCase())) {\n         System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n-        LogDumper logDumper \u003d new LogDumper();\n+        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(taskType.toUpperCase())) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(taskState.toLowerCase())) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogCLIHelpers logDumper \u003d new LogCLIHelpers();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "52fe4e6be94e96dc214dac66a36718ceedf53f42": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5316. job -list-attempt-ids command does not handle illegal task-state. Contributed by Ashwin Shankar\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494285 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 1:25 PM",
      "commitName": "52fe4e6be94e96dc214dac66a36718ceedf53f42",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "13/06/13 2:01 PM",
      "commitNameOld": "8dc0d5af432cc4fc34630c0dcfada6823b1abd5c",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 4.97,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,300 +1,305 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n       if (!taskTypes.contains(taskType.toUpperCase())) {\n-        System.out.println(\"Error: Invalid task-type: \"+taskType);\n+        System.out.println(\"Error: Invalid task-type: \" + taskType);\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      if (!taskStates.contains(taskState.toLowerCase())) {\n+        System.out.println(\"Error: Invalid task-state: \" + taskState);\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogDumper logDumper \u003d new LogDumper();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(taskType.toUpperCase())) {\n        System.out.println(\"Error: Invalid task-type: \" + taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (!taskStates.contains(taskState.toLowerCase())) {\n        System.out.println(\"Error: Invalid task-state: \" + taskState);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogDumper logDumper \u003d new LogDumper();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "8dc0d5af432cc4fc34630c0dcfada6823b1abd5c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4019. -list-attempt-ids is not working. Contributed by Ashwin Shankar, Devaraj K, and B Anil Kumar\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 2:01 PM",
      "commitName": "8dc0d5af432cc4fc34630c0dcfada6823b1abd5c",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "12/06/13 11:47 AM",
      "commitNameOld": "c9fce677b33bf7e5492bdd25dbd53cd57a2e6e99",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,295 +1,300 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n+      if (!taskTypes.contains(taskType.toUpperCase())) {\n+        System.out.println(\"Error: Invalid task-type: \"+taskType);\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n-    cluster \u003d new Cluster(getConf());\n+    cluster \u003d createCluster();\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogDumper logDumper \u003d new LogDumper();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n      if (!taskTypes.contains(taskType.toUpperCase())) {\n        System.out.println(\"Error: Invalid task-type: \"+taskType);\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d createCluster();\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogDumper logDumper \u003d new LogDumper();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "c9fce677b33bf7e5492bdd25dbd53cd57a2e6e99": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5304. mapreduce.Job killTask/failTask/getTaskCompletionEvents methods have incompatible signature changes. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492360 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/13 11:47 AM",
      "commitName": "c9fce677b33bf7e5492bdd25dbd53cd57a2e6e99",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "16/04/13 9:11 AM",
      "commitNameOld": "9ea20fc537b19a8811d0dbebaa7be7dad070c8b5",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 57.11,
      "commitsBetweenForRepo": 367,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,295 +1,295 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d new Cluster(getConf());\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n         exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n-        } else if (job.killTask(taskID)) {\n+        } else if (job.killTask(taskID, false)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n-        } else if(job.failTask(taskID)) {\n+        } else if(job.killTask(taskID, true)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogDumper logDumper \u003d new LogDumper();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID, false)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.killTask(taskID, true)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogDumper logDumper \u003d new LogDumper();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "9ea20fc537b19a8811d0dbebaa7be7dad070c8b5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5015. Coverage fix for org.apache.hadoop.mapreduce.tools.CLI (Aleksey Gorshkov via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1468483 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/04/13 9:11 AM",
      "commitName": "9ea20fc537b19a8811d0dbebaa7be7dad070c8b5",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "14/11/12 4:16 PM",
      "commitNameOld": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 152.66,
      "commitsBetweenForRepo": 706,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,294 +1,295 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d new Cluster(getConf());\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n+        exitCode \u003d 0;\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.failTask(taskID)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogDumper logDumper \u003d new LogDumper();\n         logDumper.setConf(getConf());\n         exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n        exitCode \u003d 0;\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogDumper logDumper \u003d new LogDumper();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "6ba0375b21c4ce07d2b6b592c4963f705c35222b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3744. Fix the yarn logs command line. Improve error messages for mapred job -logs. (Contributed by Jason Lowe)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 5:43 PM",
      "commitName": "6ba0375b21c4ce07d2b6b592c4963f705c35222b",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "27/01/12 12:44 AM",
      "commitNameOld": "0cb3dd913b0626db2f1edd35d6309a604fc62aee",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.71,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,294 +1,294 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n     boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n     } else if (\"-logs\".equals(cmd)) {\n       if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n         logs \u003d true;\n         jobid \u003d argv[1];\n         if (argv.length \u003d\u003d 3) {\n           taskid \u003d argv[2];\n         }  else {\n           taskid \u003d null;\n         }\n       } else {\n         displayUsage(cmd);\n         return exitCode;\n       }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d new Cluster(getConf());\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.failTask(taskID)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if (logs) {\n         try {\n         JobID jobID \u003d JobID.forName(jobid);\n         TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n         LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n         LogDumper logDumper \u003d new LogDumper();\n         logDumper.setConf(getConf());\n-        logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n+        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n             logParams.getContainerId(), logParams.getNodeId(),\n             logParams.getOwner());\n         } catch (IOException e) {\n           if (e instanceof RemoteException) {\n             throw e;\n           } \n           System.out.println(e.getMessage());\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogDumper logDumper \u003d new LogDumper();\n        logDumper.setConf(getConf());\n        exitCode \u003d logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "47a381e306877750b5a3ce5d76e0a5ff652ec188": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3146. Added a MR specific command line to dump logs for a given TaskAttemptID. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195349 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/11 11:42 PM",
      "commitName": "47a381e306877750b5a3ce5d76e0a5ff652ec188",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/10/11 4:29 PM",
      "commitNameOld": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 18.3,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,264 +1,294 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n+    boolean logs \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n+    } else if (\"-logs\".equals(cmd)) {\n+      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n+        logs \u003d true;\n+        jobid \u003d argv[1];\n+        if (argv.length \u003d\u003d 3) {\n+          taskid \u003d argv[2];\n+        }  else {\n+          taskid \u003d null;\n+        }\n+      } else {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     cluster \u003d new Cluster(getConf());\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.failTask(taskID)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n+      } else if (logs) {\n+        try {\n+        JobID jobID \u003d JobID.forName(jobid);\n+        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n+        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n+        LogDumper logDumper \u003d new LogDumper();\n+        logDumper.setConf(getConf());\n+        logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n+            logParams.getContainerId(), logParams.getNodeId(),\n+            logParams.getOwner());\n+        } catch (IOException e) {\n+          if (e instanceof RemoteException) {\n+            throw e;\n+          } \n+          System.out.println(e.getMessage());\n+        }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n    boolean logs \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else if (\"-logs\".equals(cmd)) {\n      if (argv.length \u003d\u003d 2 || argv.length \u003d\u003d3) {\n        logs \u003d true;\n        jobid \u003d argv[1];\n        if (argv.length \u003d\u003d 3) {\n          taskid \u003d argv[2];\n        }  else {\n          taskid \u003d null;\n        }\n      } else {\n        displayUsage(cmd);\n        return exitCode;\n      }\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if (logs) {\n        try {\n        JobID jobID \u003d JobID.forName(jobid);\n        TaskAttemptID taskAttemptID \u003d TaskAttemptID.forName(taskid);\n        LogParams logParams \u003d cluster.getLogParams(jobID, taskAttemptID);\n        LogDumper logDumper \u003d new LogDumper();\n        logDumper.setConf(getConf());\n        logDumper.dumpAContainersLogs(logParams.getApplicationId(),\n            logParams.getContainerId(), logParams.getNodeId(),\n            logParams.getOwner());\n        } catch (IOException e) {\n          if (e instanceof RemoteException) {\n            throw e;\n          } \n          System.out.println(e.getMessage());\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2789. Complete schedulingInfo on CLI. Contributed by Eric Payne.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1182616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/10/11 4:29 PM",
      "commitName": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/09/11 7:50 PM",
      "commitNameOld": "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 24.86,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,264 +1,264 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n-    Cluster cluster \u003d new Cluster(getConf());\n+    cluster \u003d new Cluster(getConf());\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n         Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.failTask(taskID)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-1788. o.a.h.mapreduce.Job shouldn\u0027t make a copy of the JobConf. (Arun Murthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1172171 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/11 7:50 PM",
      "commitName": "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "09/09/11 3:42 PM",
      "commitNameOld": "b982e6205f255c62b281a82ccf95f239b4b44e04",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 8.17,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,264 +1,264 @@\n   public int run(String[] argv) throws Exception {\n     int exitCode \u003d -1;\n     if (argv.length \u003c 1) {\n       displayUsage(\"\");\n       return exitCode;\n     }    \n     // process arguments\n     String cmd \u003d argv[0];\n     String submitJobFile \u003d null;\n     String jobid \u003d null;\n     String taskid \u003d null;\n     String historyFile \u003d null;\n     String counterGroupName \u003d null;\n     String counterName \u003d null;\n     JobPriority jp \u003d null;\n     String taskType \u003d null;\n     String taskState \u003d null;\n     int fromEvent \u003d 0;\n     int nEvents \u003d 0;\n     boolean getStatus \u003d false;\n     boolean getCounter \u003d false;\n     boolean killJob \u003d false;\n     boolean listEvents \u003d false;\n     boolean viewHistory \u003d false;\n     boolean viewAllHistory \u003d false;\n     boolean listJobs \u003d false;\n     boolean listAllJobs \u003d false;\n     boolean listActiveTrackers \u003d false;\n     boolean listBlacklistedTrackers \u003d false;\n     boolean displayTasks \u003d false;\n     boolean killTask \u003d false;\n     boolean failTask \u003d false;\n     boolean setJobPriority \u003d false;\n \n     if (\"-submit\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       submitJobFile \u003d argv[1];\n     } else if (\"-status\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       getStatus \u003d true;\n     } else if(\"-counter\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       getCounter \u003d true;\n       jobid \u003d argv[1];\n       counterGroupName \u003d argv[2];\n       counterName \u003d argv[3];\n     } else if (\"-kill\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       killJob \u003d true;\n     } else if (\"-set-priority\".equals(cmd)) {\n       if (argv.length !\u003d 3) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       try {\n         jp \u003d JobPriority.valueOf(argv[2]); \n       } catch (IllegalArgumentException iae) {\n         LOG.info(iae);\n         displayUsage(cmd);\n         return exitCode;\n       }\n       setJobPriority \u003d true; \n     } else if (\"-events\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       fromEvent \u003d Integer.parseInt(argv[2]);\n       nEvents \u003d Integer.parseInt(argv[3]);\n       listEvents \u003d true;\n     } else if (\"-history\".equals(cmd)) {\n       if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n          displayUsage(cmd);\n          return exitCode;\n       }\n       viewHistory \u003d true;\n       if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n         viewAllHistory \u003d true;\n         historyFile \u003d argv[2];\n       } else {\n         historyFile \u003d argv[1];\n       }\n     } else if (\"-list\".equals(cmd)) {\n       if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n         listAllJobs \u003d true;\n       } else {\n         listJobs \u003d true;\n       }\n     } else if(\"-kill-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       killTask \u003d true;\n       taskid \u003d argv[1];\n     } else if(\"-fail-task\".equals(cmd)) {\n       if (argv.length !\u003d 2) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       failTask \u003d true;\n       taskid \u003d argv[1];\n     } else if (\"-list-active-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listActiveTrackers \u003d true;\n     } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n       if (argv.length !\u003d 1) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       listBlacklistedTrackers \u003d true;\n     } else if (\"-list-attempt-ids\".equals(cmd)) {\n       if (argv.length !\u003d 4) {\n         displayUsage(cmd);\n         return exitCode;\n       }\n       jobid \u003d argv[1];\n       taskType \u003d argv[2];\n       taskState \u003d argv[3];\n       displayTasks \u003d true;\n     } else {\n       displayUsage(cmd);\n       return exitCode;\n     }\n \n     // initialize cluster\n     Cluster cluster \u003d new Cluster(getConf());\n         \n     // Submit the request\n     try {\n       if (submitJobFile !\u003d null) {\n-        Job job \u003d Job.getInstance(cluster, new JobConf(submitJobFile));\n+        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n         job.submit();\n         System.out.println(\"Created job \" + job.getJobID());\n         exitCode \u003d 0;\n       } else if (getStatus) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           System.out.println();\n           System.out.println(job);\n           if (counters !\u003d null) {\n             System.out.println(counters);\n           } else {\n             System.out.println(\"Counters not available. Job is retired.\");\n           }\n           exitCode \u003d 0;\n         }\n       } else if (getCounter) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           Counters counters \u003d job.getCounters();\n           if (counters \u003d\u003d null) {\n             System.out.println(\"Counters not available for retired job \" + \n             jobid);\n             exitCode \u003d -1;\n           } else {\n             System.out.println(getCounter(counters,\n               counterGroupName, counterName));\n             exitCode \u003d 0;\n           }\n         }\n       } else if (killJob) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.killJob();\n           System.out.println(\"Killed job \" + jobid);\n           exitCode \u003d 0;\n         }\n       } else if (setJobPriority) {\n         Job job \u003d cluster.getJob(JobID.forName(jobid));\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else {\n           job.setPriority(jp);\n           System.out.println(\"Changed job priority.\");\n           exitCode \u003d 0;\n         } \n       } else if (viewHistory) {\n         viewHistory(historyFile, viewAllHistory);\n         exitCode \u003d 0;\n       } else if (listEvents) {\n         listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n         exitCode \u003d 0;\n       } else if (listJobs) {\n         listJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listAllJobs) {\n         listAllJobs(cluster);\n         exitCode \u003d 0;\n       } else if (listActiveTrackers) {\n         listActiveTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (listBlacklistedTrackers) {\n         listBlacklistedTrackers(cluster);\n         exitCode \u003d 0;\n       } else if (displayTasks) {\n         displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n       } else if(killTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n           System.out.println(\"Could not find job \" + jobid);\n         } else if (job.killTask(taskID)) {\n           System.out.println(\"Killed task \" + taskid);\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not kill task \" + taskid);\n           exitCode \u003d -1;\n         }\n       } else if(failTask) {\n         TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n         Job job \u003d cluster.getJob(taskID.getJobID());\n         if (job \u003d\u003d null) {\n             System.out.println(\"Could not find job \" + jobid);\n         } else if(job.failTask(taskID)) {\n           System.out.println(\"Killed task \" + taskID + \" by failing it\");\n           exitCode \u003d 0;\n         } else {\n           System.out.println(\"Could not fail task \" + taskid);\n           exitCode \u003d -1;\n         }\n       }\n     } catch (RemoteException re) {\n       IOException unwrappedException \u003d re.unwrapRemoteException();\n       if (unwrappedException instanceof AccessControlException) {\n         System.out.println(unwrappedException.getMessage());\n       } else {\n         throw re;\n       }\n     } finally {\n       cluster.close();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    Cluster cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    Cluster cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(cluster, new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    Cluster cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(cluster, new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/tools/CLI.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/tools/CLI.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,264 @@\n+  public int run(String[] argv) throws Exception {\n+    int exitCode \u003d -1;\n+    if (argv.length \u003c 1) {\n+      displayUsage(\"\");\n+      return exitCode;\n+    }    \n+    // process arguments\n+    String cmd \u003d argv[0];\n+    String submitJobFile \u003d null;\n+    String jobid \u003d null;\n+    String taskid \u003d null;\n+    String historyFile \u003d null;\n+    String counterGroupName \u003d null;\n+    String counterName \u003d null;\n+    JobPriority jp \u003d null;\n+    String taskType \u003d null;\n+    String taskState \u003d null;\n+    int fromEvent \u003d 0;\n+    int nEvents \u003d 0;\n+    boolean getStatus \u003d false;\n+    boolean getCounter \u003d false;\n+    boolean killJob \u003d false;\n+    boolean listEvents \u003d false;\n+    boolean viewHistory \u003d false;\n+    boolean viewAllHistory \u003d false;\n+    boolean listJobs \u003d false;\n+    boolean listAllJobs \u003d false;\n+    boolean listActiveTrackers \u003d false;\n+    boolean listBlacklistedTrackers \u003d false;\n+    boolean displayTasks \u003d false;\n+    boolean killTask \u003d false;\n+    boolean failTask \u003d false;\n+    boolean setJobPriority \u003d false;\n+\n+    if (\"-submit\".equals(cmd)) {\n+      if (argv.length !\u003d 2) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      submitJobFile \u003d argv[1];\n+    } else if (\"-status\".equals(cmd)) {\n+      if (argv.length !\u003d 2) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      jobid \u003d argv[1];\n+      getStatus \u003d true;\n+    } else if(\"-counter\".equals(cmd)) {\n+      if (argv.length !\u003d 4) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      getCounter \u003d true;\n+      jobid \u003d argv[1];\n+      counterGroupName \u003d argv[2];\n+      counterName \u003d argv[3];\n+    } else if (\"-kill\".equals(cmd)) {\n+      if (argv.length !\u003d 2) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      jobid \u003d argv[1];\n+      killJob \u003d true;\n+    } else if (\"-set-priority\".equals(cmd)) {\n+      if (argv.length !\u003d 3) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      jobid \u003d argv[1];\n+      try {\n+        jp \u003d JobPriority.valueOf(argv[2]); \n+      } catch (IllegalArgumentException iae) {\n+        LOG.info(iae);\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      setJobPriority \u003d true; \n+    } else if (\"-events\".equals(cmd)) {\n+      if (argv.length !\u003d 4) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      jobid \u003d argv[1];\n+      fromEvent \u003d Integer.parseInt(argv[2]);\n+      nEvents \u003d Integer.parseInt(argv[3]);\n+      listEvents \u003d true;\n+    } else if (\"-history\".equals(cmd)) {\n+      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n+         displayUsage(cmd);\n+         return exitCode;\n+      }\n+      viewHistory \u003d true;\n+      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n+        viewAllHistory \u003d true;\n+        historyFile \u003d argv[2];\n+      } else {\n+        historyFile \u003d argv[1];\n+      }\n+    } else if (\"-list\".equals(cmd)) {\n+      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n+        listAllJobs \u003d true;\n+      } else {\n+        listJobs \u003d true;\n+      }\n+    } else if(\"-kill-task\".equals(cmd)) {\n+      if (argv.length !\u003d 2) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      killTask \u003d true;\n+      taskid \u003d argv[1];\n+    } else if(\"-fail-task\".equals(cmd)) {\n+      if (argv.length !\u003d 2) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      failTask \u003d true;\n+      taskid \u003d argv[1];\n+    } else if (\"-list-active-trackers\".equals(cmd)) {\n+      if (argv.length !\u003d 1) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      listActiveTrackers \u003d true;\n+    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n+      if (argv.length !\u003d 1) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      listBlacklistedTrackers \u003d true;\n+    } else if (\"-list-attempt-ids\".equals(cmd)) {\n+      if (argv.length !\u003d 4) {\n+        displayUsage(cmd);\n+        return exitCode;\n+      }\n+      jobid \u003d argv[1];\n+      taskType \u003d argv[2];\n+      taskState \u003d argv[3];\n+      displayTasks \u003d true;\n+    } else {\n+      displayUsage(cmd);\n+      return exitCode;\n+    }\n+\n+    // initialize cluster\n+    Cluster cluster \u003d new Cluster(getConf());\n+        \n+    // Submit the request\n+    try {\n+      if (submitJobFile !\u003d null) {\n+        Job job \u003d Job.getInstance(cluster, new JobConf(submitJobFile));\n+        job.submit();\n+        System.out.println(\"Created job \" + job.getJobID());\n+        exitCode \u003d 0;\n+      } else if (getStatus) {\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          Counters counters \u003d job.getCounters();\n+          System.out.println();\n+          System.out.println(job);\n+          if (counters !\u003d null) {\n+            System.out.println(counters);\n+          } else {\n+            System.out.println(\"Counters not available. Job is retired.\");\n+          }\n+          exitCode \u003d 0;\n+        }\n+      } else if (getCounter) {\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          Counters counters \u003d job.getCounters();\n+          if (counters \u003d\u003d null) {\n+            System.out.println(\"Counters not available for retired job \" + \n+            jobid);\n+            exitCode \u003d -1;\n+          } else {\n+            System.out.println(getCounter(counters,\n+              counterGroupName, counterName));\n+            exitCode \u003d 0;\n+          }\n+        }\n+      } else if (killJob) {\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          job.killJob();\n+          System.out.println(\"Killed job \" + jobid);\n+          exitCode \u003d 0;\n+        }\n+      } else if (setJobPriority) {\n+        Job job \u003d cluster.getJob(JobID.forName(jobid));\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else {\n+          job.setPriority(jp);\n+          System.out.println(\"Changed job priority.\");\n+          exitCode \u003d 0;\n+        } \n+      } else if (viewHistory) {\n+        viewHistory(historyFile, viewAllHistory);\n+        exitCode \u003d 0;\n+      } else if (listEvents) {\n+        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n+        exitCode \u003d 0;\n+      } else if (listJobs) {\n+        listJobs(cluster);\n+        exitCode \u003d 0;\n+      } else if (listAllJobs) {\n+        listAllJobs(cluster);\n+        exitCode \u003d 0;\n+      } else if (listActiveTrackers) {\n+        listActiveTrackers(cluster);\n+        exitCode \u003d 0;\n+      } else if (listBlacklistedTrackers) {\n+        listBlacklistedTrackers(cluster);\n+        exitCode \u003d 0;\n+      } else if (displayTasks) {\n+        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n+      } else if(killTask) {\n+        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n+        Job job \u003d cluster.getJob(taskID.getJobID());\n+        if (job \u003d\u003d null) {\n+          System.out.println(\"Could not find job \" + jobid);\n+        } else if (job.killTask(taskID)) {\n+          System.out.println(\"Killed task \" + taskid);\n+          exitCode \u003d 0;\n+        } else {\n+          System.out.println(\"Could not kill task \" + taskid);\n+          exitCode \u003d -1;\n+        }\n+      } else if(failTask) {\n+        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n+        Job job \u003d cluster.getJob(taskID.getJobID());\n+        if (job \u003d\u003d null) {\n+            System.out.println(\"Could not find job \" + jobid);\n+        } else if(job.failTask(taskID)) {\n+          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n+          exitCode \u003d 0;\n+        } else {\n+          System.out.println(\"Could not fail task \" + taskid);\n+          exitCode \u003d -1;\n+        }\n+      }\n+    } catch (RemoteException re) {\n+      IOException unwrappedException \u003d re.unwrapRemoteException();\n+      if (unwrappedException instanceof AccessControlException) {\n+        System.out.println(unwrappedException.getMessage());\n+      } else {\n+        throw re;\n+      }\n+    } finally {\n+      cluster.close();\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    int exitCode \u003d -1;\n    if (argv.length \u003c 1) {\n      displayUsage(\"\");\n      return exitCode;\n    }    \n    // process arguments\n    String cmd \u003d argv[0];\n    String submitJobFile \u003d null;\n    String jobid \u003d null;\n    String taskid \u003d null;\n    String historyFile \u003d null;\n    String counterGroupName \u003d null;\n    String counterName \u003d null;\n    JobPriority jp \u003d null;\n    String taskType \u003d null;\n    String taskState \u003d null;\n    int fromEvent \u003d 0;\n    int nEvents \u003d 0;\n    boolean getStatus \u003d false;\n    boolean getCounter \u003d false;\n    boolean killJob \u003d false;\n    boolean listEvents \u003d false;\n    boolean viewHistory \u003d false;\n    boolean viewAllHistory \u003d false;\n    boolean listJobs \u003d false;\n    boolean listAllJobs \u003d false;\n    boolean listActiveTrackers \u003d false;\n    boolean listBlacklistedTrackers \u003d false;\n    boolean displayTasks \u003d false;\n    boolean killTask \u003d false;\n    boolean failTask \u003d false;\n    boolean setJobPriority \u003d false;\n\n    if (\"-submit\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      submitJobFile \u003d argv[1];\n    } else if (\"-status\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      getStatus \u003d true;\n    } else if(\"-counter\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      getCounter \u003d true;\n      jobid \u003d argv[1];\n      counterGroupName \u003d argv[2];\n      counterName \u003d argv[3];\n    } else if (\"-kill\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      killJob \u003d true;\n    } else if (\"-set-priority\".equals(cmd)) {\n      if (argv.length !\u003d 3) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      try {\n        jp \u003d JobPriority.valueOf(argv[2]); \n      } catch (IllegalArgumentException iae) {\n        LOG.info(iae);\n        displayUsage(cmd);\n        return exitCode;\n      }\n      setJobPriority \u003d true; \n    } else if (\"-events\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      fromEvent \u003d Integer.parseInt(argv[2]);\n      nEvents \u003d Integer.parseInt(argv[3]);\n      listEvents \u003d true;\n    } else if (\"-history\".equals(cmd)) {\n      if (argv.length !\u003d 2 \u0026\u0026 !(argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1]))) {\n         displayUsage(cmd);\n         return exitCode;\n      }\n      viewHistory \u003d true;\n      if (argv.length \u003d\u003d 3 \u0026\u0026 \"all\".equals(argv[1])) {\n        viewAllHistory \u003d true;\n        historyFile \u003d argv[2];\n      } else {\n        historyFile \u003d argv[1];\n      }\n    } else if (\"-list\".equals(cmd)) {\n      if (argv.length !\u003d 1 \u0026\u0026 !(argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1]))) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      if (argv.length \u003d\u003d 2 \u0026\u0026 \"all\".equals(argv[1])) {\n        listAllJobs \u003d true;\n      } else {\n        listJobs \u003d true;\n      }\n    } else if(\"-kill-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      killTask \u003d true;\n      taskid \u003d argv[1];\n    } else if(\"-fail-task\".equals(cmd)) {\n      if (argv.length !\u003d 2) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      failTask \u003d true;\n      taskid \u003d argv[1];\n    } else if (\"-list-active-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listActiveTrackers \u003d true;\n    } else if (\"-list-blacklisted-trackers\".equals(cmd)) {\n      if (argv.length !\u003d 1) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      listBlacklistedTrackers \u003d true;\n    } else if (\"-list-attempt-ids\".equals(cmd)) {\n      if (argv.length !\u003d 4) {\n        displayUsage(cmd);\n        return exitCode;\n      }\n      jobid \u003d argv[1];\n      taskType \u003d argv[2];\n      taskState \u003d argv[3];\n      displayTasks \u003d true;\n    } else {\n      displayUsage(cmd);\n      return exitCode;\n    }\n\n    // initialize cluster\n    Cluster cluster \u003d new Cluster(getConf());\n        \n    // Submit the request\n    try {\n      if (submitJobFile !\u003d null) {\n        Job job \u003d Job.getInstance(cluster, new JobConf(submitJobFile));\n        job.submit();\n        System.out.println(\"Created job \" + job.getJobID());\n        exitCode \u003d 0;\n      } else if (getStatus) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          System.out.println();\n          System.out.println(job);\n          if (counters !\u003d null) {\n            System.out.println(counters);\n          } else {\n            System.out.println(\"Counters not available. Job is retired.\");\n          }\n          exitCode \u003d 0;\n        }\n      } else if (getCounter) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          Counters counters \u003d job.getCounters();\n          if (counters \u003d\u003d null) {\n            System.out.println(\"Counters not available for retired job \" + \n            jobid);\n            exitCode \u003d -1;\n          } else {\n            System.out.println(getCounter(counters,\n              counterGroupName, counterName));\n            exitCode \u003d 0;\n          }\n        }\n      } else if (killJob) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.killJob();\n          System.out.println(\"Killed job \" + jobid);\n          exitCode \u003d 0;\n        }\n      } else if (setJobPriority) {\n        Job job \u003d cluster.getJob(JobID.forName(jobid));\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else {\n          job.setPriority(jp);\n          System.out.println(\"Changed job priority.\");\n          exitCode \u003d 0;\n        } \n      } else if (viewHistory) {\n        viewHistory(historyFile, viewAllHistory);\n        exitCode \u003d 0;\n      } else if (listEvents) {\n        listEvents(cluster.getJob(JobID.forName(jobid)), fromEvent, nEvents);\n        exitCode \u003d 0;\n      } else if (listJobs) {\n        listJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listAllJobs) {\n        listAllJobs(cluster);\n        exitCode \u003d 0;\n      } else if (listActiveTrackers) {\n        listActiveTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (listBlacklistedTrackers) {\n        listBlacklistedTrackers(cluster);\n        exitCode \u003d 0;\n      } else if (displayTasks) {\n        displayTasks(cluster.getJob(JobID.forName(jobid)), taskType, taskState);\n      } else if(killTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n          System.out.println(\"Could not find job \" + jobid);\n        } else if (job.killTask(taskID)) {\n          System.out.println(\"Killed task \" + taskid);\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not kill task \" + taskid);\n          exitCode \u003d -1;\n        }\n      } else if(failTask) {\n        TaskAttemptID taskID \u003d TaskAttemptID.forName(taskid);\n        Job job \u003d cluster.getJob(taskID.getJobID());\n        if (job \u003d\u003d null) {\n            System.out.println(\"Could not find job \" + jobid);\n        } else if(job.failTask(taskID)) {\n          System.out.println(\"Killed task \" + taskID + \" by failing it\");\n          exitCode \u003d 0;\n        } else {\n          System.out.println(\"Could not fail task \" + taskid);\n          exitCode \u003d -1;\n        }\n      }\n    } catch (RemoteException re) {\n      IOException unwrappedException \u003d re.unwrapRemoteException();\n      if (unwrappedException instanceof AccessControlException) {\n        System.out.println(unwrappedException.getMessage());\n      } else {\n        throw re;\n      }\n    } finally {\n      cluster.close();\n    }\n    return exitCode;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/tools/CLI.java"
    }
  }
}