{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogCLIHelpers.java",
  "functionName": "dumpAContainerLogsForLogType",
  "functionId": "dumpAContainerLogsForLogType___options-ContainerLogsRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
  "functionStartLine": 182,
  "functionEndLine": 185,
  "numCommitsSeen": 69,
  "timeTaken": 4483,
  "changeHistory": [
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "ef1757790d89cc72f88f5330761b1c8901c59e94",
    "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
    "6dd6ca442aba8612c3780399a42bb473e4483021",
    "a77d628339afaf2f5a085c73fd81a805b18348c9"
  ],
  "changeHistoryShort": {
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": "Ymultichange(Yrename,Ybodychange)",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "ef1757790d89cc72f88f5330761b1c8901c59e94": "Ymultichange(Yparameterchange,Ybodychange)",
    "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5": "Ybodychange",
    "6dd6ca442aba8612c3780399a42bb473e4483021": "Ybodychange",
    "a77d628339afaf2f5a085c73fd81a805b18348c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
      "commitDate": "22/06/16 9:48 PM",
      "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
          "commitDate": "22/06/16 9:48 PM",
          "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthor": "Xuan",
          "commitDateOld": "15/06/16 12:12 AM",
          "commitNameOld": "25064fb2fb79751cedbb8019900d811e07549ecf",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 7.9,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)\n+  public int dumpAContainerLogsForLogType(ContainerLogsRequest options)\n       throws IOException {\n-    return dumpAContainersLogsForALogType(options, true);\n+    return dumpAContainerLogsForLogType(options, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int dumpAContainerLogsForLogType(ContainerLogsRequest options)\n      throws IOException {\n    return dumpAContainerLogsForLogType(options, true);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "dumpAContainersLogsForALogType",
            "newValue": "dumpAContainerLogsForLogType"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
          "commitDate": "22/06/16 9:48 PM",
          "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthor": "Xuan",
          "commitDateOld": "15/06/16 12:12 AM",
          "commitNameOld": "25064fb2fb79751cedbb8019900d811e07549ecf",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 7.9,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)\n+  public int dumpAContainerLogsForLogType(ContainerLogsRequest options)\n       throws IOException {\n-    return dumpAContainersLogsForALogType(options, true);\n+    return dumpAContainerLogsForLogType(options, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int dumpAContainerLogsForLogType(ContainerLogsRequest options)\n      throws IOException {\n    return dumpAContainerLogsForLogType(options, true);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,4 @@\n-  public int dumpAContainersLogsForALogType(String appId, String containerId,\n-      String nodeId, String jobOwner, List\u003cString\u003e logType, String localDir)\n+  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)\n       throws IOException {\n-    return dumpAContainersLogsForALogType(appId, containerId, nodeId,\n-        jobOwner, logType, true, localDir);\n+    return dumpAContainersLogsForALogType(options, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)\n      throws IOException {\n    return dumpAContainersLogsForALogType(options, true);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "[appId-String, containerId-String, nodeId-String, jobOwner-String, logType-List\u003cString\u003e, localDir-String]",
            "newValue": "[options-ContainerLogsRequest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,4 @@\n-  public int dumpAContainersLogsForALogType(String appId, String containerId,\n-      String nodeId, String jobOwner, List\u003cString\u003e logType, String localDir)\n+  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)\n       throws IOException {\n-    return dumpAContainersLogsForALogType(appId, containerId, nodeId,\n-        jobOwner, logType, true, localDir);\n+    return dumpAContainersLogsForALogType(options, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int dumpAContainersLogsForALogType(ContainerLogsRequest options)\n      throws IOException {\n    return dumpAContainersLogsForALogType(options, true);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "ef1757790d89cc72f88f5330761b1c8901c59e94": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
      "commitDate": "18/05/16 10:14 AM",
      "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "09/05/16 10:41 PM",
          "commitNameOld": "87f5e351337a905af5215af76c72b9312616cd4f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 8.48,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public int dumpAContainersLogsForALogType(String appId, String containerId,\n-      String nodeId, String jobOwner, List\u003cString\u003e logType)\n+      String nodeId, String jobOwner, List\u003cString\u003e logType, String localDir)\n       throws IOException {\n-    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,\n-        logType, true);\n+    return dumpAContainersLogsForALogType(appId, containerId, nodeId,\n+        jobOwner, logType, true, localDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int dumpAContainersLogsForALogType(String appId, String containerId,\n      String nodeId, String jobOwner, List\u003cString\u003e logType, String localDir)\n      throws IOException {\n    return dumpAContainersLogsForALogType(appId, containerId, nodeId,\n        jobOwner, logType, true, localDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "[appId-String, containerId-String, nodeId-String, jobOwner-String, logType-List\u003cString\u003e]",
            "newValue": "[appId-String, containerId-String, nodeId-String, jobOwner-String, logType-List\u003cString\u003e, localDir-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "09/05/16 10:41 PM",
          "commitNameOld": "87f5e351337a905af5215af76c72b9312616cd4f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 8.48,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n   public int dumpAContainersLogsForALogType(String appId, String containerId,\n-      String nodeId, String jobOwner, List\u003cString\u003e logType)\n+      String nodeId, String jobOwner, List\u003cString\u003e logType, String localDir)\n       throws IOException {\n-    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,\n-        logType, true);\n+    return dumpAContainersLogsForALogType(appId, containerId, nodeId,\n+        jobOwner, logType, true, localDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int dumpAContainersLogsForALogType(String appId, String containerId,\n      String nodeId, String jobOwner, List\u003cString\u003e logType, String localDir)\n      throws IOException {\n    return dumpAContainersLogsForALogType(appId, containerId, nodeId,\n        jobOwner, logType, true, localDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4966. Improve yarn logs to fetch container logs without specifying nodeId. Contributed by Xuan Gong.\n",
      "commitDate": "27/04/16 3:26 AM",
      "commitName": "66b07d83740a2ec3e6bfb2bfd064863bae37a1b5",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "09/09/15 6:03 PM",
      "commitNameOld": "6dd6ca442aba8612c3780399a42bb473e4483021",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 230.39,
      "commitsBetweenForRepo": 1553,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,6 @@\n   public int dumpAContainersLogsForALogType(String appId, String containerId,\n-      String nodeId, String jobOwner, List\u003cString\u003e logType) throws IOException {\n-    Path remoteRootLogDir \u003d new Path(getConf().get(\n-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n-    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());\n-    ApplicationId applicationId \u003d ConverterUtils.toApplicationId(appId);\n-    Path remoteAppLogDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-        remoteRootLogDir, applicationId, jobOwner,\n-        suffix);\n-    RemoteIterator\u003cFileStatus\u003e nodeFiles;\n-    try {\n-      Path qualifiedLogDir \u003d\n-          FileContext.getFileContext(getConf()).makeQualified(\n-            remoteAppLogDir);\n-      nodeFiles \u003d\n-          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())\n-            .listStatus(remoteAppLogDir);\n-    } catch (FileNotFoundException fnf) {\n-      logDirNotExist(remoteAppLogDir.toString());\n-      return -1;\n-    }\n-    boolean foundContainerLogs \u003d false;\n-    while (nodeFiles.hasNext()) {\n-      FileStatus thisNodeFile \u003d nodeFiles.next();\n-      String fileName \u003d thisNodeFile.getPath().getName();\n-      if (fileName.equals(applicationId + \".har\")) {\n-        Path p \u003d new Path(\"har:///\"\n-            + thisNodeFile.getPath().toUri().getRawPath());\n-        nodeFiles \u003d HarFs.get(p.toUri(), conf).listStatusIterator(p);\n-        continue;\n-      }\n-      if (fileName.contains(LogAggregationUtils.getNodeString(nodeId))\n-          \u0026\u0026 !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n-        AggregatedLogFormat.LogReader reader \u003d null;\n-        try {\n-          reader \u003d\n-              new AggregatedLogFormat.LogReader(getConf(),\n-                thisNodeFile.getPath());\n-          if (logType \u003d\u003d null) {\n-            if (dumpAContainerLogs(containerId, reader, System.out,\n-              thisNodeFile.getModificationTime()) \u003e -1) {\n-              foundContainerLogs \u003d true;\n-            }\n-          } else {\n-            if (dumpAContainerLogsForALogType(containerId, reader, System.out,\n-              thisNodeFile.getModificationTime(), logType) \u003e -1) {\n-              foundContainerLogs \u003d true;\n-            }\n-          }\n-        } finally {\n-          if (reader !\u003d null) {\n-            reader.close();\n-          }\n-        }\n-      }\n-    }\n-    if (!foundContainerLogs) {\n-      containerLogNotFound(containerId);\n-      return -1;\n-    }\n-    return 0;\n+      String nodeId, String jobOwner, List\u003cString\u003e logType)\n+      throws IOException {\n+    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,\n+        logType, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int dumpAContainersLogsForALogType(String appId, String containerId,\n      String nodeId, String jobOwner, List\u003cString\u003e logType)\n      throws IOException {\n    return dumpAContainersLogsForALogType(appId, containerId, nodeId, jobOwner,\n        logType, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "6dd6ca442aba8612c3780399a42bb473e4483021": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4086. Allow Aggregated Log readers to handle HAR files (rkanter)\n",
      "commitDate": "09/09/15 6:03 PM",
      "commitName": "6dd6ca442aba8612c3780399a42bb473e4483021",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "13/04/15 5:29 PM",
      "commitNameOld": "a77d628339afaf2f5a085c73fd81a805b18348c9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 149.02,
      "commitsBetweenForRepo": 1082,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,63 @@\n   public int dumpAContainersLogsForALogType(String appId, String containerId,\n       String nodeId, String jobOwner, List\u003cString\u003e logType) throws IOException {\n     Path remoteRootLogDir \u003d new Path(getConf().get(\n         YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n         YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());\n+    ApplicationId applicationId \u003d ConverterUtils.toApplicationId(appId);\n     Path remoteAppLogDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-        remoteRootLogDir, ConverterUtils.toApplicationId(appId), jobOwner,\n+        remoteRootLogDir, applicationId, jobOwner,\n         suffix);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles;\n     try {\n       Path qualifiedLogDir \u003d\n           FileContext.getFileContext(getConf()).makeQualified(\n             remoteAppLogDir);\n       nodeFiles \u003d\n           FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())\n             .listStatus(remoteAppLogDir);\n     } catch (FileNotFoundException fnf) {\n       logDirNotExist(remoteAppLogDir.toString());\n       return -1;\n     }\n     boolean foundContainerLogs \u003d false;\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       String fileName \u003d thisNodeFile.getPath().getName();\n+      if (fileName.equals(applicationId + \".har\")) {\n+        Path p \u003d new Path(\"har:///\"\n+            + thisNodeFile.getPath().toUri().getRawPath());\n+        nodeFiles \u003d HarFs.get(p.toUri(), conf).listStatusIterator(p);\n+        continue;\n+      }\n       if (fileName.contains(LogAggregationUtils.getNodeString(nodeId))\n           \u0026\u0026 !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d null;\n         try {\n           reader \u003d\n               new AggregatedLogFormat.LogReader(getConf(),\n                 thisNodeFile.getPath());\n           if (logType \u003d\u003d null) {\n             if (dumpAContainerLogs(containerId, reader, System.out,\n               thisNodeFile.getModificationTime()) \u003e -1) {\n               foundContainerLogs \u003d true;\n             }\n           } else {\n             if (dumpAContainerLogsForALogType(containerId, reader, System.out,\n               thisNodeFile.getModificationTime(), logType) \u003e -1) {\n               foundContainerLogs \u003d true;\n             }\n           }\n         } finally {\n           if (reader !\u003d null) {\n             reader.close();\n           }\n         }\n       }\n     }\n     if (!foundContainerLogs) {\n       containerLogNotFound(containerId);\n       return -1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int dumpAContainersLogsForALogType(String appId, String containerId,\n      String nodeId, String jobOwner, List\u003cString\u003e logType) throws IOException {\n    Path remoteRootLogDir \u003d new Path(getConf().get(\n        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());\n    ApplicationId applicationId \u003d ConverterUtils.toApplicationId(appId);\n    Path remoteAppLogDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n        remoteRootLogDir, applicationId, jobOwner,\n        suffix);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles;\n    try {\n      Path qualifiedLogDir \u003d\n          FileContext.getFileContext(getConf()).makeQualified(\n            remoteAppLogDir);\n      nodeFiles \u003d\n          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())\n            .listStatus(remoteAppLogDir);\n    } catch (FileNotFoundException fnf) {\n      logDirNotExist(remoteAppLogDir.toString());\n      return -1;\n    }\n    boolean foundContainerLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      String fileName \u003d thisNodeFile.getPath().getName();\n      if (fileName.equals(applicationId + \".har\")) {\n        Path p \u003d new Path(\"har:///\"\n            + thisNodeFile.getPath().toUri().getRawPath());\n        nodeFiles \u003d HarFs.get(p.toUri(), conf).listStatusIterator(p);\n        continue;\n      }\n      if (fileName.contains(LogAggregationUtils.getNodeString(nodeId))\n          \u0026\u0026 !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d null;\n        try {\n          reader \u003d\n              new AggregatedLogFormat.LogReader(getConf(),\n                thisNodeFile.getPath());\n          if (logType \u003d\u003d null) {\n            if (dumpAContainerLogs(containerId, reader, System.out,\n              thisNodeFile.getModificationTime()) \u003e -1) {\n              foundContainerLogs \u003d true;\n            }\n          } else {\n            if (dumpAContainerLogsForALogType(containerId, reader, System.out,\n              thisNodeFile.getModificationTime(), logType) \u003e -1) {\n              foundContainerLogs \u003d true;\n            }\n          }\n        } finally {\n          if (reader !\u003d null) {\n            reader.close();\n          }\n        }\n      }\n    }\n    if (!foundContainerLogs) {\n      containerLogNotFound(containerId);\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "a77d628339afaf2f5a085c73fd81a805b18348c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3347. Improve YARN log command to get AMContainer logs as well as running containers logs. Contributed by Xuan Gong.\n",
      "commitDate": "13/04/15 5:29 PM",
      "commitName": "a77d628339afaf2f5a085c73fd81a805b18348c9",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,56 @@\n+  public int dumpAContainersLogsForALogType(String appId, String containerId,\n+      String nodeId, String jobOwner, List\u003cString\u003e logType) throws IOException {\n+    Path remoteRootLogDir \u003d new Path(getConf().get(\n+        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n+        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n+    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());\n+    Path remoteAppLogDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n+        remoteRootLogDir, ConverterUtils.toApplicationId(appId), jobOwner,\n+        suffix);\n+    RemoteIterator\u003cFileStatus\u003e nodeFiles;\n+    try {\n+      Path qualifiedLogDir \u003d\n+          FileContext.getFileContext(getConf()).makeQualified(\n+            remoteAppLogDir);\n+      nodeFiles \u003d\n+          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())\n+            .listStatus(remoteAppLogDir);\n+    } catch (FileNotFoundException fnf) {\n+      logDirNotExist(remoteAppLogDir.toString());\n+      return -1;\n+    }\n+    boolean foundContainerLogs \u003d false;\n+    while (nodeFiles.hasNext()) {\n+      FileStatus thisNodeFile \u003d nodeFiles.next();\n+      String fileName \u003d thisNodeFile.getPath().getName();\n+      if (fileName.contains(LogAggregationUtils.getNodeString(nodeId))\n+          \u0026\u0026 !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n+        AggregatedLogFormat.LogReader reader \u003d null;\n+        try {\n+          reader \u003d\n+              new AggregatedLogFormat.LogReader(getConf(),\n+                thisNodeFile.getPath());\n+          if (logType \u003d\u003d null) {\n+            if (dumpAContainerLogs(containerId, reader, System.out,\n+              thisNodeFile.getModificationTime()) \u003e -1) {\n+              foundContainerLogs \u003d true;\n+            }\n+          } else {\n+            if (dumpAContainerLogsForALogType(containerId, reader, System.out,\n+              thisNodeFile.getModificationTime(), logType) \u003e -1) {\n+              foundContainerLogs \u003d true;\n+            }\n+          }\n+        } finally {\n+          if (reader !\u003d null) {\n+            reader.close();\n+          }\n+        }\n+      }\n+    }\n+    if (!foundContainerLogs) {\n+      containerLogNotFound(containerId);\n+      return -1;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int dumpAContainersLogsForALogType(String appId, String containerId,\n      String nodeId, String jobOwner, List\u003cString\u003e logType) throws IOException {\n    Path remoteRootLogDir \u003d new Path(getConf().get(\n        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf());\n    Path remoteAppLogDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n        remoteRootLogDir, ConverterUtils.toApplicationId(appId), jobOwner,\n        suffix);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles;\n    try {\n      Path qualifiedLogDir \u003d\n          FileContext.getFileContext(getConf()).makeQualified(\n            remoteAppLogDir);\n      nodeFiles \u003d\n          FileContext.getFileContext(qualifiedLogDir.toUri(), getConf())\n            .listStatus(remoteAppLogDir);\n    } catch (FileNotFoundException fnf) {\n      logDirNotExist(remoteAppLogDir.toString());\n      return -1;\n    }\n    boolean foundContainerLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      String fileName \u003d thisNodeFile.getPath().getName();\n      if (fileName.contains(LogAggregationUtils.getNodeString(nodeId))\n          \u0026\u0026 !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d null;\n        try {\n          reader \u003d\n              new AggregatedLogFormat.LogReader(getConf(),\n                thisNodeFile.getPath());\n          if (logType \u003d\u003d null) {\n            if (dumpAContainerLogs(containerId, reader, System.out,\n              thisNodeFile.getModificationTime()) \u003e -1) {\n              foundContainerLogs \u003d true;\n            }\n          } else {\n            if (dumpAContainerLogsForALogType(containerId, reader, System.out,\n              thisNodeFile.getModificationTime(), logType) \u003e -1) {\n              foundContainerLogs \u003d true;\n            }\n          }\n        } finally {\n          if (reader !\u003d null) {\n            reader.close();\n          }\n        }\n      }\n    }\n    if (!foundContainerLogs) {\n      containerLogNotFound(containerId);\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java"
    }
  }
}