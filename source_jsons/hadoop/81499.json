{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogLevel.java",
  "functionName": "connect",
  "functionId": "connect___url-URL",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/log/LogLevel.java",
  "functionStartLine": 257,
  "functionEndLine": 281,
  "numCommitsSeen": 11,
  "timeTaken": 625,
  "changeHistory": [
    "34cc21f6d1a293d92613defba38e8ae810db4c71"
  ],
  "changeHistoryShort": {
    "34cc21f6d1a293d92613defba38e8ae810db4c71": "Yintroduced"
  },
  "changeHistoryDetails": {
    "34cc21f6d1a293d92613defba38e8ae810db4c71": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12847. hadoop daemonlog should support https and SPNEGO for Kerberized cluster. (Wei-Chiu Chuang via Yongjun Zhang)\n",
      "commitDate": "26/05/16 10:43 PM",
      "commitName": "34cc21f6d1a293d92613defba38e8ae810db4c71",
      "commitAuthor": "Yongjun Zhang",
      "diff": "@@ -0,0 +1,25 @@\n+    private URLConnection connect(URL url) throws Exception {\n+      AuthenticatedURL.Token token \u003d new AuthenticatedURL.Token();\n+      AuthenticatedURL aUrl;\n+      SSLFactory clientSslFactory;\n+      URLConnection connection;\n+      // If https is chosen, configures SSL client.\n+      if (PROTOCOL_HTTPS.equals(url.getProtocol())) {\n+        clientSslFactory \u003d new SSLFactory(\n+            SSLFactory.Mode.CLIENT, this.getConf());\n+        clientSslFactory.init();\n+        SSLSocketFactory sslSocketF \u003d clientSslFactory.createSSLSocketFactory();\n+\n+        aUrl \u003d new AuthenticatedURL(\n+            new KerberosAuthenticator(), clientSslFactory);\n+        connection \u003d aUrl.openConnection(url, token);\n+        HttpsURLConnection httpsConn \u003d (HttpsURLConnection) connection;\n+        httpsConn.setSSLSocketFactory(sslSocketF);\n+      } else {\n+        aUrl \u003d new AuthenticatedURL(new KerberosAuthenticator());\n+        connection \u003d aUrl.openConnection(url, token);\n+      }\n+\n+      connection.connect();\n+      return connection;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private URLConnection connect(URL url) throws Exception {\n      AuthenticatedURL.Token token \u003d new AuthenticatedURL.Token();\n      AuthenticatedURL aUrl;\n      SSLFactory clientSslFactory;\n      URLConnection connection;\n      // If https is chosen, configures SSL client.\n      if (PROTOCOL_HTTPS.equals(url.getProtocol())) {\n        clientSslFactory \u003d new SSLFactory(\n            SSLFactory.Mode.CLIENT, this.getConf());\n        clientSslFactory.init();\n        SSLSocketFactory sslSocketF \u003d clientSslFactory.createSSLSocketFactory();\n\n        aUrl \u003d new AuthenticatedURL(\n            new KerberosAuthenticator(), clientSslFactory);\n        connection \u003d aUrl.openConnection(url, token);\n        HttpsURLConnection httpsConn \u003d (HttpsURLConnection) connection;\n        httpsConn.setSSLSocketFactory(sslSocketF);\n      } else {\n        aUrl \u003d new AuthenticatedURL(new KerberosAuthenticator());\n        connection \u003d aUrl.openConnection(url, token);\n      }\n\n      connection.connect();\n      return connection;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/log/LogLevel.java"
    }
  }
}