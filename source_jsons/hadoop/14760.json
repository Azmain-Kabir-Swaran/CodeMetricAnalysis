{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicyAdmin.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
  "functionStartLine": 59,
  "functionEndLine": 84,
  "numCommitsSeen": 22,
  "timeTaken": 3186,
  "changeHistory": [
    "754f15bae61b81ad3c2e3f722d1feaebf374e2c4",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
    "5b0d060d2a868cefcd12252140d5a8e310738aca",
    "428a76663a0de5d0d74cc9525273ddc470760e44"
  ],
  "changeHistoryShort": {
    "754f15bae61b81ad3c2e3f722d1feaebf374e2c4": "Ybodychange",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": "Ybodychange",
    "5b0d060d2a868cefcd12252140d5a8e310738aca": "Ymultichange(Ymovefromfile,Ybodychange)",
    "428a76663a0de5d0d74cc9525273ddc470760e44": "Yintroduced"
  },
  "changeHistoryDetails": {
    "754f15bae61b81ad3c2e3f722d1feaebf374e2c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11226. cacheadmin, cryptoadmin and storagepolicyadmin should support generic options. Contributed by Brahma Reddy Battula\n",
      "commitDate": "12/12/16 6:21 PM",
      "commitName": "754f15bae61b81ad3c2e3f722d1feaebf374e2c4",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "02/03/16 6:35 PM",
      "commitNameOld": "27941a1811831e0f2144a2f463d807755cd850b2",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 284.99,
      "commitsBetweenForRepo": 2049,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public int run(String[] args) throws Exception {\n     if (args.length \u003d\u003d 0) {\n       AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n+      ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n     final AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n         COMMANDS);\n     if (command \u003d\u003d null) {\n       System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n       if (!args[0].startsWith(\"-\")) {\n         System.err.println(\"Command names must start with dashes.\");\n       }\n       AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n+      ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n     final List\u003cString\u003e argsList \u003d new LinkedList\u003c\u003e();\n     argsList.addAll(Arrays.asList(args).subList(1, args.length));\n     try {\n       return command.run(getConf(), argsList);\n     } catch (IllegalArgumentException e) {\n       System.err.println(AdminHelper.prettifyException(e));\n       return -1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003d\u003d 0) {\n      AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n    final AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n        COMMANDS);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n    final List\u003cString\u003e argsList \u003d new LinkedList\u003c\u003e();\n    argsList.addAll(Arrays.asList(args).subList(1, args.length));\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(AdminHelper.prettifyException(e));\n      return -1;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7600. Refine hdfs admin classes to reuse common code. Contributed by Jing Zhao.\n",
      "commitDate": "12/01/15 5:32 PM",
      "commitName": "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/01/15 8:35 AM",
      "commitNameOld": "5b0d060d2a868cefcd12252140d5a8e310738aca",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 1.37,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public int run(String[] args) throws Exception {\n     if (args.length \u003d\u003d 0) {\n-      printUsage(false);\n+      AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n       return 1;\n     }\n-    final Command command \u003d determineCommand(args[0]);\n+    final AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n+        COMMANDS);\n     if (command \u003d\u003d null) {\n       System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n       if (!args[0].startsWith(\"-\")) {\n         System.err.println(\"Command names must start with dashes.\");\n       }\n-      printUsage(false);\n+      AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n       return 1;\n     }\n-    final List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n+    final List\u003cString\u003e argsList \u003d new LinkedList\u003c\u003e();\n     argsList.addAll(Arrays.asList(args).subList(1, args.length));\n     try {\n       return command.run(getConf(), argsList);\n     } catch (IllegalArgumentException e) {\n-      System.err.println(prettifyException(e));\n+      System.err.println(AdminHelper.prettifyException(e));\n       return -1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003d\u003d 0) {\n      AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n      return 1;\n    }\n    final AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n        COMMANDS);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      AdminHelper.printUsage(false, \"storagepolicies\", COMMANDS);\n      return 1;\n    }\n    final List\u003cString\u003e argsList \u003d new LinkedList\u003c\u003e();\n    argsList.addAll(Arrays.asList(args).subList(1, args.length));\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(AdminHelper.prettifyException(e));\n      return -1;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "5b0d060d2a868cefcd12252140d5a8e310738aca": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
      "commitDate": "11/01/15 8:35 AM",
      "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
      "commitAuthor": "yliu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
          "commitDate": "11/01/15 8:35 AM",
          "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
          "commitAuthor": "yliu",
          "commitDateOld": "10/01/15 9:18 AM",
          "commitNameOld": "ef3c3a832c2f0c1e5ccdda2ff8ef84902912955f",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   public int run(String[] args) throws Exception {\n-    FileSystem fs \u003d FileSystem.get(getConf());\n-    if (!(fs instanceof DistributedFileSystem)) {\n-      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n-          \"Please check the default FileSystem setting in your configuration.\");\n+    if (args.length \u003d\u003d 0) {\n+      printUsage(false);\n       return 1;\n     }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    try {\n-      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n-      System.out.println(\"Block Storage Policies:\");\n-      for (BlockStoragePolicy policy : policies) {\n-        if (policy !\u003d null) {\n-          System.out.println(\"\\t\" + policy);\n-        }\n+    final Command command \u003d determineCommand(args[0]);\n+    if (command \u003d\u003d null) {\n+      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n+      if (!args[0].startsWith(\"-\")) {\n+        System.err.println(\"Command names must start with dashes.\");\n       }\n-    } catch (IOException e) {\n-      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n-      System.err.println(\"GetStoragePolicies: \" + content[0]);\n+      printUsage(false);\n       return 1;\n     }\n-    return 0;\n+    final List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n+    argsList.addAll(Arrays.asList(args).subList(1, args.length));\n+    try {\n+      return command.run(getConf(), argsList);\n+    } catch (IllegalArgumentException e) {\n+      System.err.println(prettifyException(e));\n+      return -1;\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003d\u003d 0) {\n      printUsage(false);\n      return 1;\n    }\n    final Command command \u003d determineCommand(args[0]);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      printUsage(false);\n      return 1;\n    }\n    final List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    argsList.addAll(Arrays.asList(args).subList(1, args.length));\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(prettifyException(e));\n      return -1;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/GetStoragePolicies.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
          "commitDate": "11/01/15 8:35 AM",
          "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
          "commitAuthor": "yliu",
          "commitDateOld": "10/01/15 9:18 AM",
          "commitNameOld": "ef3c3a832c2f0c1e5ccdda2ff8ef84902912955f",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   public int run(String[] args) throws Exception {\n-    FileSystem fs \u003d FileSystem.get(getConf());\n-    if (!(fs instanceof DistributedFileSystem)) {\n-      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n-          \"Please check the default FileSystem setting in your configuration.\");\n+    if (args.length \u003d\u003d 0) {\n+      printUsage(false);\n       return 1;\n     }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    try {\n-      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n-      System.out.println(\"Block Storage Policies:\");\n-      for (BlockStoragePolicy policy : policies) {\n-        if (policy !\u003d null) {\n-          System.out.println(\"\\t\" + policy);\n-        }\n+    final Command command \u003d determineCommand(args[0]);\n+    if (command \u003d\u003d null) {\n+      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n+      if (!args[0].startsWith(\"-\")) {\n+        System.err.println(\"Command names must start with dashes.\");\n       }\n-    } catch (IOException e) {\n-      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n-      System.err.println(\"GetStoragePolicies: \" + content[0]);\n+      printUsage(false);\n       return 1;\n     }\n-    return 0;\n+    final List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n+    argsList.addAll(Arrays.asList(args).subList(1, args.length));\n+    try {\n+      return command.run(getConf(), argsList);\n+    } catch (IllegalArgumentException e) {\n+      System.err.println(prettifyException(e));\n+      return -1;\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003d\u003d 0) {\n      printUsage(false);\n      return 1;\n    }\n    final Command command \u003d determineCommand(args[0]);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      printUsage(false);\n      return 1;\n    }\n    final List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    argsList.addAll(Arrays.asList(args).subList(1, args.length));\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(prettifyException(e));\n      return -1;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
          "extendedDetails": {}
        }
      ]
    },
    "428a76663a0de5d0d74cc9525273ddc470760e44": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7140. Add a tool to list all the existing block storage policies. Contributed by Jing Zhao.\n",
      "commitDate": "24/09/14 7:11 PM",
      "commitName": "428a76663a0de5d0d74cc9525273ddc470760e44",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,24 @@\n+  public int run(String[] args) throws Exception {\n+    FileSystem fs \u003d FileSystem.get(getConf());\n+    if (!(fs instanceof DistributedFileSystem)) {\n+      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n+          \"Please check the default FileSystem setting in your configuration.\");\n+      return 1;\n+    }\n+    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n+\n+    try {\n+      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n+      System.out.println(\"Block Storage Policies:\");\n+      for (BlockStoragePolicy policy : policies) {\n+        if (policy !\u003d null) {\n+          System.out.println(\"\\t\" + policy);\n+        }\n+      }\n+    } catch (IOException e) {\n+      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n+      System.err.println(\"GetStoragePolicies: \" + content[0]);\n+      return 1;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    FileSystem fs \u003d FileSystem.get(getConf());\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n          \"Please check the default FileSystem setting in your configuration.\");\n      return 1;\n    }\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n\n    try {\n      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n      System.out.println(\"Block Storage Policies:\");\n      for (BlockStoragePolicy policy : policies) {\n        if (policy !\u003d null) {\n          System.out.println(\"\\t\" + policy);\n        }\n      }\n    } catch (IOException e) {\n      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n      System.err.println(\"GetStoragePolicies: \" + content[0]);\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/GetStoragePolicies.java"
    }
  }
}