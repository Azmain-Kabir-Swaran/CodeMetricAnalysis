{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PathOutputCommitterFactory.java",
  "functionName": "getCommitterFactory",
  "functionId": "getCommitterFactory___outputPath-Path__conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/PathOutputCommitterFactory.java",
  "functionStartLine": 144,
  "functionEndLine": 186,
  "numCommitsSeen": 3,
  "timeTaken": 1272,
  "changeHistory": [
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c"
  ],
  "changeHistoryShort": {
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,43 @@\n+  public static PathOutputCommitterFactory getCommitterFactory(\n+      Path outputPath,\n+      Configuration conf) {\n+    // determine which key to look up the overall one or a schema-specific\n+    // key\n+    LOG.debug(\"Looking for committer factory for path {}\", outputPath);\n+    String key \u003d COMMITTER_FACTORY_CLASS;\n+    if (StringUtils.isEmpty(conf.getTrimmed(key)) \u0026\u0026 outputPath !\u003d null) {\n+      // there is no explicit factory and there\u0027s an output path\n+      // Get the scheme of the destination\n+      String scheme \u003d outputPath.toUri().getScheme();\n+\n+      // and see if it has a key\n+      String schemeKey \u003d String.format(COMMITTER_FACTORY_SCHEME_PATTERN,\n+          scheme);\n+      if (StringUtils.isNotEmpty(conf.getTrimmed(schemeKey))) {\n+        // it does, so use that key in the classname lookup\n+        LOG.debug(\"Using schema-specific factory for {}\", outputPath);\n+        key \u003d schemeKey;\n+      } else {\n+        LOG.debug(\"No scheme-specific factory defined in {}\", schemeKey);\n+      }\n+    }\n+\n+    // create the factory. Before using Configuration.getClass, check\n+    // for an empty configuration value, as that raises ClassNotFoundException.\n+    Class\u003c? extends PathOutputCommitterFactory\u003e factory;\n+    String trimmedValue \u003d conf.getTrimmed(key, \"\");\n+    if (StringUtils.isEmpty(trimmedValue)) {\n+      // empty/null value, use default\n+      LOG.debug(\"No output committer factory defined,\"\n+          + \" defaulting to FileOutputCommitterFactory\");\n+      factory \u003d FileOutputCommitterFactory.class;\n+    } else {\n+      // key is set, get the class\n+      factory \u003d conf.getClass(key,\n+          FileOutputCommitterFactory.class,\n+          PathOutputCommitterFactory.class);\n+      LOG.debug(\"Using OutputCommitter factory class {} from key {}\",\n+          factory, key);\n+    }\n+    return ReflectionUtils.newInstance(factory, conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static PathOutputCommitterFactory getCommitterFactory(\n      Path outputPath,\n      Configuration conf) {\n    // determine which key to look up the overall one or a schema-specific\n    // key\n    LOG.debug(\"Looking for committer factory for path {}\", outputPath);\n    String key \u003d COMMITTER_FACTORY_CLASS;\n    if (StringUtils.isEmpty(conf.getTrimmed(key)) \u0026\u0026 outputPath !\u003d null) {\n      // there is no explicit factory and there\u0027s an output path\n      // Get the scheme of the destination\n      String scheme \u003d outputPath.toUri().getScheme();\n\n      // and see if it has a key\n      String schemeKey \u003d String.format(COMMITTER_FACTORY_SCHEME_PATTERN,\n          scheme);\n      if (StringUtils.isNotEmpty(conf.getTrimmed(schemeKey))) {\n        // it does, so use that key in the classname lookup\n        LOG.debug(\"Using schema-specific factory for {}\", outputPath);\n        key \u003d schemeKey;\n      } else {\n        LOG.debug(\"No scheme-specific factory defined in {}\", schemeKey);\n      }\n    }\n\n    // create the factory. Before using Configuration.getClass, check\n    // for an empty configuration value, as that raises ClassNotFoundException.\n    Class\u003c? extends PathOutputCommitterFactory\u003e factory;\n    String trimmedValue \u003d conf.getTrimmed(key, \"\");\n    if (StringUtils.isEmpty(trimmedValue)) {\n      // empty/null value, use default\n      LOG.debug(\"No output committer factory defined,\"\n          + \" defaulting to FileOutputCommitterFactory\");\n      factory \u003d FileOutputCommitterFactory.class;\n    } else {\n      // key is set, get the class\n      factory \u003d conf.getClass(key,\n          FileOutputCommitterFactory.class,\n          PathOutputCommitterFactory.class);\n      LOG.debug(\"Using OutputCommitter factory class {} from key {}\",\n          factory, key);\n    }\n    return ReflectionUtils.newInstance(factory, conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/PathOutputCommitterFactory.java"
    }
  }
}