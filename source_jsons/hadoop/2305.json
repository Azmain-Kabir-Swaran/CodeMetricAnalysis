{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClient.java",
  "functionName": "initThreadsNumForHedgedReads",
  "functionId": "initThreadsNumForHedgedReads___num-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
  "functionStartLine": 3049,
  "functionEndLine": 3074,
  "numCommitsSeen": 330,
  "timeTaken": 7472,
  "changeHistory": [
    "f738d75a86602353d48a810f46919e49d1c06ade",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487"
  ],
  "changeHistoryShort": {
    "f738d75a86602353d48a810f46919e49d1c06ade": "Ymodifierchange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f738d75a86602353d48a810f46919e49d1c06ade": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-11900. Hedged reads thread pool creation not synchronized. Contributed by John Zhuge.\n",
      "commitDate": "22/03/18 11:29 AM",
      "commitName": "f738d75a86602353d48a810f46919e49d1c06ade",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/18 3:28 PM",
      "commitNameOld": "55c77bf722f2b6fcde135c0f71454647a8d2a3db",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 22.79,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  private synchronized void initThreadsNumForHedgedReads(int num) {\n+  private static synchronized void initThreadsNumForHedgedReads(int num) {\n     if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n     HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n         TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"hedgedRead-\" + threadIndex.getAndIncrement());\n             return t;\n           }\n         },\n         new ThreadPoolExecutor.CallerRunsPolicy() {\n           @Override\n           public void rejectedExecution(Runnable runnable,\n               ThreadPoolExecutor e) {\n             LOG.info(\"Execution rejected, Executing in current thread\");\n             HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n             // will run in the current thread\n             super.rejectedExecution(runnable, e);\n           }\n         });\n     HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n     LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initThreadsNumForHedgedReads(int num) {\n    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"hedgedRead-\" + threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n          @Override\n          public void rejectedExecution(Runnable runnable,\n              ThreadPoolExecutor e) {\n            LOG.info(\"Execution rejected, Executing in current thread\");\n            HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n            // will run in the current thread\n            super.rejectedExecution(runnable, e);\n          }\n        });\n    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n    LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldValue": "[private, synchronized]",
        "newValue": "[private, static, synchronized]"
      }
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   private synchronized void initThreadsNumForHedgedReads(int num) {\n     if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n     HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n         TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIndex \u003d\n             new AtomicInteger(0); \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"hedgedRead-\" +\n               threadIndex.getAndIncrement());\n             return t;\n           }\n         },\n         new ThreadPoolExecutor.CallerRunsPolicy() {\n \n       @Override\n       public void rejectedExecution(Runnable runnable,\n           ThreadPoolExecutor e) {\n         LOG.info(\"Execution rejected, Executing in current thread\");\n         HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n     HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n-    }\n+    LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initThreadsNumForHedgedReads(int num) {\n    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d\n            new AtomicInteger(0); \n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"hedgedRead-\" +\n              threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n\n      @Override\n      public void rejectedExecution(Runnable runnable,\n          ThreadPoolExecutor e) {\n        LOG.info(\"Execution rejected, Executing in current thread\");\n        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n    LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   private synchronized void initThreadsNumForHedgedReads(int num) {\n     if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n     HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n         TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIndex \u003d\n             new AtomicInteger(0); \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"hedgedRead-\" +\n               threadIndex.getAndIncrement());\n             return t;\n           }\n         },\n         new ThreadPoolExecutor.CallerRunsPolicy() {\n \n       @Override\n       public void rejectedExecution(Runnable runnable,\n           ThreadPoolExecutor e) {\n         LOG.info(\"Execution rejected, Executing in current thread\");\n         HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n     HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n-    LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initThreadsNumForHedgedReads(int num) {\n    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d\n            new AtomicInteger(0); \n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"hedgedRead-\" +\n              threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n\n      @Override\n      public void rejectedExecution(Runnable runnable,\n          ThreadPoolExecutor e) {\n        LOG.info(\"Execution rejected, Executing in current thread\");\n        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   private synchronized void initThreadsNumForHedgedReads(int num) {\n     if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n     HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n         TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIndex \u003d\n             new AtomicInteger(0); \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"hedgedRead-\" +\n               threadIndex.getAndIncrement());\n             return t;\n           }\n         },\n         new ThreadPoolExecutor.CallerRunsPolicy() {\n \n       @Override\n       public void rejectedExecution(Runnable runnable,\n           ThreadPoolExecutor e) {\n         LOG.info(\"Execution rejected, Executing in current thread\");\n         HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n     HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n-    }\n+    LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initThreadsNumForHedgedReads(int num) {\n    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d\n            new AtomicInteger(0); \n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"hedgedRead-\" +\n              threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n\n      @Override\n      public void rejectedExecution(Runnable runnable,\n          ThreadPoolExecutor e) {\n        LOG.info(\"Execution rejected, Executing in current thread\");\n        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n    LOG.debug(\"Using hedged reads; pool threads\u003d{}\", num);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void initThreadsNumForHedgedReads(int num) {\n    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d\n            new AtomicInteger(0); \n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"hedgedRead-\" +\n              threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n\n      @Override\n      public void rejectedExecution(Runnable runnable,\n          ThreadPoolExecutor e) {\n        LOG.info(\"Execution rejected, Executing in current thread\");\n        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "17db74a1c1972392a5aba48a3e0334dcd6c76487": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5776 Support \u0027hedged\u0027 reads in DFSClient\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 2:34 PM",
      "commitName": "17db74a1c1972392a5aba48a3e0334dcd6c76487",
      "commitAuthor": "Michael Stack",
      "diff": "@@ -0,0 +1,31 @@\n+  private synchronized void initThreadsNumForHedgedReads(int num) {\n+    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n+    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n+        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n+        new Daemon.DaemonFactory() {\n+          private final AtomicInteger threadIndex \u003d\n+            new AtomicInteger(0); \n+          @Override\n+          public Thread newThread(Runnable r) {\n+            Thread t \u003d super.newThread(r);\n+            t.setName(\"hedgedRead-\" +\n+              threadIndex.getAndIncrement());\n+            return t;\n+          }\n+        },\n+        new ThreadPoolExecutor.CallerRunsPolicy() {\n+\n+      @Override\n+      public void rejectedExecution(Runnable runnable,\n+          ThreadPoolExecutor e) {\n+        LOG.info(\"Execution rejected, Executing in current thread\");\n+        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n+        // will run in the current thread\n+        super.rejectedExecution(runnable, e);\n+      }\n+    });\n+    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initThreadsNumForHedgedReads(int num) {\n    if (num \u003c\u003d 0 || HEDGED_READ_THREAD_POOL !\u003d null) return;\n    HEDGED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d\n            new AtomicInteger(0); \n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"hedgedRead-\" +\n              threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n\n      @Override\n      public void rejectedExecution(Runnable runnable,\n          ThreadPoolExecutor e) {\n        LOG.info(\"Execution rejected, Executing in current thread\");\n        HEDGED_READ_METRIC.incHedgedReadOpsInCurThread();\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    HEDGED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using hedged reads; pool threads\u003d\" + num);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
    }
  }
}