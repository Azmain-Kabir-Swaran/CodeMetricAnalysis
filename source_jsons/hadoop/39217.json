{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "checkResourceRequestAgainstAvailableResource",
  "functionId": "checkResourceRequestAgainstAvailableResource___reqResource-Resource__availableResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 395,
  "functionEndLine": 413,
  "numCommitsSeen": 51,
  "timeTaken": 3144,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "2cccf4061cc4021c48e29879700dbc94f832b7d1",
    "f48fec83d0f2d1a781a141ad7216463c5526321f",
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "2cccf4061cc4021c48e29879700dbc94f832b7d1": "Ybodychange",
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Ybodychange",
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "03/01/19 7:56 AM",
      "commitNameOld": "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 4.61,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n       Resource availableResource) throws InvalidResourceRequestException {\n-    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n+    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfCountableResourceTypes(); i++) {\n       final ResourceInformation requestedRI \u003d\n           reqResource.getResourceInformation(i);\n       final String reqResourceName \u003d requestedRI.getName();\n \n       if (requestedRI.getValue() \u003c 0) {\n         throwInvalidResourceException(reqResource, availableResource,\n             reqResourceName, InvalidResourceType.LESS_THAN_ZERO);\n       }\n \n       boolean valid \u003d checkResource(requestedRI, availableResource);\n       if (!valid) {\n         throwInvalidResourceException(reqResource, availableResource,\n             reqResourceName, InvalidResourceType.GREATER_THEN_MAX_ALLOCATION);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n      Resource availableResource) throws InvalidResourceRequestException {\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfCountableResourceTypes(); i++) {\n      final ResourceInformation requestedRI \u003d\n          reqResource.getResourceInformation(i);\n      final String reqResourceName \u003d requestedRI.getName();\n\n      if (requestedRI.getValue() \u003c 0) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName, InvalidResourceType.LESS_THAN_ZERO);\n      }\n\n      boolean valid \u003d checkResource(requestedRI, availableResource);\n      if (!valid) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName, InvalidResourceType.GREATER_THEN_MAX_ALLOCATION);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "2cccf4061cc4021c48e29879700dbc94f832b7d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8517. getContainer and getContainers ResourceManager REST API methods are not documented (snemeth via rkanter)\n",
      "commitDate": "27/07/18 2:35 PM",
      "commitName": "2cccf4061cc4021c48e29879700dbc94f832b7d1",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 45.25,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n       Resource availableResource) throws InvalidResourceRequestException {\n     for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n       final ResourceInformation requestedRI \u003d\n           reqResource.getResourceInformation(i);\n       final String reqResourceName \u003d requestedRI.getName();\n \n       if (requestedRI.getValue() \u003c 0) {\n         throwInvalidResourceException(reqResource, availableResource,\n-            reqResourceName);\n+            reqResourceName, InvalidResourceType.LESS_THAN_ZERO);\n       }\n \n       boolean valid \u003d checkResource(requestedRI, availableResource);\n       if (!valid) {\n         throwInvalidResourceException(reqResource, availableResource,\n-            reqResourceName);\n+            reqResourceName, InvalidResourceType.GREATER_THEN_MAX_ALLOCATION);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n      Resource availableResource) throws InvalidResourceRequestException {\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n      final ResourceInformation requestedRI \u003d\n          reqResource.getResourceInformation(i);\n      final String reqResourceName \u003d requestedRI.getName();\n\n      if (requestedRI.getValue() \u003c 0) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName, InvalidResourceType.LESS_THAN_ZERO);\n      }\n\n      boolean valid \u003d checkResource(requestedRI, availableResource);\n      if (!valid) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName, InvalidResourceType.GREATER_THEN_MAX_ALLOCATION);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "10/05/18 9:31 AM",
      "commitNameOld": "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 10.94,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,19 @@\n   static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n       Resource availableResource) throws InvalidResourceRequestException {\n     for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n       final ResourceInformation requestedRI \u003d\n           reqResource.getResourceInformation(i);\n       final String reqResourceName \u003d requestedRI.getName();\n \n       if (requestedRI.getValue() \u003c 0) {\n         throwInvalidResourceException(reqResource, availableResource,\n             reqResourceName);\n       }\n \n-      final ResourceInformation availableRI \u003d\n-          availableResource.getResourceInformation(reqResourceName);\n-\n-      long requestedResourceValue \u003d requestedRI.getValue();\n-      long availableResourceValue \u003d availableRI.getValue();\n-      int unitsRelation \u003d UnitsConversionUtil\n-          .compareUnits(requestedRI.getUnits(), availableRI.getUnits());\n-\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Requested resource information: \" + requestedRI);\n-        LOG.debug(\"Available resource information: \" + availableRI);\n-        LOG.debug(\"Relation of units: \" + unitsRelation);\n-      }\n-\n-      // requested resource unit is less than available resource unit\n-      // e.g. requestedUnit: \"m\", availableUnit: \"K\")\n-      if (unitsRelation \u003c 0) {\n-        availableResourceValue \u003d\n-            UnitsConversionUtil.convert(availableRI.getUnits(),\n-                requestedRI.getUnits(), availableRI.getValue());\n-\n-        // requested resource unit is greater than available resource unit\n-        // e.g. requestedUnit: \"G\", availableUnit: \"M\")\n-      } else if (unitsRelation \u003e 0) {\n-        requestedResourceValue \u003d\n-            UnitsConversionUtil.convert(requestedRI.getUnits(),\n-                availableRI.getUnits(), requestedRI.getValue());\n-      }\n-\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Requested resource value after conversion: \" +\n-                requestedResourceValue);\n-        LOG.info(\"Available resource value after conversion: \" +\n-                availableResourceValue);\n-      }\n-\n-      if (requestedResourceValue \u003e availableResourceValue) {\n+      boolean valid \u003d checkResource(requestedRI, availableResource);\n+      if (!valid) {\n         throwInvalidResourceException(reqResource, availableResource,\n             reqResourceName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n      Resource availableResource) throws InvalidResourceRequestException {\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n      final ResourceInformation requestedRI \u003d\n          reqResource.getResourceInformation(i);\n      final String reqResourceName \u003d requestedRI.getName();\n\n      if (requestedRI.getValue() \u003c 0) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName);\n      }\n\n      boolean valid \u003d checkResource(requestedRI, availableResource);\n      if (!valid) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8202. DefaultAMSProcessor should properly check units of requested custom resource types against minimum/maximum allocation (snemeth via rkanter)\n",
      "commitDate": "10/05/18 9:31 AM",
      "commitName": "c8b53c43644b4ad22d5385c22cad8ed573c0b1ba",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,54 @@\n+  static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n+      Resource availableResource) throws InvalidResourceRequestException {\n+    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n+      final ResourceInformation requestedRI \u003d\n+          reqResource.getResourceInformation(i);\n+      final String reqResourceName \u003d requestedRI.getName();\n+\n+      if (requestedRI.getValue() \u003c 0) {\n+        throwInvalidResourceException(reqResource, availableResource,\n+            reqResourceName);\n+      }\n+\n+      final ResourceInformation availableRI \u003d\n+          availableResource.getResourceInformation(reqResourceName);\n+\n+      long requestedResourceValue \u003d requestedRI.getValue();\n+      long availableResourceValue \u003d availableRI.getValue();\n+      int unitsRelation \u003d UnitsConversionUtil\n+          .compareUnits(requestedRI.getUnits(), availableRI.getUnits());\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Requested resource information: \" + requestedRI);\n+        LOG.debug(\"Available resource information: \" + availableRI);\n+        LOG.debug(\"Relation of units: \" + unitsRelation);\n+      }\n+\n+      // requested resource unit is less than available resource unit\n+      // e.g. requestedUnit: \"m\", availableUnit: \"K\")\n+      if (unitsRelation \u003c 0) {\n+        availableResourceValue \u003d\n+            UnitsConversionUtil.convert(availableRI.getUnits(),\n+                requestedRI.getUnits(), availableRI.getValue());\n+\n+        // requested resource unit is greater than available resource unit\n+        // e.g. requestedUnit: \"G\", availableUnit: \"M\")\n+      } else if (unitsRelation \u003e 0) {\n+        requestedResourceValue \u003d\n+            UnitsConversionUtil.convert(requestedRI.getUnits(),\n+                availableRI.getUnits(), requestedRI.getValue());\n+      }\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Requested resource value after conversion: \" +\n+                requestedResourceValue);\n+        LOG.info(\"Available resource value after conversion: \" +\n+                availableResourceValue);\n+      }\n+\n+      if (requestedResourceValue \u003e availableResourceValue) {\n+        throwInvalidResourceException(reqResource, availableResource,\n+            reqResourceName);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkResourceRequestAgainstAvailableResource(Resource reqResource,\n      Resource availableResource) throws InvalidResourceRequestException {\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n      final ResourceInformation requestedRI \u003d\n          reqResource.getResourceInformation(i);\n      final String reqResourceName \u003d requestedRI.getName();\n\n      if (requestedRI.getValue() \u003c 0) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName);\n      }\n\n      final ResourceInformation availableRI \u003d\n          availableResource.getResourceInformation(reqResourceName);\n\n      long requestedResourceValue \u003d requestedRI.getValue();\n      long availableResourceValue \u003d availableRI.getValue();\n      int unitsRelation \u003d UnitsConversionUtil\n          .compareUnits(requestedRI.getUnits(), availableRI.getUnits());\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Requested resource information: \" + requestedRI);\n        LOG.debug(\"Available resource information: \" + availableRI);\n        LOG.debug(\"Relation of units: \" + unitsRelation);\n      }\n\n      // requested resource unit is less than available resource unit\n      // e.g. requestedUnit: \"m\", availableUnit: \"K\")\n      if (unitsRelation \u003c 0) {\n        availableResourceValue \u003d\n            UnitsConversionUtil.convert(availableRI.getUnits(),\n                requestedRI.getUnits(), availableRI.getValue());\n\n        // requested resource unit is greater than available resource unit\n        // e.g. requestedUnit: \"G\", availableUnit: \"M\")\n      } else if (unitsRelation \u003e 0) {\n        requestedResourceValue \u003d\n            UnitsConversionUtil.convert(requestedRI.getUnits(),\n                availableRI.getUnits(), requestedRI.getValue());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Requested resource value after conversion: \" +\n                requestedResourceValue);\n        LOG.info(\"Available resource value after conversion: \" +\n                availableResourceValue);\n      }\n\n      if (requestedResourceValue \u003e availableResourceValue) {\n        throwInvalidResourceException(reqResource, availableResource,\n            reqResourceName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}