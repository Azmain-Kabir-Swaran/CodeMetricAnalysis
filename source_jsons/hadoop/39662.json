{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "getHeadroom",
  "functionId": "getHeadroom___user-User__queueCurrentLimit-Resource__clusterResource-Resource__application-FiCaSchedulerApp__partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1360,
  "functionEndLine": 1367,
  "numCommitsSeen": 346,
  "timeTaken": 7364,
  "changeHistory": [
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "ec06957941367930c855b5e05e6a84ba676fd46a",
    "6eaca2e3634a88dc55689e8960352d6248c424d9",
    "14dd647c556016d351f425ee956ccf800ccb9ce2",
    "86358221fc85a7743052a0b4c1647353508bf308",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8"
  ],
  "changeHistoryShort": {
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ybodychange",
    "ec06957941367930c855b5e05e6a84ba676fd46a": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "6eaca2e3634a88dc55689e8960352d6248c424d9": "Ybodychange",
    "14dd647c556016d351f425ee956ccf800ccb9ce2": "Ymultichange(Yparameterchange,Ybodychange)",
    "86358221fc85a7743052a0b4c1647353508bf308": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3": "Ybodychange",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n       Resource clusterResource, FiCaSchedulerApp application,\n       String partition) {\n     return getHeadroom(user, queueCurrentLimit, clusterResource,\n-        computeUserLimit(application.getUser(), clusterResource, user,\n+        getResourceLimitForActiveUsers(application.getUser(), clusterResource,\n             partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),\n         partition);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n      Resource clusterResource, FiCaSchedulerApp application,\n      String partition) {\n    return getHeadroom(user, queueCurrentLimit, clusterResource,\n        getResourceLimitForActiveUsers(application.getUser(), clusterResource,\n            partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),\n        partition);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/10/16 1:17 AM",
      "commitNameOld": "1c8ab41e8b3477a93cbdf0b553a87b131eb60e1f",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 2.58,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,8 @@\n   protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n       Resource clusterResource, FiCaSchedulerApp application,\n       String partition) {\n     return getHeadroom(user, queueCurrentLimit, clusterResource,\n-        computeUserLimit(application, clusterResource, user, partition,\n-            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n+        computeUserLimit(application.getUser(), clusterResource, user,\n+            partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),\n+        partition);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n      Resource clusterResource, FiCaSchedulerApp application,\n      String partition) {\n    return getHeadroom(user, queueCurrentLimit, clusterResource,\n        computeUserLimit(application.getUser(), clusterResource, user,\n            partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),\n        partition);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "ec06957941367930c855b5e05e6a84ba676fd46a": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3215. Respect labels in CapacityScheduler when computing headroom. (Naganarasimha G R via wangda)\n",
      "commitDate": "08/04/16 3:33 PM",
      "commitName": "ec06957941367930c855b5e05e6a84ba676fd46a",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3215. Respect labels in CapacityScheduler when computing headroom. (Naganarasimha G R via wangda)\n",
          "commitDate": "08/04/16 3:33 PM",
          "commitName": "ec06957941367930c855b5e05e6a84ba676fd46a",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/16 5:07 PM",
          "commitNameOld": "fc055a3cbe9545cf1c59421641c7b296aa33f953",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,7 @@\n-  private Resource getHeadroom(User user, Resource currentResourceLimit,\n-      Resource clusterResource, Resource userLimit) {\n-    /** \n-     * Headroom is:\n-     *    min(\n-     *        min(userLimit, queueMaxCap) - userConsumed,\n-     *        queueMaxCap - queueUsedResources\n-     *       )\n-     * \n-     * ( which can be expressed as, \n-     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n-     *    queueMaxCap - queueUsedResources)\n-     *  )\n-     *\n-     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n-     *\n-     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n-     *\n-     */\n-    Resource headroom \u003d \n-      Resources.componentwiseMin(\n-        Resources.subtract(userLimit, user.getUsed()),\n-        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n-        );\n-    // Normalize it before return\n-    headroom \u003d\n-        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n-    return headroom;\n+  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n+      Resource clusterResource, FiCaSchedulerApp application,\n+      String partition) {\n+    return getHeadroom(user, queueCurrentLimit, clusterResource,\n+        computeUserLimit(application, clusterResource, user, partition,\n+            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n      Resource clusterResource, FiCaSchedulerApp application,\n      String partition) {\n    return getHeadroom(user, queueCurrentLimit, clusterResource,\n        computeUserLimit(application, clusterResource, user, partition,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[user-User, currentResourceLimit-Resource, clusterResource-Resource, userLimit-Resource]",
            "newValue": "[user-User, queueCurrentLimit-Resource, clusterResource-Resource, application-FiCaSchedulerApp, partition-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3215. Respect labels in CapacityScheduler when computing headroom. (Naganarasimha G R via wangda)\n",
          "commitDate": "08/04/16 3:33 PM",
          "commitName": "ec06957941367930c855b5e05e6a84ba676fd46a",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/16 5:07 PM",
          "commitNameOld": "fc055a3cbe9545cf1c59421641c7b296aa33f953",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,7 @@\n-  private Resource getHeadroom(User user, Resource currentResourceLimit,\n-      Resource clusterResource, Resource userLimit) {\n-    /** \n-     * Headroom is:\n-     *    min(\n-     *        min(userLimit, queueMaxCap) - userConsumed,\n-     *        queueMaxCap - queueUsedResources\n-     *       )\n-     * \n-     * ( which can be expressed as, \n-     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n-     *    queueMaxCap - queueUsedResources)\n-     *  )\n-     *\n-     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n-     *\n-     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n-     *\n-     */\n-    Resource headroom \u003d \n-      Resources.componentwiseMin(\n-        Resources.subtract(userLimit, user.getUsed()),\n-        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n-        );\n-    // Normalize it before return\n-    headroom \u003d\n-        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n-    return headroom;\n+  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n+      Resource clusterResource, FiCaSchedulerApp application,\n+      String partition) {\n+    return getHeadroom(user, queueCurrentLimit, clusterResource,\n+        computeUserLimit(application, clusterResource, user, partition,\n+            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n      Resource clusterResource, FiCaSchedulerApp application,\n      String partition) {\n    return getHeadroom(user, queueCurrentLimit, clusterResource,\n        computeUserLimit(application, clusterResource, user, partition,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3215. Respect labels in CapacityScheduler when computing headroom. (Naganarasimha G R via wangda)\n",
          "commitDate": "08/04/16 3:33 PM",
          "commitName": "ec06957941367930c855b5e05e6a84ba676fd46a",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/16 5:07 PM",
          "commitNameOld": "fc055a3cbe9545cf1c59421641c7b296aa33f953",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,7 @@\n-  private Resource getHeadroom(User user, Resource currentResourceLimit,\n-      Resource clusterResource, Resource userLimit) {\n-    /** \n-     * Headroom is:\n-     *    min(\n-     *        min(userLimit, queueMaxCap) - userConsumed,\n-     *        queueMaxCap - queueUsedResources\n-     *       )\n-     * \n-     * ( which can be expressed as, \n-     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n-     *    queueMaxCap - queueUsedResources)\n-     *  )\n-     *\n-     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n-     *\n-     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n-     *\n-     */\n-    Resource headroom \u003d \n-      Resources.componentwiseMin(\n-        Resources.subtract(userLimit, user.getUsed()),\n-        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n-        );\n-    // Normalize it before return\n-    headroom \u003d\n-        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n-    return headroom;\n+  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n+      Resource clusterResource, FiCaSchedulerApp application,\n+      String partition) {\n+    return getHeadroom(user, queueCurrentLimit, clusterResource,\n+        computeUserLimit(application, clusterResource, user, partition,\n+            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Resource getHeadroom(User user, Resource queueCurrentLimit,\n      Resource clusterResource, FiCaSchedulerApp application,\n      String partition) {\n    return getHeadroom(user, queueCurrentLimit, clusterResource,\n        computeUserLimit(application, clusterResource, user, partition,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY), partition);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "6eaca2e3634a88dc55689e8960352d6248c424d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4105. Capacity Scheduler headroom for DRF is wrong. Contributed by Chang Li\n",
      "commitDate": "04/09/15 8:30 AM",
      "commitName": "6eaca2e3634a88dc55689e8960352d6248c424d9",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/09/15 1:49 AM",
      "commitNameOld": "bf669b6d9f8ba165e30b8823218d625a49958925",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 3.28,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private Resource getHeadroom(User user, Resource currentResourceLimit,\n       Resource clusterResource, Resource userLimit) {\n     /** \n      * Headroom is:\n      *    min(\n      *        min(userLimit, queueMaxCap) - userConsumed,\n      *        queueMaxCap - queueUsedResources\n      *       )\n      * \n      * ( which can be expressed as, \n      *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n      *    queueMaxCap - queueUsedResources)\n      *  )\n      *\n      * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n      *\n      * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n      *\n      */\n     Resource headroom \u003d \n-      Resources.min(resourceCalculator, clusterResource,\n+      Resources.componentwiseMin(\n         Resources.subtract(userLimit, user.getUsed()),\n         Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n         );\n     // Normalize it before return\n     headroom \u003d\n         Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource getHeadroom(User user, Resource currentResourceLimit,\n      Resource clusterResource, Resource userLimit) {\n    /** \n     * Headroom is:\n     *    min(\n     *        min(userLimit, queueMaxCap) - userConsumed,\n     *        queueMaxCap - queueUsedResources\n     *       )\n     * \n     * ( which can be expressed as, \n     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n     *    queueMaxCap - queueUsedResources)\n     *  )\n     *\n     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n     *\n     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n     *\n     */\n    Resource headroom \u003d \n      Resources.componentwiseMin(\n        Resources.subtract(userLimit, user.getUsed()),\n        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n        );\n    // Normalize it before return\n    headroom \u003d\n        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "14dd647c556016d351f425ee956ccf800ccb9ce2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
      "commitDate": "02/03/15 5:52 PM",
      "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
          "commitDate": "02/03/15 5:52 PM",
          "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/02/15 2:58 PM",
          "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.12,
          "commitsBetweenForRepo": 155,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  private Resource getHeadroom(User user, Resource queueMaxCap,\n+  private Resource getHeadroom(User user, Resource currentResourceLimit,\n       Resource clusterResource, Resource userLimit) {\n     /** \n      * Headroom is:\n      *    min(\n      *        min(userLimit, queueMaxCap) - userConsumed,\n      *        queueMaxCap - queueUsedResources\n      *       )\n      * \n      * ( which can be expressed as, \n      *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n      *    queueMaxCap - queueUsedResources)\n      *  )\n      *\n      * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n      *\n      * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n      *\n      */\n     Resource headroom \u003d \n       Resources.min(resourceCalculator, clusterResource,\n         Resources.subtract(userLimit, user.getUsed()),\n-        Resources.subtract(queueMaxCap, queueUsage.getUsed())\n+        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n         );\n+    // Normalize it before return\n+    headroom \u003d\n+        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n     return headroom;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Resource getHeadroom(User user, Resource currentResourceLimit,\n      Resource clusterResource, Resource userLimit) {\n    /** \n     * Headroom is:\n     *    min(\n     *        min(userLimit, queueMaxCap) - userConsumed,\n     *        queueMaxCap - queueUsedResources\n     *       )\n     * \n     * ( which can be expressed as, \n     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n     *    queueMaxCap - queueUsedResources)\n     *  )\n     *\n     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n     *\n     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n     *\n     */\n    Resource headroom \u003d \n      Resources.min(resourceCalculator, clusterResource,\n        Resources.subtract(userLimit, user.getUsed()),\n        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n        );\n    // Normalize it before return\n    headroom \u003d\n        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n    return headroom;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[user-User, queueMaxCap-Resource, clusterResource-Resource, userLimit-Resource]",
            "newValue": "[user-User, currentResourceLimit-Resource, clusterResource-Resource, userLimit-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
          "commitDate": "02/03/15 5:52 PM",
          "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/02/15 2:58 PM",
          "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.12,
          "commitsBetweenForRepo": 155,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  private Resource getHeadroom(User user, Resource queueMaxCap,\n+  private Resource getHeadroom(User user, Resource currentResourceLimit,\n       Resource clusterResource, Resource userLimit) {\n     /** \n      * Headroom is:\n      *    min(\n      *        min(userLimit, queueMaxCap) - userConsumed,\n      *        queueMaxCap - queueUsedResources\n      *       )\n      * \n      * ( which can be expressed as, \n      *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n      *    queueMaxCap - queueUsedResources)\n      *  )\n      *\n      * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n      *\n      * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n      *\n      */\n     Resource headroom \u003d \n       Resources.min(resourceCalculator, clusterResource,\n         Resources.subtract(userLimit, user.getUsed()),\n-        Resources.subtract(queueMaxCap, queueUsage.getUsed())\n+        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n         );\n+    // Normalize it before return\n+    headroom \u003d\n+        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n     return headroom;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Resource getHeadroom(User user, Resource currentResourceLimit,\n      Resource clusterResource, Resource userLimit) {\n    /** \n     * Headroom is:\n     *    min(\n     *        min(userLimit, queueMaxCap) - userConsumed,\n     *        queueMaxCap - queueUsedResources\n     *       )\n     * \n     * ( which can be expressed as, \n     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n     *    queueMaxCap - queueUsedResources)\n     *  )\n     *\n     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n     *\n     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n     *\n     */\n    Resource headroom \u003d \n      Resources.min(resourceCalculator, clusterResource,\n        Resources.subtract(userLimit, user.getUsed()),\n        Resources.subtract(currentResourceLimit, queueUsage.getUsed())\n        );\n    // Normalize it before return\n    headroom \u003d\n        Resources.roundDown(resourceCalculator, headroom, minimumAllocation);\n    return headroom;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "86358221fc85a7743052a0b4c1647353508bf308": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3099. Capacity Scheduler LeafQueue/ParentQueue should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "30/01/15 3:15 PM",
      "commitName": "86358221fc85a7743052a0b4c1647353508bf308",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/01/15 3:36 PM",
      "commitNameOld": "18741adf97f4fda5f8743318b59c440928e51297",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.99,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private Resource getHeadroom(User user, Resource queueMaxCap,\n       Resource clusterResource, Resource userLimit) {\n     /** \n      * Headroom is:\n      *    min(\n      *        min(userLimit, queueMaxCap) - userConsumed,\n      *        queueMaxCap - queueUsedResources\n      *       )\n      * \n      * ( which can be expressed as, \n      *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n      *    queueMaxCap - queueUsedResources)\n      *  )\n      *\n      * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n      *\n      * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n      *\n      */\n     Resource headroom \u003d \n       Resources.min(resourceCalculator, clusterResource,\n-        Resources.subtract(userLimit, user.getTotalConsumedResources()),\n-        Resources.subtract(queueMaxCap, usedResources)\n+        Resources.subtract(userLimit, user.getUsed()),\n+        Resources.subtract(queueMaxCap, queueUsage.getUsed())\n         );\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource getHeadroom(User user, Resource queueMaxCap,\n      Resource clusterResource, Resource userLimit) {\n    /** \n     * Headroom is:\n     *    min(\n     *        min(userLimit, queueMaxCap) - userConsumed,\n     *        queueMaxCap - queueUsedResources\n     *       )\n     * \n     * ( which can be expressed as, \n     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n     *    queueMaxCap - queueUsedResources)\n     *  )\n     *\n     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n     *\n     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n     *\n     */\n    Resource headroom \u003d \n      Resources.min(resourceCalculator, clusterResource,\n        Resources.subtract(userLimit, user.getUsed()),\n        Resources.subtract(queueMaxCap, queueUsage.getUsed())\n        );\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/10/14 1:45 PM",
      "commitNameOld": "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.2,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private Resource getHeadroom(User user, Resource queueMaxCap,\n       Resource clusterResource, Resource userLimit) {\n     /** \n      * Headroom is:\n      *    min(\n      *        min(userLimit, queueMaxCap) - userConsumed,\n      *        queueMaxCap - queueUsedResources\n      *       )\n      * \n      * ( which can be expressed as, \n      *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n      *    queueMaxCap - queueUsedResources)\n      *  )\n      *\n      * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n      *\n      * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n      *\n      */\n     Resource headroom \u003d \n       Resources.min(resourceCalculator, clusterResource,\n-        Resources.subtract(userLimit, user.getConsumedResources()),\n+        Resources.subtract(userLimit, user.getTotalConsumedResources()),\n         Resources.subtract(queueMaxCap, usedResources)\n         );\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource getHeadroom(User user, Resource queueMaxCap,\n      Resource clusterResource, Resource userLimit) {\n    /** \n     * Headroom is:\n     *    min(\n     *        min(userLimit, queueMaxCap) - userConsumed,\n     *        queueMaxCap - queueUsedResources\n     *       )\n     * \n     * ( which can be expressed as, \n     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n     *    queueMaxCap - queueUsedResources)\n     *  )\n     *\n     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n     *\n     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n     *\n     */\n    Resource headroom \u003d \n      Resources.min(resourceCalculator, clusterResource,\n        Resources.subtract(userLimit, user.getTotalConsumedResources()),\n        Resources.subtract(queueMaxCap, usedResources)\n        );\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1857. CapacityScheduler headroom doesn\u0027t account for other AM\u0027s running. Contributed by Chen He and Craig Welch\n",
      "commitDate": "07/10/14 1:45 PM",
      "commitName": "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/10/14 3:48 PM",
      "commitNameOld": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,26 @@\n   private Resource getHeadroom(User user, Resource queueMaxCap,\n       Resource clusterResource, Resource userLimit) {\n+    /** \n+     * Headroom is:\n+     *    min(\n+     *        min(userLimit, queueMaxCap) - userConsumed,\n+     *        queueMaxCap - queueUsedResources\n+     *       )\n+     * \n+     * ( which can be expressed as, \n+     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n+     *    queueMaxCap - queueUsedResources)\n+     *  )\n+     *\n+     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n+     *\n+     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n+     *\n+     */\n     Resource headroom \u003d \n-        Resources.subtract(\n-            Resources.min(resourceCalculator, clusterResource, \n-                userLimit, queueMaxCap), \n-            user.getConsumedResources());\n+      Resources.min(resourceCalculator, clusterResource,\n+        Resources.subtract(userLimit, user.getConsumedResources()),\n+        Resources.subtract(queueMaxCap, usedResources)\n+        );\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource getHeadroom(User user, Resource queueMaxCap,\n      Resource clusterResource, Resource userLimit) {\n    /** \n     * Headroom is:\n     *    min(\n     *        min(userLimit, queueMaxCap) - userConsumed,\n     *        queueMaxCap - queueUsedResources\n     *       )\n     * \n     * ( which can be expressed as, \n     *  min (userLimit - userConsumed, queuMaxCap - userConsumed, \n     *    queueMaxCap - queueUsedResources)\n     *  )\n     *\n     * given that queueUsedResources \u003e\u003d userConsumed, this simplifies to\n     *\n     * \u003e\u003e min (userlimit - userConsumed,   queueMaxCap - queueUsedResources) \u003c\u003c \n     *\n     */\n    Resource headroom \u003d \n      Resources.min(resourceCalculator, clusterResource,\n        Resources.subtract(userLimit, user.getConsumedResources()),\n        Resources.subtract(queueMaxCap, usedResources)\n        );\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2644. Fixed CapacityScheduler to return up-to-date headroom when AM allocates. Contributed by Craig Welch\n",
      "commitDate": "06/10/14 3:48 PM",
      "commitName": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,9 @@\n+  private Resource getHeadroom(User user, Resource queueMaxCap,\n+      Resource clusterResource, Resource userLimit) {\n+    Resource headroom \u003d \n+        Resources.subtract(\n+            Resources.min(resourceCalculator, clusterResource, \n+                userLimit, queueMaxCap), \n+            user.getConsumedResources());\n+    return headroom;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource getHeadroom(User user, Resource queueMaxCap,\n      Resource clusterResource, Resource userLimit) {\n    Resource headroom \u003d \n        Resources.subtract(\n            Resources.min(resourceCalculator, clusterResource, \n                userLimit, queueMaxCap), \n            user.getConsumedResources());\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}