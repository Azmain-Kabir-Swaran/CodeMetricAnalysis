{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HostRestrictingAuthorizationFilter.java",
  "functionName": "handleInteraction",
  "functionId": "handleInteraction___interaction-HttpInteraction",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/HostRestrictingAuthorizationFilter.java",
  "functionStartLine": 228,
  "functionEndLine": 283,
  "numCommitsSeen": 2,
  "timeTaken": 1291,
  "changeHistory": [
    "f40dacdc2e42abced39f2706d1e3319430577269",
    "101d5b5f865f94e4772051ea8ce4ee0f92ddedca"
  ],
  "changeHistoryShort": {
    "f40dacdc2e42abced39f2706d1e3319430577269": "Ybodychange",
    "101d5b5f865f94e4772051ea8ce4ee0f92ddedca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f40dacdc2e42abced39f2706d1e3319430577269": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15320. StringIndexOutOfBoundsException in HostRestrictingAuthorizationFilter (#1992)\n\nSigned-off-by: Mingliang Liu \u003cliuml07@apache.org\u003e",
      "commitDate": "02/05/20 1:02 PM",
      "commitName": "f40dacdc2e42abced39f2706d1e3319430577269",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/06/19 5:55 PM",
      "commitNameOld": "101d5b5f865f94e4772051ea8ce4ee0f92ddedca",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 326.8,
      "commitsBetweenForRepo": 1776,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,56 @@\n   public void handleInteraction(HttpInteraction interaction)\n       throws IOException, ServletException {\n     final String address \u003d interaction.getRemoteAddr();\n     final String query \u003d interaction.getQueryString();\n-    final String path \u003d\n-        interaction.getRequestURI()\n-            .substring(WebHdfsFileSystem.PATH_PREFIX.length());\n+    final String uri \u003d interaction.getRequestURI();\n+    if (!uri.startsWith(WebHdfsFileSystem.PATH_PREFIX)) {\n+      LOG.trace(\"Rejecting interaction; wrong URI: {}\", uri);\n+      interaction.sendError(HttpServletResponse.SC_NOT_FOUND,\n+          \"The request URI must start with \" + WebHdfsFileSystem.PATH_PREFIX);\n+      return;\n+    }\n+    final String path \u003d uri.substring(WebHdfsFileSystem.PATH_PREFIX.length());\n     String user \u003d interaction.getRemoteUser();\n \n     LOG.trace(\"Got request user: {}, remoteIp: {}, query: {}, path: {}\",\n         user, address, query, path);\n     boolean authenticatedQuery \u003d\n         Arrays.stream(Optional.ofNullable(query).orElse(\"\")\n             .trim()\n             .split(\"\u0026\"))\n             .anyMatch(RESTRICTED_OPERATIONS);\n     if (!interaction.isCommitted() \u0026\u0026 authenticatedQuery) {\n       // loop over all query parts\n       String[] queryParts \u003d query.split(\"\u0026\");\n \n       if (user \u003d\u003d null) {\n         LOG.trace(\"Looking for delegation token to identify user\");\n         for (String part : queryParts) {\n           if (part.trim().startsWith(\"delegation\u003d\")) {\n             Token t \u003d new Token();\n             t.decodeFromUrlString(part.split(\"\u003d\", 2)[1]);\n             ByteArrayInputStream buf \u003d\n                 new ByteArrayInputStream(t.getIdentifier());\n             DelegationTokenIdentifier identifier \u003d\n                 new DelegationTokenIdentifier();\n             identifier.readFields(new DataInputStream(buf));\n             user \u003d identifier.getUser().getUserName();\n             LOG.trace(\"Updated request user: {}, remoteIp: {}, query: {}, \" +\n                 \"path: {}\", user, address, query, path);\n           }\n         }\n       }\n \n       if (authenticatedQuery \u0026\u0026 !(matchRule(\"*\", address,\n           path) || matchRule(user, address, path))) {\n         LOG.trace(\"Rejecting interaction; no rule found\");\n         interaction.sendError(HttpServletResponse.SC_FORBIDDEN,\n             \"WebHDFS is configured write-only for \" + user + \"@\" + address +\n                 \" for file: \" + path);\n         return;\n       }\n     }\n \n     LOG.trace(\"Proceeding with interaction\");\n     interaction.proceed();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handleInteraction(HttpInteraction interaction)\n      throws IOException, ServletException {\n    final String address \u003d interaction.getRemoteAddr();\n    final String query \u003d interaction.getQueryString();\n    final String uri \u003d interaction.getRequestURI();\n    if (!uri.startsWith(WebHdfsFileSystem.PATH_PREFIX)) {\n      LOG.trace(\"Rejecting interaction; wrong URI: {}\", uri);\n      interaction.sendError(HttpServletResponse.SC_NOT_FOUND,\n          \"The request URI must start with \" + WebHdfsFileSystem.PATH_PREFIX);\n      return;\n    }\n    final String path \u003d uri.substring(WebHdfsFileSystem.PATH_PREFIX.length());\n    String user \u003d interaction.getRemoteUser();\n\n    LOG.trace(\"Got request user: {}, remoteIp: {}, query: {}, path: {}\",\n        user, address, query, path);\n    boolean authenticatedQuery \u003d\n        Arrays.stream(Optional.ofNullable(query).orElse(\"\")\n            .trim()\n            .split(\"\u0026\"))\n            .anyMatch(RESTRICTED_OPERATIONS);\n    if (!interaction.isCommitted() \u0026\u0026 authenticatedQuery) {\n      // loop over all query parts\n      String[] queryParts \u003d query.split(\"\u0026\");\n\n      if (user \u003d\u003d null) {\n        LOG.trace(\"Looking for delegation token to identify user\");\n        for (String part : queryParts) {\n          if (part.trim().startsWith(\"delegation\u003d\")) {\n            Token t \u003d new Token();\n            t.decodeFromUrlString(part.split(\"\u003d\", 2)[1]);\n            ByteArrayInputStream buf \u003d\n                new ByteArrayInputStream(t.getIdentifier());\n            DelegationTokenIdentifier identifier \u003d\n                new DelegationTokenIdentifier();\n            identifier.readFields(new DataInputStream(buf));\n            user \u003d identifier.getUser().getUserName();\n            LOG.trace(\"Updated request user: {}, remoteIp: {}, query: {}, \" +\n                \"path: {}\", user, address, query, path);\n          }\n        }\n      }\n\n      if (authenticatedQuery \u0026\u0026 !(matchRule(\"*\", address,\n          path) || matchRule(user, address, path))) {\n        LOG.trace(\"Rejecting interaction; no rule found\");\n        interaction.sendError(HttpServletResponse.SC_FORBIDDEN,\n            \"WebHDFS is configured write-only for \" + user + \"@\" + address +\n                \" for file: \" + path);\n        return;\n      }\n    }\n\n    LOG.trace(\"Proceeding with interaction\");\n    interaction.proceed();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/HostRestrictingAuthorizationFilter.java",
      "extendedDetails": {}
    },
    "101d5b5f865f94e4772051ea8ce4ee0f92ddedca": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14234. Limit WebHDFS to specifc user, host, directory triples.\nContributed by Clay B.\n",
      "commitDate": "10/06/19 5:55 PM",
      "commitName": "101d5b5f865f94e4772051ea8ce4ee0f92ddedca",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,51 @@\n+  public void handleInteraction(HttpInteraction interaction)\n+      throws IOException, ServletException {\n+    final String address \u003d interaction.getRemoteAddr();\n+    final String query \u003d interaction.getQueryString();\n+    final String path \u003d\n+        interaction.getRequestURI()\n+            .substring(WebHdfsFileSystem.PATH_PREFIX.length());\n+    String user \u003d interaction.getRemoteUser();\n+\n+    LOG.trace(\"Got request user: {}, remoteIp: {}, query: {}, path: {}\",\n+        user, address, query, path);\n+    boolean authenticatedQuery \u003d\n+        Arrays.stream(Optional.ofNullable(query).orElse(\"\")\n+            .trim()\n+            .split(\"\u0026\"))\n+            .anyMatch(RESTRICTED_OPERATIONS);\n+    if (!interaction.isCommitted() \u0026\u0026 authenticatedQuery) {\n+      // loop over all query parts\n+      String[] queryParts \u003d query.split(\"\u0026\");\n+\n+      if (user \u003d\u003d null) {\n+        LOG.trace(\"Looking for delegation token to identify user\");\n+        for (String part : queryParts) {\n+          if (part.trim().startsWith(\"delegation\u003d\")) {\n+            Token t \u003d new Token();\n+            t.decodeFromUrlString(part.split(\"\u003d\", 2)[1]);\n+            ByteArrayInputStream buf \u003d\n+                new ByteArrayInputStream(t.getIdentifier());\n+            DelegationTokenIdentifier identifier \u003d\n+                new DelegationTokenIdentifier();\n+            identifier.readFields(new DataInputStream(buf));\n+            user \u003d identifier.getUser().getUserName();\n+            LOG.trace(\"Updated request user: {}, remoteIp: {}, query: {}, \" +\n+                \"path: {}\", user, address, query, path);\n+          }\n+        }\n+      }\n+\n+      if (authenticatedQuery \u0026\u0026 !(matchRule(\"*\", address,\n+          path) || matchRule(user, address, path))) {\n+        LOG.trace(\"Rejecting interaction; no rule found\");\n+        interaction.sendError(HttpServletResponse.SC_FORBIDDEN,\n+            \"WebHDFS is configured write-only for \" + user + \"@\" + address +\n+                \" for file: \" + path);\n+        return;\n+      }\n+    }\n+\n+    LOG.trace(\"Proceeding with interaction\");\n+    interaction.proceed();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handleInteraction(HttpInteraction interaction)\n      throws IOException, ServletException {\n    final String address \u003d interaction.getRemoteAddr();\n    final String query \u003d interaction.getQueryString();\n    final String path \u003d\n        interaction.getRequestURI()\n            .substring(WebHdfsFileSystem.PATH_PREFIX.length());\n    String user \u003d interaction.getRemoteUser();\n\n    LOG.trace(\"Got request user: {}, remoteIp: {}, query: {}, path: {}\",\n        user, address, query, path);\n    boolean authenticatedQuery \u003d\n        Arrays.stream(Optional.ofNullable(query).orElse(\"\")\n            .trim()\n            .split(\"\u0026\"))\n            .anyMatch(RESTRICTED_OPERATIONS);\n    if (!interaction.isCommitted() \u0026\u0026 authenticatedQuery) {\n      // loop over all query parts\n      String[] queryParts \u003d query.split(\"\u0026\");\n\n      if (user \u003d\u003d null) {\n        LOG.trace(\"Looking for delegation token to identify user\");\n        for (String part : queryParts) {\n          if (part.trim().startsWith(\"delegation\u003d\")) {\n            Token t \u003d new Token();\n            t.decodeFromUrlString(part.split(\"\u003d\", 2)[1]);\n            ByteArrayInputStream buf \u003d\n                new ByteArrayInputStream(t.getIdentifier());\n            DelegationTokenIdentifier identifier \u003d\n                new DelegationTokenIdentifier();\n            identifier.readFields(new DataInputStream(buf));\n            user \u003d identifier.getUser().getUserName();\n            LOG.trace(\"Updated request user: {}, remoteIp: {}, query: {}, \" +\n                \"path: {}\", user, address, query, path);\n          }\n        }\n      }\n\n      if (authenticatedQuery \u0026\u0026 !(matchRule(\"*\", address,\n          path) || matchRule(user, address, path))) {\n        LOG.trace(\"Rejecting interaction; no rule found\");\n        interaction.sendError(HttpServletResponse.SC_FORBIDDEN,\n            \"WebHDFS is configured write-only for \" + user + \"@\" + address +\n                \" for file: \" + path);\n        return;\n      }\n    }\n\n    LOG.trace(\"Proceeding with interaction\");\n    interaction.proceed();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/HostRestrictingAuthorizationFilter.java"
    }
  }
}