{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryFileManager.java",
  "functionName": "tryCreatingHistoryDirs",
  "functionId": "tryCreatingHistoryDirs___logWait-boolean",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
  "functionStartLine": 675,
  "functionEndLine": 738,
  "numCommitsSeen": 44,
  "timeTaken": 1919,
  "changeHistory": [
    "f6ef876fe158a5334cad7075f1966573a1c4dec9",
    "cc0a01c50308fe599b4bdd5a80068d6244062e4f",
    "5358b83167777a7108b32c9900fb0d01ca0fe961",
    "3a6f8b878501cc6961a8388813f33bbeb5ebae34"
  ],
  "changeHistoryShort": {
    "f6ef876fe158a5334cad7075f1966573a1c4dec9": "Ybodychange",
    "cc0a01c50308fe599b4bdd5a80068d6244062e4f": "Ybodychange",
    "5358b83167777a7108b32c9900fb0d01ca0fe961": "Ybodychange",
    "3a6f8b878501cc6961a8388813f33bbeb5ebae34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f6ef876fe158a5334cad7075f1966573a1c4dec9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6657. Job history server can fail on startup when NameNode is in start phase. Contributed by Haibo Chen.\n",
      "commitDate": "17/05/16 2:41 PM",
      "commitName": "f6ef876fe158a5334cad7075f1966573a1c4dec9",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/05/16 9:03 AM",
      "commitNameOld": "5ffb54694b52657f3b7de4560474ab740734e1b2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 7.23,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n     boolean succeeded \u003d true;\n     String doneDirPrefix \u003d JobHistoryUtils.\n         getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n       mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n           JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (ConnectException ex) {\n       if (logWait) {\n         LOG.info(\"Waiting for FileSystem at \" +\n             doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n       }\n       succeeded \u003d false;\n     } catch (IOException e) {\n-      if (isBecauseSafeMode(e)) {\n+      if (isNameNodeStillNotStarted(e)) {\n         succeeded \u003d false;\n         if (logWait) {\n           LOG.info(\"Waiting for FileSystem at \" +\n               doneDirPrefixPath.toUri().getAuthority() +\n               \"to be out of safe mode\");\n         }\n       } else {\n         throw new YarnRuntimeException(\"Error creating done directory: [\"\n             + doneDirPrefixPath + \"]\", e);\n       }\n     }\n     if (succeeded) {\n       String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n           getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n       try {\n         intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n             new Path(intermediateDoneDirPrefix));\n         intermediateDoneDirFc \u003d FileContext.getFileContext(\n             intermediateDoneDirPath.toUri(), conf);\n         mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n             JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n       } catch (ConnectException ex) {\n         succeeded \u003d false;\n         if (logWait) {\n           LOG.info(\"Waiting for FileSystem at \" +\n               intermediateDoneDirPath.toUri().getAuthority() +\n               \"to be available\");\n         }\n       } catch (IOException e) {\n-        if (isBecauseSafeMode(e)) {\n+        if (isNameNodeStillNotStarted(e)) {\n           succeeded \u003d false;\n           if (logWait) {\n             LOG.info(\"Waiting for FileSystem at \" +\n                 intermediateDoneDirPath.toUri().getAuthority() +\n                 \"to be out of safe mode\");\n           }\n         } else {\n           throw new YarnRuntimeException(\n               \"Error creating intermediate done directory: [\"\n               + intermediateDoneDirPath + \"]\", e);\n         }\n       }\n     }\n     return succeeded;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n    boolean succeeded \u003d true;\n    String doneDirPrefix \u003d JobHistoryUtils.\n        getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (ConnectException ex) {\n      if (logWait) {\n        LOG.info(\"Waiting for FileSystem at \" +\n            doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n      }\n      succeeded \u003d false;\n    } catch (IOException e) {\n      if (isNameNodeStillNotStarted(e)) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              doneDirPrefixPath.toUri().getAuthority() +\n              \"to be out of safe mode\");\n        }\n      } else {\n        throw new YarnRuntimeException(\"Error creating done directory: [\"\n            + doneDirPrefixPath + \"]\", e);\n      }\n    }\n    if (succeeded) {\n      String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n          getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n      try {\n        intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n            new Path(intermediateDoneDirPrefix));\n        intermediateDoneDirFc \u003d FileContext.getFileContext(\n            intermediateDoneDirPath.toUri(), conf);\n        mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n            JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n      } catch (ConnectException ex) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              intermediateDoneDirPath.toUri().getAuthority() +\n              \"to be available\");\n        }\n      } catch (IOException e) {\n        if (isNameNodeStillNotStarted(e)) {\n          succeeded \u003d false;\n          if (logWait) {\n            LOG.info(\"Waiting for FileSystem at \" +\n                intermediateDoneDirPath.toUri().getAuthority() +\n                \"to be out of safe mode\");\n          }\n        } else {\n          throw new YarnRuntimeException(\n              \"Error creating intermediate done directory: [\"\n              + intermediateDoneDirPath + \"]\", e);\n        }\n      }\n    }\n    return succeeded;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "cc0a01c50308fe599b4bdd5a80068d6244062e4f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"MAPREDUCE-6288. Changed permissions on JobHistory server\u0027s done directory so that user\u0027s client can load the conf files directly. Contributed by Robert Kanter.\"\n\nThis reverts commit 5358b83167777a7108b32c9900fb0d01ca0fe961.\n",
      "commitDate": "30/03/15 2:48 PM",
      "commitName": "cc0a01c50308fe599b4bdd5a80068d6244062e4f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/03/15 10:27 AM",
      "commitNameOld": "5358b83167777a7108b32c9900fb0d01ca0fe961",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,64 @@\n   boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n     boolean succeeded \u003d true;\n     String doneDirPrefix \u003d JobHistoryUtils.\n         getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n-      FsPermission doneDirPerm \u003d new FsPermission(\n-          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION);\n-      mkdir(doneDirFc, doneDirPrefixPath, doneDirPerm);\n-      checkHistoryDirsPermissions(doneDirFc, doneDirPrefixPath, doneDirPerm);\n+      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n+          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n     } catch (ConnectException ex) {\n       if (logWait) {\n         LOG.info(\"Waiting for FileSystem at \" +\n             doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n       }\n       succeeded \u003d false;\n     } catch (IOException e) {\n       if (isBecauseSafeMode(e)) {\n         succeeded \u003d false;\n         if (logWait) {\n           LOG.info(\"Waiting for FileSystem at \" +\n               doneDirPrefixPath.toUri().getAuthority() +\n               \"to be out of safe mode\");\n         }\n       } else {\n         throw new YarnRuntimeException(\"Error creating done directory: [\"\n             + doneDirPrefixPath + \"]\", e);\n       }\n     }\n     if (succeeded) {\n       String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n           getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n       try {\n         intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n             new Path(intermediateDoneDirPrefix));\n         intermediateDoneDirFc \u003d FileContext.getFileContext(\n             intermediateDoneDirPath.toUri(), conf);\n         mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n             JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n       } catch (ConnectException ex) {\n         succeeded \u003d false;\n         if (logWait) {\n           LOG.info(\"Waiting for FileSystem at \" +\n               intermediateDoneDirPath.toUri().getAuthority() +\n               \"to be available\");\n         }\n       } catch (IOException e) {\n         if (isBecauseSafeMode(e)) {\n           succeeded \u003d false;\n           if (logWait) {\n             LOG.info(\"Waiting for FileSystem at \" +\n                 intermediateDoneDirPath.toUri().getAuthority() +\n                 \"to be out of safe mode\");\n           }\n         } else {\n           throw new YarnRuntimeException(\n               \"Error creating intermediate done directory: [\"\n               + intermediateDoneDirPath + \"]\", e);\n         }\n       }\n     }\n     return succeeded;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n    boolean succeeded \u003d true;\n    String doneDirPrefix \u003d JobHistoryUtils.\n        getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (ConnectException ex) {\n      if (logWait) {\n        LOG.info(\"Waiting for FileSystem at \" +\n            doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n      }\n      succeeded \u003d false;\n    } catch (IOException e) {\n      if (isBecauseSafeMode(e)) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              doneDirPrefixPath.toUri().getAuthority() +\n              \"to be out of safe mode\");\n        }\n      } else {\n        throw new YarnRuntimeException(\"Error creating done directory: [\"\n            + doneDirPrefixPath + \"]\", e);\n      }\n    }\n    if (succeeded) {\n      String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n          getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n      try {\n        intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n            new Path(intermediateDoneDirPrefix));\n        intermediateDoneDirFc \u003d FileContext.getFileContext(\n            intermediateDoneDirPath.toUri(), conf);\n        mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n            JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n      } catch (ConnectException ex) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              intermediateDoneDirPath.toUri().getAuthority() +\n              \"to be available\");\n        }\n      } catch (IOException e) {\n        if (isBecauseSafeMode(e)) {\n          succeeded \u003d false;\n          if (logWait) {\n            LOG.info(\"Waiting for FileSystem at \" +\n                intermediateDoneDirPath.toUri().getAuthority() +\n                \"to be out of safe mode\");\n          }\n        } else {\n          throw new YarnRuntimeException(\n              \"Error creating intermediate done directory: [\"\n              + intermediateDoneDirPath + \"]\", e);\n        }\n      }\n    }\n    return succeeded;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "5358b83167777a7108b32c9900fb0d01ca0fe961": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6288. Changed permissions on JobHistory server\u0027s done directory so that user\u0027s client can load the conf files directly. Contributed by Robert Kanter.\n",
      "commitDate": "30/03/15 10:27 AM",
      "commitName": "5358b83167777a7108b32c9900fb0d01ca0fe961",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/15 5:36 PM",
      "commitNameOld": "fd57ab2002f97dcc83d455a5e0c770c8efde77a4",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 53.66,
      "commitsBetweenForRepo": 512,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,66 @@\n   boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n     boolean succeeded \u003d true;\n     String doneDirPrefix \u003d JobHistoryUtils.\n         getConfiguredHistoryServerDoneDirPrefix(conf);\n     try {\n       doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n           new Path(doneDirPrefix));\n       doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n       doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n-      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n-          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n+      FsPermission doneDirPerm \u003d new FsPermission(\n+          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION);\n+      mkdir(doneDirFc, doneDirPrefixPath, doneDirPerm);\n+      checkHistoryDirsPermissions(doneDirFc, doneDirPrefixPath, doneDirPerm);\n     } catch (ConnectException ex) {\n       if (logWait) {\n         LOG.info(\"Waiting for FileSystem at \" +\n             doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n       }\n       succeeded \u003d false;\n     } catch (IOException e) {\n       if (isBecauseSafeMode(e)) {\n         succeeded \u003d false;\n         if (logWait) {\n           LOG.info(\"Waiting for FileSystem at \" +\n               doneDirPrefixPath.toUri().getAuthority() +\n               \"to be out of safe mode\");\n         }\n       } else {\n         throw new YarnRuntimeException(\"Error creating done directory: [\"\n             + doneDirPrefixPath + \"]\", e);\n       }\n     }\n     if (succeeded) {\n       String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n           getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n       try {\n         intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n             new Path(intermediateDoneDirPrefix));\n         intermediateDoneDirFc \u003d FileContext.getFileContext(\n             intermediateDoneDirPath.toUri(), conf);\n         mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n             JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n       } catch (ConnectException ex) {\n         succeeded \u003d false;\n         if (logWait) {\n           LOG.info(\"Waiting for FileSystem at \" +\n               intermediateDoneDirPath.toUri().getAuthority() +\n               \"to be available\");\n         }\n       } catch (IOException e) {\n         if (isBecauseSafeMode(e)) {\n           succeeded \u003d false;\n           if (logWait) {\n             LOG.info(\"Waiting for FileSystem at \" +\n                 intermediateDoneDirPath.toUri().getAuthority() +\n                 \"to be out of safe mode\");\n           }\n         } else {\n           throw new YarnRuntimeException(\n               \"Error creating intermediate done directory: [\"\n               + intermediateDoneDirPath + \"]\", e);\n         }\n       }\n     }\n     return succeeded;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n    boolean succeeded \u003d true;\n    String doneDirPrefix \u003d JobHistoryUtils.\n        getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      FsPermission doneDirPerm \u003d new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION);\n      mkdir(doneDirFc, doneDirPrefixPath, doneDirPerm);\n      checkHistoryDirsPermissions(doneDirFc, doneDirPrefixPath, doneDirPerm);\n    } catch (ConnectException ex) {\n      if (logWait) {\n        LOG.info(\"Waiting for FileSystem at \" +\n            doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n      }\n      succeeded \u003d false;\n    } catch (IOException e) {\n      if (isBecauseSafeMode(e)) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              doneDirPrefixPath.toUri().getAuthority() +\n              \"to be out of safe mode\");\n        }\n      } else {\n        throw new YarnRuntimeException(\"Error creating done directory: [\"\n            + doneDirPrefixPath + \"]\", e);\n      }\n    }\n    if (succeeded) {\n      String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n          getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n      try {\n        intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n            new Path(intermediateDoneDirPrefix));\n        intermediateDoneDirFc \u003d FileContext.getFileContext(\n            intermediateDoneDirPath.toUri(), conf);\n        mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n            JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n      } catch (ConnectException ex) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              intermediateDoneDirPath.toUri().getAuthority() +\n              \"to be available\");\n        }\n      } catch (IOException e) {\n        if (isBecauseSafeMode(e)) {\n          succeeded \u003d false;\n          if (logWait) {\n            LOG.info(\"Waiting for FileSystem at \" +\n                intermediateDoneDirPath.toUri().getAuthority() +\n                \"to be out of safe mode\");\n          }\n        } else {\n          throw new YarnRuntimeException(\n              \"Error creating intermediate done directory: [\"\n              + intermediateDoneDirPath + \"]\", e);\n        }\n      }\n    }\n    return succeeded;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "3a6f8b878501cc6961a8388813f33bbeb5ebae34": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5724. JobHistoryServer does not start if HDFS is not running. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/14 9:10 AM",
      "commitName": "3a6f8b878501cc6961a8388813f33bbeb5ebae34",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,64 @@\n+  boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n+    boolean succeeded \u003d true;\n+    String doneDirPrefix \u003d JobHistoryUtils.\n+        getConfiguredHistoryServerDoneDirPrefix(conf);\n+    try {\n+      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n+          new Path(doneDirPrefix));\n+      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n+      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n+      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n+          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n+    } catch (ConnectException ex) {\n+      if (logWait) {\n+        LOG.info(\"Waiting for FileSystem at \" +\n+            doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n+      }\n+      succeeded \u003d false;\n+    } catch (IOException e) {\n+      if (isBecauseSafeMode(e)) {\n+        succeeded \u003d false;\n+        if (logWait) {\n+          LOG.info(\"Waiting for FileSystem at \" +\n+              doneDirPrefixPath.toUri().getAuthority() +\n+              \"to be out of safe mode\");\n+        }\n+      } else {\n+        throw new YarnRuntimeException(\"Error creating done directory: [\"\n+            + doneDirPrefixPath + \"]\", e);\n+      }\n+    }\n+    if (succeeded) {\n+      String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n+          getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n+      try {\n+        intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n+            new Path(intermediateDoneDirPrefix));\n+        intermediateDoneDirFc \u003d FileContext.getFileContext(\n+            intermediateDoneDirPath.toUri(), conf);\n+        mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n+            JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n+      } catch (ConnectException ex) {\n+        succeeded \u003d false;\n+        if (logWait) {\n+          LOG.info(\"Waiting for FileSystem at \" +\n+              intermediateDoneDirPath.toUri().getAuthority() +\n+              \"to be available\");\n+        }\n+      } catch (IOException e) {\n+        if (isBecauseSafeMode(e)) {\n+          succeeded \u003d false;\n+          if (logWait) {\n+            LOG.info(\"Waiting for FileSystem at \" +\n+                intermediateDoneDirPath.toUri().getAuthority() +\n+                \"to be out of safe mode\");\n+          }\n+        } else {\n+          throw new YarnRuntimeException(\n+              \"Error creating intermediate done directory: [\"\n+              + intermediateDoneDirPath + \"]\", e);\n+        }\n+      }\n+    }\n+    return succeeded;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {\n    boolean succeeded \u003d true;\n    String doneDirPrefix \u003d JobHistoryUtils.\n        getConfiguredHistoryServerDoneDirPrefix(conf);\n    try {\n      doneDirPrefixPath \u003d FileContext.getFileContext(conf).makeQualified(\n          new Path(doneDirPrefix));\n      doneDirFc \u003d FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);\n      doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);\n      mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(\n          JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));\n    } catch (ConnectException ex) {\n      if (logWait) {\n        LOG.info(\"Waiting for FileSystem at \" +\n            doneDirPrefixPath.toUri().getAuthority()  + \"to be available\");\n      }\n      succeeded \u003d false;\n    } catch (IOException e) {\n      if (isBecauseSafeMode(e)) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              doneDirPrefixPath.toUri().getAuthority() +\n              \"to be out of safe mode\");\n        }\n      } else {\n        throw new YarnRuntimeException(\"Error creating done directory: [\"\n            + doneDirPrefixPath + \"]\", e);\n      }\n    }\n    if (succeeded) {\n      String intermediateDoneDirPrefix \u003d JobHistoryUtils.\n          getConfiguredHistoryIntermediateDoneDirPrefix(conf);\n      try {\n        intermediateDoneDirPath \u003d FileContext.getFileContext(conf).makeQualified(\n            new Path(intermediateDoneDirPrefix));\n        intermediateDoneDirFc \u003d FileContext.getFileContext(\n            intermediateDoneDirPath.toUri(), conf);\n        mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(\n            JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));\n      } catch (ConnectException ex) {\n        succeeded \u003d false;\n        if (logWait) {\n          LOG.info(\"Waiting for FileSystem at \" +\n              intermediateDoneDirPath.toUri().getAuthority() +\n              \"to be available\");\n        }\n      } catch (IOException e) {\n        if (isBecauseSafeMode(e)) {\n          succeeded \u003d false;\n          if (logWait) {\n            LOG.info(\"Waiting for FileSystem at \" +\n                intermediateDoneDirPath.toUri().getAuthority() +\n                \"to be out of safe mode\");\n          }\n        } else {\n          throw new YarnRuntimeException(\n              \"Error creating intermediate done directory: [\"\n              + intermediateDoneDirPath + \"]\", e);\n        }\n      }\n    }\n    return succeeded;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java"
    }
  }
}