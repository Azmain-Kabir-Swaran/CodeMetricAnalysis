{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SecureDataNodeStarter.java",
  "functionName": "getSecureResources",
  "functionId": "getSecureResources___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
  "functionStartLine": 112,
  "functionEndLine": 183,
  "numCommitsSeen": 30,
  "timeTaken": 3818,
  "changeHistory": [
    "f20e10b2dd59f99d9af009bbbb60a067b9893e69",
    "e1cb278cd0287ce47f923941147d17540b199a99",
    "2da03b48eba53d4dec2a77209ad9835d808171d1",
    "3aac4758b007a56e3d66998d457b2156effca528",
    "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4",
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "e8de319789def7ccf2a7e9e14b1011ee825ff37b",
    "d02baff9a0d8cec92bde751777f3e575da2339c8",
    "64cbb3c2ffac484d2ebe7386d0f40db3bb995580",
    "c013142a12692df90f3b3bc5878918f2c9f8c55e"
  ],
  "changeHistoryShort": {
    "f20e10b2dd59f99d9af009bbbb60a067b9893e69": "Ybodychange",
    "e1cb278cd0287ce47f923941147d17540b199a99": "Ybodychange",
    "2da03b48eba53d4dec2a77209ad9835d808171d1": "Ybodychange",
    "3aac4758b007a56e3d66998d457b2156effca528": "Ybodychange",
    "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4": "Ybodychange",
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "e8de319789def7ccf2a7e9e14b1011ee825ff37b": "Ybodychange",
    "d02baff9a0d8cec92bde751777f3e575da2339c8": "Ymultichange(Yparameterchange,Ybodychange)",
    "64cbb3c2ffac484d2ebe7386d0f40db3bb995580": "Ybodychange",
    "c013142a12692df90f3b3bc5878918f2c9f8c55e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20e10b2dd59f99d9af009bbbb60a067b9893e69": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13081. Datanode#checkSecureConfig should allow SASL and privileged HTTP. Contributed by Ajay Kumar.\n",
      "commitDate": "28/02/18 9:44 AM",
      "commitName": "f20e10b2dd59f99d9af009bbbb60a067b9893e69",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "14/12/17 7:22 PM",
      "commitNameOld": "e1cb278cd0287ce47f923941147d17540b199a99",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 75.6,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,72 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n-    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n+    boolean isSaslEnabled \u003d\n+        DataTransferSaslUtil.getSaslPropertiesResolver(conf) !\u003d null;\n+    boolean isRpcPrivileged;\n+    boolean isHttpPrivileged \u003d false;\n \n+    System.err.println(\"isSaslEnabled:\" + isSaslEnabled);\n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsConstants.WRITE_TIMEOUT);\n     int backlogLength \u003d conf.getInt(\n         CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,\n         CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     try {\n       ss.bind(streamingAddr, backlogLength);\n     } catch (BindException e) {\n       BindException newBe \u003d appendMessageToBindException(e,\n           streamingAddr.toString());\n       throw newBe;\n     }\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n-\n-    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n-      throw new RuntimeException(\n-        \"Cannot start secure datanode with unprivileged RPC ports\");\n-    }\n-\n+    isRpcPrivileged \u003d SecurityUtil.isPrivilegedPort(ss.getLocalPort());\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     final ServerSocketChannel httpChannel;\n     if (policy.isHttpEnabled()) {\n       httpChannel \u003d ServerSocketChannel.open();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n       try {\n         httpChannel.socket().bind(infoSocAddr);\n       } catch (BindException e) {\n         BindException newBe \u003d appendMessageToBindException(e,\n             infoSocAddr.toString());\n         throw newBe;\n       }\n       InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n         .getLocalSocketAddress();\n \n       if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in \" +\n             \"secure context. Needed \" + infoSocAddr.getPort() + \", got \" +\n              ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n \n-      if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n-        throw new RuntimeException(\n-            \"Cannot start secure datanode with unprivileged HTTP ports\");\n-      }\n+      isHttpPrivileged \u003d SecurityUtil.isPrivilegedPort(localAddr.getPort());\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     } else {\n       httpChannel \u003d null;\n     }\n \n-    return new SecureResources(ss, httpChannel);\n+    return new SecureResources(ss, httpChannel, isSaslEnabled,\n+        isRpcPrivileged, isHttpPrivileged);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSaslEnabled \u003d\n        DataTransferSaslUtil.getSaslPropertiesResolver(conf) !\u003d null;\n    boolean isRpcPrivileged;\n    boolean isHttpPrivileged \u003d false;\n\n    System.err.println(\"isSaslEnabled:\" + isSaslEnabled);\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n    int backlogLength \u003d conf.getInt(\n        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,\n        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    try {\n      ss.bind(streamingAddr, backlogLength);\n    } catch (BindException e) {\n      BindException newBe \u003d appendMessageToBindException(e,\n          streamingAddr.toString());\n      throw newBe;\n    }\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n    isRpcPrivileged \u003d SecurityUtil.isPrivilegedPort(ss.getLocalPort());\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    final ServerSocketChannel httpChannel;\n    if (policy.isHttpEnabled()) {\n      httpChannel \u003d ServerSocketChannel.open();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      try {\n        httpChannel.socket().bind(infoSocAddr);\n      } catch (BindException e) {\n        BindException newBe \u003d appendMessageToBindException(e,\n            infoSocAddr.toString());\n        throw newBe;\n      }\n      InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n        .getLocalSocketAddress();\n\n      if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in \" +\n            \"secure context. Needed \" + infoSocAddr.getPort() + \", got \" +\n             ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n\n      isHttpPrivileged \u003d SecurityUtil.isPrivilegedPort(localAddr.getPort());\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    } else {\n      httpChannel \u003d null;\n    }\n\n    return new SecureResources(ss, httpChannel, isSaslEnabled,\n        isRpcPrivileged, isHttpPrivileged);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "e1cb278cd0287ce47f923941147d17540b199a99": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12910. Secure Datanode Starter should log the port when it fails to bind. Contributed by Stephen O\u0027Donnell and Nanda kumar.\n",
      "commitDate": "14/12/17 7:22 PM",
      "commitName": "e1cb278cd0287ce47f923941147d17540b199a99",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "02/02/16 10:59 AM",
      "commitNameOld": "2da03b48eba53d4dec2a77209ad9835d808171d1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 681.35,
      "commitsBetweenForRepo": 4604,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,75 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsConstants.WRITE_TIMEOUT);\n     int backlogLength \u003d conf.getInt(\n         CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,\n         CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n-    ss.bind(streamingAddr, backlogLength);\n+    try {\n+      ss.bind(streamingAddr, backlogLength);\n+    } catch (BindException e) {\n+      BindException newBe \u003d appendMessageToBindException(e,\n+          streamingAddr.toString());\n+      throw newBe;\n+    }\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n     if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n       throw new RuntimeException(\n         \"Cannot start secure datanode with unprivileged RPC ports\");\n     }\n \n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     final ServerSocketChannel httpChannel;\n     if (policy.isHttpEnabled()) {\n       httpChannel \u003d ServerSocketChannel.open();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n-      httpChannel.socket().bind(infoSocAddr);\n+      try {\n+        httpChannel.socket().bind(infoSocAddr);\n+      } catch (BindException e) {\n+        BindException newBe \u003d appendMessageToBindException(e,\n+            infoSocAddr.toString());\n+        throw newBe;\n+      }\n       InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n         .getLocalSocketAddress();\n \n       if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n-        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n-            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+        throw new RuntimeException(\"Unable to bind on specified info port in \" +\n+            \"secure context. Needed \" + infoSocAddr.getPort() + \", got \" +\n+             ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n \n       if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n         throw new RuntimeException(\n             \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     } else {\n       httpChannel \u003d null;\n     }\n \n     return new SecureResources(ss, httpChannel);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n    int backlogLength \u003d conf.getInt(\n        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,\n        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    try {\n      ss.bind(streamingAddr, backlogLength);\n    } catch (BindException e) {\n      BindException newBe \u003d appendMessageToBindException(e,\n          streamingAddr.toString());\n      throw newBe;\n    }\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    final ServerSocketChannel httpChannel;\n    if (policy.isHttpEnabled()) {\n      httpChannel \u003d ServerSocketChannel.open();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      try {\n        httpChannel.socket().bind(infoSocAddr);\n      } catch (BindException e) {\n        BindException newBe \u003d appendMessageToBindException(e,\n            infoSocAddr.toString());\n        throw newBe;\n      }\n      InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n        .getLocalSocketAddress();\n\n      if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in \" +\n            \"secure context. Needed \" + infoSocAddr.getPort() + \", got \" +\n             ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n\n      if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    } else {\n      httpChannel \u003d null;\n    }\n\n    return new SecureResources(ss, httpChannel);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "2da03b48eba53d4dec2a77209ad9835d808171d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9669. TcpPeerServer should respect ipc.server.listen.queue.size (Elliot Clark via cmccabe)\n",
      "commitDate": "02/02/16 10:59 AM",
      "commitName": "2da03b48eba53d4dec2a77209ad9835d808171d1",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "19/08/15 11:28 AM",
      "commitNameOld": "3aac4758b007a56e3d66998d457b2156effca528",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 167.02,
      "commitsBetweenForRepo": 1135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,62 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsConstants.WRITE_TIMEOUT);\n+    int backlogLength \u003d conf.getInt(\n+        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,\n+        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n-    ss.bind(streamingAddr, 0);\n+    ss.bind(streamingAddr, backlogLength);\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n     if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n       throw new RuntimeException(\n         \"Cannot start secure datanode with unprivileged RPC ports\");\n     }\n \n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     final ServerSocketChannel httpChannel;\n     if (policy.isHttpEnabled()) {\n       httpChannel \u003d ServerSocketChannel.open();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n       httpChannel.socket().bind(infoSocAddr);\n       InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n         .getLocalSocketAddress();\n \n       if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n             \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n \n       if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n         throw new RuntimeException(\n             \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     } else {\n       httpChannel \u003d null;\n     }\n \n     return new SecureResources(ss, httpChannel);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n    int backlogLength \u003d conf.getInt(\n        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,\n        CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, backlogLength);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    final ServerSocketChannel httpChannel;\n    if (policy.isHttpEnabled()) {\n      httpChannel \u003d ServerSocketChannel.open();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      httpChannel.socket().bind(infoSocAddr);\n      InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n        .getLocalSocketAddress();\n\n      if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n\n      if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    } else {\n      httpChannel \u003d null;\n    }\n\n    return new SecureResources(ss, httpChannel);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "3aac4758b007a56e3d66998d457b2156effca528": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8803. Move DfsClientConf to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "19/08/15 11:28 AM",
      "commitName": "3aac4758b007a56e3d66998d457b2156effca528",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 11:42 AM",
      "commitNameOld": "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 274.95,
      "commitsBetweenForRepo": 2112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n-        HdfsServerConstants.WRITE_TIMEOUT);\n+        HdfsConstants.WRITE_TIMEOUT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n     if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n       throw new RuntimeException(\n         \"Cannot start secure datanode with unprivileged RPC ports\");\n     }\n \n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     final ServerSocketChannel httpChannel;\n     if (policy.isHttpEnabled()) {\n       httpChannel \u003d ServerSocketChannel.open();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n       httpChannel.socket().bind(infoSocAddr);\n       InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n         .getLocalSocketAddress();\n \n       if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n             \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n \n       if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n         throw new RuntimeException(\n             \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     } else {\n       httpChannel \u003d null;\n     }\n \n     return new SecureResources(ss, httpChannel);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    final ServerSocketChannel httpChannel;\n    if (policy.isHttpEnabled()) {\n      httpChannel \u003d ServerSocketChannel.open();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      httpChannel.socket().bind(infoSocAddr);\n      InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n        .getLocalSocketAddress();\n\n      if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n\n      if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    } else {\n      httpChannel \u003d null;\n    }\n\n    return new SecureResources(ss, httpChannel);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7279. Use netty to implement DatanodeWebHdfsMethods. Contributed by Haohui Mai.\n",
      "commitDate": "17/11/14 11:42 AM",
      "commitName": "bf8e4332cb4c33d0287ae6ecca61b335402ac1c4",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "14/11/14 4:43 PM",
      "commitNameOld": "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n     if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n       throw new RuntimeException(\n         \"Cannot start secure datanode with unprivileged RPC ports\");\n     }\n \n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n-    Connector listener \u003d null;\n+    final ServerSocketChannel httpChannel;\n     if (policy.isHttpEnabled()) {\n-      listener \u003d HttpServer2.createDefaultChannelConnector();\n+      httpChannel \u003d ServerSocketChannel.open();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n-      listener.setHost(infoSocAddr.getHostName());\n-      listener.setPort(infoSocAddr.getPort());\n-      // Open listener here in order to bind to port as root\n-      listener.open();\n-      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n+      httpChannel.socket().bind(infoSocAddr);\n+      InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n+        .getLocalSocketAddress();\n+\n+      if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n             \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n-          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n+          + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n \n-      if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n+      if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n         throw new RuntimeException(\n             \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n+    } else {\n+      httpChannel \u003d null;\n     }\n \n-    return new SecureResources(ss, listener);\n+    return new SecureResources(ss, httpChannel);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    final ServerSocketChannel httpChannel;\n    if (policy.isHttpEnabled()) {\n      httpChannel \u003d ServerSocketChannel.open();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      httpChannel.socket().bind(infoSocAddr);\n      InetSocketAddress localAddr \u003d (InetSocketAddress) httpChannel.socket()\n        .getLocalSocketAddress();\n\n      if (localAddr.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + localAddr.getPort() +\")\");\n\n      if (localAddr.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    } else {\n      httpChannel \u003d null;\n    }\n\n    return new SecureResources(ss, httpChannel);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7386. Replace check \"port number \u003c 1024\" with shared isPrivilegedPort method. Contributed by Yongjun Zhang.\n",
      "commitDate": "14/11/14 4:43 PM",
      "commitName": "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
      "commitAuthor": "cnauroth",
      "commitDateOld": "05/02/14 11:43 AM",
      "commitNameOld": "69dbf0b22587e4f8fe2651ebd53f873920f29c91",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 282.21,
      "commitsBetweenForRepo": 2375,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n-    if (ss.getLocalPort() \u003e 1023 \u0026\u0026 isSecure) {\n+    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n       throw new RuntimeException(\n         \"Cannot start secure datanode with unprivileged RPC ports\");\n     }\n \n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     Connector listener \u003d null;\n     if (policy.isHttpEnabled()) {\n       listener \u003d HttpServer2.createDefaultChannelConnector();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n       listener.setHost(infoSocAddr.getHostName());\n       listener.setPort(infoSocAddr.getPort());\n       // Open listener here in order to bind to port as root\n       listener.open();\n       if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n             \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n \n       if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n         throw new RuntimeException(\n             \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     }\n \n     return new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    Connector listener \u003d null;\n    if (policy.isHttpEnabled()) {\n      listener \u003d HttpServer2.createDefaultChannelConnector();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      listener.setHost(infoSocAddr.getHostName());\n      listener.setPort(infoSocAddr.getPort());\n      // Open listener here in order to bind to port as root\n      listener.open();\n      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n\n      if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    }\n\n    return new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "23/12/13 10:23 AM",
      "commitNameOld": "e8de319789def7ccf2a7e9e14b1011ee825ff37b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 35.55,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n     boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n     if (ss.getLocalPort() \u003e 1023 \u0026\u0026 isSecure) {\n       throw new RuntimeException(\n         \"Cannot start secure datanode with unprivileged RPC ports\");\n     }\n \n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     Connector listener \u003d null;\n     if (policy.isHttpEnabled()) {\n-      listener \u003d HttpServer.createDefaultChannelConnector();\n+      listener \u003d HttpServer2.createDefaultChannelConnector();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n       listener.setHost(infoSocAddr.getHostName());\n       listener.setPort(infoSocAddr.getPort());\n       // Open listener here in order to bind to port as root\n       listener.open();\n       if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n             \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n \n       if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n         throw new RuntimeException(\n             \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     }\n \n     return new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (ss.getLocalPort() \u003e 1023 \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    Connector listener \u003d null;\n    if (policy.isHttpEnabled()) {\n      listener \u003d HttpServer2.createDefaultChannelConnector();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      listener.setHost(infoSocAddr.getHostName());\n      listener.setPort(infoSocAddr.getPort());\n      // Open listener here in order to bind to port as root\n      listener.open();\n      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n\n      if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    }\n\n    return new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "e8de319789def7ccf2a7e9e14b1011ee825ff37b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5690. DataNode fails to start in secure mode when dfs.http.policy equals to HTTP_ONLY. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1553167 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/12/13 10:23 AM",
      "commitName": "e8de319789def7ccf2a7e9e14b1011ee825ff37b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/12/13 1:40 PM",
      "commitNameOld": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 18.86,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,57 @@\n   public static SecureResources getSecureResources(Configuration conf)\n       throws Exception {\n     HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n+    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(\n         DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\n           \"Unable to bind on specified streaming port in secure \"\n               + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n               + ss.getLocalPort());\n     }\n \n+    if (ss.getLocalPort() \u003e 1023 \u0026\u0026 isSecure) {\n+      throw new RuntimeException(\n+        \"Cannot start secure datanode with unprivileged RPC ports\");\n+    }\n+\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n \n     // Bind a port for the web server. The code intends to bind HTTP server to\n     // privileged port only, as the client can authenticate the server using\n     // certificates if they are communicating through SSL.\n     Connector listener \u003d null;\n     if (policy.isHttpEnabled()) {\n       listener \u003d HttpServer.createDefaultChannelConnector();\n       InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n       listener.setHost(infoSocAddr.getHostName());\n       listener.setPort(infoSocAddr.getPort());\n       // Open listener here in order to bind to port as root\n       listener.open();\n       if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n         throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n             \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n       }\n       System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n           + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n \n-      if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n-          UserGroupInformation.isSecurityEnabled()) {\n-        throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n+      if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n+        throw new RuntimeException(\n+            \"Cannot start secure datanode with unprivileged HTTP ports\");\n       }\n       System.err.println(\"Opened info server at \" + infoSocAddr);\n     }\n \n     return new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n    boolean isSecure \u003d UserGroupInformation.isSecurityEnabled();\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    if (ss.getLocalPort() \u003e 1023 \u0026\u0026 isSecure) {\n      throw new RuntimeException(\n        \"Cannot start secure datanode with unprivileged RPC ports\");\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    Connector listener \u003d null;\n    if (policy.isHttpEnabled()) {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      listener.setHost(infoSocAddr.getHostName());\n      listener.setPort(infoSocAddr.getPort());\n      // Open listener here in order to bind to port as root\n      listener.open();\n      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n\n      if (listener.getPort() \u003e 1023 \u0026\u0026 isSecure) {\n        throw new RuntimeException(\n            \"Cannot start secure datanode with unprivileged HTTP ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    }\n\n    return new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "d02baff9a0d8cec92bde751777f3e575da2339c8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 1:40 PM",
      "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/13 1:40 PM",
          "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/12/12 2:46 PM",
          "commitNameOld": "64cbb3c2ffac484d2ebe7386d0f40db3bb995580",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 358.95,
          "commitsBetweenForRepo": 2114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,51 @@\n-  public static SecureResources getSecureResources(final SSLFactory sslFactory,\n-                                  Configuration conf) throws Exception {\n+  public static SecureResources getSecureResources(Configuration conf)\n+      throws Exception {\n+    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n+\n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n-    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n+    int socketWriteTimeout \u003d conf.getInt(\n+        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n-    \n+\n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n-    \n+\n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n-          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+      throw new RuntimeException(\n+          \"Unable to bind on specified streaming port in secure \"\n+              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n+              + ss.getLocalPort());\n     }\n \n-    // Obtain secure listener for web server\n-    Connector listener;\n-    if (HttpConfig.isSecure()) {\n-      try {\n-        sslFactory.init();\n-      } catch (GeneralSecurityException ex) {\n-        throw new IOException(ex);\n-      }\n-      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n-        @Override\n-        protected SSLServerSocketFactory createFactory() throws Exception {\n-          return sslFactory.createSSLServerSocketFactory();\n-        }\n-      };\n-      listener \u003d sslListener;\n-    } else {\n-      listener \u003d HttpServer.createDefaultChannelConnector();\n-    }\n-\n-    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n-    listener.setHost(infoSocAddr.getHostName());\n-    listener.setPort(infoSocAddr.getPort());\n-    // Open listener here in order to bind to port as root\n-    listener.open();\n-    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n-          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n-    }\n-    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n-        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n-    \n-    if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n-        UserGroupInformation.isSecurityEnabled()) {\n-      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n-    }\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n-    System.err.println(\"Opened info server at \" + infoSocAddr);\n+\n+    // Bind a port for the web server. The code intends to bind HTTP server to\n+    // privileged port only, as the client can authenticate the server using\n+    // certificates if they are communicating through SSL.\n+    Connector listener \u003d null;\n+    if (policy.isHttpEnabled()) {\n+      listener \u003d HttpServer.createDefaultChannelConnector();\n+      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n+      listener.setHost(infoSocAddr.getHostName());\n+      listener.setPort(infoSocAddr.getPort());\n+      // Open listener here in order to bind to port as root\n+      listener.open();\n+      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n+        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n+            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+      }\n+      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n+          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n+\n+      if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n+          UserGroupInformation.isSecurityEnabled()) {\n+        throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n+      }\n+      System.err.println(\"Opened info server at \" + infoSocAddr);\n+    }\n+\n     return new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    Connector listener \u003d null;\n    if (policy.isHttpEnabled()) {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      listener.setHost(infoSocAddr.getHostName());\n      listener.setPort(infoSocAddr.getPort());\n      // Open listener here in order to bind to port as root\n      listener.open();\n      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n\n      if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n          UserGroupInformation.isSecurityEnabled()) {\n        throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    }\n\n    return new SecureResources(ss, listener);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
          "extendedDetails": {
            "oldValue": "[sslFactory-SSLFactory(modifiers-final), conf-Configuration]",
            "newValue": "[conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/13 1:40 PM",
          "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/12/12 2:46 PM",
          "commitNameOld": "64cbb3c2ffac484d2ebe7386d0f40db3bb995580",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 358.95,
          "commitsBetweenForRepo": 2114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,51 @@\n-  public static SecureResources getSecureResources(final SSLFactory sslFactory,\n-                                  Configuration conf) throws Exception {\n+  public static SecureResources getSecureResources(Configuration conf)\n+      throws Exception {\n+    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n+\n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n-    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n+    int socketWriteTimeout \u003d conf.getInt(\n+        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n-    \n+\n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n-    \n+\n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n-          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+      throw new RuntimeException(\n+          \"Unable to bind on specified streaming port in secure \"\n+              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n+              + ss.getLocalPort());\n     }\n \n-    // Obtain secure listener for web server\n-    Connector listener;\n-    if (HttpConfig.isSecure()) {\n-      try {\n-        sslFactory.init();\n-      } catch (GeneralSecurityException ex) {\n-        throw new IOException(ex);\n-      }\n-      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n-        @Override\n-        protected SSLServerSocketFactory createFactory() throws Exception {\n-          return sslFactory.createSSLServerSocketFactory();\n-        }\n-      };\n-      listener \u003d sslListener;\n-    } else {\n-      listener \u003d HttpServer.createDefaultChannelConnector();\n-    }\n-\n-    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n-    listener.setHost(infoSocAddr.getHostName());\n-    listener.setPort(infoSocAddr.getPort());\n-    // Open listener here in order to bind to port as root\n-    listener.open();\n-    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n-          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n-    }\n-    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n-        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n-    \n-    if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n-        UserGroupInformation.isSecurityEnabled()) {\n-      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n-    }\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n-    System.err.println(\"Opened info server at \" + infoSocAddr);\n+\n+    // Bind a port for the web server. The code intends to bind HTTP server to\n+    // privileged port only, as the client can authenticate the server using\n+    // certificates if they are communicating through SSL.\n+    Connector listener \u003d null;\n+    if (policy.isHttpEnabled()) {\n+      listener \u003d HttpServer.createDefaultChannelConnector();\n+      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n+      listener.setHost(infoSocAddr.getHostName());\n+      listener.setPort(infoSocAddr.getPort());\n+      // Open listener here in order to bind to port as root\n+      listener.open();\n+      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n+        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n+            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+      }\n+      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n+          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n+\n+      if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n+          UserGroupInformation.isSecurityEnabled()) {\n+        throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n+      }\n+      System.err.println(\"Opened info server at \" + infoSocAddr);\n+    }\n+\n     return new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static SecureResources getSecureResources(Configuration conf)\n      throws Exception {\n    HttpConfig.Policy policy \u003d DFSUtil.getHttpPolicy(conf);\n\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(\n        DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n\n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n\n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\n          \"Unable to bind on specified streaming port in secure \"\n              + \"context. Needed \" + streamingAddr.getPort() + \", got \"\n              + ss.getLocalPort());\n    }\n\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n\n    // Bind a port for the web server. The code intends to bind HTTP server to\n    // privileged port only, as the client can authenticate the server using\n    // certificates if they are communicating through SSL.\n    Connector listener \u003d null;\n    if (policy.isHttpEnabled()) {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n      InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n      listener.setHost(infoSocAddr.getHostName());\n      listener.setPort(infoSocAddr.getPort());\n      // Open listener here in order to bind to port as root\n      listener.open();\n      if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n        throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n            \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n      }\n      System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n          + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n\n      if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n          UserGroupInformation.isSecurityEnabled()) {\n        throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n      }\n      System.err.println(\"Opened info server at \" + infoSocAddr);\n    }\n\n    return new SecureResources(ss, listener);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
          "extendedDetails": {}
        }
      ]
    },
    "64cbb3c2ffac484d2ebe7386d0f40db3bb995580": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4295. Using port 1023 should be valid when starting Secure DataNode. Contributed by Stephen Chu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 2:46 PM",
      "commitName": "64cbb3c2ffac484d2ebe7386d0f40db3bb995580",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "06/11/12 4:48 PM",
      "commitNameOld": "c013142a12692df90f3b3bc5878918f2c9f8c55e",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 33.92,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public static SecureResources getSecureResources(final SSLFactory sslFactory,\n                                   Configuration conf) throws Exception {\n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n     \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n     \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n           \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n     }\n \n     // Obtain secure listener for web server\n     Connector listener;\n     if (HttpConfig.isSecure()) {\n       try {\n         sslFactory.init();\n       } catch (GeneralSecurityException ex) {\n         throw new IOException(ex);\n       }\n       SslSocketConnector sslListener \u003d new SslSocketConnector() {\n         @Override\n         protected SSLServerSocketFactory createFactory() throws Exception {\n           return sslFactory.createSSLServerSocketFactory();\n         }\n       };\n       listener \u003d sslListener;\n     } else {\n       listener \u003d HttpServer.createDefaultChannelConnector();\n     }\n \n     InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n     listener.setHost(infoSocAddr.getHostName());\n     listener.setPort(infoSocAddr.getPort());\n     // Open listener here in order to bind to port as root\n     listener.open();\n     if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n           \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n     }\n     System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n         + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n     \n-    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n+    if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n         UserGroupInformation.isSecurityEnabled()) {\n       throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n     }\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n     System.err.println(\"Opened info server at \" + infoSocAddr);\n     return new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(final SSLFactory sslFactory,\n                                  Configuration conf) throws Exception {\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n    \n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n\n    // Obtain secure listener for web server\n    Connector listener;\n    if (HttpConfig.isSecure()) {\n      try {\n        sslFactory.init();\n      } catch (GeneralSecurityException ex) {\n        throw new IOException(ex);\n      }\n      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n        @Override\n        protected SSLServerSocketFactory createFactory() throws Exception {\n          return sslFactory.createSSLServerSocketFactory();\n        }\n      };\n      listener \u003d sslListener;\n    } else {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n    }\n\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open();\n    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if ((ss.getLocalPort() \u003e 1023 || listener.getPort() \u003e 1023) \u0026\u0026\n        UserGroupInformation.isSecurityEnabled()) {\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    }\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n    System.err.println(\"Opened info server at \" + infoSocAddr);\n    return new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "c013142a12692df90f3b3bc5878918f2c9f8c55e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9004. Allow security unit tests to use external KDC. Contributed by Stephen Chu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/11/12 4:48 PM",
      "commitName": "c013142a12692df90f3b3bc5878918f2c9f8c55e",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,56 @@\n+  public static SecureResources getSecureResources(final SSLFactory sslFactory,\n+                                  Configuration conf) throws Exception {\n+    // Obtain secure port for data streaming to datanode\n+    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n+    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n+        HdfsServerConstants.WRITE_TIMEOUT);\n+    \n+    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n+        ServerSocketChannel.open().socket() : new ServerSocket();\n+    ss.bind(streamingAddr, 0);\n+    \n+    // Check that we got the port we need\n+    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n+      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n+          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+    }\n+\n+    // Obtain secure listener for web server\n+    Connector listener;\n+    if (HttpConfig.isSecure()) {\n+      try {\n+        sslFactory.init();\n+      } catch (GeneralSecurityException ex) {\n+        throw new IOException(ex);\n+      }\n+      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n+        @Override\n+        protected SSLServerSocketFactory createFactory() throws Exception {\n+          return sslFactory.createSSLServerSocketFactory();\n+        }\n+      };\n+      listener \u003d sslListener;\n+    } else {\n+      listener \u003d HttpServer.createDefaultChannelConnector();\n+    }\n+\n+    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n+    listener.setHost(infoSocAddr.getHostName());\n+    listener.setPort(infoSocAddr.getPort());\n+    // Open listener here in order to bind to port as root\n+    listener.open();\n+    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n+      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n+          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+    }\n+    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n+        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n+    \n+    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n+        UserGroupInformation.isSecurityEnabled()) {\n+      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n+    }\n+    System.err.println(\"Opened streaming server at \" + streamingAddr);\n+    System.err.println(\"Opened info server at \" + infoSocAddr);\n+    return new SecureResources(ss, listener);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SecureResources getSecureResources(final SSLFactory sslFactory,\n                                  Configuration conf) throws Exception {\n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n    \n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n\n    // Obtain secure listener for web server\n    Connector listener;\n    if (HttpConfig.isSecure()) {\n      try {\n        sslFactory.init();\n      } catch (GeneralSecurityException ex) {\n        throw new IOException(ex);\n      }\n      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n        @Override\n        protected SSLServerSocketFactory createFactory() throws Exception {\n          return sslFactory.createSSLServerSocketFactory();\n        }\n      };\n      listener \u003d sslListener;\n    } else {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n    }\n\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open();\n    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n        UserGroupInformation.isSecurityEnabled()) {\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    }\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n    System.err.println(\"Opened info server at \" + infoSocAddr);\n    return new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java"
    }
  }
}