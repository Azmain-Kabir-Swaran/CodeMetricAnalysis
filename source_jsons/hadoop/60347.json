{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourcePBImpl.java",
  "functionName": "initResources",
  "functionId": "initResources",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
  "functionStartLine": 134,
  "functionEndLine": 161,
  "numCommitsSeen": 26,
  "timeTaken": 5063,
  "changeHistory": [
    "0c8813f135f8c17f88660bb92529c15bb3a157ca",
    "7462c38277fa415703fc9074c1288d3bec73609c",
    "034b312d9f19024d2eabd377210d17d4080ef70e",
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "df3855541af98a3805958f2b5b9db6be705d52ab",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137"
  ],
  "changeHistoryShort": {
    "0c8813f135f8c17f88660bb92529c15bb3a157ca": "Ymodifierchange",
    "7462c38277fa415703fc9074c1288d3bec73609c": "Ybodychange",
    "034b312d9f19024d2eabd377210d17d4080ef70e": "Ybodychange",
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "df3855541af98a3805958f2b5b9db6be705d52ab": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ybodychange",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ybodychange",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Ybodychange",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c8813f135f8c17f88660bb92529c15bb3a157ca": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-9327. Improve synchronisation in ProtoUtils#convertToProtoFormat block. Contributed by Bibin A Chundatt.\n",
      "commitDate": "01/07/19 11:14 PM",
      "commitName": "0c8813f135f8c17f88660bb92529c15bb3a157ca",
      "commitAuthor": "Sunil G",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 119.93,
      "commitsBetweenForRepo": 874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-  private void initResources() {\n+  synchronized private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n     Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n     resources \u003d new ResourceInformation[types.length];\n \n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       Integer index \u003d indexMap.get(entry.getKey());\n       if (index \u003d\u003d null) {\n         LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n       } else {\n         resources[index] \u003d newDefaultInformation(types[index], entry);\n       }\n     }\n \n     resources[MEMORY_INDEX] \u003d ResourceInformation\n         .newInstance(ResourceInformation.MEMORY_MB);\n     resources[VCORES_INDEX] \u003d ResourceInformation\n         .newInstance(ResourceInformation.VCORES);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n \n     // Update missing resource information on respective index.\n     updateResourceInformationMap(types);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    resources \u003d new ResourceInformation[types.length];\n\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n      } else {\n        resources[index] \u003d newDefaultInformation(types[index], entry);\n      }\n    }\n\n    resources[MEMORY_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.MEMORY_MB);\n    resources[VCORES_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.VCORES);\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n\n    // Update missing resource information on respective index.\n    updateResourceInformationMap(types);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, synchronized]"
      }
    },
    "7462c38277fa415703fc9074c1288d3bec73609c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7483. CapacityScheduler test cases cleanup post YARN-5881. (Sunil G via wangda)\n\nChange-Id: I9741a6baf5cb7352d05636efb6c0b24790e7589a\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "7462c38277fa415703fc9074c1288d3bec73609c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "034b312d9f19024d2eabd377210d17d4080ef70e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n     Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n     resources \u003d new ResourceInformation[types.length];\n \n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       Integer index \u003d indexMap.get(entry.getKey());\n       if (index \u003d\u003d null) {\n         LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n       } else {\n         resources[index] \u003d newDefaultInformation(types[index], entry);\n       }\n     }\n \n     resources[MEMORY_INDEX] \u003d ResourceInformation\n         .newInstance(ResourceInformation.MEMORY_MB);\n     resources[VCORES_INDEX] \u003d ResourceInformation\n         .newInstance(ResourceInformation.VCORES);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n+\n+    // Update missing resource information on respective index.\n+    updateResourceInformationMap(types);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    resources \u003d new ResourceInformation[types.length];\n\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n      } else {\n        resources[index] \u003d newDefaultInformation(types[index], entry);\n      }\n    }\n\n    resources[MEMORY_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.MEMORY_MB);\n    resources[VCORES_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.VCORES);\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n\n    // Update missing resource information on respective index.\n    updateResourceInformationMap(types);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "034b312d9f19024d2eabd377210d17d4080ef70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7411. Inter-Queue preemption\u0027s computeFixpointAllocation need to handle absolute resources while computing normalizedGuarantee. (Sunil G via wangda)\n\nChange-Id: I41b1d7558c20fc4eb2050d40134175a2ef6330cb\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "034b312d9f19024d2eabd377210d17d4080ef70e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/11/17 2:51 PM",
      "commitNameOld": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 28.17,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n     Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n     resources \u003d new ResourceInformation[types.length];\n \n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       Integer index \u003d indexMap.get(entry.getKey());\n       if (index \u003d\u003d null) {\n         LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n       } else {\n         resources[index] \u003d newDefaultInformation(types[index], entry);\n       }\n     }\n \n     resources[MEMORY_INDEX] \u003d ResourceInformation\n         .newInstance(ResourceInformation.MEMORY_MB);\n     resources[VCORES_INDEX] \u003d ResourceInformation\n         .newInstance(ResourceInformation.VCORES);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n-\n-    // Update missing resource information on respective index.\n-    updateResourceInformationMap(types);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    resources \u003d new ResourceInformation[types.length];\n\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n      } else {\n        resources[index] \u003d newDefaultInformation(types[index], entry);\n      }\n    }\n\n    resources[MEMORY_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.MEMORY_MB);\n    resources[VCORES_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.VCORES);\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)\n\nChange-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595\n",
      "commitDate": "09/11/17 2:51 PM",
      "commitName": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "13/10/17 12:41 PM",
      "commitNameOld": "7a27c2c367518e1bf6ee393391a2f9b412113819",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 27.13,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n-    initResourcesMap();\n+    ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n     Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n-    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n-      ResourceTypes type \u003d\n-          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n-              ResourceTypes.COUNTABLE;\n+    resources \u003d new ResourceInformation[types.length];\n \n-      // When unit not specified in proto, use the default unit.\n-      String units \u003d\n-          entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(\n-              entry.getKey());\n-      long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n-      ResourceInformation ri \u003d ResourceInformation\n-          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n+    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       Integer index \u003d indexMap.get(entry.getKey());\n       if (index \u003d\u003d null) {\n-        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n+        LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n       } else {\n-        resources[index].setResourceType(ri.getResourceType());\n-        resources[index].setUnits(ri.getUnits());\n-        resources[index].setValue(value);\n+        resources[index] \u003d newDefaultInformation(types[index], entry);\n       }\n     }\n+\n+    resources[MEMORY_INDEX] \u003d ResourceInformation\n+        .newInstance(ResourceInformation.MEMORY_MB);\n+    resources[VCORES_INDEX] \u003d ResourceInformation\n+        .newInstance(ResourceInformation.VCORES);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n+\n+    // Update missing resource information on respective index.\n+    updateResourceInformationMap(types);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    ResourceInformation[] types \u003d ResourceUtils.getResourceTypesArray();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    resources \u003d new ResourceInformation[types.length];\n\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\n      } else {\n        resources[index] \u003d newDefaultInformation(types[index], entry);\n      }\n    }\n\n    resources[MEMORY_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.MEMORY_MB);\n    resources[VCORES_INDEX] \u003d ResourceInformation\n        .newInstance(ResourceInformation.VCORES);\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n\n    // Update missing resource information on respective index.\n    updateResourceInformationMap(types);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     initResourcesMap();\n     Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       ResourceTypes type \u003d\n           entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n               ResourceTypes.COUNTABLE;\n \n       // When unit not specified in proto, use the default unit.\n       String units \u003d\n           entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(\n               entry.getKey());\n       long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n       ResourceInformation ri \u003d ResourceInformation\n           .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n       Integer index \u003d indexMap.get(entry.getKey());\n       if (index \u003d\u003d null) {\n         LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n       } else {\n         resources[index].setResourceType(ri.getResourceType());\n         resources[index].setUnits(ri.getUnits());\n         resources[index].setValue(value);\n       }\n     }\n-    readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n\n      // When unit not specified in proto, use the default unit.\n      String units \u003d\n          entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(\n              entry.getKey());\n      long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d ResourceInformation\n          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n      } else {\n        resources[index].setResourceType(ri.getResourceType());\n        resources[index].setUnits(ri.getUnits());\n        resources[index].setValue(value);\n      }\n    }\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "df3855541af98a3805958f2b5b9db6be705d52ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6789. Add Client API to get all supported resource types from RM. (Sunil G via wangda)\n\nChange-Id: I366d8db6f6700acd087db5acb7a1be7e41b2b68d\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "df3855541af98a3805958f2b5b9db6be705d52ab",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "d5e9939ebb59e4f6f8e5e2fe7f619fb032f2911c",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     initResourcesMap();\n     Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       ResourceTypes type \u003d\n           entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n               ResourceTypes.COUNTABLE;\n-      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n+\n+      // When unit not specified in proto, use the default unit.\n+      String units \u003d\n+          entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(\n+              entry.getKey());\n       long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n       ResourceInformation ri \u003d ResourceInformation\n           .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n       Integer index \u003d indexMap.get(entry.getKey());\n       if (index \u003d\u003d null) {\n         LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n       } else {\n         resources[index].setResourceType(ri.getResourceType());\n         resources[index].setUnits(ri.getUnits());\n         resources[index].setValue(value);\n       }\n     }\n     readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n\n      // When unit not specified in proto, use the default unit.\n      String units \u003d\n          entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(\n              entry.getKey());\n      long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d ResourceInformation\n          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n      } else {\n        resources[index].setResourceType(ri.getResourceType());\n        resources[index].setUnits(ri.getUnits());\n        resources[index].setValue(value);\n      }\n    }\n    readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     initResourcesMap();\n+    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       ResourceTypes type \u003d\n           entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n               ResourceTypes.COUNTABLE;\n       String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n       long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n       ResourceInformation ri \u003d ResourceInformation\n           .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n-      if (resources.containsKey(ri.getName())) {\n-        resources.get(ri.getName()).setResourceType(ri.getResourceType());\n-        resources.get(ri.getName()).setUnits(ri.getUnits());\n-        resources.get(ri.getName()).setValue(value);\n-      } else {\n+      Integer index \u003d indexMap.get(entry.getKey());\n+      if (index \u003d\u003d null) {\n         LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n+      } else {\n+        resources[index].setResourceType(ri.getResourceType());\n+        resources[index].setUnits(ri.getUnits());\n+        resources[index].setValue(value);\n       }\n     }\n+    readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    Map\u003cString, Integer\u003e indexMap \u003d ResourceUtils.getResourceTypeIndex();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n      long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d ResourceInformation\n          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n      Integer index \u003d indexMap.get(entry.getKey());\n      if (index \u003d\u003d null) {\n        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n      } else {\n        resources[index].setResourceType(ri.getResourceType());\n        resources[index].setUnits(ri.getUnits());\n        resources[index].setValue(value);\n      }\n    }\n    readOnlyResources \u003d Arrays.copyOf(resources, resources.length);\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     initResourcesMap();\n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       ResourceTypes type \u003d\n           entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n               ResourceTypes.COUNTABLE;\n       String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n-      Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n+      long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n       ResourceInformation ri \u003d ResourceInformation\n           .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n       if (resources.containsKey(ri.getName())) {\n         resources.get(ri.getName()).setResourceType(ri.getResourceType());\n         resources.get(ri.getName()).setUnits(ri.getUnits());\n         resources.get(ri.getName()).setValue(value);\n       } else {\n         LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n       }\n     }\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n      long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d ResourceInformation\n          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n      if (resources.containsKey(ri.getName())) {\n        resources.get(ri.getName()).setResourceType(ri.getResourceType());\n        resources.get(ri.getName()).setUnits(ri.getUnits());\n        resources.get(ri.getName()).setValue(value);\n      } else {\n        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n      }\n    }\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     initResourcesMap();\n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       ResourceTypes type \u003d\n           entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n               ResourceTypes.COUNTABLE;\n       String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n       Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n-      ResourceInformation ri \u003d\n-          ResourceInformation.newInstance(entry.getKey(), units, value, type);\n+      ResourceInformation ri \u003d ResourceInformation\n+          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n       if (resources.containsKey(ri.getName())) {\n         resources.get(ri.getName()).setResourceType(ri.getResourceType());\n         resources.get(ri.getName()).setUnits(ri.getUnits());\n         resources.get(ri.getName()).setValue(value);\n       } else {\n         LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n       }\n     }\n     this.setMemorySize(p.getMemory());\n     this.setVirtualCores(p.getVirtualCores());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n      Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d ResourceInformation\n          .newInstance(entry.getKey(), units, value, type, 0L, Long.MAX_VALUE);\n      if (resources.containsKey(ri.getName())) {\n        resources.get(ri.getName()).setResourceType(ri.getResourceType());\n        resources.get(ri.getName()).setUnits(ri.getUnits());\n        resources.get(ri.getName()).setValue(value);\n      } else {\n        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n      }\n    }\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "7ba698997b6845b664b2f8c82e384b457c30d176",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   private void initResources() {\n     if (this.resources !\u003d null) {\n       return;\n     }\n     ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n     initResourcesMap();\n     for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n       ResourceTypes type \u003d\n           entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n               ResourceTypes.COUNTABLE;\n       String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n       Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n       ResourceInformation ri \u003d\n           ResourceInformation.newInstance(entry.getKey(), units, value, type);\n-      resources.put(ri.getName(), ri);\n+      if (resources.containsKey(ri.getName())) {\n+        resources.get(ri.getName()).setResourceType(ri.getResourceType());\n+        resources.get(ri.getName()).setUnits(ri.getUnits());\n+        resources.get(ri.getName()).setValue(value);\n+      } else {\n+        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n+      }\n     }\n-    if(this.getMemory() !\u003d p.getMemory()) {\n-      setMemorySize(p.getMemory());\n-    }\n-    if(this.getVirtualCores() !\u003d p.getVirtualCores()) {\n-      setVirtualCores(p.getVirtualCores());\n-    }\n+    this.setMemorySize(p.getMemory());\n+    this.setVirtualCores(p.getVirtualCores());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n      Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d\n          ResourceInformation.newInstance(entry.getKey(), units, value, type);\n      if (resources.containsKey(ri.getName())) {\n        resources.get(ri.getName()).setResourceType(ri.getResourceType());\n        resources.get(ri.getName()).setUnits(ri.getUnits());\n        resources.get(ri.getName()).setValue(value);\n      } else {\n        LOG.warn(\"Got unknown resource type: \" + ri.getName() + \"; skipping\");\n      }\n    }\n    this.setMemorySize(p.getMemory());\n    this.setVirtualCores(p.getVirtualCores());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,23 @@\n+  private void initResources() {\n+    if (this.resources !\u003d null) {\n+      return;\n+    }\n+    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n+    initResourcesMap();\n+    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n+      ResourceTypes type \u003d\n+          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n+              ResourceTypes.COUNTABLE;\n+      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n+      Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n+      ResourceInformation ri \u003d\n+          ResourceInformation.newInstance(entry.getKey(), units, value, type);\n+      resources.put(ri.getName(), ri);\n+    }\n+    if(this.getMemory() !\u003d p.getMemory()) {\n+      setMemorySize(p.getMemory());\n+    }\n+    if(this.getVirtualCores() !\u003d p.getVirtualCores()) {\n+      setVirtualCores(p.getVirtualCores());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initResources() {\n    if (this.resources !\u003d null) {\n      return;\n    }\n    ResourceProtoOrBuilder p \u003d viaProto ? proto : builder;\n    initResourcesMap();\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\n      ResourceTypes type \u003d\n          entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) :\n              ResourceTypes.COUNTABLE;\n      String units \u003d entry.hasUnits() ? entry.getUnits() : \"\";\n      Long value \u003d entry.hasValue() ? entry.getValue() : 0L;\n      ResourceInformation ri \u003d\n          ResourceInformation.newInstance(entry.getKey(), units, value, type);\n      resources.put(ri.getName(), ri);\n    }\n    if(this.getMemory() !\u003d p.getMemory()) {\n      setMemorySize(p.getMemory());\n    }\n    if(this.getVirtualCores() !\u003d p.getVirtualCores()) {\n      setVirtualCores(p.getVirtualCores());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java"
    }
  }
}