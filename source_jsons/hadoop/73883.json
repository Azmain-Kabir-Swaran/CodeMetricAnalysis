{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "initializeAuthContext",
  "functionId": "initializeAuthContext___authType-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2321,
  "functionEndLine": 2347,
  "numCommitsSeen": 209,
  "timeTaken": 5500,
  "changeHistory": [
    "65be21267587f04a2c33af65b951211cc9085b15",
    "3eb61be352589491117ac2781bb18f55988a8084",
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
    "b3a8d99817dcceb4d1125dec0c3ecbb0f15f6c76",
    "5f9b4c14a175873b4f82654513e289c657c694eb",
    "725623534ce7ab20c28af6e0cdf57bd7278551dd",
    "3337588975fa24c0044408c6caf91abea4dca4d4",
    "4755ef989ac771ad3c2c40f9914455725c931447"
  ],
  "changeHistoryShort": {
    "65be21267587f04a2c33af65b951211cc9085b15": "Ybodychange",
    "3eb61be352589491117ac2781bb18f55988a8084": "Yexceptionschange",
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d": "Ybodychange",
    "b3a8d99817dcceb4d1125dec0c3ecbb0f15f6c76": "Ybodychange",
    "5f9b4c14a175873b4f82654513e289c657c694eb": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": "Ybodychange",
    "3337588975fa24c0044408c6caf91abea4dca4d4": "Yexceptionschange",
    "4755ef989ac771ad3c2c40f9914455725c931447": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65be21267587f04a2c33af65b951211cc9085b15": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9698. [RPC v9] Client must honor server\u0027s SASL negotiate response (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 7:44 AM",
      "commitName": "65be21267587f04a2c33af65b951211cc9085b15",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "24/07/13 12:48 AM",
      "commitNameOld": "a0a986dda77ea03dac9cfc7e0631bae611034ef4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.29,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,27 @@\n     private AuthProtocol initializeAuthContext(int authType)\n         throws IOException {\n       AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n       if (authProtocol \u003d\u003d null) {\n         IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n         doSaslReply(ioe);\n         throw ioe;        \n       }\n       boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n       switch (authProtocol) {\n         case NONE: {\n           // don\u0027t reply if client is simple and server is insecure\n           if (!isSimpleEnabled) {\n             IOException ioe \u003d new AccessControlException(\n                 \"SIMPLE authentication is not enabled.\"\n                     + \"  Available:\" + enabledAuthMethods);\n             doSaslReply(ioe);\n             throw ioe;\n           }\n           break;\n         }\n-        case SASL: {\n-          // switch to simple hack, but don\u0027t switch if other auths are\n-          // supported, ex. tokens\n-          if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n-            authProtocol \u003d AuthProtocol.NONE;\n-            skipInitialSaslHandshake \u003d true;\n-            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n-          }\n-          // else wait for a negotiate or initiate\n+        default: {\n           break;\n         }\n       }\n       return authProtocol;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n      return authProtocol;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "3eb61be352589491117ac2781bb18f55988a8084": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-9754. Remove unnecessary \"throws IOException/InterruptedException\", and fix generic and other javac warnings.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505610 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/13 12:22 AM",
      "commitName": "3eb61be352589491117ac2781bb18f55988a8084",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/07/13 2:49 PM",
      "commitNameOld": "9ff01d626118a97ea4bf2fd72f022e11e69ee17d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private AuthProtocol initializeAuthContext(int authType)\n-        throws IOException, InterruptedException {\n+        throws IOException {\n       AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n       if (authProtocol \u003d\u003d null) {\n         IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n         doSaslReply(ioe);\n         throw ioe;        \n       }\n       boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n       switch (authProtocol) {\n         case NONE: {\n           // don\u0027t reply if client is simple and server is insecure\n           if (!isSimpleEnabled) {\n             IOException ioe \u003d new AccessControlException(\n                 \"SIMPLE authentication is not enabled.\"\n                     + \"  Available:\" + enabledAuthMethods);\n             doSaslReply(ioe);\n             throw ioe;\n           }\n           break;\n         }\n         case SASL: {\n           // switch to simple hack, but don\u0027t switch if other auths are\n           // supported, ex. tokens\n           if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n             authProtocol \u003d AuthProtocol.NONE;\n             skipInitialSaslHandshake \u003d true;\n             doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n           }\n           // else wait for a negotiate or initiate\n           break;\n         }\n       }\n       return authProtocol;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        case SASL: {\n          // switch to simple hack, but don\u0027t switch if other auths are\n          // supported, ex. tokens\n          if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n            authProtocol \u003d AuthProtocol.NONE;\n            skipInitialSaslHandshake \u003d true;\n            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n          }\n          // else wait for a negotiate or initiate\n          break;\n        }\n      }\n      return authProtocol;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[IOException, InterruptedException]",
        "newValue": "[IOException]"
      }
    },
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9683. [RPC v9] Wrap IpcConnectionContext in RPC headers (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 10:59 AM",
      "commitName": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "09/07/13 4:45 PM",
      "commitNameOld": "0a5f16a89e3942953d7d6c2d26542764298c6430",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 6.76,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n     private AuthProtocol initializeAuthContext(int authType)\n         throws IOException, InterruptedException {\n       AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n       if (authProtocol \u003d\u003d null) {\n         IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n         doSaslReply(ioe);\n         throw ioe;        \n       }\n       boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n       switch (authProtocol) {\n         case NONE: {\n           // don\u0027t reply if client is simple and server is insecure\n           if (!isSimpleEnabled) {\n             IOException ioe \u003d new AccessControlException(\n                 \"SIMPLE authentication is not enabled.\"\n                     + \"  Available:\" + enabledAuthMethods);\n             doSaslReply(ioe);\n             throw ioe;\n           }\n           break;\n         }\n         case SASL: {\n           // switch to simple hack, but don\u0027t switch if other auths are\n           // supported, ex. tokens\n           if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n+            authProtocol \u003d AuthProtocol.NONE;\n             skipInitialSaslHandshake \u003d true;\n             doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n           }\n           // else wait for a negotiate or initiate\n           break;\n         }\n       }\n       return authProtocol;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException, InterruptedException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        case SASL: {\n          // switch to simple hack, but don\u0027t switch if other auths are\n          // supported, ex. tokens\n          if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n            authProtocol \u003d AuthProtocol.NONE;\n            skipInitialSaslHandshake \u003d true;\n            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n          }\n          // else wait for a negotiate or initiate\n          break;\n        }\n      }\n      return authProtocol;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "b3a8d99817dcceb4d1125dec0c3ecbb0f15f6c76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-874. Making common RPC to switch to not switch to simple when other mechanisms are enabled and thus fix YARN/MR test failures after HADOOP-9421. Contributed by Daryn Sharp and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/06/13 5:42 PM",
      "commitName": "b3a8d99817dcceb4d1125dec0c3ecbb0f15f6c76",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/06/13 1:09 PM",
      "commitNameOld": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 4.19,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n     private AuthProtocol initializeAuthContext(int authType)\n         throws IOException, InterruptedException {\n       AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n       if (authProtocol \u003d\u003d null) {\n         IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n         doSaslReply(ioe);\n         throw ioe;        \n       }\n       boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n       switch (authProtocol) {\n         case NONE: {\n           // don\u0027t reply if client is simple and server is insecure\n           if (!isSimpleEnabled) {\n             IOException ioe \u003d new AccessControlException(\n                 \"SIMPLE authentication is not enabled.\"\n                     + \"  Available:\" + enabledAuthMethods);\n             doSaslReply(ioe);\n             throw ioe;\n           }\n           break;\n         }\n         case SASL: {\n-          if (isSimpleEnabled) { // switch to simple hack\n+          // switch to simple hack, but don\u0027t switch if other auths are\n+          // supported, ex. tokens\n+          if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n             skipInitialSaslHandshake \u003d true;\n             doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n           }\n           // else wait for a negotiate or initiate\n           break;\n         }\n       }\n       return authProtocol;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException, InterruptedException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        case SASL: {\n          // switch to simple hack, but don\u0027t switch if other auths are\n          // supported, ex. tokens\n          if (isSimpleEnabled \u0026\u0026 enabledAuthMethods.size() \u003d\u003d 1) {\n            skipInitialSaslHandshake \u003d true;\n            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n          }\n          // else wait for a negotiate or initiate\n          break;\n        }\n      }\n      return authProtocol;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "5f9b4c14a175873b4f82654513e289c657c694eb": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 1:09 PM",
      "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthor": "Daryn Sharp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/13 1:09 PM",
          "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "10/06/13 8:30 PM",
          "commitNameOld": "a841be808a780db0653b17bb702037f422c5b1ec",
          "commitAuthorOld": "Luke Lu",
          "daysBetweenCommits": 10.69,
          "commitsBetweenForRepo": 113,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n+    private AuthProtocol initializeAuthContext(int authType)\n         throws IOException, InterruptedException {\n-      try {\n-        if (enabledAuthMethods.contains(authMethod)) {\n-          saslServer \u003d createSaslServer(authMethod);\n-        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n-          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n-              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n-          authMethod \u003d AuthMethod.SIMPLE;\n-          // client has already sent the initial Sasl message and we\n-          // should ignore it. Both client and server should fall back\n-          // to simple auth from now on.\n-          skipInitialSaslHandshake \u003d true;\n-        } else {\n-          throw new AccessControlException(\n-              authMethod + \" authentication is not enabled.\"\n-                  + \"  Available:\" + enabledAuthMethods);\n-        }\n-      } catch (IOException ioe) {\n-        final String ioeClass \u003d ioe.getClass().getName();\n-        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n-        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n-          setupResponse(authFailedResponse, authFailedCall,\n-              RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_UNAUTHORIZED, \n-              null, ioeClass, ioeMessage);\n-          responder.doRespond(authFailedCall);\n-        } else {\n-          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n-        }\n-        throw ioe;\n+      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n+      if (authProtocol \u003d\u003d null) {\n+        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n+        doSaslReply(ioe);\n+        throw ioe;        \n       }\n-      return authMethod;\n+      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n+      switch (authProtocol) {\n+        case NONE: {\n+          // don\u0027t reply if client is simple and server is insecure\n+          if (!isSimpleEnabled) {\n+            IOException ioe \u003d new AccessControlException(\n+                \"SIMPLE authentication is not enabled.\"\n+                    + \"  Available:\" + enabledAuthMethods);\n+            doSaslReply(ioe);\n+            throw ioe;\n+          }\n+          break;\n+        }\n+        case SASL: {\n+          if (isSimpleEnabled) { // switch to simple hack\n+            skipInitialSaslHandshake \u003d true;\n+            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n+          }\n+          // else wait for a negotiate or initiate\n+          break;\n+        }\n+      }\n+      return authProtocol;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException, InterruptedException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        case SASL: {\n          if (isSimpleEnabled) { // switch to simple hack\n            skipInitialSaslHandshake \u003d true;\n            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n          }\n          // else wait for a negotiate or initiate\n          break;\n        }\n      }\n      return authProtocol;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[authMethod-AuthMethod]",
            "newValue": "[authType-int]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/13 1:09 PM",
          "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "10/06/13 8:30 PM",
          "commitNameOld": "a841be808a780db0653b17bb702037f422c5b1ec",
          "commitAuthorOld": "Luke Lu",
          "daysBetweenCommits": 10.69,
          "commitsBetweenForRepo": 113,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n+    private AuthProtocol initializeAuthContext(int authType)\n         throws IOException, InterruptedException {\n-      try {\n-        if (enabledAuthMethods.contains(authMethod)) {\n-          saslServer \u003d createSaslServer(authMethod);\n-        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n-          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n-              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n-          authMethod \u003d AuthMethod.SIMPLE;\n-          // client has already sent the initial Sasl message and we\n-          // should ignore it. Both client and server should fall back\n-          // to simple auth from now on.\n-          skipInitialSaslHandshake \u003d true;\n-        } else {\n-          throw new AccessControlException(\n-              authMethod + \" authentication is not enabled.\"\n-                  + \"  Available:\" + enabledAuthMethods);\n-        }\n-      } catch (IOException ioe) {\n-        final String ioeClass \u003d ioe.getClass().getName();\n-        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n-        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n-          setupResponse(authFailedResponse, authFailedCall,\n-              RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_UNAUTHORIZED, \n-              null, ioeClass, ioeMessage);\n-          responder.doRespond(authFailedCall);\n-        } else {\n-          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n-        }\n-        throw ioe;\n+      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n+      if (authProtocol \u003d\u003d null) {\n+        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n+        doSaslReply(ioe);\n+        throw ioe;        \n       }\n-      return authMethod;\n+      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n+      switch (authProtocol) {\n+        case NONE: {\n+          // don\u0027t reply if client is simple and server is insecure\n+          if (!isSimpleEnabled) {\n+            IOException ioe \u003d new AccessControlException(\n+                \"SIMPLE authentication is not enabled.\"\n+                    + \"  Available:\" + enabledAuthMethods);\n+            doSaslReply(ioe);\n+            throw ioe;\n+          }\n+          break;\n+        }\n+        case SASL: {\n+          if (isSimpleEnabled) { // switch to simple hack\n+            skipInitialSaslHandshake \u003d true;\n+            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n+          }\n+          // else wait for a negotiate or initiate\n+          break;\n+        }\n+      }\n+      return authProtocol;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException, InterruptedException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        case SASL: {\n          if (isSimpleEnabled) { // switch to simple hack\n            skipInitialSaslHandshake \u003d true;\n            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n          }\n          // else wait for a negotiate or initiate\n          break;\n        }\n      }\n      return authProtocol;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "AuthMethod",
            "newValue": "AuthProtocol"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/13 1:09 PM",
          "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "10/06/13 8:30 PM",
          "commitNameOld": "a841be808a780db0653b17bb702037f422c5b1ec",
          "commitAuthorOld": "Luke Lu",
          "daysBetweenCommits": 10.69,
          "commitsBetweenForRepo": 113,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n+    private AuthProtocol initializeAuthContext(int authType)\n         throws IOException, InterruptedException {\n-      try {\n-        if (enabledAuthMethods.contains(authMethod)) {\n-          saslServer \u003d createSaslServer(authMethod);\n-        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n-          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n-              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n-          authMethod \u003d AuthMethod.SIMPLE;\n-          // client has already sent the initial Sasl message and we\n-          // should ignore it. Both client and server should fall back\n-          // to simple auth from now on.\n-          skipInitialSaslHandshake \u003d true;\n-        } else {\n-          throw new AccessControlException(\n-              authMethod + \" authentication is not enabled.\"\n-                  + \"  Available:\" + enabledAuthMethods);\n-        }\n-      } catch (IOException ioe) {\n-        final String ioeClass \u003d ioe.getClass().getName();\n-        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n-        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n-          setupResponse(authFailedResponse, authFailedCall,\n-              RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_UNAUTHORIZED, \n-              null, ioeClass, ioeMessage);\n-          responder.doRespond(authFailedCall);\n-        } else {\n-          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n-        }\n-        throw ioe;\n+      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n+      if (authProtocol \u003d\u003d null) {\n+        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n+        doSaslReply(ioe);\n+        throw ioe;        \n       }\n-      return authMethod;\n+      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n+      switch (authProtocol) {\n+        case NONE: {\n+          // don\u0027t reply if client is simple and server is insecure\n+          if (!isSimpleEnabled) {\n+            IOException ioe \u003d new AccessControlException(\n+                \"SIMPLE authentication is not enabled.\"\n+                    + \"  Available:\" + enabledAuthMethods);\n+            doSaslReply(ioe);\n+            throw ioe;\n+          }\n+          break;\n+        }\n+        case SASL: {\n+          if (isSimpleEnabled) { // switch to simple hack\n+            skipInitialSaslHandshake \u003d true;\n+            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n+          }\n+          // else wait for a negotiate or initiate\n+          break;\n+        }\n+      }\n+      return authProtocol;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AuthProtocol initializeAuthContext(int authType)\n        throws IOException, InterruptedException {\n      AuthProtocol authProtocol \u003d AuthProtocol.valueOf(authType);\n      if (authProtocol \u003d\u003d null) {\n        IOException ioe \u003d new IpcException(\"Unknown auth protocol:\" + authType);\n        doSaslReply(ioe);\n        throw ioe;        \n      }\n      boolean isSimpleEnabled \u003d enabledAuthMethods.contains(AuthMethod.SIMPLE);\n      switch (authProtocol) {\n        case NONE: {\n          // don\u0027t reply if client is simple and server is insecure\n          if (!isSimpleEnabled) {\n            IOException ioe \u003d new AccessControlException(\n                \"SIMPLE authentication is not enabled.\"\n                    + \"  Available:\" + enabledAuthMethods);\n            doSaslReply(ioe);\n            throw ioe;\n          }\n          break;\n        }\n        case SASL: {\n          if (isSimpleEnabled) { // switch to simple hack\n            skipInitialSaslHandshake \u003d true;\n            doSaslReply(buildSaslResponse(SaslState.SUCCESS, null));\n          }\n          // else wait for a negotiate or initiate\n          break;\n        }\n      }\n      return authProtocol;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 10:51 AM",
      "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "27/03/13 11:51 AM",
      "commitNameOld": "fc0a4de670c3e6dcf5d30305d3969fe4946a0fed",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 37.96,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n     private AuthMethod initializeAuthContext(AuthMethod authMethod)\n         throws IOException, InterruptedException {\n       try {\n         if (enabledAuthMethods.contains(authMethod)) {\n           saslServer \u003d createSaslServer(authMethod);\n         } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n           doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n               SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n           authMethod \u003d AuthMethod.SIMPLE;\n           // client has already sent the initial Sasl message and we\n           // should ignore it. Both client and server should fall back\n           // to simple auth from now on.\n           skipInitialSaslHandshake \u003d true;\n         } else {\n           throw new AccessControlException(\n               authMethod + \" authentication is not enabled.\"\n                   + \"  Available:\" + enabledAuthMethods);\n         }\n       } catch (IOException ioe) {\n         final String ioeClass \u003d ioe.getClass().getName();\n         final String ioeMessage  \u003d ioe.getLocalizedMessage();\n         if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n           setupResponse(authFailedResponse, authFailedCall,\n-              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n+              RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_UNAUTHORIZED, \n+              null, ioeClass, ioeMessage);\n           responder.doRespond(authFailedCall);\n         } else {\n           doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n         }\n         throw ioe;\n       }\n       return authMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      try {\n        if (enabledAuthMethods.contains(authMethod)) {\n          saslServer \u003d createSaslServer(authMethod);\n        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n          authMethod \u003d AuthMethod.SIMPLE;\n          // client has already sent the initial Sasl message and we\n          // should ignore it. Both client and server should fall back\n          // to simple auth from now on.\n          skipInitialSaslHandshake \u003d true;\n        } else {\n          throw new AccessControlException(\n              authMethod + \" authentication is not enabled.\"\n                  + \"  Available:\" + enabledAuthMethods);\n        }\n      } catch (IOException ioe) {\n        final String ioeClass \u003d ioe.getClass().getName();\n        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n          setupResponse(authFailedResponse, authFailedCall,\n              RpcStatusProto.FATAL, RpcErrorCodeProto.FATAL_UNAUTHORIZED, \n              null, ioeClass, ioeMessage);\n          responder.doRespond(authFailedCall);\n        } else {\n          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n        }\n        throw ioe;\n      }\n      return authMethod;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "3337588975fa24c0044408c6caf91abea4dca4d4": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-9070. Kerberos SASL server cannot find kerberos key. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1417729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/12/12 6:53 PM",
      "commitName": "3337588975fa24c0044408c6caf91abea4dca4d4",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "13/11/12 9:10 AM",
      "commitNameOld": "fe8f635b78d59e286771ec75ff73245b40d30907",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 22.41,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private AuthMethod initializeAuthContext(AuthMethod authMethod)\n-        throws IOException {\n+        throws IOException, InterruptedException {\n       try {\n         if (enabledAuthMethods.contains(authMethod)) {\n           saslServer \u003d createSaslServer(authMethod);\n         } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n           doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n               SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n           authMethod \u003d AuthMethod.SIMPLE;\n           // client has already sent the initial Sasl message and we\n           // should ignore it. Both client and server should fall back\n           // to simple auth from now on.\n           skipInitialSaslHandshake \u003d true;\n         } else {\n           throw new AccessControlException(\n               authMethod + \" authentication is not enabled.\"\n                   + \"  Available:\" + enabledAuthMethods);\n         }\n       } catch (IOException ioe) {\n         final String ioeClass \u003d ioe.getClass().getName();\n         final String ioeMessage  \u003d ioe.getLocalizedMessage();\n         if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n           setupResponse(authFailedResponse, authFailedCall,\n               RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n           responder.doRespond(authFailedCall);\n         } else {\n           doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n         }\n         throw ioe;\n       }\n       return authMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      try {\n        if (enabledAuthMethods.contains(authMethod)) {\n          saslServer \u003d createSaslServer(authMethod);\n        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n          authMethod \u003d AuthMethod.SIMPLE;\n          // client has already sent the initial Sasl message and we\n          // should ignore it. Both client and server should fall back\n          // to simple auth from now on.\n          skipInitialSaslHandshake \u003d true;\n        } else {\n          throw new AccessControlException(\n              authMethod + \" authentication is not enabled.\"\n                  + \"  Available:\" + enabledAuthMethods);\n        }\n      } catch (IOException ioe) {\n        final String ioeClass \u003d ioe.getClass().getName();\n        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n          setupResponse(authFailedResponse, authFailedCall,\n              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n          responder.doRespond(authFailedCall);\n        } else {\n          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n        }\n        throw ioe;\n      }\n      return authMethod;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, InterruptedException]"
      }
    },
    "4755ef989ac771ad3c2c40f9914455725c931447": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9021. Enforce configured SASL method on the server (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1408473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/12 2:13 PM",
      "commitName": "4755ef989ac771ad3c2c40f9914455725c931447",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,32 @@\n+    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n+        throws IOException {\n+      try {\n+        if (enabledAuthMethods.contains(authMethod)) {\n+          saslServer \u003d createSaslServer(authMethod);\n+        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n+          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n+              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n+          authMethod \u003d AuthMethod.SIMPLE;\n+          // client has already sent the initial Sasl message and we\n+          // should ignore it. Both client and server should fall back\n+          // to simple auth from now on.\n+          skipInitialSaslHandshake \u003d true;\n+        } else {\n+          throw new AccessControlException(\n+              authMethod + \" authentication is not enabled.\"\n+                  + \"  Available:\" + enabledAuthMethods);\n+        }\n+      } catch (IOException ioe) {\n+        final String ioeClass \u003d ioe.getClass().getName();\n+        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n+        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n+          setupResponse(authFailedResponse, authFailedCall,\n+              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n+          responder.doRespond(authFailedCall);\n+        } else {\n+          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n+        }\n+        throw ioe;\n+      }\n+      return authMethod;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private AuthMethod initializeAuthContext(AuthMethod authMethod)\n        throws IOException {\n      try {\n        if (enabledAuthMethods.contains(authMethod)) {\n          saslServer \u003d createSaslServer(authMethod);\n        } else if (enabledAuthMethods.contains(AuthMethod.SIMPLE)) {\n          doSaslReply(SaslStatus.SUCCESS, new IntWritable(\n              SaslRpcServer.SWITCH_TO_SIMPLE_AUTH), null, null);\n          authMethod \u003d AuthMethod.SIMPLE;\n          // client has already sent the initial Sasl message and we\n          // should ignore it. Both client and server should fall back\n          // to simple auth from now on.\n          skipInitialSaslHandshake \u003d true;\n        } else {\n          throw new AccessControlException(\n              authMethod + \" authentication is not enabled.\"\n                  + \"  Available:\" + enabledAuthMethods);\n        }\n      } catch (IOException ioe) {\n        final String ioeClass \u003d ioe.getClass().getName();\n        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n          setupResponse(authFailedResponse, authFailedCall,\n              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n          responder.doRespond(authFailedCall);\n        } else {\n          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n        }\n        throw ioe;\n      }\n      return authMethod;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}