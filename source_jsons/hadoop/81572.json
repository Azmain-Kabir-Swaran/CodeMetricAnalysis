{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TableListing.java",
  "functionName": "toString",
  "functionId": "toString",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tools/TableListing.java",
  "functionStartLine": 221,
  "functionEndLine": 283,
  "numCommitsSeen": 9,
  "timeTaken": 1751,
  "changeHistory": [
    "0f2dad6679b7fc35474a3d33dc40b0db89bb1d80",
    "be3fdd1c40140e24df1a5414cf91537862b66e82",
    "eb2175db1a99348c80457e3ffda172cc461de8bc"
  ],
  "changeHistoryShort": {
    "0f2dad6679b7fc35474a3d33dc40b0db89bb1d80": "Ybodychange",
    "be3fdd1c40140e24df1a5414cf91537862b66e82": "Yfilerename",
    "eb2175db1a99348c80457e3ffda172cc461de8bc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0f2dad6679b7fc35474a3d33dc40b0db89bb1d80": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14569. Result of crypto -listZones is not formatted properly. Contributed by hemanthboyina.\n",
      "commitDate": "30/07/19 4:52 PM",
      "commitName": "0f2dad6679b7fc35474a3d33dc40b0db89bb1d80",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 397.76,
      "commitsBetweenForRepo": 3018,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public String toString() {\n     StringBuilder builder \u003d new StringBuilder();\n     // Calculate the widths of each column based on their maxWidths and\n     // the wrapWidth for the entire table\n     int width \u003d (columns.length-1)*2; // inter-column padding\n     for (int i\u003d0; i\u003ccolumns.length; i++) {\n       width +\u003d columns[i].maxWidth;\n     }\n     // Decrease the column size of wrappable columns until the goal width\n     // is reached, or we can\u0027t decrease anymore\n     while (width \u003e wrapWidth) {\n       boolean modified \u003d false;\n       for (int i\u003d0; i\u003ccolumns.length; i++) {\n         Column column \u003d columns[i];\n         if (column.wrap) {\n           int maxWidth \u003d column.getMaxWidth();\n-          if (maxWidth \u003e 4) {\n+          if (maxWidth \u003e 10) {\n             column.setWrapWidth(maxWidth-1);\n             modified \u003d true;\n             width -\u003d 1;\n             if (width \u003c\u003d wrapWidth) {\n               break;\n             }\n           }\n         }\n       }\n       if (!modified) {\n         break;\n       }\n     }\n \n     int startrow \u003d 0;\n     if (!showHeader) {\n       startrow \u003d 1;\n     }\n     String[][] columnLines \u003d new String[columns.length][];\n     for (int i \u003d startrow; i \u003c numRows + 1; i++) {\n       int maxColumnLines \u003d 0;\n       for (int j \u003d 0; j \u003c columns.length; j++) {\n         columnLines[j] \u003d columns[j].getRow(i);\n         if (columnLines[j].length \u003e maxColumnLines) {\n           maxColumnLines \u003d columnLines[j].length;\n         }\n       }\n \n       for (int c \u003d 0; c \u003c maxColumnLines; c++) {\n         // First column gets no left-padding\n         String prefix \u003d \"\";\n         for (int j \u003d 0; j \u003c columns.length; j++) {\n           // Prepend padding\n           builder.append(prefix);\n           prefix \u003d \" \";\n           if (columnLines[j].length \u003e c) {\n             builder.append(columnLines[j][c]);\n           } else {\n             builder.append(StringUtils.repeat(\" \", columns[j].maxWidth));\n           }\n         }\n         builder.append(\"\\n\");\n       }\n     }\n     return builder.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    StringBuilder builder \u003d new StringBuilder();\n    // Calculate the widths of each column based on their maxWidths and\n    // the wrapWidth for the entire table\n    int width \u003d (columns.length-1)*2; // inter-column padding\n    for (int i\u003d0; i\u003ccolumns.length; i++) {\n      width +\u003d columns[i].maxWidth;\n    }\n    // Decrease the column size of wrappable columns until the goal width\n    // is reached, or we can\u0027t decrease anymore\n    while (width \u003e wrapWidth) {\n      boolean modified \u003d false;\n      for (int i\u003d0; i\u003ccolumns.length; i++) {\n        Column column \u003d columns[i];\n        if (column.wrap) {\n          int maxWidth \u003d column.getMaxWidth();\n          if (maxWidth \u003e 10) {\n            column.setWrapWidth(maxWidth-1);\n            modified \u003d true;\n            width -\u003d 1;\n            if (width \u003c\u003d wrapWidth) {\n              break;\n            }\n          }\n        }\n      }\n      if (!modified) {\n        break;\n      }\n    }\n\n    int startrow \u003d 0;\n    if (!showHeader) {\n      startrow \u003d 1;\n    }\n    String[][] columnLines \u003d new String[columns.length][];\n    for (int i \u003d startrow; i \u003c numRows + 1; i++) {\n      int maxColumnLines \u003d 0;\n      for (int j \u003d 0; j \u003c columns.length; j++) {\n        columnLines[j] \u003d columns[j].getRow(i);\n        if (columnLines[j].length \u003e maxColumnLines) {\n          maxColumnLines \u003d columnLines[j].length;\n        }\n      }\n\n      for (int c \u003d 0; c \u003c maxColumnLines; c++) {\n        // First column gets no left-padding\n        String prefix \u003d \"\";\n        for (int j \u003d 0; j \u003c columns.length; j++) {\n          // Prepend padding\n          builder.append(prefix);\n          prefix \u003d \" \";\n          if (columnLines[j].length \u003e c) {\n            builder.append(columnLines[j][c]);\n          } else {\n            builder.append(StringUtils.repeat(\" \", columns[j].maxWidth));\n          }\n        }\n        builder.append(\"\\n\");\n      }\n    }\n    return builder.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tools/TableListing.java",
      "extendedDetails": {}
    },
    "be3fdd1c40140e24df1a5414cf91537862b66e82": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10691. Improve the readability of \u0027hadoop fs -help\u0027. Contributed by Lei Xu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/14 11:39 PM",
      "commitName": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/14 7:56 PM",
      "commitNameOld": "ab54276440f75d88fbaf190e07264a17700f9750",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String toString() {\n    StringBuilder builder \u003d new StringBuilder();\n    // Calculate the widths of each column based on their maxWidths and\n    // the wrapWidth for the entire table\n    int width \u003d (columns.length-1)*2; // inter-column padding\n    for (int i\u003d0; i\u003ccolumns.length; i++) {\n      width +\u003d columns[i].maxWidth;\n    }\n    // Decrease the column size of wrappable columns until the goal width\n    // is reached, or we can\u0027t decrease anymore\n    while (width \u003e wrapWidth) {\n      boolean modified \u003d false;\n      for (int i\u003d0; i\u003ccolumns.length; i++) {\n        Column column \u003d columns[i];\n        if (column.wrap) {\n          int maxWidth \u003d column.getMaxWidth();\n          if (maxWidth \u003e 4) {\n            column.setWrapWidth(maxWidth-1);\n            modified \u003d true;\n            width -\u003d 1;\n            if (width \u003c\u003d wrapWidth) {\n              break;\n            }\n          }\n        }\n      }\n      if (!modified) {\n        break;\n      }\n    }\n\n    int startrow \u003d 0;\n    if (!showHeader) {\n      startrow \u003d 1;\n    }\n    String[][] columnLines \u003d new String[columns.length][];\n    for (int i \u003d startrow; i \u003c numRows + 1; i++) {\n      int maxColumnLines \u003d 0;\n      for (int j \u003d 0; j \u003c columns.length; j++) {\n        columnLines[j] \u003d columns[j].getRow(i);\n        if (columnLines[j].length \u003e maxColumnLines) {\n          maxColumnLines \u003d columnLines[j].length;\n        }\n      }\n\n      for (int c \u003d 0; c \u003c maxColumnLines; c++) {\n        // First column gets no left-padding\n        String prefix \u003d \"\";\n        for (int j \u003d 0; j \u003c columns.length; j++) {\n          // Prepend padding\n          builder.append(prefix);\n          prefix \u003d \" \";\n          if (columnLines[j].length \u003e c) {\n            builder.append(columnLines[j][c]);\n          } else {\n            builder.append(StringUtils.repeat(\" \", columns[j].maxWidth));\n          }\n        }\n        builder.append(\"\\n\");\n      }\n    }\n    return builder.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tools/TableListing.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/TableListing.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tools/TableListing.java"
      }
    },
    "eb2175db1a99348c80457e3ffda172cc461de8bc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 3:28 PM",
      "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,63 @@\n+  public String toString() {\n+    StringBuilder builder \u003d new StringBuilder();\n+    // Calculate the widths of each column based on their maxWidths and\n+    // the wrapWidth for the entire table\n+    int width \u003d (columns.length-1)*2; // inter-column padding\n+    for (int i\u003d0; i\u003ccolumns.length; i++) {\n+      width +\u003d columns[i].maxWidth;\n+    }\n+    // Decrease the column size of wrappable columns until the goal width\n+    // is reached, or we can\u0027t decrease anymore\n+    while (width \u003e wrapWidth) {\n+      boolean modified \u003d false;\n+      for (int i\u003d0; i\u003ccolumns.length; i++) {\n+        Column column \u003d columns[i];\n+        if (column.wrap) {\n+          int maxWidth \u003d column.getMaxWidth();\n+          if (maxWidth \u003e 4) {\n+            column.setWrapWidth(maxWidth-1);\n+            modified \u003d true;\n+            width -\u003d 1;\n+            if (width \u003c\u003d wrapWidth) {\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      if (!modified) {\n+        break;\n+      }\n+    }\n+\n+    int startrow \u003d 0;\n+    if (!showHeader) {\n+      startrow \u003d 1;\n+    }\n+    String[][] columnLines \u003d new String[columns.length][];\n+    for (int i \u003d startrow; i \u003c numRows + 1; i++) {\n+      int maxColumnLines \u003d 0;\n+      for (int j \u003d 0; j \u003c columns.length; j++) {\n+        columnLines[j] \u003d columns[j].getRow(i);\n+        if (columnLines[j].length \u003e maxColumnLines) {\n+          maxColumnLines \u003d columnLines[j].length;\n+        }\n+      }\n+\n+      for (int c \u003d 0; c \u003c maxColumnLines; c++) {\n+        // First column gets no left-padding\n+        String prefix \u003d \"\";\n+        for (int j \u003d 0; j \u003c columns.length; j++) {\n+          // Prepend padding\n+          builder.append(prefix);\n+          prefix \u003d \" \";\n+          if (columnLines[j].length \u003e c) {\n+            builder.append(columnLines[j][c]);\n+          } else {\n+            builder.append(StringUtils.repeat(\" \", columns[j].maxWidth));\n+          }\n+        }\n+        builder.append(\"\\n\");\n+      }\n+    }\n+    return builder.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    StringBuilder builder \u003d new StringBuilder();\n    // Calculate the widths of each column based on their maxWidths and\n    // the wrapWidth for the entire table\n    int width \u003d (columns.length-1)*2; // inter-column padding\n    for (int i\u003d0; i\u003ccolumns.length; i++) {\n      width +\u003d columns[i].maxWidth;\n    }\n    // Decrease the column size of wrappable columns until the goal width\n    // is reached, or we can\u0027t decrease anymore\n    while (width \u003e wrapWidth) {\n      boolean modified \u003d false;\n      for (int i\u003d0; i\u003ccolumns.length; i++) {\n        Column column \u003d columns[i];\n        if (column.wrap) {\n          int maxWidth \u003d column.getMaxWidth();\n          if (maxWidth \u003e 4) {\n            column.setWrapWidth(maxWidth-1);\n            modified \u003d true;\n            width -\u003d 1;\n            if (width \u003c\u003d wrapWidth) {\n              break;\n            }\n          }\n        }\n      }\n      if (!modified) {\n        break;\n      }\n    }\n\n    int startrow \u003d 0;\n    if (!showHeader) {\n      startrow \u003d 1;\n    }\n    String[][] columnLines \u003d new String[columns.length][];\n    for (int i \u003d startrow; i \u003c numRows + 1; i++) {\n      int maxColumnLines \u003d 0;\n      for (int j \u003d 0; j \u003c columns.length; j++) {\n        columnLines[j] \u003d columns[j].getRow(i);\n        if (columnLines[j].length \u003e maxColumnLines) {\n          maxColumnLines \u003d columnLines[j].length;\n        }\n      }\n\n      for (int c \u003d 0; c \u003c maxColumnLines; c++) {\n        // First column gets no left-padding\n        String prefix \u003d \"\";\n        for (int j \u003d 0; j \u003c columns.length; j++) {\n          // Prepend padding\n          builder.append(prefix);\n          prefix \u003d \" \";\n          if (columnLines[j].length \u003e c) {\n            builder.append(columnLines[j][c]);\n          } else {\n            builder.append(StringUtils.repeat(\" \", columns[j].maxWidth));\n          }\n        }\n        builder.append(\"\\n\");\n      }\n    }\n    return builder.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/TableListing.java"
    }
  }
}