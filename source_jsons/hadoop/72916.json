{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaKeyStoreProvider.java",
  "functionName": "writeToNew",
  "functionId": "writeToNew___newPath-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
  "functionStartLine": 607,
  "functionEndLine": 620,
  "numCommitsSeen": 26,
  "timeTaken": 1249,
  "changeHistory": [
    "b351086ff66ca279c0550e078e3a9d110f3f36a5",
    "a78953c974e52abe73905b1901a2354696f4a5a0",
    "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85"
  ],
  "changeHistoryShort": {
    "b351086ff66ca279c0550e078e3a9d110f3f36a5": "Ybodychange",
    "a78953c974e52abe73905b1901a2354696f4a5a0": "Ymodifierchange",
    "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b351086ff66ca279c0550e078e3a9d110f3f36a5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11014. Potential resource leak in JavaKeyStoreProvider due to unclosed stream. (ozawa)\n",
      "commitDate": "25/03/15 12:59 AM",
      "commitName": "b351086ff66ca279c0550e078e3a9d110f3f36a5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "25/03/15 12:36 AM",
      "commitNameOld": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,14 @@\n   protected void writeToNew(Path newPath) throws IOException {\n-    FSDataOutputStream out \u003d\n-        FileSystem.create(fs, newPath, permissions);\n-    try {\n+    try (FSDataOutputStream out \u003d\n+        FileSystem.create(fs, newPath, permissions);) {\n       keyStore.store(out, password);\n     } catch (KeyStoreException e) {\n       throw new IOException(\"Can\u0027t store keystore \" + this, e);\n     } catch (NoSuchAlgorithmException e) {\n       throw new IOException(\n           \"No such algorithm storing keystore \" + this, e);\n     } catch (CertificateException e) {\n       throw new IOException(\n           \"Certificate exception storing keystore \" + this, e);\n     }\n-    out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void writeToNew(Path newPath) throws IOException {\n    try (FSDataOutputStream out \u003d\n        FileSystem.create(fs, newPath, permissions);) {\n      keyStore.store(out, password);\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Can\u0027t store keystore \" + this, e);\n    } catch (NoSuchAlgorithmException e) {\n      throw new IOException(\n          \"No such algorithm storing keystore \" + this, e);\n    } catch (CertificateException e) {\n      throw new IOException(\n          \"Certificate exception storing keystore \" + this, e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "a78953c974e52abe73905b1901a2354696f4a5a0": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-11110. JavaKeystoreProvider should not report a key as created if it was not flushed to the backing file. (Arun Suresh via wang)\n",
      "commitDate": "29/09/14 1:10 PM",
      "commitName": "a78953c974e52abe73905b1901a2354696f4a5a0",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "29/08/14 2:21 PM",
      "commitNameOld": "c60da4d3b31e5fa0c4b27cf75ab7ed4add56396a",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n-  private void writeToNew(Path newPath) throws IOException {\n+  protected void writeToNew(Path newPath) throws IOException {\n     FSDataOutputStream out \u003d\n         FileSystem.create(fs, newPath, permissions);\n     try {\n       keyStore.store(out, password);\n     } catch (KeyStoreException e) {\n       throw new IOException(\"Can\u0027t store keystore \" + this, e);\n     } catch (NoSuchAlgorithmException e) {\n       throw new IOException(\n           \"No such algorithm storing keystore \" + this, e);\n     } catch (CertificateException e) {\n       throw new IOException(\n           \"Certificate exception storing keystore \" + this, e);\n     }\n     out.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void writeToNew(Path newPath) throws IOException {\n    FSDataOutputStream out \u003d\n        FileSystem.create(fs, newPath, permissions);\n    try {\n      keyStore.store(out, password);\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Can\u0027t store keystore \" + this, e);\n    } catch (NoSuchAlgorithmException e) {\n      throw new IOException(\n          \"No such algorithm storing keystore \" + this, e);\n    } catch (CertificateException e) {\n      throw new IOException(\n          \"Certificate exception storing keystore \" + this, e);\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10224. JavaKeyStoreProvider has to protect against corrupting underlying store. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616908 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 5:00 PM",
      "commitName": "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,16 @@\n+  private void writeToNew(Path newPath) throws IOException {\n+    FSDataOutputStream out \u003d\n+        FileSystem.create(fs, newPath, permissions);\n+    try {\n+      keyStore.store(out, password);\n+    } catch (KeyStoreException e) {\n+      throw new IOException(\"Can\u0027t store keystore \" + this, e);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new IOException(\n+          \"No such algorithm storing keystore \" + this, e);\n+    } catch (CertificateException e) {\n+      throw new IOException(\n+          \"Certificate exception storing keystore \" + this, e);\n+    }\n+    out.close();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void writeToNew(Path newPath) throws IOException {\n    FSDataOutputStream out \u003d\n        FileSystem.create(fs, newPath, permissions);\n    try {\n      keyStore.store(out, password);\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Can\u0027t store keystore \" + this, e);\n    } catch (NoSuchAlgorithmException e) {\n      throw new IOException(\n          \"No such algorithm storing keystore \" + this, e);\n    } catch (CertificateException e) {\n      throw new IOException(\n          \"Certificate exception storing keystore \" + this, e);\n    }\n    out.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java"
    }
  }
}