{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StandbyCheckpointer.java",
  "functionName": "setNameNodeAddresses",
  "functionId": "setNameNodeAddresses___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java",
  "functionStartLine": 134,
  "functionEndLine": 154,
  "numCommitsSeen": 37,
  "timeTaken": 2152,
  "changeHistory": [
    "49dfad942970459297f72632ed8dfd353e0c86de",
    "045dc880e13271737b3cf316296e92fb95806663",
    "675a7e4acba1417a80e1403b468c32efe597ba90",
    "32c313d51cd2483ea510afe044c55eeaed7c2b2d",
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa",
    "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae"
  ],
  "changeHistoryShort": {
    "49dfad942970459297f72632ed8dfd353e0c86de": "Ybodychange",
    "045dc880e13271737b3cf316296e92fb95806663": "Ybodychange",
    "675a7e4acba1417a80e1403b468c32efe597ba90": "Yexceptionschange",
    "32c313d51cd2483ea510afe044c55eeaed7c2b2d": "Ybodychange",
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa": "Ybodychange",
    "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49dfad942970459297f72632ed8dfd353e0c86de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
      "commitDate": "23/06/15 5:26 PM",
      "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "25/11/14 3:37 PM",
      "commitNameOld": "f43a20c529ac3f104add95b222de6580757b3763",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 210.03,
      "commitsBetweenForRepo": 1722,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,21 @@\n   private void setNameNodeAddresses(Configuration conf) throws IOException {\n     // Look up our own address.\n     myNNAddress \u003d getHttpAddress(conf);\n \n     // Look up the active node\u0027s address\n-    Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n-    activeNNAddress \u003d getHttpAddress(confForActive);\n-    \n+    List\u003cConfiguration\u003e confForActive \u003d HAUtil.getConfForOtherNodes(conf);\n+    activeNNAddresses \u003d new ArrayList\u003cURL\u003e(confForActive.size());\n+    for (Configuration activeConf : confForActive) {\n+      URL activeNNAddress \u003d getHttpAddress(activeConf);\n+\n+      // sanity check each possible active NN\n+      Preconditions.checkArgument(checkAddress(activeNNAddress),\n+          \"Bad address for active NN: %s\", activeNNAddress);\n+\n+      activeNNAddresses.add(activeNNAddress);\n+    }\n+\n     // Sanity-check.\n-    Preconditions.checkArgument(checkAddress(activeNNAddress),\n-        \"Bad address for active NN: %s\", activeNNAddress);\n-    Preconditions.checkArgument(checkAddress(myNNAddress),\n-        \"Bad address for standby NN: %s\", myNNAddress);\n+    Preconditions.checkArgument(checkAddress(myNNAddress), \"Bad address for standby NN: %s\",\n+        myNNAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNameNodeAddresses(Configuration conf) throws IOException {\n    // Look up our own address.\n    myNNAddress \u003d getHttpAddress(conf);\n\n    // Look up the active node\u0027s address\n    List\u003cConfiguration\u003e confForActive \u003d HAUtil.getConfForOtherNodes(conf);\n    activeNNAddresses \u003d new ArrayList\u003cURL\u003e(confForActive.size());\n    for (Configuration activeConf : confForActive) {\n      URL activeNNAddress \u003d getHttpAddress(activeConf);\n\n      // sanity check each possible active NN\n      Preconditions.checkArgument(checkAddress(activeNNAddress),\n          \"Bad address for active NN: %s\", activeNNAddress);\n\n      activeNNAddresses.add(activeNNAddress);\n    }\n\n    // Sanity-check.\n    Preconditions.checkArgument(checkAddress(myNNAddress), \"Bad address for standby NN: %s\",\n        myNNAddress);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java",
      "extendedDetails": {}
    },
    "045dc880e13271737b3cf316296e92fb95806663": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5312. Generate HTTP/HTTPS URL in DFSUtil#getInfoServer() based on the configured http policy. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:01 AM",
      "commitName": "045dc880e13271737b3cf316296e92fb95806663",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/08/13 4:32 PM",
      "commitNameOld": "49a892056df7d73207f7a65ae5b4b905ba5e6ab8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 113.77,
      "commitsBetweenForRepo": 707,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n   private void setNameNodeAddresses(Configuration conf) throws IOException {\n     // Look up our own address.\n-    String myAddrString \u003d getHttpAddress(conf);\n+    myNNAddress \u003d getHttpAddress(conf);\n \n     // Look up the active node\u0027s address\n     Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n     activeNNAddress \u003d getHttpAddress(confForActive);\n     \n     // Sanity-check.\n     Preconditions.checkArgument(checkAddress(activeNNAddress),\n         \"Bad address for active NN: %s\", activeNNAddress);\n-    Preconditions.checkArgument(checkAddress(myAddrString),\n-        \"Bad address for standby NN: %s\", myAddrString);\n-    myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n+    Preconditions.checkArgument(checkAddress(myNNAddress),\n+        \"Bad address for standby NN: %s\", myNNAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNameNodeAddresses(Configuration conf) throws IOException {\n    // Look up our own address.\n    myNNAddress \u003d getHttpAddress(conf);\n\n    // Look up the active node\u0027s address\n    Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n    activeNNAddress \u003d getHttpAddress(confForActive);\n    \n    // Sanity-check.\n    Preconditions.checkArgument(checkAddress(activeNNAddress),\n        \"Bad address for active NN: %s\", activeNNAddress);\n    Preconditions.checkArgument(checkAddress(myNNAddress),\n        \"Bad address for standby NN: %s\", myNNAddress);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java",
      "extendedDetails": {}
    },
    "675a7e4acba1417a80e1403b468c32efe597ba90": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-3484. hdfs fsck doesn\u0027t work if NN HTTP address is set to 0.0.0.0 even if NN RPC address is configured. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1344908 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/12 2:02 PM",
      "commitName": "675a7e4acba1417a80e1403b468c32efe597ba90",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "17/05/12 10:49 AM",
      "commitNameOld": "15ddb6634f8bdab37ce43f99f8338d84422c7232",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 14.13,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  private void setNameNodeAddresses(Configuration conf) {\n+  private void setNameNodeAddresses(Configuration conf) throws IOException {\n     // Look up our own address.\n     String myAddrString \u003d getHttpAddress(conf);\n \n     // Look up the active node\u0027s address\n     Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n     activeNNAddress \u003d getHttpAddress(confForActive);\n     \n     // Sanity-check.\n     Preconditions.checkArgument(checkAddress(activeNNAddress),\n         \"Bad address for active NN: %s\", activeNNAddress);\n     Preconditions.checkArgument(checkAddress(myAddrString),\n         \"Bad address for standby NN: %s\", myAddrString);\n     myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNameNodeAddresses(Configuration conf) throws IOException {\n    // Look up our own address.\n    String myAddrString \u003d getHttpAddress(conf);\n\n    // Look up the active node\u0027s address\n    Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n    activeNNAddress \u003d getHttpAddress(confForActive);\n    \n    // Sanity-check.\n    Preconditions.checkArgument(checkAddress(activeNNAddress),\n        \"Bad address for active NN: %s\", activeNNAddress);\n    Preconditions.checkArgument(checkAddress(myAddrString),\n        \"Bad address for standby NN: %s\", myAddrString);\n    myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "32c313d51cd2483ea510afe044c55eeaed7c2b2d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2861. checkpointing should verify that the dfs.http.address has been configured to a non-loopback for peer NN. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1239886 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 2:21 PM",
      "commitName": "32c313d51cd2483ea510afe044c55eeaed7c2b2d",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "20/01/12 7:17 PM",
      "commitNameOld": "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 12.79,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,15 @@\n   private void setNameNodeAddresses(Configuration conf) {\n     // Look up our own address.\n-    String myAddrString \u003d DFSUtil.getInfoServer(null, conf, true);\n+    String myAddrString \u003d getHttpAddress(conf);\n \n     // Look up the active node\u0027s address\n     Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n-    activeNNAddress \u003d DFSUtil.getInfoServer(null, confForActive, true);\n-    \n+    activeNNAddress \u003d getHttpAddress(confForActive);\n     \n     // Sanity-check.\n     Preconditions.checkArgument(checkAddress(activeNNAddress),\n         \"Bad address for active NN: %s\", activeNNAddress);\n     Preconditions.checkArgument(checkAddress(myAddrString),\n         \"Bad address for standby NN: %s\", myAddrString);\n     myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNameNodeAddresses(Configuration conf) {\n    // Look up our own address.\n    String myAddrString \u003d getHttpAddress(conf);\n\n    // Look up the active node\u0027s address\n    Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n    activeNNAddress \u003d getHttpAddress(confForActive);\n    \n    // Sanity-check.\n    Preconditions.checkArgument(checkAddress(activeNNAddress),\n        \"Bad address for active NN: %s\", activeNNAddress);\n    Preconditions.checkArgument(checkAddress(myAddrString),\n        \"Bad address for standby NN: %s\", myAddrString);\n    myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java",
      "extendedDetails": {}
    },
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2737. Automatically trigger log rolls periodically on the active NN. Contributed by Todd Lipcon and Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1234256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/01/12 7:17 PM",
      "commitName": "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "04/01/12 4:22 PM",
      "commitNameOld": "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 16.12,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,16 @@\n   private void setNameNodeAddresses(Configuration conf) {\n-    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n-    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(conf, nsId);\n-    String myNNId \u003d conf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n-    Preconditions.checkArgument(nnIds !\u003d null,\n-        \"Could not determine namenode ids in namespace \u0027%s\u0027\",\n-        nsId);\n-    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n-        \"Expected exactly 2 NameNodes in this namespace. Instead, got: \u0027%s\u0027\",\n-        Joiner.on(\"\u0027,\u0027\").join(nnIds));\n-    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n-        \"Could not determine own NN ID\");\n-\n-    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n-    nnSet.remove(myNNId);\n-    assert nnSet.size() \u003d\u003d 1;\n-    String activeNN \u003d nnSet.get(0);\n-    \n-    // Look up the address of the active NN.\n-    Configuration confForActive \u003d new Configuration(conf);\n-    NameNode.initializeGenericKeys(confForActive, nsId, activeNN);\n-    activeNNAddress \u003d DFSUtil.getInfoServer(null, confForActive, true);\n-    \n     // Look up our own address.\n     String myAddrString \u003d DFSUtil.getInfoServer(null, conf, true);\n+\n+    // Look up the active node\u0027s address\n+    Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n+    activeNNAddress \u003d DFSUtil.getInfoServer(null, confForActive, true);\n+    \n     \n     // Sanity-check.\n     Preconditions.checkArgument(checkAddress(activeNNAddress),\n         \"Bad address for active NN: %s\", activeNNAddress);\n-    Preconditions.checkArgument(checkAddress(activeNNAddress),\n-        \"Bad address for standby NN: %s\", myNNAddress);\n-    \n+    Preconditions.checkArgument(checkAddress(myAddrString),\n+        \"Bad address for standby NN: %s\", myAddrString);\n     myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNameNodeAddresses(Configuration conf) {\n    // Look up our own address.\n    String myAddrString \u003d DFSUtil.getInfoServer(null, conf, true);\n\n    // Look up the active node\u0027s address\n    Configuration confForActive \u003d HAUtil.getConfForOtherNode(conf);\n    activeNNAddress \u003d DFSUtil.getInfoServer(null, confForActive, true);\n    \n    \n    // Sanity-check.\n    Preconditions.checkArgument(checkAddress(activeNNAddress),\n        \"Bad address for active NN: %s\", activeNNAddress);\n    Preconditions.checkArgument(checkAddress(myAddrString),\n        \"Bad address for standby NN: %s\", myAddrString);\n    myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java",
      "extendedDetails": {}
    },
    "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2291. Allow the StandbyNode to make checkpoints in an HA setup. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/12 4:22 PM",
      "commitName": "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,34 @@\n+  private void setNameNodeAddresses(Configuration conf) {\n+    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n+    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(conf, nsId);\n+    String myNNId \u003d conf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n+    Preconditions.checkArgument(nnIds !\u003d null,\n+        \"Could not determine namenode ids in namespace \u0027%s\u0027\",\n+        nsId);\n+    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n+        \"Expected exactly 2 NameNodes in this namespace. Instead, got: \u0027%s\u0027\",\n+        Joiner.on(\"\u0027,\u0027\").join(nnIds));\n+    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n+        \"Could not determine own NN ID\");\n+\n+    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n+    nnSet.remove(myNNId);\n+    assert nnSet.size() \u003d\u003d 1;\n+    String activeNN \u003d nnSet.get(0);\n+    \n+    // Look up the address of the active NN.\n+    Configuration confForActive \u003d new Configuration(conf);\n+    NameNode.initializeGenericKeys(confForActive, nsId, activeNN);\n+    activeNNAddress \u003d DFSUtil.getInfoServer(null, confForActive, true);\n+    \n+    // Look up our own address.\n+    String myAddrString \u003d DFSUtil.getInfoServer(null, conf, true);\n+    \n+    // Sanity-check.\n+    Preconditions.checkArgument(checkAddress(activeNNAddress),\n+        \"Bad address for active NN: %s\", activeNNAddress);\n+    Preconditions.checkArgument(checkAddress(activeNNAddress),\n+        \"Bad address for standby NN: %s\", myNNAddress);\n+    \n+    myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNameNodeAddresses(Configuration conf) {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    Collection\u003cString\u003e nnIds \u003d DFSUtil.getNameNodeIds(conf, nsId);\n    String myNNId \u003d conf.get(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY);\n    Preconditions.checkArgument(nnIds !\u003d null,\n        \"Could not determine namenode ids in namespace \u0027%s\u0027\",\n        nsId);\n    Preconditions.checkArgument(nnIds.size() \u003d\u003d 2,\n        \"Expected exactly 2 NameNodes in this namespace. Instead, got: \u0027%s\u0027\",\n        Joiner.on(\"\u0027,\u0027\").join(nnIds));\n    Preconditions.checkState(myNNId !\u003d null \u0026\u0026 !myNNId.isEmpty(),\n        \"Could not determine own NN ID\");\n\n    ArrayList\u003cString\u003e nnSet \u003d Lists.newArrayList(nnIds);\n    nnSet.remove(myNNId);\n    assert nnSet.size() \u003d\u003d 1;\n    String activeNN \u003d nnSet.get(0);\n    \n    // Look up the address of the active NN.\n    Configuration confForActive \u003d new Configuration(conf);\n    NameNode.initializeGenericKeys(confForActive, nsId, activeNN);\n    activeNNAddress \u003d DFSUtil.getInfoServer(null, confForActive, true);\n    \n    // Look up our own address.\n    String myAddrString \u003d DFSUtil.getInfoServer(null, conf, true);\n    \n    // Sanity-check.\n    Preconditions.checkArgument(checkAddress(activeNNAddress),\n        \"Bad address for active NN: %s\", activeNNAddress);\n    Preconditions.checkArgument(checkAddress(activeNNAddress),\n        \"Bad address for standby NN: %s\", myNNAddress);\n    \n    myNNAddress \u003d NetUtils.createSocketAddr(myAddrString);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/StandbyCheckpointer.java"
    }
  }
}