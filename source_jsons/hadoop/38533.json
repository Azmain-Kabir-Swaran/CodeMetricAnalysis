{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___conf-Configuration__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 317,
  "functionEndLine": 321,
  "numCommitsSeen": 139,
  "timeTaken": 11846,
  "changeHistory": [
    "a63d19d36520fa55bf523483f14329756f6eadd3",
    "a4ba451802c6c61a0c804809740d46dd76059f25",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "25bc68d15eb005180ab366e3b9470294018bd2b9",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
    "334de8d21189109dcd2423d13fab56477980872b",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1eb1d0ae4feca0bd234cd54158cbf9d19289e83e",
    "24d6a8b29ceac12337ab94d7d4c042094e107560",
    "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "a63d19d36520fa55bf523483f14329756f6eadd3": "Ybodychange",
    "a4ba451802c6c61a0c804809740d46dd76059f25": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "25bc68d15eb005180ab366e3b9470294018bd2b9": "Ybodychange",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": "Ybodychange",
    "334de8d21189109dcd2423d13fab56477980872b": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1eb1d0ae4feca0bd234cd54158cbf9d19289e83e": "Ybodychange",
    "24d6a8b29ceac12337ab94d7d4c042094e107560": "Ybodychange",
    "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a63d19d36520fa55bf523483f14329756f6eadd3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6124. Make SchedulingEditPolicy can be enabled / disabled / updated with RMAdmin -refreshQueues. (Zian Chen via wangda)\n\nChange-Id: Id93656f3af7dcd78cafa94e33663c78d410d43c2\n",
      "commitDate": "30/11/17 3:57 PM",
      "commitName": "a63d19d36520fa55bf523483f14329756f6eadd3",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/11/17 10:49 AM",
      "commitNameOld": "a1382a18dff8a70aa25240d6fbba6e22832a7679",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 21.21,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,5 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n+    super.reinitialize(conf, rmContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    super.reinitialize(conf, rmContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a4ba451802c6c61a0c804809740d46dd76059f25": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1474. Make schedulers services. (Tsuyoshi Ozawa via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598908 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/14 12:33 PM",
      "commitName": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/05/14 10:32 PM",
      "commitNameOld": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.58,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,4 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n-    if (!this.initialized) {\n-      validateConf(conf);\n-      this.rmContext \u003d rmContext;\n-      //Use ConcurrentSkipListMap because applications need to be ordered\n-      this.applications \u003d\n-          new ConcurrentSkipListMap\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e();\n-      this.minimumAllocation \u003d \n-        Resources.createResource(conf.getInt(\n-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n-            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n-      this.maximumAllocation \u003d \n-        Resources.createResource(conf.getInt(\n-            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n-            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n-      this.usePortForNodeName \u003d conf.getBoolean(\n-          YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n-      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n-          conf);\n-      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n-      this.initialized \u003d true;\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/05/14 11:41 PM",
      "commitNameOld": "84dfae2f8a1c787380c65bf8de59bfd2d65901e3",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n     if (!this.initialized) {\n       validateConf(conf);\n       this.rmContext \u003d rmContext;\n       //Use ConcurrentSkipListMap because applications need to be ordered\n       this.applications \u003d\n-          new ConcurrentSkipListMap\u003cApplicationId, SchedulerApplication\u003e();\n+          new ConcurrentSkipListMap\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e();\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n       this.usePortForNodeName \u003d conf.getBoolean(\n           YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n           YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    if (!this.initialized) {\n      validateConf(conf);\n      this.rmContext \u003d rmContext;\n      //Use ConcurrentSkipListMap because applications need to be ordered\n      this.applications \u003d\n          new ConcurrentSkipListMap\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e();\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.usePortForNodeName \u003d conf.getBoolean(\n          YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n          YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "25bc68d15eb005180ab366e3b9470294018bd2b9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1041. Added the ApplicationMasterProtocol API for applications to use the ability in ResourceManager to optionally not kill containers when the ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557318 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 11:07 PM",
      "commitName": "25bc68d15eb005180ab366e3b9470294018bd2b9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/01/14 5:15 PM",
      "commitNameOld": "f677175f35f68bde9df72e648dffacbd31cfd620",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n     if (!this.initialized) {\n       validateConf(conf);\n       this.rmContext \u003d rmContext;\n+      //Use ConcurrentSkipListMap because applications need to be ordered\n+      this.applications \u003d\n+          new ConcurrentSkipListMap\u003cApplicationId, SchedulerApplication\u003e();\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n       this.usePortForNodeName \u003d conf.getBoolean(\n           YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n           YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    if (!this.initialized) {\n      validateConf(conf);\n      this.rmContext \u003d rmContext;\n      //Use ConcurrentSkipListMap because applications need to be ordered\n      this.applications \u003d\n          new ConcurrentSkipListMap\u003cApplicationId, SchedulerApplication\u003e();\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.usePortForNodeName \u003d conf.getBoolean(\n          YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n          YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1008. MiniYARNCluster with multiple nodemanagers, all nodes have same key for allocations. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 8:39 AM",
      "commitName": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/06/13 1:18 PM",
      "commitNameOld": "8eb3be63f598daae01f0a0c09eab5086881f153d",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 57.81,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n     if (!this.initialized) {\n       validateConf(conf);\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n+      this.usePortForNodeName \u003d conf.getBoolean(\n+          YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    if (!this.initialized) {\n      validateConf(conf);\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.usePortForNodeName \u003d conf.getBoolean(\n          YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME, \n          YarnConfiguration.DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME);\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "334de8d21189109dcd2423d13fab56477980872b": {
      "type": "Ybodychange",
      "commitMessage": " ARN-803. factor out scheduler config validation from the ResourceManager to each scheduler implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 10:07 AM",
      "commitName": "334de8d21189109dcd2423d13fab56477980872b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "06/06/13 11:46 AM",
      "commitNameOld": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 7.93,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n       reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n     if (!this.initialized) {\n+      validateConf(conf);\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    if (!this.initialized) {\n      validateConf(conf);\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 16.87,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,19 @@\n-  public synchronized void reinitialize(Configuration conf,\n-      ContainerTokenSecretManager containerTokenSecretManager, \n-      RMContext rmContext) \n-  throws IOException \n+      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n     if (!this.initialized) {\n-      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    if (!this.initialized) {\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, containerTokenSecretManager-ContainerTokenSecretManager, rmContext-RMContext]",
            "newValue": "[conf-Configuration, rmContext-RMContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "07/08/12 10:22 PM",
          "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 16.87,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,19 @@\n-  public synchronized void reinitialize(Configuration conf,\n-      ContainerTokenSecretManager containerTokenSecretManager, \n-      RMContext rmContext) \n-  throws IOException \n+      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n   {\n     setConf(conf);\n     if (!this.initialized) {\n-      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(\n             YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      reinitialize(Configuration conf, RMContext rmContext) throws IOException\n  {\n    setConf(conf);\n    if (!this.initialized) {\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    setConf(conf);\n    if (!this.initialized) {\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "1eb1d0ae4feca0bd234cd54158cbf9d19289e83e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3812. Lower default allocation sizes, fix allocation configurations and document them (Harsh J via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/12 8:26 AM",
      "commitName": "1eb1d0ae4feca0bd234cd54158cbf9d19289e83e",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "16/04/12 11:02 AM",
      "commitNameOld": "24d6a8b29ceac12337ab94d7d4c042094e107560",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 6.89,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   public synchronized void reinitialize(Configuration conf,\n       ContainerTokenSecretManager containerTokenSecretManager, \n       RMContext rmContext) \n   throws IOException \n   {\n     setConf(conf);\n     if (!this.initialized) {\n       this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n-        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n+        Resources.createResource(conf.getInt(\n+            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n       this.maximumAllocation \u003d \n-        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n+        Resources.createResource(conf.getInt(\n+            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n       this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n           conf);\n       this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    setConf(conf);\n    if (!this.initialized) {\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(\n            YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "24d6a8b29ceac12337ab94d7d4c042094e107560": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4008. ResourceManager throws MetricsException on start up saying QueueMetrics MBean already exists (Devaraj K via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/04/12 11:02 AM",
      "commitName": "24d6a8b29ceac12337ab94d7d4c042094e107560",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 37.77,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   public synchronized void reinitialize(Configuration conf,\n       ContainerTokenSecretManager containerTokenSecretManager, \n       RMContext rmContext) \n   throws IOException \n   {\n     setConf(conf);\n     if (!this.initialized) {\n       this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n+      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n+          conf);\n+      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n       this.initialized \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    setConf(conf);\n    if (!this.initialized) {\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.metrics \u003d QueueMetrics.forQueue(DEFAULT_QUEUE_NAME, null, false,\n          conf);\n      this.activeUsersManager \u003d new ActiveUsersManager(metrics);\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3773. Add queue metrics with buckets for job run times. Contributed by Owen O\u0027Malley.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/03/12 3:34 PM",
      "commitName": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/02/12 1:39 PM",
      "commitNameOld": "c0572656ced07a885f848c1134edd7b1c291d246",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.08,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,16 @@\n   public synchronized void reinitialize(Configuration conf,\n       ContainerTokenSecretManager containerTokenSecretManager, \n       RMContext rmContext) \n   throws IOException \n   {\n+    setConf(conf);\n     if (!this.initialized) {\n-      this.conf \u003d conf;\n       this.containerTokenSecretManager \u003d containerTokenSecretManager;\n       this.rmContext \u003d rmContext;\n       this.minimumAllocation \u003d \n         Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n       this.maximumAllocation \u003d \n         Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n       this.initialized \u003d true;\n-    } else {\n-      this.conf \u003d conf;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    setConf(conf);\n    if (!this.initialized) {\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.initialized \u003d true;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    if (!this.initialized) {\n      this.conf \u003d conf;\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.initialized \u003d true;\n    } else {\n      this.conf \u003d conf;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,18 @@\n-  public void reinitialize() throws IOException {\n-    if (segmentList.size() !\u003d 0) {\n-      clearSegmentList();\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, \n+      RMContext rmContext) \n+  throws IOException \n+  {\n+    if (!this.initialized) {\n+      this.conf \u003d conf;\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      this.minimumAllocation \u003d \n+        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n+      this.maximumAllocation \u003d \n+        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n+      this.initialized \u003d true;\n+    } else {\n+      this.conf \u003d conf;\n     }\n-    memCache.reinitialize(true);\n-    fileCache.reinitialize();\n-    readSegmentIndex \u003d firstSegmentOffset \u003d 0;\n-    currentKVOffset \u003d 0;\n-    nextKVOffset \u003d -1;\n-    hasMore \u003d inReset \u003d clearMarkFlag \u003d false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    if (!this.initialized) {\n      this.conf \u003d conf;\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.initialized \u003d true;\n    } else {\n      this.conf \u003d conf;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/BackupStore.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
            "oldMethodName": "reinitialize",
            "newMethodName": "reinitialize"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,18 @@\n-  public void reinitialize() throws IOException {\n-    if (segmentList.size() !\u003d 0) {\n-      clearSegmentList();\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, \n+      RMContext rmContext) \n+  throws IOException \n+  {\n+    if (!this.initialized) {\n+      this.conf \u003d conf;\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      this.minimumAllocation \u003d \n+        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n+      this.maximumAllocation \u003d \n+        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n+      this.initialized \u003d true;\n+    } else {\n+      this.conf \u003d conf;\n     }\n-    memCache.reinitialize(true);\n-    fileCache.reinitialize();\n-    readSegmentIndex \u003d firstSegmentOffset \u003d 0;\n-    currentKVOffset \u003d 0;\n-    nextKVOffset \u003d -1;\n-    hasMore \u003d inReset \u003d clearMarkFlag \u003d false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    if (!this.initialized) {\n      this.conf \u003d conf;\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.initialized \u003d true;\n    } else {\n      this.conf \u003d conf;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,18 @@\n-  public void reinitialize() throws IOException {\n-    if (segmentList.size() !\u003d 0) {\n-      clearSegmentList();\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, \n+      RMContext rmContext) \n+  throws IOException \n+  {\n+    if (!this.initialized) {\n+      this.conf \u003d conf;\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      this.minimumAllocation \u003d \n+        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n+      this.maximumAllocation \u003d \n+        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n+      this.initialized \u003d true;\n+    } else {\n+      this.conf \u003d conf;\n     }\n-    memCache.reinitialize(true);\n-    fileCache.reinitialize();\n-    readSegmentIndex \u003d firstSegmentOffset \u003d 0;\n-    currentKVOffset \u003d 0;\n-    nextKVOffset \u003d -1;\n-    hasMore \u003d inReset \u003d clearMarkFlag \u003d false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    if (!this.initialized) {\n      this.conf \u003d conf;\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.initialized \u003d true;\n    } else {\n      this.conf \u003d conf;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,18 @@\n-  public void reinitialize() throws IOException {\n-    if (segmentList.size() !\u003d 0) {\n-      clearSegmentList();\n+  public synchronized void reinitialize(Configuration conf,\n+      ContainerTokenSecretManager containerTokenSecretManager, \n+      RMContext rmContext) \n+  throws IOException \n+  {\n+    if (!this.initialized) {\n+      this.conf \u003d conf;\n+      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n+      this.rmContext \u003d rmContext;\n+      this.minimumAllocation \u003d \n+        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n+      this.maximumAllocation \u003d \n+        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n+      this.initialized \u003d true;\n+    } else {\n+      this.conf \u003d conf;\n     }\n-    memCache.reinitialize(true);\n-    fileCache.reinitialize();\n-    readSegmentIndex \u003d firstSegmentOffset \u003d 0;\n-    currentKVOffset \u003d 0;\n-    nextKVOffset \u003d -1;\n-    hasMore \u003d inReset \u003d clearMarkFlag \u003d false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reinitialize(Configuration conf,\n      ContainerTokenSecretManager containerTokenSecretManager, \n      RMContext rmContext) \n  throws IOException \n  {\n    if (!this.initialized) {\n      this.conf \u003d conf;\n      this.containerTokenSecretManager \u003d containerTokenSecretManager;\n      this.rmContext \u003d rmContext;\n      this.minimumAllocation \u003d \n        Resources.createResource(conf.getInt(MINIMUM_ALLOCATION, MINIMUM_MEMORY));\n      this.maximumAllocation \u003d \n        Resources.createResource(conf.getInt(MAXIMUM_ALLOCATION, MAXIMUM_MEMORY));\n      this.initialized \u003d true;\n    } else {\n      this.conf \u003d conf;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[conf-Configuration, containerTokenSecretManager-ContainerTokenSecretManager, rmContext-RMContext]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,3 @@\n+    void reinitialize() {\n+      availableSize \u003d maxSize;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void reinitialize() {\n      availableSize \u003d maxSize;\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/BackupStore.java"
    }
  }
}