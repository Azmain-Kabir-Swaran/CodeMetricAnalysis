{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodesListManager.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
  "functionStartLine": 96,
  "functionEndLine": 165,
  "numCommitsSeen": 42,
  "timeTaken": 11533,
  "changeHistory": [
    "27642367ef3409a9ca93747c6c2cc279c087a4c0",
    "0f2b65c3da44f81be0f1973233e4cc10819c5e7b",
    "d0da13229cf692579c8c9db47a93f6c6255392c8",
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
    "1cbcd4a491e6a57d466c2897335614dc6770b475",
    "ed55950164a66e08fa34e30dba1030c5a986d1f1",
    "d40859fab1ad977636457a6cc96b6a4f9b903afc",
    "bcc85e3bab78bcacd430eac23141774465b96ef9",
    "da2009528478693f8e355a6a28f0826e68050b7c",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
    "0928502029ef141759008997335ea2cd836a7154",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "27642367ef3409a9ca93747c6c2cc279c087a4c0": "Ybodychange",
    "0f2b65c3da44f81be0f1973233e4cc10819c5e7b": "Ybodychange",
    "d0da13229cf692579c8c9db47a93f6c6255392c8": "Ybodychange",
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c": "Ybodychange",
    "1cbcd4a491e6a57d466c2897335614dc6770b475": "Ybodychange",
    "ed55950164a66e08fa34e30dba1030c5a986d1f1": "Ybodychange",
    "d40859fab1ad977636457a6cc96b6a4f9b903afc": "Ybodychange",
    "bcc85e3bab78bcacd430eac23141774465b96ef9": "Ybodychange",
    "da2009528478693f8e355a6a28f0826e68050b7c": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "27642367ef3409a9ca93747c6c2cc279c087a4c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9011. Race condition during decommissioning. Contributed by Peter Bacsko\n",
      "commitDate": "18/11/19 7:29 AM",
      "commitName": "27642367ef3409a9ca93747c6c2cc279c087a4c0",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 247.67,
      "commitsBetweenForRepo": 1751,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n       resolver \u003d\n           new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n       setDecommissionedNMs();\n-      printConfiguredHosts();\n+      printConfiguredHosts(false);\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n \n     final int nodeRemovalTimeout \u003d\n         conf.getInt(\n             YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n             YarnConfiguration.\n                 DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n     nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n         600000));\n     removalTimer \u003d new Timer(\"Node Removal Timer\");\n \n     removalTimer.schedule(new TimerTask() {\n       @Override\n       public void run() {\n         long now \u003d Time.monotonicNow();\n         for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n             rmContext.getInactiveRMNodes().entrySet()) {\n           NodeId nodeId \u003d entry.getKey();\n           RMNode rmNode \u003d entry.getValue();\n           if (isUntrackedNode(rmNode.getHostName())) {\n             if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n               rmNode.setUntrackedTimeStamp(now);\n             } else\n               if (now - rmNode.getUntrackedTimeStamp() \u003e\n                   nodeRemovalTimeout) {\n                 RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n                 if (result !\u003d null) {\n                   decrInactiveNMMetrics(rmNode);\n                   LOG.info(\"Removed \" +result.getState().toString() + \" node \"\n                       + result.getHostName() + \" from inactive nodes list\");\n                 }\n               }\n           } else {\n             rmNode.setUntrackedTimeStamp(0);\n           }\n         }\n       }\n     }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecommissionedNMs();\n      printConfiguredHosts(false);\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n\n    final int nodeRemovalTimeout \u003d\n        conf.getInt(\n            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n            YarnConfiguration.\n                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n        600000));\n    removalTimer \u003d new Timer(\"Node Removal Timer\");\n\n    removalTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long now \u003d Time.monotonicNow();\n        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n            rmContext.getInactiveRMNodes().entrySet()) {\n          NodeId nodeId \u003d entry.getKey();\n          RMNode rmNode \u003d entry.getValue();\n          if (isUntrackedNode(rmNode.getHostName())) {\n            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n              rmNode.setUntrackedTimeStamp(now);\n            } else\n              if (now - rmNode.getUntrackedTimeStamp() \u003e\n                  nodeRemovalTimeout) {\n                RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n                if (result !\u003d null) {\n                  decrInactiveNMMetrics(rmNode);\n                  LOG.info(\"Removed \" +result.getState().toString() + \" node \"\n                      + result.getHostName() + \" from inactive nodes list\");\n                }\n              }\n          } else {\n            rmNode.setUntrackedTimeStamp(0);\n          }\n        }\n      }\n    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "0f2b65c3da44f81be0f1973233e4cc10819c5e7b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16116. Fix Spelling Mistakes - DECOMISSIONED. Contributed by BELUGA BEHR.\n",
      "commitDate": "17/02/19 10:21 PM",
      "commitName": "0f2b65c3da44f81be0f1973233e4cc10819c5e7b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "22/11/17 7:18 PM",
      "commitNameOld": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 452.13,
      "commitsBetweenForRepo": 3865,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n       resolver \u003d\n           new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n-      setDecomissionedNMs();\n+      setDecommissionedNMs();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n \n     final int nodeRemovalTimeout \u003d\n         conf.getInt(\n             YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n             YarnConfiguration.\n                 DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n     nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n         600000));\n     removalTimer \u003d new Timer(\"Node Removal Timer\");\n \n     removalTimer.schedule(new TimerTask() {\n       @Override\n       public void run() {\n         long now \u003d Time.monotonicNow();\n         for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n             rmContext.getInactiveRMNodes().entrySet()) {\n           NodeId nodeId \u003d entry.getKey();\n           RMNode rmNode \u003d entry.getValue();\n           if (isUntrackedNode(rmNode.getHostName())) {\n             if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n               rmNode.setUntrackedTimeStamp(now);\n             } else\n               if (now - rmNode.getUntrackedTimeStamp() \u003e\n                   nodeRemovalTimeout) {\n                 RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n                 if (result !\u003d null) {\n                   decrInactiveNMMetrics(rmNode);\n                   LOG.info(\"Removed \" +result.getState().toString() + \" node \"\n                       + result.getHostName() + \" from inactive nodes list\");\n                 }\n               }\n           } else {\n             rmNode.setUntrackedTimeStamp(0);\n           }\n         }\n       }\n     }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecommissionedNMs();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n\n    final int nodeRemovalTimeout \u003d\n        conf.getInt(\n            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n            YarnConfiguration.\n                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n        600000));\n    removalTimer \u003d new Timer(\"Node Removal Timer\");\n\n    removalTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long now \u003d Time.monotonicNow();\n        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n            rmContext.getInactiveRMNodes().entrySet()) {\n          NodeId nodeId \u003d entry.getKey();\n          RMNode rmNode \u003d entry.getValue();\n          if (isUntrackedNode(rmNode.getHostName())) {\n            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n              rmNode.setUntrackedTimeStamp(now);\n            } else\n              if (now - rmNode.getUntrackedTimeStamp() \u003e\n                  nodeRemovalTimeout) {\n                RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n                if (result !\u003d null) {\n                  decrInactiveNMMetrics(rmNode);\n                  LOG.info(\"Removed \" +result.getState().toString() + \" node \"\n                      + result.getHostName() + \" from inactive nodes list\");\n                }\n              }\n          } else {\n            rmNode.setUntrackedTimeStamp(0);\n          }\n        }\n      }\n    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "d0da13229cf692579c8c9db47a93f6c6255392c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\n",
      "commitDate": "05/05/16 7:07 AM",
      "commitName": "d0da13229cf692579c8c9db47a93f6c6255392c8",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/04/16 1:36 PM",
      "commitNameOld": "69f3d428d5c3ab0c79cacffc22b1f59408622ae7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,70 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n       resolver \u003d\n           new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n       setDecomissionedNMs();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n+\n+    final int nodeRemovalTimeout \u003d\n+        conf.getInt(\n+            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n+            YarnConfiguration.\n+                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n+    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n+        600000));\n+    removalTimer \u003d new Timer(\"Node Removal Timer\");\n+\n+    removalTimer.schedule(new TimerTask() {\n+      @Override\n+      public void run() {\n+        long now \u003d Time.monotonicNow();\n+        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n+            rmContext.getInactiveRMNodes().entrySet()) {\n+          NodeId nodeId \u003d entry.getKey();\n+          RMNode rmNode \u003d entry.getValue();\n+          if (isUntrackedNode(rmNode.getHostName())) {\n+            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n+              rmNode.setUntrackedTimeStamp(now);\n+            } else\n+              if (now - rmNode.getUntrackedTimeStamp() \u003e\n+                  nodeRemovalTimeout) {\n+                RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n+                if (result !\u003d null) {\n+                  decrInactiveNMMetrics(rmNode);\n+                  LOG.info(\"Removed \" +result.getState().toString() + \" node \"\n+                      + result.getHostName() + \" from inactive nodes list\");\n+                }\n+              }\n+          } else {\n+            rmNode.setUntrackedTimeStamp(0);\n+          }\n+        }\n+      }\n+    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMs();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n\n    final int nodeRemovalTimeout \u003d\n        conf.getInt(\n            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n            YarnConfiguration.\n                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n        600000));\n    removalTimer \u003d new Timer(\"Node Removal Timer\");\n\n    removalTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long now \u003d Time.monotonicNow();\n        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n            rmContext.getInactiveRMNodes().entrySet()) {\n          NodeId nodeId \u003d entry.getKey();\n          RMNode rmNode \u003d entry.getValue();\n          if (isUntrackedNode(rmNode.getHostName())) {\n            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n              rmNode.setUntrackedTimeStamp(now);\n            } else\n              if (now - rmNode.getUntrackedTimeStamp() \u003e\n                  nodeRemovalTimeout) {\n                RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n                if (result !\u003d null) {\n                  decrInactiveNMMetrics(rmNode);\n                  LOG.info(\"Removed \" +result.getState().toString() + \" node \"\n                      + result.getHostName() + \" from inactive nodes list\");\n                }\n              }\n          } else {\n            rmNode.setUntrackedTimeStamp(0);\n          }\n        }\n      }\n    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\"\n\nThis reverts commit 1cbcd4a491e6a57d466c2897335614dc6770b475.\n",
      "commitDate": "11/04/16 8:51 AM",
      "commitName": "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "05/04/16 6:40 AM",
      "commitNameOld": "1cbcd4a491e6a57d466c2897335614dc6770b475",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,32 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n       resolver \u003d\n           new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n       setDecomissionedNMs();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n-\n-    final int nodeRemovalTimeout \u003d\n-        conf.getInt(\n-            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n-            YarnConfiguration.\n-                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n-    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n-        600000));\n-    removalTimer \u003d new Timer(\"Node Removal Timer\");\n-\n-    removalTimer.schedule(new TimerTask() {\n-      @Override\n-      public void run() {\n-        long now \u003d Time.monotonicNow();\n-        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n-            rmContext.getInactiveRMNodes().entrySet()) {\n-          NodeId nodeId \u003d entry.getKey();\n-          RMNode rmNode \u003d entry.getValue();\n-          if (isUntrackedNode(rmNode.getHostName())) {\n-            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n-              rmNode.setUntrackedTimeStamp(now);\n-            } else if (now - rmNode.getUntrackedTimeStamp() \u003e\n-                  nodeRemovalTimeout) {\n-              RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n-              if (result !\u003d null) {\n-                ClusterMetrics clusterMetrics \u003d ClusterMetrics.getMetrics();\n-                if (rmNode.getState() \u003d\u003d NodeState.SHUTDOWN) {\n-                  clusterMetrics.decrNumShutdownNMs();\n-                } else {\n-                  clusterMetrics.decrDecommisionedNMs();\n-                }\n-                LOG.info(\"Removed \"+result.getHostName() +\n-                    \" from inactive nodes list\");\n-              }\n-            }\n-          } else {\n-            rmNode.setUntrackedTimeStamp(0);\n-          }\n-        }\n-      }\n-    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n-\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMs();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "1cbcd4a491e6a57d466c2897335614dc6770b475": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\n",
      "commitDate": "05/04/16 6:40 AM",
      "commitName": "1cbcd4a491e6a57d466c2897335614dc6770b475",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/02/16 12:24 PM",
      "commitNameOld": "6b0f813e898cbd14b2ae52ecfed6d30bce8cb6b7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 38.72,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,74 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n       resolver \u003d\n           new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n       setDecomissionedNMs();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n+\n+    final int nodeRemovalTimeout \u003d\n+        conf.getInt(\n+            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n+            YarnConfiguration.\n+                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n+    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n+        600000));\n+    removalTimer \u003d new Timer(\"Node Removal Timer\");\n+\n+    removalTimer.schedule(new TimerTask() {\n+      @Override\n+      public void run() {\n+        long now \u003d Time.monotonicNow();\n+        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n+            rmContext.getInactiveRMNodes().entrySet()) {\n+          NodeId nodeId \u003d entry.getKey();\n+          RMNode rmNode \u003d entry.getValue();\n+          if (isUntrackedNode(rmNode.getHostName())) {\n+            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n+              rmNode.setUntrackedTimeStamp(now);\n+            } else if (now - rmNode.getUntrackedTimeStamp() \u003e\n+                  nodeRemovalTimeout) {\n+              RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n+              if (result !\u003d null) {\n+                ClusterMetrics clusterMetrics \u003d ClusterMetrics.getMetrics();\n+                if (rmNode.getState() \u003d\u003d NodeState.SHUTDOWN) {\n+                  clusterMetrics.decrNumShutdownNMs();\n+                } else {\n+                  clusterMetrics.decrDecommisionedNMs();\n+                }\n+                LOG.info(\"Removed \"+result.getHostName() +\n+                    \" from inactive nodes list\");\n+              }\n+            }\n+          } else {\n+            rmNode.setUntrackedTimeStamp(0);\n+          }\n+        }\n+      }\n+    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMs();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n\n    final int nodeRemovalTimeout \u003d\n        conf.getInt(\n            YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,\n            YarnConfiguration.\n                DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);\n    nodeRemovalCheckInterval \u003d (Math.min(nodeRemovalTimeout/2,\n        600000));\n    removalTimer \u003d new Timer(\"Node Removal Timer\");\n\n    removalTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        long now \u003d Time.monotonicNow();\n        for (Map.Entry\u003cNodeId, RMNode\u003e entry :\n            rmContext.getInactiveRMNodes().entrySet()) {\n          NodeId nodeId \u003d entry.getKey();\n          RMNode rmNode \u003d entry.getValue();\n          if (isUntrackedNode(rmNode.getHostName())) {\n            if (rmNode.getUntrackedTimeStamp() \u003d\u003d 0) {\n              rmNode.setUntrackedTimeStamp(now);\n            } else if (now - rmNode.getUntrackedTimeStamp() \u003e\n                  nodeRemovalTimeout) {\n              RMNode result \u003d rmContext.getInactiveRMNodes().remove(nodeId);\n              if (result !\u003d null) {\n                ClusterMetrics clusterMetrics \u003d ClusterMetrics.getMetrics();\n                if (rmNode.getState() \u003d\u003d NodeState.SHUTDOWN) {\n                  clusterMetrics.decrNumShutdownNMs();\n                } else {\n                  clusterMetrics.decrDecommisionedNMs();\n                }\n                LOG.info(\"Removed \"+result.getHostName() +\n                    \" from inactive nodes list\");\n              }\n            }\n          } else {\n            rmNode.setUntrackedTimeStamp(0);\n          }\n        }\n      }\n    }, nodeRemovalCheckInterval, nodeRemovalCheckInterval);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "ed55950164a66e08fa34e30dba1030c5a986d1f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3102. Decommisioned Nodes not listed in Web UI. Contributed by Kuhu Shukla\n",
      "commitDate": "01/02/16 3:15 PM",
      "commitName": "ed55950164a66e08fa34e30dba1030c5a986d1f1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 14.55,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n       resolver \u003d\n           new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n-      setDecomissionedNMsMetrics();\n+      setDecomissionedNMs();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMs();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "d40859fab1ad977636457a6cc96b6a4f9b903afc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4526. Make SystemClock singleton so AppSchedulingInfo could use it. (kasha)\n",
      "commitDate": "18/01/16 1:58 AM",
      "commitName": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/12/15 7:52 AM",
      "commitNameOld": "223ce323bb81463ec5c5ac7316738370d4a47366",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 18.75,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     int nodeIpCacheTimeout \u003d conf.getInt(\n         YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n         YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n     if (nodeIpCacheTimeout \u003c\u003d 0) {\n       resolver \u003d new DirectResolver();\n     } else {\n-      resolver \u003d new CachedResolver(new SystemClock(), nodeIpCacheTimeout);\n+      resolver \u003d\n+          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n       addIfService(resolver);\n     }\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n       setDecomissionedNMsMetrics();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d\n          new CachedResolver(SystemClock.getInstance(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMsMetrics();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "bcc85e3bab78bcacd430eac23141774465b96ef9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4024. YARN RM should avoid unnecessary resolving IP when NMs doing heartbeat. (Hong Zhiguo via wangda)\n",
      "commitDate": "04/09/15 3:13 PM",
      "commitName": "bcc85e3bab78bcacd430eac23141774465b96ef9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/07/15 10:37 AM",
      "commitNameOld": "32e490b6c035487e99df30ce80366446fe09bd6c",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 35.19,
      "commitsBetweenForRepo": 191,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,31 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n+    int nodeIpCacheTimeout \u003d conf.getInt(\n+        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n+        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n+    if (nodeIpCacheTimeout \u003c\u003d 0) {\n+      resolver \u003d new DirectResolver();\n+    } else {\n+      resolver \u003d new CachedResolver(new SystemClock(), nodeIpCacheTimeout);\n+      addIfService(resolver);\n+    }\n+\n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n       setDecomissionedNMsMetrics();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    int nodeIpCacheTimeout \u003d conf.getInt(\n        YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,\n        YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);\n    if (nodeIpCacheTimeout \u003c\u003d 0) {\n      resolver \u003d new DirectResolver();\n    } else {\n      resolver \u003d new CachedResolver(new SystemClock(), nodeIpCacheTimeout);\n      addIfService(resolver);\n    }\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMsMetrics();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "da2009528478693f8e355a6a28f0826e68050b7c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1071. Enabled ResourceManager to recover cluster metrics numDecommissionedNMs after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570469 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/14 10:46 PM",
      "commitName": "da2009528478693f8e355a6a28f0826e68050b7c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "19/02/14 9:52 AM",
      "commitNameOld": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.54,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n       this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n           YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       this.hostsReader \u003d\n           createHostsFileReader(this.includesFile, this.excludesFile);\n+      setDecomissionedNMsMetrics();\n       printConfiguredHosts();\n     } catch (YarnException ex) {\n       disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n       disableHostsFileReader(ioe);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      setDecomissionedNMsMetrics();\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/10/13 7:54 PM",
      "commitNameOld": "990dcae7174f781483d1688319674e9cb4ccb960",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 111.62,
      "commitsBetweenForRepo": 641,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,20 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n-      this.hostsReader \u003d \n-        new HostsFileReader(\n-            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n-                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n-            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n-                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n-                );\n+      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n+          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n+      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n+          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n+      this.hostsReader \u003d\n+          createHostsFileReader(this.includesFile, this.excludesFile);\n       printConfiguredHosts();\n+    } catch (YarnException ex) {\n+      disableHostsFileReader(ex);\n     } catch (IOException ioe) {\n-      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n-      try {\n-        this.hostsReader \u003d \n-          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n-              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n-      } catch (IOException ioe2) {\n-        // Should *never* happen\n-        this.hostsReader \u003d null;\n-        throw new YarnRuntimeException(ioe2);\n-      }\n+      disableHostsFileReader(ioe);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.includesFile \u003d conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);\n      this.excludesFile \u003d conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,\n          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      this.hostsReader \u003d\n          createHostsFileReader(this.includesFile, this.excludesFile);\n      printConfiguredHosts();\n    } catch (YarnException ex) {\n      disableHostsFileReader(ex);\n    } catch (IOException ioe) {\n      disableHostsFileReader(ioe);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.hostsReader \u003d \n         new HostsFileReader(\n             conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n             conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                 );\n       printConfiguredHosts();\n     } catch (IOException ioe) {\n       LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n       try {\n         this.hostsReader \u003d \n           new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n               YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       } catch (IOException ioe2) {\n         // Should *never* happen\n         this.hostsReader \u003d null;\n         throw new YarnRuntimeException(ioe2);\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnRuntimeException(ioe2);\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.hostsReader \u003d \n         new HostsFileReader(\n             conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n             conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                 );\n       printConfiguredHosts();\n     } catch (IOException ioe) {\n       LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n       try {\n         this.hostsReader \u003d \n           new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n               YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       } catch (IOException ioe2) {\n         // Should *never* happen\n         this.hostsReader \u003d null;\n         throw new YarnRuntimeException(ioe2);\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnRuntimeException(ioe2);\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.hostsReader \u003d \n         new HostsFileReader(\n             conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n             conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                 );\n       printConfiguredHosts();\n     } catch (IOException ioe) {\n       LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n       try {\n         this.hostsReader \u003d \n           new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n               YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       } catch (IOException ioe2) {\n         // Should *never* happen\n         this.hostsReader \u003d null;\n         throw new YarnRuntimeException(ioe2);\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnRuntimeException(ioe2);\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.hostsReader \u003d \n         new HostsFileReader(\n             conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n             conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                 );\n       printConfiguredHosts();\n     } catch (IOException ioe) {\n       LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n       try {\n         this.hostsReader \u003d \n           new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n               YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       } catch (IOException ioe2) {\n         // Should *never* happen\n         this.hostsReader \u003d null;\n         throw new YarnRuntimeException(ioe2);\n       }\n     }\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnRuntimeException(ioe2);\n      }\n    }\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/09/12 3:39 PM",
      "commitNameOld": "39f15579b83eae9a1384dc077491f3b9326ca99a",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 247.23,
      "commitsBetweenForRepo": 1386,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.hostsReader \u003d \n         new HostsFileReader(\n             conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n             conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                 YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                 );\n       printConfiguredHosts();\n     } catch (IOException ioe) {\n       LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n       try {\n         this.hostsReader \u003d \n           new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n               YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       } catch (IOException ioe2) {\n         // Should *never* happen\n         this.hostsReader \u003d null;\n-        throw new YarnException(ioe2);\n+        throw new YarnRuntimeException(ioe2);\n       }\n     }\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnRuntimeException(ioe2);\n      }\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnException(ioe2);\n      }\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java"
      }
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "25/08/11 10:16 AM",
      "commitNameOld": "7c85f33ce1b209e1e5bb17b9dd2ad270ca451d60",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.35,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     // Read the hosts/exclude files to restrict access to the RM\n     try {\n       this.hostsReader \u003d \n         new HostsFileReader(\n-            conf.get(RMConfig.RM_NODES_INCLUDE_FILE, \n-                RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE),\n-            conf.get(RMConfig.RM_NODES_EXCLUDE_FILE, \n-                RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE)\n+            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n+                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n+            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n+                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                 );\n       printConfiguredHosts();\n     } catch (IOException ioe) {\n       LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n       try {\n         this.hostsReader \u003d \n-          new HostsFileReader(RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE, \n-              RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE);\n+          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n+              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n       } catch (IOException ioe2) {\n         // Should *never* happen\n         this.hostsReader \u003d null;\n         throw new YarnException(ioe2);\n       }\n     }\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH),\n            conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, \n                YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH, \n              YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnException(ioe2);\n      }\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(RMConfig.RM_NODES_INCLUDE_FILE, \n                RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE),\n            conf.get(RMConfig.RM_NODES_EXCLUDE_FILE, \n                RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE, \n              RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnException(ioe2);\n      }\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,28 @@\n+  public void init(Configuration conf) {\n+\n+    this.conf \u003d conf;\n+\n+    // Read the hosts/exclude files to restrict access to the RM\n+    try {\n+      this.hostsReader \u003d \n+        new HostsFileReader(\n+            conf.get(RMConfig.RM_NODES_INCLUDE_FILE, \n+                RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE),\n+            conf.get(RMConfig.RM_NODES_EXCLUDE_FILE, \n+                RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE)\n+                );\n+      printConfiguredHosts();\n+    } catch (IOException ioe) {\n+      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n+      try {\n+        this.hostsReader \u003d \n+          new HostsFileReader(RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE, \n+              RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE);\n+      } catch (IOException ioe2) {\n+        // Should *never* happen\n+        this.hostsReader \u003d null;\n+        throw new YarnException(ioe2);\n+      }\n+    }\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    // Read the hosts/exclude files to restrict access to the RM\n    try {\n      this.hostsReader \u003d \n        new HostsFileReader(\n            conf.get(RMConfig.RM_NODES_INCLUDE_FILE, \n                RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE),\n            conf.get(RMConfig.RM_NODES_EXCLUDE_FILE, \n                RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE)\n                );\n      printConfiguredHosts();\n    } catch (IOException ioe) {\n      LOG.warn(\"Failed to init hostsReader, disabling\", ioe);\n      try {\n        this.hostsReader \u003d \n          new HostsFileReader(RMConfig.DEFAULT_RM_NODES_INCLUDE_FILE, \n              RMConfig.DEFAULT_RM_NODES_EXCLUDE_FILE);\n      } catch (IOException ioe2) {\n        // Should *never* happen\n        this.hostsReader \u003d null;\n        throw new YarnException(ioe2);\n      }\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java"
    }
  }
}