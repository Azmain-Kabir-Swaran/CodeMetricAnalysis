{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContext.java",
  "functionName": "create",
  "functionId": "create___f-Path(modifiers-final)__createFlag-EnumSet__CreateFlag__(modifiers-final)__opts-Options.CreateOpts",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
  "functionStartLine": 679,
  "functionEndLine": 704,
  "numCommitsSeen": 99,
  "timeTaken": 3594,
  "changeHistory": [
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
    "3d191cc15244e1e29f837b34a9bd1d029e003064",
    "274d9b2ac48547b8d466e5006c233576c1aa7591",
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
    "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0",
    "0294c49df60150bd9b363af5cfbc312222c12c69"
  ],
  "changeHistoryShort": {
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": "Ybodychange",
    "3d191cc15244e1e29f837b34a9bd1d029e003064": "Ybodychange",
    "274d9b2ac48547b8d466e5006c233576c1aa7591": "Ybodychange",
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8": "Ybodychange",
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": "Yexceptionschange",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Ybodychange",
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0": "Ybodychange",
    "0294c49df60150bd9b363af5cfbc312222c12c69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 11:02 AM",
      "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "15/08/16 9:30 PM",
      "commitNameOld": "b8a446ba57d89c0896ec2d56dd919b0101e69f44",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 21.56,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FILE_DEFAULT_PERM;\n-    permission \u003d permission.applyUMask(getUMask());\n+    permission \u003d FsCreateModes.applyUMask(permission, getUMask());\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       @Override\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n         throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FILE_DEFAULT_PERM;\n    permission \u003d FsCreateModes.applyUMask(permission, getUMask());\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      @Override\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "3d191cc15244e1e29f837b34a9bd1d029e003064": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13440. FileContext does not react on changing umask via configuration.\n",
      "commitDate": "30/07/16 7:29 PM",
      "commitName": "3d191cc15244e1e29f837b34a9bd1d029e003064",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/07/16 4:49 PM",
      "commitNameOld": "a290a98b6ab2424ae9b7faab0ce9496d09ca46f3",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 18.11,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FILE_DEFAULT_PERM;\n-    permission \u003d permission.applyUMask(umask);\n+    permission \u003d permission.applyUMask(getUMask());\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       @Override\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n         throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FILE_DEFAULT_PERM;\n    permission \u003d permission.applyUMask(getUMask());\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      @Override\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "274d9b2ac48547b8d466e5006c233576c1aa7591": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10426. Declare CreateOpts.getOpt(..) with generic type argument, removes unused FileContext.getFileStatus(..) and fixes various javac warnings.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/14 11:07 AM",
      "commitName": "274d9b2ac48547b8d466e5006c233576c1aa7591",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/03/14 4:10 PM",
      "commitNameOld": "8e68f64daa764a32fa2ddf405b481f9a6e277504",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 14.79,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n-    CreateOpts.Perms permOpt \u003d \n-      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n+    CreateOpts.Perms permOpt \u003d CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FILE_DEFAULT_PERM;\n     permission \u003d permission.applyUMask(umask);\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       @Override\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n         throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FILE_DEFAULT_PERM;\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      @Override\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9155. FsPermission should have different default value, 777 for directory and 666 for file. Contributed by Binglin Chang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431148 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 3:30 PM",
      "commitName": "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "20/11/12 9:55 PM",
      "commitNameOld": "c24bc56484369404afae52fc2f3a23b75bfbbe75",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 49.73,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d \n       (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n-                                      FsPermission.getDefault();\n+                                      FILE_DEFAULT_PERM;\n     permission \u003d permission.applyUMask(umask);\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       @Override\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n         throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FILE_DEFAULT_PERM;\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      @Override\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "23/08/12 12:18 PM",
      "commitNameOld": "4f8e1f779b196ca83c49118c283286e3ee9ec386",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n       UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d \n       (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FsPermission.getDefault();\n     permission \u003d permission.applyUMask(umask);\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n+      @Override\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n         throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      @Override\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "322f9ac7b152713ae012cbeaa7ec6dc01860db15": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-6727. Remove UnresolvedLinkException from public FileContext APIs. Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@940527 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/10 10:36 AM",
      "commitName": "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-6727. Remove UnresolvedLinkException from public FileContext APIs. Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@940527 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/05/10 10:36 AM",
          "commitName": "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
          "commitAuthor": "Thomas White",
          "commitDateOld": "01/05/10 2:08 PM",
          "commitNameOld": "fe49f6e47391ff3eb6372dc5acc592bbc2e8f683",
          "commitAuthorOld": "Jakob Homan",
          "daysBetweenCommits": 1.85,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n-      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n+      UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d \n       (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FsPermission.getDefault();\n     permission \u003d permission.applyUMask(umask);\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n-        throws IOException, UnresolvedLinkException {\n+        throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, UnresolvedLinkException, IOException]",
            "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6727. Remove UnresolvedLinkException from public FileContext APIs. Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@940527 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/05/10 10:36 AM",
          "commitName": "322f9ac7b152713ae012cbeaa7ec6dc01860db15",
          "commitAuthor": "Thomas White",
          "commitDateOld": "01/05/10 2:08 PM",
          "commitNameOld": "fe49f6e47391ff3eb6372dc5acc592bbc2e8f683",
          "commitAuthorOld": "Jakob Homan",
          "daysBetweenCommits": 1.85,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   public FSDataOutputStream create(final Path f,\n       final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n       throws AccessControlException, FileAlreadyExistsException,\n       FileNotFoundException, ParentNotDirectoryException,\n-      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n+      UnsupportedFileSystemException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d \n       (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FsPermission.getDefault();\n     permission \u003d permission.applyUMask(umask);\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n-        throws IOException, UnresolvedLinkException {\n+        throws IOException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc": {
      "type": "Yexceptionschange",
      "commitMessage": "   HADOOP-6537 Declare more detailed exceptions in FileContext and AbstractFileSystem\n   (Suresh Srinivas via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@918309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/10 6:48 PM",
      "commitName": "1ab5aa5279fc0ee9c27c859b57f6b017c27459bc",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "16/02/10 1:43 PM",
      "commitNameOld": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public FSDataOutputStream create(final Path f,\n-                                   final EnumSet\u003cCreateFlag\u003e createFlag,\n-                                   Options.CreateOpts... opts)\n-    throws IOException {\n+      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n+      throws AccessControlException, FileAlreadyExistsException,\n+      FileNotFoundException, ParentNotDirectoryException,\n+      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n     Path absF \u003d fixRelativePart(f);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d \n       (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FsPermission.getDefault();\n     permission \u003d permission.applyUMask(umask);\n \n     final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n     return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n       public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n         throws IOException, UnresolvedLinkException {\n         return fs.create(p, createFlag, updatedOpts);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n      final EnumSet\u003cCreateFlag\u003e createFlag, Options.CreateOpts... opts)\n      throws AccessControlException, FileAlreadyExistsException,\n      FileNotFoundException, ParentNotDirectoryException,\n      UnsupportedFileSystemException, UnresolvedLinkException, IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException, UnresolvedLinkException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[AccessControlException, FileAlreadyExistsException, FileNotFoundException, ParentNotDirectoryException, UnsupportedFileSystemException, UnresolvedLinkException, IOException]"
      }
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "15/01/10 4:44 PM",
      "commitNameOld": "a90d3205d2a23945eaab8b756cfbeeb4377c3c04",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 31.87,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   public FSDataOutputStream create(final Path f,\n                                    final EnumSet\u003cCreateFlag\u003e createFlag,\n                                    Options.CreateOpts... opts)\n     throws IOException {\n     Path absF \u003d fixRelativePart(f);\n-    AbstractFileSystem fsOfAbsF \u003d getFSofPath(absF);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n     // AbstractFileSystem#create\n \n     CreateOpts.Perms permOpt \u003d \n       (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n     FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                       FsPermission.getDefault();\n     permission \u003d permission.applyUMask(umask);\n \n-    CreateOpts[] updatedOpts \u003d \n+    final CreateOpts[] updatedOpts \u003d \n                       CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n-    return fsOfAbsF.create(absF, createFlag, updatedOpts);\n+    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n+      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n+        throws IOException, UnresolvedLinkException {\n+        return fs.create(p, createFlag, updatedOpts);\n+      }\n+    }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n                                   final EnumSet\u003cCreateFlag\u003e createFlag,\n                                   Options.CreateOpts... opts)\n    throws IOException {\n    Path absF \u003d fixRelativePart(f);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    final CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return new FSLinkResolver\u003cFSDataOutputStream\u003e() {\n      public FSDataOutputStream next(final AbstractFileSystem fs, final Path p) \n        throws IOException, UnresolvedLinkException {\n        return fs.create(p, createFlag, updatedOpts);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "3f371a0a644181b204111ee4e12c995fc7b5e5f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 3:24 PM",
      "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/10/09 3:24 PM",
          "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "07/10/09 10:07 AM",
          "commitNameOld": "64f537da0a216055d5b6eae49a2a9129189cacbf",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 23.22,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,21 @@\n   public FSDataOutputStream create(final Path f,\n-                                    final EnumSet\u003cCreateFlag\u003e createFlag,\n-                                    CreateOpts... opts)\n+                                   final EnumSet\u003cCreateFlag\u003e createFlag,\n+                                   Options.CreateOpts... opts)\n     throws IOException {\n     Path absF \u003d fixRelativePart(f);\n-    FileSystem fsOfAbsF \u003d getFSofPath(absF);\n+    AbstractFileSystem fsOfAbsF \u003d getFSofPath(absF);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n-    // FileSystem#create\n+    // AbstractFileSystem#create\n \n-    FsPermission permission \u003d null;\n+    CreateOpts.Perms permOpt \u003d \n+      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n+    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n+                                      FsPermission.getDefault();\n+    permission \u003d permission.applyUMask(umask);\n \n-    if (opts !\u003d null) {\n-      for (int i \u003d 0; i \u003c opts.length; ++i) {\n-        if (opts[i] instanceof CreateOpts.Perms) {\n-          if (permission !\u003d null) \n-            throw new IllegalArgumentException(\"multiple permissions varargs\");\n-          permission \u003d ((CreateOpts.Perms) opts[i]).getValue();\n-          opts[i] \u003d CreateOpts.perms(permission.applyUMask(umask));\n-        }\n-      }\n-    }\n-\n-    CreateOpts[] theOpts \u003d opts;\n-    if (permission \u003d\u003d null) { // no permission was set\n-      CreateOpts[] newOpts \u003d new CreateOpts[opts.length + 1];\n-      System.arraycopy(opts, 0, newOpts, 0, opts.length);\n-      newOpts[opts.length] \u003d \n-        CreateOpts.perms(FsPermission.getDefault().applyUMask(umask));\n-      theOpts \u003d newOpts;\n-    }\n-    return fsOfAbsF.primitiveCreate(absF, createFlag, theOpts);\n+    CreateOpts[] updatedOpts \u003d \n+                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n+    return fsOfAbsF.create(absF, createFlag, updatedOpts);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(final Path f,\n                                   final EnumSet\u003cCreateFlag\u003e createFlag,\n                                   Options.CreateOpts... opts)\n    throws IOException {\n    Path absF \u003d fixRelativePart(f);\n    AbstractFileSystem fsOfAbsF \u003d getFSofPath(absF);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return fsOfAbsF.create(absF, createFlag, updatedOpts);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "[f-Path(modifiers-final), createFlag-EnumSet\u003cCreateFlag\u003e(modifiers-final), opts-CreateOpts]",
            "newValue": "[f-Path(modifiers-final), createFlag-EnumSet\u003cCreateFlag\u003e(modifiers-final), opts-Options.CreateOpts]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Hadoop-6223. Add new file system interface AbstractFileSystem with implementation of some file systems that delegate to old FileSystem. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831475 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/10/09 3:24 PM",
          "commitName": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "07/10/09 10:07 AM",
          "commitNameOld": "64f537da0a216055d5b6eae49a2a9129189cacbf",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 23.22,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,21 @@\n   public FSDataOutputStream create(final Path f,\n-                                    final EnumSet\u003cCreateFlag\u003e createFlag,\n-                                    CreateOpts... opts)\n+                                   final EnumSet\u003cCreateFlag\u003e createFlag,\n+                                   Options.CreateOpts... opts)\n     throws IOException {\n     Path absF \u003d fixRelativePart(f);\n-    FileSystem fsOfAbsF \u003d getFSofPath(absF);\n+    AbstractFileSystem fsOfAbsF \u003d getFSofPath(absF);\n \n     // If one of the options is a permission, extract it \u0026 apply umask\n     // If not, add a default Perms and apply umask;\n-    // FileSystem#create\n+    // AbstractFileSystem#create\n \n-    FsPermission permission \u003d null;\n+    CreateOpts.Perms permOpt \u003d \n+      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n+    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n+                                      FsPermission.getDefault();\n+    permission \u003d permission.applyUMask(umask);\n \n-    if (opts !\u003d null) {\n-      for (int i \u003d 0; i \u003c opts.length; ++i) {\n-        if (opts[i] instanceof CreateOpts.Perms) {\n-          if (permission !\u003d null) \n-            throw new IllegalArgumentException(\"multiple permissions varargs\");\n-          permission \u003d ((CreateOpts.Perms) opts[i]).getValue();\n-          opts[i] \u003d CreateOpts.perms(permission.applyUMask(umask));\n-        }\n-      }\n-    }\n-\n-    CreateOpts[] theOpts \u003d opts;\n-    if (permission \u003d\u003d null) { // no permission was set\n-      CreateOpts[] newOpts \u003d new CreateOpts[opts.length + 1];\n-      System.arraycopy(opts, 0, newOpts, 0, opts.length);\n-      newOpts[opts.length] \u003d \n-        CreateOpts.perms(FsPermission.getDefault().applyUMask(umask));\n-      theOpts \u003d newOpts;\n-    }\n-    return fsOfAbsF.primitiveCreate(absF, createFlag, theOpts);\n+    CreateOpts[] updatedOpts \u003d \n+                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n+    return fsOfAbsF.create(absF, createFlag, updatedOpts);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(final Path f,\n                                   final EnumSet\u003cCreateFlag\u003e createFlag,\n                                   Options.CreateOpts... opts)\n    throws IOException {\n    Path absF \u003d fixRelativePart(f);\n    AbstractFileSystem fsOfAbsF \u003d getFSofPath(absF);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // AbstractFileSystem#create\n\n    CreateOpts.Perms permOpt \u003d \n      (CreateOpts.Perms) CreateOpts.getOpt(CreateOpts.Perms.class, opts);\n    FsPermission permission \u003d (permOpt !\u003d null) ? permOpt.getValue() :\n                                      FsPermission.getDefault();\n    permission \u003d permission.applyUMask(umask);\n\n    CreateOpts[] updatedOpts \u003d \n                      CreateOpts.setOpt(CreateOpts.perms(permission), opts);\n    return fsOfAbsF.create(absF, createFlag, updatedOpts);\n  }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6271. Add recursive and non recursive create and mkdir to FileContext. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816818 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/09 5:03 PM",
      "commitName": "fa48d9ea17e754e7bf2d5d0f71d98bfa94d177e0",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "18/09/09 2:52 PM",
      "commitNameOld": "1695ecd1a3bbdef1b6bb5d0c9246c42ec3e9a20f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,34 @@\n   public FSDataOutputStream create(final Path f,\n                                     final EnumSet\u003cCreateFlag\u003e createFlag,\n                                     CreateOpts... opts)\n     throws IOException {\n     Path absF \u003d fixRelativePart(f);\n     FileSystem fsOfAbsF \u003d getFSofPath(absF);\n \n-    int bufferSize \u003d -1;\n-    short replication \u003d -1;\n-    long blockSize \u003d -1;\n-    int bytesPerChecksum \u003d -1;\n+    // If one of the options is a permission, extract it \u0026 apply umask\n+    // If not, add a default Perms and apply umask;\n+    // FileSystem#create\n+\n     FsPermission permission \u003d null;\n-    Progressable progress \u003d null;\n- \n-    for (CreateOpts iOpt : opts) {\n-      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n-        if (blockSize !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+\n+    if (opts !\u003d null) {\n+      for (int i \u003d 0; i \u003c opts.length; ++i) {\n+        if (opts[i] instanceof CreateOpts.Perms) {\n+          if (permission !\u003d null) \n+            throw new IllegalArgumentException(\"multiple permissions varargs\");\n+          permission \u003d ((CreateOpts.Perms) opts[i]).getValue();\n+          opts[i] \u003d CreateOpts.perms(permission.applyUMask(umask));\n         }\n-        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n-      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n-        if (bufferSize !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n-        }\n-        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n-      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n-        if (replication !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n-        }\n-        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n-      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n-        if (bytesPerChecksum !\u003d -1) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n-        }\n-        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n-      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n-        if (permission !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n-        }\n-        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n-      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n-        if (progress !\u003d null) {\n-          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n-        }\n-        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n-      } else {\n-        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n-            iOpt.getClass().getName());\n       }\n     }\n-    if (blockSize % bytesPerChecksum !\u003d 0) {\n-      throw new IllegalArgumentException(\n-          \"blockSize should be a multiple of checksumsize\");\n-    }\n-    \n-    FsServerDefaults ssDef \u003d fsOfAbsF.getServerDefaults();\n-    \n-    if (blockSize \u003d\u003d -1) {\n-      blockSize \u003d ssDef.getBlockSize();\n-    }\n-    if (bufferSize \u003d\u003d -1) {\n-      bufferSize \u003d ssDef.getFileBufferSize();\n-    }\n-    if (replication \u003d\u003d -1) {\n-      replication \u003d ssDef.getReplication();\n-    }\n-    if (bytesPerChecksum \u003d\u003d -1) {\n-      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n-    }\n-    if (permission \u003d\u003d null) {\n-      permission \u003d FsPermission.getDefault();\n-    }\n \n-    FsPermission absPerms \u003d (permission \u003d\u003d null ? \n-        FsPermission.getDefault() : permission).applyUMask(umask);\n-\n-    return fsOfAbsF.primitiveCreate(absF, absPerms, createFlag,\n-                bufferSize, replication, blockSize, progress, bytesPerChecksum);\n+    CreateOpts[] theOpts \u003d opts;\n+    if (permission \u003d\u003d null) { // no permission was set\n+      CreateOpts[] newOpts \u003d new CreateOpts[opts.length + 1];\n+      System.arraycopy(opts, 0, newOpts, 0, opts.length);\n+      newOpts[opts.length] \u003d \n+        CreateOpts.perms(FsPermission.getDefault().applyUMask(umask));\n+      theOpts \u003d newOpts;\n+    }\n+    return fsOfAbsF.primitiveCreate(absF, createFlag, theOpts);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n                                    final EnumSet\u003cCreateFlag\u003e createFlag,\n                                    CreateOpts... opts)\n    throws IOException {\n    Path absF \u003d fixRelativePart(f);\n    FileSystem fsOfAbsF \u003d getFSofPath(absF);\n\n    // If one of the options is a permission, extract it \u0026 apply umask\n    // If not, add a default Perms and apply umask;\n    // FileSystem#create\n\n    FsPermission permission \u003d null;\n\n    if (opts !\u003d null) {\n      for (int i \u003d 0; i \u003c opts.length; ++i) {\n        if (opts[i] instanceof CreateOpts.Perms) {\n          if (permission !\u003d null) \n            throw new IllegalArgumentException(\"multiple permissions varargs\");\n          permission \u003d ((CreateOpts.Perms) opts[i]).getValue();\n          opts[i] \u003d CreateOpts.perms(permission.applyUMask(umask));\n        }\n      }\n    }\n\n    CreateOpts[] theOpts \u003d opts;\n    if (permission \u003d\u003d null) { // no permission was set\n      CreateOpts[] newOpts \u003d new CreateOpts[opts.length + 1];\n      System.arraycopy(opts, 0, newOpts, 0, opts.length);\n      newOpts[opts.length] \u003d \n        CreateOpts.perms(FsPermission.getDefault().applyUMask(umask));\n      theOpts \u003d newOpts;\n    }\n    return fsOfAbsF.primitiveCreate(absF, createFlag, theOpts);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "0294c49df60150bd9b363af5cfbc312222c12c69": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4952. Add new improved file system interface FileContext for the application writer. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816398 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/09 3:27 PM",
      "commitName": "0294c49df60150bd9b363af5cfbc312222c12c69",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,79 @@\n+  public FSDataOutputStream create(final Path f,\n+                                    final EnumSet\u003cCreateFlag\u003e createFlag,\n+                                    CreateOpts... opts)\n+    throws IOException {\n+    Path absF \u003d fixRelativePart(f);\n+    FileSystem fsOfAbsF \u003d getFSofPath(absF);\n+\n+    int bufferSize \u003d -1;\n+    short replication \u003d -1;\n+    long blockSize \u003d -1;\n+    int bytesPerChecksum \u003d -1;\n+    FsPermission permission \u003d null;\n+    Progressable progress \u003d null;\n+ \n+    for (CreateOpts iOpt : opts) {\n+      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n+        if (blockSize !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n+      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n+        if (bufferSize !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n+      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n+        if (replication !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n+      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n+        if (bytesPerChecksum !\u003d -1) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n+      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n+        if (permission !\u003d null) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n+      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n+        if (progress !\u003d null) {\n+          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n+        }\n+        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n+      } else {\n+        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n+            iOpt.getClass().getName());\n+      }\n+    }\n+    if (blockSize % bytesPerChecksum !\u003d 0) {\n+      throw new IllegalArgumentException(\n+          \"blockSize should be a multiple of checksumsize\");\n+    }\n+    \n+    FsServerDefaults ssDef \u003d fsOfAbsF.getServerDefaults();\n+    \n+    if (blockSize \u003d\u003d -1) {\n+      blockSize \u003d ssDef.getBlockSize();\n+    }\n+    if (bufferSize \u003d\u003d -1) {\n+      bufferSize \u003d ssDef.getFileBufferSize();\n+    }\n+    if (replication \u003d\u003d -1) {\n+      replication \u003d ssDef.getReplication();\n+    }\n+    if (bytesPerChecksum \u003d\u003d -1) {\n+      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n+    }\n+    if (permission \u003d\u003d null) {\n+      permission \u003d FsPermission.getDefault();\n+    }\n+\n+    FsPermission absPerms \u003d (permission \u003d\u003d null ? \n+        FsPermission.getDefault() : permission).applyUMask(umask);\n+\n+    return fsOfAbsF.primitiveCreate(absF, absPerms, createFlag,\n+                bufferSize, replication, blockSize, progress, bytesPerChecksum);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(final Path f,\n                                    final EnumSet\u003cCreateFlag\u003e createFlag,\n                                    CreateOpts... opts)\n    throws IOException {\n    Path absF \u003d fixRelativePart(f);\n    FileSystem fsOfAbsF \u003d getFSofPath(absF);\n\n    int bufferSize \u003d -1;\n    short replication \u003d -1;\n    long blockSize \u003d -1;\n    int bytesPerChecksum \u003d -1;\n    FsPermission permission \u003d null;\n    Progressable progress \u003d null;\n \n    for (CreateOpts iOpt : opts) {\n      if (CreateOpts.BlockSize.class.isInstance(iOpt)) {\n        if (blockSize !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        blockSize \u003d ((CreateOpts.BlockSize) iOpt).getValue();\n      } else if (CreateOpts.BufferSize.class.isInstance(iOpt)) {\n        if (bufferSize !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        bufferSize \u003d ((CreateOpts.BufferSize) iOpt).getValue();\n      } else if (CreateOpts.ReplicationFactor.class.isInstance(iOpt)) {\n        if (replication !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        replication \u003d ((CreateOpts.ReplicationFactor) iOpt).getValue();\n      } else if (CreateOpts.BytesPerChecksum.class.isInstance(iOpt)) {\n        if (bytesPerChecksum !\u003d -1) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        bytesPerChecksum \u003d ((CreateOpts.BytesPerChecksum) iOpt).getValue();\n      } else if (CreateOpts.Perms.class.isInstance(iOpt)) {\n        if (permission !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        permission \u003d ((CreateOpts.Perms) iOpt).getValue();\n      } else if (CreateOpts.Progress.class.isInstance(iOpt)) {\n        if (progress !\u003d null) {\n          throw new IllegalArgumentException(\"multiple varargs of same kind\");\n        }\n        progress \u003d ((CreateOpts.Progress) iOpt).getValue();\n      } else {\n        throw new IllegalArgumentException(\"Unkown CreateOpts of type \" +\n            iOpt.getClass().getName());\n      }\n    }\n    if (blockSize % bytesPerChecksum !\u003d 0) {\n      throw new IllegalArgumentException(\n          \"blockSize should be a multiple of checksumsize\");\n    }\n    \n    FsServerDefaults ssDef \u003d fsOfAbsF.getServerDefaults();\n    \n    if (blockSize \u003d\u003d -1) {\n      blockSize \u003d ssDef.getBlockSize();\n    }\n    if (bufferSize \u003d\u003d -1) {\n      bufferSize \u003d ssDef.getFileBufferSize();\n    }\n    if (replication \u003d\u003d -1) {\n      replication \u003d ssDef.getReplication();\n    }\n    if (bytesPerChecksum \u003d\u003d -1) {\n      bytesPerChecksum \u003d ssDef.getBytesPerChecksum();\n    }\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getDefault();\n    }\n\n    FsPermission absPerms \u003d (permission \u003d\u003d null ? \n        FsPermission.getDefault() : permission).applyUMask(umask);\n\n    return fsOfAbsF.primitiveCreate(absF, absPerms, createFlag,\n                bufferSize, replication, blockSize, progress, bytesPerChecksum);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}