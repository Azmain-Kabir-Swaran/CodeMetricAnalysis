{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SynthUtils.java",
  "functionName": "getLogNormalDist",
  "functionId": "getLogNormalDist___rand-JDKRandomGenerator__mean-double__stdDev-double",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthUtils.java",
  "functionStartLine": 76,
  "functionEndLine": 100,
  "numCommitsSeen": 1,
  "timeTaken": 743,
  "changeHistory": [
    "de69d6e81128470dd5d2fd865d4b3a79188f740b"
  ],
  "changeHistoryShort": {
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,25 @@\n+  public static LogNormalDistribution getLogNormalDist(JDKRandomGenerator rand,\n+      double mean, double stdDev) {\n+\n+    if (mean \u003c\u003d 0) {\n+      return null;\n+    }\n+\n+    // set default for missing param\n+    if (stdDev \u003d\u003d 0) {\n+      stdDev \u003d mean / 6;\n+    }\n+\n+    // derive lognormal parameters for X \u003d LogNormal(mu, sigma)\n+    // sigma^2 \u003d ln (1+Var[X]/(E[X])^2)\n+    // mu \u003d ln(E[X]) - 1/2 * sigma^2\n+    double var \u003d stdDev * stdDev;\n+    double sigmasq \u003d Math.log1p(var / (mean * mean));\n+    double sigma \u003d Math.sqrt(sigmasq);\n+    double mu \u003d Math.log(mean) - 0.5 * sigmasq;\n+\n+    LogNormalDistribution ret \u003d new LogNormalDistribution(mu, sigma,\n+        LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n+    ret.reseedRandomGenerator(rand.nextLong());\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static LogNormalDistribution getLogNormalDist(JDKRandomGenerator rand,\n      double mean, double stdDev) {\n\n    if (mean \u003c\u003d 0) {\n      return null;\n    }\n\n    // set default for missing param\n    if (stdDev \u003d\u003d 0) {\n      stdDev \u003d mean / 6;\n    }\n\n    // derive lognormal parameters for X \u003d LogNormal(mu, sigma)\n    // sigma^2 \u003d ln (1+Var[X]/(E[X])^2)\n    // mu \u003d ln(E[X]) - 1/2 * sigma^2\n    double var \u003d stdDev * stdDev;\n    double sigmasq \u003d Math.log1p(var / (mean * mean));\n    double sigma \u003d Math.sqrt(sigmasq);\n    double mu \u003d Math.log(mean) - 0.5 * sigmasq;\n\n    LogNormalDistribution ret \u003d new LogNormalDistribution(mu, sigma,\n        LogNormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n    ret.reseedRandomGenerator(rand.nextLong());\n    return ret;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthUtils.java"
    }
  }
}