{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RandomWriter.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/RandomWriter.java",
  "functionStartLine": 236,
  "functionEndLine": 290,
  "numCommitsSeen": 7,
  "timeTaken": 5476,
  "changeHistory": [
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5800. Use Job#getInstance instead of deprecated constructors. (aajisaka)\n",
      "commitDate": "03/02/15 2:30 PM",
      "commitName": "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/11/11 5:24 PM",
      "commitNameOld": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1172.88,
      "commitsBetweenForRepo": 7871,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public int run(String[] args) throws Exception {    \n     if (args.length \u003d\u003d 0) {\n       System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n       ToolRunner.printGenericCommandUsage(System.out);\n       return 2;\n     }\n     \n     Path outDir \u003d new Path(args[0]);\n     Configuration conf \u003d getConf();\n     JobClient client \u003d new JobClient(conf);\n     ClusterStatus cluster \u003d client.getClusterStatus();\n     int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n     long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n                                              1*1024*1024*1024);\n     if (numBytesToWritePerMap \u003d\u003d 0) {\n       System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n       return -2;\n     }\n     long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n          numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n     int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n     if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n       numMaps \u003d 1;\n       conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n     }\n     conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n \n-    Job job \u003d new Job(conf);\n+    Job job \u003d Job.getInstance(conf);\n     \n     job.setJarByClass(RandomWriter.class);\n     job.setJobName(\"random-writer\");\n     FileOutputFormat.setOutputPath(job, outDir);\n     job.setOutputKeyClass(BytesWritable.class);\n     job.setOutputValueClass(BytesWritable.class);\n     job.setInputFormatClass(RandomInputFormat.class);\n     job.setMapperClass(RandomMapper.class);        \n     job.setReducerClass(Reducer.class);\n     job.setOutputFormatClass(SequenceFileOutputFormat.class);\n     \n     System.out.println(\"Running \" + numMaps + \" maps.\");\n     \n     // reducer NONE\n     job.setNumReduceTasks(0);\n     \n     Date startTime \u003d new Date();\n     System.out.println(\"Job started: \" + startTime);\n     int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n     Date endTime \u003d new Date();\n     System.out.println(\"Job ended: \" + endTime);\n     System.out.println(\"The job took \" + \n                        (endTime.getTime() - startTime.getTime()) /1000 + \n                        \" seconds.\");\n     \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {    \n    if (args.length \u003d\u003d 0) {\n      System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n      ToolRunner.printGenericCommandUsage(System.out);\n      return 2;\n    }\n    \n    Path outDir \u003d new Path(args[0]);\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n    long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n                                             1*1024*1024*1024);\n    if (numBytesToWritePerMap \u003d\u003d 0) {\n      System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n         numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n    int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n      numMaps \u003d 1;\n      conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n    }\n    conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n\n    Job job \u003d Job.getInstance(conf);\n    \n    job.setJarByClass(RandomWriter.class);\n    job.setJobName(\"random-writer\");\n    FileOutputFormat.setOutputPath(job, outDir);\n    job.setOutputKeyClass(BytesWritable.class);\n    job.setOutputValueClass(BytesWritable.class);\n    job.setInputFormatClass(RandomInputFormat.class);\n    job.setMapperClass(RandomMapper.class);        \n    job.setReducerClass(Reducer.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n    \n    System.out.println(\"Running \" + numMaps + \" maps.\");\n    \n    // reducer NONE\n    job.setNumReduceTasks(0);\n    \n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n    Date endTime \u003d new Date();\n    System.out.println(\"Job ended: \" + endTime);\n    System.out.println(\"The job took \" + \n                       (endTime.getTime() - startTime.getTime()) /1000 + \n                       \" seconds.\");\n    \n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/RandomWriter.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {    \n    if (args.length \u003d\u003d 0) {\n      System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n      ToolRunner.printGenericCommandUsage(System.out);\n      return 2;\n    }\n    \n    Path outDir \u003d new Path(args[0]);\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n    long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n                                             1*1024*1024*1024);\n    if (numBytesToWritePerMap \u003d\u003d 0) {\n      System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n         numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n    int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n      numMaps \u003d 1;\n      conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n    }\n    conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n\n    Job job \u003d new Job(conf);\n    \n    job.setJarByClass(RandomWriter.class);\n    job.setJobName(\"random-writer\");\n    FileOutputFormat.setOutputPath(job, outDir);\n    job.setOutputKeyClass(BytesWritable.class);\n    job.setOutputValueClass(BytesWritable.class);\n    job.setInputFormatClass(RandomInputFormat.class);\n    job.setMapperClass(RandomMapper.class);        \n    job.setReducerClass(Reducer.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n    \n    System.out.println(\"Running \" + numMaps + \" maps.\");\n    \n    // reducer NONE\n    job.setNumReduceTasks(0);\n    \n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n    Date endTime \u003d new Date();\n    System.out.println(\"Job ended: \" + endTime);\n    System.out.println(\"The job took \" + \n                       (endTime.getTime() - startTime.getTime()) /1000 + \n                       \" seconds.\");\n    \n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/RandomWriter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/RandomWriter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/RandomWriter.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {    \n    if (args.length \u003d\u003d 0) {\n      System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n      ToolRunner.printGenericCommandUsage(System.out);\n      return 2;\n    }\n    \n    Path outDir \u003d new Path(args[0]);\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n    long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n                                             1*1024*1024*1024);\n    if (numBytesToWritePerMap \u003d\u003d 0) {\n      System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n         numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n    int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n      numMaps \u003d 1;\n      conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n    }\n    conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n\n    Job job \u003d new Job(conf);\n    \n    job.setJarByClass(RandomWriter.class);\n    job.setJobName(\"random-writer\");\n    FileOutputFormat.setOutputPath(job, outDir);\n    job.setOutputKeyClass(BytesWritable.class);\n    job.setOutputValueClass(BytesWritable.class);\n    job.setInputFormatClass(RandomInputFormat.class);\n    job.setMapperClass(RandomMapper.class);        \n    job.setReducerClass(Reducer.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n    \n    System.out.println(\"Running \" + numMaps + \" maps.\");\n    \n    // reducer NONE\n    job.setNumReduceTasks(0);\n    \n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n    Date endTime \u003d new Date();\n    System.out.println(\"Job ended: \" + endTime);\n    System.out.println(\"The job took \" + \n                       (endTime.getTime() - startTime.getTime()) /1000 + \n                       \" seconds.\");\n    \n    return ret;\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/RandomWriter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/RandomWriter.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/RandomWriter.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {    \n    if (args.length \u003d\u003d 0) {\n      System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n      ToolRunner.printGenericCommandUsage(System.out);\n      return 2;\n    }\n    \n    Path outDir \u003d new Path(args[0]);\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n    long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n                                             1*1024*1024*1024);\n    if (numBytesToWritePerMap \u003d\u003d 0) {\n      System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n         numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n    int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n      numMaps \u003d 1;\n      conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n    }\n    conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n\n    Job job \u003d new Job(conf);\n    \n    job.setJarByClass(RandomWriter.class);\n    job.setJobName(\"random-writer\");\n    FileOutputFormat.setOutputPath(job, outDir);\n    job.setOutputKeyClass(BytesWritable.class);\n    job.setOutputValueClass(BytesWritable.class);\n    job.setInputFormatClass(RandomInputFormat.class);\n    job.setMapperClass(RandomMapper.class);        \n    job.setReducerClass(Reducer.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n    \n    System.out.println(\"Running \" + numMaps + \" maps.\");\n    \n    // reducer NONE\n    job.setNumReduceTasks(0);\n    \n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n    Date endTime \u003d new Date();\n    System.out.println(\"Job ended: \" + endTime);\n    System.out.println(\"The job took \" + \n                       (endTime.getTime() - startTime.getTime()) /1000 + \n                       \" seconds.\");\n    \n    return ret;\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/RandomWriter.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/RandomWriter.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/RandomWriter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,55 @@\n+  public int run(String[] args) throws Exception {    \n+    if (args.length \u003d\u003d 0) {\n+      System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n+      ToolRunner.printGenericCommandUsage(System.out);\n+      return 2;\n+    }\n+    \n+    Path outDir \u003d new Path(args[0]);\n+    Configuration conf \u003d getConf();\n+    JobClient client \u003d new JobClient(conf);\n+    ClusterStatus cluster \u003d client.getClusterStatus();\n+    int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n+    long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n+                                             1*1024*1024*1024);\n+    if (numBytesToWritePerMap \u003d\u003d 0) {\n+      System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n+      return -2;\n+    }\n+    long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n+         numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n+    int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n+    if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n+      numMaps \u003d 1;\n+      conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n+    }\n+    conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n+\n+    Job job \u003d new Job(conf);\n+    \n+    job.setJarByClass(RandomWriter.class);\n+    job.setJobName(\"random-writer\");\n+    FileOutputFormat.setOutputPath(job, outDir);\n+    job.setOutputKeyClass(BytesWritable.class);\n+    job.setOutputValueClass(BytesWritable.class);\n+    job.setInputFormatClass(RandomInputFormat.class);\n+    job.setMapperClass(RandomMapper.class);        \n+    job.setReducerClass(Reducer.class);\n+    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n+    \n+    System.out.println(\"Running \" + numMaps + \" maps.\");\n+    \n+    // reducer NONE\n+    job.setNumReduceTasks(0);\n+    \n+    Date startTime \u003d new Date();\n+    System.out.println(\"Job started: \" + startTime);\n+    int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n+    Date endTime \u003d new Date();\n+    System.out.println(\"Job ended: \" + endTime);\n+    System.out.println(\"The job took \" + \n+                       (endTime.getTime() - startTime.getTime()) /1000 + \n+                       \" seconds.\");\n+    \n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {    \n    if (args.length \u003d\u003d 0) {\n      System.out.println(\"Usage: writer \u003cout-dir\u003e\");\n      ToolRunner.printGenericCommandUsage(System.out);\n      return 2;\n    }\n    \n    Path outDir \u003d new Path(args[0]);\n    Configuration conf \u003d getConf();\n    JobClient client \u003d new JobClient(conf);\n    ClusterStatus cluster \u003d client.getClusterStatus();\n    int numMapsPerHost \u003d conf.getInt(MAPS_PER_HOST, 10);\n    long numBytesToWritePerMap \u003d conf.getLong(BYTES_PER_MAP,\n                                             1*1024*1024*1024);\n    if (numBytesToWritePerMap \u003d\u003d 0) {\n      System.err.println(\"Cannot have\" + BYTES_PER_MAP + \" set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite \u003d conf.getLong(TOTAL_BYTES, \n         numMapsPerHost*numBytesToWritePerMap*cluster.getTaskTrackers());\n    int numMaps \u003d (int) (totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps \u003d\u003d 0 \u0026\u0026 totalBytesToWrite \u003e 0) {\n      numMaps \u003d 1;\n      conf.setLong(BYTES_PER_MAP, totalBytesToWrite);\n    }\n    conf.setInt(MRJobConfig.NUM_MAPS, numMaps);\n\n    Job job \u003d new Job(conf);\n    \n    job.setJarByClass(RandomWriter.class);\n    job.setJobName(\"random-writer\");\n    FileOutputFormat.setOutputPath(job, outDir);\n    job.setOutputKeyClass(BytesWritable.class);\n    job.setOutputValueClass(BytesWritable.class);\n    job.setInputFormatClass(RandomInputFormat.class);\n    job.setMapperClass(RandomMapper.class);        \n    job.setReducerClass(Reducer.class);\n    job.setOutputFormatClass(SequenceFileOutputFormat.class);\n    \n    System.out.println(\"Running \" + numMaps + \" maps.\");\n    \n    // reducer NONE\n    job.setNumReduceTasks(0);\n    \n    Date startTime \u003d new Date();\n    System.out.println(\"Job started: \" + startTime);\n    int ret \u003d job.waitForCompletion(true) ? 0 : 1;\n    Date endTime \u003d new Date();\n    System.out.println(\"Job ended: \" + endTime);\n    System.out.println(\"The job took \" + \n                       (endTime.getTime() - startTime.getTime()) /1000 + \n                       \" seconds.\");\n    \n    return ret;\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/RandomWriter.java"
    }
  }
}