{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TestMojo.java",
  "functionName": "execute",
  "functionId": "execute",
  "sourceFilePath": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/cmakebuilder/TestMojo.java",
  "functionStartLine": 287,
  "functionEndLine": 393,
  "numCommitsSeen": 4,
  "timeTaken": 712,
  "changeHistory": [
    "5af5f9575a906324e5a6ca442217bdaa8ec42fa0",
    "b1ed28fa77cb2fab80c54f9dfeb5d8b7139eca34"
  ],
  "changeHistoryShort": {
    "5af5f9575a906324e5a6ca442217bdaa8ec42fa0": "Ybodychange",
    "b1ed28fa77cb2fab80c54f9dfeb5d8b7139eca34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5af5f9575a906324e5a6ca442217bdaa8ec42fa0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12714. Fix hadoop-mapreduce-client-nativetask unit test which fails because it is not able to open the \"glibc bug spill\" file. (cmccabe)\n",
      "commitDate": "15/01/16 1:53 PM",
      "commitName": "5af5f9575a906324e5a6ca442217bdaa8ec42fa0",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "15/01/16 12:29 PM",
      "commitNameOld": "b2c155f810888480d058512a326a5083e1bb4eaa",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,107 @@\n   public void execute() throws MojoExecutionException {\n     if (testName \u003d\u003d null) {\n       testName \u003d binary.getName();\n     }\n     validatePlatform();\n     validateParameters();\n     if (!shouldRunTest()) {\n       return;\n     }\n     if (!results.isDirectory()) {\n       if (!results.mkdirs()) {\n         throw new MojoExecutionException(\"Failed to create \" +\n             \"output directory \u0027\" + results + \"\u0027!\");\n       }\n     }\n     List\u003cString\u003e cmd \u003d new LinkedList\u003cString\u003e();\n     cmd.add(binary.getAbsolutePath());\n \n     getLog().info(\"-------------------------------------------------------\");\n     getLog().info(\" C M A K E B U I L D E R    T E S T\");\n     getLog().info(\"-------------------------------------------------------\");\n     StringBuilder bld \u003d new StringBuilder();\n     bld.append(testName).append(\": running \");\n     bld.append(binary.getAbsolutePath());\n     for (String entry : args) {\n       cmd.add(entry);\n       bld.append(\" \").append(entry);\n     }\n     getLog().info(bld.toString());\n     ProcessBuilder pb \u003d new ProcessBuilder(cmd);\n     Exec.addEnvironment(pb, env);\n+    if (workingDirectory !\u003d null) {\n+      pb.directory(workingDirectory);\n+    }\n     pb.redirectError(new File(results, testName + \".stderr\"));\n     pb.redirectOutput(new File(results, testName + \".stdout\"));\n     getLog().info(\"with extra environment variables \" + Exec.envToString(env));\n     Process proc \u003d null;\n     TestThread testThread \u003d null;\n     int retCode \u003d -1;\n     String status \u003d \"IN_PROGRESS\";\n     try {\n       writeStatusFile(status);\n     } catch (IOException e) {\n       throw new MojoExecutionException(\"Error writing the status file\", e);\n     }\n     long start \u003d System.nanoTime();\n     try {\n       proc \u003d pb.start();\n       testThread \u003d new TestThread(proc);\n       testThread.start();\n       testThread.join(timeout * 1000);\n       if (!testThread.isAlive()) {\n         retCode \u003d testThread.retCode();\n         testThread \u003d null;\n         proc \u003d null;\n       }\n     } catch (IOException e) {\n       throw new MojoExecutionException(\"IOException while executing the test \" +\n           testName, e);\n     } catch (InterruptedException e) {\n       throw new MojoExecutionException(\"Interrupted while executing \" +\n           \"the test \" + testName, e);\n     } finally {\n       if (testThread !\u003d null) {\n         // If the test thread didn\u0027t exit yet, that means the timeout expired.\n         testThread.interrupt();\n         try {\n           testThread.join();\n         } catch (InterruptedException e) {\n           getLog().error(\"Interrupted while waiting for testThread\", e);\n         }\n         status \u003d \"TIMED OUT\";\n       } else if (retCode \u003d\u003d 0) {\n         status \u003d \"SUCCESS\";\n       } else {\n         status \u003d \"ERROR CODE \" + String.valueOf(retCode);\n       }\n       try {\n         writeStatusFile(status);\n       } catch (Exception e) {\n         getLog().error(\"failed to write status file!\", e);\n       }\n       if (proc !\u003d null) {\n         proc.destroy();\n       }\n     }\n     long end \u003d System.nanoTime();\n     getLog().info(\"STATUS: \" + status + \" after \" +\n           TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) +\n           \" millisecond(s).\");\n     getLog().info(\"-------------------------------------------------------\");\n     if (status.equals(\"TIMED_OUT\")) {\n       if (expectedResult.equals(\"success\")) {\n         throw new MojoExecutionException(\"Test \" + binary +\n             \" timed out after \" + timeout + \" seconds!\");\n       }\n     } else if (!status.equals(\"SUCCESS\")) {\n       if (expectedResult.equals(\"success\")) {\n         throw new MojoExecutionException(\"Test \" + binary +\n             \" returned \" + status);\n       }\n     } else if (expectedResult.equals(\"failure\")) {\n       throw new MojoExecutionException(\"Test \" + binary +\n           \" succeeded, but we expected failure!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    if (testName \u003d\u003d null) {\n      testName \u003d binary.getName();\n    }\n    validatePlatform();\n    validateParameters();\n    if (!shouldRunTest()) {\n      return;\n    }\n    if (!results.isDirectory()) {\n      if (!results.mkdirs()) {\n        throw new MojoExecutionException(\"Failed to create \" +\n            \"output directory \u0027\" + results + \"\u0027!\");\n      }\n    }\n    List\u003cString\u003e cmd \u003d new LinkedList\u003cString\u003e();\n    cmd.add(binary.getAbsolutePath());\n\n    getLog().info(\"-------------------------------------------------------\");\n    getLog().info(\" C M A K E B U I L D E R    T E S T\");\n    getLog().info(\"-------------------------------------------------------\");\n    StringBuilder bld \u003d new StringBuilder();\n    bld.append(testName).append(\": running \");\n    bld.append(binary.getAbsolutePath());\n    for (String entry : args) {\n      cmd.add(entry);\n      bld.append(\" \").append(entry);\n    }\n    getLog().info(bld.toString());\n    ProcessBuilder pb \u003d new ProcessBuilder(cmd);\n    Exec.addEnvironment(pb, env);\n    if (workingDirectory !\u003d null) {\n      pb.directory(workingDirectory);\n    }\n    pb.redirectError(new File(results, testName + \".stderr\"));\n    pb.redirectOutput(new File(results, testName + \".stdout\"));\n    getLog().info(\"with extra environment variables \" + Exec.envToString(env));\n    Process proc \u003d null;\n    TestThread testThread \u003d null;\n    int retCode \u003d -1;\n    String status \u003d \"IN_PROGRESS\";\n    try {\n      writeStatusFile(status);\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"Error writing the status file\", e);\n    }\n    long start \u003d System.nanoTime();\n    try {\n      proc \u003d pb.start();\n      testThread \u003d new TestThread(proc);\n      testThread.start();\n      testThread.join(timeout * 1000);\n      if (!testThread.isAlive()) {\n        retCode \u003d testThread.retCode();\n        testThread \u003d null;\n        proc \u003d null;\n      }\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"IOException while executing the test \" +\n          testName, e);\n    } catch (InterruptedException e) {\n      throw new MojoExecutionException(\"Interrupted while executing \" +\n          \"the test \" + testName, e);\n    } finally {\n      if (testThread !\u003d null) {\n        // If the test thread didn\u0027t exit yet, that means the timeout expired.\n        testThread.interrupt();\n        try {\n          testThread.join();\n        } catch (InterruptedException e) {\n          getLog().error(\"Interrupted while waiting for testThread\", e);\n        }\n        status \u003d \"TIMED OUT\";\n      } else if (retCode \u003d\u003d 0) {\n        status \u003d \"SUCCESS\";\n      } else {\n        status \u003d \"ERROR CODE \" + String.valueOf(retCode);\n      }\n      try {\n        writeStatusFile(status);\n      } catch (Exception e) {\n        getLog().error(\"failed to write status file!\", e);\n      }\n      if (proc !\u003d null) {\n        proc.destroy();\n      }\n    }\n    long end \u003d System.nanoTime();\n    getLog().info(\"STATUS: \" + status + \" after \" +\n          TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) +\n          \" millisecond(s).\");\n    getLog().info(\"-------------------------------------------------------\");\n    if (status.equals(\"TIMED_OUT\")) {\n      if (expectedResult.equals(\"success\")) {\n        throw new MojoExecutionException(\"Test \" + binary +\n            \" timed out after \" + timeout + \" seconds!\");\n      }\n    } else if (!status.equals(\"SUCCESS\")) {\n      if (expectedResult.equals(\"success\")) {\n        throw new MojoExecutionException(\"Test \" + binary +\n            \" returned \" + status);\n      }\n    } else if (expectedResult.equals(\"failure\")) {\n      throw new MojoExecutionException(\"Test \" + binary +\n          \" succeeded, but we expected failure!\");\n    }\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/cmakebuilder/TestMojo.java",
      "extendedDetails": {}
    },
    "b1ed28fa77cb2fab80c54f9dfeb5d8b7139eca34": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8887. Use a Maven plugin to build the native code using CMake (cmccabe)\n",
      "commitDate": "14/01/16 11:02 AM",
      "commitName": "b1ed28fa77cb2fab80c54f9dfeb5d8b7139eca34",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,104 @@\n+  public void execute() throws MojoExecutionException {\n+    if (testName \u003d\u003d null) {\n+      testName \u003d binary.getName();\n+    }\n+    validatePlatform();\n+    validateParameters();\n+    if (!shouldRunTest()) {\n+      return;\n+    }\n+    if (!results.isDirectory()) {\n+      if (!results.mkdirs()) {\n+        throw new MojoExecutionException(\"Failed to create \" +\n+            \"output directory \u0027\" + results + \"\u0027!\");\n+      }\n+    }\n+    List\u003cString\u003e cmd \u003d new LinkedList\u003cString\u003e();\n+    cmd.add(binary.getAbsolutePath());\n+\n+    getLog().info(\"-------------------------------------------------------\");\n+    getLog().info(\" C M A K E B U I L D E R    T E S T\");\n+    getLog().info(\"-------------------------------------------------------\");\n+    StringBuilder bld \u003d new StringBuilder();\n+    bld.append(testName).append(\": running \");\n+    bld.append(binary.getAbsolutePath());\n+    for (String entry : args) {\n+      cmd.add(entry);\n+      bld.append(\" \").append(entry);\n+    }\n+    getLog().info(bld.toString());\n+    ProcessBuilder pb \u003d new ProcessBuilder(cmd);\n+    Exec.addEnvironment(pb, env);\n+    pb.redirectError(new File(results, testName + \".stderr\"));\n+    pb.redirectOutput(new File(results, testName + \".stdout\"));\n+    getLog().info(\"with extra environment variables \" + Exec.envToString(env));\n+    Process proc \u003d null;\n+    TestThread testThread \u003d null;\n+    int retCode \u003d -1;\n+    String status \u003d \"IN_PROGRESS\";\n+    try {\n+      writeStatusFile(status);\n+    } catch (IOException e) {\n+      throw new MojoExecutionException(\"Error writing the status file\", e);\n+    }\n+    long start \u003d System.nanoTime();\n+    try {\n+      proc \u003d pb.start();\n+      testThread \u003d new TestThread(proc);\n+      testThread.start();\n+      testThread.join(timeout * 1000);\n+      if (!testThread.isAlive()) {\n+        retCode \u003d testThread.retCode();\n+        testThread \u003d null;\n+        proc \u003d null;\n+      }\n+    } catch (IOException e) {\n+      throw new MojoExecutionException(\"IOException while executing the test \" +\n+          testName, e);\n+    } catch (InterruptedException e) {\n+      throw new MojoExecutionException(\"Interrupted while executing \" +\n+          \"the test \" + testName, e);\n+    } finally {\n+      if (testThread !\u003d null) {\n+        // If the test thread didn\u0027t exit yet, that means the timeout expired.\n+        testThread.interrupt();\n+        try {\n+          testThread.join();\n+        } catch (InterruptedException e) {\n+          getLog().error(\"Interrupted while waiting for testThread\", e);\n+        }\n+        status \u003d \"TIMED OUT\";\n+      } else if (retCode \u003d\u003d 0) {\n+        status \u003d \"SUCCESS\";\n+      } else {\n+        status \u003d \"ERROR CODE \" + String.valueOf(retCode);\n+      }\n+      try {\n+        writeStatusFile(status);\n+      } catch (Exception e) {\n+        getLog().error(\"failed to write status file!\", e);\n+      }\n+      if (proc !\u003d null) {\n+        proc.destroy();\n+      }\n+    }\n+    long end \u003d System.nanoTime();\n+    getLog().info(\"STATUS: \" + status + \" after \" +\n+          TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) +\n+          \" millisecond(s).\");\n+    getLog().info(\"-------------------------------------------------------\");\n+    if (status.equals(\"TIMED_OUT\")) {\n+      if (expectedResult.equals(\"success\")) {\n+        throw new MojoExecutionException(\"Test \" + binary +\n+            \" timed out after \" + timeout + \" seconds!\");\n+      }\n+    } else if (!status.equals(\"SUCCESS\")) {\n+      if (expectedResult.equals(\"success\")) {\n+        throw new MojoExecutionException(\"Test \" + binary +\n+            \" returned \" + status);\n+      }\n+    } else if (expectedResult.equals(\"failure\")) {\n+      throw new MojoExecutionException(\"Test \" + binary +\n+          \" succeeded, but we expected failure!\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void execute() throws MojoExecutionException {\n    if (testName \u003d\u003d null) {\n      testName \u003d binary.getName();\n    }\n    validatePlatform();\n    validateParameters();\n    if (!shouldRunTest()) {\n      return;\n    }\n    if (!results.isDirectory()) {\n      if (!results.mkdirs()) {\n        throw new MojoExecutionException(\"Failed to create \" +\n            \"output directory \u0027\" + results + \"\u0027!\");\n      }\n    }\n    List\u003cString\u003e cmd \u003d new LinkedList\u003cString\u003e();\n    cmd.add(binary.getAbsolutePath());\n\n    getLog().info(\"-------------------------------------------------------\");\n    getLog().info(\" C M A K E B U I L D E R    T E S T\");\n    getLog().info(\"-------------------------------------------------------\");\n    StringBuilder bld \u003d new StringBuilder();\n    bld.append(testName).append(\": running \");\n    bld.append(binary.getAbsolutePath());\n    for (String entry : args) {\n      cmd.add(entry);\n      bld.append(\" \").append(entry);\n    }\n    getLog().info(bld.toString());\n    ProcessBuilder pb \u003d new ProcessBuilder(cmd);\n    Exec.addEnvironment(pb, env);\n    pb.redirectError(new File(results, testName + \".stderr\"));\n    pb.redirectOutput(new File(results, testName + \".stdout\"));\n    getLog().info(\"with extra environment variables \" + Exec.envToString(env));\n    Process proc \u003d null;\n    TestThread testThread \u003d null;\n    int retCode \u003d -1;\n    String status \u003d \"IN_PROGRESS\";\n    try {\n      writeStatusFile(status);\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"Error writing the status file\", e);\n    }\n    long start \u003d System.nanoTime();\n    try {\n      proc \u003d pb.start();\n      testThread \u003d new TestThread(proc);\n      testThread.start();\n      testThread.join(timeout * 1000);\n      if (!testThread.isAlive()) {\n        retCode \u003d testThread.retCode();\n        testThread \u003d null;\n        proc \u003d null;\n      }\n    } catch (IOException e) {\n      throw new MojoExecutionException(\"IOException while executing the test \" +\n          testName, e);\n    } catch (InterruptedException e) {\n      throw new MojoExecutionException(\"Interrupted while executing \" +\n          \"the test \" + testName, e);\n    } finally {\n      if (testThread !\u003d null) {\n        // If the test thread didn\u0027t exit yet, that means the timeout expired.\n        testThread.interrupt();\n        try {\n          testThread.join();\n        } catch (InterruptedException e) {\n          getLog().error(\"Interrupted while waiting for testThread\", e);\n        }\n        status \u003d \"TIMED OUT\";\n      } else if (retCode \u003d\u003d 0) {\n        status \u003d \"SUCCESS\";\n      } else {\n        status \u003d \"ERROR CODE \" + String.valueOf(retCode);\n      }\n      try {\n        writeStatusFile(status);\n      } catch (Exception e) {\n        getLog().error(\"failed to write status file!\", e);\n      }\n      if (proc !\u003d null) {\n        proc.destroy();\n      }\n    }\n    long end \u003d System.nanoTime();\n    getLog().info(\"STATUS: \" + status + \" after \" +\n          TimeUnit.MILLISECONDS.convert(end - start, TimeUnit.NANOSECONDS) +\n          \" millisecond(s).\");\n    getLog().info(\"-------------------------------------------------------\");\n    if (status.equals(\"TIMED_OUT\")) {\n      if (expectedResult.equals(\"success\")) {\n        throw new MojoExecutionException(\"Test \" + binary +\n            \" timed out after \" + timeout + \" seconds!\");\n      }\n    } else if (!status.equals(\"SUCCESS\")) {\n      if (expectedResult.equals(\"success\")) {\n        throw new MojoExecutionException(\"Test \" + binary +\n            \" returned \" + status);\n      }\n    } else if (expectedResult.equals(\"failure\")) {\n      throw new MojoExecutionException(\"Test \" + binary +\n          \" succeeded, but we expected failure!\");\n    }\n  }",
      "path": "hadoop-maven-plugins/src/main/java/org/apache/hadoop/maven/plugin/cmakebuilder/TestMojo.java"
    }
  }
}