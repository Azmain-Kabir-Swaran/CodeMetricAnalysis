{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceTrackerService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
  "functionStartLine": 152,
  "functionEndLine": 195,
  "numCommitsSeen": 131,
  "timeTaken": 11615,
  "changeHistory": [
    "ed13cf84068ad50a78e66211132c1f08238fb65b",
    "9bb2801e8ce1e6298241944a65f593f555ae10e2",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421",
    "524bc3c33aff301c1a8d60ed8e6a3b240e305045",
    "5acdde4744c131e05db7b4b5f7d684fed7608b99",
    "db9304788187c700647c4d84caeb3b5ad6d868d8",
    "db1b674b50ddecf2774f4092d677c412722bdcb1",
    "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "b812af964d100c50d065cdd9007cef31ea2642a8",
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7",
    "0928502029ef141759008997335ea2cd836a7154",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "d9ce42479e5b2cbbf54dd2861680f9d37bdf31f3",
    "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "4186121c08cb3d86f775d333c637459a4fb19d1b",
    "8ae3cdeac7152ced75752f653b3fa11b2d881d09",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "ed13cf84068ad50a78e66211132c1f08238fb65b": "Ybodychange",
    "9bb2801e8ce1e6298241944a65f593f555ae10e2": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Ybodychange",
    "524bc3c33aff301c1a8d60ed8e6a3b240e305045": "Ybodychange",
    "5acdde4744c131e05db7b4b5f7d684fed7608b99": "Ybodychange",
    "db9304788187c700647c4d84caeb3b5ad6d868d8": "Ybodychange",
    "db1b674b50ddecf2774f4092d677c412722bdcb1": "Ybodychange",
    "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "b812af964d100c50d065cdd9007cef31ea2642a8": "Ybodychange",
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "d9ce42479e5b2cbbf54dd2861680f9d37bdf31f3": "Ybodychange",
    "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "4186121c08cb3d86f775d333c637459a4fb19d1b": "Ybodychange",
    "8ae3cdeac7152ced75752f653b3fa11b2d881d09": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ed13cf84068ad50a78e66211132c1f08238fb65b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9317. Avoid repeated YarnConfiguration#timelineServiceV2Enabled check. Contributed by Prabhu Joseph\n",
      "commitDate": "22/02/19 7:31 AM",
      "commitName": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "08/01/19 2:54 PM",
      "commitNameOld": "6a923464afa6b635f505be5d5b2414d47d570f99",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 44.69,
      "commitsBetweenForRepo": 332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     checkIpHostnameInRegistration \u003d conf.getBoolean(\n         YarnConfiguration.RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY,\n         YarnConfiguration.DEFAULT_RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY);\n     minAllocMb \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n+    timelineServiceV2Enabled \u003d  YarnConfiguration.\n+        timelineServiceV2Enabled(conf);\n \n     if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       isDistributedNodeLabelsConf \u003d\n           YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n       isDelegatedCentralizedNodeLabelsConf \u003d\n           YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n     }\n \n     loadDynamicResourceConfiguration(conf);\n     decommissioningWatcher.init(conf);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    checkIpHostnameInRegistration \u003d conf.getBoolean(\n        YarnConfiguration.RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY,\n        YarnConfiguration.DEFAULT_RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY);\n    minAllocMb \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n    timelineServiceV2Enabled \u003d  YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      isDistributedNodeLabelsConf \u003d\n          YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n      isDelegatedCentralizedNodeLabelsConf \u003d\n          YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n    }\n\n    loadDynamicResourceConfiguration(conf);\n    decommissioningWatcher.init(conf);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "9bb2801e8ce1e6298241944a65f593f555ae10e2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4254. ApplicationAttempt stuck for ever due to UnknownHostException. Contributed by Bibin A Chundatt\n",
      "commitDate": "05/10/18 1:52 PM",
      "commitName": "9bb2801e8ce1e6298241944a65f593f555ae10e2",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "c44088ac190e515b099183aeed4f9d6f8bee7da6",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 23.43,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n+    checkIpHostnameInRegistration \u003d conf.getBoolean(\n+        YarnConfiguration.RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY,\n+        YarnConfiguration.DEFAULT_RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY);\n     minAllocMb \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n     if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       isDistributedNodeLabelsConf \u003d\n           YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n       isDelegatedCentralizedNodeLabelsConf \u003d\n           YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n     }\n \n     loadDynamicResourceConfiguration(conf);\n     decommissioningWatcher.init(conf);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    checkIpHostnameInRegistration \u003d conf.getBoolean(\n        YarnConfiguration.RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY,\n        YarnConfiguration.DEFAULT_RM_NM_REGISTRATION_IP_HOSTNAME_CHECK_KEY);\n    minAllocMb \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      isDistributedNodeLabelsConf \u003d\n          YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n      isDelegatedCentralizedNodeLabelsConf \u003d\n          YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n    }\n\n    loadDynamicResourceConfiguration(conf);\n    decommissioningWatcher.init(conf);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "06f0b50a284455ffd5857cb42f386e92d121d0e6",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 38.95,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n     if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       isDistributedNodeLabelsConf \u003d\n           YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n       isDelegatedCentralizedNodeLabelsConf \u003d\n           YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n     }\n \n     loadDynamicResourceConfiguration(conf);\n+    decommissioningWatcher.init(conf);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      isDistributedNodeLabelsConf \u003d\n          YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n      isDelegatedCentralizedNodeLabelsConf \u003d\n          YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n    }\n\n    loadDynamicResourceConfiguration(conf);\n    decommissioningWatcher.init(conf);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "524bc3c33aff301c1a8d60ed8e6a3b240e305045": {
      "type": "Ybodychange",
      "commitMessage": "YARN-998. Keep NM resource updated through dynamic resource config for RM/NM restart. Contributed by Junping Du\n",
      "commitDate": "28/03/16 11:12 AM",
      "commitName": "524bc3c33aff301c1a8d60ed8e6a3b240e305045",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/12/15 3:58 PM",
      "commitNameOld": "52734134116eb4b18686e308d00e71e7e903383e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 89.76,
      "commitsBetweenForRepo": 566,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n-    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n-    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n-    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n-    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n     if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       isDistributedNodeLabelsConf \u003d\n           YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n       isDelegatedCentralizedNodeLabelsConf \u003d\n           YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n     }\n \n+    loadDynamicResourceConfiguration(conf);\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      isDistributedNodeLabelsConf \u003d\n          YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n      isDelegatedCentralizedNodeLabelsConf \u003d\n          YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n    }\n\n    loadDynamicResourceConfiguration(conf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "5acdde4744c131e05db7b4b5f7d684fed7608b99": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2729. Support script based NodeLabelsProvider Interface in Distributed Node Label Configuration Setup. (Naganarasimha G R via rohithsharmaks)\n",
      "commitDate": "26/10/15 3:12 AM",
      "commitName": "5acdde4744c131e05db7b4b5f7d684fed7608b99",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "10/10/15 10:51 PM",
      "commitNameOld": "db9304788187c700647c4d84caeb3b5ad6d868d8",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 15.18,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n-    isDistributedNodeLabelsConf \u003d\n-        YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n-    isDelegatedCentralizedNodeLabelsConf \u003d YarnConfiguration\n-        .isDelegatedCentralizedNodeLabelConfiguration(conf);\n+    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n+      isDistributedNodeLabelsConf \u003d\n+          YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n+      isDelegatedCentralizedNodeLabelsConf \u003d\n+          YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n+    }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    if (YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      isDistributedNodeLabelsConf \u003d\n          YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n      isDelegatedCentralizedNodeLabelsConf \u003d\n          YarnConfiguration.isDelegatedCentralizedNodeLabelConfiguration(conf);\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "db9304788187c700647c4d84caeb3b5ad6d868d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3964. Support NodeLabelsProvider at Resource Manager side.\nContributed by Dian Fu.\n",
      "commitDate": "10/10/15 10:51 PM",
      "commitName": "db9304788187c700647c4d84caeb3b5ad6d868d8",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 17.39,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n     isDistributedNodeLabelsConf \u003d\n         YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n+    isDelegatedCentralizedNodeLabelsConf \u003d YarnConfiguration\n+        .isDelegatedCentralizedNodeLabelConfiguration(conf);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    isDistributedNodeLabelsConf \u003d\n        YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n    isDelegatedCentralizedNodeLabelsConf \u003d YarnConfiguration\n        .isDelegatedCentralizedNodeLabelConfiguration(conf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "db1b674b50ddecf2774f4092d677c412722bdcb1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2740. Fix NodeLabelsManager to properly handle node label modifications when distributed node label configuration enabled. (Naganarasimha G R via wangda)\n",
      "commitDate": "27/04/15 4:24 PM",
      "commitName": "db1b674b50ddecf2774f4092d677c412722bdcb1",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 17.31,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,33 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n-    String nodeLabelConfigurationType \u003d\n-        conf.get(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,\n-            YarnConfiguration.DEFAULT_NODELABEL_CONFIGURATION_TYPE);\n-\n-    isDistributesNodeLabelsConf \u003d\n-        YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE\n-            .equals(nodeLabelConfigurationType);\n+    isDistributedNodeLabelsConf \u003d\n+        YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    isDistributedNodeLabelsConf \u003d\n        YarnConfiguration.isDistributedNodeLabelConfiguration(conf);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2495. Allow admin specify labels from each NM (Distributed configuration for node label). (Naganarasimha G R via wangda)\n",
      "commitDate": "30/03/15 12:05 PM",
      "commitName": "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "20/02/15 7:10 AM",
      "commitNameOld": "a64dd3d24bfcb9af21eb63869924f6482b147fd3",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 38.16,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,38 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n+    String nodeLabelConfigurationType \u003d\n+        conf.get(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,\n+            YarnConfiguration.DEFAULT_NODELABEL_CONFIGURATION_TYPE);\n+\n+    isDistributesNodeLabelsConf \u003d\n+        YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE\n+            .equals(nodeLabelConfigurationType);\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    String nodeLabelConfigurationType \u003d\n        conf.get(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,\n            YarnConfiguration.DEFAULT_NODELABEL_CONFIGURATION_TYPE);\n\n    isDistributesNodeLabelsConf \u003d\n        YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE\n            .equals(nodeLabelConfigurationType);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "16/06/14 4:56 PM",
      "commitNameOld": "95897ca14b7abd7fe047fdcf150473a8a2cbb024",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 44.84,
      "commitsBetweenForRepo": 313,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.RM_BIND_HOST,\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_BIND_HOST,\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,29 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n-    this.useLocalConfigurationProvider \u003d\n-        (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(\n-            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n-            LocalConfigurationProvider.class)));\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "b812af964d100c50d065cdd9007cef31ea2642a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1669. Modified RM HA handling of protocol level service-ACLS to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 2:46 PM",
      "commitName": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/11/13 9:17 PM",
      "commitNameOld": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 77.73,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n \n     minimumNodeManagerVersion \u003d conf.get(\n         YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n \n+    this.useLocalConfigurationProvider \u003d\n+        (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(\n+            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n+            LocalConfigurationProvider.class)));\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    this.useLocalConfigurationProvider \u003d\n        (LocalConfigurationProvider.class.isAssignableFrom(conf.getClass(\n            YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,\n            LocalConfigurationProvider.class)));\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-819. ResourceManager and NodeManager should check for a minimum allowed version (Robert Parker via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526660 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/13 12:55 PM",
      "commitName": "5a15c392a1a18c5720dbe630bc07e58268c8e6a7",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "16/09/13 11:33 AM",
      "commitNameOld": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 10.06,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n-    \n+\n+    minimumNodeManagerVersion \u003d conf.get(\n+        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n+        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n\n    minimumNodeManagerVersion \u003d conf.get(\n        YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/05/13 11:36 PM",
      "commitNameOld": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.9,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public synchronized void init(Configuration conf) {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n-      throw new YarnException(\"Invalid Configuration. \"\n+      throw new YarnRuntimeException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n \n     minAllocMb \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     minAllocVcores \u003d conf.getInt(\n     \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n     \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    \n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "d9ce42479e5b2cbbf54dd2861680f9d37bdf31f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-576. Modified ResourceManager to reject NodeManagers that don\u0027t satisy minimum resource requirements. Contributed by Kenji Kikushima.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476824 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/04/13 1:03 PM",
      "commitName": "d9ce42479e5b2cbbf54dd2861680f9d37bdf31f3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/04/13 8:50 PM",
      "commitNameOld": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,25 @@\n   public synchronized void init(Configuration conf) {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     nextHeartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n     if (nextHeartBeatInterval \u003c\u003d 0) {\n       throw new YarnException(\"Invalid Configuration. \"\n           + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n           + \" should be larger than 0.\");\n     }\n+\n+    minAllocMb \u003d conf.getInt(\n+    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+    minAllocVcores \u003d conf.getInt(\n+    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n+    \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n\n    minAllocMb \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    minAllocVcores \u003d conf.getInt(\n    \tYarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n    \tYarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    \n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-309. Changed NodeManager to obtain heart-beat interval from the ResourceManager. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463346 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/13 6:04 PM",
      "commitName": "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/03/13 11:20 AM",
      "commitNameOld": "66e90b205a079c7056bd85e6c5e3dbb2a96e7461",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,17 @@\n   public synchronized void init(Configuration conf) {\n     resourceTrackerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n+    nextHeartBeatInterval \u003d\n+        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n+    if (nextHeartBeatInterval \u003c\u003d 0) {\n+      throw new YarnException(\"Invalid Configuration. \"\n+          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n+          + \" should be larger than 0.\");\n+    }\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    nextHeartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);\n    if (nextHeartBeatInterval \u003c\u003d 0) {\n      throw new YarnException(\"Invalid Configuration. \"\n          + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS\n          + \" should be larger than 0.\");\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
      }
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/02/12 1:39 PM",
      "commitNameOld": "c0572656ced07a885f848c1134edd7b1c291d246",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 53.88,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,9 @@\n   public synchronized void init(Configuration conf) {\n-    String resourceTrackerBindAddress \u003d\n-      conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n-    resourceTrackerAddress \u003d NetUtils.createSocketAddr(\n-      resourceTrackerBindAddress,\n-      YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT,\n-      YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n+    resourceTrackerAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     RackResolver.init(conf);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    resourceTrackerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "4186121c08cb3d86f775d333c637459a4fb19d1b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3239. Use new createSocketAddr API in MRv2 to give better error messages on misconfig (Todd Lipcon via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187556 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/10/11 2:36 PM",
      "commitName": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "05/10/11 4:43 AM",
      "commitNameOld": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.41,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,12 @@\n   public synchronized void init(Configuration conf) {\n     String resourceTrackerBindAddress \u003d\n       conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n-    resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n+    resourceTrackerAddress \u003d NetUtils.createSocketAddr(\n+      resourceTrackerBindAddress,\n+      YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT,\n+      YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n \n     RackResolver.init(conf);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    String resourceTrackerBindAddress \u003d\n      conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n    resourceTrackerAddress \u003d NetUtils.createSocketAddr(\n      resourceTrackerBindAddress,\n      YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT,\n      YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "8ae3cdeac7152ced75752f653b3fa11b2d881d09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3042. Fixed default ResourceTracker address. Contributed by Chris Riccomini.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1172847 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/11 2:31 PM",
      "commitName": "8ae3cdeac7152ced75752f653b3fa11b2d881d09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 8.17,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   public synchronized void init(Configuration conf) {\n     String resourceTrackerBindAddress \u003d\n       conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n-          YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n+          YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n     resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n \n     RackResolver.init(conf);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    String resourceTrackerBindAddress \u003d\n      conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n    resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   public synchronized void init(Configuration conf) {\n     String resourceTrackerBindAddress \u003d\n-      conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n-          YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n+      conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+          YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n     resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n \n     RackResolver.init(conf);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    String resourceTrackerBindAddress \u003d\n      conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n          YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n    resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    String resourceTrackerBindAddress \u003d\n      conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n          YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n    resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,9 @@\n+  public synchronized void init(Configuration conf) {\n+    String resourceTrackerBindAddress \u003d\n+      conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n+          YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n+    resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n+\n+    RackResolver.init(conf);\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    String resourceTrackerBindAddress \u003d\n      conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n          YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n    resourceTrackerAddress \u003d NetUtils.createSocketAddr(resourceTrackerBindAddress);\n\n    RackResolver.init(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
    }
  }
}