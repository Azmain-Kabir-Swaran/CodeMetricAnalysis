{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractContainerAllocator.java",
  "functionName": "getCSAssignmentFromAllocateResult",
  "functionId": "getCSAssignmentFromAllocateResult___clusterResource-Resource__result-ContainerAllocation__rmContainer-RMContainer__node-FiCaSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
  "functionStartLine": 71,
  "functionEndLine": 165,
  "numCommitsSeen": 52,
  "timeTaken": 9136,
  "changeHistory": [
    "09763925025a3709e6098186348e1afd80cb9f71",
    "51654a3962bcd0482c0e1dd32765e9533e3f9158",
    "dd5e18c4aecba56f140c3cc11affc2cb5e61c79d",
    "8e0f83e49a8987cf45a72c8a9bb8587b86e4c0ed",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188",
    "4d92aefd35d4517d9435d81bafdec0d77905a7a0",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "e5003be907acef87c2770e3f2914953f62017b0e",
    "ba2313d6145a1234777938a747187373f4cd58d9"
  ],
  "changeHistoryShort": {
    "09763925025a3709e6098186348e1afd80cb9f71": "Ybodychange",
    "51654a3962bcd0482c0e1dd32765e9533e3f9158": "Ybodychange",
    "dd5e18c4aecba56f140c3cc11affc2cb5e61c79d": "Ybodychange",
    "8e0f83e49a8987cf45a72c8a9bb8587b86e4c0ed": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Ymultichange(Yparameterchange,Ybodychange)",
    "4d92aefd35d4517d9435d81bafdec0d77905a7a0": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ymovefromfile",
    "e5003be907acef87c2770e3f2914953f62017b0e": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09763925025a3709e6098186348e1afd80cb9f71": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9590. Correct incompatible, incomplete and redundant activities. Contributed by Tao Yang.\n",
      "commitDate": "06/06/19 6:59 AM",
      "commitName": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 93.37,
      "commitsBetweenForRepo": 619,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,95 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     assignment.setRequestLocalityType(result.requestLocalityType);\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       RMContainer updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         if (LOG.isDebugEnabled()) {\n           // This is a reserved container\n           // Since re-reservation could happen again and again for already\n           // reserved containers. only do this in debug log.\n           LOG.debug(\"Reserved container \" + \" application\u003d\" + application\n               .getApplicationId() + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n               + appInfo.getQueueName() + \" cluster\u003d\" + clusterResource);\n         }\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n-          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n-              activitiesManager, node, application, updatedContainer,\n-              ActivityState.RE_RESERVED);\n           ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n         } else {\n-          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n-              activitiesManager, node, application, updatedContainer,\n-              ActivityState.RESERVED);\n           ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               updatedContainer.getContainerId(), ActivityState.RESERVED,\n               ActivityDiagnosticConstant.EMPTY);\n         }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n             .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n             .getContainerId() + \" queue\u003d\" + appInfo.getQueueName()\n             + \" clusterResource\u003d\" + clusterResource\n             + \" type\u003d\" + assignment.getType() + \" requestedPartition\u003d\"\n             + updatedContainer.getNodeLabelExpression());\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n           assignment.setFulfilledReservedContainer(rmContainer);\n         }\n \n         ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n             node, application, updatedContainer, ActivityState.ALLOCATED);\n         ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n             activitiesManager, application.getApplicationId(),\n-            updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n+            updatedContainer.getContainerId(), ActivityState.ALLOCATED,\n             ActivityDiagnosticConstant.EMPTY);\n \n         // Update unformed resource\n         application.incUnconfirmedRes(allocatedResource);\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n+      ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n+          activitiesManager, application.getApplicationId(),\n+          ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n     }\n \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    assignment.setRequestLocalityType(result.requestLocalityType);\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      RMContainer updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        if (LOG.isDebugEnabled()) {\n          // This is a reserved container\n          // Since re-reservation could happen again and again for already\n          // reserved containers. only do this in debug log.\n          LOG.debug(\"Reserved container \" + \" application\u003d\" + application\n              .getApplicationId() + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n              + appInfo.getQueueName() + \" cluster\u003d\" + clusterResource);\n        }\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getContainerId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n            .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n            .getContainerId() + \" queue\u003d\" + appInfo.getQueueName()\n            + \" clusterResource\u003d\" + clusterResource\n            + \" type\u003d\" + assignment.getType() + \" requestedPartition\u003d\"\n            + updatedContainer.getNodeLabelExpression());\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n          assignment.setFulfilledReservedContainer(rmContainer);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getContainerId(), ActivityState.ALLOCATED,\n            ActivityDiagnosticConstant.EMPTY);\n\n        // Update unformed resource\n        application.incUnconfirmedRes(allocatedResource);\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n      ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n          activitiesManager, application.getApplicationId(),\n          ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n    }\n\n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "51654a3962bcd0482c0e1dd32765e9533e3f9158": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8459. Improve Capacity Scheduler logs to debug invalid states. Contributed by Wangda Tan.\n",
      "commitDate": "03/07/18 9:59 AM",
      "commitName": "51654a3962bcd0482c0e1dd32765e9533e3f9158",
      "commitAuthor": "Sunil G",
      "commitDateOld": "16/04/18 4:52 PM",
      "commitNameOld": "dd5e18c4aecba56f140c3cc11affc2cb5e61c79d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 77.71,
      "commitsBetweenForRepo": 1060,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,98 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     assignment.setRequestLocalityType(result.requestLocalityType);\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       RMContainer updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n-        // This is a reserved container\n-        LOG.info(\"Reserved container \" + \" application\u003d\"\n-            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n-            + \" queue\u003d\" + appInfo.getQueueName()\n-            + \" cluster\u003d\" + clusterResource);\n+        if (LOG.isDebugEnabled()) {\n+          // This is a reserved container\n+          // Since re-reservation could happen again and again for already\n+          // reserved containers. only do this in debug log.\n+          LOG.debug(\"Reserved container \" + \" application\u003d\" + application\n+              .getApplicationId() + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n+              + appInfo.getQueueName() + \" cluster\u003d\" + clusterResource);\n+        }\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RE_RESERVED);\n           ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n         } else {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RESERVED);\n           ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               updatedContainer.getContainerId(), ActivityState.RESERVED,\n               ActivityDiagnosticConstant.EMPTY);\n         }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n             .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n             .getContainerId() + \" queue\u003d\" + appInfo.getQueueName()\n             + \" clusterResource\u003d\" + clusterResource\n             + \" type\u003d\" + assignment.getType() + \" requestedPartition\u003d\"\n             + updatedContainer.getNodeLabelExpression());\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n           assignment.setFulfilledReservedContainer(rmContainer);\n         }\n \n         ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n             node, application, updatedContainer, ActivityState.ALLOCATED);\n         ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n             activitiesManager, application.getApplicationId(),\n             updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n             ActivityDiagnosticConstant.EMPTY);\n \n         // Update unformed resource\n         application.incUnconfirmedRes(allocatedResource);\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n     }\n \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    assignment.setRequestLocalityType(result.requestLocalityType);\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      RMContainer updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        if (LOG.isDebugEnabled()) {\n          // This is a reserved container\n          // Since re-reservation could happen again and again for already\n          // reserved containers. only do this in debug log.\n          LOG.debug(\"Reserved container \" + \" application\u003d\" + application\n              .getApplicationId() + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n              + appInfo.getQueueName() + \" cluster\u003d\" + clusterResource);\n        }\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RE_RESERVED);\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RESERVED);\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getContainerId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n            .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n            .getContainerId() + \" queue\u003d\" + appInfo.getQueueName()\n            + \" clusterResource\u003d\" + clusterResource\n            + \" type\u003d\" + assignment.getType() + \" requestedPartition\u003d\"\n            + updatedContainer.getNodeLabelExpression());\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n          assignment.setFulfilledReservedContainer(rmContainer);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n            ActivityDiagnosticConstant.EMPTY);\n\n        // Update unformed resource\n        application.incUnconfirmedRes(allocatedResource);\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n\n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "dd5e18c4aecba56f140c3cc11affc2cb5e61c79d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8165. Incorrect queue name logging in AbstractContainerAllocator. Contributed by Weiwei Yan.\n",
      "commitDate": "16/04/18 4:52 PM",
      "commitName": "dd5e18c4aecba56f140c3cc11affc2cb5e61c79d",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "09/11/17 1:01 PM",
      "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 158.12,
      "commitsBetweenForRepo": 1075,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,95 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     assignment.setRequestLocalityType(result.requestLocalityType);\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       RMContainer updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n-            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n+            + \" queue\u003d\" + appInfo.getQueueName()\n+            + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RE_RESERVED);\n           ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n         } else {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RESERVED);\n           ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               updatedContainer.getContainerId(), ActivityState.RESERVED,\n               ActivityDiagnosticConstant.EMPTY);\n         }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n             .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n-            .getContainerId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n-            + clusterResource + \" type\u003d\" + assignment.getType()\n-            + \" requestedPartition\u003d\"\n+            .getContainerId() + \" queue\u003d\" + appInfo.getQueueName()\n+            + \" clusterResource\u003d\" + clusterResource\n+            + \" type\u003d\" + assignment.getType() + \" requestedPartition\u003d\"\n             + updatedContainer.getNodeLabelExpression());\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n           assignment.setFulfilledReservedContainer(rmContainer);\n         }\n \n         ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n             node, application, updatedContainer, ActivityState.ALLOCATED);\n         ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n             activitiesManager, application.getApplicationId(),\n             updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n             ActivityDiagnosticConstant.EMPTY);\n \n         // Update unformed resource\n         application.incUnconfirmedRes(allocatedResource);\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n     }\n \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    assignment.setRequestLocalityType(result.requestLocalityType);\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      RMContainer updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + appInfo.getQueueName()\n            + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RE_RESERVED);\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RESERVED);\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getContainerId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n            .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n            .getContainerId() + \" queue\u003d\" + appInfo.getQueueName()\n            + \" clusterResource\u003d\" + clusterResource\n            + \" type\u003d\" + assignment.getType() + \" requestedPartition\u003d\"\n            + updatedContainer.getNodeLabelExpression());\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n          assignment.setFulfilledReservedContainer(rmContainer);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n            ActivityDiagnosticConstant.EMPTY);\n\n        // Update unformed resource\n        application.incUnconfirmedRes(allocatedResource);\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n\n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "8e0f83e49a8987cf45a72c8a9bb8587b86e4c0ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6493. Print requested node partition in assignContainer logs. (Jonathan Hung via wangda)\n\nChange-Id: Ib20326daac10acad363befb0ae0998441fa5b32d\n",
      "commitDate": "22/05/17 2:28 PM",
      "commitName": "8e0f83e49a8987cf45a72c8a9bb8587b86e4c0ed",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 136.15,
      "commitsBetweenForRepo": 746,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,94 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     assignment.setRequestLocalityType(result.requestLocalityType);\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       RMContainer updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RE_RESERVED);\n           ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n         } else {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RESERVED);\n           ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               updatedContainer.getContainerId(), ActivityState.RESERVED,\n               ActivityDiagnosticConstant.EMPTY);\n         }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n             .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n             .getContainerId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n-            + clusterResource + \" type\u003d\" + assignment.getType());\n+            + clusterResource + \" type\u003d\" + assignment.getType()\n+            + \" requestedPartition\u003d\"\n+            + updatedContainer.getNodeLabelExpression());\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n           assignment.setFulfilledReservedContainer(rmContainer);\n         }\n \n         ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n             node, application, updatedContainer, ActivityState.ALLOCATED);\n         ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n             activitiesManager, application.getApplicationId(),\n             updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n             ActivityDiagnosticConstant.EMPTY);\n \n         // Update unformed resource\n         application.incUnconfirmedRes(allocatedResource);\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n     }\n \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    assignment.setRequestLocalityType(result.requestLocalityType);\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      RMContainer updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RE_RESERVED);\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RESERVED);\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getContainerId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n            .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n            .getContainerId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType()\n            + \" requestedPartition\u003d\"\n            + updatedContainer.getNodeLabelExpression());\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n          assignment.setFulfilledReservedContainer(rmContainer);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n            ActivityDiagnosticConstant.EMPTY);\n\n        // Update unformed resource\n        application.incUnconfirmedRes(allocatedResource);\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n\n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/16 10:27 AM",
      "commitNameOld": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 94.03,
      "commitsBetweenForRepo": 702,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,92 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n+    assignment.setRequestLocalityType(result.requestLocalityType);\n+\n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n-      Container updatedContainer \u003d result.getUpdatedContainer();\n+      RMContainer updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n-            updatedContainer.getId(),\n-            application.getCSLeafQueue().getQueuePath());\n+            updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RE_RESERVED);\n           ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n               ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n         } else {\n           ActivitiesLogger.APP.recordAppActivityWithAllocation(\n               activitiesManager, node, application, updatedContainer,\n               ActivityState.RESERVED);\n           ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n               activitiesManager, application.getApplicationId(),\n-              updatedContainer.getId(), ActivityState.RESERVED,\n+              updatedContainer.getContainerId(), ActivityState.RESERVED,\n               ActivityDiagnosticConstant.EMPTY);\n         }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n-        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n-            + application.getApplicationAttemptId() + \" container\u003d\"\n-            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n+        LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n+            .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n+            .getContainerId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n-        application\n-            .getCSLeafQueue()\n-            .getOrderingPolicy()\n-            .containerAllocated(application,\n-                application.getRMContainer(updatedContainer.getId()));\n-\n         assignment.getAssignmentInformation().addAllocationDetails(\n-            updatedContainer.getId(),\n-            application.getCSLeafQueue().getQueuePath());\n+            updatedContainer, application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n+          assignment.setFulfilledReservedContainer(rmContainer);\n         }\n \n         ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n             node, application, updatedContainer, ActivityState.ALLOCATED);\n         ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n             activitiesManager, application.getApplicationId(),\n-            updatedContainer.getId(), ActivityState.ACCEPTED,\n+            updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n             ActivityDiagnosticConstant.EMPTY);\n \n+        // Update unformed resource\n+        application.incUnconfirmedRes(allocatedResource);\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n     }\n \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    assignment.setRequestLocalityType(result.requestLocalityType);\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      RMContainer updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RE_RESERVED);\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RESERVED);\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getContainerId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\" + application\n            .getApplicationAttemptId() + \" container\u003d\" + updatedContainer\n            .getContainerId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer, application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n          assignment.setFulfilledReservedContainer(rmContainer);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getContainerId(), ActivityState.ACCEPTED,\n            ActivityDiagnosticConstant.EMPTY);\n\n        // Update unformed resource\n        application.incUnconfirmedRes(allocatedResource);\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n\n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
          "commitDate": "05/08/16 10:27 AM",
          "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "03/08/16 11:53 AM",
          "commitNameOld": "4d92aefd35d4517d9435d81bafdec0d77905a7a0",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.94,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,95 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n-      RMContainer rmContainer) {\n+      RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n-    \n+\n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n+\n+        if (rmContainer !\u003d null) {\n+          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n+              activitiesManager, node, application, updatedContainer,\n+              ActivityState.RE_RESERVED);\n+          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n+              activitiesManager, application.getApplicationId(),\n+              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n+        } else {\n+          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n+              activitiesManager, node, application, updatedContainer,\n+              ActivityState.RESERVED);\n+          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n+              activitiesManager, application.getApplicationId(),\n+              updatedContainer.getId(), ActivityState.RESERVED,\n+              ActivityDiagnosticConstant.EMPTY);\n+        }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n-        \n+\n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n+\n+        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n+            node, application, updatedContainer, ActivityState.ALLOCATED);\n+        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n+            activitiesManager, application.getApplicationId(),\n+            updatedContainer.getId(), ActivityState.ACCEPTED,\n+            ActivityDiagnosticConstant.EMPTY);\n+\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n     }\n-    \n+\n     return assignment;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RE_RESERVED);\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RESERVED);\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getId(), ActivityState.ACCEPTED,\n            ActivityDiagnosticConstant.EMPTY);\n\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n\n    return assignment;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, result-ContainerAllocation, rmContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, result-ContainerAllocation, rmContainer-RMContainer, node-FiCaSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
          "commitDate": "05/08/16 10:27 AM",
          "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "03/08/16 11:53 AM",
          "commitNameOld": "4d92aefd35d4517d9435d81bafdec0d77905a7a0",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.94,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,95 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n-      RMContainer rmContainer) {\n+      RMContainer rmContainer, FiCaSchedulerNode node) {\n     // Handle skipped\n     CSAssignment.SkippedType skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n         CSAssignment.SkippedType.OTHER :\n         CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n-    \n+\n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n+\n+        if (rmContainer !\u003d null) {\n+          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n+              activitiesManager, node, application, updatedContainer,\n+              ActivityState.RE_RESERVED);\n+          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n+              activitiesManager, application.getApplicationId(),\n+              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n+        } else {\n+          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n+              activitiesManager, node, application, updatedContainer,\n+              ActivityState.RESERVED);\n+          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n+              activitiesManager, application.getApplicationId(),\n+              updatedContainer.getId(), ActivityState.RESERVED,\n+              ActivityDiagnosticConstant.EMPTY);\n+        }\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n-        \n+\n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n+\n+        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n+            node, application, updatedContainer, ActivityState.ALLOCATED);\n+        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n+            activitiesManager, application.getApplicationId(),\n+            updatedContainer.getId(), ActivityState.ACCEPTED,\n+            ActivityDiagnosticConstant.EMPTY);\n+\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n     } else {\n       if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n         assignment.setSkippedType(\n             CSAssignment.SkippedType.QUEUE_LIMIT);\n       }\n     }\n-    \n+\n     return assignment;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer, FiCaSchedulerNode node) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n\n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RE_RESERVED);\n          ActivitiesLogger.APP.finishSkippedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              ActivityState.SKIPPED, ActivityDiagnosticConstant.EMPTY);\n        } else {\n          ActivitiesLogger.APP.recordAppActivityWithAllocation(\n              activitiesManager, node, application, updatedContainer,\n              ActivityState.RESERVED);\n          ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n              activitiesManager, application.getApplicationId(),\n              updatedContainer.getId(), ActivityState.RESERVED,\n              ActivityDiagnosticConstant.EMPTY);\n        }\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n\n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n\n        ActivitiesLogger.APP.recordAppActivityWithAllocation(activitiesManager,\n            node, application, updatedContainer, ActivityState.ALLOCATED);\n        ActivitiesLogger.APP.finishAllocatedAppAllocationRecording(\n            activitiesManager, application.getApplicationId(),\n            updatedContainer.getId(), ActivityState.ACCEPTED,\n            ActivityDiagnosticConstant.EMPTY);\n\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n\n    return assignment;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "4d92aefd35d4517d9435d81bafdec0d77905a7a0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4280. CapacityScheduler reservations may not prevent indefinite postponement on a busy cluster. Contributed by Kuhu Shukla\n",
      "commitDate": "03/08/16 11:53 AM",
      "commitName": "4d92aefd35d4517d9435d81bafdec0d77905a7a0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 139.79,
      "commitsBetweenForRepo": 1021,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,70 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer) {\n     // Handle skipped\n-    boolean skipped \u003d\n-        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n+    CSAssignment.SkippedType skipped \u003d\n+        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n+        CSAssignment.SkippedType.OTHER :\n+        CSAssignment.SkippedType.NONE;\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n         \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n       }\n \n       assignment.setContainersToKill(result.getToKillContainers());\n+    } else {\n+      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n+        assignment.setSkippedType(\n+            CSAssignment.SkippedType.QUEUE_LIMIT);\n+      }\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    CSAssignment.SkippedType skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED) ?\n        CSAssignment.SkippedType.OTHER :\n        CSAssignment.SkippedType.NONE;\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    } else {\n      if (result.getAllocationState() \u003d\u003d AllocationState.QUEUE_SKIPPED) {\n        assignment.setSkippedType(\n            CSAssignment.SkippedType.QUEUE_LIMIT);\n      }\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,63 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n         \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n       }\n+\n+      assignment.setContainersToKill(result.getToKillContainers());\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,61 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n         \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n       }\n-\n-      assignment.setContainersToKill(result.getToKillContainers());\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/11/15 11:09 AM",
      "commitNameOld": "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 125.2,
      "commitsBetweenForRepo": 792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,63 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n         \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n       }\n+\n+      assignment.setContainersToKill(result.getToKillContainers());\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n\n      assignment.setContainersToKill(result.getToKillContainers());\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4287. Capacity Scheduler: Rack Locality improvement (Nathan Roberts via wangda)\n",
      "commitDate": "12/11/15 11:09 AM",
      "commitName": "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 49.94,
      "commitsBetweenForRepo": 405,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   protected CSAssignment getCSAssignmentFromAllocateResult(\n       Resource clusterResource, ContainerAllocation result,\n       RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n     assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n \n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n         LOG.info(\"Reserved container \" + \" application\u003d\"\n             + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n             + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n       } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n             + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n-            + clusterResource);\n+            + clusterResource + \" type\u003d\" + assignment.getType());\n \n         application\n             .getCSLeafQueue()\n             .getOrderingPolicy()\n             .containerAllocated(application,\n                 application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n             updatedContainer.getId(),\n             application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n         \n         if (rmContainer !\u003d null) {\n           assignment.setFulfilledReservation(true);\n         }\n       }\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource + \" type\u003d\" + assignment.getType());\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c57eac5dfe277845ab4522a1188023a73ee41539",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource);\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/AbstractContainerAllocator.java",
        "oldMethodName": "getCSAssignmentFromAllocateResult",
        "newMethodName": "getCSAssignmentFromAllocateResult"
      }
    },
    "e5003be907acef87c2770e3f2914953f62017b0e": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
      "commitDate": "12/08/15 3:07 PM",
      "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
          "commitDate": "12/08/15 3:07 PM",
          "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/15 2:15 AM",
          "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
          "commitAuthorOld": "rohithsharmaks",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,61 @@\n-  private CSAssignment getCSAssignmentFromAllocateResult(\n-      Resource clusterResource, ContainerAllocation result) {\n+  protected CSAssignment getCSAssignmentFromAllocateResult(\n+      Resource clusterResource, ContainerAllocation result,\n+      RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n-    assignment.setApplication(this);\n+    assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n-      \n+\n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n-        LOG.info(\"Reserved container \" + \" application\u003d\" + getApplicationId()\n-            + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n-            + this.toString() + \" cluster\u003d\" + clusterResource);\n+        LOG.info(\"Reserved container \" + \" application\u003d\"\n+            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n+            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n-        assignment.setFulfilledReservation(true);\n-      } else {\n+      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n-            + getApplicationAttemptId() + \" container\u003d\"\n+            + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource);\n \n-        getCSLeafQueue().getOrderingPolicy().containerAllocated(this,\n-            getRMContainer(updatedContainer.getId()));\n+        application\n+            .getCSLeafQueue()\n+            .getOrderingPolicy()\n+            .containerAllocated(application,\n+                application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n+        \n+        if (rmContainer !\u003d null) {\n+          assignment.setFulfilledReservation(true);\n+        }\n       }\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource);\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
            "oldMethodName": "getCSAssignmentFromAllocateResult",
            "newMethodName": "getCSAssignmentFromAllocateResult"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
          "commitDate": "12/08/15 3:07 PM",
          "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/15 2:15 AM",
          "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
          "commitAuthorOld": "rohithsharmaks",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,61 @@\n-  private CSAssignment getCSAssignmentFromAllocateResult(\n-      Resource clusterResource, ContainerAllocation result) {\n+  protected CSAssignment getCSAssignmentFromAllocateResult(\n+      Resource clusterResource, ContainerAllocation result,\n+      RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n-    assignment.setApplication(this);\n+    assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n-      \n+\n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n-        LOG.info(\"Reserved container \" + \" application\u003d\" + getApplicationId()\n-            + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n-            + this.toString() + \" cluster\u003d\" + clusterResource);\n+        LOG.info(\"Reserved container \" + \" application\u003d\"\n+            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n+            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n-        assignment.setFulfilledReservation(true);\n-      } else {\n+      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n-            + getApplicationAttemptId() + \" container\u003d\"\n+            + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource);\n \n-        getCSLeafQueue().getOrderingPolicy().containerAllocated(this,\n-            getRMContainer(updatedContainer.getId()));\n+        application\n+            .getCSLeafQueue()\n+            .getOrderingPolicy()\n+            .containerAllocated(application,\n+                application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n+        \n+        if (rmContainer !\u003d null) {\n+          assignment.setFulfilledReservation(true);\n+        }\n       }\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource);\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
          "commitDate": "12/08/15 3:07 PM",
          "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/15 2:15 AM",
          "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
          "commitAuthorOld": "rohithsharmaks",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,61 @@\n-  private CSAssignment getCSAssignmentFromAllocateResult(\n-      Resource clusterResource, ContainerAllocation result) {\n+  protected CSAssignment getCSAssignmentFromAllocateResult(\n+      Resource clusterResource, ContainerAllocation result,\n+      RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n-    assignment.setApplication(this);\n+    assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n-      \n+\n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n-        LOG.info(\"Reserved container \" + \" application\u003d\" + getApplicationId()\n-            + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n-            + this.toString() + \" cluster\u003d\" + clusterResource);\n+        LOG.info(\"Reserved container \" + \" application\u003d\"\n+            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n+            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n-        assignment.setFulfilledReservation(true);\n-      } else {\n+      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n-            + getApplicationAttemptId() + \" container\u003d\"\n+            + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource);\n \n-        getCSLeafQueue().getOrderingPolicy().containerAllocated(this,\n-            getRMContainer(updatedContainer.getId()));\n+        application\n+            .getCSLeafQueue()\n+            .getOrderingPolicy()\n+            .containerAllocated(application,\n+                application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n+        \n+        if (rmContainer !\u003d null) {\n+          assignment.setFulfilledReservation(true);\n+        }\n       }\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource);\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
          "commitDate": "12/08/15 3:07 PM",
          "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/15 2:15 AM",
          "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
          "commitAuthorOld": "rohithsharmaks",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,61 @@\n-  private CSAssignment getCSAssignmentFromAllocateResult(\n-      Resource clusterResource, ContainerAllocation result) {\n+  protected CSAssignment getCSAssignmentFromAllocateResult(\n+      Resource clusterResource, ContainerAllocation result,\n+      RMContainer rmContainer) {\n     // Handle skipped\n     boolean skipped \u003d\n         (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n     CSAssignment assignment \u003d new CSAssignment(skipped);\n-    assignment.setApplication(this);\n+    assignment.setApplication(application);\n     \n     // Handle excess reservation\n     assignment.setExcessReservation(result.getContainerToBeUnreserved());\n \n     // If we allocated something\n     if (Resources.greaterThan(rc, clusterResource,\n         result.getResourceToBeAllocated(), Resources.none())) {\n       Resource allocatedResource \u003d result.getResourceToBeAllocated();\n       Container updatedContainer \u003d result.getUpdatedContainer();\n-      \n+\n       assignment.setResource(allocatedResource);\n       assignment.setType(result.getContainerNodeType());\n \n       if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n         // This is a reserved container\n-        LOG.info(\"Reserved container \" + \" application\u003d\" + getApplicationId()\n-            + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n-            + this.toString() + \" cluster\u003d\" + clusterResource);\n+        LOG.info(\"Reserved container \" + \" application\u003d\"\n+            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n+            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n         assignment.getAssignmentInformation().addReservationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrReservations();\n         Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n             allocatedResource);\n-        assignment.setFulfilledReservation(true);\n-      } else {\n+      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n         // This is a new container\n         // Inform the ordering policy\n         LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n-            + getApplicationAttemptId() + \" container\u003d\"\n+            + application.getApplicationAttemptId() + \" container\u003d\"\n             + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n             + clusterResource);\n \n-        getCSLeafQueue().getOrderingPolicy().containerAllocated(this,\n-            getRMContainer(updatedContainer.getId()));\n+        application\n+            .getCSLeafQueue()\n+            .getOrderingPolicy()\n+            .containerAllocated(application,\n+                application.getRMContainer(updatedContainer.getId()));\n \n         assignment.getAssignmentInformation().addAllocationDetails(\n-            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+            updatedContainer.getId(),\n+            application.getCSLeafQueue().getQueuePath());\n         assignment.getAssignmentInformation().incrAllocations();\n         Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n             allocatedResource);\n+        \n+        if (rmContainer !\u003d null) {\n+          assignment.setFulfilledReservation(true);\n+        }\n       }\n     }\n     \n     return assignment;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result,\n      RMContainer rmContainer) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(application);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n\n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\"\n            + application.getApplicationId() + \" resource\u003d\" + allocatedResource\n            + \" queue\u003d\" + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n      } else if (result.getAllocationState() \u003d\u003d AllocationState.ALLOCATED){\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + application.getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource);\n\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n            .containerAllocated(application,\n                application.getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(),\n            application.getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n        \n        if (rmContainer !\u003d null) {\n          assignment.setFulfilledReservation(true);\n        }\n      }\n    }\n    \n    return assignment;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, result-ContainerAllocation]",
            "newValue": "[clusterResource-Resource, result-ContainerAllocation, rmContainer-RMContainer]"
          }
        }
      ]
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,52 @@\n+  private CSAssignment getCSAssignmentFromAllocateResult(\n+      Resource clusterResource, ContainerAllocation result) {\n+    // Handle skipped\n+    boolean skipped \u003d\n+        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n+    CSAssignment assignment \u003d new CSAssignment(skipped);\n+    assignment.setApplication(this);\n+    \n+    // Handle excess reservation\n+    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n+\n+    // If we allocated something\n+    if (Resources.greaterThan(rc, clusterResource,\n+        result.getResourceToBeAllocated(), Resources.none())) {\n+      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n+      Container updatedContainer \u003d result.getUpdatedContainer();\n+      \n+      assignment.setResource(allocatedResource);\n+      assignment.setType(result.getContainerNodeType());\n+\n+      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n+        // This is a reserved container\n+        LOG.info(\"Reserved container \" + \" application\u003d\" + getApplicationId()\n+            + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n+            + this.toString() + \" cluster\u003d\" + clusterResource);\n+        assignment.getAssignmentInformation().addReservationDetails(\n+            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+        assignment.getAssignmentInformation().incrReservations();\n+        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n+            allocatedResource);\n+        assignment.setFulfilledReservation(true);\n+      } else {\n+        // This is a new container\n+        // Inform the ordering policy\n+        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n+            + getApplicationAttemptId() + \" container\u003d\"\n+            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n+            + clusterResource);\n+\n+        getCSLeafQueue().getOrderingPolicy().containerAllocated(this,\n+            getRMContainer(updatedContainer.getId()));\n+\n+        assignment.getAssignmentInformation().addAllocationDetails(\n+            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n+        assignment.getAssignmentInformation().incrAllocations();\n+        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n+            allocatedResource);\n+      }\n+    }\n+    \n+    return assignment;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment getCSAssignmentFromAllocateResult(\n      Resource clusterResource, ContainerAllocation result) {\n    // Handle skipped\n    boolean skipped \u003d\n        (result.getAllocationState() \u003d\u003d AllocationState.APP_SKIPPED);\n    CSAssignment assignment \u003d new CSAssignment(skipped);\n    assignment.setApplication(this);\n    \n    // Handle excess reservation\n    assignment.setExcessReservation(result.getContainerToBeUnreserved());\n\n    // If we allocated something\n    if (Resources.greaterThan(rc, clusterResource,\n        result.getResourceToBeAllocated(), Resources.none())) {\n      Resource allocatedResource \u003d result.getResourceToBeAllocated();\n      Container updatedContainer \u003d result.getUpdatedContainer();\n      \n      assignment.setResource(allocatedResource);\n      assignment.setType(result.getContainerNodeType());\n\n      if (result.getAllocationState() \u003d\u003d AllocationState.RESERVED) {\n        // This is a reserved container\n        LOG.info(\"Reserved container \" + \" application\u003d\" + getApplicationId()\n            + \" resource\u003d\" + allocatedResource + \" queue\u003d\"\n            + this.toString() + \" cluster\u003d\" + clusterResource);\n        assignment.getAssignmentInformation().addReservationDetails(\n            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrReservations();\n        Resources.addTo(assignment.getAssignmentInformation().getReserved(),\n            allocatedResource);\n        assignment.setFulfilledReservation(true);\n      } else {\n        // This is a new container\n        // Inform the ordering policy\n        LOG.info(\"assignedContainer\" + \" application attempt\u003d\"\n            + getApplicationAttemptId() + \" container\u003d\"\n            + updatedContainer.getId() + \" queue\u003d\" + this + \" clusterResource\u003d\"\n            + clusterResource);\n\n        getCSLeafQueue().getOrderingPolicy().containerAllocated(this,\n            getRMContainer(updatedContainer.getId()));\n\n        assignment.getAssignmentInformation().addAllocationDetails(\n            updatedContainer.getId(), getCSLeafQueue().getQueuePath());\n        assignment.getAssignmentInformation().incrAllocations();\n        Resources.addTo(assignment.getAssignmentInformation().getAllocated(),\n            allocatedResource);\n      }\n    }\n    \n    return assignment;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
    }
  }
}