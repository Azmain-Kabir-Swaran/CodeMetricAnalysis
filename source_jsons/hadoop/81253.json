{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetworkTopology.java",
  "functionName": "getWeightUsingNetworkLocation",
  "functionId": "getWeightUsingNetworkLocation___reader-Node__node-Node",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
  "functionStartLine": 798,
  "functionEndLine": 835,
  "numCommitsSeen": 49,
  "timeTaken": 1881,
  "changeHistory": [
    "389e640f0cc7d8528e9b4411457f04a528601c69",
    "c73e08a6dad46cad14b38a4a586a5cda1622b206"
  ],
  "changeHistoryShort": {
    "389e640f0cc7d8528e9b4411457f04a528601c69": "Ymultichange(Ymodifierchange,Ybodychange)",
    "c73e08a6dad46cad14b38a4a586a5cda1622b206": "Yintroduced"
  },
  "changeHistoryDetails": {
    "389e640f0cc7d8528e9b4411457f04a528601c69": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-16161. NetworkTopology#getWeightUsingNetworkLocation return unexpected result. Contributed by He Xiaoqiao.\n",
      "commitDate": "13/05/19 11:46 AM",
      "commitName": "389e640f0cc7d8528e9b4411457f04a528601c69",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16161. NetworkTopology#getWeightUsingNetworkLocation return unexpected result. Contributed by He Xiaoqiao.\n",
          "commitDate": "13/05/19 11:46 AM",
          "commitName": "389e640f0cc7d8528e9b4411457f04a528601c69",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/01/19 10:54 AM",
          "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 121.99,
          "commitsBetweenForRepo": 874,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  private static int getWeightUsingNetworkLocation(Node reader, Node node) {\n+  protected static int getWeightUsingNetworkLocation(Node reader, Node node) {\n     //Start off by initializing to Integer.MAX_VALUE\n     int weight \u003d Integer.MAX_VALUE;\n     if(reader !\u003d null \u0026\u0026 node !\u003d null) {\n       String readerPath \u003d normalizeNetworkLocationPath(\n           reader.getNetworkLocation());\n       String nodePath \u003d normalizeNetworkLocationPath(\n           node.getNetworkLocation());\n \n       //same rack\n       if(readerPath.equals(nodePath)) {\n         if(reader.getName().equals(node.getName())) {\n           weight \u003d 0;\n         } else {\n           weight \u003d 2;\n         }\n       } else {\n         String[] readerPathToken \u003d readerPath.split(PATH_SEPARATOR_STR);\n         String[] nodePathToken \u003d nodePath.split(PATH_SEPARATOR_STR);\n         int maxLevelToCompare \u003d readerPathToken.length \u003e nodePathToken.length ?\n             nodePathToken.length : readerPathToken.length;\n         int currentLevel \u003d 1;\n         //traverse through the path and calculate the distance\n         while(currentLevel \u003c maxLevelToCompare) {\n           if(!readerPathToken[currentLevel]\n               .equals(nodePathToken[currentLevel])){\n             break;\n           }\n           currentLevel++;\n         }\n+        // +2 to correct the weight between reader and node rather than\n+        // between parent of reader and parent of node.\n         weight \u003d (readerPathToken.length - currentLevel) +\n-            (nodePathToken.length - currentLevel);\n+            (nodePathToken.length - currentLevel) + 2;\n       }\n     }\n     return weight;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getWeightUsingNetworkLocation(Node reader, Node node) {\n    //Start off by initializing to Integer.MAX_VALUE\n    int weight \u003d Integer.MAX_VALUE;\n    if(reader !\u003d null \u0026\u0026 node !\u003d null) {\n      String readerPath \u003d normalizeNetworkLocationPath(\n          reader.getNetworkLocation());\n      String nodePath \u003d normalizeNetworkLocationPath(\n          node.getNetworkLocation());\n\n      //same rack\n      if(readerPath.equals(nodePath)) {\n        if(reader.getName().equals(node.getName())) {\n          weight \u003d 0;\n        } else {\n          weight \u003d 2;\n        }\n      } else {\n        String[] readerPathToken \u003d readerPath.split(PATH_SEPARATOR_STR);\n        String[] nodePathToken \u003d nodePath.split(PATH_SEPARATOR_STR);\n        int maxLevelToCompare \u003d readerPathToken.length \u003e nodePathToken.length ?\n            nodePathToken.length : readerPathToken.length;\n        int currentLevel \u003d 1;\n        //traverse through the path and calculate the distance\n        while(currentLevel \u003c maxLevelToCompare) {\n          if(!readerPathToken[currentLevel]\n              .equals(nodePathToken[currentLevel])){\n            break;\n          }\n          currentLevel++;\n        }\n        // +2 to correct the weight between reader and node rather than\n        // between parent of reader and parent of node.\n        weight \u003d (readerPathToken.length - currentLevel) +\n            (nodePathToken.length - currentLevel) + 2;\n      }\n    }\n    return weight;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16161. NetworkTopology#getWeightUsingNetworkLocation return unexpected result. Contributed by He Xiaoqiao.\n",
          "commitDate": "13/05/19 11:46 AM",
          "commitName": "389e640f0cc7d8528e9b4411457f04a528601c69",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/01/19 10:54 AM",
          "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 121.99,
          "commitsBetweenForRepo": 874,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  private static int getWeightUsingNetworkLocation(Node reader, Node node) {\n+  protected static int getWeightUsingNetworkLocation(Node reader, Node node) {\n     //Start off by initializing to Integer.MAX_VALUE\n     int weight \u003d Integer.MAX_VALUE;\n     if(reader !\u003d null \u0026\u0026 node !\u003d null) {\n       String readerPath \u003d normalizeNetworkLocationPath(\n           reader.getNetworkLocation());\n       String nodePath \u003d normalizeNetworkLocationPath(\n           node.getNetworkLocation());\n \n       //same rack\n       if(readerPath.equals(nodePath)) {\n         if(reader.getName().equals(node.getName())) {\n           weight \u003d 0;\n         } else {\n           weight \u003d 2;\n         }\n       } else {\n         String[] readerPathToken \u003d readerPath.split(PATH_SEPARATOR_STR);\n         String[] nodePathToken \u003d nodePath.split(PATH_SEPARATOR_STR);\n         int maxLevelToCompare \u003d readerPathToken.length \u003e nodePathToken.length ?\n             nodePathToken.length : readerPathToken.length;\n         int currentLevel \u003d 1;\n         //traverse through the path and calculate the distance\n         while(currentLevel \u003c maxLevelToCompare) {\n           if(!readerPathToken[currentLevel]\n               .equals(nodePathToken[currentLevel])){\n             break;\n           }\n           currentLevel++;\n         }\n+        // +2 to correct the weight between reader and node rather than\n+        // between parent of reader and parent of node.\n         weight \u003d (readerPathToken.length - currentLevel) +\n-            (nodePathToken.length - currentLevel);\n+            (nodePathToken.length - currentLevel) + 2;\n       }\n     }\n     return weight;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getWeightUsingNetworkLocation(Node reader, Node node) {\n    //Start off by initializing to Integer.MAX_VALUE\n    int weight \u003d Integer.MAX_VALUE;\n    if(reader !\u003d null \u0026\u0026 node !\u003d null) {\n      String readerPath \u003d normalizeNetworkLocationPath(\n          reader.getNetworkLocation());\n      String nodePath \u003d normalizeNetworkLocationPath(\n          node.getNetworkLocation());\n\n      //same rack\n      if(readerPath.equals(nodePath)) {\n        if(reader.getName().equals(node.getName())) {\n          weight \u003d 0;\n        } else {\n          weight \u003d 2;\n        }\n      } else {\n        String[] readerPathToken \u003d readerPath.split(PATH_SEPARATOR_STR);\n        String[] nodePathToken \u003d nodePath.split(PATH_SEPARATOR_STR);\n        int maxLevelToCompare \u003d readerPathToken.length \u003e nodePathToken.length ?\n            nodePathToken.length : readerPathToken.length;\n        int currentLevel \u003d 1;\n        //traverse through the path and calculate the distance\n        while(currentLevel \u003c maxLevelToCompare) {\n          if(!readerPathToken[currentLevel]\n              .equals(nodePathToken[currentLevel])){\n            break;\n          }\n          currentLevel++;\n        }\n        // +2 to correct the weight between reader and node rather than\n        // between parent of reader and parent of node.\n        weight \u003d (readerPathToken.length - currentLevel) +\n            (nodePathToken.length - currentLevel) + 2;\n      }\n    }\n    return weight;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
          "extendedDetails": {}
        }
      ]
    },
    "c73e08a6dad46cad14b38a4a586a5cda1622b206": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10206. Datanodes not sorted properly by distance when the reader isn\u0027t a datanode. (Nandakumar via mingma)\n",
      "commitDate": "07/12/16 8:26 AM",
      "commitName": "c73e08a6dad46cad14b38a4a586a5cda1622b206",
      "commitAuthor": "Ming Ma",
      "diff": "@@ -0,0 +1,36 @@\n+  private static int getWeightUsingNetworkLocation(Node reader, Node node) {\n+    //Start off by initializing to Integer.MAX_VALUE\n+    int weight \u003d Integer.MAX_VALUE;\n+    if(reader !\u003d null \u0026\u0026 node !\u003d null) {\n+      String readerPath \u003d normalizeNetworkLocationPath(\n+          reader.getNetworkLocation());\n+      String nodePath \u003d normalizeNetworkLocationPath(\n+          node.getNetworkLocation());\n+\n+      //same rack\n+      if(readerPath.equals(nodePath)) {\n+        if(reader.getName().equals(node.getName())) {\n+          weight \u003d 0;\n+        } else {\n+          weight \u003d 2;\n+        }\n+      } else {\n+        String[] readerPathToken \u003d readerPath.split(PATH_SEPARATOR_STR);\n+        String[] nodePathToken \u003d nodePath.split(PATH_SEPARATOR_STR);\n+        int maxLevelToCompare \u003d readerPathToken.length \u003e nodePathToken.length ?\n+            nodePathToken.length : readerPathToken.length;\n+        int currentLevel \u003d 1;\n+        //traverse through the path and calculate the distance\n+        while(currentLevel \u003c maxLevelToCompare) {\n+          if(!readerPathToken[currentLevel]\n+              .equals(nodePathToken[currentLevel])){\n+            break;\n+          }\n+          currentLevel++;\n+        }\n+        weight \u003d (readerPathToken.length - currentLevel) +\n+            (nodePathToken.length - currentLevel);\n+      }\n+    }\n+    return weight;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static int getWeightUsingNetworkLocation(Node reader, Node node) {\n    //Start off by initializing to Integer.MAX_VALUE\n    int weight \u003d Integer.MAX_VALUE;\n    if(reader !\u003d null \u0026\u0026 node !\u003d null) {\n      String readerPath \u003d normalizeNetworkLocationPath(\n          reader.getNetworkLocation());\n      String nodePath \u003d normalizeNetworkLocationPath(\n          node.getNetworkLocation());\n\n      //same rack\n      if(readerPath.equals(nodePath)) {\n        if(reader.getName().equals(node.getName())) {\n          weight \u003d 0;\n        } else {\n          weight \u003d 2;\n        }\n      } else {\n        String[] readerPathToken \u003d readerPath.split(PATH_SEPARATOR_STR);\n        String[] nodePathToken \u003d nodePath.split(PATH_SEPARATOR_STR);\n        int maxLevelToCompare \u003d readerPathToken.length \u003e nodePathToken.length ?\n            nodePathToken.length : readerPathToken.length;\n        int currentLevel \u003d 1;\n        //traverse through the path and calculate the distance\n        while(currentLevel \u003c maxLevelToCompare) {\n          if(!readerPathToken[currentLevel]\n              .equals(nodePathToken[currentLevel])){\n            break;\n          }\n          currentLevel++;\n        }\n        weight \u003d (readerPathToken.length - currentLevel) +\n            (nodePathToken.length - currentLevel);\n      }\n    }\n    return weight;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
    }
  }
}