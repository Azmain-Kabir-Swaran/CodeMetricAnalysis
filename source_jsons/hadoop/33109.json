{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceMappingManager.java",
  "functionName": "internalAssignDevices",
  "functionId": "internalAssignDevices___resourceName-String__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
  "functionStartLine": 160,
  "functionEndLine": 214,
  "numCommitsSeen": 5,
  "timeTaken": 2576,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
    "579ef4be063745c5211127eca83a393ceddc8b79"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": "Ybodychange",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Ybodychange",
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87": "Ybodychange",
    "579ef4be063745c5211127eca83a393ceddc8b79": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/02/19 1:07 AM",
      "commitNameOld": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 22.37,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,55 @@\n   private synchronized DeviceAllocation internalAssignDevices(\n       String resourceName, Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n         requestedResource);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Try allocating \" + requestedDeviceCount\n-          + \" \" + resourceName);\n-    }\n+    LOG.debug(\"Try allocating {} {}\", requestedDeviceCount, resourceName);\n     // Assign devices to container if requested some.\n     if (requestedDeviceCount \u003e 0) {\n       if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n         // If there are some devices which are getting released, wait for few\n         // seconds to get it.\n         if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n             + getAvailableDevices(resourceName)) {\n           return null;\n         }\n       }\n \n       int availableDeviceCount \u003d getAvailableDevices(resourceName);\n       if (requestedDeviceCount \u003e availableDeviceCount) {\n         throw new ResourceHandlerException(\"Failed to find enough \"\n             + resourceName\n             + \", requestor\u003d\" + containerId\n             + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n             + availableDeviceCount);\n       }\n \n       Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n       Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n       Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n       DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n       // Prefer DevicePluginScheduler logic\n       pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n           container, requestedDeviceCount, resourceName, dps);\n \n       // Record in state store if we allocated anything\n       if (!assignedDevices.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               resourceName,\n               new ArrayList\u003c\u003e(assignedDevices));\n         } catch (IOException e) {\n           cleanupAssignedDevices(resourceName, containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new DeviceAllocation(resourceName, assignedDevices,\n           Sets.difference(allowedDevices, assignedDevices));\n     }\n     return new DeviceAllocation(resourceName, null,\n         allAllowedDevices.get(resourceName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized DeviceAllocation internalAssignDevices(\n      String resourceName, Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n        requestedResource);\n    LOG.debug(\"Try allocating {} {}\", requestedDeviceCount, resourceName);\n    // Assign devices to container if requested some.\n    if (requestedDeviceCount \u003e 0) {\n      if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n            + getAvailableDevices(resourceName)) {\n          return null;\n        }\n      }\n\n      int availableDeviceCount \u003d getAvailableDevices(resourceName);\n      if (requestedDeviceCount \u003e availableDeviceCount) {\n        throw new ResourceHandlerException(\"Failed to find enough \"\n            + resourceName\n            + \", requestor\u003d\" + containerId\n            + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n            + availableDeviceCount);\n      }\n\n      Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n      Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n      Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n      DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n      // Prefer DevicePluginScheduler logic\n      pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n          container, requestedDeviceCount, resourceName, dps);\n\n      // Record in state store if we allocated anything\n      if (!assignedDevices.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              resourceName,\n              new ArrayList\u003c\u003e(assignedDevices));\n        } catch (IOException e) {\n          cleanupAssignedDevices(resourceName, containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new DeviceAllocation(resourceName, assignedDevices,\n          Sets.difference(allowedDevices, assignedDevices));\n    }\n    return new DeviceAllocation(resourceName, null,\n        allAllowedDevices.get(resourceName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
      "extendedDetails": {}
    },
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
      "commitDate": "24/02/19 1:07 AM",
      "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/02/19 2:28 AM",
      "commitNameOld": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private synchronized DeviceAllocation internalAssignDevices(\n       String resourceName, Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n         requestedResource);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try allocating \" + requestedDeviceCount\n           + \" \" + resourceName);\n     }\n     // Assign devices to container if requested some.\n     if (requestedDeviceCount \u003e 0) {\n       if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n         // If there are some devices which are getting released, wait for few\n         // seconds to get it.\n         if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n             + getAvailableDevices(resourceName)) {\n           return null;\n         }\n       }\n \n       int availableDeviceCount \u003d getAvailableDevices(resourceName);\n       if (requestedDeviceCount \u003e availableDeviceCount) {\n         throw new ResourceHandlerException(\"Failed to find enough \"\n             + resourceName\n             + \", requestor\u003d\" + containerId\n             + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n             + availableDeviceCount);\n       }\n \n       Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n       Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n       Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n       DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n       // Prefer DevicePluginScheduler logic\n       pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n-          containerId, requestedDeviceCount, resourceName, dps);\n+          container, requestedDeviceCount, resourceName, dps);\n \n       // Record in state store if we allocated anything\n       if (!assignedDevices.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               resourceName,\n               new ArrayList\u003c\u003e(assignedDevices));\n         } catch (IOException e) {\n           cleanupAssignedDevices(resourceName, containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new DeviceAllocation(resourceName, assignedDevices,\n           Sets.difference(allowedDevices, assignedDevices));\n     }\n     return new DeviceAllocation(resourceName, null,\n         allAllowedDevices.get(resourceName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized DeviceAllocation internalAssignDevices(\n      String resourceName, Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n        requestedResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try allocating \" + requestedDeviceCount\n          + \" \" + resourceName);\n    }\n    // Assign devices to container if requested some.\n    if (requestedDeviceCount \u003e 0) {\n      if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n            + getAvailableDevices(resourceName)) {\n          return null;\n        }\n      }\n\n      int availableDeviceCount \u003d getAvailableDevices(resourceName);\n      if (requestedDeviceCount \u003e availableDeviceCount) {\n        throw new ResourceHandlerException(\"Failed to find enough \"\n            + resourceName\n            + \", requestor\u003d\" + containerId\n            + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n            + availableDeviceCount);\n      }\n\n      Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n      Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n      Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n      DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n      // Prefer DevicePluginScheduler logic\n      pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n          container, requestedDeviceCount, resourceName, dps);\n\n      // Record in state store if we allocated anything\n      if (!assignedDevices.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              resourceName,\n              new ArrayList\u003c\u003e(assignedDevices));\n        } catch (IOException e) {\n          cleanupAssignedDevices(resourceName, containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new DeviceAllocation(resourceName, assignedDevices,\n          Sets.difference(allowedDevices, assignedDevices));\n    }\n    return new DeviceAllocation(resourceName, null,\n        allAllowedDevices.get(resourceName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
      "extendedDetails": {}
    },
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/12/18 11:44 AM",
      "commitNameOld": "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 67.61,
      "commitsBetweenForRepo": 454,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   private synchronized DeviceAllocation internalAssignDevices(\n       String resourceName, Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n         requestedResource);\n-    LOG.debug(\"Try allocating \" + requestedDeviceCount\n-        + \" \" + resourceName);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Try allocating \" + requestedDeviceCount\n+          + \" \" + resourceName);\n+    }\n     // Assign devices to container if requested some.\n     if (requestedDeviceCount \u003e 0) {\n       if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n         // If there are some devices which are getting released, wait for few\n         // seconds to get it.\n         if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n             + getAvailableDevices(resourceName)) {\n           return null;\n         }\n       }\n \n       int availableDeviceCount \u003d getAvailableDevices(resourceName);\n       if (requestedDeviceCount \u003e availableDeviceCount) {\n         throw new ResourceHandlerException(\"Failed to find enough \"\n             + resourceName\n             + \", requestor\u003d\" + containerId\n             + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n             + availableDeviceCount);\n       }\n \n       Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n       Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n       Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n       DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n       // Prefer DevicePluginScheduler logic\n       pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n           containerId, requestedDeviceCount, resourceName, dps);\n \n       // Record in state store if we allocated anything\n       if (!assignedDevices.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               resourceName,\n               new ArrayList\u003c\u003e(assignedDevices));\n         } catch (IOException e) {\n           cleanupAssignedDevices(resourceName, containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new DeviceAllocation(resourceName, assignedDevices,\n           Sets.difference(allowedDevices, assignedDevices));\n     }\n     return new DeviceAllocation(resourceName, null,\n         allAllowedDevices.get(resourceName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized DeviceAllocation internalAssignDevices(\n      String resourceName, Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n        requestedResource);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try allocating \" + requestedDeviceCount\n          + \" \" + resourceName);\n    }\n    // Assign devices to container if requested some.\n    if (requestedDeviceCount \u003e 0) {\n      if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n            + getAvailableDevices(resourceName)) {\n          return null;\n        }\n      }\n\n      int availableDeviceCount \u003d getAvailableDevices(resourceName);\n      if (requestedDeviceCount \u003e availableDeviceCount) {\n        throw new ResourceHandlerException(\"Failed to find enough \"\n            + resourceName\n            + \", requestor\u003d\" + containerId\n            + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n            + availableDeviceCount);\n      }\n\n      Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n      Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n      Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n      DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n      // Prefer DevicePluginScheduler logic\n      pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n          containerId, requestedDeviceCount, resourceName, dps);\n\n      // Record in state store if we allocated anything\n      if (!assignedDevices.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              resourceName,\n              new ArrayList\u003c\u003e(assignedDevices));\n        } catch (IOException e) {\n          cleanupAssignedDevices(resourceName, containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new DeviceAllocation(resourceName, assignedDevices,\n          Sets.difference(allowedDevices, assignedDevices));\n    }\n    return new DeviceAllocation(resourceName, null,\n        allAllowedDevices.get(resourceName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
      "extendedDetails": {}
    },
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9015. [DevicePlugin] Add an interface for device plugin to provide customized scheduler. (Zhankun Tang via wangda)\n\nChange-Id: Ib2e4ae47a6f29bb3082c1f8520cf5a52ca720979\n",
      "commitDate": "12/12/18 11:44 AM",
      "commitName": "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/11/18 2:09 PM",
      "commitNameOld": "579ef4be063745c5211127eca83a393ceddc8b79",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.9,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   private synchronized DeviceAllocation internalAssignDevices(\n       String resourceName, Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n         requestedResource);\n     LOG.debug(\"Try allocating \" + requestedDeviceCount\n         + \" \" + resourceName);\n     // Assign devices to container if requested some.\n     if (requestedDeviceCount \u003e 0) {\n       if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n         // If there are some devices which are getting released, wait for few\n         // seconds to get it.\n         if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n             + getAvailableDevices(resourceName)) {\n           return null;\n         }\n       }\n \n       int availableDeviceCount \u003d getAvailableDevices(resourceName);\n       if (requestedDeviceCount \u003e availableDeviceCount) {\n         throw new ResourceHandlerException(\"Failed to find enough \"\n             + resourceName\n             + \", requestor\u003d\" + containerId\n             + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n             + availableDeviceCount);\n       }\n \n       Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n       Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n       Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n-\n-      defaultScheduleAction(allowedDevices, usedDevices,\n-          assignedDevices, containerId, requestedDeviceCount);\n+      DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n+      // Prefer DevicePluginScheduler logic\n+      pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n+          containerId, requestedDeviceCount, resourceName, dps);\n \n       // Record in state store if we allocated anything\n       if (!assignedDevices.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container,\n               resourceName,\n               new ArrayList\u003c\u003e(assignedDevices));\n         } catch (IOException e) {\n           cleanupAssignedDevices(resourceName, containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new DeviceAllocation(resourceName, assignedDevices,\n           Sets.difference(allowedDevices, assignedDevices));\n     }\n     return new DeviceAllocation(resourceName, null,\n         allAllowedDevices.get(resourceName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized DeviceAllocation internalAssignDevices(\n      String resourceName, Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n        requestedResource);\n    LOG.debug(\"Try allocating \" + requestedDeviceCount\n        + \" \" + resourceName);\n    // Assign devices to container if requested some.\n    if (requestedDeviceCount \u003e 0) {\n      if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n            + getAvailableDevices(resourceName)) {\n          return null;\n        }\n      }\n\n      int availableDeviceCount \u003d getAvailableDevices(resourceName);\n      if (requestedDeviceCount \u003e availableDeviceCount) {\n        throw new ResourceHandlerException(\"Failed to find enough \"\n            + resourceName\n            + \", requestor\u003d\" + containerId\n            + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n            + availableDeviceCount);\n      }\n\n      Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n      Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n      Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n      DevicePluginScheduler dps \u003d devicePluginSchedulers.get(resourceName);\n      // Prefer DevicePluginScheduler logic\n      pickAndDoSchedule(allowedDevices, usedDevices, assignedDevices,\n          containerId, requestedDeviceCount, resourceName, dps);\n\n      // Record in state store if we allocated anything\n      if (!assignedDevices.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              resourceName,\n              new ArrayList\u003c\u003e(assignedDevices));\n        } catch (IOException e) {\n          cleanupAssignedDevices(resourceName, containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new DeviceAllocation(resourceName, assignedDevices,\n          Sets.difference(allowedDevices, assignedDevices));\n    }\n    return new DeviceAllocation(resourceName, null,\n        allAllowedDevices.get(resourceName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
      "extendedDetails": {}
    },
    "579ef4be063745c5211127eca83a393ceddc8b79": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8882. [YARN-8851] Add a shared device mapping manager (scheduler) for device plugins. (Zhankun Tang via wangda)\n\nChange-Id: I9435136642c3d556971a357bf687f69df90bb45e\n",
      "commitDate": "28/11/18 2:09 PM",
      "commitName": "579ef4be063745c5211127eca83a393ceddc8b79",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,55 @@\n+  private synchronized DeviceAllocation internalAssignDevices(\n+      String resourceName, Container container)\n+      throws ResourceHandlerException {\n+    Resource requestedResource \u003d container.getResource();\n+    ContainerId containerId \u003d container.getContainerId();\n+    int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n+        requestedResource);\n+    LOG.debug(\"Try allocating \" + requestedDeviceCount\n+        + \" \" + resourceName);\n+    // Assign devices to container if requested some.\n+    if (requestedDeviceCount \u003e 0) {\n+      if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n+        // If there are some devices which are getting released, wait for few\n+        // seconds to get it.\n+        if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n+            + getAvailableDevices(resourceName)) {\n+          return null;\n+        }\n+      }\n+\n+      int availableDeviceCount \u003d getAvailableDevices(resourceName);\n+      if (requestedDeviceCount \u003e availableDeviceCount) {\n+        throw new ResourceHandlerException(\"Failed to find enough \"\n+            + resourceName\n+            + \", requestor\u003d\" + containerId\n+            + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n+            + availableDeviceCount);\n+      }\n+\n+      Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n+      Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n+      Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n+\n+      defaultScheduleAction(allowedDevices, usedDevices,\n+          assignedDevices, containerId, requestedDeviceCount);\n+\n+      // Record in state store if we allocated anything\n+      if (!assignedDevices.isEmpty()) {\n+        try {\n+          // Update state store.\n+          nmContext.getNMStateStore().storeAssignedResources(container,\n+              resourceName,\n+              new ArrayList\u003c\u003e(assignedDevices));\n+        } catch (IOException e) {\n+          cleanupAssignedDevices(resourceName, containerId);\n+          throw new ResourceHandlerException(e);\n+        }\n+      }\n+\n+      return new DeviceAllocation(resourceName, assignedDevices,\n+          Sets.difference(allowedDevices, assignedDevices));\n+    }\n+    return new DeviceAllocation(resourceName, null,\n+        allAllowedDevices.get(resourceName));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized DeviceAllocation internalAssignDevices(\n      String resourceName, Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int requestedDeviceCount \u003d getRequestedDeviceCount(resourceName,\n        requestedResource);\n    LOG.debug(\"Try allocating \" + requestedDeviceCount\n        + \" \" + resourceName);\n    // Assign devices to container if requested some.\n    if (requestedDeviceCount \u003e 0) {\n      if (requestedDeviceCount \u003e getAvailableDevices(resourceName)) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (requestedDeviceCount \u003c\u003d getReleasingDevices(resourceName)\n            + getAvailableDevices(resourceName)) {\n          return null;\n        }\n      }\n\n      int availableDeviceCount \u003d getAvailableDevices(resourceName);\n      if (requestedDeviceCount \u003e availableDeviceCount) {\n        throw new ResourceHandlerException(\"Failed to find enough \"\n            + resourceName\n            + \", requestor\u003d\" + containerId\n            + \", #Requested\u003d\" + requestedDeviceCount + \", #available\u003d\"\n            + availableDeviceCount);\n      }\n\n      Set\u003cDevice\u003e assignedDevices \u003d new TreeSet\u003c\u003e();\n      Map\u003cDevice, ContainerId\u003e usedDevices \u003d allUsedDevices.get(resourceName);\n      Set\u003cDevice\u003e allowedDevices \u003d allAllowedDevices.get(resourceName);\n\n      defaultScheduleAction(allowedDevices, usedDevices,\n          assignedDevices, containerId, requestedDeviceCount);\n\n      // Record in state store if we allocated anything\n      if (!assignedDevices.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container,\n              resourceName,\n              new ArrayList\u003c\u003e(assignedDevices));\n        } catch (IOException e) {\n          cleanupAssignedDevices(resourceName, containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new DeviceAllocation(resourceName, assignedDevices,\n          Sets.difference(allowedDevices, assignedDevices));\n    }\n    return new DeviceAllocation(resourceName, null,\n        allAllowedDevices.get(resourceName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java"
    }
  }
}