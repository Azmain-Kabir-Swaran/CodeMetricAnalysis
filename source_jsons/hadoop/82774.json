{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SampleQuantiles.java",
  "functionName": "query",
  "functionId": "query___quantile-double",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java",
  "functionStartLine": 206,
  "functionEndLine": 228,
  "numCommitsSeen": 4,
  "timeTaken": 810,
  "changeHistory": [
    "e0db1e9e1071f19426becc8adbc7055945a9d704",
    "1ced82cc812b830cf755d2d300351ea92a0dc9a2",
    "b5b0ac64a18ccefe1626ce985adf576549172911"
  ],
  "changeHistoryShort": {
    "e0db1e9e1071f19426becc8adbc7055945a9d704": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1ced82cc812b830cf755d2d300351ea92a0dc9a2": "Ybodychange",
    "b5b0ac64a18ccefe1626ce985adf576549172911": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0db1e9e1071f19426becc8adbc7055945a9d704": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-8929. Add toString, other improvements for SampleQuantiles. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/10/12 11:06 PM",
      "commitName": "e0db1e9e1071f19426becc8adbc7055945a9d704",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-8929. Add toString, other improvements for SampleQuantiles. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398658 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/10/12 11:06 PM",
          "commitName": "e0db1e9e1071f19426becc8adbc7055945a9d704",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "28/09/12 5:59 PM",
          "commitNameOld": "1ced82cc812b830cf755d2d300351ea92a0dc9a2",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 17.21,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  private long query(double quantile) throws IOException {\n-    if (samples.size() \u003d\u003d 0) {\n-      throw new IOException(\"No samples present\");\n-    }\n+  private long query(double quantile) {\n+    Preconditions.checkState(!samples.isEmpty(), \"no data in estimator\");\n \n     int rankMin \u003d 0;\n     int desired \u003d (int) (quantile * count);\n \n     ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n     SampleItem prev \u003d null;\n     SampleItem cur \u003d it.next();\n     for (int i \u003d 1; i \u003c samples.size(); i++) {\n       prev \u003d cur;\n       cur \u003d it.next();\n \n       rankMin +\u003d prev.g;\n \n       if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n         return prev.value;\n       }\n     }\n \n     // edge case of wanting max value\n     return samples.get(samples.size() - 1).value;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long query(double quantile) {\n    Preconditions.checkState(!samples.isEmpty(), \"no data in estimator\");\n\n    int rankMin \u003d 0;\n    int desired \u003d (int) (quantile * count);\n\n    ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n    SampleItem prev \u003d null;\n    SampleItem cur \u003d it.next();\n    for (int i \u003d 1; i \u003c samples.size(); i++) {\n      prev \u003d cur;\n      cur \u003d it.next();\n\n      rankMin +\u003d prev.g;\n\n      if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n        return prev.value;\n      }\n    }\n\n    // edge case of wanting max value\n    return samples.get(samples.size() - 1).value;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8929. Add toString, other improvements for SampleQuantiles. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398658 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/10/12 11:06 PM",
          "commitName": "e0db1e9e1071f19426becc8adbc7055945a9d704",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "28/09/12 5:59 PM",
          "commitNameOld": "1ced82cc812b830cf755d2d300351ea92a0dc9a2",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 17.21,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  private long query(double quantile) throws IOException {\n-    if (samples.size() \u003d\u003d 0) {\n-      throw new IOException(\"No samples present\");\n-    }\n+  private long query(double quantile) {\n+    Preconditions.checkState(!samples.isEmpty(), \"no data in estimator\");\n \n     int rankMin \u003d 0;\n     int desired \u003d (int) (quantile * count);\n \n     ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n     SampleItem prev \u003d null;\n     SampleItem cur \u003d it.next();\n     for (int i \u003d 1; i \u003c samples.size(); i++) {\n       prev \u003d cur;\n       cur \u003d it.next();\n \n       rankMin +\u003d prev.g;\n \n       if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n         return prev.value;\n       }\n     }\n \n     // edge case of wanting max value\n     return samples.get(samples.size() - 1).value;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long query(double quantile) {\n    Preconditions.checkState(!samples.isEmpty(), \"no data in estimator\");\n\n    int rankMin \u003d 0;\n    int desired \u003d (int) (quantile * count);\n\n    ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n    SampleItem prev \u003d null;\n    SampleItem cur \u003d it.next();\n    for (int i \u003d 1; i \u003c samples.size(); i++) {\n      prev \u003d cur;\n      cur \u003d it.next();\n\n      rankMin +\u003d prev.g;\n\n      if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n        return prev.value;\n      }\n    }\n\n    // edge case of wanting max value\n    return samples.get(samples.size() - 1).value;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java",
          "extendedDetails": {}
        }
      ]
    },
    "1ced82cc812b830cf755d2d300351ea92a0dc9a2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8866. SampleQuantiles#query is O(N^2) instead of O(N). Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1391711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/12 5:59 PM",
      "commitName": "1ced82cc812b830cf755d2d300351ea92a0dc9a2",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "11/07/12 6:31 PM",
      "commitNameOld": "b5b0ac64a18ccefe1626ce985adf576549172911",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 78.98,
      "commitsBetweenForRepo": 436,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n   private long query(double quantile) throws IOException {\n     if (samples.size() \u003d\u003d 0) {\n       throw new IOException(\"No samples present\");\n     }\n \n     int rankMin \u003d 0;\n     int desired \u003d (int) (quantile * count);\n \n+    ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n+    SampleItem prev \u003d null;\n+    SampleItem cur \u003d it.next();\n     for (int i \u003d 1; i \u003c samples.size(); i++) {\n-      SampleItem prev \u003d samples.get(i - 1);\n-      SampleItem cur \u003d samples.get(i);\n+      prev \u003d cur;\n+      cur \u003d it.next();\n \n       rankMin +\u003d prev.g;\n \n       if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n         return prev.value;\n       }\n     }\n \n     // edge case of wanting max value\n     return samples.get(samples.size() - 1).value;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long query(double quantile) throws IOException {\n    if (samples.size() \u003d\u003d 0) {\n      throw new IOException(\"No samples present\");\n    }\n\n    int rankMin \u003d 0;\n    int desired \u003d (int) (quantile * count);\n\n    ListIterator\u003cSampleItem\u003e it \u003d samples.listIterator();\n    SampleItem prev \u003d null;\n    SampleItem cur \u003d it.next();\n    for (int i \u003d 1; i \u003c samples.size(); i++) {\n      prev \u003d cur;\n      cur \u003d it.next();\n\n      rankMin +\u003d prev.g;\n\n      if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n        return prev.value;\n      }\n    }\n\n    // edge case of wanting max value\n    return samples.get(samples.size() - 1).value;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java",
      "extendedDetails": {}
    },
    "b5b0ac64a18ccefe1626ce985adf576549172911": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8541. Better high-percentile latency metrics. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 6:31 PM",
      "commitName": "b5b0ac64a18ccefe1626ce985adf576549172911",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,22 @@\n+  private long query(double quantile) throws IOException {\n+    if (samples.size() \u003d\u003d 0) {\n+      throw new IOException(\"No samples present\");\n+    }\n+\n+    int rankMin \u003d 0;\n+    int desired \u003d (int) (quantile * count);\n+\n+    for (int i \u003d 1; i \u003c samples.size(); i++) {\n+      SampleItem prev \u003d samples.get(i - 1);\n+      SampleItem cur \u003d samples.get(i);\n+\n+      rankMin +\u003d prev.g;\n+\n+      if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n+        return prev.value;\n+      }\n+    }\n+\n+    // edge case of wanting max value\n+    return samples.get(samples.size() - 1).value;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long query(double quantile) throws IOException {\n    if (samples.size() \u003d\u003d 0) {\n      throw new IOException(\"No samples present\");\n    }\n\n    int rankMin \u003d 0;\n    int desired \u003d (int) (quantile * count);\n\n    for (int i \u003d 1; i \u003c samples.size(); i++) {\n      SampleItem prev \u003d samples.get(i - 1);\n      SampleItem cur \u003d samples.get(i);\n\n      rankMin +\u003d prev.g;\n\n      if (rankMin + cur.g + cur.delta \u003e desired + (allowableError(i) / 2)) {\n        return prev.value;\n      }\n    }\n\n    // edge case of wanting max value\n    return samples.get(samples.size() - 1).value;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/util/SampleQuantiles.java"
    }
  }
}