{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CentralizedOpportunisticContainerAllocator.java",
  "functionName": "allocatePerSchedulerKey",
  "functionId": "allocatePerSchedulerKey___rmIdentifier-long__appContext-OpportunisticContainerContext__schedKey-SchedulerRequestKey__appAttId-ApplicationAttemptId__userName-String__blackList-Set__String____maxAllocations-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/CentralizedOpportunisticContainerAllocator.java",
  "functionStartLine": 141,
  "functionEndLine": 175,
  "numCommitsSeen": 1,
  "timeTaken": 954,
  "changeHistory": [
    "fb512f50877438acb01fe6b3ec96c12b4db61694"
  ],
  "changeHistoryShort": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9697. Efficient allocation of Opportunistic containers. Contributed by Abhishek Modi.\n",
      "commitDate": "12/11/19 3:04 AM",
      "commitName": "fb512f50877438acb01fe6b3ec96c12b4db61694",
      "commitAuthor": "Abhishek Modi",
      "diff": "@@ -0,0 +1,35 @@\n+  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocatePerSchedulerKey(\n+      long rmIdentifier, OpportunisticContainerContext appContext,\n+      SchedulerRequestKey schedKey, ApplicationAttemptId appAttId,\n+      String userName, Set\u003cString\u003e blackList, int maxAllocations)\n+      throws YarnException {\n+    Map\u003cResource, List\u003cAllocation\u003e\u003e allocations \u003d new HashMap\u003c\u003e();\n+    int totalAllocated \u003d 0;\n+    for (EnrichedResourceRequest enrichedAsk :\n+        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n+      int remainingAllocs \u003d -1;\n+      if (maxAllocations \u003e 0) {\n+        remainingAllocs \u003d maxAllocations - totalAllocated;\n+        if (remainingAllocs \u003c\u003d 0) {\n+          LOG.info(\"Not allocating more containers as max allocations per AM \"\n+              + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\n+          break;\n+        }\n+      }\n+\n+      totalAllocated +\u003d allocateContainersPerRequest(rmIdentifier,\n+          appContext.getAppParams(),\n+          appContext.getContainerIdGenerator(), blackList,\n+          appAttId, userName, allocations, enrichedAsk,\n+          remainingAllocs);\n+      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n+      if (!allocations.isEmpty()) {\n+        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n+                + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n+                + \"allocated \u003d {}\", anyAsk.getPriority(),\n+            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n+            anyAsk.getCapability(), allocations.keySet());\n+      }\n+    }\n+    return allocations;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cResource, List\u003cAllocation\u003e\u003e allocatePerSchedulerKey(\n      long rmIdentifier, OpportunisticContainerContext appContext,\n      SchedulerRequestKey schedKey, ApplicationAttemptId appAttId,\n      String userName, Set\u003cString\u003e blackList, int maxAllocations)\n      throws YarnException {\n    Map\u003cResource, List\u003cAllocation\u003e\u003e allocations \u003d new HashMap\u003c\u003e();\n    int totalAllocated \u003d 0;\n    for (EnrichedResourceRequest enrichedAsk :\n        appContext.getOutstandingOpReqs().get(schedKey).values()) {\n      int remainingAllocs \u003d -1;\n      if (maxAllocations \u003e 0) {\n        remainingAllocs \u003d maxAllocations - totalAllocated;\n        if (remainingAllocs \u003c\u003d 0) {\n          LOG.info(\"Not allocating more containers as max allocations per AM \"\n              + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\n          break;\n        }\n      }\n\n      totalAllocated +\u003d allocateContainersPerRequest(rmIdentifier,\n          appContext.getAppParams(),\n          appContext.getContainerIdGenerator(), blackList,\n          appAttId, userName, allocations, enrichedAsk,\n          remainingAllocs);\n      ResourceRequest anyAsk \u003d enrichedAsk.getRequest();\n      if (!allocations.isEmpty()) {\n        LOG.info(\"Opportunistic allocation requested for [priority\u003d{}, \"\n                + \"allocationRequestId\u003d{}, num_containers\u003d{}, capability\u003d{}] \"\n                + \"allocated \u003d {}\", anyAsk.getPriority(),\n            anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(),\n            anyAsk.getCapability(), allocations.keySet());\n      }\n    }\n    return allocations;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/CentralizedOpportunisticContainerAllocator.java"
    }
  }
}