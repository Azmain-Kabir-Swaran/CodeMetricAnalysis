{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferServer.java",
  "functionName": "receive",
  "functionId": "receive___peer-Peer__underlyingOut-OutputStream__underlyingIn-InputStream__xferPort-int__datanodeId-DatanodeID",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
  "functionStartLine": 111,
  "functionEndLine": 153,
  "numCommitsSeen": 16,
  "timeTaken": 2305,
  "changeHistory": [
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
    "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "3b54223c0f32d42a84436c670d80b791a8e9696d"
  ],
  "changeHistoryShort": {
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709": "Ybodychange",
    "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822": "Ymultichange(Yparameterchange,Ybodychange)",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ybodychange",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1925e2a4ae78ef4178393848b4d1d71b0f4a4709": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7386. Replace check \"port number \u003c 1024\" with shared isPrivilegedPort method. Contributed by Yongjun Zhang.\n",
      "commitDate": "14/11/14 4:43 PM",
      "commitName": "1925e2a4ae78ef4178393848b4d1d71b0f4a4709",
      "commitAuthor": "cnauroth",
      "commitDateOld": "08/11/14 10:24 PM",
      "commitNameOld": "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 5.76,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n       InputStream underlyingIn, int xferPort, DatanodeID datanodeId)\n       throws IOException {\n     if (dnConf.getEncryptDataTransfer()) {\n       LOG.debug(\n         \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\n         \"SASL server skipping handshake in unsecured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n-    } else if (xferPort \u003c 1024) {\n+    } else if (SecurityUtil.isPrivilegedPort(xferPort)) {\n       LOG.debug(\n         \"SASL server skipping handshake in secured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n       LOG.debug(\n         \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return getSaslStreams(peer, underlyingOut, underlyingIn);\n     } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n       LOG.debug(\n         \"SASL server skipping handshake in secured configuration with no SASL \"\n         + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else {\n       // The error message here intentionally does not mention\n       // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n       // This code path is not expected to execute ever, because DataNode startup\n       // checks for invalid configuration and aborts.\n       throw new IOException(String.format(\"Cannot create a secured \" +\n         \"connection if DataNode listens on unprivileged port (%d) and no \" +\n         \"protection is defined in configuration property %s.\",\n         datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, int xferPort, DatanodeID datanodeId)\n      throws IOException {\n    if (dnConf.getEncryptDataTransfer()) {\n      LOG.debug(\n        \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (SecurityUtil.isPrivilegedPort(xferPort)) {\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n      LOG.debug(\n        \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getSaslStreams(peer, underlyingOut, underlyingIn);\n    } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else {\n      // The error message here intentionally does not mention\n      // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n      // This code path is not expected to execute ever, because DataNode startup\n      // checks for invalid configuration and aborts.\n      throw new IOException(String.format(\"Cannot create a secured \" +\n        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n        \"protection is defined in configuration property %s.\",\n        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {}
    },
    "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7382. DataNode in secure mode may throw NullPointerException if client connects before DataNode registers itself with NameNode. Contributed by Chris Nauroth.\n",
      "commitDate": "08/11/14 10:24 PM",
      "commitName": "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7382. DataNode in secure mode may throw NullPointerException if client connects before DataNode registers itself with NameNode. Contributed by Chris Nauroth.\n",
          "commitDate": "08/11/14 10:24 PM",
          "commitName": "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/11/14 8:31 PM",
          "commitNameOld": "8e33d4bdb35eed8b60cf197247fad465b1912ef7",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n-      InputStream underlyingIn, DatanodeID datanodeId) throws IOException {\n+      InputStream underlyingIn, int xferPort, DatanodeID datanodeId)\n+      throws IOException {\n     if (dnConf.getEncryptDataTransfer()) {\n       LOG.debug(\n         \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\n         \"SASL server skipping handshake in unsecured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n-    } else if (datanodeId.getXferPort() \u003c 1024) {\n+    } else if (xferPort \u003c 1024) {\n       LOG.debug(\n-        \"SASL server skipping handshake in unsecured configuration for \"\n+        \"SASL server skipping handshake in secured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n       LOG.debug(\n         \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n-      return getSaslStreams(peer, underlyingOut, underlyingIn, datanodeId);\n+      return getSaslStreams(peer, underlyingOut, underlyingIn);\n     } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n       LOG.debug(\n         \"SASL server skipping handshake in secured configuration with no SASL \"\n         + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else {\n       // The error message here intentionally does not mention\n       // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n       // This code path is not expected to execute ever, because DataNode startup\n       // checks for invalid configuration and aborts.\n       throw new IOException(String.format(\"Cannot create a secured \" +\n         \"connection if DataNode listens on unprivileged port (%d) and no \" +\n         \"protection is defined in configuration property %s.\",\n         datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, int xferPort, DatanodeID datanodeId)\n      throws IOException {\n    if (dnConf.getEncryptDataTransfer()) {\n      LOG.debug(\n        \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (xferPort \u003c 1024) {\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n      LOG.debug(\n        \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getSaslStreams(peer, underlyingOut, underlyingIn);\n    } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else {\n      // The error message here intentionally does not mention\n      // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n      // This code path is not expected to execute ever, because DataNode startup\n      // checks for invalid configuration and aborts.\n      throw new IOException(String.format(\"Cannot create a secured \" +\n        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n        \"protection is defined in configuration property %s.\",\n        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
          "extendedDetails": {
            "oldValue": "[peer-Peer, underlyingOut-OutputStream, underlyingIn-InputStream, datanodeId-DatanodeID]",
            "newValue": "[peer-Peer, underlyingOut-OutputStream, underlyingIn-InputStream, xferPort-int, datanodeId-DatanodeID]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7382. DataNode in secure mode may throw NullPointerException if client connects before DataNode registers itself with NameNode. Contributed by Chris Nauroth.\n",
          "commitDate": "08/11/14 10:24 PM",
          "commitName": "9ba8d8c7eb65eeb6fe673f04e493d9eedd95a822",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/11/14 8:31 PM",
          "commitNameOld": "8e33d4bdb35eed8b60cf197247fad465b1912ef7",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n-      InputStream underlyingIn, DatanodeID datanodeId) throws IOException {\n+      InputStream underlyingIn, int xferPort, DatanodeID datanodeId)\n+      throws IOException {\n     if (dnConf.getEncryptDataTransfer()) {\n       LOG.debug(\n         \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\n         \"SASL server skipping handshake in unsecured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n-    } else if (datanodeId.getXferPort() \u003c 1024) {\n+    } else if (xferPort \u003c 1024) {\n       LOG.debug(\n-        \"SASL server skipping handshake in unsecured configuration for \"\n+        \"SASL server skipping handshake in secured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n       LOG.debug(\n         \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n-      return getSaslStreams(peer, underlyingOut, underlyingIn, datanodeId);\n+      return getSaslStreams(peer, underlyingOut, underlyingIn);\n     } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n       // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n       // only way this can happen is if the DataNode has\n       // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n       LOG.debug(\n         \"SASL server skipping handshake in secured configuration with no SASL \"\n         + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else {\n       // The error message here intentionally does not mention\n       // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n       // This code path is not expected to execute ever, because DataNode startup\n       // checks for invalid configuration and aborts.\n       throw new IOException(String.format(\"Cannot create a secured \" +\n         \"connection if DataNode listens on unprivileged port (%d) and no \" +\n         \"protection is defined in configuration property %s.\",\n         datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, int xferPort, DatanodeID datanodeId)\n      throws IOException {\n    if (dnConf.getEncryptDataTransfer()) {\n      LOG.debug(\n        \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (xferPort \u003c 1024) {\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n      LOG.debug(\n        \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getSaslStreams(peer, underlyingOut, underlyingIn);\n    } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else {\n      // The error message here intentionally does not mention\n      // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n      // This code path is not expected to execute ever, because DataNode startup\n      // checks for invalid configuration and aborts.\n      throw new IOException(String.format(\"Cannot create a secured \" +\n        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n        \"protection is defined in configuration property %s.\",\n        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "14/07/14 11:10 AM",
      "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 67.43,
      "commitsBetweenForRepo": 657,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,42 @@\n   public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n       InputStream underlyingIn, DatanodeID datanodeId) throws IOException {\n     if (dnConf.getEncryptDataTransfer()) {\n       LOG.debug(\n         \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n     } else if (!UserGroupInformation.isSecurityEnabled()) {\n       LOG.debug(\n         \"SASL server skipping handshake in unsecured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     } else if (datanodeId.getXferPort() \u003c 1024) {\n       LOG.debug(\n         \"SASL server skipping handshake in unsecured configuration for \"\n         + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n       return new IOStreamPair(underlyingIn, underlyingOut);\n-    } else {\n+    } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n       LOG.debug(\n         \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n         peer, datanodeId);\n       return getSaslStreams(peer, underlyingOut, underlyingIn, datanodeId);\n+    } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n+      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n+      // only way this can happen is if the DataNode has\n+      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n+      LOG.debug(\n+        \"SASL server skipping handshake in secured configuration with no SASL \"\n+        + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n+        peer, datanodeId);\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    } else {\n+      // The error message here intentionally does not mention\n+      // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n+      // This code path is not expected to execute ever, because DataNode startup\n+      // checks for invalid configuration and aborts.\n+      throw new IOException(String.format(\"Cannot create a secured \" +\n+        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n+        \"protection is defined in configuration property %s.\",\n+        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, DatanodeID datanodeId) throws IOException {\n    if (dnConf.getEncryptDataTransfer()) {\n      LOG.debug(\n        \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (datanodeId.getXferPort() \u003c 1024) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (dnConf.getSaslPropsResolver() !\u003d null) {\n      LOG.debug(\n        \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getSaslStreams(peer, underlyingOut, underlyingIn, datanodeId);\n    } else if (dnConf.getIgnoreSecurePortsForTesting()) {\n      // It\u0027s a secured cluster using non-privileged ports, but no SASL.  The\n      // only way this can happen is if the DataNode has\n      // ignore.secure.ports.for.testing configured, so this is a rare edge case.\n      LOG.debug(\n        \"SASL server skipping handshake in secured configuration with no SASL \"\n        + \"protection configured for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else {\n      // The error message here intentionally does not mention\n      // ignore.secure.ports.for.testing.  That\u0027s intended for dev use only.\n      // This code path is not expected to execute ever, because DataNode startup\n      // checks for invalid configuration and aborts.\n      throw new IOException(String.format(\"Cannot create a secured \" +\n        \"connection if DataNode listens on unprivileged port (%d) and no \" +\n        \"protection is defined in configuration property %s.\",\n        datanodeId.getXferPort(), DFS_DATA_TRANSFER_PROTECTION_KEY));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {}
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,24 @@\n+  public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n+      InputStream underlyingIn, DatanodeID datanodeId) throws IOException {\n+    if (dnConf.getEncryptDataTransfer()) {\n+      LOG.debug(\n+        \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n+        peer, datanodeId);\n+      return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n+    } else if (!UserGroupInformation.isSecurityEnabled()) {\n+      LOG.debug(\n+        \"SASL server skipping handshake in unsecured configuration for \"\n+        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    } else if (datanodeId.getXferPort() \u003c 1024) {\n+      LOG.debug(\n+        \"SASL server skipping handshake in unsecured configuration for \"\n+        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    } else {\n+      LOG.debug(\n+        \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n+        peer, datanodeId);\n+      return getSaslStreams(peer, underlyingOut, underlyingIn, datanodeId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public IOStreamPair receive(Peer peer, OutputStream underlyingOut,\n      InputStream underlyingIn, DatanodeID datanodeId) throws IOException {\n    if (dnConf.getEncryptDataTransfer()) {\n      LOG.debug(\n        \"SASL server doing encrypted handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getEncryptedStreams(peer, underlyingOut, underlyingIn);\n    } else if (!UserGroupInformation.isSecurityEnabled()) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else if (datanodeId.getXferPort() \u003c 1024) {\n      LOG.debug(\n        \"SASL server skipping handshake in unsecured configuration for \"\n        + \"peer \u003d {}, datanodeId \u003d {}\", peer, datanodeId);\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    } else {\n      LOG.debug(\n        \"SASL server doing general handshake for peer \u003d {}, datanodeId \u003d {}\",\n        peer, datanodeId);\n      return getSaslStreams(peer, underlyingOut, underlyingIn, datanodeId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java"
    }
  }
}