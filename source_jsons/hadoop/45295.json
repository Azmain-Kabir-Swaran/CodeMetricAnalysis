{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnClientUtils.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/util/YarnClientUtils.java",
  "functionStartLine": 223,
  "functionEndLine": 253,
  "numCommitsSeen": 13,
  "timeTaken": 3217,
  "changeHistory": [
    "d81d45ff2fc9a1c424222e021f9306bf64c916b2",
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
    "8990eaf5925afa533fbd9c3641859a146dc5a22c"
  ],
  "changeHistoryShort": {
    "d81d45ff2fc9a1c424222e021f9306bf64c916b2": "Ybodychange",
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4": "Ymovefromfile",
    "8990eaf5925afa533fbd9c3641859a146dc5a22c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d81d45ff2fc9a1c424222e021f9306bf64c916b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9956. Improved connection error message for YARN ApiServerClient.\n           Contributed by Prabhu Joseph\n",
      "commitDate": "06/01/20 10:24 AM",
      "commitName": "d81d45ff2fc9a1c424222e021f9306bf64c916b2",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/11/18 5:59 PM",
      "commitNameOld": "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 412.68,
      "commitsBetweenForRepo": 2764,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n           public String run() throws Exception {\n             try {\n               // This Oid for Kerberos GSS-API mechanism.\n               Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n               GSSManager manager \u003d GSSManager.getInstance();\n               // GSS name for server\n               GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n                   GSSName.NT_HOSTBASED_SERVICE);\n               // Create a GSSContext for authentication with the service.\n               // We\u0027re passing client credentials as null since we want them to\n               // be read from the Subject.\n               GSSContext gssContext \u003d manager.createContext(\n                   serverName.canonicalize(mechOid), mechOid, null,\n                   GSSContext.DEFAULT_LIFETIME);\n               gssContext.requestMutualAuth(true);\n               gssContext.requestCredDeleg(true);\n               // Establish context\n               byte[] inToken \u003d new byte[0];\n               byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n                   inToken.length);\n               gssContext.dispose();\n               // Base64 encoded and stringified token for server\n               LOG.debug(\"Got valid challenge for host {}\", serverName);\n               return new String(BASE_64_CODEC.encode(outToken),\n                   StandardCharsets.US_ASCII);\n             } catch (GSSException | IllegalAccessException\n                 | NoSuchFieldException | ClassNotFoundException e) {\n-              LOG.error(\"Error: {}\", e);\n+              LOG.error(\"Error: \", e);\n               throw new AuthenticationException(e);\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public String run() throws Exception {\n            try {\n              // This Oid for Kerberos GSS-API mechanism.\n              Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n              GSSManager manager \u003d GSSManager.getInstance();\n              // GSS name for server\n              GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n                  GSSName.NT_HOSTBASED_SERVICE);\n              // Create a GSSContext for authentication with the service.\n              // We\u0027re passing client credentials as null since we want them to\n              // be read from the Subject.\n              GSSContext gssContext \u003d manager.createContext(\n                  serverName.canonicalize(mechOid), mechOid, null,\n                  GSSContext.DEFAULT_LIFETIME);\n              gssContext.requestMutualAuth(true);\n              gssContext.requestCredDeleg(true);\n              // Establish context\n              byte[] inToken \u003d new byte[0];\n              byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n                  inToken.length);\n              gssContext.dispose();\n              // Base64 encoded and stringified token for server\n              LOG.debug(\"Got valid challenge for host {}\", serverName);\n              return new String(BASE_64_CODEC.encode(outToken),\n                  StandardCharsets.US_ASCII);\n            } catch (GSSException | IllegalAccessException\n                | NoSuchFieldException | ClassNotFoundException e) {\n              LOG.error(\"Error: \", e);\n              throw new AuthenticationException(e);\n            }\n          }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/util/YarnClientUtils.java",
      "extendedDetails": {}
    },
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-8778. Add command line interface to invoke interactive docker shell. Contributed by Eric Yang\n",
      "commitDate": "19/11/18 5:59 PM",
      "commitName": "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "19/11/18 4:28 PM",
      "commitNameOld": "397f523e22a4f76b5484bed26ef4e6d40200611e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public String run() throws Exception {\n            try {\n              // This Oid for Kerberos GSS-API mechanism.\n              Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n              GSSManager manager \u003d GSSManager.getInstance();\n              // GSS name for server\n              GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n                  GSSName.NT_HOSTBASED_SERVICE);\n              // Create a GSSContext for authentication with the service.\n              // We\u0027re passing client credentials as null since we want them to\n              // be read from the Subject.\n              GSSContext gssContext \u003d manager.createContext(\n                  serverName.canonicalize(mechOid), mechOid, null,\n                  GSSContext.DEFAULT_LIFETIME);\n              gssContext.requestMutualAuth(true);\n              gssContext.requestCredDeleg(true);\n              // Establish context\n              byte[] inToken \u003d new byte[0];\n              byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n                  inToken.length);\n              gssContext.dispose();\n              // Base64 encoded and stringified token for server\n              LOG.debug(\"Got valid challenge for host {}\", serverName);\n              return new String(BASE_64_CODEC.encode(outToken),\n                  StandardCharsets.US_ASCII);\n            } catch (GSSException | IllegalAccessException\n                | NoSuchFieldException | ClassNotFoundException e) {\n              LOG.error(\"Error: {}\", e);\n              throw new AuthenticationException(e);\n            }\n          }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/util/YarnClientUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/util/YarnClientUtils.java",
        "oldMethodName": "run",
        "newMethodName": "run"
      }
    },
    "8990eaf5925afa533fbd9c3641859a146dc5a22c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8474. Fixed ApiServiceClient kerberos negotiation.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "16/08/18 9:46 AM",
      "commitName": "8990eaf5925afa533fbd9c3641859a146dc5a22c",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,31 @@\n+          public String run() throws Exception {\n+            try {\n+              // This Oid for Kerberos GSS-API mechanism.\n+              Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n+              GSSManager manager \u003d GSSManager.getInstance();\n+              // GSS name for server\n+              GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n+                  GSSName.NT_HOSTBASED_SERVICE);\n+              // Create a GSSContext for authentication with the service.\n+              // We\u0027re passing client credentials as null since we want them to\n+              // be read from the Subject.\n+              GSSContext gssContext \u003d manager.createContext(\n+                  serverName.canonicalize(mechOid), mechOid, null,\n+                  GSSContext.DEFAULT_LIFETIME);\n+              gssContext.requestMutualAuth(true);\n+              gssContext.requestCredDeleg(true);\n+              // Establish context\n+              byte[] inToken \u003d new byte[0];\n+              byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n+                  inToken.length);\n+              gssContext.dispose();\n+              // Base64 encoded and stringified token for server\n+              LOG.debug(\"Got valid challenge for host {}\", serverName);\n+              return new String(BASE_64_CODEC.encode(outToken),\n+                  StandardCharsets.US_ASCII);\n+            } catch (GSSException | IllegalAccessException\n+                | NoSuchFieldException | ClassNotFoundException e) {\n+              LOG.error(\"Error: {}\", e);\n+              throw new AuthenticationException(e);\n+            }\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public String run() throws Exception {\n            try {\n              // This Oid for Kerberos GSS-API mechanism.\n              Oid mechOid \u003d KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\");\n              GSSManager manager \u003d GSSManager.getInstance();\n              // GSS name for server\n              GSSName serverName \u003d manager.createName(\"HTTP@\" + server,\n                  GSSName.NT_HOSTBASED_SERVICE);\n              // Create a GSSContext for authentication with the service.\n              // We\u0027re passing client credentials as null since we want them to\n              // be read from the Subject.\n              GSSContext gssContext \u003d manager.createContext(\n                  serverName.canonicalize(mechOid), mechOid, null,\n                  GSSContext.DEFAULT_LIFETIME);\n              gssContext.requestMutualAuth(true);\n              gssContext.requestCredDeleg(true);\n              // Establish context\n              byte[] inToken \u003d new byte[0];\n              byte[] outToken \u003d gssContext.initSecContext(inToken, 0,\n                  inToken.length);\n              gssContext.dispose();\n              // Base64 encoded and stringified token for server\n              LOG.debug(\"Got valid challenge for host {}\", serverName);\n              return new String(BASE_64_CODEC.encode(outToken),\n                  StandardCharsets.US_ASCII);\n            } catch (GSSException | IllegalAccessException\n                | NoSuchFieldException | ClassNotFoundException e) {\n              LOG.error(\"Error: {}\", e);\n              throw new AuthenticationException(e);\n            }\n          }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java"
    }
  }
}