{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FTPFileSystem.java",
  "functionName": "create",
  "functionId": "create___file-Path__permission-FsPermission__overwrite-boolean__bufferSize-int__replication-short__blockSize-long__progress-Progressable",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
  "functionStartLine": 313,
  "functionEndLine": 375,
  "numCommitsSeen": 30,
  "timeTaken": 2352,
  "changeHistory": [
    "18d7dfbf35564694e24bf2b7c99fea1bee1c790e",
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "18d7dfbf35564694e24bf2b7c99fea1bee1c790e": "Ybodychange",
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": "Ybodychange",
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "35a4624771f84a60deb62a3807a3ac0701b0d7d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": "Ymultichange(Yparameterchange,Ybodychange)",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18d7dfbf35564694e24bf2b7c99fea1bee1c790e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1820. FTPFileSystem attempts to close the outputstream even when it is not initialised. (#1952)\n\n\r\nContributed by Mikhail Pryakhin.",
      "commitDate": "27/04/20 6:43 AM",
      "commitName": "18d7dfbf35564694e24bf2b7c99fea1bee1c790e",
      "commitAuthor": "Mike",
      "commitDateOld": "17/10/18 11:34 AM",
      "commitNameOld": "24dc068a361648b4e59e1807b07ff2239f41c740",
      "commitAuthorOld": "Adam Antal",
      "daysBetweenCommits": 557.8,
      "commitsBetweenForRepo": 3405,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,63 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n     FileStatus status;\n     try {\n       status \u003d getFileStatus(client, file);\n     } catch (FileNotFoundException fnfe) {\n       status \u003d null;\n     }\n     if (status !\u003d null) {\n       if (overwrite \u0026\u0026 !status.isDirectory()) {\n         delete(client, file, false);\n       } else {\n         disconnect(client);\n         throw new FileAlreadyExistsException(\"File already exists: \" + file);\n       }\n     }\n     \n     Path parent \u003d absolute.getParent();\n     if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDirDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n-    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n-        .getName()), statistics) {\n+    OutputStream outputStream \u003d client.storeFileStream(file.getName());\n+\n+    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n+      // The ftpClient is an inconsistent state. Must close the stream\n+      // which in turn will logout and disconnect from FTP server\n+      if (outputStream !\u003d null) {\n+        IOUtils.closeStream(outputStream);\n+      }\n+      disconnect(client);\n+      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n+    }\n+\n+    FSDataOutputStream fos \u003d new FSDataOutputStream(outputStream, statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n-    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n-      // The ftpClient is an inconsistent state. Must close the stream\n-      // which in turn will logout and disconnect from FTP server\n-      fos.close();\n-      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n-    }\n     return fos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    FileStatus status;\n    try {\n      status \u003d getFileStatus(client, file);\n    } catch (FileNotFoundException fnfe) {\n      status \u003d null;\n    }\n    if (status !\u003d null) {\n      if (overwrite \u0026\u0026 !status.isDirectory()) {\n        delete(client, file, false);\n      } else {\n        disconnect(client);\n        throw new FileAlreadyExistsException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDirDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    OutputStream outputStream \u003d client.storeFileStream(file.getName());\n\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      if (outputStream !\u003d null) {\n        IOUtils.closeStream(outputStream);\n      }\n      disconnect(client);\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n\n    FSDataOutputStream fos \u003d new FSDataOutputStream(outputStream, statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    return fos;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9361: Strictly define FileSystem APIs\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:04 AM",
      "commitName": "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "09/01/13 3:30 PM",
      "commitNameOld": "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 539.52,
      "commitsBetweenForRepo": 3454,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,58 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n-    if (exists(client, file)) {\n-      if (overwrite) {\n-        delete(client, file);\n+    FileStatus status;\n+    try {\n+      status \u003d getFileStatus(client, file);\n+    } catch (FileNotFoundException fnfe) {\n+      status \u003d null;\n+    }\n+    if (status !\u003d null) {\n+      if (overwrite \u0026\u0026 !status.isDirectory()) {\n+        delete(client, file, false);\n       } else {\n         disconnect(client);\n-        throw new IOException(\"File already exists: \" + file);\n+        throw new FileAlreadyExistsException(\"File already exists: \" + file);\n       }\n     }\n     \n     Path parent \u003d absolute.getParent();\n     if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDirDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n     FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n         .getName()), statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n     if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n       // The ftpClient is an inconsistent state. Must close the stream\n       // which in turn will logout and disconnect from FTP server\n       fos.close();\n       throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n     }\n     return fos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    FileStatus status;\n    try {\n      status \u003d getFileStatus(client, file);\n    } catch (FileNotFoundException fnfe) {\n      status \u003d null;\n    }\n    if (status !\u003d null) {\n      if (overwrite \u0026\u0026 !status.isDirectory()) {\n        delete(client, file, false);\n      } else {\n        disconnect(client);\n        throw new FileAlreadyExistsException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDirDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "7e599d9e3b852954a5a21b4738817c7aabfa1bc8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9155. FsPermission should have different default value, 777 for directory and 666 for file. Contributed by Binglin Chang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431148 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 3:30 PM",
      "commitName": "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "16/09/12 6:39 PM",
      "commitNameOld": "6afabd7e573ea436186f150753833936f52d2d00",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 114.91,
      "commitsBetweenForRepo": 558,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n     if (exists(client, file)) {\n       if (overwrite) {\n         delete(client, file);\n       } else {\n         disconnect(client);\n         throw new IOException(\"File already exists: \" + file);\n       }\n     }\n     \n     Path parent \u003d absolute.getParent();\n-    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n+    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDirDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n     FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n         .getName()), statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n     if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n       // The ftpClient is an inconsistent state. Must close the stream\n       // which in turn will logout and disconnect from FTP server\n       fos.close();\n       throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n     }\n     return fos;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDirDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
      }
    },
    "35a4624771f84a60deb62a3807a3ac0701b0d7d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-6826.  Revert FileSystem create method that takes CreateFlags.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@956710 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/10 2:45 PM",
      "commitName": "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-6826.  Revert FileSystem create method that takes CreateFlags.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@956710 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/10 2:45 PM",
          "commitName": "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
          "commitAuthor": "Thomas White",
          "commitDateOld": "11/06/10 2:34 PM",
          "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
          "commitAuthorOld": "Thomas White",
          "daysBetweenCommits": 10.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,52 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n-      EnumSet\u003cCreateFlag\u003e flag, int bufferSize, short replication, long blockSize,\n+      boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n-    \n-    boolean overwrite \u003d flag.contains(CreateFlag.OVERWRITE);\n-    boolean create \u003d flag.contains(CreateFlag.CREATE);\n-    boolean append\u003d flag.contains(CreateFlag.APPEND);\n-    \n     if (exists(client, file)) {\n       if (overwrite) {\n         delete(client, file);\n-      } else if(append){\n-        return append(file, bufferSize, progress);\n       } else {\n         disconnect(client);\n         throw new IOException(\"File already exists: \" + file);\n       }\n-    } else {\n-      if(append \u0026\u0026 !create)\n-        throw new FileNotFoundException(\"File does not exist: \"+ file);\n     }\n     \n     Path parent \u003d absolute.getParent();\n     if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n     FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n         .getName()), statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n     if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n       // The ftpClient is an inconsistent state. Must close the stream\n       // which in turn will logout and disconnect from FTP server\n       fos.close();\n       throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n     }\n     return fos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
          "path": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
          "extendedDetails": {
            "oldValue": "[file-Path, permission-FsPermission, flag-EnumSet\u003cCreateFlag\u003e, bufferSize-int, replication-short, blockSize-long, progress-Progressable]",
            "newValue": "[file-Path, permission-FsPermission, overwrite-boolean, bufferSize-int, replication-short, blockSize-long, progress-Progressable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6826.  Revert FileSystem create method that takes CreateFlags.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@956710 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/10 2:45 PM",
          "commitName": "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
          "commitAuthor": "Thomas White",
          "commitDateOld": "11/06/10 2:34 PM",
          "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
          "commitAuthorOld": "Thomas White",
          "daysBetweenCommits": 10.01,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,52 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n-      EnumSet\u003cCreateFlag\u003e flag, int bufferSize, short replication, long blockSize,\n+      boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n-    \n-    boolean overwrite \u003d flag.contains(CreateFlag.OVERWRITE);\n-    boolean create \u003d flag.contains(CreateFlag.CREATE);\n-    boolean append\u003d flag.contains(CreateFlag.APPEND);\n-    \n     if (exists(client, file)) {\n       if (overwrite) {\n         delete(client, file);\n-      } else if(append){\n-        return append(file, bufferSize, progress);\n       } else {\n         disconnect(client);\n         throw new IOException(\"File already exists: \" + file);\n       }\n-    } else {\n-      if(append \u0026\u0026 !create)\n-        throw new FileNotFoundException(\"File does not exist: \"+ file);\n     }\n     \n     Path parent \u003d absolute.getParent();\n     if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n     FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n         .getName()), statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n     if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n       // The ftpClient is an inconsistent state. Must close the stream\n       // which in turn will logout and disconnect from FTP server\n       fos.close();\n       throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n     }\n     return fos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
          "path": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Merged src/core, src/test/core, src/contrib/eclipse-plugin, and\nsrc/contrib/ec2 from trunk 776174:784663\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/09 1:28 PM",
      "commitName": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
      "commitAuthor": "Owen O\u0027Malley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Merged src/core, src/test/core, src/contrib/eclipse-plugin, and\nsrc/contrib/ec2 from trunk 776174:784663\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/06/09 1:28 PM",
          "commitName": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "18/05/09 9:20 PM",
          "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 27.67,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,62 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n-      boolean overwrite, int bufferSize, short replication, long blockSize,\n+      EnumSet\u003cCreateFlag\u003e flag, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n+    \n+    boolean overwrite \u003d flag.contains(CreateFlag.OVERWRITE);\n+    boolean create \u003d flag.contains(CreateFlag.CREATE);\n+    boolean append\u003d flag.contains(CreateFlag.APPEND);\n+    \n     if (exists(client, file)) {\n       if (overwrite) {\n         delete(client, file);\n+      } else if(append){\n+        return append(file, bufferSize, progress);\n       } else {\n         disconnect(client);\n         throw new IOException(\"File already exists: \" + file);\n       }\n+    } else {\n+      if(append \u0026\u0026 !create)\n+        throw new FileNotFoundException(\"File does not exist: \"+ file);\n     }\n+    \n     Path parent \u003d absolute.getParent();\n     if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n     FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n         .getName()), statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n     if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n       // The ftpClient is an inconsistent state. Must close the stream\n       // which in turn will logout and disconnect from FTP server\n       fos.close();\n       throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n     }\n     return fos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      EnumSet\u003cCreateFlag\u003e flag, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    \n    boolean overwrite \u003d flag.contains(CreateFlag.OVERWRITE);\n    boolean create \u003d flag.contains(CreateFlag.CREATE);\n    boolean append\u003d flag.contains(CreateFlag.APPEND);\n    \n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else if(append){\n        return append(file, bufferSize, progress);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    } else {\n      if(append \u0026\u0026 !create)\n        throw new FileNotFoundException(\"File does not exist: \"+ file);\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
          "path": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
          "extendedDetails": {
            "oldValue": "[file-Path, permission-FsPermission, overwrite-boolean, bufferSize-int, replication-short, blockSize-long, progress-Progressable]",
            "newValue": "[file-Path, permission-FsPermission, flag-EnumSet\u003cCreateFlag\u003e, bufferSize-int, replication-short, blockSize-long, progress-Progressable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Merged src/core, src/test/core, src/contrib/eclipse-plugin, and\nsrc/contrib/ec2 from trunk 776174:784663\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@784965 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/06/09 1:28 PM",
          "commitName": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "18/05/09 9:20 PM",
          "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 27.67,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,62 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n-      boolean overwrite, int bufferSize, short replication, long blockSize,\n+      EnumSet\u003cCreateFlag\u003e flag, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     final FTPClient client \u003d connect();\n     Path workDir \u003d new Path(client.printWorkingDirectory());\n     Path absolute \u003d makeAbsolute(workDir, file);\n+    \n+    boolean overwrite \u003d flag.contains(CreateFlag.OVERWRITE);\n+    boolean create \u003d flag.contains(CreateFlag.CREATE);\n+    boolean append\u003d flag.contains(CreateFlag.APPEND);\n+    \n     if (exists(client, file)) {\n       if (overwrite) {\n         delete(client, file);\n+      } else if(append){\n+        return append(file, bufferSize, progress);\n       } else {\n         disconnect(client);\n         throw new IOException(\"File already exists: \" + file);\n       }\n+    } else {\n+      if(append \u0026\u0026 !create)\n+        throw new FileNotFoundException(\"File does not exist: \"+ file);\n     }\n+    \n     Path parent \u003d absolute.getParent();\n     if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n       parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n       disconnect(client);\n       throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n     }\n     client.allocate(bufferSize);\n     // Change to parent directory on the server. Only then can we write to the\n     // file on the server by opening up an OutputStream. As a side effect the\n     // working directory on the server is changed to the parent directory of the\n     // file. The FTP client connection is closed when close() is called on the\n     // FSDataOutputStream.\n     client.changeWorkingDirectory(parent.toUri().getPath());\n     FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n         .getName()), statistics) {\n       @Override\n       public void close() throws IOException {\n         super.close();\n         if (!client.isConnected()) {\n           throw new FTPException(\"Client not connected\");\n         }\n         boolean cmdCompleted \u003d client.completePendingCommand();\n         disconnect(client);\n         if (!cmdCompleted) {\n           throw new FTPException(\"Could not complete transfer, Reply Code - \"\n               + client.getReplyCode());\n         }\n       }\n     };\n     if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n       // The ftpClient is an inconsistent state. Must close the stream\n       // which in turn will logout and disconnect from FTP server\n       fos.close();\n       throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n     }\n     return fos;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      EnumSet\u003cCreateFlag\u003e flag, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    \n    boolean overwrite \u003d flag.contains(CreateFlag.OVERWRITE);\n    boolean create \u003d flag.contains(CreateFlag.CREATE);\n    boolean append\u003d flag.contains(CreateFlag.APPEND);\n    \n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else if(append){\n        return append(file, bufferSize, progress);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    } else {\n      if(append \u0026\u0026 !create)\n        throw new FileNotFoundException(\"File does not exist: \"+ file);\n    }\n    \n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
          "path": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,51 @@\n+  public FSDataOutputStream create(Path file, FsPermission permission,\n+      boolean overwrite, int bufferSize, short replication, long blockSize,\n+      Progressable progress) throws IOException {\n+    final FTPClient client \u003d connect();\n+    Path workDir \u003d new Path(client.printWorkingDirectory());\n+    Path absolute \u003d makeAbsolute(workDir, file);\n+    if (exists(client, file)) {\n+      if (overwrite) {\n+        delete(client, file);\n+      } else {\n+        disconnect(client);\n+        throw new IOException(\"File already exists: \" + file);\n+      }\n+    }\n+    Path parent \u003d absolute.getParent();\n+    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n+      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n+      disconnect(client);\n+      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n+    }\n+    client.allocate(bufferSize);\n+    // Change to parent directory on the server. Only then can we write to the\n+    // file on the server by opening up an OutputStream. As a side effect the\n+    // working directory on the server is changed to the parent directory of the\n+    // file. The FTP client connection is closed when close() is called on the\n+    // FSDataOutputStream.\n+    client.changeWorkingDirectory(parent.toUri().getPath());\n+    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n+        .getName()), statistics) {\n+      @Override\n+      public void close() throws IOException {\n+        super.close();\n+        if (!client.isConnected()) {\n+          throw new FTPException(\"Client not connected\");\n+        }\n+        boolean cmdCompleted \u003d client.completePendingCommand();\n+        disconnect(client);\n+        if (!cmdCompleted) {\n+          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n+              + client.getReplyCode());\n+        }\n+      }\n+    };\n+    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n+      // The ftpClient is an inconsistent state. Must close the stream\n+      // which in turn will logout and disconnect from FTP server\n+      fos.close();\n+      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n+    }\n+    return fos;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    final FTPClient client \u003d connect();\n    Path workDir \u003d new Path(client.printWorkingDirectory());\n    Path absolute \u003d makeAbsolute(workDir, file);\n    if (exists(client, file)) {\n      if (overwrite) {\n        delete(client, file);\n      } else {\n        disconnect(client);\n        throw new IOException(\"File already exists: \" + file);\n      }\n    }\n    Path parent \u003d absolute.getParent();\n    if (parent \u003d\u003d null || !mkdirs(client, parent, FsPermission.getDefault())) {\n      parent \u003d (parent \u003d\u003d null) ? new Path(\"/\") : parent;\n      disconnect(client);\n      throw new IOException(\"create(): Mkdirs failed to create: \" + parent);\n    }\n    client.allocate(bufferSize);\n    // Change to parent directory on the server. Only then can we write to the\n    // file on the server by opening up an OutputStream. As a side effect the\n    // working directory on the server is changed to the parent directory of the\n    // file. The FTP client connection is closed when close() is called on the\n    // FSDataOutputStream.\n    client.changeWorkingDirectory(parent.toUri().getPath());\n    FSDataOutputStream fos \u003d new FSDataOutputStream(client.storeFileStream(file\n        .getName()), statistics) {\n      @Override\n      public void close() throws IOException {\n        super.close();\n        if (!client.isConnected()) {\n          throw new FTPException(\"Client not connected\");\n        }\n        boolean cmdCompleted \u003d client.completePendingCommand();\n        disconnect(client);\n        if (!cmdCompleted) {\n          throw new FTPException(\"Could not complete transfer, Reply Code - \"\n              + client.getReplyCode());\n        }\n      }\n    };\n    if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {\n      // The ftpClient is an inconsistent state. Must close the stream\n      // which in turn will logout and disconnect from FTP server\n      fos.close();\n      throw new IOException(\"Unable to create file: \" + file + \", Aborting\");\n    }\n    return fos;\n  }",
      "path": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
    }
  }
}