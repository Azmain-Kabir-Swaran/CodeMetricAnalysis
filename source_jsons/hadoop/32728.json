{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "getNodeLabelsForHeartbeat",
  "functionId": "getNodeLabelsForHeartbeat",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 1237,
  "functionEndLine": 1239,
  "numCommitsSeen": 117,
  "timeTaken": 3293,
  "changeHistory": [
    "f659485ee83f3f34e3717631983adfc8fa1e53dc",
    "d312b5cf9ffff016432ec5a7e64b81ab7a8c31f3",
    "30ac69c6bd3db363248d6c742561371576006dab",
    "77666105b4557d5706e5844a4ca286917d966c5f",
    "fc07464d1a48b0413da5e921614430e41263fdb7"
  ],
  "changeHistoryShort": {
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": "Ybodychange",
    "d312b5cf9ffff016432ec5a7e64b81ab7a8c31f3": "Ybodychange",
    "30ac69c6bd3db363248d6c742561371576006dab": "Ybodychange",
    "77666105b4557d5706e5844a4ca286917d966c5f": "Ybodychange",
    "fc07464d1a48b0413da5e921614430e41263fdb7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8925. Updating distributed node attributes only when necessary. Contributed by Tao Yang.\n",
      "commitDate": "20/12/18 6:56 PM",
      "commitName": "f659485ee83f3f34e3717631983adfc8fa1e53dc",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "13/09/18 7:21 AM",
      "commitNameOld": "39c1ea1ed454b6c61f0985fc951f20913ed964fb",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 98.52,
      "commitsBetweenForRepo": 824,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,3 @@\n     public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n-      Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n-          nodeLabelsProvider.getDescriptors();\n-      // if the provider returns null then consider empty labels are set\n-      nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n-          ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n-          : nodeLabelsForHeartbeat;\n-      // take some action only on modification of labels\n-      boolean areNodeLabelsUpdated \u003d\n-          nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n-              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n-\n-      areLabelsSentToRM \u003d false;\n-      // When nodelabels elapsed or resync time is elapsed will send again in\n-      // heartbeat.\n-      if (areNodeLabelsUpdated || isResyncIntervalElapsed()) {\n-        previousNodeLabels \u003d nodeLabelsForHeartbeat;\n-        try {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Labels from provider: \"\n-                + StringUtils.join(\",\", previousNodeLabels));\n-          }\n-          validateNodeLabels(nodeLabelsForHeartbeat);\n-          areLabelsSentToRM \u003d true;\n-        } catch (IOException e) {\n-          // set previous node labels to invalid set, so that invalid\n-          // labels are not verified for every HB, and send empty set\n-          // to RM to have same nodeLabels which was earlier set.\n-          nodeLabelsForHeartbeat \u003d null;\n-        } finally {\n-          // Set last send time in heartbeat\n-          lastNodeLabelSendMills \u003d System.currentTimeMillis();\n-        }\n-      } else {\n-        // if nodelabels have not changed then no need to send\n-        nodeLabelsForHeartbeat \u003d null;\n-      }\n-      return nodeLabelsForHeartbeat;\n+      return getValueForHeartbeat();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n      return getValueForHeartbeat();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "d312b5cf9ffff016432ec5a7e64b81ab7a8c31f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7757. Refactor NodeLabelsProvider to be more generic and reusable for node attributes providers. Contributed by Weiwei Yang.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "d312b5cf9ffff016432ec5a7e64b81ab7a8c31f3",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "31/07/18 12:08 PM",
      "commitNameOld": "4b540bbfcf02d828052999215c6135603d98f5db",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 42.64,
      "commitsBetweenForRepo": 340,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n       Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n-          nodeLabelsProvider.getNodeLabels();\n+          nodeLabelsProvider.getDescriptors();\n       // if the provider returns null then consider empty labels are set\n       nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n           ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n           : nodeLabelsForHeartbeat;\n       // take some action only on modification of labels\n       boolean areNodeLabelsUpdated \u003d\n           nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n               || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n \n       areLabelsSentToRM \u003d false;\n       // When nodelabels elapsed or resync time is elapsed will send again in\n       // heartbeat.\n       if (areNodeLabelsUpdated || isResyncIntervalElapsed()) {\n         previousNodeLabels \u003d nodeLabelsForHeartbeat;\n         try {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Labels from provider: \"\n                 + StringUtils.join(\",\", previousNodeLabels));\n           }\n           validateNodeLabels(nodeLabelsForHeartbeat);\n           areLabelsSentToRM \u003d true;\n         } catch (IOException e) {\n           // set previous node labels to invalid set, so that invalid\n           // labels are not verified for every HB, and send empty set\n           // to RM to have same nodeLabels which was earlier set.\n           nodeLabelsForHeartbeat \u003d null;\n         } finally {\n           // Set last send time in heartbeat\n           lastNodeLabelSendMills \u003d System.currentTimeMillis();\n         }\n       } else {\n         // if nodelabels have not changed then no need to send\n         nodeLabelsForHeartbeat \u003d null;\n       }\n       return nodeLabelsForHeartbeat;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n      Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n          nodeLabelsProvider.getDescriptors();\n      // if the provider returns null then consider empty labels are set\n      nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n          ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n          : nodeLabelsForHeartbeat;\n      // take some action only on modification of labels\n      boolean areNodeLabelsUpdated \u003d\n          nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n\n      areLabelsSentToRM \u003d false;\n      // When nodelabels elapsed or resync time is elapsed will send again in\n      // heartbeat.\n      if (areNodeLabelsUpdated || isResyncIntervalElapsed()) {\n        previousNodeLabels \u003d nodeLabelsForHeartbeat;\n        try {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Labels from provider: \"\n                + StringUtils.join(\",\", previousNodeLabels));\n          }\n          validateNodeLabels(nodeLabelsForHeartbeat);\n          areLabelsSentToRM \u003d true;\n        } catch (IOException e) {\n          // set previous node labels to invalid set, so that invalid\n          // labels are not verified for every HB, and send empty set\n          // to RM to have same nodeLabels which was earlier set.\n          nodeLabelsForHeartbeat \u003d null;\n        } finally {\n          // Set last send time in heartbeat\n          lastNodeLabelSendMills \u003d System.currentTimeMillis();\n        }\n      } else {\n        // if nodelabels have not changed then no need to send\n        nodeLabelsForHeartbeat \u003d null;\n      }\n      return nodeLabelsForHeartbeat;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "30ac69c6bd3db363248d6c742561371576006dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4176. Resync NM nodelabels with RM periodically for distributed nodelabels. (Bibin A Chundatt via wangda)\n",
      "commitDate": "05/10/15 3:47 PM",
      "commitName": "30ac69c6bd3db363248d6c742561371576006dab",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/10/15 6:50 PM",
      "commitNameOld": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.87,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,39 @@\n     public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n       Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n           nodeLabelsProvider.getNodeLabels();\n       // if the provider returns null then consider empty labels are set\n       nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n           ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n           : nodeLabelsForHeartbeat;\n       // take some action only on modification of labels\n       boolean areNodeLabelsUpdated \u003d\n           nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n-              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat)\n-              || checkResendLabelOnFailure();\n+              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n \n-      updatedLabelsSentToRM \u003d false;\n-      if (areNodeLabelsUpdated) {\n+      areLabelsSentToRM \u003d false;\n+      // When nodelabels elapsed or resync time is elapsed will send again in\n+      // heartbeat.\n+      if (areNodeLabelsUpdated || isResyncIntervalElapsed()) {\n         previousNodeLabels \u003d nodeLabelsForHeartbeat;\n         try {\n-          LOG.info(\"Modified labels from provider: \"\n-              + StringUtils.join(\",\", previousNodeLabels));\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Labels from provider: \"\n+                + StringUtils.join(\",\", previousNodeLabels));\n+          }\n           validateNodeLabels(nodeLabelsForHeartbeat);\n-          updatedLabelsSentToRM \u003d true;\n+          areLabelsSentToRM \u003d true;\n         } catch (IOException e) {\n           // set previous node labels to invalid set, so that invalid\n           // labels are not verified for every HB, and send empty set\n           // to RM to have same nodeLabels which was earlier set.\n           nodeLabelsForHeartbeat \u003d null;\n+        } finally {\n+          // Set last send time in heartbeat\n+          lastNodeLabelSendMills \u003d System.currentTimeMillis();\n         }\n       } else {\n         // if nodelabels have not changed then no need to send\n         nodeLabelsForHeartbeat \u003d null;\n       }\n       return nodeLabelsForHeartbeat;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n      Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n          nodeLabelsProvider.getNodeLabels();\n      // if the provider returns null then consider empty labels are set\n      nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n          ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n          : nodeLabelsForHeartbeat;\n      // take some action only on modification of labels\n      boolean areNodeLabelsUpdated \u003d\n          nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n\n      areLabelsSentToRM \u003d false;\n      // When nodelabels elapsed or resync time is elapsed will send again in\n      // heartbeat.\n      if (areNodeLabelsUpdated || isResyncIntervalElapsed()) {\n        previousNodeLabels \u003d nodeLabelsForHeartbeat;\n        try {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Labels from provider: \"\n                + StringUtils.join(\",\", previousNodeLabels));\n          }\n          validateNodeLabels(nodeLabelsForHeartbeat);\n          areLabelsSentToRM \u003d true;\n        } catch (IOException e) {\n          // set previous node labels to invalid set, so that invalid\n          // labels are not verified for every HB, and send empty set\n          // to RM to have same nodeLabels which was earlier set.\n          nodeLabelsForHeartbeat \u003d null;\n        } finally {\n          // Set last send time in heartbeat\n          lastNodeLabelSendMills \u003d System.currentTimeMillis();\n        }\n      } else {\n        // if nodelabels have not changed then no need to send\n        nodeLabelsForHeartbeat \u003d null;\n      }\n      return nodeLabelsForHeartbeat;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "77666105b4557d5706e5844a4ca286917d966c5f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4106. NodeLabels for NM in distributed mode is not updated even after clusterNodelabel addition in RM. (Bibin A Chundatt via wangda)\n",
      "commitDate": "10/09/15 9:30 AM",
      "commitName": "77666105b4557d5706e5844a4ca286917d966c5f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "20/08/15 11:51 AM",
      "commitNameOld": "fc07464d1a48b0413da5e921614430e41263fdb7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 20.9,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n     public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n       Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n           nodeLabelsProvider.getNodeLabels();\n       // if the provider returns null then consider empty labels are set\n       nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n           ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n           : nodeLabelsForHeartbeat;\n       // take some action only on modification of labels\n       boolean areNodeLabelsUpdated \u003d\n           nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n-              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n+              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat)\n+              || checkResendLabelOnFailure();\n \n       updatedLabelsSentToRM \u003d false;\n       if (areNodeLabelsUpdated) {\n         previousNodeLabels \u003d nodeLabelsForHeartbeat;\n         try {\n+          LOG.info(\"Modified labels from provider: \"\n+              + StringUtils.join(\",\", previousNodeLabels));\n           validateNodeLabels(nodeLabelsForHeartbeat);\n           updatedLabelsSentToRM \u003d true;\n         } catch (IOException e) {\n           // set previous node labels to invalid set, so that invalid\n           // labels are not verified for every HB, and send empty set\n           // to RM to have same nodeLabels which was earlier set.\n           nodeLabelsForHeartbeat \u003d null;\n         }\n       } else {\n         // if nodelabels have not changed then no need to send\n         nodeLabelsForHeartbeat \u003d null;\n       }\n       return nodeLabelsForHeartbeat;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n      Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n          nodeLabelsProvider.getNodeLabels();\n      // if the provider returns null then consider empty labels are set\n      nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n          ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n          : nodeLabelsForHeartbeat;\n      // take some action only on modification of labels\n      boolean areNodeLabelsUpdated \u003d\n          nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat)\n              || checkResendLabelOnFailure();\n\n      updatedLabelsSentToRM \u003d false;\n      if (areNodeLabelsUpdated) {\n        previousNodeLabels \u003d nodeLabelsForHeartbeat;\n        try {\n          LOG.info(\"Modified labels from provider: \"\n              + StringUtils.join(\",\", previousNodeLabels));\n          validateNodeLabels(nodeLabelsForHeartbeat);\n          updatedLabelsSentToRM \u003d true;\n        } catch (IOException e) {\n          // set previous node labels to invalid set, so that invalid\n          // labels are not verified for every HB, and send empty set\n          // to RM to have same nodeLabels which was earlier set.\n          nodeLabelsForHeartbeat \u003d null;\n        }\n      } else {\n        // if nodelabels have not changed then no need to send\n        nodeLabelsForHeartbeat \u003d null;\n      }\n      return nodeLabelsForHeartbeat;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "fc07464d1a48b0413da5e921614430e41263fdb7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2923. Support configuration based NodeLabelsProvider Service in Distributed Node Label Configuration Setup. (Naganarasimha G R)\n",
      "commitDate": "20/08/15 11:51 AM",
      "commitName": "fc07464d1a48b0413da5e921614430e41263fdb7",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,30 @@\n+    public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n+      Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n+          nodeLabelsProvider.getNodeLabels();\n+      // if the provider returns null then consider empty labels are set\n+      nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n+          ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n+          : nodeLabelsForHeartbeat;\n+      // take some action only on modification of labels\n+      boolean areNodeLabelsUpdated \u003d\n+          nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n+              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n+\n+      updatedLabelsSentToRM \u003d false;\n+      if (areNodeLabelsUpdated) {\n+        previousNodeLabels \u003d nodeLabelsForHeartbeat;\n+        try {\n+          validateNodeLabels(nodeLabelsForHeartbeat);\n+          updatedLabelsSentToRM \u003d true;\n+        } catch (IOException e) {\n+          // set previous node labels to invalid set, so that invalid\n+          // labels are not verified for every HB, and send empty set\n+          // to RM to have same nodeLabels which was earlier set.\n+          nodeLabelsForHeartbeat \u003d null;\n+        }\n+      } else {\n+        // if nodelabels have not changed then no need to send\n+        nodeLabelsForHeartbeat \u003d null;\n+      }\n+      return nodeLabelsForHeartbeat;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public Set\u003cNodeLabel\u003e getNodeLabelsForHeartbeat() {\n      Set\u003cNodeLabel\u003e nodeLabelsForHeartbeat \u003d\n          nodeLabelsProvider.getNodeLabels();\n      // if the provider returns null then consider empty labels are set\n      nodeLabelsForHeartbeat \u003d (nodeLabelsForHeartbeat \u003d\u003d null)\n          ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n          : nodeLabelsForHeartbeat;\n      // take some action only on modification of labels\n      boolean areNodeLabelsUpdated \u003d\n          nodeLabelsForHeartbeat.size() !\u003d previousNodeLabels.size()\n              || !previousNodeLabels.containsAll(nodeLabelsForHeartbeat);\n\n      updatedLabelsSentToRM \u003d false;\n      if (areNodeLabelsUpdated) {\n        previousNodeLabels \u003d nodeLabelsForHeartbeat;\n        try {\n          validateNodeLabels(nodeLabelsForHeartbeat);\n          updatedLabelsSentToRM \u003d true;\n        } catch (IOException e) {\n          // set previous node labels to invalid set, so that invalid\n          // labels are not verified for every HB, and send empty set\n          // to RM to have same nodeLabels which was earlier set.\n          nodeLabelsForHeartbeat \u003d null;\n        }\n      } else {\n        // if nodelabels have not changed then no need to send\n        nodeLabelsForHeartbeat \u003d null;\n      }\n      return nodeLabelsForHeartbeat;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}