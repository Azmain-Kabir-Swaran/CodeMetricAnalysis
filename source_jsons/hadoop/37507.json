{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "createAndRegisterOpportunisticDispatcher",
  "functionId": "createAndRegisterOpportunisticDispatcher___service-ApplicationMasterService",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 887,
  "functionEndLine": 902,
  "numCommitsSeen": 192,
  "timeTaken": 1542,
  "changeHistory": [
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35"
  ],
  "changeHistoryShort": {
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8606. Opportunistic scheduling does not work post RM failover. Contributed by Bibin A Chundatt.\n",
      "commitDate": "31/07/18 11:47 PM",
      "commitName": "a48a0cc7fd8e7ac1c07b260e6078077824f27c35",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,16 @@\n+    private void createAndRegisterOpportunisticDispatcher(\n+        ApplicationMasterService service) {\n+      if (!isOpportunisticSchedulingEnabled(conf)) {\n+        return;\n+      }\n+      EventDispatcher oppContainerAllocEventDispatcher \u003d new EventDispatcher(\n+          (OpportunisticContainerAllocatorAMService) service,\n+          OpportunisticContainerAllocatorAMService.class.getName());\n+      // Add an event dispatcher for the\n+      // OpportunisticContainerAllocatorAMService to handle node\n+      // additions, updates and removals. Since the SchedulerEvent is currently\n+      // a super set of theses, we register interest for it.\n+      addService(oppContainerAllocEventDispatcher);\n+      rmDispatcher\n+          .register(SchedulerEventType.class, oppContainerAllocEventDispatcher);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void createAndRegisterOpportunisticDispatcher(\n        ApplicationMasterService service) {\n      if (!isOpportunisticSchedulingEnabled(conf)) {\n        return;\n      }\n      EventDispatcher oppContainerAllocEventDispatcher \u003d new EventDispatcher(\n          (OpportunisticContainerAllocatorAMService) service,\n          OpportunisticContainerAllocatorAMService.class.getName());\n      // Add an event dispatcher for the\n      // OpportunisticContainerAllocatorAMService to handle node\n      // additions, updates and removals. Since the SchedulerEvent is currently\n      // a super set of theses, we register interest for it.\n      addService(oppContainerAllocEventDispatcher);\n      rmDispatcher\n          .register(SchedulerEventType.class, oppContainerAllocEventDispatcher);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}