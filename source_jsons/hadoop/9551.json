{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReportCommand.java",
  "functionName": "handleTopReport",
  "functionId": "handleTopReport___cmd-CommandLine(modifiers-final)__result-TextStringBuilder(modifiers-final)__nodeFormat-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
  "functionStartLine": 102,
  "functionEndLine": 132,
  "numCommitsSeen": 23,
  "timeTaken": 1270,
  "changeHistory": [
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
    "2a48b3594c502c4dcf201f2b60386383c0d9ae91",
    "b502102bb1a1f416f43dd1227886c57ccad70fcc"
  ],
  "changeHistoryShort": {
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": "Yparameterchange",
    "2a48b3594c502c4dcf201f2b60386383c0d9ae91": "Yexceptionschange",
    "b502102bb1a1f416f43dd1227886c57ccad70fcc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-15531. Use commons-text instead of commons-lang in some classes to fix deprecation warnings. Contributed by Takanobu Asanuma.\n",
      "commitDate": "13/07/18 8:42 AM",
      "commitName": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/06/18 10:17 AM",
      "commitNameOld": "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.93,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n-  private void handleTopReport(final CommandLine cmd, final StrBuilder result,\n+  private void handleTopReport(final CommandLine cmd, final TextStringBuilder result,\n       final String nodeFormat) throws IllegalArgumentException {\n     Collections.sort(getCluster().getNodes(), Collections.reverseOrder());\n \n     /* extract value that identifies top X DataNode(s) */\n     setTopNodes(parseTopNodes(cmd, result));\n \n     /*\n      * Reporting volume information of top X DataNode(s) in summary\n      */\n     final String outputLine \u003d String.format(\n         \"Reporting top %d DataNode(s) benefiting from running DiskBalancer.\",\n         getTopNodes());\n     recordOutput(result, outputLine);\n \n     ListIterator\u003cDiskBalancerDataNode\u003e li \u003d getCluster().getNodes()\n         .listIterator();\n \n     for (int i \u003d 0; i \u003c getTopNodes() \u0026\u0026 li.hasNext(); i++) {\n       DiskBalancerDataNode dbdn \u003d li.next();\n       result.appendln(String.format(nodeFormat,\n           i+1,\n           getTopNodes(),\n           dbdn.getDataNodeName(),\n           dbdn.getDataNodeIP(),\n           dbdn.getDataNodePort(),\n           dbdn.getDataNodeUUID(),\n           dbdn.getVolumeCount(),\n           dbdn.getNodeDataDensity()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleTopReport(final CommandLine cmd, final TextStringBuilder result,\n      final String nodeFormat) throws IllegalArgumentException {\n    Collections.sort(getCluster().getNodes(), Collections.reverseOrder());\n\n    /* extract value that identifies top X DataNode(s) */\n    setTopNodes(parseTopNodes(cmd, result));\n\n    /*\n     * Reporting volume information of top X DataNode(s) in summary\n     */\n    final String outputLine \u003d String.format(\n        \"Reporting top %d DataNode(s) benefiting from running DiskBalancer.\",\n        getTopNodes());\n    recordOutput(result, outputLine);\n\n    ListIterator\u003cDiskBalancerDataNode\u003e li \u003d getCluster().getNodes()\n        .listIterator();\n\n    for (int i \u003d 0; i \u003c getTopNodes() \u0026\u0026 li.hasNext(); i++) {\n      DiskBalancerDataNode dbdn \u003d li.next();\n      result.appendln(String.format(nodeFormat,\n          i+1,\n          getTopNodes(),\n          dbdn.getDataNodeName(),\n          dbdn.getDataNodeIP(),\n          dbdn.getDataNodePort(),\n          dbdn.getDataNodeUUID(),\n          dbdn.getVolumeCount(),\n          dbdn.getNodeDataDensity()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {
        "oldValue": "[cmd-CommandLine(modifiers-final), result-StrBuilder(modifiers-final), nodeFormat-String(modifiers-final)]",
        "newValue": "[cmd-CommandLine(modifiers-final), result-TextStringBuilder(modifiers-final), nodeFormat-String(modifiers-final)]"
      }
    },
    "2a48b3594c502c4dcf201f2b60386383c0d9ae91": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-12948. DiskBalancer report command top option should only take positive numeric values. Contributed by Shashikant Banerjee.\n",
      "commitDate": "03/01/18 6:48 PM",
      "commitName": "2a48b3594c502c4dcf201f2b60386383c0d9ae91",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "21/03/17 2:44 AM",
      "commitNameOld": "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 288.71,
      "commitsBetweenForRepo": 1952,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void handleTopReport(final CommandLine cmd, final StrBuilder result,\n-      final String nodeFormat) {\n+      final String nodeFormat) throws IllegalArgumentException {\n     Collections.sort(getCluster().getNodes(), Collections.reverseOrder());\n \n     /* extract value that identifies top X DataNode(s) */\n     setTopNodes(parseTopNodes(cmd, result));\n \n     /*\n      * Reporting volume information of top X DataNode(s) in summary\n      */\n     final String outputLine \u003d String.format(\n         \"Reporting top %d DataNode(s) benefiting from running DiskBalancer.\",\n         getTopNodes());\n     recordOutput(result, outputLine);\n \n     ListIterator\u003cDiskBalancerDataNode\u003e li \u003d getCluster().getNodes()\n         .listIterator();\n \n     for (int i \u003d 0; i \u003c getTopNodes() \u0026\u0026 li.hasNext(); i++) {\n       DiskBalancerDataNode dbdn \u003d li.next();\n       result.appendln(String.format(nodeFormat,\n           i+1,\n           getTopNodes(),\n           dbdn.getDataNodeName(),\n           dbdn.getDataNodeIP(),\n           dbdn.getDataNodePort(),\n           dbdn.getDataNodeUUID(),\n           dbdn.getVolumeCount(),\n           dbdn.getNodeDataDensity()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleTopReport(final CommandLine cmd, final StrBuilder result,\n      final String nodeFormat) throws IllegalArgumentException {\n    Collections.sort(getCluster().getNodes(), Collections.reverseOrder());\n\n    /* extract value that identifies top X DataNode(s) */\n    setTopNodes(parseTopNodes(cmd, result));\n\n    /*\n     * Reporting volume information of top X DataNode(s) in summary\n     */\n    final String outputLine \u003d String.format(\n        \"Reporting top %d DataNode(s) benefiting from running DiskBalancer.\",\n        getTopNodes());\n    recordOutput(result, outputLine);\n\n    ListIterator\u003cDiskBalancerDataNode\u003e li \u003d getCluster().getNodes()\n        .listIterator();\n\n    for (int i \u003d 0; i \u003c getTopNodes() \u0026\u0026 li.hasNext(); i++) {\n      DiskBalancerDataNode dbdn \u003d li.next();\n      result.appendln(String.format(nodeFormat,\n          i+1,\n          getTopNodes(),\n          dbdn.getDataNodeName(),\n          dbdn.getDataNodeIP(),\n          dbdn.getDataNodePort(),\n          dbdn.getDataNodeUUID(),\n          dbdn.getVolumeCount(),\n          dbdn.getNodeDataDensity()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IllegalArgumentException]"
      }
    },
    "b502102bb1a1f416f43dd1227886c57ccad70fcc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9461. DiskBalancer: Add Report Command. Contributed by Xiaobing Zhou.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "b502102bb1a1f416f43dd1227886c57ccad70fcc",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,31 @@\n+  private void handleTopReport(final CommandLine cmd, final StrBuilder result,\n+      final String nodeFormat) {\n+    Collections.sort(getCluster().getNodes(), Collections.reverseOrder());\n+\n+    /* extract value that identifies top X DataNode(s) */\n+    setTopNodes(parseTopNodes(cmd, result));\n+\n+    /*\n+     * Reporting volume information of top X DataNode(s) in summary\n+     */\n+    final String outputLine \u003d String.format(\n+        \"Reporting top %d DataNode(s) benefiting from running DiskBalancer.\",\n+        getTopNodes());\n+    recordOutput(result, outputLine);\n+\n+    ListIterator\u003cDiskBalancerDataNode\u003e li \u003d getCluster().getNodes()\n+        .listIterator();\n+\n+    for (int i \u003d 0; i \u003c getTopNodes() \u0026\u0026 li.hasNext(); i++) {\n+      DiskBalancerDataNode dbdn \u003d li.next();\n+      result.appendln(String.format(nodeFormat,\n+          i+1,\n+          getTopNodes(),\n+          dbdn.getDataNodeName(),\n+          dbdn.getDataNodeIP(),\n+          dbdn.getDataNodePort(),\n+          dbdn.getDataNodeUUID(),\n+          dbdn.getVolumeCount(),\n+          dbdn.getNodeDataDensity()));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleTopReport(final CommandLine cmd, final StrBuilder result,\n      final String nodeFormat) {\n    Collections.sort(getCluster().getNodes(), Collections.reverseOrder());\n\n    /* extract value that identifies top X DataNode(s) */\n    setTopNodes(parseTopNodes(cmd, result));\n\n    /*\n     * Reporting volume information of top X DataNode(s) in summary\n     */\n    final String outputLine \u003d String.format(\n        \"Reporting top %d DataNode(s) benefiting from running DiskBalancer.\",\n        getTopNodes());\n    recordOutput(result, outputLine);\n\n    ListIterator\u003cDiskBalancerDataNode\u003e li \u003d getCluster().getNodes()\n        .listIterator();\n\n    for (int i \u003d 0; i \u003c getTopNodes() \u0026\u0026 li.hasNext(); i++) {\n      DiskBalancerDataNode dbdn \u003d li.next();\n      result.appendln(String.format(nodeFormat,\n          i+1,\n          getTopNodes(),\n          dbdn.getDataNodeName(),\n          dbdn.getDataNodeIP(),\n          dbdn.getDataNodePort(),\n          dbdn.getDataNodeUUID(),\n          dbdn.getVolumeCount(),\n          dbdn.getNodeDataDensity()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java"
    }
  }
}