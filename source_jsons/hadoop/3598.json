{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "read",
  "functionId": "read___buf-ByteBuffer(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 958,
  "functionEndLine": 962,
  "numCommitsSeen": 149,
  "timeTaken": 8292,
  "changeHistory": [
    "5d748bd056a32f2c6922514cd0c5b31d866a9919",
    "793447f79924c97c2b562d5e41fa85adf19673fe",
    "7905788db94d560e6668af0d4bed22b326961aaf",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "892ade689f9bcce76daae8f66fc00a49bee8548e",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
    "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
    "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc",
    "b7cd8c0f865e88e40eee75fd2690b1fdc4155071",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "5d748bd056a32f2c6922514cd0c5b31d866a9919": "Ybodychange",
    "793447f79924c97c2b562d5e41fa85adf19673fe": "Ybodychange",
    "7905788db94d560e6668af0d4bed22b326961aaf": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "892ade689f9bcce76daae8f66fc00a49bee8548e": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "7f6ed7fe365166e8075359f1d0ad035fa876c70f": "Ybodychange",
    "f55a1c08763e5f865fd9193d640c89a06ab49c4a": "Ymultichange(Yparameterchange,Ybodychange)",
    "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc": "Ybodychange",
    "b7cd8c0f865e88e40eee75fd2690b1fdc4155071": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5d748bd056a32f2c6922514cd0c5b31d866a9919": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13702. Remove HTrace hooks from DFSClient to reduce CPU usage. Contributed by Todd Lipcon.\n",
      "commitDate": "02/07/18 3:11 AM",
      "commitName": "5d748bd056a32f2c6922514cd0c5b31d866a9919",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/07/18 3:02 AM",
      "commitNameOld": "6ba99741086170b83c38d3e7e715d9e8046a1e00",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,5 @@\n   public synchronized int read(final ByteBuffer buf) throws IOException {\n     ReaderStrategy byteBufferReader \u003d\n         new ByteBufferStrategy(buf, readStatistics, dfsClient);\n-    int reqLen \u003d buf.remaining();\n-    try (TraceScope scope \u003d\n-             dfsClient.newReaderTraceScope(\"DFSInputStream#byteBufferRead\",\n-                 src, getPos(), reqLen)){\n-      int retLen \u003d readWithStrategy(byteBufferReader);\n-      if (retLen \u003c reqLen) {\n-        dfsClient.addRetLenToReaderScope(scope, retLen);\n-      }\n-      return retLen;\n-    }\n+    return readWithStrategy(byteBufferReader);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d\n        new ByteBufferStrategy(buf, readStatistics, dfsClient);\n    return readWithStrategy(byteBufferReader);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "793447f79924c97c2b562d5e41fa85adf19673fe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8905. Refactor DFSInputStream#ReaderStrategy. Contributed by Kai Zheng and Sammi Chen\n",
      "commitDate": "24/08/16 6:57 AM",
      "commitName": "793447f79924c97c2b562d5e41fa85adf19673fe",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "08/06/16 10:52 PM",
      "commitNameOld": "8ea9bbce2614e8eb499af73589f021ed1789e78f",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 76.34,
      "commitsBetweenForRepo": 637,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,14 @@\n   public synchronized int read(final ByteBuffer buf) throws IOException {\n-    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n+    ReaderStrategy byteBufferReader \u003d\n+        new ByteBufferStrategy(buf, readStatistics, dfsClient);\n     int reqLen \u003d buf.remaining();\n     try (TraceScope scope \u003d\n              dfsClient.newReaderTraceScope(\"DFSInputStream#byteBufferRead\",\n                  src, getPos(), reqLen)){\n-      int retLen \u003d readWithStrategy(byteBufferReader, 0, reqLen);\n+      int retLen \u003d readWithStrategy(byteBufferReader);\n       if (retLen \u003c reqLen) {\n         dfsClient.addRetLenToReaderScope(scope, retLen);\n       }\n       return retLen;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d\n        new ByteBufferStrategy(buf, readStatistics, dfsClient);\n    int reqLen \u003d buf.remaining();\n    try (TraceScope scope \u003d\n             dfsClient.newReaderTraceScope(\"DFSInputStream#byteBufferRead\",\n                 src, getPos(), reqLen)){\n      int retLen \u003d readWithStrategy(byteBufferReader);\n      if (retLen \u003c reqLen) {\n        dfsClient.addRetLenToReaderScope(scope, retLen);\n      }\n      return retLen;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "7905788db94d560e6668af0d4bed22b326961aaf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9576: HTrace: collect position/length information on read operations (zhz via cmccabe)\n",
      "commitDate": "20/01/16 11:26 AM",
      "commitName": "7905788db94d560e6668af0d4bed22b326961aaf",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "08/01/16 9:13 AM",
      "commitNameOld": "38c4c14472996562eb3d610649246770c2888c6b",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 12.09,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,13 @@\n   public synchronized int read(final ByteBuffer buf) throws IOException {\n     ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n-    try (TraceScope ignored \u003d\n-             dfsClient.newPathTraceScope(\"DFSInputStream#byteBufferRead\", src)){\n-      return readWithStrategy(byteBufferReader, 0, buf.remaining());\n+    int reqLen \u003d buf.remaining();\n+    try (TraceScope scope \u003d\n+             dfsClient.newReaderTraceScope(\"DFSInputStream#byteBufferRead\",\n+                 src, getPos(), reqLen)){\n+      int retLen \u003d readWithStrategy(byteBufferReader, 0, reqLen);\n+      if (retLen \u003c reqLen) {\n+        dfsClient.addRetLenToReaderScope(scope, retLen);\n+      }\n+      return retLen;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n    int reqLen \u003d buf.remaining();\n    try (TraceScope scope \u003d\n             dfsClient.newReaderTraceScope(\"DFSInputStream#byteBufferRead\",\n                 src, getPos(), reqLen)){\n      int retLen \u003d readWithStrategy(byteBufferReader, 0, reqLen);\n      if (retLen \u003c reqLen) {\n        dfsClient.addRetLenToReaderScope(scope, retLen);\n      }\n      return retLen;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,7 @@\n   public synchronized int read(final ByteBuffer buf) throws IOException {\n     ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n-    TraceScope scope \u003d\n-        dfsClient.newPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n-    try {\n+    try (TraceScope ignored \u003d\n+             dfsClient.newPathTraceScope(\"DFSInputStream#byteBufferRead\", src)){\n       return readWithStrategy(byteBufferReader, 0, buf.remaining());\n-    } finally {\n-      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n    try (TraceScope ignored \u003d\n             dfsClient.newPathTraceScope(\"DFSInputStream#byteBufferRead\", src)){\n      return readWithStrategy(byteBufferReader, 0, buf.remaining());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "892ade689f9bcce76daae8f66fc00a49bee8548e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9080. Update htrace version to 4.0.1 (cmccabe)\n",
      "commitDate": "28/09/15 7:42 AM",
      "commitName": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public synchronized int read(final ByteBuffer buf) throws IOException {\n     ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n     TraceScope scope \u003d\n-        dfsClient.getPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n+        dfsClient.newPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n     try {\n       return readWithStrategy(byteBufferReader, 0, buf.remaining());\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n    TraceScope scope \u003d\n        dfsClient.newPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n    try {\n      return readWithStrategy(byteBufferReader, 0, buf.remaining());\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n    TraceScope scope \u003d\n        dfsClient.getPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n    try {\n      return readWithStrategy(byteBufferReader, 0, buf.remaining());\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "7f6ed7fe365166e8075359f1d0ad035fa876c70f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7055. Add tracing to DFSInputStream (cmccabe)\n",
      "commitDate": "03/10/14 1:35 PM",
      "commitName": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "15/07/14 2:10 PM",
      "commitNameOld": "56c0bd4d37ab13b6cbcf860eda852da603ab2f62",
      "commitAuthorOld": "",
      "daysBetweenCommits": 79.98,
      "commitsBetweenForRepo": 820,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,10 @@\n   public synchronized int read(final ByteBuffer buf) throws IOException {\n     ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n-\n-    return readWithStrategy(byteBufferReader, 0, buf.remaining());\n+    TraceScope scope \u003d\n+        dfsClient.getPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n+    try {\n+      return readWithStrategy(byteBufferReader, 0, buf.remaining());\n+    } finally {\n+      scope.close();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n    TraceScope scope \u003d\n        dfsClient.getPathTraceScope(\"DFSInputStream#byteBufferRead\", src);\n    try {\n      return readWithStrategy(byteBufferReader, 0, buf.remaining());\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "f55a1c08763e5f865fd9193d640c89a06ab49c4a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/12 10:30 AM",
      "commitName": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/03/12 10:30 AM",
          "commitName": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/03/12 1:26 PM",
          "commitNameOld": "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,5 @@\n-  public synchronized int read(byte buf[], int off, int len) throws IOException {\n-    dfsClient.checkOpen();\n-    if (closed) {\n-      throw new IOException(\"Stream closed\");\n-    }\n-    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n-      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n-    failures \u003d 0;\n-    if (pos \u003c getFileLength()) {\n-      int retries \u003d 2;\n-      while (retries \u003e 0) {\n-        try {\n-          // currentNode can be left as null if previous read had a checksum\n-          // error on the same block. See HDFS-3067\n-          if (pos \u003e blockEnd || currentNode \u003d\u003d null) {\n-            currentNode \u003d blockSeekTo(pos);\n-          }\n-          int realLen \u003d (int) Math.min(len, (blockEnd - pos + 1L));\n-          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n-          \n-          if (result \u003e\u003d 0) {\n-            pos +\u003d result;\n-          } else {\n-            // got a EOS from reader though we expect more data on it.\n-            throw new IOException(\"Unexpected EOS from the reader\");\n-          }\n-          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n-            dfsClient.stats.incrementBytesRead(result);\n-          }\n-          return result;\n-        } catch (ChecksumException ce) {\n-          throw ce;            \n-        } catch (IOException e) {\n-          if (retries \u003d\u003d 1) {\n-            DFSClient.LOG.warn(\"DFS Read\", e);\n-          }\n-          blockEnd \u003d -1;\n-          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n-          if (--retries \u003d\u003d 0) {\n-            throw e;\n-          }\n-        } finally {\n-          // Check if need to report block replicas corruption either read\n-          // was successful or ChecksumException occured.\n-          reportCheckSumFailure(corruptedBlockMap, \n-              currentLocatedBlock.getLocations().length);\n-        }\n-      }\n-    }\n-    return -1;\n+  public synchronized int read(final ByteBuffer buf) throws IOException {\n+    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n+\n+    return readWithStrategy(byteBufferReader, 0, buf.remaining());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n\n    return readWithStrategy(byteBufferReader, 0, buf.remaining());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[buf-byte[], off-int, len-int]",
            "newValue": "[buf-ByteBuffer(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2834. Add a ByteBuffer-based read API to DFSInputStream. Contributed by Henry Robinson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/03/12 10:30 AM",
          "commitName": "f55a1c08763e5f865fd9193d640c89a06ab49c4a",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "15/03/12 1:26 PM",
          "commitNameOld": "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,5 @@\n-  public synchronized int read(byte buf[], int off, int len) throws IOException {\n-    dfsClient.checkOpen();\n-    if (closed) {\n-      throw new IOException(\"Stream closed\");\n-    }\n-    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n-      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n-    failures \u003d 0;\n-    if (pos \u003c getFileLength()) {\n-      int retries \u003d 2;\n-      while (retries \u003e 0) {\n-        try {\n-          // currentNode can be left as null if previous read had a checksum\n-          // error on the same block. See HDFS-3067\n-          if (pos \u003e blockEnd || currentNode \u003d\u003d null) {\n-            currentNode \u003d blockSeekTo(pos);\n-          }\n-          int realLen \u003d (int) Math.min(len, (blockEnd - pos + 1L));\n-          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n-          \n-          if (result \u003e\u003d 0) {\n-            pos +\u003d result;\n-          } else {\n-            // got a EOS from reader though we expect more data on it.\n-            throw new IOException(\"Unexpected EOS from the reader\");\n-          }\n-          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n-            dfsClient.stats.incrementBytesRead(result);\n-          }\n-          return result;\n-        } catch (ChecksumException ce) {\n-          throw ce;            \n-        } catch (IOException e) {\n-          if (retries \u003d\u003d 1) {\n-            DFSClient.LOG.warn(\"DFS Read\", e);\n-          }\n-          blockEnd \u003d -1;\n-          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n-          if (--retries \u003d\u003d 0) {\n-            throw e;\n-          }\n-        } finally {\n-          // Check if need to report block replicas corruption either read\n-          // was successful or ChecksumException occured.\n-          reportCheckSumFailure(corruptedBlockMap, \n-              currentLocatedBlock.getLocations().length);\n-        }\n-      }\n-    }\n-    return -1;\n+  public synchronized int read(final ByteBuffer buf) throws IOException {\n+    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n+\n+    return readWithStrategy(byteBufferReader, 0, buf.remaining());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized int read(final ByteBuffer buf) throws IOException {\n    ReaderStrategy byteBufferReader \u003d new ByteBufferStrategy(buf);\n\n    return readWithStrategy(byteBufferReader, 0, buf.remaining());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3067. NPE in DFSInputStream.readBuffer if read is repeated on corrupted block. Contributed by Henry Robinson.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301182 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/12 1:26 PM",
      "commitName": "6d96a28a088a7ad465f0fbbb94d5ecd1947f7ffc",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "21/11/11 6:57 PM",
      "commitNameOld": "2ab10e29d9cca5018064be46a40e3c74423615a8",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 114.73,
      "commitsBetweenForRepo": 799,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n   public synchronized int read(byte buf[], int off, int len) throws IOException {\n     dfsClient.checkOpen();\n     if (closed) {\n       throw new IOException(\"Stream closed\");\n     }\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     failures \u003d 0;\n     if (pos \u003c getFileLength()) {\n       int retries \u003d 2;\n       while (retries \u003e 0) {\n         try {\n-          if (pos \u003e blockEnd) {\n+          // currentNode can be left as null if previous read had a checksum\n+          // error on the same block. See HDFS-3067\n+          if (pos \u003e blockEnd || currentNode \u003d\u003d null) {\n             currentNode \u003d blockSeekTo(pos);\n           }\n           int realLen \u003d (int) Math.min(len, (blockEnd - pos + 1L));\n           int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n           \n           if (result \u003e\u003d 0) {\n             pos +\u003d result;\n           } else {\n             // got a EOS from reader though we expect more data on it.\n             throw new IOException(\"Unexpected EOS from the reader\");\n           }\n           if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n             dfsClient.stats.incrementBytesRead(result);\n           }\n           return result;\n         } catch (ChecksumException ce) {\n           throw ce;            \n         } catch (IOException e) {\n           if (retries \u003d\u003d 1) {\n             DFSClient.LOG.warn(\"DFS Read\", e);\n           }\n           blockEnd \u003d -1;\n           if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n           if (--retries \u003d\u003d 0) {\n             throw e;\n           }\n         } finally {\n           // Check if need to report block replicas corruption either read\n           // was successful or ChecksumException occured.\n           reportCheckSumFailure(corruptedBlockMap, \n               currentLocatedBlock.getLocations().length);\n         }\n       }\n     }\n     return -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte buf[], int off, int len) throws IOException {\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    failures \u003d 0;\n    if (pos \u003c getFileLength()) {\n      int retries \u003d 2;\n      while (retries \u003e 0) {\n        try {\n          // currentNode can be left as null if previous read had a checksum\n          // error on the same block. See HDFS-3067\n          if (pos \u003e blockEnd || currentNode \u003d\u003d null) {\n            currentNode \u003d blockSeekTo(pos);\n          }\n          int realLen \u003d (int) Math.min(len, (blockEnd - pos + 1L));\n          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n          \n          if (result \u003e\u003d 0) {\n            pos +\u003d result;\n          } else {\n            // got a EOS from reader though we expect more data on it.\n            throw new IOException(\"Unexpected EOS from the reader\");\n          }\n          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n            dfsClient.stats.incrementBytesRead(result);\n          }\n          return result;\n        } catch (ChecksumException ce) {\n          throw ce;            \n        } catch (IOException e) {\n          if (retries \u003d\u003d 1) {\n            DFSClient.LOG.warn(\"DFS Read\", e);\n          }\n          blockEnd \u003d -1;\n          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n          if (--retries \u003d\u003d 0) {\n            throw e;\n          }\n        } finally {\n          // Check if need to report block replicas corruption either read\n          // was successful or ChecksumException occured.\n          reportCheckSumFailure(corruptedBlockMap, \n              currentLocatedBlock.getLocations().length);\n        }\n      }\n    }\n    return -1;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "b7cd8c0f865e88e40eee75fd2690b1fdc4155071": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2564. Cleanup unnecessary exceptions thrown and unnecessary casts. Contributed by Hari Mankude\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203950 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 6:34 PM",
      "commitName": "b7cd8c0f865e88e40eee75fd2690b1fdc4155071",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/11/11 11:54 PM",
      "commitNameOld": "40fe96546fcd68696076db67053f30d38a39a0d5",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 15.82,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public synchronized int read(byte buf[], int off, int len) throws IOException {\n     dfsClient.checkOpen();\n     if (closed) {\n       throw new IOException(\"Stream closed\");\n     }\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     failures \u003d 0;\n     if (pos \u003c getFileLength()) {\n       int retries \u003d 2;\n       while (retries \u003e 0) {\n         try {\n           if (pos \u003e blockEnd) {\n             currentNode \u003d blockSeekTo(pos);\n           }\n-          int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n+          int realLen \u003d (int) Math.min(len, (blockEnd - pos + 1L));\n           int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n           \n           if (result \u003e\u003d 0) {\n             pos +\u003d result;\n           } else {\n             // got a EOS from reader though we expect more data on it.\n             throw new IOException(\"Unexpected EOS from the reader\");\n           }\n           if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n             dfsClient.stats.incrementBytesRead(result);\n           }\n           return result;\n         } catch (ChecksumException ce) {\n           throw ce;            \n         } catch (IOException e) {\n           if (retries \u003d\u003d 1) {\n             DFSClient.LOG.warn(\"DFS Read\", e);\n           }\n           blockEnd \u003d -1;\n           if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n           if (--retries \u003d\u003d 0) {\n             throw e;\n           }\n         } finally {\n           // Check if need to report block replicas corruption either read\n           // was successful or ChecksumException occured.\n           reportCheckSumFailure(corruptedBlockMap, \n               currentLocatedBlock.getLocations().length);\n         }\n       }\n     }\n     return -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte buf[], int off, int len) throws IOException {\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    failures \u003d 0;\n    if (pos \u003c getFileLength()) {\n      int retries \u003d 2;\n      while (retries \u003e 0) {\n        try {\n          if (pos \u003e blockEnd) {\n            currentNode \u003d blockSeekTo(pos);\n          }\n          int realLen \u003d (int) Math.min(len, (blockEnd - pos + 1L));\n          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n          \n          if (result \u003e\u003d 0) {\n            pos +\u003d result;\n          } else {\n            // got a EOS from reader though we expect more data on it.\n            throw new IOException(\"Unexpected EOS from the reader\");\n          }\n          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n            dfsClient.stats.incrementBytesRead(result);\n          }\n          return result;\n        } catch (ChecksumException ce) {\n          throw ce;            \n        } catch (IOException e) {\n          if (retries \u003d\u003d 1) {\n            DFSClient.LOG.warn(\"DFS Read\", e);\n          }\n          blockEnd \u003d -1;\n          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n          if (--retries \u003d\u003d 0) {\n            throw e;\n          }\n        } finally {\n          // Check if need to report block replicas corruption either read\n          // was successful or ChecksumException occured.\n          reportCheckSumFailure(corruptedBlockMap, \n              currentLocatedBlock.getLocations().length);\n        }\n      }\n    }\n    return -1;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized int read(byte buf[], int off, int len) throws IOException {\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    failures \u003d 0;\n    if (pos \u003c getFileLength()) {\n      int retries \u003d 2;\n      while (retries \u003e 0) {\n        try {\n          if (pos \u003e blockEnd) {\n            currentNode \u003d blockSeekTo(pos);\n          }\n          int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n          \n          if (result \u003e\u003d 0) {\n            pos +\u003d result;\n          } else {\n            // got a EOS from reader though we expect more data on it.\n            throw new IOException(\"Unexpected EOS from the reader\");\n          }\n          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n            dfsClient.stats.incrementBytesRead(result);\n          }\n          return result;\n        } catch (ChecksumException ce) {\n          throw ce;            \n        } catch (IOException e) {\n          if (retries \u003d\u003d 1) {\n            DFSClient.LOG.warn(\"DFS Read\", e);\n          }\n          blockEnd \u003d -1;\n          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n          if (--retries \u003d\u003d 0) {\n            throw e;\n          }\n        } finally {\n          // Check if need to report block replicas corruption either read\n          // was successful or ChecksumException occured.\n          reportCheckSumFailure(corruptedBlockMap, \n              currentLocatedBlock.getLocations().length);\n        }\n      }\n    }\n    return -1;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized int read(byte buf[], int off, int len) throws IOException {\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    failures \u003d 0;\n    if (pos \u003c getFileLength()) {\n      int retries \u003d 2;\n      while (retries \u003e 0) {\n        try {\n          if (pos \u003e blockEnd) {\n            currentNode \u003d blockSeekTo(pos);\n          }\n          int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n          \n          if (result \u003e\u003d 0) {\n            pos +\u003d result;\n          } else {\n            // got a EOS from reader though we expect more data on it.\n            throw new IOException(\"Unexpected EOS from the reader\");\n          }\n          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n            dfsClient.stats.incrementBytesRead(result);\n          }\n          return result;\n        } catch (ChecksumException ce) {\n          throw ce;            \n        } catch (IOException e) {\n          if (retries \u003d\u003d 1) {\n            DFSClient.LOG.warn(\"DFS Read\", e);\n          }\n          blockEnd \u003d -1;\n          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n          if (--retries \u003d\u003d 0) {\n            throw e;\n          }\n        } finally {\n          // Check if need to report block replicas corruption either read\n          // was successful or ChecksumException occured.\n          reportCheckSumFailure(corruptedBlockMap, \n              currentLocatedBlock.getLocations().length);\n        }\n      }\n    }\n    return -1;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1977. Stop using StringUtils.stringifyException(). Contributed by Bharath Mundlapudi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/11 6:11 PM",
      "commitName": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "08/07/11 1:13 PM",
      "commitNameOld": "6ec9b178c664796b44eab6c41f7216577d380f7c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.21,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public synchronized int read(byte buf[], int off, int len) throws IOException {\n     dfsClient.checkOpen();\n     if (closed) {\n       throw new IOException(\"Stream closed\");\n     }\n     Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n       \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n     failures \u003d 0;\n     if (pos \u003c getFileLength()) {\n       int retries \u003d 2;\n       while (retries \u003e 0) {\n         try {\n           if (pos \u003e blockEnd) {\n             currentNode \u003d blockSeekTo(pos);\n           }\n           int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n           int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n           \n           if (result \u003e\u003d 0) {\n             pos +\u003d result;\n           } else {\n             // got a EOS from reader though we expect more data on it.\n             throw new IOException(\"Unexpected EOS from the reader\");\n           }\n           if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n             dfsClient.stats.incrementBytesRead(result);\n           }\n           return result;\n         } catch (ChecksumException ce) {\n           throw ce;            \n         } catch (IOException e) {\n           if (retries \u003d\u003d 1) {\n-            DFSClient.LOG.warn(\"DFS Read: \" + StringUtils.stringifyException(e));\n+            DFSClient.LOG.warn(\"DFS Read\", e);\n           }\n           blockEnd \u003d -1;\n           if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n           if (--retries \u003d\u003d 0) {\n             throw e;\n           }\n         } finally {\n           // Check if need to report block replicas corruption either read\n           // was successful or ChecksumException occured.\n           reportCheckSumFailure(corruptedBlockMap, \n               currentLocatedBlock.getLocations().length);\n         }\n       }\n     }\n     return -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte buf[], int off, int len) throws IOException {\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    failures \u003d 0;\n    if (pos \u003c getFileLength()) {\n      int retries \u003d 2;\n      while (retries \u003e 0) {\n        try {\n          if (pos \u003e blockEnd) {\n            currentNode \u003d blockSeekTo(pos);\n          }\n          int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n          \n          if (result \u003e\u003d 0) {\n            pos +\u003d result;\n          } else {\n            // got a EOS from reader though we expect more data on it.\n            throw new IOException(\"Unexpected EOS from the reader\");\n          }\n          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n            dfsClient.stats.incrementBytesRead(result);\n          }\n          return result;\n        } catch (ChecksumException ce) {\n          throw ce;            \n        } catch (IOException e) {\n          if (retries \u003d\u003d 1) {\n            DFSClient.LOG.warn(\"DFS Read\", e);\n          }\n          blockEnd \u003d -1;\n          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n          if (--retries \u003d\u003d 0) {\n            throw e;\n          }\n        } finally {\n          // Check if need to report block replicas corruption either read\n          // was successful or ChecksumException occured.\n          reportCheckSumFailure(corruptedBlockMap, \n              currentLocatedBlock.getLocations().length);\n        }\n      }\n    }\n    return -1;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,49 @@\n+  public synchronized int read(byte buf[], int off, int len) throws IOException {\n+    dfsClient.checkOpen();\n+    if (closed) {\n+      throw new IOException(\"Stream closed\");\n+    }\n+    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n+      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n+    failures \u003d 0;\n+    if (pos \u003c getFileLength()) {\n+      int retries \u003d 2;\n+      while (retries \u003e 0) {\n+        try {\n+          if (pos \u003e blockEnd) {\n+            currentNode \u003d blockSeekTo(pos);\n+          }\n+          int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n+          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n+          \n+          if (result \u003e\u003d 0) {\n+            pos +\u003d result;\n+          } else {\n+            // got a EOS from reader though we expect more data on it.\n+            throw new IOException(\"Unexpected EOS from the reader\");\n+          }\n+          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n+            dfsClient.stats.incrementBytesRead(result);\n+          }\n+          return result;\n+        } catch (ChecksumException ce) {\n+          throw ce;            \n+        } catch (IOException e) {\n+          if (retries \u003d\u003d 1) {\n+            DFSClient.LOG.warn(\"DFS Read: \" + StringUtils.stringifyException(e));\n+          }\n+          blockEnd \u003d -1;\n+          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n+          if (--retries \u003d\u003d 0) {\n+            throw e;\n+          }\n+        } finally {\n+          // Check if need to report block replicas corruption either read\n+          // was successful or ChecksumException occured.\n+          reportCheckSumFailure(corruptedBlockMap, \n+              currentLocatedBlock.getLocations().length);\n+        }\n+      }\n+    }\n+    return -1;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int read(byte buf[], int off, int len) throws IOException {\n    dfsClient.checkOpen();\n    if (closed) {\n      throw new IOException(\"Stream closed\");\n    }\n    Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap \n      \u003d new HashMap\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e();\n    failures \u003d 0;\n    if (pos \u003c getFileLength()) {\n      int retries \u003d 2;\n      while (retries \u003e 0) {\n        try {\n          if (pos \u003e blockEnd) {\n            currentNode \u003d blockSeekTo(pos);\n          }\n          int realLen \u003d (int) Math.min((long) len, (blockEnd - pos + 1L));\n          int result \u003d readBuffer(buf, off, realLen, corruptedBlockMap);\n          \n          if (result \u003e\u003d 0) {\n            pos +\u003d result;\n          } else {\n            // got a EOS from reader though we expect more data on it.\n            throw new IOException(\"Unexpected EOS from the reader\");\n          }\n          if (dfsClient.stats !\u003d null \u0026\u0026 result !\u003d -1) {\n            dfsClient.stats.incrementBytesRead(result);\n          }\n          return result;\n        } catch (ChecksumException ce) {\n          throw ce;            \n        } catch (IOException e) {\n          if (retries \u003d\u003d 1) {\n            DFSClient.LOG.warn(\"DFS Read: \" + StringUtils.stringifyException(e));\n          }\n          blockEnd \u003d -1;\n          if (currentNode !\u003d null) { addToDeadNodes(currentNode); }\n          if (--retries \u003d\u003d 0) {\n            throw e;\n          }\n        } finally {\n          // Check if need to report block replicas corruption either read\n          // was successful or ChecksumException occured.\n          reportCheckSumFailure(corruptedBlockMap, \n              currentLocatedBlock.getLocations().length);\n        }\n      }\n    }\n    return -1;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}