{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LineRecordReader.java",
  "functionName": "skipUtfByteOrderMark",
  "functionId": "skipUtfByteOrderMark",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/LineRecordReader.java",
  "functionStartLine": 152,
  "functionEndLine": 183,
  "numCommitsSeen": 12,
  "timeTaken": 685,
  "changeHistory": [
    "40ba8c17c1500703c47a154f06708e5924c24e65"
  ],
  "changeHistoryShort": {
    "40ba8c17c1500703c47a154f06708e5924c24e65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40ba8c17c1500703c47a154f06708e5924c24e65": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5777. Support utf-8 text with Byte Order Marker. (Zhihai Xu via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600977 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 11:37 AM",
      "commitName": "40ba8c17c1500703c47a154f06708e5924c24e65",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,32 @@\n+  private int skipUtfByteOrderMark() throws IOException {\n+    // Strip BOM(Byte Order Mark)\n+    // Text only support UTF-8, we only need to check UTF-8 BOM\n+    // (0xEF,0xBB,0xBF) at the start of the text stream.\n+    int newMaxLineLength \u003d (int) Math.min(3L + (long) maxLineLength,\n+        Integer.MAX_VALUE);\n+    int newSize \u003d in.readLine(value, newMaxLineLength, maxBytesToConsume(pos));\n+    // Even we read 3 extra bytes for the first line,\n+    // we won\u0027t alter existing behavior (no backwards incompat issue).\n+    // Because the newSize is less than maxLineLength and\n+    // the number of bytes copied to Text is always no more than newSize.\n+    // If the return size from readLine is not less than maxLineLength,\n+    // we will discard the current line and read the next line.\n+    pos +\u003d newSize;\n+    int textLength \u003d value.getLength();\n+    byte[] textBytes \u003d value.getBytes();\n+    if ((textLength \u003e\u003d 3) \u0026\u0026 (textBytes[0] \u003d\u003d (byte)0xEF) \u0026\u0026\n+        (textBytes[1] \u003d\u003d (byte)0xBB) \u0026\u0026 (textBytes[2] \u003d\u003d (byte)0xBF)) {\n+      // find UTF-8 BOM, strip it.\n+      LOG.info(\"Found UTF-8 BOM and skipped it\");\n+      textLength -\u003d 3;\n+      newSize -\u003d 3;\n+      if (textLength \u003e 0) {\n+        // It may work to use the same buffer and not do the copyBytes\n+        textBytes \u003d value.copyBytes();\n+        value.set(textBytes, 3, textLength);\n+      } else {\n+        value.clear();\n+      }\n+    }\n+    return newSize;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int skipUtfByteOrderMark() throws IOException {\n    // Strip BOM(Byte Order Mark)\n    // Text only support UTF-8, we only need to check UTF-8 BOM\n    // (0xEF,0xBB,0xBF) at the start of the text stream.\n    int newMaxLineLength \u003d (int) Math.min(3L + (long) maxLineLength,\n        Integer.MAX_VALUE);\n    int newSize \u003d in.readLine(value, newMaxLineLength, maxBytesToConsume(pos));\n    // Even we read 3 extra bytes for the first line,\n    // we won\u0027t alter existing behavior (no backwards incompat issue).\n    // Because the newSize is less than maxLineLength and\n    // the number of bytes copied to Text is always no more than newSize.\n    // If the return size from readLine is not less than maxLineLength,\n    // we will discard the current line and read the next line.\n    pos +\u003d newSize;\n    int textLength \u003d value.getLength();\n    byte[] textBytes \u003d value.getBytes();\n    if ((textLength \u003e\u003d 3) \u0026\u0026 (textBytes[0] \u003d\u003d (byte)0xEF) \u0026\u0026\n        (textBytes[1] \u003d\u003d (byte)0xBB) \u0026\u0026 (textBytes[2] \u003d\u003d (byte)0xBF)) {\n      // find UTF-8 BOM, strip it.\n      LOG.info(\"Found UTF-8 BOM and skipped it\");\n      textLength -\u003d 3;\n      newSize -\u003d 3;\n      if (textLength \u003e 0) {\n        // It may work to use the same buffer and not do the copyBytes\n        textBytes \u003d value.copyBytes();\n        value.set(textBytes, 3, textLength);\n      } else {\n        value.clear();\n      }\n    }\n    return newSize;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/LineRecordReader.java"
    }
  }
}