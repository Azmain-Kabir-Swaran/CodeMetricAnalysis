{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "openFileWithOptions",
  "functionId": "openFileWithOptions___pathHandle-PathHandle(modifiers-final)__parameters-OpenFileParameters(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 4521,
  "functionEndLine": 4539,
  "numCommitsSeen": 282,
  "timeTaken": 3526,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "f365957c6326f88734bc0a5d01cfb7eac713db20"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ymultichange(Yparameterchange,Ybodychange)",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "15/01/20 5:22 PM",
          "commitNameOld": "d7c4f8ab21c56a52afcfbd0a56d9120e61376d0c",
          "commitAuthorOld": "Chao Sun",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n   protected CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n       final PathHandle pathHandle,\n-      final Set\u003cString\u003e mandatoryKeys,\n-      final Configuration options,\n-      final int bufferSize) throws IOException {\n-    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(mandatoryKeys,\n+      final OpenFileParameters parameters) throws IOException {\n+    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(\n+        parameters.getMandatoryKeys(),\n         Collections.emptySet(), \"\");\n     CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n     try {\n-      result.complete(open(pathHandle, bufferSize));\n+      result.complete(open(pathHandle, parameters.getBufferSize()));\n     } catch (UnsupportedOperationException tx) {\n       // fail fast here\n       throw tx;\n     } catch (Throwable tx) {\n       // fail lazily here to ensure callers expect all File IO operations to\n       // surface later\n       result.completeExceptionally(tx);\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n      final PathHandle pathHandle,\n      final OpenFileParameters parameters) throws IOException {\n    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(\n        parameters.getMandatoryKeys(),\n        Collections.emptySet(), \"\");\n    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n    try {\n      result.complete(open(pathHandle, parameters.getBufferSize()));\n    } catch (UnsupportedOperationException tx) {\n      // fail fast here\n      throw tx;\n    } catch (Throwable tx) {\n      // fail lazily here to ensure callers expect all File IO operations to\n      // surface later\n      result.completeExceptionally(tx);\n    }\n    return result;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {
            "oldValue": "[pathHandle-PathHandle(modifiers-final), mandatoryKeys-Set\u003cString\u003e(modifiers-final), options-Configuration(modifiers-final), bufferSize-int(modifiers-final)]",
            "newValue": "[pathHandle-PathHandle(modifiers-final), parameters-OpenFileParameters(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "15/01/20 5:22 PM",
          "commitNameOld": "d7c4f8ab21c56a52afcfbd0a56d9120e61376d0c",
          "commitAuthorOld": "Chao Sun",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n   protected CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n       final PathHandle pathHandle,\n-      final Set\u003cString\u003e mandatoryKeys,\n-      final Configuration options,\n-      final int bufferSize) throws IOException {\n-    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(mandatoryKeys,\n+      final OpenFileParameters parameters) throws IOException {\n+    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(\n+        parameters.getMandatoryKeys(),\n         Collections.emptySet(), \"\");\n     CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n     try {\n-      result.complete(open(pathHandle, bufferSize));\n+      result.complete(open(pathHandle, parameters.getBufferSize()));\n     } catch (UnsupportedOperationException tx) {\n       // fail fast here\n       throw tx;\n     } catch (Throwable tx) {\n       // fail lazily here to ensure callers expect all File IO operations to\n       // surface later\n       result.completeExceptionally(tx);\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n      final PathHandle pathHandle,\n      final OpenFileParameters parameters) throws IOException {\n    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(\n        parameters.getMandatoryKeys(),\n        Collections.emptySet(), \"\");\n    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n    try {\n      result.complete(open(pathHandle, parameters.getBufferSize()));\n    } catch (UnsupportedOperationException tx) {\n      // fail fast here\n      throw tx;\n    } catch (Throwable tx) {\n      // fail lazily here to ensure callers expect all File IO operations to\n      // surface later\n      result.completeExceptionally(tx);\n    }\n    return result;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,20 @@\n+  protected CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n+      final PathHandle pathHandle,\n+      final Set\u003cString\u003e mandatoryKeys,\n+      final Configuration options,\n+      final int bufferSize) throws IOException {\n+    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(mandatoryKeys,\n+        Collections.emptySet(), \"\");\n+    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n+    try {\n+      result.complete(open(pathHandle, bufferSize));\n+    } catch (UnsupportedOperationException tx) {\n+      // fail fast here\n+      throw tx;\n+    } catch (Throwable tx) {\n+      // fail lazily here to ensure callers expect all File IO operations to\n+      // surface later\n+      result.completeExceptionally(tx);\n+    }\n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected CompletableFuture\u003cFSDataInputStream\u003e openFileWithOptions(\n      final PathHandle pathHandle,\n      final Set\u003cString\u003e mandatoryKeys,\n      final Configuration options,\n      final int bufferSize) throws IOException {\n    AbstractFSBuilderImpl.rejectUnknownMandatoryKeys(mandatoryKeys,\n        Collections.emptySet(), \"\");\n    CompletableFuture\u003cFSDataInputStream\u003e result \u003d new CompletableFuture\u003c\u003e();\n    try {\n      result.complete(open(pathHandle, bufferSize));\n    } catch (UnsupportedOperationException tx) {\n      // fail fast here\n      throw tx;\n    } catch (Throwable tx) {\n      // fail lazily here to ensure callers expect all File IO operations to\n      // surface later\n      result.completeExceptionally(tx);\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}