{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionHandler.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
  "functionStartLine": 325,
  "functionEndLine": 373,
  "numCommitsSeen": 10,
  "timeTaken": 3622,
  "changeHistory": [
    "ecbcb058b8bc0fbc3903acb56814c6d9608bc396",
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "ecbcb058b8bc0fbc3903acb56814c6d9608bc396": "Ybodychange",
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": "Ybodychange",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ecbcb058b8bc0fbc3903acb56814c6d9608bc396": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14731. [FGL] Remove redundant locking on NameNode. Contributed by Konstantin V Shvachko.",
      "commitDate": "21/02/20 5:53 PM",
      "commitName": "ecbcb058b8bc0fbc3903acb56814c6d9608bc396",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "30/10/18 10:43 PM",
      "commitNameOld": "fac9f91b2944cee641049fffcafa6b65e0cf68f2",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 478.84,
      "commitsBetweenForRepo": 3063,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public void run() {\n     LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n         interval);\n     while (true) {\n       try {\n         synchronized (this) {\n           wait(interval);\n         }\n         traverser.checkPauseForTesting();\n       } catch (InterruptedException ie) {\n         LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n         Thread.currentThread().interrupt();\n         return;\n       }\n \n       final Long zoneId;\n-      dir.readLock();\n+      dir.getFSNamesystem().readLock();\n       try {\n         zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n         if (zoneId \u003d\u003d null) {\n           // empty queue.\n           continue;\n         }\n         LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n             zoneId, getReencryptionStatus());\n         getReencryptionStatus().markZoneStarted(zoneId);\n         resetSubmissionTracker(zoneId);\n       } finally {\n-        dir.readUnlock();\n+        dir.getFSNamesystem().readUnlock();\n       }\n \n       try {\n         reencryptEncryptionZone(zoneId);\n       } catch (RetriableException | SafeModeException re) {\n         LOG.info(\"Re-encryption caught exception, will retry\", re);\n         getReencryptionStatus().markZoneForRetry(zoneId);\n       } catch (IOException ioe) {\n         LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n       } catch (InterruptedException ie) {\n         LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n         Thread.currentThread().interrupt();\n         return;\n       } catch (Throwable t) {\n         LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n             + \" re-encrypting zone {}.\", zoneId, t);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n        interval);\n    while (true) {\n      try {\n        synchronized (this) {\n          wait(interval);\n        }\n        traverser.checkPauseForTesting();\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n        Thread.currentThread().interrupt();\n        return;\n      }\n\n      final Long zoneId;\n      dir.getFSNamesystem().readLock();\n      try {\n        zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n        if (zoneId \u003d\u003d null) {\n          // empty queue.\n          continue;\n        }\n        LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n            zoneId, getReencryptionStatus());\n        getReencryptionStatus().markZoneStarted(zoneId);\n        resetSubmissionTracker(zoneId);\n      } finally {\n        dir.getFSNamesystem().readUnlock();\n      }\n\n      try {\n        reencryptEncryptionZone(zoneId);\n      } catch (RetriableException | SafeModeException re) {\n        LOG.info(\"Re-encryption caught exception, will retry\", re);\n        getReencryptionStatus().markZoneForRetry(zoneId);\n      } catch (IOException ioe) {\n        LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n        Thread.currentThread().interrupt();\n        return;\n      } catch (Throwable t) {\n        LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n            + \" re-encrypting zone {}.\", zoneId, t);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
      "extendedDetails": {}
    },
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "10/04/18 11:05 AM",
      "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "08/02/18 10:55 AM",
      "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 60.96,
      "commitsBetweenForRepo": 509,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public void run() {\n     LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n         interval);\n     while (true) {\n       try {\n         synchronized (this) {\n           wait(interval);\n         }\n-        checkPauseForTesting();\n+        traverser.checkPauseForTesting();\n       } catch (InterruptedException ie) {\n         LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n         Thread.currentThread().interrupt();\n         return;\n       }\n \n       final Long zoneId;\n       dir.readLock();\n       try {\n         zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n         if (zoneId \u003d\u003d null) {\n           // empty queue.\n           continue;\n         }\n         LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n             zoneId, getReencryptionStatus());\n         getReencryptionStatus().markZoneStarted(zoneId);\n         resetSubmissionTracker(zoneId);\n       } finally {\n         dir.readUnlock();\n       }\n \n       try {\n         reencryptEncryptionZone(zoneId);\n       } catch (RetriableException | SafeModeException re) {\n         LOG.info(\"Re-encryption caught exception, will retry\", re);\n         getReencryptionStatus().markZoneForRetry(zoneId);\n       } catch (IOException ioe) {\n         LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n       } catch (InterruptedException ie) {\n         LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n         Thread.currentThread().interrupt();\n         return;\n       } catch (Throwable t) {\n         LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n             + \" re-encrypting zone {}.\", zoneId, t);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n        interval);\n    while (true) {\n      try {\n        synchronized (this) {\n          wait(interval);\n        }\n        traverser.checkPauseForTesting();\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n        Thread.currentThread().interrupt();\n        return;\n      }\n\n      final Long zoneId;\n      dir.readLock();\n      try {\n        zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n        if (zoneId \u003d\u003d null) {\n          // empty queue.\n          continue;\n        }\n        LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n            zoneId, getReencryptionStatus());\n        getReencryptionStatus().markZoneStarted(zoneId);\n        resetSubmissionTracker(zoneId);\n      } finally {\n        dir.readUnlock();\n      }\n\n      try {\n        reencryptEncryptionZone(zoneId);\n      } catch (RetriableException | SafeModeException re) {\n        LOG.info(\"Re-encryption caught exception, will retry\", re);\n        getReencryptionStatus().markZoneForRetry(zoneId);\n      } catch (IOException ioe) {\n        LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n        Thread.currentThread().interrupt();\n        return;\n      } catch (Throwable t) {\n        LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n            + \" re-encrypting zone {}.\", zoneId, t);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
      "extendedDetails": {}
    },
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12518. Re-encryption should handle task cancellation and progress better.\n",
      "commitDate": "20/10/17 4:25 PM",
      "commitName": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "23/08/17 5:06 PM",
      "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 57.97,
      "commitsBetweenForRepo": 544,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   public void run() {\n     LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n         interval);\n     while (true) {\n       try {\n         synchronized (this) {\n           wait(interval);\n         }\n         checkPauseForTesting();\n       } catch (InterruptedException ie) {\n         LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n         Thread.currentThread().interrupt();\n         return;\n       }\n \n       final Long zoneId;\n       dir.readLock();\n       try {\n         zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n         if (zoneId \u003d\u003d null) {\n           // empty queue.\n           continue;\n         }\n         LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n             zoneId, getReencryptionStatus());\n+        getReencryptionStatus().markZoneStarted(zoneId);\n+        resetSubmissionTracker(zoneId);\n       } finally {\n         dir.readUnlock();\n       }\n \n       try {\n         reencryptEncryptionZone(zoneId);\n       } catch (RetriableException | SafeModeException re) {\n         LOG.info(\"Re-encryption caught exception, will retry\", re);\n         getReencryptionStatus().markZoneForRetry(zoneId);\n       } catch (IOException ioe) {\n         LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n       } catch (InterruptedException ie) {\n         LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n         Thread.currentThread().interrupt();\n         return;\n       } catch (Throwable t) {\n         LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n             + \" re-encrypting zone {}.\", zoneId, t);\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n        interval);\n    while (true) {\n      try {\n        synchronized (this) {\n          wait(interval);\n        }\n        checkPauseForTesting();\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n        Thread.currentThread().interrupt();\n        return;\n      }\n\n      final Long zoneId;\n      dir.readLock();\n      try {\n        zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n        if (zoneId \u003d\u003d null) {\n          // empty queue.\n          continue;\n        }\n        LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n            zoneId, getReencryptionStatus());\n        getReencryptionStatus().markZoneStarted(zoneId);\n        resetSubmissionTracker(zoneId);\n      } finally {\n        dir.readUnlock();\n      }\n\n      try {\n        reencryptEncryptionZone(zoneId);\n      } catch (RetriableException | SafeModeException re) {\n        LOG.info(\"Re-encryption caught exception, will retry\", re);\n        getReencryptionStatus().markZoneForRetry(zoneId);\n      } catch (IOException ioe) {\n        LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n        Thread.currentThread().interrupt();\n        return;\n      } catch (Throwable t) {\n        LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n            + \" re-encrypting zone {}.\", zoneId, t);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,47 @@\n+  public void run() {\n+    LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n+        interval);\n+    while (true) {\n+      try {\n+        synchronized (this) {\n+          wait(interval);\n+        }\n+        checkPauseForTesting();\n+      } catch (InterruptedException ie) {\n+        LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n+        Thread.currentThread().interrupt();\n+        return;\n+      }\n+\n+      final Long zoneId;\n+      dir.readLock();\n+      try {\n+        zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n+        if (zoneId \u003d\u003d null) {\n+          // empty queue.\n+          continue;\n+        }\n+        LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n+            zoneId, getReencryptionStatus());\n+      } finally {\n+        dir.readUnlock();\n+      }\n+\n+      try {\n+        reencryptEncryptionZone(zoneId);\n+      } catch (RetriableException | SafeModeException re) {\n+        LOG.info(\"Re-encryption caught exception, will retry\", re);\n+        getReencryptionStatus().markZoneForRetry(zoneId);\n+      } catch (IOException ioe) {\n+        LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n+      } catch (InterruptedException ie) {\n+        LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n+        Thread.currentThread().interrupt();\n+        return;\n+      } catch (Throwable t) {\n+        LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n+            + \" re-encrypting zone {}.\", zoneId, t);\n+        return;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(\"Starting up re-encrypt thread with interval\u003d{} millisecond.\",\n        interval);\n    while (true) {\n      try {\n        synchronized (this) {\n          wait(interval);\n        }\n        checkPauseForTesting();\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting\");\n        Thread.currentThread().interrupt();\n        return;\n      }\n\n      final Long zoneId;\n      dir.readLock();\n      try {\n        zoneId \u003d getReencryptionStatus().getNextUnprocessedZone();\n        if (zoneId \u003d\u003d null) {\n          // empty queue.\n          continue;\n        }\n        LOG.info(\"Executing re-encrypt commands on zone {}. Current zones:{}\",\n            zoneId, getReencryptionStatus());\n      } finally {\n        dir.readUnlock();\n      }\n\n      try {\n        reencryptEncryptionZone(zoneId);\n      } catch (RetriableException | SafeModeException re) {\n        LOG.info(\"Re-encryption caught exception, will retry\", re);\n        getReencryptionStatus().markZoneForRetry(zoneId);\n      } catch (IOException ioe) {\n        LOG.warn(\"IOException caught when re-encrypting zone {}\", zoneId, ioe);\n      } catch (InterruptedException ie) {\n        LOG.info(\"Re-encrypt handler interrupted. Exiting.\");\n        Thread.currentThread().interrupt();\n        return;\n      } catch (Throwable t) {\n        LOG.error(\"Re-encrypt handler thread exiting. Exception caught when\"\n            + \" re-encrypting zone {}.\", zoneId, t);\n        return;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java"
    }
  }
}