{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "scanForLogs",
  "functionId": "scanForLogs",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 747,
  "functionEndLine": 796,
  "numCommitsSeen": 17,
  "timeTaken": 1280,
  "changeHistory": [
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "17/01/16 5:37 PM",
      "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 52.72,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,50 @@\n     long scanForLogs() throws IOException {\n       LOG.debug(\"scanForLogs on {}\", appDirPath);\n       long newestModTime \u003d 0;\n-      RemoteIterator\u003cFileStatus\u003e iterAttempt \u003d\n-          fs.listStatusIterator(appDirPath);\n+      RemoteIterator\u003cFileStatus\u003e iterAttempt \u003d list(appDirPath);\n       while (iterAttempt.hasNext()) {\n         FileStatus statAttempt \u003d iterAttempt.next();\n         LOG.debug(\"scanForLogs on {}\", statAttempt.getPath().getName());\n         if (!statAttempt.isDirectory()\n             || !statAttempt.getPath().getName()\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           LOG.debug(\"Scanner skips for unknown dir/file {}\",\n               statAttempt.getPath());\n           continue;\n         }\n         String attemptDirName \u003d statAttempt.getPath().getName();\n-        RemoteIterator\u003cFileStatus\u003e iterCache\n-            \u003d fs.listStatusIterator(statAttempt.getPath());\n+        RemoteIterator\u003cFileStatus\u003e iterCache \u003d list(statAttempt.getPath());\n         while (iterCache.hasNext()) {\n           FileStatus statCache \u003d iterCache.next();\n           if (!statCache.isFile()) {\n             continue;\n           }\n           String filename \u003d statCache.getPath().getName();\n           // We should only update time for log files.\n           boolean shouldSetTime \u003d true;\n           LOG.debug(\"scan for log file: {}\", filename);\n           if (filename.startsWith(DOMAIN_LOG_PREFIX)) {\n             addSummaryLog(attemptDirName, filename, statCache.getOwner(), true);\n           } else if (filename.startsWith(SUMMARY_LOG_PREFIX)) {\n             addSummaryLog(attemptDirName, filename, statCache.getOwner(),\n                 false);\n           } else if (filename.startsWith(ENTITY_LOG_PREFIX)) {\n             addDetailLog(attemptDirName, filename, statCache.getOwner());\n           } else {\n             shouldSetTime \u003d false;\n           }\n           if (shouldSetTime) {\n             newestModTime\n               \u003d Math.max(statCache.getModificationTime(), newestModTime);\n           }\n         }\n       }\n \n       // if there are no logs in the directory then use the modification\n       // time of the directory itself\n       if (newestModTime \u003d\u003d 0) {\n         newestModTime \u003d fs.getFileStatus(appDirPath).getModificationTime();\n       }\n \n       return newestModTime;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    long scanForLogs() throws IOException {\n      LOG.debug(\"scanForLogs on {}\", appDirPath);\n      long newestModTime \u003d 0;\n      RemoteIterator\u003cFileStatus\u003e iterAttempt \u003d list(appDirPath);\n      while (iterAttempt.hasNext()) {\n        FileStatus statAttempt \u003d iterAttempt.next();\n        LOG.debug(\"scanForLogs on {}\", statAttempt.getPath().getName());\n        if (!statAttempt.isDirectory()\n            || !statAttempt.getPath().getName()\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          LOG.debug(\"Scanner skips for unknown dir/file {}\",\n              statAttempt.getPath());\n          continue;\n        }\n        String attemptDirName \u003d statAttempt.getPath().getName();\n        RemoteIterator\u003cFileStatus\u003e iterCache \u003d list(statAttempt.getPath());\n        while (iterCache.hasNext()) {\n          FileStatus statCache \u003d iterCache.next();\n          if (!statCache.isFile()) {\n            continue;\n          }\n          String filename \u003d statCache.getPath().getName();\n          // We should only update time for log files.\n          boolean shouldSetTime \u003d true;\n          LOG.debug(\"scan for log file: {}\", filename);\n          if (filename.startsWith(DOMAIN_LOG_PREFIX)) {\n            addSummaryLog(attemptDirName, filename, statCache.getOwner(), true);\n          } else if (filename.startsWith(SUMMARY_LOG_PREFIX)) {\n            addSummaryLog(attemptDirName, filename, statCache.getOwner(),\n                false);\n          } else if (filename.startsWith(ENTITY_LOG_PREFIX)) {\n            addDetailLog(attemptDirName, filename, statCache.getOwner());\n          } else {\n            shouldSetTime \u003d false;\n          }\n          if (shouldSetTime) {\n            newestModTime\n              \u003d Math.max(statCache.getModificationTime(), newestModTime);\n          }\n        }\n      }\n\n      // if there are no logs in the directory then use the modification\n      // time of the directory itself\n      if (newestModTime \u003d\u003d 0) {\n        newestModTime \u003d fs.getFileStatus(appDirPath).getModificationTime();\n      }\n\n      return newestModTime;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,52 @@\n+    long scanForLogs() throws IOException {\n+      LOG.debug(\"scanForLogs on {}\", appDirPath);\n+      long newestModTime \u003d 0;\n+      RemoteIterator\u003cFileStatus\u003e iterAttempt \u003d\n+          fs.listStatusIterator(appDirPath);\n+      while (iterAttempt.hasNext()) {\n+        FileStatus statAttempt \u003d iterAttempt.next();\n+        LOG.debug(\"scanForLogs on {}\", statAttempt.getPath().getName());\n+        if (!statAttempt.isDirectory()\n+            || !statAttempt.getPath().getName()\n+            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+          LOG.debug(\"Scanner skips for unknown dir/file {}\",\n+              statAttempt.getPath());\n+          continue;\n+        }\n+        String attemptDirName \u003d statAttempt.getPath().getName();\n+        RemoteIterator\u003cFileStatus\u003e iterCache\n+            \u003d fs.listStatusIterator(statAttempt.getPath());\n+        while (iterCache.hasNext()) {\n+          FileStatus statCache \u003d iterCache.next();\n+          if (!statCache.isFile()) {\n+            continue;\n+          }\n+          String filename \u003d statCache.getPath().getName();\n+          // We should only update time for log files.\n+          boolean shouldSetTime \u003d true;\n+          LOG.debug(\"scan for log file: {}\", filename);\n+          if (filename.startsWith(DOMAIN_LOG_PREFIX)) {\n+            addSummaryLog(attemptDirName, filename, statCache.getOwner(), true);\n+          } else if (filename.startsWith(SUMMARY_LOG_PREFIX)) {\n+            addSummaryLog(attemptDirName, filename, statCache.getOwner(),\n+                false);\n+          } else if (filename.startsWith(ENTITY_LOG_PREFIX)) {\n+            addDetailLog(attemptDirName, filename, statCache.getOwner());\n+          } else {\n+            shouldSetTime \u003d false;\n+          }\n+          if (shouldSetTime) {\n+            newestModTime\n+              \u003d Math.max(statCache.getModificationTime(), newestModTime);\n+          }\n+        }\n+      }\n+\n+      // if there are no logs in the directory then use the modification\n+      // time of the directory itself\n+      if (newestModTime \u003d\u003d 0) {\n+        newestModTime \u003d fs.getFileStatus(appDirPath).getModificationTime();\n+      }\n+\n+      return newestModTime;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    long scanForLogs() throws IOException {\n      LOG.debug(\"scanForLogs on {}\", appDirPath);\n      long newestModTime \u003d 0;\n      RemoteIterator\u003cFileStatus\u003e iterAttempt \u003d\n          fs.listStatusIterator(appDirPath);\n      while (iterAttempt.hasNext()) {\n        FileStatus statAttempt \u003d iterAttempt.next();\n        LOG.debug(\"scanForLogs on {}\", statAttempt.getPath().getName());\n        if (!statAttempt.isDirectory()\n            || !statAttempt.getPath().getName()\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          LOG.debug(\"Scanner skips for unknown dir/file {}\",\n              statAttempt.getPath());\n          continue;\n        }\n        String attemptDirName \u003d statAttempt.getPath().getName();\n        RemoteIterator\u003cFileStatus\u003e iterCache\n            \u003d fs.listStatusIterator(statAttempt.getPath());\n        while (iterCache.hasNext()) {\n          FileStatus statCache \u003d iterCache.next();\n          if (!statCache.isFile()) {\n            continue;\n          }\n          String filename \u003d statCache.getPath().getName();\n          // We should only update time for log files.\n          boolean shouldSetTime \u003d true;\n          LOG.debug(\"scan for log file: {}\", filename);\n          if (filename.startsWith(DOMAIN_LOG_PREFIX)) {\n            addSummaryLog(attemptDirName, filename, statCache.getOwner(), true);\n          } else if (filename.startsWith(SUMMARY_LOG_PREFIX)) {\n            addSummaryLog(attemptDirName, filename, statCache.getOwner(),\n                false);\n          } else if (filename.startsWith(ENTITY_LOG_PREFIX)) {\n            addDetailLog(attemptDirName, filename, statCache.getOwner());\n          } else {\n            shouldSetTime \u003d false;\n          }\n          if (shouldSetTime) {\n            newestModTime\n              \u003d Math.max(statCache.getModificationTime(), newestModTime);\n          }\n        }\n      }\n\n      // if there are no logs in the directory then use the modification\n      // time of the directory itself\n      if (newestModTime \u003d\u003d 0) {\n        newestModTime \u003d fs.getFileStatus(appDirPath).getModificationTime();\n      }\n\n      return newestModTime;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}