{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "apply",
  "functionId": "apply___cluster-Resource__request-ResourceCommitRequest__FiCaSchedulerApp,FiCaSchedulerNode__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 1332,
  "functionEndLine": 1362,
  "numCommitsSeen": 85,
  "timeTaken": 3967,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 209.05,
      "commitsBetweenForRepo": 935,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void apply(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n           allocation \u003d request.getFirstAllocatedOrReservedContainer();\n       SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n           schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n \n       // Do not modify queue when allocation from reserved container\n       if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n         writeLock.lock();\n         try {\n           // Book-keeping\n           // Note: Update headroom to account for current allocation too...\n           allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n               schedulerContainer.getNodePartition());\n \n-          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n+          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueuePath()\n               + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n               + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n               + \" cluster\u003d\" + cluster);\n         } finally {\n           writeLock.unlock();\n         }\n       }\n     }\n \n     if (parent !\u003d null) {\n       parent.apply(cluster, request);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          allocation \u003d request.getFirstAllocatedOrReservedContainer();\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n      // Do not modify queue when allocation from reserved container\n      if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n        writeLock.lock();\n        try {\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition());\n\n          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueuePath()\n              + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n              + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n              + \" cluster\u003d\" + cluster);\n        } finally {\n          writeLock.unlock();\n        }\n      }\n    }\n\n    if (parent !\u003d null) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void apply(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n           allocation \u003d request.getFirstAllocatedOrReservedContainer();\n       SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n           schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n \n       // Do not modify queue when allocation from reserved container\n       if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n+        writeLock.lock();\n         try {\n-          writeLock.lock();\n           // Book-keeping\n           // Note: Update headroom to account for current allocation too...\n           allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n               schedulerContainer.getNodePartition());\n \n           LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n               + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n               + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n               + \" cluster\u003d\" + cluster);\n         } finally {\n           writeLock.unlock();\n         }\n       }\n     }\n \n     if (parent !\u003d null) {\n       parent.apply(cluster, request);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          allocation \u003d request.getFirstAllocatedOrReservedContainer();\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n      // Do not modify queue when allocation from reserved container\n      if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n        writeLock.lock();\n        try {\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition());\n\n          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n              + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n              + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n              + \" cluster\u003d\" + cluster);\n        } finally {\n          writeLock.unlock();\n        }\n      }\n    }\n\n    if (parent !\u003d null) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   public void apply(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n           allocation \u003d request.getFirstAllocatedOrReservedContainer();\n       SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n           schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n \n       // Do not modify queue when allocation from reserved container\n       if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n         try {\n           writeLock.lock();\n           // Book-keeping\n           // Note: Update headroom to account for current allocation too...\n           allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n-              schedulerContainer.getNodePartition(),\n-              allocation.isIncreasedAllocation());\n+              schedulerContainer.getNodePartition());\n \n           LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n               + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n               + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n               + \" cluster\u003d\" + cluster);\n         } finally {\n           writeLock.unlock();\n         }\n       }\n     }\n \n     if (parent !\u003d null) {\n       parent.apply(cluster, request);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          allocation \u003d request.getFirstAllocatedOrReservedContainer();\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n      // Do not modify queue when allocation from reserved container\n      if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n        try {\n          writeLock.lock();\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition());\n\n          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n              + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n              + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n              + \" cluster\u003d\" + cluster);\n        } finally {\n          writeLock.unlock();\n        }\n      }\n    }\n\n    if (parent !\u003d null) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+  public void apply(Resource cluster,\n+      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n+    if (request.anythingAllocatedOrReserved()) {\n+      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+          allocation \u003d request.getFirstAllocatedOrReservedContainer();\n+      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+          schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n+\n+      // Do not modify queue when allocation from reserved container\n+      if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n+        try {\n+          writeLock.lock();\n+          // Book-keeping\n+          // Note: Update headroom to account for current allocation too...\n+          allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n+              schedulerContainer.getNodePartition(),\n+              allocation.isIncreasedAllocation());\n+\n+          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n+              + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n+              + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n+              + \" cluster\u003d\" + cluster);\n+        } finally {\n+          writeLock.unlock();\n+        }\n+      }\n+    }\n+\n+    if (parent !\u003d null) {\n+      parent.apply(cluster, request);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          allocation \u003d request.getFirstAllocatedOrReservedContainer();\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n      // Do not modify queue when allocation from reserved container\n      if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n        try {\n          writeLock.lock();\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster, allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition(),\n              allocation.isIncreasedAllocation());\n\n          LOG.info(\"assignedContainer\" + \" queue\u003d\" + getQueueName()\n              + \" usedCapacity\u003d\" + getUsedCapacity() + \" absoluteUsedCapacity\u003d\"\n              + getAbsoluteUsedCapacity() + \" used\u003d\" + queueUsage.getUsed()\n              + \" cluster\u003d\" + cluster);\n        } finally {\n          writeLock.unlock();\n        }\n      }\n    }\n\n    if (parent !\u003d null) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}