{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "initializeApplication",
  "functionId": "initializeApplication___context-ApplicationInitializationContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 467,
  "functionEndLine": 482,
  "numCommitsSeen": 80,
  "timeTaken": 7995,
  "changeHistory": [
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4",
    "f4d80e91ae314d316100baa7770b9d73ea853d9c",
    "ade0f0560f729e50382c6992f713f29e2dd5b270",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4": "Ybodychange",
    "f4d80e91ae314d316100baa7770b9d73ea853d9c": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "ade0f0560f729e50382c6992f713f29e2dd5b270": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5652. NM Recovery. ShuffleHandler should handle NM restarts. (Jason Lowe via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 12:10 PM",
      "commitName": "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "24/03/14 11:57 AM",
      "commitNameOld": "a90a5c24525bf6b92c49f7476b6de286338018c0",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 50.01,
      "commitsBetweenForRepo": 305,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,16 @@\n   public void initializeApplication(ApplicationInitializationContext context) {\n \n     String user \u003d context.getUser();\n     ApplicationId appId \u003d context.getApplicationId();\n     ByteBuffer secret \u003d context.getApplicationDataForService();\n     // TODO these bytes should be versioned\n     try {\n       Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n        // TODO: Once SHuffle is out of NM, this can use MR APIs\n       JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n-      userRsrc.put(jobId.toString(), user);\n-      LOG.info(\"Added token for \" + jobId.toString());\n-      secretManager.addTokenForJob(jobId.toString(), jt);\n+      recordJobShuffleInfo(jobId, user, jt);\n     } catch (IOException e) {\n       LOG.error(\"Error during initApp\", e);\n       // TODO add API to AuxiliaryServices to report failures\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializeApplication(ApplicationInitializationContext context) {\n\n    String user \u003d context.getUser();\n    ApplicationId appId \u003d context.getApplicationId();\n    ByteBuffer secret \u003d context.getApplicationDataForService();\n    // TODO these bytes should be versioned\n    try {\n      Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n       // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      recordJobShuffleInfo(jobId, user, jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "f4d80e91ae314d316100baa7770b9d73ea853d9c": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-841. Move Auxiliary service to yarn-api, annotate and document it. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494031 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 11:20 PM",
      "commitName": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-841. Move Auxiliary service to yarn-api, annotate and document it. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494031 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 11:20 PM",
          "commitName": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/06/13 11:39 PM",
          "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,18 @@\n-  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n+  public void initializeApplication(ApplicationInitializationContext context) {\n+\n+    String user \u003d context.getUser();\n+    ApplicationId appId \u003d context.getApplicationId();\n+    ByteBuffer secret \u003d context.getApplicationDataForService();\n     // TODO these bytes should be versioned\n     try {\n       Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n        // TODO: Once SHuffle is out of NM, this can use MR APIs\n       JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n       userRsrc.put(jobId.toString(), user);\n       LOG.info(\"Added token for \" + jobId.toString());\n       secretManager.addTokenForJob(jobId.toString(), jt);\n     } catch (IOException e) {\n       LOG.error(\"Error during initApp\", e);\n       // TODO add API to AuxiliaryServices to report failures\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeApplication(ApplicationInitializationContext context) {\n\n    String user \u003d context.getUser();\n    ApplicationId appId \u003d context.getApplicationId();\n    ByteBuffer secret \u003d context.getApplicationDataForService();\n    // TODO these bytes should be versioned\n    try {\n      Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n       // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      userRsrc.put(jobId.toString(), user);\n      LOG.info(\"Added token for \" + jobId.toString());\n      secretManager.addTokenForJob(jobId.toString(), jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {
            "oldValue": "initApp",
            "newValue": "initializeApplication"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-841. Move Auxiliary service to yarn-api, annotate and document it. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494031 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 11:20 PM",
          "commitName": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/06/13 11:39 PM",
          "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,18 @@\n-  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n+  public void initializeApplication(ApplicationInitializationContext context) {\n+\n+    String user \u003d context.getUser();\n+    ApplicationId appId \u003d context.getApplicationId();\n+    ByteBuffer secret \u003d context.getApplicationDataForService();\n     // TODO these bytes should be versioned\n     try {\n       Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n        // TODO: Once SHuffle is out of NM, this can use MR APIs\n       JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n       userRsrc.put(jobId.toString(), user);\n       LOG.info(\"Added token for \" + jobId.toString());\n       secretManager.addTokenForJob(jobId.toString(), jt);\n     } catch (IOException e) {\n       LOG.error(\"Error during initApp\", e);\n       // TODO add API to AuxiliaryServices to report failures\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeApplication(ApplicationInitializationContext context) {\n\n    String user \u003d context.getUser();\n    ApplicationId appId \u003d context.getApplicationId();\n    ByteBuffer secret \u003d context.getApplicationDataForService();\n    // TODO these bytes should be versioned\n    try {\n      Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n       // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      userRsrc.put(jobId.toString(), user);\n      LOG.info(\"Added token for \" + jobId.toString());\n      secretManager.addTokenForJob(jobId.toString(), jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {
            "oldValue": "[user-String, appId-ApplicationId, secret-ByteBuffer]",
            "newValue": "[context-ApplicationInitializationContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-841. Move Auxiliary service to yarn-api, annotate and document it. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494031 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/06/13 11:20 PM",
          "commitName": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/06/13 11:39 PM",
          "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,18 @@\n-  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n+  public void initializeApplication(ApplicationInitializationContext context) {\n+\n+    String user \u003d context.getUser();\n+    ApplicationId appId \u003d context.getApplicationId();\n+    ByteBuffer secret \u003d context.getApplicationDataForService();\n     // TODO these bytes should be versioned\n     try {\n       Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n        // TODO: Once SHuffle is out of NM, this can use MR APIs\n       JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n       userRsrc.put(jobId.toString(), user);\n       LOG.info(\"Added token for \" + jobId.toString());\n       secretManager.addTokenForJob(jobId.toString(), jt);\n     } catch (IOException e) {\n       LOG.error(\"Error during initApp\", e);\n       // TODO add API to AuxiliaryServices to report failures\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializeApplication(ApplicationInitializationContext context) {\n\n    String user \u003d context.getUser();\n    ApplicationId appId \u003d context.getApplicationId();\n    ByteBuffer secret \u003d context.getApplicationDataForService();\n    // TODO these bytes should be versioned\n    try {\n      Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n       // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      userRsrc.put(jobId.toString(), user);\n      LOG.info(\"Added token for \" + jobId.toString());\n      secretManager.addTokenForJob(jobId.toString(), jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "ade0f0560f729e50382c6992f713f29e2dd5b270": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2652. Enabled multiple NMs to be runnable on a single node by making shuffle service port to be truely configurable. Contributed by Robert Joseph Evans.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163585 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 4:38 AM",
      "commitName": "ade0f0560f729e50382c6992f713f29e2dd5b270",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 6.48,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,14 @@\n   public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n     // TODO these bytes should be versioned\n     try {\n-      DataInputByteBuffer in \u003d new DataInputByteBuffer();\n-      in.reset(secret);\n-      Token\u003cJobTokenIdentifier\u003e jt \u003d new Token\u003cJobTokenIdentifier\u003e();\n-      jt.readFields(in);\n-      // TODO: Once SHuffle is out of NM, this can use MR APIs\n+      Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n+       // TODO: Once SHuffle is out of NM, this can use MR APIs\n       JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n       userRsrc.put(jobId.toString(), user);\n       LOG.info(\"Added token for \" + jobId.toString());\n       secretManager.addTokenForJob(jobId.toString(), jt);\n     } catch (IOException e) {\n       LOG.error(\"Error during initApp\", e);\n       // TODO add API to AuxiliaryServices to report failures\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n    // TODO these bytes should be versioned\n    try {\n      Token\u003cJobTokenIdentifier\u003e jt \u003d deserializeServiceData(secret);\n       // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      userRsrc.put(jobId.toString(), user);\n      LOG.info(\"Added token for \" + jobId.toString());\n      secretManager.addTokenForJob(jobId.toString(), jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n    // TODO these bytes should be versioned\n    try {\n      DataInputByteBuffer in \u003d new DataInputByteBuffer();\n      in.reset(secret);\n      Token\u003cJobTokenIdentifier\u003e jt \u003d new Token\u003cJobTokenIdentifier\u003e();\n      jt.readFields(in);\n      // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      userRsrc.put(jobId.toString(), user);\n      LOG.info(\"Added token for \" + jobId.toString());\n      secretManager.addTokenForJob(jobId.toString(), jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n+    // TODO these bytes should be versioned\n+    try {\n+      DataInputByteBuffer in \u003d new DataInputByteBuffer();\n+      in.reset(secret);\n+      Token\u003cJobTokenIdentifier\u003e jt \u003d new Token\u003cJobTokenIdentifier\u003e();\n+      jt.readFields(in);\n+      // TODO: Once SHuffle is out of NM, this can use MR APIs\n+      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n+      userRsrc.put(jobId.toString(), user);\n+      LOG.info(\"Added token for \" + jobId.toString());\n+      secretManager.addTokenForJob(jobId.toString(), jt);\n+    } catch (IOException e) {\n+      LOG.error(\"Error during initApp\", e);\n+      // TODO add API to AuxiliaryServices to report failures\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initApp(String user, ApplicationId appId, ByteBuffer secret) {\n    // TODO these bytes should be versioned\n    try {\n      DataInputByteBuffer in \u003d new DataInputByteBuffer();\n      in.reset(secret);\n      Token\u003cJobTokenIdentifier\u003e jt \u003d new Token\u003cJobTokenIdentifier\u003e();\n      jt.readFields(in);\n      // TODO: Once SHuffle is out of NM, this can use MR APIs\n      JobID jobId \u003d new JobID(Long.toString(appId.getClusterTimestamp()), appId.getId());\n      userRsrc.put(jobId.toString(), user);\n      LOG.info(\"Added token for \" + jobId.toString());\n      secretManager.addTokenForJob(jobId.toString(), jt);\n    } catch (IOException e) {\n      LOG.error(\"Error during initApp\", e);\n      // TODO add API to AuxiliaryServices to report failures\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
    }
  }
}