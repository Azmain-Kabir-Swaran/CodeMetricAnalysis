{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FastByteComparisons.java",
  "functionName": "getBestComparer",
  "functionId": "getBestComparer",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/FastByteComparisons.java",
  "functionStartLine": 75,
  "functionEndLine": 102,
  "numCommitsSeen": 5,
  "timeTaken": 1238,
  "changeHistory": [
    "3c83cee118137e3d5bbe0c942e92e179d1234d5b",
    "ee7d22e90ce67de3e7ee92f309c048a1d4be0bbe",
    "0e75187199076b7fc5a448bb8a143d3ae32838d3"
  ],
  "changeHistoryShort": {
    "3c83cee118137e3d5bbe0c942e92e179d1234d5b": "Ybodychange",
    "ee7d22e90ce67de3e7ee92f309c048a1d4be0bbe": "Ybodychange",
    "0e75187199076b7fc5a448bb8a143d3ae32838d3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c83cee118137e3d5bbe0c942e92e179d1234d5b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12925. Checks for SPARC architecture need to include 64-bit SPARC (Alan Burlison via aw)\n",
      "commitDate": "25/05/16 3:28 PM",
      "commitName": "3c83cee118137e3d5bbe0c942e92e179d1234d5b",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "21/01/15 4:33 PM",
      "commitNameOld": "ee7d22e90ce67de3e7ee92f309c048a1d4be0bbe",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 489.91,
      "commitsBetweenForRepo": 3784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     static Comparer\u003cbyte[]\u003e getBestComparer() {\n-      if (System.getProperty(\"os.arch\").equals(\"sparc\")) {\n+      if (System.getProperty(\"os.arch\").toLowerCase().startsWith(\"sparc\")) {\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Lexicographical comparer selected for \"\n               + \"byte aligned system architecture\");\n         }\n         return lexicographicalComparerJavaImpl();\n       }\n       try {\n         Class\u003c?\u003e theClass \u003d Class.forName(UNSAFE_COMPARER_NAME);\n \n         // yes, UnsafeComparer does implement Comparer\u003cbyte[]\u003e\n         @SuppressWarnings(\"unchecked\")\n         Comparer\u003cbyte[]\u003e comparer \u003d\n           (Comparer\u003cbyte[]\u003e) theClass.getEnumConstants()[0];\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(\"Unsafe comparer selected for \"\n               + \"byte unaligned system architecture\");\n         }\n         return comparer;\n       } catch (Throwable t) { // ensure we really catch *everything*\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(t.getMessage());\n           LOG.trace(\"Lexicographical comparer selected\");\n         }\n         return lexicographicalComparerJavaImpl();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Comparer\u003cbyte[]\u003e getBestComparer() {\n      if (System.getProperty(\"os.arch\").toLowerCase().startsWith(\"sparc\")) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Lexicographical comparer selected for \"\n              + \"byte aligned system architecture\");\n        }\n        return lexicographicalComparerJavaImpl();\n      }\n      try {\n        Class\u003c?\u003e theClass \u003d Class.forName(UNSAFE_COMPARER_NAME);\n\n        // yes, UnsafeComparer does implement Comparer\u003cbyte[]\u003e\n        @SuppressWarnings(\"unchecked\")\n        Comparer\u003cbyte[]\u003e comparer \u003d\n          (Comparer\u003cbyte[]\u003e) theClass.getEnumConstants()[0];\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Unsafe comparer selected for \"\n              + \"byte unaligned system architecture\");\n        }\n        return comparer;\n      } catch (Throwable t) { // ensure we really catch *everything*\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(t.getMessage());\n          LOG.trace(\"Lexicographical comparer selected\");\n        }\n        return lexicographicalComparerJavaImpl();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/FastByteComparisons.java",
      "extendedDetails": {}
    },
    "ee7d22e90ce67de3e7ee92f309c048a1d4be0bbe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11466. FastByteComparisons: do not use UNSAFE_COMPARER on the SPARC architecture because it is slower there (Suman Somasundar via Colin P.  McCabe)\n",
      "commitDate": "21/01/15 4:33 PM",
      "commitName": "ee7d22e90ce67de3e7ee92f309c048a1d4be0bbe",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/10/11 10:59 PM",
      "commitNameOld": "0e75187199076b7fc5a448bb8a143d3ae32838d3",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1182.77,
      "commitsBetweenForRepo": 7939,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,28 @@\n     static Comparer\u003cbyte[]\u003e getBestComparer() {\n+      if (System.getProperty(\"os.arch\").equals(\"sparc\")) {\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"Lexicographical comparer selected for \"\n+              + \"byte aligned system architecture\");\n+        }\n+        return lexicographicalComparerJavaImpl();\n+      }\n       try {\n         Class\u003c?\u003e theClass \u003d Class.forName(UNSAFE_COMPARER_NAME);\n \n         // yes, UnsafeComparer does implement Comparer\u003cbyte[]\u003e\n         @SuppressWarnings(\"unchecked\")\n         Comparer\u003cbyte[]\u003e comparer \u003d\n           (Comparer\u003cbyte[]\u003e) theClass.getEnumConstants()[0];\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"Unsafe comparer selected for \"\n+              + \"byte unaligned system architecture\");\n+        }\n         return comparer;\n       } catch (Throwable t) { // ensure we really catch *everything*\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(t.getMessage());\n+          LOG.trace(\"Lexicographical comparer selected\");\n+        }\n         return lexicographicalComparerJavaImpl();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static Comparer\u003cbyte[]\u003e getBestComparer() {\n      if (System.getProperty(\"os.arch\").equals(\"sparc\")) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Lexicographical comparer selected for \"\n              + \"byte aligned system architecture\");\n        }\n        return lexicographicalComparerJavaImpl();\n      }\n      try {\n        Class\u003c?\u003e theClass \u003d Class.forName(UNSAFE_COMPARER_NAME);\n\n        // yes, UnsafeComparer does implement Comparer\u003cbyte[]\u003e\n        @SuppressWarnings(\"unchecked\")\n        Comparer\u003cbyte[]\u003e comparer \u003d\n          (Comparer\u003cbyte[]\u003e) theClass.getEnumConstants()[0];\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"Unsafe comparer selected for \"\n              + \"byte unaligned system architecture\");\n        }\n        return comparer;\n      } catch (Throwable t) { // ensure we really catch *everything*\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(t.getMessage());\n          LOG.trace(\"Lexicographical comparer selected\");\n        }\n        return lexicographicalComparerJavaImpl();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/FastByteComparisons.java",
      "extendedDetails": {}
    },
    "0e75187199076b7fc5a448bb8a143d3ae32838d3": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7761. Improve the performance of raw comparisons. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/10/11 10:59 PM",
      "commitName": "0e75187199076b7fc5a448bb8a143d3ae32838d3",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,13 @@\n+    static Comparer\u003cbyte[]\u003e getBestComparer() {\n+      try {\n+        Class\u003c?\u003e theClass \u003d Class.forName(UNSAFE_COMPARER_NAME);\n+\n+        // yes, UnsafeComparer does implement Comparer\u003cbyte[]\u003e\n+        @SuppressWarnings(\"unchecked\")\n+        Comparer\u003cbyte[]\u003e comparer \u003d\n+          (Comparer\u003cbyte[]\u003e) theClass.getEnumConstants()[0];\n+        return comparer;\n+      } catch (Throwable t) { // ensure we really catch *everything*\n+        return lexicographicalComparerJavaImpl();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static Comparer\u003cbyte[]\u003e getBestComparer() {\n      try {\n        Class\u003c?\u003e theClass \u003d Class.forName(UNSAFE_COMPARER_NAME);\n\n        // yes, UnsafeComparer does implement Comparer\u003cbyte[]\u003e\n        @SuppressWarnings(\"unchecked\")\n        Comparer\u003cbyte[]\u003e comparer \u003d\n          (Comparer\u003cbyte[]\u003e) theClass.getEnumConstants()[0];\n        return comparer;\n      } catch (Throwable t) { // ensure we really catch *everything*\n        return lexicographicalComparerJavaImpl();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/FastByteComparisons.java"
    }
  }
}