{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeriodicRLESparseResourceAllocation.java",
  "functionName": "getMaximumPeriodicCapacity",
  "functionId": "getMaximumPeriodicCapacity___tick-long__period-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/PeriodicRLESparseResourceAllocation.java",
  "functionStartLine": 183,
  "functionEndLine": 193,
  "numCommitsSeen": 5,
  "timeTaken": 736,
  "changeHistory": [
    "6bf42e48ef658bf6dd86ebd706562ce7cc06216a"
  ],
  "changeHistoryShort": {
    "6bf42e48ef658bf6dd86ebd706562ce7cc06216a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6bf42e48ef658bf6dd86ebd706562ce7cc06216a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5331. Extend RLESparseResourceAllocation with period for supporting recurring reservations in YARN ReservationSystem. (Sangeetha Abdu Jyothi via Subru).\n",
      "commitDate": "01/05/17 6:48 PM",
      "commitName": "6bf42e48ef658bf6dd86ebd706562ce7cc06216a",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,12 @@\n+  public Resource getMaximumPeriodicCapacity(long tick, long period) {\n+    Resource maxResource;\n+    if (period \u003c timePeriod) {\n+      maxResource \u003d\n+          super.getMaximumPeriodicCapacity(tick % timePeriod, period);\n+    } else {\n+      // if period is greater than the length of PeriodicRLESparseAllocation,\n+      // only a single value exists in this interval.\n+      maxResource \u003d super.getCapacityAtTime(tick % timePeriod);\n+    }\n+    return maxResource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaximumPeriodicCapacity(long tick, long period) {\n    Resource maxResource;\n    if (period \u003c timePeriod) {\n      maxResource \u003d\n          super.getMaximumPeriodicCapacity(tick % timePeriod, period);\n    } else {\n      // if period is greater than the length of PeriodicRLESparseAllocation,\n      // only a single value exists in this interval.\n      maxResource \u003d super.getCapacityAtTime(tick % timePeriod);\n    }\n    return maxResource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/PeriodicRLESparseResourceAllocation.java"
    }
  }
}