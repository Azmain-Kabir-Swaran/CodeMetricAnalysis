{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageReconstructor.java",
  "functionName": "processDirectiveXml",
  "functionId": "processDirectiveXml___directive-Node",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
  "functionStartLine": 1162,
  "functionEndLine": 1206,
  "numCommitsSeen": 15,
  "timeTaken": 1532,
  "changeHistory": [
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742"
  ],
  "changeHistoryShort": {
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "10/03/16 1:41 PM",
      "commitNameOld": "bd49354c6d6387620b0de2219eab1714ec2d64f8",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n     private void processDirectiveXml(Node directive) throws IOException {\n       CacheDirectiveInfoProto.Builder bld \u003d\n           CacheDirectiveInfoProto.newBuilder();\n-      Long id \u003d directive.removeChildLong(\"id\");\n+      Long id \u003d directive.removeChildLong(SECTION_ID);\n       if (id \u003d\u003d null) {\n         throw new IOException(\"\u003cdirective\u003e found without \u003cid\u003e\");\n       }\n       bld.setId(id);\n-      String path \u003d directive.removeChildStr(\"path\");\n+      String path \u003d directive.removeChildStr(SECTION_PATH);\n       if (path \u003d\u003d null) {\n         throw new IOException(\"\u003cdirective\u003e found without \u003cpath\u003e\");\n       }\n       bld.setPath(path);\n-      Integer replication \u003d directive.removeChildInt(\"replication\");\n+      Integer replication \u003d directive.removeChildInt(SECTION_REPLICATION);\n       if (replication \u003d\u003d null) {\n         throw new IOException(\"\u003cdirective\u003e found without \u003creplication\u003e\");\n       }\n       bld.setReplication(replication);\n-      String pool \u003d directive.removeChildStr(\"pool\");\n+      String pool \u003d directive.removeChildStr(CACHE_MANAGER_SECTION_POOL);\n       if (path \u003d\u003d null) {\n         throw new IOException(\"\u003cdirective\u003e found without \u003cpool\u003e\");\n       }\n       bld.setPool(pool);\n-      Node expiration \u003d directive.removeChild(\"expiration\");\n+      Node expiration \u003d\n+          directive.removeChild(CACHE_MANAGER_SECTION_EXPIRATION);\n       if (expiration !\u003d null) {\n         CacheDirectiveInfoExpirationProto.Builder ebld \u003d\n             CacheDirectiveInfoExpirationProto.newBuilder();\n-        Long millis \u003d expiration.removeChildLong(\"millis\");\n+        Long millis \u003d\n+            expiration.removeChildLong(CACHE_MANAGER_SECTION_MILLIS);\n         if (millis \u003d\u003d null) {\n           throw new IOException(\"cache directive \u003cexpiration\u003e found \" +\n               \"without \u003cmillis\u003e\");\n         }\n         ebld.setMillis(millis);\n-        if (expiration.removeChildBool(\"relative\")) {\n+        if (expiration.removeChildBool(CACHE_MANAGER_SECTION_RELATIVE)) {\n           ebld.setIsRelative(true);\n         } else {\n           ebld.setIsRelative(false);\n         }\n         bld.setExpiration(ebld);\n       }\n       directive.verifyNoRemainingKeys(\"directive\");\n       bld.build().writeDelimitedTo(out);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processDirectiveXml(Node directive) throws IOException {\n      CacheDirectiveInfoProto.Builder bld \u003d\n          CacheDirectiveInfoProto.newBuilder();\n      Long id \u003d directive.removeChildLong(SECTION_ID);\n      if (id \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003cid\u003e\");\n      }\n      bld.setId(id);\n      String path \u003d directive.removeChildStr(SECTION_PATH);\n      if (path \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003cpath\u003e\");\n      }\n      bld.setPath(path);\n      Integer replication \u003d directive.removeChildInt(SECTION_REPLICATION);\n      if (replication \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003creplication\u003e\");\n      }\n      bld.setReplication(replication);\n      String pool \u003d directive.removeChildStr(CACHE_MANAGER_SECTION_POOL);\n      if (path \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003cpool\u003e\");\n      }\n      bld.setPool(pool);\n      Node expiration \u003d\n          directive.removeChild(CACHE_MANAGER_SECTION_EXPIRATION);\n      if (expiration !\u003d null) {\n        CacheDirectiveInfoExpirationProto.Builder ebld \u003d\n            CacheDirectiveInfoExpirationProto.newBuilder();\n        Long millis \u003d\n            expiration.removeChildLong(CACHE_MANAGER_SECTION_MILLIS);\n        if (millis \u003d\u003d null) {\n          throw new IOException(\"cache directive \u003cexpiration\u003e found \" +\n              \"without \u003cmillis\u003e\");\n        }\n        ebld.setMillis(millis);\n        if (expiration.removeChildBool(CACHE_MANAGER_SECTION_RELATIVE)) {\n          ebld.setIsRelative(true);\n        } else {\n          ebld.setIsRelative(false);\n        }\n        bld.setExpiration(ebld);\n      }\n      directive.verifyNoRemainingKeys(\"directive\");\n      bld.build().writeDelimitedTo(out);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,43 @@\n+    private void processDirectiveXml(Node directive) throws IOException {\n+      CacheDirectiveInfoProto.Builder bld \u003d\n+          CacheDirectiveInfoProto.newBuilder();\n+      Long id \u003d directive.removeChildLong(\"id\");\n+      if (id \u003d\u003d null) {\n+        throw new IOException(\"\u003cdirective\u003e found without \u003cid\u003e\");\n+      }\n+      bld.setId(id);\n+      String path \u003d directive.removeChildStr(\"path\");\n+      if (path \u003d\u003d null) {\n+        throw new IOException(\"\u003cdirective\u003e found without \u003cpath\u003e\");\n+      }\n+      bld.setPath(path);\n+      Integer replication \u003d directive.removeChildInt(\"replication\");\n+      if (replication \u003d\u003d null) {\n+        throw new IOException(\"\u003cdirective\u003e found without \u003creplication\u003e\");\n+      }\n+      bld.setReplication(replication);\n+      String pool \u003d directive.removeChildStr(\"pool\");\n+      if (path \u003d\u003d null) {\n+        throw new IOException(\"\u003cdirective\u003e found without \u003cpool\u003e\");\n+      }\n+      bld.setPool(pool);\n+      Node expiration \u003d directive.removeChild(\"expiration\");\n+      if (expiration !\u003d null) {\n+        CacheDirectiveInfoExpirationProto.Builder ebld \u003d\n+            CacheDirectiveInfoExpirationProto.newBuilder();\n+        Long millis \u003d expiration.removeChildLong(\"millis\");\n+        if (millis \u003d\u003d null) {\n+          throw new IOException(\"cache directive \u003cexpiration\u003e found \" +\n+              \"without \u003cmillis\u003e\");\n+        }\n+        ebld.setMillis(millis);\n+        if (expiration.removeChildBool(\"relative\")) {\n+          ebld.setIsRelative(true);\n+        } else {\n+          ebld.setIsRelative(false);\n+        }\n+        bld.setExpiration(ebld);\n+      }\n+      directive.verifyNoRemainingKeys(\"directive\");\n+      bld.build().writeDelimitedTo(out);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processDirectiveXml(Node directive) throws IOException {\n      CacheDirectiveInfoProto.Builder bld \u003d\n          CacheDirectiveInfoProto.newBuilder();\n      Long id \u003d directive.removeChildLong(\"id\");\n      if (id \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003cid\u003e\");\n      }\n      bld.setId(id);\n      String path \u003d directive.removeChildStr(\"path\");\n      if (path \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003cpath\u003e\");\n      }\n      bld.setPath(path);\n      Integer replication \u003d directive.removeChildInt(\"replication\");\n      if (replication \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003creplication\u003e\");\n      }\n      bld.setReplication(replication);\n      String pool \u003d directive.removeChildStr(\"pool\");\n      if (path \u003d\u003d null) {\n        throw new IOException(\"\u003cdirective\u003e found without \u003cpool\u003e\");\n      }\n      bld.setPool(pool);\n      Node expiration \u003d directive.removeChild(\"expiration\");\n      if (expiration !\u003d null) {\n        CacheDirectiveInfoExpirationProto.Builder ebld \u003d\n            CacheDirectiveInfoExpirationProto.newBuilder();\n        Long millis \u003d expiration.removeChildLong(\"millis\");\n        if (millis \u003d\u003d null) {\n          throw new IOException(\"cache directive \u003cexpiration\u003e found \" +\n              \"without \u003cmillis\u003e\");\n        }\n        ebld.setMillis(millis);\n        if (expiration.removeChildBool(\"relative\")) {\n          ebld.setIsRelative(true);\n        } else {\n          ebld.setIsRelative(false);\n        }\n        bld.setExpiration(ebld);\n      }\n      directive.verifyNoRemainingKeys(\"directive\");\n      bld.build().writeDelimitedTo(out);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java"
    }
  }
}