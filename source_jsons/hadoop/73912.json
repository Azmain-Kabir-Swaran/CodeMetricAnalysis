{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "setupResponseForWritable",
  "functionId": "setupResponseForWritable___header-RpcResponseHeaderProto__rv-Writable",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 3264,
  "functionEndLine": 3280,
  "numCommitsSeen": 162,
  "timeTaken": 2472,
  "changeHistory": [
    "39d1b1d747b1e325792b897b3264272f32b756a9"
  ],
  "changeHistoryShort": {
    "39d1b1d747b1e325792b897b3264272f32b756a9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39d1b1d747b1e325792b897b3264272f32b756a9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13549. Eliminate intermediate buffer for server-side PB encoding. Contributed by Daryn Sharp.\n",
      "commitDate": "06/09/16 8:02 AM",
      "commitName": "39d1b1d747b1e325792b897b3264272f32b756a9",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,17 @@\n+  private byte[] setupResponseForWritable(\n+      RpcResponseHeaderProto header, Writable rv) throws IOException {\n+    ResponseBuffer buf \u003d responseBuffer.get().reset();\n+    try {\n+      RpcWritable.wrap(header).writeTo(buf);\n+      if (rv !\u003d null) {\n+        RpcWritable.wrap(rv).writeTo(buf);\n+      }\n+      return buf.toByteArray();\n+    } finally {\n+      // Discard a large buf and reset it back to smaller size\n+      // to free up heap.\n+      if (buf.capacity() \u003e maxRespSize) {\n+        buf.setCapacity(INITIAL_RESP_BUF_SIZE);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private byte[] setupResponseForWritable(\n      RpcResponseHeaderProto header, Writable rv) throws IOException {\n    ResponseBuffer buf \u003d responseBuffer.get().reset();\n    try {\n      RpcWritable.wrap(header).writeTo(buf);\n      if (rv !\u003d null) {\n        RpcWritable.wrap(rv).writeTo(buf);\n      }\n      return buf.toByteArray();\n    } finally {\n      // Discard a large buf and reset it back to smaller size\n      // to free up heap.\n      if (buf.capacity() \u003e maxRespSize) {\n        buf.setCapacity(INITIAL_RESP_BUF_SIZE);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}