{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImagePreTransactionalStorageInspector.java",
  "functionName": "getLatestImages",
  "functionId": "getLatestImages",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
  "functionStartLine": 152,
  "functionEndLine": 188,
  "numCommitsSeen": 19,
  "timeTaken": 3356,
  "changeHistory": [
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1",
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/14 1:20 PM",
      "commitNameOld": "7f635b8f53b59bae141177da80590753ff1eef72",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 373.86,
      "commitsBetweenForRepo": 3070,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n     \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n \n     needToSaveAfterRecovery \u003d doRecovery();\n     \n     FSImageFile file \u003d new FSImageFile(latestNameSD, \n         NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n-        HdfsConstants.INVALID_TXID);\n+        HdfsServerConstants.INVALID_TXID);\n     LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n     ret.add(file);\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    FSImageFile file \u003d new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsServerConstants.INVALID_TXID);\n    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n    ret.add(file);\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
      "extendedDetails": {}
    },
    "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-3277. fail over to loading a different FSImage if the first one we try to load is corrupt. Contributed by Colin Patrick McCabe and Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456578 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/13 11:04 AM",
      "commitName": "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-3277. fail over to loading a different FSImage if the first one we try to load is corrupt. Contributed by Colin Patrick McCabe and Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456578 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/03/13 11:04 AM",
          "commitName": "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "18/09/11 1:30 AM",
          "commitNameOld": "e34d2c075d8a6d7a283062f364f7ed67b3babcd7",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 543.4,
          "commitsBetweenForRepo": 3301,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n-  FSImageFile getLatestImage() throws IOException {\n+  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n     \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n \n     needToSaveAfterRecovery \u003d doRecovery();\n     \n-    return new FSImageFile(latestNameSD, \n+    FSImageFile file \u003d new FSImageFile(latestNameSD, \n         NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n         HdfsConstants.INVALID_TXID);\n+    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n+    ret.add(file);\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    FSImageFile file \u003d new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsConstants.INVALID_TXID);\n    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n    ret.add(file);\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
          "extendedDetails": {
            "oldValue": "getLatestImage",
            "newValue": "getLatestImages"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-3277. fail over to loading a different FSImage if the first one we try to load is corrupt. Contributed by Colin Patrick McCabe and Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456578 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/03/13 11:04 AM",
          "commitName": "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "18/09/11 1:30 AM",
          "commitNameOld": "e34d2c075d8a6d7a283062f364f7ed67b3babcd7",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 543.4,
          "commitsBetweenForRepo": 3301,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n-  FSImageFile getLatestImage() throws IOException {\n+  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n     \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n \n     needToSaveAfterRecovery \u003d doRecovery();\n     \n-    return new FSImageFile(latestNameSD, \n+    FSImageFile file \u003d new FSImageFile(latestNameSD, \n         NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n         HdfsConstants.INVALID_TXID);\n+    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n+    ret.add(file);\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    FSImageFile file \u003d new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsConstants.INVALID_TXID);\n    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n    ret.add(file);\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
          "extendedDetails": {
            "oldValue": "FSImageFile",
            "newValue": "List\u003cFSImageFile\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3277. fail over to loading a different FSImage if the first one we try to load is corrupt. Contributed by Colin Patrick McCabe and Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456578 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/03/13 11:04 AM",
          "commitName": "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "18/09/11 1:30 AM",
          "commitNameOld": "e34d2c075d8a6d7a283062f364f7ed67b3babcd7",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 543.4,
          "commitsBetweenForRepo": 3301,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n-  FSImageFile getLatestImage() throws IOException {\n+  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n     \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n \n     needToSaveAfterRecovery \u003d doRecovery();\n     \n-    return new FSImageFile(latestNameSD, \n+    FSImageFile file \u003d new FSImageFile(latestNameSD, \n         NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n         HdfsConstants.INVALID_TXID);\n+    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n+    ret.add(file);\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cFSImageFile\u003e getLatestImages() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    FSImageFile file \u003d new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsConstants.INVALID_TXID);\n    LinkedList\u003cFSImageFile\u003e ret \u003d new LinkedList\u003cFSImageFile\u003e();\n    ret.add(file);\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
          "extendedDetails": {}
        }
      ]
    },
    "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-2018. Move all journal stream management code into one place. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 1:27 PM",
      "commitName": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
      "commitAuthor": "Jitendra Nath Pandey",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-2018. Move all journal stream management code into one place. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165826 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/11 1:27 PM",
          "commitName": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 12.84,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n-  LoadPlan createLoadPlan() throws IOException {\n+  FSImageFile getLatestImage() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n-\n+    \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n+\n+    needToSaveAfterRecovery \u003d doRecovery();\n     \n-    return new PreTransactionalLoadPlan();\n+    return new FSImageFile(latestNameSD, \n+        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n+        HdfsConstants.INVALID_TXID);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageFile getLatestImage() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    return new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsConstants.INVALID_TXID);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
          "extendedDetails": {
            "oldValue": "createLoadPlan",
            "newValue": "getLatestImage"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2018. Move all journal stream management code into one place. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165826 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/11 1:27 PM",
          "commitName": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 12.84,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n-  LoadPlan createLoadPlan() throws IOException {\n+  FSImageFile getLatestImage() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n-\n+    \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n+\n+    needToSaveAfterRecovery \u003d doRecovery();\n     \n-    return new PreTransactionalLoadPlan();\n+    return new FSImageFile(latestNameSD, \n+        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n+        HdfsConstants.INVALID_TXID);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageFile getLatestImage() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    return new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsConstants.INVALID_TXID);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
          "extendedDetails": {
            "oldValue": "LoadPlan",
            "newValue": "FSImageFile"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2018. Move all journal stream management code into one place. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165826 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/11 1:27 PM",
          "commitName": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 12.84,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n-  LoadPlan createLoadPlan() throws IOException {\n+  FSImageFile getLatestImage() throws IOException {\n     // We should have at least one image and one edits dirs\n     if (latestNameSD \u003d\u003d null)\n       throw new IOException(\"Image file is not found in \" + imageDirs);\n     if (latestEditsSD \u003d\u003d null)\n       throw new IOException(\"Edits file is not found in \" + editsDirs);\n-\n+    \n     // Make sure we are loading image and edits from same checkpoint\n     if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n         \u0026\u0026 latestNameSD !\u003d latestEditsSD\n         \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n         \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n       // This is a rare failure when NN has image-only and edits-only\n       // storage directories, and fails right after saving images,\n       // in some of the storage directories, but before purging edits.\n       // See -NOTE- in saveNamespace().\n       LOG.error(\"This is a rare failure scenario!!!\");\n       LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                 \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n       LOG.error(\"Name-node will treat the image as the latest state of \" +\n                 \"the namespace. Old edits will be discarded.\");\n     } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n       throw new IOException(\"Inconsistent storage detected, \" +\n                       \"image and edits checkpoint times do not match. \" +\n                       \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                       \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n     }\n+\n+    needToSaveAfterRecovery \u003d doRecovery();\n     \n-    return new PreTransactionalLoadPlan();\n+    return new FSImageFile(latestNameSD, \n+        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n+        HdfsConstants.INVALID_TXID);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageFile getLatestImage() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n    \n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n\n    needToSaveAfterRecovery \u003d doRecovery();\n    \n    return new FSImageFile(latestNameSD, \n        NNStorage.getStorageFile(latestNameSD, NameNodeFile.IMAGE),\n        HdfsConstants.INVALID_TXID);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  LoadPlan createLoadPlan() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n\n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n    \n    return new PreTransactionalLoadPlan();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  LoadPlan createLoadPlan() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n\n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n    \n    return new PreTransactionalLoadPlan();\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+  LoadPlan createLoadPlan() throws IOException {\n+    // We should have at least one image and one edits dirs\n+    if (latestNameSD \u003d\u003d null)\n+      throw new IOException(\"Image file is not found in \" + imageDirs);\n+    if (latestEditsSD \u003d\u003d null)\n+      throw new IOException(\"Edits file is not found in \" + editsDirs);\n+\n+    // Make sure we are loading image and edits from same checkpoint\n+    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n+        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n+        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n+        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n+      // This is a rare failure when NN has image-only and edits-only\n+      // storage directories, and fails right after saving images,\n+      // in some of the storage directories, but before purging edits.\n+      // See -NOTE- in saveNamespace().\n+      LOG.error(\"This is a rare failure scenario!!!\");\n+      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n+                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n+      LOG.error(\"Name-node will treat the image as the latest state of \" +\n+                \"the namespace. Old edits will be discarded.\");\n+    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n+      throw new IOException(\"Inconsistent storage detected, \" +\n+                      \"image and edits checkpoint times do not match. \" +\n+                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n+                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n+    }\n+    \n+    return new PreTransactionalLoadPlan();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  LoadPlan createLoadPlan() throws IOException {\n    // We should have at least one image and one edits dirs\n    if (latestNameSD \u003d\u003d null)\n      throw new IOException(\"Image file is not found in \" + imageDirs);\n    if (latestEditsSD \u003d\u003d null)\n      throw new IOException(\"Edits file is not found in \" + editsDirs);\n\n    // Make sure we are loading image and edits from same checkpoint\n    if (latestNameCheckpointTime \u003e latestEditsCheckpointTime\n        \u0026\u0026 latestNameSD !\u003d latestEditsSD\n        \u0026\u0026 latestNameSD.getStorageDirType() \u003d\u003d NameNodeDirType.IMAGE\n        \u0026\u0026 latestEditsSD.getStorageDirType() \u003d\u003d NameNodeDirType.EDITS) {\n      // This is a rare failure when NN has image-only and edits-only\n      // storage directories, and fails right after saving images,\n      // in some of the storage directories, but before purging edits.\n      // See -NOTE- in saveNamespace().\n      LOG.error(\"This is a rare failure scenario!!!\");\n      LOG.error(\"Image checkpoint time \" + latestNameCheckpointTime +\n                \" \u003e edits checkpoint time \" + latestEditsCheckpointTime);\n      LOG.error(\"Name-node will treat the image as the latest state of \" +\n                \"the namespace. Old edits will be discarded.\");\n    } else if (latestNameCheckpointTime !\u003d latestEditsCheckpointTime) {\n      throw new IOException(\"Inconsistent storage detected, \" +\n                      \"image and edits checkpoint times do not match. \" +\n                      \"image checkpoint time \u003d \" + latestNameCheckpointTime +\n                      \"edits checkpoint time \u003d \" + latestEditsCheckpointTime);\n    }\n    \n    return new PreTransactionalLoadPlan();\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java"
    }
  }
}