{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "createConnection",
  "functionId": "createConnection___url-URL(modifiers-final)__method-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 501,
  "functionEndLine": 536,
  "numCommitsSeen": 83,
  "timeTaken": 6792,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "d2874e04173613b1a3d44eabf8d449c8a3920fa4",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "d0a347984da175948b553a675dc357491df2fd0f",
    "da901b6c1487b2e2184b300e05a7d0f6949d076b",
    "be7237224819e2491aef91cd4f055c7efcf7b90d",
    "8ebf2e95d2053cb94c6ff87ca018811fe8276f2b",
    "b1674caa409ca2c616207acb72aeb2767d28b10c",
    "391da36d93358038c50c15d91543f6c765fa0471",
    "993311e547e6dd7757025d5ffc285019bd4fc1f6",
    "0e57aa3bf689374736939300d8f3525ec38bead7",
    "fad4cd85b313a1d2378adcf03cad67e946a12cd5",
    "3f8f860cc65e179dd5766fea4d21cf30fa4b96e3",
    "d9a86031a077184d429dd5463e7da156df112011",
    "0f3c19c1bb9e341d8aed132ba3eb9e7fc7588306",
    "e932365d6d46b5be16d0e79b751fac0b0b661400",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
    "950ae82571bd05e8bac449c20bed1fa12dbfb56b",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ybodychange",
    "d2874e04173613b1a3d44eabf8d449c8a3920fa4": "Ybodychange",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ybodychange",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ybodychange",
    "d0a347984da175948b553a675dc357491df2fd0f": "Ybodychange",
    "da901b6c1487b2e2184b300e05a7d0f6949d076b": "Ybodychange",
    "be7237224819e2491aef91cd4f055c7efcf7b90d": "Ybodychange",
    "8ebf2e95d2053cb94c6ff87ca018811fe8276f2b": "Ybodychange",
    "b1674caa409ca2c616207acb72aeb2767d28b10c": "Ybodychange",
    "391da36d93358038c50c15d91543f6c765fa0471": "Ybodychange",
    "993311e547e6dd7757025d5ffc285019bd4fc1f6": "Ybodychange",
    "0e57aa3bf689374736939300d8f3525ec38bead7": "Ybodychange",
    "fad4cd85b313a1d2378adcf03cad67e946a12cd5": "Ybodychange",
    "3f8f860cc65e179dd5766fea4d21cf30fa4b96e3": "Ybodychange",
    "d9a86031a077184d429dd5463e7da156df112011": "Ybodychange",
    "0f3c19c1bb9e341d8aed132ba3eb9e7fc7588306": "Ybodychange",
    "e932365d6d46b5be16d0e79b751fac0b0b661400": "Ymultichange(Ybodychange,Yparametermetachange)",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": "Ybodychange",
    "950ae82571bd05e8bac449c20bed1fa12dbfb56b": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 1.49,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       final String doAsUser \u003d getDoAsUser();\n       conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n           \u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n-              new DelegationTokenAuthenticatedURL(configurator);\n+              createAuthenticatedURL();\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (ConnectException ex) {\n       String msg \u003d \"Failed to connect to: \" + url.toString();\n       LOG.warn(msg);\n       throw new IOException(msg, ex);\n     } catch (SocketTimeoutException ex) {\n       LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       throw ex;\n     } catch (IOException ex) {\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n          \u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              createAuthenticatedURL();\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (ConnectException ex) {\n      String msg \u003d \"Failed to connect to: \" + url.toString();\n      LOG.warn(msg);\n      throw new IOException(msg, ex);\n    } catch (SocketTimeoutException ex) {\n      LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      throw ex;\n    } catch (IOException ex) {\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "d2874e04173613b1a3d44eabf8d449c8a3920fa4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13690. Improve error message when creating encryption zone while KMS is unreachable. Contributed by Kitti Nanasi.\n",
      "commitDate": "16/07/18 1:19 PM",
      "commitName": "d2874e04173613b1a3d44eabf8d449c8a3920fa4",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "09/07/18 12:01 PM",
      "commitNameOld": "def9d94a40e1ff71a0dc5a4db1f042e2704cb84d",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 7.05,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       final String doAsUser \u003d getDoAsUser();\n       conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n           \u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n+    } catch (ConnectException ex) {\n+      String msg \u003d \"Failed to connect to: \" + url.toString();\n+      LOG.warn(msg);\n+      throw new IOException(msg, ex);\n+    } catch (SocketTimeoutException ex) {\n+      LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n+      throw ex;\n     } catch (IOException ex) {\n-      if (ex instanceof SocketTimeoutException) {\n-        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n-      }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n          \u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (ConnectException ex) {\n      String msg \u003d \"Failed to connect to: \" + url.toString();\n      LOG.warn(msg);\n      throw new IOException(msg, ex);\n    } catch (SocketTimeoutException ex) {\n      LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      throw ex;\n    } catch (IOException ex) {\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "04/05/18 1:36 PM",
      "commitNameOld": "4cdbdce752e192b45c2b9756c2d4bd24ceffdabd",
      "commitAuthorOld": "Rushabh Shah",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       final String doAsUser \u003d getDoAsUser();\n       conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n           \u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n-              createKMSAuthenticatedURL();\n+              new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n          \u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/11/17 4:10 PM",
      "commitNameOld": "59d78a5088700350a5122c3a3ba5e76cd26d6a80",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 157.98,
      "commitsBetweenForRepo": 1162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       final String doAsUser \u003d getDoAsUser();\n       conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n           \u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n-              new DelegationTokenAuthenticatedURL(configurator);\n+              createKMSAuthenticatedURL();\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n          \u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              createKMSAuthenticatedURL();\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "d0a347984da175948b553a675dc357491df2fd0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13749. KMSClientProvider combined with KeyProviderCache can result in wrong UGI being used. Contributed by Xiaoyu Yao.\n",
      "commitDate": "23/10/16 10:58 AM",
      "commitName": "d0a347984da175948b553a675dc357491df2fd0f",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "23/10/16 8:25 AM",
      "commitNameOld": "da901b6c1487b2e2184b300e05a7d0f6949d076b",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,32 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n-      // if current UGI is different from UGI at constructor time, behave as\n-      // proxyuser\n-      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n-      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n-          UserGroupInformation.AuthenticationMethod.PROXY)\n-                              ? currentUgi.getShortUserName() : null;\n-\n-      // If current UGI contains kms-dt \u0026\u0026 is not proxy, doAs it to use its dt.\n-      // Otherwise, create the HTTP connection using the UGI at constructor time\n-      UserGroupInformation ugiToUse \u003d\n-          (currentUgiContainsKmsDt() \u0026\u0026 doAsUser \u003d\u003d null) ?\n-              currentUgi : actualUgi;\n-      conn \u003d ugiToUse.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n+      final String doAsUser \u003d getDoAsUser();\n+      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n+          \u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n          \u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "da901b6c1487b2e2184b300e05a7d0f6949d076b": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-10757. KMSClientProvider combined with KeyProviderCache can result in wrong UGI being used. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit be7237224819e2491aef91cd4f055c7efcf7b90d.\n",
      "commitDate": "23/10/16 8:25 AM",
      "commitName": "da901b6c1487b2e2184b300e05a7d0f6949d076b",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "21/10/16 2:23 PM",
      "commitNameOld": "be7237224819e2491aef91cd4f055c7efcf7b90d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,42 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n-      final String doAsUser \u003d getDoAsUser();\n-      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n-          \u003cHttpURLConnection\u003e() {\n+      // if current UGI is different from UGI at constructor time, behave as\n+      // proxyuser\n+      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n+      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n+          UserGroupInformation.AuthenticationMethod.PROXY)\n+                              ? currentUgi.getShortUserName() : null;\n+\n+      // If current UGI contains kms-dt \u0026\u0026 is not proxy, doAs it to use its dt.\n+      // Otherwise, create the HTTP connection using the UGI at constructor time\n+      UserGroupInformation ugiToUse \u003d\n+          (currentUgiContainsKmsDt() \u0026\u0026 doAsUser \u003d\u003d null) ?\n+              currentUgi : actualUgi;\n+      conn \u003d ugiToUse.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // If current UGI contains kms-dt \u0026\u0026 is not proxy, doAs it to use its dt.\n      // Otherwise, create the HTTP connection using the UGI at constructor time\n      UserGroupInformation ugiToUse \u003d\n          (currentUgiContainsKmsDt() \u0026\u0026 doAsUser \u003d\u003d null) ?\n              currentUgi : actualUgi;\n      conn \u003d ugiToUse.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "be7237224819e2491aef91cd4f055c7efcf7b90d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10757. KMSClientProvider combined with KeyProviderCache can result in wrong UGI being used. Contributed by Xiaoyu Yao.\n",
      "commitDate": "21/10/16 2:23 PM",
      "commitName": "be7237224819e2491aef91cd4f055c7efcf7b90d",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "01/08/16 1:35 AM",
      "commitNameOld": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 81.53,
      "commitsBetweenForRepo": 558,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,32 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n-      // if current UGI is different from UGI at constructor time, behave as\n-      // proxyuser\n-      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n-      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n-          UserGroupInformation.AuthenticationMethod.PROXY)\n-                              ? currentUgi.getShortUserName() : null;\n-\n-      // If current UGI contains kms-dt \u0026\u0026 is not proxy, doAs it to use its dt.\n-      // Otherwise, create the HTTP connection using the UGI at constructor time\n-      UserGroupInformation ugiToUse \u003d\n-          (currentUgiContainsKmsDt() \u0026\u0026 doAsUser \u003d\u003d null) ?\n-              currentUgi : actualUgi;\n-      conn \u003d ugiToUse.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n+      final String doAsUser \u003d getDoAsUser();\n+      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n+          \u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      final String doAsUser \u003d getDoAsUser();\n      conn \u003d getActualUgi().doAs(new PrivilegedExceptionAction\n          \u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "8ebf2e95d2053cb94c6ff87ca018811fe8276f2b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13381. KMS clients should use KMS Delegation Tokens from current UGI. Contributed by Xiao Chen.\n",
      "commitDate": "28/07/16 6:24 PM",
      "commitName": "8ebf2e95d2053cb94c6ff87ca018811fe8276f2b",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "16/06/16 3:22 PM",
      "commitNameOld": "b1674caa409ca2c616207acb72aeb2767d28b10c",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 42.13,
      "commitsBetweenForRepo": 409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n-      // creating the HTTP connection using the current UGI at constructor time\n-      conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n+      // If current UGI contains kms-dt \u0026\u0026 is not proxy, doAs it to use its dt.\n+      // Otherwise, create the HTTP connection using the UGI at constructor time\n+      UserGroupInformation ugiToUse \u003d\n+          (currentUgiContainsKmsDt() \u0026\u0026 doAsUser \u003d\u003d null) ?\n+              currentUgi : actualUgi;\n+      conn \u003d ugiToUse.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // If current UGI contains kms-dt \u0026\u0026 is not proxy, doAs it to use its dt.\n      // Otherwise, create the HTTP connection using the UGI at constructor time\n      UserGroupInformation ugiToUse \u003d\n          (currentUgiContainsKmsDt() \u0026\u0026 doAsUser \u003d\u003d null) ?\n              currentUgi : actualUgi;\n      conn \u003d ugiToUse.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "b1674caa409ca2c616207acb72aeb2767d28b10c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13255. KMSClientProvider should check and renew tgt when doing delegation token operations. Contributed by Xiao Chen.\n",
      "commitDate": "16/06/16 3:22 PM",
      "commitName": "b1674caa409ca2c616207acb72aeb2767d28b10c",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "03/06/16 4:48 PM",
      "commitNameOld": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 12.94,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n-      // check and renew TGT to handle potential expiration\n-      actualUgi.checkTGTAndReloginFromKeytab();\n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       if (ex instanceof SocketTimeoutException) {\n         LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n       }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "391da36d93358038c50c15d91543f6c765fa0471": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12901. Add warning log when KMSClientProvider cannot create a connection to the KMS server. (Xiao Chen via wang)\n",
      "commitDate": "07/03/16 2:00 PM",
      "commitName": "391da36d93358038c50c15d91543f6c765fa0471",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "17/02/16 8:27 AM",
      "commitNameOld": "fd1befb6ba450e45b1fcb3fb28b0da6c48daf6b3",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 19.23,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n       // check and renew TGT to handle potential expiration\n       actualUgi.checkTGTAndReloginFromKeytab();\n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n+      if (ex instanceof SocketTimeoutException) {\n+        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n+      }\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // check and renew TGT to handle potential expiration\n      actualUgi.checkTGTAndReloginFromKeytab();\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      if (ex instanceof SocketTimeoutException) {\n        LOG.warn(\"Failed to connect to {}:{}\", url.getHost(), url.getPort());\n      }\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "993311e547e6dd7757025d5ffc285019bd4fc1f6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12559. KMS connection failures should trigger TGT renewal. Contributed by Zhe Zhang.\n",
      "commitDate": "28/12/15 10:41 AM",
      "commitName": "993311e547e6dd7757025d5ffc285019bd4fc1f6",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "20/07/15 5:03 AM",
      "commitNameOld": "05fa3368f12d189a95a2d6cd8eebc6f7e3a719ee",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 161.28,
      "commitsBetweenForRepo": 1095,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n+      // check and renew TGT to handle potential expiration\n+      actualUgi.checkTGTAndReloginFromKeytab();\n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // check and renew TGT to handle potential expiration\n      actualUgi.checkTGTAndReloginFromKeytab();\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "0e57aa3bf689374736939300d8f3525ec38bead7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11176. KMSClientProvider authentication fails when both currentUgi and loginUgi are a proxied user. Contributed by Arun Suresh.\n",
      "commitDate": "13/10/14 6:09 PM",
      "commitName": "0e57aa3bf689374736939300d8f3525ec38bead7",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "10/10/14 1:40 PM",
      "commitNameOld": "d3d3d47202a18749eeebec22db759c19dd3e232c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.19,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n       // creating the HTTP connection using the current UGI at constructor time\n-      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n+      conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       throw ex;\n     } catch (UndeclaredThrowableException ex) {\n       throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d actualUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "fad4cd85b313a1d2378adcf03cad67e946a12cd5": {
      "type": "Ybodychange",
      "commitMessage": "KMS: Support for multiple Kerberos principals. (tucu)\n",
      "commitDate": "18/09/14 4:03 PM",
      "commitName": "fad4cd85b313a1d2378adcf03cad67e946a12cd5",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "17/09/14 11:11 AM",
      "commitNameOld": "3f8f860cc65e179dd5766fea4d21cf30fa4b96e3",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       throw ex;\n+    } catch (UndeclaredThrowableException ex) {\n+      throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "3f8f860cc65e179dd5766fea4d21cf30fa4b96e3": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-10982\"\n\nThis reverts commit d9a86031a077184d429dd5463e7da156df112011.\n",
      "commitDate": "17/09/14 11:11 AM",
      "commitName": "3f8f860cc65e179dd5766fea4d21cf30fa4b96e3",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "17/09/14 11:08 AM",
      "commitNameOld": "d9a86031a077184d429dd5463e7da156df112011",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       throw ex;\n-    } catch (UndeclaredThrowableException ex) {\n-      throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "d9a86031a077184d429dd5463e7da156df112011": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10982\n",
      "commitDate": "17/09/14 11:08 AM",
      "commitName": "d9a86031a077184d429dd5463e7da156df112011",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "08/09/14 11:31 AM",
      "commitNameOld": "df8c84cba8512058f5097c6faeedf4b65cab3806",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n       final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n           UserGroupInformation.AuthenticationMethod.PROXY)\n                               ? currentUgi.getShortUserName() : null;\n \n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       throw ex;\n+    } catch (UndeclaredThrowableException ex) {\n+      throw new IOException(ex.getUndeclaredThrowable());\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (UndeclaredThrowableException ex) {\n      throw new IOException(ex.getUndeclaredThrowable());\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "0f3c19c1bb9e341d8aed132ba3eb9e7fc7588306": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11069. KMSClientProvider should use getAuthenticationMethod() to determine if in proxyuser mode or not. (tucu)\n",
      "commitDate": "05/09/14 9:59 PM",
      "commitName": "0f3c19c1bb9e341d8aed132ba3eb9e7fc7588306",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "04/09/14 9:11 AM",
      "commitNameOld": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.53,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       // if current UGI is different from UGI at constructor time, behave as\n       // proxyuser\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n-      final String doAsUser \u003d\n-          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))\n-          ? null : currentUgi.getShortUserName();\n+      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n+          UserGroupInformation.AuthenticationMethod.PROXY)\n+                              ? currentUgi.getShortUserName() : null;\n \n       // creating the HTTP connection using the current UGI at constructor time\n       conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n         @Override\n         public HttpURLConnection run() throws Exception {\n           DelegationTokenAuthenticatedURL authUrl \u003d\n               new DelegationTokenAuthenticatedURL(configurator);\n           return authUrl.openConnection(url, authToken, doAsUser);\n         }\n       });\n     } catch (IOException ex) {\n       throw ex;\n     } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d (currentUgi.getAuthenticationMethod() \u003d\u003d\n          UserGroupInformation.AuthenticationMethod.PROXY)\n                              ? currentUgi.getShortUserName() : null;\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "e932365d6d46b5be16d0e79b751fac0b0b661400": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-10698. KMS, add proxyuser support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618217 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/14 8:53 AM",
      "commitName": "e932365d6d46b5be16d0e79b751fac0b0b661400",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10698. KMS, add proxyuser support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618217 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/08/14 8:53 AM",
          "commitName": "e932365d6d46b5be16d0e79b751fac0b0b661400",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "14/08/14 10:03 PM",
          "commitNameOld": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,33 @@\n-  private HttpURLConnection createConnection(URL url, String method)\n+  private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n-      DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n-      conn \u003d authUrl.openConnection(url, authToken);\n-    } catch (AuthenticationException ex) {\n+      // if current UGI is different from UGI at constructor time, behave as\n+      // proxyuser\n+      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n+      final String doAsUser \u003d\n+          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))\n+          ? null : currentUgi.getShortUserName();\n+\n+      // creating the HTTP connection using the current UGI at constructor time\n+      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n+        @Override\n+        public HttpURLConnection run() throws Exception {\n+          DelegationTokenAuthenticatedURL authUrl \u003d\n+              new DelegationTokenAuthenticatedURL(configurator);\n+          return authUrl.openConnection(url, authToken, doAsUser);\n+        }\n+      });\n+    } catch (IOException ex) {\n+      throw ex;\n+    } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d\n          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))\n          ? null : currentUgi.getShortUserName();\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-10698. KMS, add proxyuser support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618217 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/08/14 8:53 AM",
          "commitName": "e932365d6d46b5be16d0e79b751fac0b0b661400",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "14/08/14 10:03 PM",
          "commitNameOld": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,33 @@\n-  private HttpURLConnection createConnection(URL url, String method)\n+  private HttpURLConnection createConnection(final URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n-      DelegationTokenAuthenticatedURL authUrl \u003d\n-          new DelegationTokenAuthenticatedURL(configurator);\n-      conn \u003d authUrl.openConnection(url, authToken);\n-    } catch (AuthenticationException ex) {\n+      // if current UGI is different from UGI at constructor time, behave as\n+      // proxyuser\n+      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n+      final String doAsUser \u003d\n+          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))\n+          ? null : currentUgi.getShortUserName();\n+\n+      // creating the HTTP connection using the current UGI at constructor time\n+      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n+        @Override\n+        public HttpURLConnection run() throws Exception {\n+          DelegationTokenAuthenticatedURL authUrl \u003d\n+              new DelegationTokenAuthenticatedURL(configurator);\n+          return authUrl.openConnection(url, authToken, doAsUser);\n+        }\n+      });\n+    } catch (IOException ex) {\n+      throw ex;\n+    } catch (Exception ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private HttpURLConnection createConnection(final URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      // if current UGI is different from UGI at constructor time, behave as\n      // proxyuser\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n      final String doAsUser \u003d\n          (loginUgi.getShortUserName().equals(currentUgi.getShortUserName()))\n          ? null : currentUgi.getShortUserName();\n\n      // creating the HTTP connection using the current UGI at constructor time\n      conn \u003d loginUgi.doAs(new PrivilegedExceptionAction\u003cHttpURLConnection\u003e() {\n        @Override\n        public HttpURLConnection run() throws Exception {\n          DelegationTokenAuthenticatedURL authUrl \u003d\n              new DelegationTokenAuthenticatedURL(configurator);\n          return authUrl.openConnection(url, authToken, doAsUser);\n        }\n      });\n    } catch (IOException ex) {\n      throw ex;\n    } catch (Exception ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[url-URL, method-String]",
            "newValue": "[url-URL(modifiers-final), method-String]"
          }
        }
      ]
    },
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 10:03 PM",
      "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "08/08/14 4:10 PM",
      "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.25,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private HttpURLConnection createConnection(URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n-      AuthenticatedURL authUrl \u003d new AuthenticatedURL(new PseudoAuthenticator(),\n-          configurator);\n-      conn \u003d authUrl.openConnection(url, new AuthenticatedURL.Token());\n+      DelegationTokenAuthenticatedURL authUrl \u003d\n+          new DelegationTokenAuthenticatedURL(configurator);\n+      conn \u003d authUrl.openConnection(url, authToken);\n     } catch (AuthenticationException ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      DelegationTokenAuthenticatedURL authUrl \u003d\n          new DelegationTokenAuthenticatedURL(configurator);\n      conn \u003d authUrl.openConnection(url, authToken);\n    } catch (AuthenticationException ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "950ae82571bd05e8bac449c20bed1fa12dbfb56b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10695. KMSClientProvider should respect a configurable timeout. (yoderme via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606930 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/06/14 1:54 PM",
      "commitName": "950ae82571bd05e8bac449c20bed1fa12dbfb56b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "19/06/14 3:18 PM",
      "commitNameOld": "38e2322d84d54896eac23afec0a1434629b8c8b2",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 10.94,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private HttpURLConnection createConnection(URL url, String method)\n       throws IOException {\n     HttpURLConnection conn;\n     try {\n       AuthenticatedURL authUrl \u003d new AuthenticatedURL(new PseudoAuthenticator(),\n-          sslFactory);\n+          configurator);\n       conn \u003d authUrl.openConnection(url, new AuthenticatedURL.Token());\n     } catch (AuthenticationException ex) {\n       throw new IOException(ex);\n     }\n     conn.setUseCaches(false);\n     conn.setRequestMethod(method);\n     if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n       conn.setDoOutput(true);\n     }\n     conn \u003d configureConnection(conn);\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      AuthenticatedURL authUrl \u003d new AuthenticatedURL(new PseudoAuthenticator(),\n          configurator);\n      conn \u003d authUrl.openConnection(url, new AuthenticatedURL.Token());\n    } catch (AuthenticationException ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,18 @@\n+  private HttpURLConnection createConnection(URL url, String method)\n+      throws IOException {\n+    HttpURLConnection conn;\n+    try {\n+      AuthenticatedURL authUrl \u003d new AuthenticatedURL(new PseudoAuthenticator(),\n+          sslFactory);\n+      conn \u003d authUrl.openConnection(url, new AuthenticatedURL.Token());\n+    } catch (AuthenticationException ex) {\n+      throw new IOException(ex);\n+    }\n+    conn.setUseCaches(false);\n+    conn.setRequestMethod(method);\n+    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n+      conn.setDoOutput(true);\n+    }\n+    conn \u003d configureConnection(conn);\n+    return conn;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection createConnection(URL url, String method)\n      throws IOException {\n    HttpURLConnection conn;\n    try {\n      AuthenticatedURL authUrl \u003d new AuthenticatedURL(new PseudoAuthenticator(),\n          sslFactory);\n      conn \u003d authUrl.openConnection(url, new AuthenticatedURL.Token());\n    } catch (AuthenticationException ex) {\n      throw new IOException(ex);\n    }\n    conn.setUseCaches(false);\n    conn.setRequestMethod(method);\n    if (method.equals(HTTP_POST) || method.equals(HTTP_PUT)) {\n      conn.setDoOutput(true);\n    }\n    conn \u003d configureConnection(conn);\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}