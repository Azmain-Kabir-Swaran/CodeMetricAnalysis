{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataNode.java",
  "functionName": "reconfigurePropertyImpl",
  "functionId": "reconfigurePropertyImpl___property-String__newVal-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
  "functionStartLine": 546,
  "functionEndLine": 624,
  "numCommitsSeen": 358,
  "timeTaken": 2668,
  "changeHistory": [
    "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
    "dfcb331ba3516264398121c9f23af3a79c0509cc"
  ],
  "changeHistoryShort": {
    "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498": "Ybodychange",
    "dfcb331ba3516264398121c9f23af3a79c0509cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14258. Introduce Java Concurrent Package To DataXceiverServer Class. Contributed by BELUGA BEHR.\n",
      "commitDate": "15/02/19 4:32 PM",
      "commitName": "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "11/01/19 10:54 AM",
      "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 35.23,
      "commitsBetweenForRepo": 267,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,79 @@\n   public String reconfigurePropertyImpl(String property, String newVal)\n       throws ReconfigurationException {\n     switch (property) {\n       case DFS_DATANODE_DATA_DIR_KEY: {\n         IOException rootException \u003d null;\n         try {\n           LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n           this.refreshVolumes(newVal);\n           return getConf().get(DFS_DATANODE_DATA_DIR_KEY);\n         } catch (IOException e) {\n           rootException \u003d e;\n         } finally {\n           // Send a full block report to let NN acknowledge the volume changes.\n           try {\n             triggerBlockReport(\n                 new BlockReportOptions.Factory().setIncremental(false).build());\n           } catch (IOException e) {\n             LOG.warn(\"Exception while sending the block report after refreshing\"\n                 + \" volumes {} to {}\", property, newVal, e);\n             if (rootException \u003d\u003d null) {\n               rootException \u003d e;\n             }\n           } finally {\n             if (rootException !\u003d null) {\n               throw new ReconfigurationException(property, newVal,\n                   getConf().get(property), rootException);\n             }\n           }\n         }\n         break;\n       }\n       case DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY: {\n         ReconfigurationException rootException \u003d null;\n         try {\n           LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n           int movers;\n           if (newVal \u003d\u003d null) {\n             // set to default\n             movers \u003d DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT;\n           } else {\n             movers \u003d Integer.parseInt(newVal);\n             if (movers \u003c\u003d 0) {\n               rootException \u003d new ReconfigurationException(\n                   property,\n                   newVal,\n                   getConf().get(property),\n                   new IllegalArgumentException(\n                       \"balancer max concurrent movers must be larger than 0\"));\n             }\n           }\n-          xserver.updateBalancerMaxConcurrentMovers(movers);\n+          boolean success \u003d xserver.updateBalancerMaxConcurrentMovers(movers);\n+          if (!success) {\n+            rootException \u003d new ReconfigurationException(\n+                property,\n+                newVal,\n+                getConf().get(property),\n+                new IllegalArgumentException(\n+                    \"Could not modify concurrent moves thread count\"));\n+          }\n           return Integer.toString(movers);\n         } catch (NumberFormatException nfe) {\n           rootException \u003d new ReconfigurationException(\n               property, newVal, getConf().get(property), nfe);\n         } finally {\n           if (rootException !\u003d null) {\n             LOG.warn(String.format(\n                 \"Exception in updating balancer max concurrent movers %s to %s\",\n                 property, newVal), rootException);\n             throw rootException;\n           }\n         }\n         break;\n       }\n       default:\n         break;\n     }\n     throw new ReconfigurationException(\n         property, newVal, getConf().get(property));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String reconfigurePropertyImpl(String property, String newVal)\n      throws ReconfigurationException {\n    switch (property) {\n      case DFS_DATANODE_DATA_DIR_KEY: {\n        IOException rootException \u003d null;\n        try {\n          LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n          this.refreshVolumes(newVal);\n          return getConf().get(DFS_DATANODE_DATA_DIR_KEY);\n        } catch (IOException e) {\n          rootException \u003d e;\n        } finally {\n          // Send a full block report to let NN acknowledge the volume changes.\n          try {\n            triggerBlockReport(\n                new BlockReportOptions.Factory().setIncremental(false).build());\n          } catch (IOException e) {\n            LOG.warn(\"Exception while sending the block report after refreshing\"\n                + \" volumes {} to {}\", property, newVal, e);\n            if (rootException \u003d\u003d null) {\n              rootException \u003d e;\n            }\n          } finally {\n            if (rootException !\u003d null) {\n              throw new ReconfigurationException(property, newVal,\n                  getConf().get(property), rootException);\n            }\n          }\n        }\n        break;\n      }\n      case DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY: {\n        ReconfigurationException rootException \u003d null;\n        try {\n          LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n          int movers;\n          if (newVal \u003d\u003d null) {\n            // set to default\n            movers \u003d DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT;\n          } else {\n            movers \u003d Integer.parseInt(newVal);\n            if (movers \u003c\u003d 0) {\n              rootException \u003d new ReconfigurationException(\n                  property,\n                  newVal,\n                  getConf().get(property),\n                  new IllegalArgumentException(\n                      \"balancer max concurrent movers must be larger than 0\"));\n            }\n          }\n          boolean success \u003d xserver.updateBalancerMaxConcurrentMovers(movers);\n          if (!success) {\n            rootException \u003d new ReconfigurationException(\n                property,\n                newVal,\n                getConf().get(property),\n                new IllegalArgumentException(\n                    \"Could not modify concurrent moves thread count\"));\n          }\n          return Integer.toString(movers);\n        } catch (NumberFormatException nfe) {\n          rootException \u003d new ReconfigurationException(\n              property, newVal, getConf().get(property), nfe);\n        } finally {\n          if (rootException !\u003d null) {\n            LOG.warn(String.format(\n                \"Exception in updating balancer max concurrent movers %s to %s\",\n                property, newVal), rootException);\n            throw rootException;\n          }\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    throw new ReconfigurationException(\n        property, newVal, getConf().get(property));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
      "extendedDetails": {}
    },
    "dfcb331ba3516264398121c9f23af3a79c0509cc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13076: [SPS]: Addendum. Resolve conflicts after rebasing branch to trunk. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "dfcb331ba3516264398121c9f23af3a79c0509cc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,71 @@\n+  public String reconfigurePropertyImpl(String property, String newVal)\n+      throws ReconfigurationException {\n+    switch (property) {\n+      case DFS_DATANODE_DATA_DIR_KEY: {\n+        IOException rootException \u003d null;\n+        try {\n+          LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n+          this.refreshVolumes(newVal);\n+          return getConf().get(DFS_DATANODE_DATA_DIR_KEY);\n+        } catch (IOException e) {\n+          rootException \u003d e;\n+        } finally {\n+          // Send a full block report to let NN acknowledge the volume changes.\n+          try {\n+            triggerBlockReport(\n+                new BlockReportOptions.Factory().setIncremental(false).build());\n+          } catch (IOException e) {\n+            LOG.warn(\"Exception while sending the block report after refreshing\"\n+                + \" volumes {} to {}\", property, newVal, e);\n+            if (rootException \u003d\u003d null) {\n+              rootException \u003d e;\n+            }\n+          } finally {\n+            if (rootException !\u003d null) {\n+              throw new ReconfigurationException(property, newVal,\n+                  getConf().get(property), rootException);\n+            }\n+          }\n+        }\n+        break;\n+      }\n+      case DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY: {\n+        ReconfigurationException rootException \u003d null;\n+        try {\n+          LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n+          int movers;\n+          if (newVal \u003d\u003d null) {\n+            // set to default\n+            movers \u003d DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT;\n+          } else {\n+            movers \u003d Integer.parseInt(newVal);\n+            if (movers \u003c\u003d 0) {\n+              rootException \u003d new ReconfigurationException(\n+                  property,\n+                  newVal,\n+                  getConf().get(property),\n+                  new IllegalArgumentException(\n+                      \"balancer max concurrent movers must be larger than 0\"));\n+            }\n+          }\n+          xserver.updateBalancerMaxConcurrentMovers(movers);\n+          return Integer.toString(movers);\n+        } catch (NumberFormatException nfe) {\n+          rootException \u003d new ReconfigurationException(\n+              property, newVal, getConf().get(property), nfe);\n+        } finally {\n+          if (rootException !\u003d null) {\n+            LOG.warn(String.format(\n+                \"Exception in updating balancer max concurrent movers %s to %s\",\n+                property, newVal), rootException);\n+            throw rootException;\n+          }\n+        }\n+        break;\n+      }\n+      default:\n+        break;\n+    }\n+    throw new ReconfigurationException(\n+        property, newVal, getConf().get(property));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String reconfigurePropertyImpl(String property, String newVal)\n      throws ReconfigurationException {\n    switch (property) {\n      case DFS_DATANODE_DATA_DIR_KEY: {\n        IOException rootException \u003d null;\n        try {\n          LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n          this.refreshVolumes(newVal);\n          return getConf().get(DFS_DATANODE_DATA_DIR_KEY);\n        } catch (IOException e) {\n          rootException \u003d e;\n        } finally {\n          // Send a full block report to let NN acknowledge the volume changes.\n          try {\n            triggerBlockReport(\n                new BlockReportOptions.Factory().setIncremental(false).build());\n          } catch (IOException e) {\n            LOG.warn(\"Exception while sending the block report after refreshing\"\n                + \" volumes {} to {}\", property, newVal, e);\n            if (rootException \u003d\u003d null) {\n              rootException \u003d e;\n            }\n          } finally {\n            if (rootException !\u003d null) {\n              throw new ReconfigurationException(property, newVal,\n                  getConf().get(property), rootException);\n            }\n          }\n        }\n        break;\n      }\n      case DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY: {\n        ReconfigurationException rootException \u003d null;\n        try {\n          LOG.info(\"Reconfiguring {} to {}\", property, newVal);\n          int movers;\n          if (newVal \u003d\u003d null) {\n            // set to default\n            movers \u003d DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT;\n          } else {\n            movers \u003d Integer.parseInt(newVal);\n            if (movers \u003c\u003d 0) {\n              rootException \u003d new ReconfigurationException(\n                  property,\n                  newVal,\n                  getConf().get(property),\n                  new IllegalArgumentException(\n                      \"balancer max concurrent movers must be larger than 0\"));\n            }\n          }\n          xserver.updateBalancerMaxConcurrentMovers(movers);\n          return Integer.toString(movers);\n        } catch (NumberFormatException nfe) {\n          rootException \u003d new ReconfigurationException(\n              property, newVal, getConf().get(property), nfe);\n        } finally {\n          if (rootException !\u003d null) {\n            LOG.warn(String.format(\n                \"Exception in updating balancer max concurrent movers %s to %s\",\n                property, newVal), rootException);\n            throw rootException;\n          }\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    throw new ReconfigurationException(\n        property, newVal, getConf().get(property));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}