{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "handleContainerStop",
  "functionId": "handleContainerStop___containerId-ContainerId__env-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 1236,
  "functionEndLine": 1273,
  "numCommitsSeen": 163,
  "timeTaken": 5205,
  "changeHistory": [
    "efdea85ad1cd4cc5a2a306898dbdb2c14b952d02",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "907919d28c1b7e4496d189b46ecbb86a10d41339",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395"
  ],
  "changeHistoryShort": {
    "efdea85ad1cd4cc5a2a306898dbdb2c14b952d02": "Ybodychange",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": "Ymultichange(Yparameterchange,Ybodychange)",
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ybodychange",
    "907919d28c1b7e4496d189b46ecbb86a10d41339": "Ybodychange",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efdea85ad1cd4cc5a2a306898dbdb2c14b952d02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8791. Trim docker inspect output for line feed for STOPSIGNAL parsing.\n           Contributed by Chandni Singh\n",
      "commitDate": "19/09/18 10:16 AM",
      "commitName": "efdea85ad1cd4cc5a2a306898dbdb2c14b952d02",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/09/18 1:36 PM",
      "commitNameOld": "2df0a8dcb3dfde15d216481cc1296d97d2cb5d43",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void handleContainerStop(ContainerId containerId,\n       Map\u003cString, String\u003e env)\n       throws ContainerExecutionException {\n \n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\n     String stopSignal \u003d ContainerExecutor.Signal.TERM.toString();\n     char delimiter \u003d \u0027,\u0027;\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerId.toString()).get(new String[] {\n             DockerInspectCommand.STATUS_TEMPLATE,\n             DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);\n     try {\n-      String output \u003d executeDockerInspect(containerId, inspectCommand);\n+      String output \u003d executeDockerInspect(containerId, inspectCommand).trim();\n \n       if (!output.isEmpty()) {\n         String[] statusAndSignal \u003d StringUtils.split(output, delimiter);\n         containerStatus \u003d DockerCommandExecutor.parseContainerStatus(\n             statusAndSignal[0]);\n         if (statusAndSignal.length \u003e 1) {\n           stopSignal \u003d statusAndSignal[1];\n         }\n       }\n     } catch (ContainerExecutionException | PrivilegedOperationException e) {\n       LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\n       return;\n     }\n \n     if (DockerCommandExecutor.isStoppable(containerStatus)) {\n \n       DockerKillCommand dockerStopCommand \u003d new DockerKillCommand(\n           containerId.toString()).setSignal(stopSignal);\n       DockerCommandExecutor.executeDockerCommand(dockerStopCommand,\n           containerId.toString(), env, privilegedOperationExecutor, false,\n           nmContext);\n     } else {\n       LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerStop(ContainerId containerId,\n      Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\n    String stopSignal \u003d ContainerExecutor.Signal.TERM.toString();\n    char delimiter \u003d \u0027,\u0027;\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId.toString()).get(new String[] {\n            DockerInspectCommand.STATUS_TEMPLATE,\n            DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);\n    try {\n      String output \u003d executeDockerInspect(containerId, inspectCommand).trim();\n\n      if (!output.isEmpty()) {\n        String[] statusAndSignal \u003d StringUtils.split(output, delimiter);\n        containerStatus \u003d DockerCommandExecutor.parseContainerStatus(\n            statusAndSignal[0]);\n        if (statusAndSignal.length \u003e 1) {\n          stopSignal \u003d statusAndSignal[1];\n        }\n      }\n    } catch (ContainerExecutionException | PrivilegedOperationException e) {\n      LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\n      return;\n    }\n\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n\n      DockerKillCommand dockerStopCommand \u003d new DockerKillCommand(\n          containerId.toString()).setSignal(stopSignal);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand,\n          containerId.toString(), env, privilegedOperationExecutor, false,\n          nmContext);\n    } else {\n      LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
      "commitDate": "07/09/18 5:18 PM",
      "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
          "commitDate": "07/09/18 5:18 PM",
          "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "05/09/18 5:47 AM",
          "commitNameOld": "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
          "commitAuthorOld": "Shane Kumpf",
          "daysBetweenCommits": 2.48,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,39 @@\n-  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n+  private void handleContainerStop(ContainerId containerId,\n+      Map\u003cString, String\u003e env)\n       throws ContainerExecutionException {\n+\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-        DockerCommandExecutor.getContainerStatus(containerId,\n-            privilegedOperationExecutor, nmContext);\n-    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n-      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n-          containerId).setGracePeriod(dockerStopGracePeriod);\n-      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n-          env, privilegedOperationExecutor, false, nmContext);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"Container status is \" + containerStatus.getName()\n-                + \", skipping stop - \" + containerId);\n+        DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\n+    String stopSignal \u003d ContainerExecutor.Signal.TERM.toString();\n+    char delimiter \u003d \u0027,\u0027;\n+    DockerInspectCommand inspectCommand \u003d\n+        new DockerInspectCommand(containerId.toString()).get(new String[] {\n+            DockerInspectCommand.STATUS_TEMPLATE,\n+            DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);\n+    try {\n+      String output \u003d executeDockerInspect(containerId, inspectCommand);\n+\n+      if (!output.isEmpty()) {\n+        String[] statusAndSignal \u003d StringUtils.split(output, delimiter);\n+        containerStatus \u003d DockerCommandExecutor.parseContainerStatus(\n+            statusAndSignal[0]);\n+        if (statusAndSignal.length \u003e 1) {\n+          stopSignal \u003d statusAndSignal[1];\n+        }\n       }\n+    } catch (ContainerExecutionException | PrivilegedOperationException e) {\n+      LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\n+      return;\n+    }\n+\n+    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n+\n+      DockerKillCommand dockerStopCommand \u003d new DockerKillCommand(\n+          containerId.toString()).setSignal(stopSignal);\n+      DockerCommandExecutor.executeDockerCommand(dockerStopCommand,\n+          containerId.toString(), env, privilegedOperationExecutor, false,\n+          nmContext);\n+    } else {\n+      LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleContainerStop(ContainerId containerId,\n      Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\n    String stopSignal \u003d ContainerExecutor.Signal.TERM.toString();\n    char delimiter \u003d \u0027,\u0027;\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId.toString()).get(new String[] {\n            DockerInspectCommand.STATUS_TEMPLATE,\n            DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);\n    try {\n      String output \u003d executeDockerInspect(containerId, inspectCommand);\n\n      if (!output.isEmpty()) {\n        String[] statusAndSignal \u003d StringUtils.split(output, delimiter);\n        containerStatus \u003d DockerCommandExecutor.parseContainerStatus(\n            statusAndSignal[0]);\n        if (statusAndSignal.length \u003e 1) {\n          stopSignal \u003d statusAndSignal[1];\n        }\n      }\n    } catch (ContainerExecutionException | PrivilegedOperationException e) {\n      LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\n      return;\n    }\n\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n\n      DockerKillCommand dockerStopCommand \u003d new DockerKillCommand(\n          containerId.toString()).setSignal(stopSignal);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand,\n          containerId.toString(), env, privilegedOperationExecutor, false,\n          nmContext);\n    } else {\n      LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[containerId-String, env-Map\u003cString,String\u003e]",
            "newValue": "[containerId-ContainerId, env-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
          "commitDate": "07/09/18 5:18 PM",
          "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "05/09/18 5:47 AM",
          "commitNameOld": "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
          "commitAuthorOld": "Shane Kumpf",
          "daysBetweenCommits": 2.48,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,39 @@\n-  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n+  private void handleContainerStop(ContainerId containerId,\n+      Map\u003cString, String\u003e env)\n       throws ContainerExecutionException {\n+\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-        DockerCommandExecutor.getContainerStatus(containerId,\n-            privilegedOperationExecutor, nmContext);\n-    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n-      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n-          containerId).setGracePeriod(dockerStopGracePeriod);\n-      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n-          env, privilegedOperationExecutor, false, nmContext);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"Container status is \" + containerStatus.getName()\n-                + \", skipping stop - \" + containerId);\n+        DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\n+    String stopSignal \u003d ContainerExecutor.Signal.TERM.toString();\n+    char delimiter \u003d \u0027,\u0027;\n+    DockerInspectCommand inspectCommand \u003d\n+        new DockerInspectCommand(containerId.toString()).get(new String[] {\n+            DockerInspectCommand.STATUS_TEMPLATE,\n+            DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);\n+    try {\n+      String output \u003d executeDockerInspect(containerId, inspectCommand);\n+\n+      if (!output.isEmpty()) {\n+        String[] statusAndSignal \u003d StringUtils.split(output, delimiter);\n+        containerStatus \u003d DockerCommandExecutor.parseContainerStatus(\n+            statusAndSignal[0]);\n+        if (statusAndSignal.length \u003e 1) {\n+          stopSignal \u003d statusAndSignal[1];\n+        }\n       }\n+    } catch (ContainerExecutionException | PrivilegedOperationException e) {\n+      LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\n+      return;\n+    }\n+\n+    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n+\n+      DockerKillCommand dockerStopCommand \u003d new DockerKillCommand(\n+          containerId.toString()).setSignal(stopSignal);\n+      DockerCommandExecutor.executeDockerCommand(dockerStopCommand,\n+          containerId.toString(), env, privilegedOperationExecutor, false,\n+          nmContext);\n+    } else {\n+      LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleContainerStop(ContainerId containerId,\n      Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.DockerContainerStatus.UNKNOWN;\n    String stopSignal \u003d ContainerExecutor.Signal.TERM.toString();\n    char delimiter \u003d \u0027,\u0027;\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId.toString()).get(new String[] {\n            DockerInspectCommand.STATUS_TEMPLATE,\n            DockerInspectCommand.STOPSIGNAL_TEMPLATE}, delimiter);\n    try {\n      String output \u003d executeDockerInspect(containerId, inspectCommand);\n\n      if (!output.isEmpty()) {\n        String[] statusAndSignal \u003d StringUtils.split(output, delimiter);\n        containerStatus \u003d DockerCommandExecutor.parseContainerStatus(\n            statusAndSignal[0]);\n        if (statusAndSignal.length \u003e 1) {\n          stopSignal \u003d statusAndSignal[1];\n        }\n      }\n    } catch (ContainerExecutionException | PrivilegedOperationException e) {\n      LOG.debug(\"{} inspect failed, skipping stop\", containerId, e);\n      return;\n    }\n\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n\n      DockerKillCommand dockerStopCommand \u003d new DockerKillCommand(\n          containerId.toString()).setSignal(stopSignal);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand,\n          containerId.toString(), env, privilegedOperationExecutor, false,\n          nmContext);\n    } else {\n      LOG.debug(\"{} status is {}, skipping stop\", containerId, containerStatus);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/07/18 5:12 PM",
      "commitNameOld": "8688a0c7f88f2adf1a7fce695e06f3dd1f745080",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n       throws ContainerExecutionException {\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-        DockerCommandExecutor.getContainerStatus(containerId, conf,\n+        DockerCommandExecutor.getContainerStatus(containerId,\n             privilegedOperationExecutor, nmContext);\n     if (DockerCommandExecutor.isStoppable(containerStatus)) {\n       DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n           containerId).setGracePeriod(dockerStopGracePeriod);\n       DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n-          env, conf, privilegedOperationExecutor, false, nmContext);\n+          env, privilegedOperationExecutor, false, nmContext);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"Container status is \" + containerStatus.getName()\n                 + \", skipping stop - \" + containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerId,\n            privilegedOperationExecutor, nmContext);\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n          containerId).setGracePeriod(dockerStopGracePeriod);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n          env, privilegedOperationExecutor, false, nmContext);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Container status is \" + containerStatus.getName()\n                + \", skipping stop - \" + containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/04/18 11:24 AM",
      "commitNameOld": "933477e9e0526e2ed81ea454f8806de31981822a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n       throws ContainerExecutionException {\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.getContainerStatus(containerId, conf,\n-            privilegedOperationExecutor);\n+            privilegedOperationExecutor, nmContext);\n     if (DockerCommandExecutor.isStoppable(containerStatus)) {\n       DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n           containerId).setGracePeriod(dockerStopGracePeriod);\n       DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n-          env, conf, privilegedOperationExecutor, false);\n+          env, conf, privilegedOperationExecutor, false, nmContext);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"Container status is \" + containerStatus.getName()\n                 + \", skipping stop - \" + containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerId, conf,\n            privilegedOperationExecutor, nmContext);\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n          containerId).setGracePeriod(dockerStopGracePeriod);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n          env, conf, privilegedOperationExecutor, false, nmContext);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Container status is \" + containerStatus.getName()\n                + \", skipping stop - \" + containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "907919d28c1b7e4496d189b46ecbb86a10d41339": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7667. Docker Stop grace period should be configurable. Contributed by Eric Badger\n",
      "commitDate": "09/04/18 3:19 PM",
      "commitName": "907919d28c1b7e4496d189b46ecbb86a10d41339",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "19/03/18 2:59 PM",
      "commitNameOld": "f480367af68e06ed17b8018092c9987a13bb9f63",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 248,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n       throws ContainerExecutionException {\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.getContainerStatus(containerId, conf,\n             privilegedOperationExecutor);\n     if (DockerCommandExecutor.isStoppable(containerStatus)) {\n-      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(containerId);\n+      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n+          containerId).setGracePeriod(dockerStopGracePeriod);\n       DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n           env, conf, privilegedOperationExecutor, false);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"Container status is \" + containerStatus.getName()\n                 + \", skipping stop - \" + containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerId, conf,\n            privilegedOperationExecutor);\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(\n          containerId).setGracePeriod(dockerStopGracePeriod);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n          env, conf, privilegedOperationExecutor, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Container status is \" + containerStatus.getName()\n                + \", skipping stop - \" + containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5366. Improve signal handling and delete delay for Docker on Yarn.\n           (Contributed by Shane Kumpf)\n",
      "commitDate": "12/01/18 10:41 AM",
      "commitName": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,17 @@\n+  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n+      throws ContainerExecutionException {\n+    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n+        DockerCommandExecutor.getContainerStatus(containerId, conf,\n+            privilegedOperationExecutor);\n+    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n+      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(containerId);\n+      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n+          env, conf, privilegedOperationExecutor, false);\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"Container status is \" + containerStatus.getName()\n+                + \", skipping stop - \" + containerId);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerStop(String containerId, Map\u003cString, String\u003e env)\n      throws ContainerExecutionException {\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerId, conf,\n            privilegedOperationExecutor);\n    if (DockerCommandExecutor.isStoppable(containerStatus)) {\n      DockerStopCommand dockerStopCommand \u003d new DockerStopCommand(containerId);\n      DockerCommandExecutor.executeDockerCommand(dockerStopCommand, containerId,\n          env, conf, privilegedOperationExecutor, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Container status is \" + containerStatus.getName()\n                + \", skipping stop - \" + containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}