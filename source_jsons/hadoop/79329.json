{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileUtil.java",
  "functionName": "unTarUsingTar",
  "functionId": "unTarUsingTar___inFile-File__untarDir-File__gzipped-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
  "functionStartLine": 890,
  "functionEndLine": 916,
  "numCommitsSeen": 52,
  "timeTaken": 2999,
  "changeHistory": [
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
    "7288b08330001102f944124d18e02bf0585d3e96",
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
    "71a57ded39a605166d616fe68f36017cdb0abe3e"
  ],
  "changeHistoryShort": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": "Ybodychange",
    "7288b08330001102f944124d18e02bf0585d3e96": "Ybodychange",
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662": "Ybodychange",
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34": "Ybodychange",
    "71a57ded39a605166d616fe68f36017cdb0abe3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16029. Consecutive StringBuilder.append can be reused. Contributed by Ayush Saxena.\n",
      "commitDate": "11/01/19 10:54 AM",
      "commitName": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "27/12/18 10:38 PM",
      "commitNameOld": "57198bc51122a36db8cb4788fcb7b55edc788b3b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 14.51,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private static void unTarUsingTar(File inFile, File untarDir,\n       boolean gzipped) throws IOException {\n     StringBuffer untarCommand \u003d new StringBuffer();\n     if (gzipped) {\n-      untarCommand.append(\" gzip -dc \u0027\");\n-      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n-      untarCommand.append(\"\u0027 | (\");\n+      untarCommand.append(\" gzip -dc \u0027\")\n+          .append(FileUtil.makeSecureShellPath(inFile))\n+          .append(\"\u0027 | (\");\n     }\n-    untarCommand.append(\"cd \u0027\");\n-    untarCommand.append(FileUtil.makeSecureShellPath(untarDir));\n-    untarCommand.append(\"\u0027 \u0026\u0026 \");\n-    untarCommand.append(\"tar -xf \");\n+    untarCommand.append(\"cd \u0027\")\n+        .append(FileUtil.makeSecureShellPath(untarDir))\n+        .append(\"\u0027 \u0026\u0026 \")\n+        .append(\"tar -xf \");\n \n     if (gzipped) {\n       untarCommand.append(\" -)\");\n     } else {\n       untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n     }\n     String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n     ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n     shexec.execute();\n     int exitcode \u003d shexec.getExitCode();\n     if (exitcode !\u003d 0) {\n       throw new IOException(\"Error untarring file \" + inFile +\n                   \". Tar process exited with exit code \" + exitcode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unTarUsingTar(File inFile, File untarDir,\n      boolean gzipped) throws IOException {\n    StringBuffer untarCommand \u003d new StringBuffer();\n    if (gzipped) {\n      untarCommand.append(\" gzip -dc \u0027\")\n          .append(FileUtil.makeSecureShellPath(inFile))\n          .append(\"\u0027 | (\");\n    }\n    untarCommand.append(\"cd \u0027\")\n        .append(FileUtil.makeSecureShellPath(untarDir))\n        .append(\"\u0027 \u0026\u0026 \")\n        .append(\"tar -xf \");\n\n    if (gzipped) {\n      untarCommand.append(\" -)\");\n    } else {\n      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n    }\n    String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n    shexec.execute();\n    int exitcode \u003d shexec.getExitCode();\n    if (exitcode !\u003d 0) {\n      throw new IOException(\"Error untarring file \" + inFile +\n                  \". Tar process exited with exit code \" + exitcode);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "7288b08330001102f944124d18e02bf0585d3e96": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "31/01/18 7:39 AM",
      "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "30/01/18 6:34 AM",
      "commitNameOld": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private static void unTarUsingTar(File inFile, File untarDir,\n       boolean gzipped) throws IOException {\n     StringBuffer untarCommand \u003d new StringBuffer();\n     if (gzipped) {\n       untarCommand.append(\" gzip -dc \u0027\");\n-      untarCommand.append(FileUtil.makeShellPath(inFile));\n+      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n       untarCommand.append(\"\u0027 | (\");\n     }\n     untarCommand.append(\"cd \u0027\");\n-    untarCommand.append(FileUtil.makeShellPath(untarDir));\n-    untarCommand.append(\"\u0027 ; \");\n+    untarCommand.append(FileUtil.makeSecureShellPath(untarDir));\n+    untarCommand.append(\"\u0027 \u0026\u0026 \");\n     untarCommand.append(\"tar -xf \");\n \n     if (gzipped) {\n       untarCommand.append(\" -)\");\n     } else {\n-      untarCommand.append(FileUtil.makeShellPath(inFile));\n+      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n     }\n     String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n     ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n     shexec.execute();\n     int exitcode \u003d shexec.getExitCode();\n     if (exitcode !\u003d 0) {\n       throw new IOException(\"Error untarring file \" + inFile +\n                   \". Tar process exited with exit code \" + exitcode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unTarUsingTar(File inFile, File untarDir,\n      boolean gzipped) throws IOException {\n    StringBuffer untarCommand \u003d new StringBuffer();\n    if (gzipped) {\n      untarCommand.append(\" gzip -dc \u0027\");\n      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n      untarCommand.append(\"\u0027 | (\");\n    }\n    untarCommand.append(\"cd \u0027\");\n    untarCommand.append(FileUtil.makeSecureShellPath(untarDir));\n    untarCommand.append(\"\u0027 \u0026\u0026 \");\n    untarCommand.append(\"tar -xf \");\n\n    if (gzipped) {\n      untarCommand.append(\" -)\");\n    } else {\n      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n    }\n    String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n    shexec.execute();\n    int exitcode \u003d shexec.getExitCode();\n    if (exitcode !\u003d 0) {\n      throw new IOException(\"Error untarring file \" + inFile +\n                  \". Tar process exited with exit code \" + exitcode);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
      "commitDate": "30/01/18 6:34 AM",
      "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/01/18 11:25 AM",
      "commitNameOld": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 3.8,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private static void unTarUsingTar(File inFile, File untarDir,\n       boolean gzipped) throws IOException {\n     StringBuffer untarCommand \u003d new StringBuffer();\n     if (gzipped) {\n       untarCommand.append(\" gzip -dc \u0027\");\n-      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n+      untarCommand.append(FileUtil.makeShellPath(inFile));\n       untarCommand.append(\"\u0027 | (\");\n     }\n     untarCommand.append(\"cd \u0027\");\n-    untarCommand.append(FileUtil.makeSecureShellPath(untarDir));\n-    untarCommand.append(\"\u0027 \u0026\u0026 \");\n+    untarCommand.append(FileUtil.makeShellPath(untarDir));\n+    untarCommand.append(\"\u0027 ; \");\n     untarCommand.append(\"tar -xf \");\n \n     if (gzipped) {\n       untarCommand.append(\" -)\");\n     } else {\n-      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n+      untarCommand.append(FileUtil.makeShellPath(inFile));\n     }\n     String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n     ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n     shexec.execute();\n     int exitcode \u003d shexec.getExitCode();\n     if (exitcode !\u003d 0) {\n       throw new IOException(\"Error untarring file \" + inFile +\n                   \". Tar process exited with exit code \" + exitcode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unTarUsingTar(File inFile, File untarDir,\n      boolean gzipped) throws IOException {\n    StringBuffer untarCommand \u003d new StringBuffer();\n    if (gzipped) {\n      untarCommand.append(\" gzip -dc \u0027\");\n      untarCommand.append(FileUtil.makeShellPath(inFile));\n      untarCommand.append(\"\u0027 | (\");\n    }\n    untarCommand.append(\"cd \u0027\");\n    untarCommand.append(FileUtil.makeShellPath(untarDir));\n    untarCommand.append(\"\u0027 ; \");\n    untarCommand.append(\"tar -xf \");\n\n    if (gzipped) {\n      untarCommand.append(\" -)\");\n    } else {\n      untarCommand.append(FileUtil.makeShellPath(inFile));\n    }\n    String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n    shexec.execute();\n    int exitcode \u003d shexec.getExitCode();\n    if (exitcode !\u003d 0) {\n      throw new IOException(\"Error untarring file \" + inFile +\n                  \". Tar process exited with exit code \" + exitcode);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "26/01/18 11:25 AM",
      "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "14/12/17 8:18 AM",
      "commitNameOld": "f8af0e2feb9f45aeaa9711dbf93115ffb1a07e5d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 43.13,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private static void unTarUsingTar(File inFile, File untarDir,\n       boolean gzipped) throws IOException {\n     StringBuffer untarCommand \u003d new StringBuffer();\n     if (gzipped) {\n       untarCommand.append(\" gzip -dc \u0027\");\n-      untarCommand.append(FileUtil.makeShellPath(inFile));\n+      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n       untarCommand.append(\"\u0027 | (\");\n     }\n     untarCommand.append(\"cd \u0027\");\n-    untarCommand.append(FileUtil.makeShellPath(untarDir));\n-    untarCommand.append(\"\u0027 ; \");\n+    untarCommand.append(FileUtil.makeSecureShellPath(untarDir));\n+    untarCommand.append(\"\u0027 \u0026\u0026 \");\n     untarCommand.append(\"tar -xf \");\n \n     if (gzipped) {\n       untarCommand.append(\" -)\");\n     } else {\n-      untarCommand.append(FileUtil.makeShellPath(inFile));\n+      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n     }\n     String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n     ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n     shexec.execute();\n     int exitcode \u003d shexec.getExitCode();\n     if (exitcode !\u003d 0) {\n       throw new IOException(\"Error untarring file \" + inFile +\n                   \". Tar process exited with exit code \" + exitcode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unTarUsingTar(File inFile, File untarDir,\n      boolean gzipped) throws IOException {\n    StringBuffer untarCommand \u003d new StringBuffer();\n    if (gzipped) {\n      untarCommand.append(\" gzip -dc \u0027\");\n      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n      untarCommand.append(\"\u0027 | (\");\n    }\n    untarCommand.append(\"cd \u0027\");\n    untarCommand.append(FileUtil.makeSecureShellPath(untarDir));\n    untarCommand.append(\"\u0027 \u0026\u0026 \");\n    untarCommand.append(\"tar -xf \");\n\n    if (gzipped) {\n      untarCommand.append(\" -)\");\n    } else {\n      untarCommand.append(FileUtil.makeSecureShellPath(inFile));\n    }\n    String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n    shexec.execute();\n    int exitcode \u003d shexec.getExitCode();\n    if (exitcode !\u003d 0) {\n      throw new IOException(\"Error untarring file \" + inFile +\n                  \". Tar process exited with exit code \" + exitcode);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "71a57ded39a605166d616fe68f36017cdb0abe3e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9264. Port change to use Java untar API on Windows from branch-1-win to trunk. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1441172 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/13 12:13 PM",
      "commitName": "71a57ded39a605166d616fe68f36017cdb0abe3e",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,27 @@\n+  private static void unTarUsingTar(File inFile, File untarDir,\n+      boolean gzipped) throws IOException {\n+    StringBuffer untarCommand \u003d new StringBuffer();\n+    if (gzipped) {\n+      untarCommand.append(\" gzip -dc \u0027\");\n+      untarCommand.append(FileUtil.makeShellPath(inFile));\n+      untarCommand.append(\"\u0027 | (\");\n+    } \n+    untarCommand.append(\"cd \u0027\");\n+    untarCommand.append(FileUtil.makeShellPath(untarDir)); \n+    untarCommand.append(\"\u0027 ; \");\n+    untarCommand.append(\"tar -xf \");\n+    \n+    if (gzipped) {\n+      untarCommand.append(\" -)\");\n+    } else {\n+      untarCommand.append(FileUtil.makeShellPath(inFile));\n+    }\n+    String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n+    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n+    shexec.execute();\n+    int exitcode \u003d shexec.getExitCode();\n+    if (exitcode !\u003d 0) {\n+      throw new IOException(\"Error untarring file \" + inFile + \n+                  \". Tar process exited with exit code \" + exitcode);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unTarUsingTar(File inFile, File untarDir,\n      boolean gzipped) throws IOException {\n    StringBuffer untarCommand \u003d new StringBuffer();\n    if (gzipped) {\n      untarCommand.append(\" gzip -dc \u0027\");\n      untarCommand.append(FileUtil.makeShellPath(inFile));\n      untarCommand.append(\"\u0027 | (\");\n    } \n    untarCommand.append(\"cd \u0027\");\n    untarCommand.append(FileUtil.makeShellPath(untarDir)); \n    untarCommand.append(\"\u0027 ; \");\n    untarCommand.append(\"tar -xf \");\n    \n    if (gzipped) {\n      untarCommand.append(\" -)\");\n    } else {\n      untarCommand.append(FileUtil.makeShellPath(inFile));\n    }\n    String[] shellCmd \u003d { \"bash\", \"-c\", untarCommand.toString() };\n    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(shellCmd);\n    shexec.execute();\n    int exitcode \u003d shexec.getExitCode();\n    if (exitcode !\u003d 0) {\n      throw new IOException(\"Error untarring file \" + inFile + \n                  \". Tar process exited with exit code \" + exitcode);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java"
    }
  }
}