{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLeveldbStateStoreService.java",
  "functionName": "loadLogDeleterState",
  "functionId": "loadLogDeleterState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
  "functionStartLine": 1353,
  "functionEndLine": 1388,
  "numCommitsSeen": 43,
  "timeTaken": 2726,
  "changeHistory": [
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "04f5ef18f7877ce30b12b1a3c1e851c420531b72"
  ],
  "changeHistoryShort": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "04f5ef18f7877ce30b12b1a3c1e851c420531b72": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/05/16 7:10 PM",
      "commitNameOld": "d464f4d1c4dec483852fc8c0496787cba0af8f57",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 33.83,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public RecoveredLogDeleterState loadLogDeleterState() throws IOException {\n     RecoveredLogDeleterState state \u003d new RecoveredLogDeleterState();\n     state.logDeleterMap \u003d new HashMap\u003cApplicationId, LogDeleterProto\u003e();\n     LeveldbIterator iter \u003d null;\n     try {\n       iter \u003d new LeveldbIterator(db);\n       iter.seek(bytes(LOG_DELETER_KEY_PREFIX));\n       final int logDeleterKeyPrefixLength \u003d LOG_DELETER_KEY_PREFIX.length();\n       while (iter.hasNext()) {\n         Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n         String fullKey \u003d asString(entry.getKey());\n         if (!fullKey.startsWith(LOG_DELETER_KEY_PREFIX)) {\n           break;\n         }\n \n         String appIdStr \u003d fullKey.substring(logDeleterKeyPrefixLength);\n         ApplicationId appId \u003d null;\n         try {\n-          appId \u003d ConverterUtils.toApplicationId(appIdStr);\n+          appId \u003d ApplicationId.fromString(appIdStr);\n         } catch (IllegalArgumentException e) {\n           LOG.warn(\"Skipping unknown log deleter key \" + fullKey);\n           continue;\n         }\n \n         LogDeleterProto proto \u003d LogDeleterProto.parseFrom(entry.getValue());\n         state.logDeleterMap.put(appId, proto);\n       }\n     } catch (DBException e) {\n       throw new IOException(e);\n     } finally {\n       if (iter !\u003d null) {\n         iter.close();\n       }\n     }\n     return state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RecoveredLogDeleterState loadLogDeleterState() throws IOException {\n    RecoveredLogDeleterState state \u003d new RecoveredLogDeleterState();\n    state.logDeleterMap \u003d new HashMap\u003cApplicationId, LogDeleterProto\u003e();\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(LOG_DELETER_KEY_PREFIX));\n      final int logDeleterKeyPrefixLength \u003d LOG_DELETER_KEY_PREFIX.length();\n      while (iter.hasNext()) {\n        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n        String fullKey \u003d asString(entry.getKey());\n        if (!fullKey.startsWith(LOG_DELETER_KEY_PREFIX)) {\n          break;\n        }\n\n        String appIdStr \u003d fullKey.substring(logDeleterKeyPrefixLength);\n        ApplicationId appId \u003d null;\n        try {\n          appId \u003d ApplicationId.fromString(appIdStr);\n        } catch (IllegalArgumentException e) {\n          LOG.warn(\"Skipping unknown log deleter key \" + fullKey);\n          continue;\n        }\n\n        LogDeleterProto proto \u003d LogDeleterProto.parseFrom(entry.getValue());\n        state.logDeleterMap.put(appId, proto);\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    return state;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "04f5ef18f7877ce30b12b1a3c1e851c420531b72": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2079. Recover NonAggregatingLogHandler state upon nodemanager restart. (Contributed by Jason Lowe)\n",
      "commitDate": "12/02/15 11:46 AM",
      "commitName": "04f5ef18f7877ce30b12b1a3c1e851c420531b72",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,36 @@\n+  public RecoveredLogDeleterState loadLogDeleterState() throws IOException {\n+    RecoveredLogDeleterState state \u003d new RecoveredLogDeleterState();\n+    state.logDeleterMap \u003d new HashMap\u003cApplicationId, LogDeleterProto\u003e();\n+    LeveldbIterator iter \u003d null;\n+    try {\n+      iter \u003d new LeveldbIterator(db);\n+      iter.seek(bytes(LOG_DELETER_KEY_PREFIX));\n+      final int logDeleterKeyPrefixLength \u003d LOG_DELETER_KEY_PREFIX.length();\n+      while (iter.hasNext()) {\n+        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n+        String fullKey \u003d asString(entry.getKey());\n+        if (!fullKey.startsWith(LOG_DELETER_KEY_PREFIX)) {\n+          break;\n+        }\n+\n+        String appIdStr \u003d fullKey.substring(logDeleterKeyPrefixLength);\n+        ApplicationId appId \u003d null;\n+        try {\n+          appId \u003d ConverterUtils.toApplicationId(appIdStr);\n+        } catch (IllegalArgumentException e) {\n+          LOG.warn(\"Skipping unknown log deleter key \" + fullKey);\n+          continue;\n+        }\n+\n+        LogDeleterProto proto \u003d LogDeleterProto.parseFrom(entry.getValue());\n+        state.logDeleterMap.put(appId, proto);\n+      }\n+    } catch (DBException e) {\n+      throw new IOException(e);\n+    } finally {\n+      if (iter !\u003d null) {\n+        iter.close();\n+      }\n+    }\n+    return state;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RecoveredLogDeleterState loadLogDeleterState() throws IOException {\n    RecoveredLogDeleterState state \u003d new RecoveredLogDeleterState();\n    state.logDeleterMap \u003d new HashMap\u003cApplicationId, LogDeleterProto\u003e();\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(LOG_DELETER_KEY_PREFIX));\n      final int logDeleterKeyPrefixLength \u003d LOG_DELETER_KEY_PREFIX.length();\n      while (iter.hasNext()) {\n        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n        String fullKey \u003d asString(entry.getKey());\n        if (!fullKey.startsWith(LOG_DELETER_KEY_PREFIX)) {\n          break;\n        }\n\n        String appIdStr \u003d fullKey.substring(logDeleterKeyPrefixLength);\n        ApplicationId appId \u003d null;\n        try {\n          appId \u003d ConverterUtils.toApplicationId(appIdStr);\n        } catch (IllegalArgumentException e) {\n          LOG.warn(\"Skipping unknown log deleter key \" + fullKey);\n          continue;\n        }\n\n        LogDeleterProto proto \u003d LogDeleterProto.parseFrom(entry.getValue());\n        state.logDeleterMap.put(appId, proto);\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    return state;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java"
    }
  }
}