{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "completedContainerInternal",
  "functionId": "completedContainerInternal___rmContainer-RMContainer__containerStatus-ContainerStatus__event-RMContainerEventType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2124,
  "functionEndLine": 2154,
  "numCommitsSeen": 805,
  "timeTaken": 18927,
  "changeHistory": [
    "50094d7fefafaf0e88798b43cdce291ae067e3fd",
    "82cc6f6968d2897ae006c5ef29eba74023f3483e",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "5c465df90414d43250d09084748ab2d41af44eea",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
    "7179f94f9d000fc52bd9ce5aa9741aba97ec3ee8",
    "9c22065109a77681bc2534063eabe8692fbcb3cd",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "5b99672658ce24bfd1002b880583cbecfa47f9b3",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "50094d7fefafaf0e88798b43cdce291ae067e3fd": "Ybodychange",
    "82cc6f6968d2897ae006c5ef29eba74023f3483e": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "5c465df90414d43250d09084748ab2d41af44eea": "Ymodifierchange",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ymultichange(Yrename,Ybodychange)",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ymultichange(Yrename,Ybodychange)",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ymultichange(Yrename,Ybodychange)",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ymultichange(Yrename,Ybodychange)",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ymultichange(Yrename,Ybodychange)",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": "Ybodychange",
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383": "Ybodychange",
    "7179f94f9d000fc52bd9ce5aa9741aba97ec3ee8": "Ybodychange",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Ymodifierchange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "5b99672658ce24bfd1002b880583cbecfa47f9b3": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "50094d7fefafaf0e88798b43cdce291ae067e3fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9300. Lazy preemption should trigger an update on queue preemption metrics for CapacityScheduler. Contributed by Tao Yang.\n",
      "commitDate": "24/02/19 6:17 AM",
      "commitName": "50094d7fefafaf0e88798b43cdce291ae067e3fd",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/11/18 6:42 AM",
      "commitNameOld": "c96cbe8659587cfc114a96aab1be5cc85029fe44",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 108.98,
      "commitsBetweenForRepo": 742,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,31 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n         container.getId());\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\n           \"Container \" + container + \" of\" + \" finished application \" + appId\n               + \" completed with event \" + event);\n       return;\n     }\n \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     if (null \u003d\u003d node) {\n       LOG.info(\"Container \" + container + \" of\" + \" removed node \" + container\n           .getNodeId() + \" completed with event \" + event);\n       return;\n     }\n \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue) application.getQueue();\n     queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n-    if (ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n-      updateQueuePreemptionMetrics(queue, rmContainer);\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n        container.getId());\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\n          \"Container \" + container + \" of\" + \" finished application \" + appId\n              + \" completed with event \" + event);\n      return;\n    }\n\n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    if (null \u003d\u003d node) {\n      LOG.info(\"Container \" + container + \" of\" + \" removed node \" + container\n          .getNodeId() + \" completed with event \" + event);\n      return;\n    }\n\n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue) application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "82cc6f6968d2897ae006c5ef29eba74023f3483e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7728. Expose container preemptions related information in Capacity Scheduler queue metrics. Contributed by Eric Payne.\n",
      "commitDate": "25/01/18 1:02 AM",
      "commitName": "82cc6f6968d2897ae006c5ef29eba74023f3483e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/01/18 5:35 AM",
      "commitNameOld": "06cceba1cb07340c412c4467439c16ea6812e685",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n         container.getId());\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\n           \"Container \" + container + \" of\" + \" finished application \" + appId\n               + \" completed with event \" + event);\n       return;\n     }\n \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     if (null \u003d\u003d node) {\n       LOG.info(\"Container \" + container + \" of\" + \" removed node \" + container\n           .getNodeId() + \" completed with event \" + event);\n       return;\n     }\n \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue) application.getQueue();\n     queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n+    if (ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n+      updateQueuePreemptionMetrics(queue, rmContainer);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n        container.getId());\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\n          \"Container \" + container + \" of\" + \" finished application \" + appId\n              + \" completed with event \" + event);\n      return;\n    }\n\n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    if (null \u003d\u003d node) {\n      LOG.info(\"Container \" + container + \" of\" + \" removed node \" + container\n          .getNodeId() + \" completed with event \" + event);\n      return;\n    }\n\n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue) application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n    if (ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n      updateQueuePreemptionMetrics(queue, rmContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,31 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n     Container container \u003d rmContainer.getContainer();\n     ContainerId containerId \u003d container.getId();\n-    \n+\n     // Get the application for the finished container\n-    FiCaSchedulerApp application \u003d\n-        getCurrentAttemptForContainer(container.getId());\n+    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n+        container.getId());\n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n-      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n-          + appId + \" completed with event \" + event);\n+      LOG.info(\n+          \"Container \" + container + \" of\" + \" finished application \" + appId\n+              + \" completed with event \" + event);\n       return;\n     }\n-    \n+\n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n-    \n+    if (null \u003d\u003d node) {\n+      LOG.info(\"Container \" + container + \" of\" + \" removed node \" + container\n+          .getNodeId() + \" completed with event \" + event);\n+      return;\n+    }\n+\n     // Inform the queue\n-    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n+    LeafQueue queue \u003d (LeafQueue) application.getQueue();\n     queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n\n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d getCurrentAttemptForContainer(\n        container.getId());\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\n          \"Container \" + container + \" of\" + \" finished application \" + appId\n              + \" completed with event \" + event);\n      return;\n    }\n\n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    if (null \u003d\u003d node) {\n      LOG.info(\"Container \" + container + \" of\" + \" removed node \" + container\n          .getNodeId() + \" completed with event \" + event);\n      return;\n    }\n\n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue) application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,25 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n-    \n     Container container \u003d rmContainer.getContainer();\n+    ContainerId containerId \u003d container.getId();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n-        container.getId().getApplicationAttemptId().getApplicationId();\n+        containerId.getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n-\n-    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n-      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n-        container.getId(), queue.getQueuePath());\n-      schedulerHealth.updateSchedulerPreemptionCounts(1);\n-    } else {\n-      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n-        container.getId(), queue.getQueuePath());\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,34 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n+    \n     Container container \u003d rmContainer.getContainer();\n-    ContainerId containerId \u003d container.getId();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n-        containerId.getApplicationAttemptId().getApplicationId();\n+        container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n+\n+    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n+      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n+        container.getId(), queue.getQueuePath());\n+      schedulerHealth.updateSchedulerPreemptionCounts(1);\n+    } else {\n+      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n+        container.getId(), queue.getQueuePath());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,25 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n-    \n     Container container \u003d rmContainer.getContainer();\n+    ContainerId containerId \u003d container.getId();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n-        container.getId().getApplicationAttemptId().getApplicationId();\n+        containerId.getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n-\n-    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n-      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n-        container.getId(), queue.getQueuePath());\n-      schedulerHealth.updateSchedulerPreemptionCounts(1);\n-    } else {\n-      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n-        container.getId(), queue.getQueuePath());\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    Container container \u003d rmContainer.getContainer();\n    ContainerId containerId \u003d container.getId();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/03/16 1:14 PM",
      "commitNameOld": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n-    queue.completedContainer(clusterResource, application, node, \n+    queue.completedContainer(getClusterResource(), application, node,\n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(getClusterResource(), application, node,\n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5c465df90414d43250d09084748ab2d41af44eea": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4671. There is no need to acquire CS lock when completing a container. Contributed by Meng Ding\n",
      "commitDate": "01/03/16 1:14 PM",
      "commitName": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.15,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n-  protected synchronized void completedContainerInternal(\n+  protected void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "[protected, synchronized]",
        "newValue": "[protected]"
      }
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "18/01/16 5:30 PM",
          "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 5:27 PM",
          "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,34 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Container \" + containerStatus.getContainerId() +\n-          \" completed with event \" + event);\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainer",
            "newValue": "completedContainerInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "18/01/16 5:30 PM",
          "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 5:27 PM",
          "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,34 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Container \" + containerStatus.getContainerId() +\n-          \" completed with event \" + event);\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
          "commitDate": "18/01/16 5:27 PM",
          "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 1:06 AM",
          "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Container \" + containerStatus.getContainerId() +\n+          \" completed with event \" + event);\n+      return;\n+    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainerInternal",
            "newValue": "completedContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
          "commitDate": "18/01/16 5:27 PM",
          "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 1:06 AM",
          "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Container \" + containerStatus.getContainerId() +\n+          \" completed with event \" + event);\n+      return;\n+    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
          "commitDate": "18/01/16 1:06 AM",
          "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 12:50 AM",
          "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n+  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Container \" + containerStatus.getContainerId() +\n-          \" completed with event \" + event);\n-      return;\n-    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainer",
            "newValue": "completedContainerInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
          "commitDate": "18/01/16 1:06 AM",
          "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 12:50 AM",
          "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n+  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Container \" + containerStatus.getContainerId() +\n-          \" completed with event \" + event);\n-      return;\n-    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
          "commitDate": "18/01/16 12:50 AM",
          "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 7:04 PM",
          "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Container \" + containerStatus.getContainerId() +\n+          \" completed with event \" + event);\n+      return;\n+    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainerInternal",
            "newValue": "completedContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
          "commitDate": "18/01/16 12:50 AM",
          "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 7:04 PM",
          "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Container \" + containerStatus.getContainerId() +\n+          \" completed with event \" + event);\n+      return;\n+    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "17/01/16 7:04 PM",
          "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "12/01/16 9:18 PM",
          "commitNameOld": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 4.91,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n+  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Container \" + containerStatus.getContainerId() +\n-          \" completed with event \" + event);\n-      return;\n-    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainer",
            "newValue": "completedContainerInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "17/01/16 7:04 PM",
          "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "12/01/16 9:18 PM",
          "commitNameOld": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 4.91,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n+  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Container \" + containerStatus.getContainerId() +\n-          \" completed with event \" + event);\n-      return;\n-    }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3966. Fix excessive loggings in CapacityScheduler. (Jian He via wangda)\n",
      "commitDate": "07/08/15 9:46 AM",
      "commitName": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "24/07/15 4:44 PM",
      "commitNameOld": "a3bd7b4a59b3664273dc424f240356838213d4e7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.71,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Container \" + containerStatus.getContainerId() +\n           \" completed with event \" + event);\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n-    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n-        + \" released container \" + container.getId() + \" on node: \" + node\n-        + \" with event: \" + event);\n     if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n       schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n       schedulerHealth.updateSchedulerPreemptionCounts(1);\n     } else {\n       schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n         container.getId(), queue.getQueuePath());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3293. Track and display capacity scheduler health metrics in web\nUI. Contributed by Varun Vasudev\n",
      "commitDate": "09/04/15 11:38 PM",
      "commitName": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthor": "Xuan",
      "commitDateOld": "17/03/15 10:24 AM",
      "commitNameOld": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 23.55,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,41 @@\n   protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Container \" + containerStatus.getContainerId() +\n           \" completed with event \" + event);\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n         + \" released container \" + container.getId() + \" on node: \" + node\n         + \" with event: \" + event);\n+    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n+      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n+        container.getId(), queue.getQueuePath());\n+      schedulerHealth.updateSchedulerPreemptionCounts(1);\n+    } else {\n+      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n+        container.getId(), queue.getQueuePath());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n        + \" released container \" + container.getId() + \" on node: \" + node\n        + \" with event: \" + event);\n    if (containerStatus.getExitStatus() \u003d\u003d ContainerExitStatus.PREEMPTED) {\n      schedulerHealth.updatePreemption(Time.now(), container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n      schedulerHealth.updateSchedulerPreemptionCounts(1);\n    } else {\n      schedulerHealth.updateRelease(lastNodeUpdateTime, container.getNodeId(),\n        container.getId(), queue.getQueuePath());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7179f94f9d000fc52bd9ce5aa9741aba97ec3ee8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3197. Confusing log generated by CapacityScheduler. Contributed by\nVarun Saxena.\n",
      "commitDate": "17/03/15 3:27 AM",
      "commitName": "7179f94f9d000fc52bd9ce5aa9741aba97ec3ee8",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "02/03/15 5:52 PM",
      "commitNameOld": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.36,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n+      LOG.info(\"Container \" + containerStatus.getContainerId() +\n+          \" completed with event \" + event);\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n-      LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n+      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null, true);\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n         + \" released container \" + container.getId() + \" on node: \" + node\n         + \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Container \" + containerStatus.getContainerId() +\n          \" completed with event \" + event);\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" finished application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n        + \" released container \" + container.getId() + \" on node: \" + node\n        + \" with event: \" + event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "18/09/14 11:03 AM",
      "commitNameOld": "485c96e3cb9b0b05d6e490b4773506da83ebc61d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.84,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n-        rmContainer, containerStatus, event, null);\n+        rmContainer, containerStatus, event, null, true);\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n         + \" released container \" + container.getId() + \" on node: \" + node\n         + \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null, true);\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n        + \" released container \" + container.getId() + \" on node: \" + node\n        + \" with event: \" + event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "17/08/14 11:08 PM",
      "commitNameOld": "519c4be95a091a072302e9ae52c2d221d80037a8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.6,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  private synchronized void completedContainer(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n           + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null);\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n         + \" released container \" + container.getId() + \" on node: \" + node\n         + \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null);\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n        + \" released container \" + container.getId() + \" on node: \" + node\n        + \" with event: \" + event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "[private, synchronized]",
        "newValue": "[protected, synchronized]"
      }
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   private synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n-    ApplicationAttemptId applicationAttemptId \u003d\n-      container.getId().getApplicationAttemptId();\n-    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d\n+        getCurrentAttemptForContainer(container.getId());\n+    ApplicationId appId \u003d\n+        container.getId().getApplicationAttemptId().getApplicationId();\n     if (application \u003d\u003d null) {\n-      LOG.info(\"Container \" + container + \" of\" +\n-      \t\t\" unknown application \" + applicationAttemptId + \n-          \" completed with event \" + event);\n+      LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n+          + appId + \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event, null);\n \n-    LOG.info(\"Application \" + applicationAttemptId + \n-        \" released container \" + container.getId() +\n-        \" on node: \" + node + \n-        \" with event: \" + event);\n+    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n+        + \" released container \" + container.getId() + \" on node: \" + node\n+        + \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" + \" unknown application \"\n          + appId + \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null);\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId()\n        + \" released container \" + container.getId() + \" on node: \" + node\n        + \" with event: \" + event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5b99672658ce24bfd1002b880583cbecfa47f9b3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/07/13 7:59 AM",
      "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/13 6:20 PM",
      "commitNameOld": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 9.57,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d\n       container.getId().getApplicationAttemptId();\n     FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" +\n       \t\t\" unknown application \" + applicationAttemptId + \n           \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n-        rmContainer, containerStatus, event);\n+        rmContainer, containerStatus, event, null);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d\n      container.getId().getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event, null);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n-    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" +\n       \t\t\" unknown application \" + applicationAttemptId + \n           \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n-    SchedulerNode node \u003d getNode(container.getNodeId());\n+    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.28,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n-    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" +\n       \t\t\" unknown application \" + applicationAttemptId + \n           \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n         rmContainer, containerStatus, event);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  private synchronized void completedContainer(RMContainer rmContainer, \n-      RMContainerEventType event) {\n+  private synchronized void completedContainer(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" +\n       \t\t\" unknown application \" + applicationAttemptId + \n           \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n-        rmContainer, event);\n+        rmContainer, containerStatus, event);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer, event-RMContainerEventType]",
            "newValue": "[rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  private synchronized void completedContainer(RMContainer rmContainer, \n-      RMContainerEventType event) {\n+  private synchronized void completedContainer(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n     \n     Container container \u003d rmContainer.getContainer();\n     \n     // Get the application for the finished container\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Container \" + container + \" of\" +\n       \t\t\" unknown application \" + applicationAttemptId + \n           \" completed with event \" + event);\n       return;\n     }\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     // Inform the queue\n     LeafQueue queue \u003d (LeafQueue)application.getQueue();\n     queue.completedContainer(clusterResource, application, node, \n-        rmContainer, event);\n+        rmContainer, containerStatus, event);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, containerStatus, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer, \n      RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,32 @@\n+  private synchronized void completedContainer(RMContainer rmContainer, \n+      RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Null container completed...\");\n+      return;\n+    }\n+    \n+    Container container \u003d rmContainer.getContainer();\n+    \n+    // Get the application for the finished container\n+    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    if (application \u003d\u003d null) {\n+      LOG.info(\"Container \" + container + \" of\" +\n+      \t\t\" unknown application \" + applicationAttemptId + \n+          \" completed with event \" + event);\n+      return;\n+    }\n+    \n+    // Get the node on which the container was allocated\n+    SchedulerNode node \u003d getNode(container.getNodeId());\n+    \n+    // Inform the queue\n+    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n+    queue.completedContainer(clusterResource, application, node, \n+        rmContainer, event);\n+\n+    LOG.info(\"Application \" + applicationAttemptId + \n+        \" released container \" + container.getId() +\n+        \" on node: \" + node + \n+        \" with event: \" + event);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void completedContainer(RMContainer rmContainer, \n      RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n    \n    Container container \u003d rmContainer.getContainer();\n    \n    // Get the application for the finished container\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Container \" + container + \" of\" +\n      \t\t\" unknown application \" + applicationAttemptId + \n          \" completed with event \" + event);\n      return;\n    }\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    // Inform the queue\n    LeafQueue queue \u003d (LeafQueue)application.getQueue();\n    queue.completedContainer(clusterResource, application, node, \n        rmContainer, event);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}