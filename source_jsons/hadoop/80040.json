{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclStatus.java",
  "functionName": "getEffectivePermission",
  "functionId": "getEffectivePermission___entry-AclEntry__permArg-FsPermission",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclStatus.java",
  "functionStartLine": 245,
  "functionEndLine": 275,
  "numCommitsSeen": 7,
  "timeTaken": 1064,
  "changeHistory": [
    "ffe942b82c1208bc7b22899da3a233944cb5ab52"
  ],
  "changeHistoryShort": {
    "ffe942b82c1208bc7b22899da3a233944cb5ab52": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ffe942b82c1208bc7b22899da3a233944cb5ab52": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7384. getfacl command and getAclStatus output should be in sync. Contributed by Vinayakumar B.\n",
      "commitDate": "08/12/14 10:23 AM",
      "commitName": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,31 @@\n+  public FsAction getEffectivePermission(AclEntry entry, FsPermission permArg)\n+      throws IllegalArgumentException {\n+    // At least one permission bits should be available.\n+    Preconditions.checkArgument(this.permission !\u003d null || permArg !\u003d null,\n+        \"Permission bits are not available to calculate effective permission\");\n+    if (this.permission !\u003d null) {\n+      // permission bits from server response will have the priority for\n+      // accuracy.\n+      permArg \u003d this.permission;\n+    }\n+    if ((entry.getName() !\u003d null || entry.getType() \u003d\u003d AclEntryType.GROUP)) {\n+      if (entry.getScope() \u003d\u003d AclEntryScope.ACCESS) {\n+        FsAction entryPerm \u003d entry.getPermission();\n+        return entryPerm.and(permArg.getGroupAction());\n+      } else {\n+        Preconditions.checkArgument(this.entries.contains(entry)\n+            \u0026\u0026 this.entries.size() \u003e\u003d 3,\n+            \"Passed default ACL entry not found in the list of ACLs\");\n+        // default mask entry for effective permission calculation will be the\n+        // penultimate entry. This can be mask entry in case of extended ACLs.\n+        // In case of minimal ACL, this is the owner group entry, and we end up\n+        // intersecting group FsAction with itself, which is a no-op.\n+        FsAction defaultMask \u003d this.entries.get(this.entries.size() - 2)\n+            .getPermission();\n+        FsAction entryPerm \u003d entry.getPermission();\n+        return entryPerm.and(defaultMask);\n+      }\n+    } else {\n+      return entry.getPermission();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FsAction getEffectivePermission(AclEntry entry, FsPermission permArg)\n      throws IllegalArgumentException {\n    // At least one permission bits should be available.\n    Preconditions.checkArgument(this.permission !\u003d null || permArg !\u003d null,\n        \"Permission bits are not available to calculate effective permission\");\n    if (this.permission !\u003d null) {\n      // permission bits from server response will have the priority for\n      // accuracy.\n      permArg \u003d this.permission;\n    }\n    if ((entry.getName() !\u003d null || entry.getType() \u003d\u003d AclEntryType.GROUP)) {\n      if (entry.getScope() \u003d\u003d AclEntryScope.ACCESS) {\n        FsAction entryPerm \u003d entry.getPermission();\n        return entryPerm.and(permArg.getGroupAction());\n      } else {\n        Preconditions.checkArgument(this.entries.contains(entry)\n            \u0026\u0026 this.entries.size() \u003e\u003d 3,\n            \"Passed default ACL entry not found in the list of ACLs\");\n        // default mask entry for effective permission calculation will be the\n        // penultimate entry. This can be mask entry in case of extended ACLs.\n        // In case of minimal ACL, this is the owner group entry, and we end up\n        // intersecting group FsAction with itself, which is a no-op.\n        FsAction defaultMask \u003d this.entries.get(this.entries.size() - 2)\n            .getPermission();\n        FsAction entryPerm \u003d entry.getPermission();\n        return entryPerm.and(defaultMask);\n      }\n    } else {\n      return entry.getPermission();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclStatus.java"
    }
  }
}