{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "getTimelineStoresFromCacheIds",
  "functionId": "getTimelineStoresFromCacheIds___groupIds-Set__TimelineEntityGroupId____entityType-String__cacheItems-List__EntityCacheItem__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 966,
  "functionEndLine": 987,
  "numCommitsSeen": 21,
  "timeTaken": 2264,
  "changeHistory": [
    "705286ccaeea36941d97ec1c1700746b74264924",
    "06413da72efed9a50e49efaf7110c220c88a7f4a",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "705286ccaeea36941d97ec1c1700746b74264924": "Ymultichange(Yparameterchange,Ybodychange)",
    "06413da72efed9a50e49efaf7110c220c88a7f4a": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "705286ccaeea36941d97ec1c1700746b74264924": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
      "commitDate": "27/05/16 6:58 AM",
      "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
          "commitDate": "27/05/16 6:58 AM",
          "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
          "commitAuthor": "Junping Du",
          "commitDateOld": "03/05/16 4:16 AM",
          "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 24.11,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n   private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n-      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType)\n+      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType,\n+      List\u003cEntityCacheItem\u003e cacheItems)\n       throws IOException {\n     List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n     // For now we just handle one store in a context. We return the first\n     // non-null storage for the group ids.\n     for (TimelineEntityGroupId groupId : groupIds) {\n-      TimelineStore storeForId \u003d getCachedStore(groupId);\n+      TimelineStore storeForId \u003d getCachedStore(groupId, cacheItems);\n       if (storeForId !\u003d null) {\n         LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n         stores.add(storeForId);\n         metrics.incrGetEntityToDetailOps();\n       }\n     }\n     if (stores.size() \u003d\u003d 0) {\n       LOG.debug(\"Using summary store for {}\", entityType);\n       stores.add(this.summaryStore);\n       metrics.incrGetEntityToSummaryOps();\n     }\n     return stores;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType,\n      List\u003cEntityCacheItem\u003e cacheItems)\n      throws IOException {\n    List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n    // For now we just handle one store in a context. We return the first\n    // non-null storage for the group ids.\n    for (TimelineEntityGroupId groupId : groupIds) {\n      TimelineStore storeForId \u003d getCachedStore(groupId, cacheItems);\n      if (storeForId !\u003d null) {\n        LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n        stores.add(storeForId);\n        metrics.incrGetEntityToDetailOps();\n      }\n    }\n    if (stores.size() \u003d\u003d 0) {\n      LOG.debug(\"Using summary store for {}\", entityType);\n      stores.add(this.summaryStore);\n      metrics.incrGetEntityToSummaryOps();\n    }\n    return stores;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[groupIds-Set\u003cTimelineEntityGroupId\u003e, entityType-String]",
            "newValue": "[groupIds-Set\u003cTimelineEntityGroupId\u003e, entityType-String, cacheItems-List\u003cEntityCacheItem\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
          "commitDate": "27/05/16 6:58 AM",
          "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
          "commitAuthor": "Junping Du",
          "commitDateOld": "03/05/16 4:16 AM",
          "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 24.11,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n   private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n-      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType)\n+      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType,\n+      List\u003cEntityCacheItem\u003e cacheItems)\n       throws IOException {\n     List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n     // For now we just handle one store in a context. We return the first\n     // non-null storage for the group ids.\n     for (TimelineEntityGroupId groupId : groupIds) {\n-      TimelineStore storeForId \u003d getCachedStore(groupId);\n+      TimelineStore storeForId \u003d getCachedStore(groupId, cacheItems);\n       if (storeForId !\u003d null) {\n         LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n         stores.add(storeForId);\n         metrics.incrGetEntityToDetailOps();\n       }\n     }\n     if (stores.size() \u003d\u003d 0) {\n       LOG.debug(\"Using summary store for {}\", entityType);\n       stores.add(this.summaryStore);\n       metrics.incrGetEntityToSummaryOps();\n     }\n     return stores;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType,\n      List\u003cEntityCacheItem\u003e cacheItems)\n      throws IOException {\n    List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n    // For now we just handle one store in a context. We return the first\n    // non-null storage for the group ids.\n    for (TimelineEntityGroupId groupId : groupIds) {\n      TimelineStore storeForId \u003d getCachedStore(groupId, cacheItems);\n      if (storeForId !\u003d null) {\n        LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n        stores.add(storeForId);\n        metrics.incrGetEntityToDetailOps();\n      }\n    }\n    if (stores.size() \u003d\u003d 0) {\n      LOG.debug(\"Using summary store for {}\", entityType);\n      stores.add(this.summaryStore);\n      metrics.incrGetEntityToSummaryOps();\n    }\n    return stores;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "06413da72efed9a50e49efaf7110c220c88a7f4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4851. Metric improvements for ATS v1.5 storage components. Li Lu via junping_du.\n",
      "commitDate": "03/05/16 4:16 AM",
      "commitName": "06413da72efed9a50e49efaf7110c220c88a7f4a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/04/16 10:38 AM",
      "commitNameOld": "e0cb426758b3d716ff143f723fc16ef2f1e4971b",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n       Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType)\n       throws IOException {\n     List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n     // For now we just handle one store in a context. We return the first\n     // non-null storage for the group ids.\n     for (TimelineEntityGroupId groupId : groupIds) {\n       TimelineStore storeForId \u003d getCachedStore(groupId);\n       if (storeForId !\u003d null) {\n         LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n         stores.add(storeForId);\n+        metrics.incrGetEntityToDetailOps();\n       }\n     }\n     if (stores.size() \u003d\u003d 0) {\n       LOG.debug(\"Using summary store for {}\", entityType);\n       stores.add(this.summaryStore);\n+      metrics.incrGetEntityToSummaryOps();\n     }\n     return stores;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType)\n      throws IOException {\n    List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n    // For now we just handle one store in a context. We return the first\n    // non-null storage for the group ids.\n    for (TimelineEntityGroupId groupId : groupIds) {\n      TimelineStore storeForId \u003d getCachedStore(groupId);\n      if (storeForId !\u003d null) {\n        LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n        stores.add(storeForId);\n        metrics.incrGetEntityToDetailOps();\n      }\n    }\n    if (stores.size() \u003d\u003d 0) {\n      LOG.debug(\"Using summary store for {}\", entityType);\n      stores.add(this.summaryStore);\n      metrics.incrGetEntityToSummaryOps();\n    }\n    return stores;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,19 @@\n+  private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n+      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType)\n+      throws IOException {\n+    List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n+    // For now we just handle one store in a context. We return the first\n+    // non-null storage for the group ids.\n+    for (TimelineEntityGroupId groupId : groupIds) {\n+      TimelineStore storeForId \u003d getCachedStore(groupId);\n+      if (storeForId !\u003d null) {\n+        LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n+        stores.add(storeForId);\n+      }\n+    }\n+    if (stores.size() \u003d\u003d 0) {\n+      LOG.debug(\"Using summary store for {}\", entityType);\n+      stores.add(this.summaryStore);\n+    }\n+    return stores;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresFromCacheIds(\n      Set\u003cTimelineEntityGroupId\u003e groupIds, String entityType)\n      throws IOException {\n    List\u003cTimelineStore\u003e stores \u003d new LinkedList\u003cTimelineStore\u003e();\n    // For now we just handle one store in a context. We return the first\n    // non-null storage for the group ids.\n    for (TimelineEntityGroupId groupId : groupIds) {\n      TimelineStore storeForId \u003d getCachedStore(groupId);\n      if (storeForId !\u003d null) {\n        LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\n        stores.add(storeForId);\n      }\n    }\n    if (stores.size() \u003d\u003d 0) {\n      LOG.debug(\"Using summary store for {}\", entityType);\n      stores.add(this.summaryStore);\n    }\n    return stores;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}