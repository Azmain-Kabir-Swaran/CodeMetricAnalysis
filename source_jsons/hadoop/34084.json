{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsHandlerImpl.java",
  "functionName": "parseMtab",
  "functionId": "parseMtab___mtab-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
  "functionStartLine": 210,
  "functionEndLine": 251,
  "numCommitsSeen": 26,
  "timeTaken": 3594,
  "changeHistory": [
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "47b145b9b4e81d781891abce8a6638f0b436acc4",
    "a2f680493f040704e2b85108e286731ee3860a52",
    "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
    "838b06ac87339494cea706d4a97e7f5383bdc442"
  ],
  "changeHistoryShort": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "47b145b9b4e81d781891abce8a6638f0b436acc4": "Ybodychange",
    "a2f680493f040704e2b85108e286731ee3860a52": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
    "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "838b06ac87339494cea706d4a97e7f5383bdc442": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/08/17 10:33 AM",
      "commitNameOld": "47b145b9b4e81d781891abce8a6638f0b436acc4",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 13.61,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n       throws IOException {\n     Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n     BufferedReader in \u003d null;\n     Set\u003cString\u003e validCgroups \u003d\n         CGroupsHandler.CGroupController.getValidCGroups();\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             Set\u003cString\u003e cgroupList \u003d\n                 new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n             // Collect the valid subsystem names\n             cgroupList.retainAll(validCgroups);\n             ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n       if (Shell.LINUX) {\n         throw new IOException(\"Error while reading \" + mtab, e);\n       } else {\n         // Ignore the error, if we are running on an os other than Linux\n         LOG.warn(\"Error while reading \" + mtab, e);\n       }\n     } finally {\n-      IOUtils.cleanup(LOG, in);\n+      IOUtils.cleanupWithLogger(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n    BufferedReader in \u003d null;\n    Set\u003cString\u003e validCgroups \u003d\n        CGroupsHandler.CGroupController.getValidCGroups();\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      if (Shell.LINUX) {\n        throw new IOException(\"Error while reading \" + mtab, e);\n      } else {\n        // Ignore the error, if we are running on an os other than Linux\n        LOG.warn(\"Error while reading \" + mtab, e);\n      }\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, in);\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "47b145b9b4e81d781891abce8a6638f0b436acc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "08/08/17 10:33 AM",
      "commitName": "47b145b9b4e81d781891abce8a6638f0b436acc4",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/05/17 12:05 PM",
      "commitNameOld": "a2f680493f040704e2b85108e286731ee3860a52",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 90.94,
      "commitsBetweenForRepo": 509,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,42 @@\n   static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n       throws IOException {\n     Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n     BufferedReader in \u003d null;\n-    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n-    for (CGroupController controller : CGroupController.values()) {\n-      validCgroups.add(controller.getName());\n-    }\n+    Set\u003cString\u003e validCgroups \u003d\n+        CGroupsHandler.CGroupController.getValidCGroups();\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             Set\u003cString\u003e cgroupList \u003d\n                 new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n             // Collect the valid subsystem names\n             cgroupList.retainAll(validCgroups);\n             ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n       if (Shell.LINUX) {\n         throw new IOException(\"Error while reading \" + mtab, e);\n       } else {\n         // Ignore the error, if we are running on an os other than Linux\n         LOG.warn(\"Error while reading \" + mtab, e);\n       }\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n    BufferedReader in \u003d null;\n    Set\u003cString\u003e validCgroups \u003d\n        CGroupsHandler.CGroupController.getValidCGroups();\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      if (Shell.LINUX) {\n        throw new IOException(\"Error while reading \" + mtab, e);\n      } else {\n        // Ignore the error, if we are running on an os other than Linux\n        LOG.warn(\"Error while reading \" + mtab, e);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "a2f680493f040704e2b85108e286731ee3860a52": {
      "type": "Ymultichange(Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "09/05/17 12:05 PM",
      "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,44 @@\n-  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n+  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n       throws IOException {\n-    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n     BufferedReader in \u003d null;\n+    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n+    for (CGroupController controller : CGroupController.values()) {\n+      validCgroups.add(controller.getName());\n+    }\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n-            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n-            ret.put(path, value);\n+            Set\u003cString\u003e cgroupList \u003d\n+                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n+            // Collect the valid subsystem names\n+            cgroupList.retainAll(validCgroups);\n+            ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + mtab, e);\n+      if (Shell.LINUX) {\n+        throw new IOException(\"Error while reading \" + mtab, e);\n+      } else {\n+        // Ignore the error, if we are running on an os other than Linux\n+        LOG.warn(\"Error while reading \" + mtab, e);\n+      }\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n    BufferedReader in \u003d null;\n    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n    for (CGroupController controller : CGroupController.values()) {\n      validCgroups.add(controller.getName());\n    }\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      if (Shell.LINUX) {\n        throw new IOException(\"Error while reading \" + mtab, e);\n      } else {\n        // Ignore the error, if we are running on an os other than Linux\n        LOG.warn(\"Error while reading \" + mtab, e);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "Map\u003cString,List\u003cString\u003e\u003e",
            "newValue": "Map\u003cString,Set\u003cString\u003e\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,44 @@\n-  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n+  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n       throws IOException {\n-    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n     BufferedReader in \u003d null;\n+    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n+    for (CGroupController controller : CGroupController.values()) {\n+      validCgroups.add(controller.getName());\n+    }\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n-            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n-            ret.put(path, value);\n+            Set\u003cString\u003e cgroupList \u003d\n+                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n+            // Collect the valid subsystem names\n+            cgroupList.retainAll(validCgroups);\n+            ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + mtab, e);\n+      if (Shell.LINUX) {\n+        throw new IOException(\"Error while reading \" + mtab, e);\n+      } else {\n+        // Ignore the error, if we are running on an os other than Linux\n+        LOG.warn(\"Error while reading \" + mtab, e);\n+      }\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n    BufferedReader in \u003d null;\n    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n    for (CGroupController controller : CGroupController.values()) {\n      validCgroups.add(controller.getName());\n    }\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      if (Shell.LINUX) {\n        throw new IOException(\"Error while reading \" + mtab, e);\n      } else {\n        // Ignore the error, if we are running on an os other than Linux\n        LOG.warn(\"Error while reading \" + mtab, e);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,44 @@\n-  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n+  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n       throws IOException {\n-    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n     BufferedReader in \u003d null;\n+    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n+    for (CGroupController controller : CGroupController.values()) {\n+      validCgroups.add(controller.getName());\n+    }\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n-            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n-            ret.put(path, value);\n+            Set\u003cString\u003e cgroupList \u003d\n+                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n+            // Collect the valid subsystem names\n+            cgroupList.retainAll(validCgroups);\n+            ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + mtab, e);\n+      if (Shell.LINUX) {\n+        throw new IOException(\"Error while reading \" + mtab, e);\n+      } else {\n+        // Ignore the error, if we are running on an os other than Linux\n+        LOG.warn(\"Error while reading \" + mtab, e);\n+      }\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cString, Set\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003c\u003e();\n    BufferedReader in \u003d null;\n    HashSet\u003cString\u003e validCgroups \u003d new HashSet\u003c\u003e();\n    for (CGroupController controller : CGroupController.values()) {\n      validCgroups.add(controller.getName());\n    }\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      if (Shell.LINUX) {\n        throw new IOException(\"Error while reading \" + mtab, e);\n      } else {\n        // Ignore the error, if we are running on an os other than Linux\n        LOG.warn(\"Error while reading \" + mtab, e);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
      "commitDate": "30/04/15 9:41 PM",
      "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n+  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n+      throws IOException {\n     Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n-      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n+      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n+      throw new IOException(\"Error while reading \" + mtab, e);\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + mtab, e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[mtab-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n+  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n+      throws IOException {\n     Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n-      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n+      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n+      throw new IOException(\"Error while reading \" + mtab, e);\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + mtab, e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n-  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n+  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n+      throws IOException {\n     Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n-      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n+      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n            str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n+      throw new IOException(\"Error while reading \" + mtab, e);\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, List\u003cString\u003e\u003e parseMtab(String mtab)\n      throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(mtab));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + mtab, e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "838b06ac87339494cea706d4a97e7f5383bdc442": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3443. Create a \u0027ResourceHandler\u0027 subsystem to ease addition of support for new resource types on the NM. Contributed by Sidharta Seethana.\n",
      "commitDate": "13/04/15 6:35 PM",
      "commitName": "838b06ac87339494cea706d4a97e7f5383bdc442",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,31 @@\n+  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n+    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+    BufferedReader in \u003d null;\n+\n+    try {\n+      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n+      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n+\n+      for (String str \u003d in.readLine(); str !\u003d null;\n+           str \u003d in.readLine()) {\n+        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n+        boolean mat \u003d m.find();\n+        if (mat) {\n+          String path \u003d m.group(1);\n+          String type \u003d m.group(2);\n+          String options \u003d m.group(3);\n+\n+          if (type.equals(CGROUPS_FSTYPE)) {\n+            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n+            ret.put(path, value);\n+          }\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n+    } finally {\n+      IOUtils.cleanup(LOG, in);\n+    }\n+\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java"
    }
  }
}