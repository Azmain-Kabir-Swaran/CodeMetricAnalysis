{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ScriptBasedMapping.java",
  "functionName": "runResolveCommand",
  "functionId": "runResolveCommand___args-List__String____commandScriptName-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
  "functionStartLine": 220,
  "functionEndLine": 260,
  "numCommitsSeen": 28,
  "timeTaken": 1578,
  "changeHistory": [
    "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
    "3f8d7dbde34f1688078b9598ee9d05f25535a209",
    "783dbb4125900c5ec9bc28a4d57643581af8a63d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "1191be630ff05c9f1a540b952a8e34665f7fc181",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "0485fe23ba76f7d96a198aed00f392fd571124bc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "b2f65c276da2c4420a0974a7e2d75e081abf5d63": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "3f8d7dbde34f1688078b9598ee9d05f25535a209": "Ybodychange",
    "783dbb4125900c5ec9bc28a4d57643581af8a63d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "1191be630ff05c9f1a540b952a8e34665f7fc181": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "0485fe23ba76f7d96a198aed00f392fd571124bc": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2f65c276da2c4420a0974a7e2d75e081abf5d63": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5168. Add cross node dependency support to BlockPlacementPolicy.  Contributed by Nikola Vujic\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/14 4:02 AM",
      "commitName": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5168. Add cross node dependency support to BlockPlacementPolicy.  Contributed by Nikola Vujic\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592179 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/05/14 4:02 AM",
          "commitName": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/09/13 8:24 AM",
          "commitNameOld": "8a66e493ba03f710b353638647013401d18f413c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 218.82,
          "commitsBetweenForRepo": 1525,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-    private String runResolveCommand(List\u003cString\u003e args) {\n+    protected String runResolveCommand(List\u003cString\u003e args, \n+        String commandScriptName) {\n       int loopCount \u003d 0;\n       if (args.size() \u003d\u003d 0) {\n         return null;\n       }\n       StringBuilder allOutput \u003d new StringBuilder();\n       int numProcessed \u003d 0;\n       if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n         LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n             + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n             + Integer.toString(MIN_ALLOWABLE_ARGS));\n         return null;\n       }\n \n       while (numProcessed !\u003d args.size()) {\n         int start \u003d maxArgs * loopCount;\n         List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n-        cmdList.add(scriptName);\n+        cmdList.add(commandScriptName);\n         for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n             numProcessed \u003c args.size(); numProcessed++) {\n           cmdList.add(args.get(numProcessed));\n         }\n         File dir \u003d null;\n         String userDir;\n         if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n           dir \u003d new File(userDir);\n         }\n         ShellCommandExecutor s \u003d new ShellCommandExecutor(\n             cmdList.toArray(new String[cmdList.size()]), dir);\n         try {\n           s.execute();\n           allOutput.append(s.getOutput()).append(\" \");\n         } catch (Exception e) {\n           LOG.warn(\"Exception running \" + s, e);\n           return null;\n         }\n         loopCount++;\n       }\n       return allOutput.toString();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected String runResolveCommand(List\u003cString\u003e args, \n        String commandScriptName) {\n      int loopCount \u003d 0;\n      if (args.size() \u003d\u003d 0) {\n        return null;\n      }\n      StringBuilder allOutput \u003d new StringBuilder();\n      int numProcessed \u003d 0;\n      if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n        LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n            + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n            + Integer.toString(MIN_ALLOWABLE_ARGS));\n        return null;\n      }\n\n      while (numProcessed !\u003d args.size()) {\n        int start \u003d maxArgs * loopCount;\n        List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n        cmdList.add(commandScriptName);\n        for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n            numProcessed \u003c args.size(); numProcessed++) {\n          cmdList.add(args.get(numProcessed));\n        }\n        File dir \u003d null;\n        String userDir;\n        if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n          dir \u003d new File(userDir);\n        }\n        ShellCommandExecutor s \u003d new ShellCommandExecutor(\n            cmdList.toArray(new String[cmdList.size()]), dir);\n        try {\n          s.execute();\n          allOutput.append(s.getOutput()).append(\" \");\n        } catch (Exception e) {\n          LOG.warn(\"Exception running \" + s, e);\n          return null;\n        }\n        loopCount++;\n      }\n      return allOutput.toString();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
          "extendedDetails": {
            "oldValue": "[args-List\u003cString\u003e]",
            "newValue": "[args-List\u003cString\u003e, commandScriptName-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5168. Add cross node dependency support to BlockPlacementPolicy.  Contributed by Nikola Vujic\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592179 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/05/14 4:02 AM",
          "commitName": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/09/13 8:24 AM",
          "commitNameOld": "8a66e493ba03f710b353638647013401d18f413c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 218.82,
          "commitsBetweenForRepo": 1525,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-    private String runResolveCommand(List\u003cString\u003e args) {\n+    protected String runResolveCommand(List\u003cString\u003e args, \n+        String commandScriptName) {\n       int loopCount \u003d 0;\n       if (args.size() \u003d\u003d 0) {\n         return null;\n       }\n       StringBuilder allOutput \u003d new StringBuilder();\n       int numProcessed \u003d 0;\n       if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n         LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n             + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n             + Integer.toString(MIN_ALLOWABLE_ARGS));\n         return null;\n       }\n \n       while (numProcessed !\u003d args.size()) {\n         int start \u003d maxArgs * loopCount;\n         List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n-        cmdList.add(scriptName);\n+        cmdList.add(commandScriptName);\n         for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n             numProcessed \u003c args.size(); numProcessed++) {\n           cmdList.add(args.get(numProcessed));\n         }\n         File dir \u003d null;\n         String userDir;\n         if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n           dir \u003d new File(userDir);\n         }\n         ShellCommandExecutor s \u003d new ShellCommandExecutor(\n             cmdList.toArray(new String[cmdList.size()]), dir);\n         try {\n           s.execute();\n           allOutput.append(s.getOutput()).append(\" \");\n         } catch (Exception e) {\n           LOG.warn(\"Exception running \" + s, e);\n           return null;\n         }\n         loopCount++;\n       }\n       return allOutput.toString();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected String runResolveCommand(List\u003cString\u003e args, \n        String commandScriptName) {\n      int loopCount \u003d 0;\n      if (args.size() \u003d\u003d 0) {\n        return null;\n      }\n      StringBuilder allOutput \u003d new StringBuilder();\n      int numProcessed \u003d 0;\n      if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n        LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n            + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n            + Integer.toString(MIN_ALLOWABLE_ARGS));\n        return null;\n      }\n\n      while (numProcessed !\u003d args.size()) {\n        int start \u003d maxArgs * loopCount;\n        List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n        cmdList.add(commandScriptName);\n        for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n            numProcessed \u003c args.size(); numProcessed++) {\n          cmdList.add(args.get(numProcessed));\n        }\n        File dir \u003d null;\n        String userDir;\n        if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n          dir \u003d new File(userDir);\n        }\n        ShellCommandExecutor s \u003d new ShellCommandExecutor(\n            cmdList.toArray(new String[cmdList.size()]), dir);\n        try {\n          s.execute();\n          allOutput.append(s.getOutput()).append(\" \");\n        } catch (Exception e) {\n          LOG.warn(\"Exception running \" + s, e);\n          return null;\n        }\n        loopCount++;\n      }\n      return allOutput.toString();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5168. Add cross node dependency support to BlockPlacementPolicy.  Contributed by Nikola Vujic\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592179 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/05/14 4:02 AM",
          "commitName": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/09/13 8:24 AM",
          "commitNameOld": "8a66e493ba03f710b353638647013401d18f413c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 218.82,
          "commitsBetweenForRepo": 1525,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n-    private String runResolveCommand(List\u003cString\u003e args) {\n+    protected String runResolveCommand(List\u003cString\u003e args, \n+        String commandScriptName) {\n       int loopCount \u003d 0;\n       if (args.size() \u003d\u003d 0) {\n         return null;\n       }\n       StringBuilder allOutput \u003d new StringBuilder();\n       int numProcessed \u003d 0;\n       if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n         LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n             + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n             + Integer.toString(MIN_ALLOWABLE_ARGS));\n         return null;\n       }\n \n       while (numProcessed !\u003d args.size()) {\n         int start \u003d maxArgs * loopCount;\n         List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n-        cmdList.add(scriptName);\n+        cmdList.add(commandScriptName);\n         for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n             numProcessed \u003c args.size(); numProcessed++) {\n           cmdList.add(args.get(numProcessed));\n         }\n         File dir \u003d null;\n         String userDir;\n         if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n           dir \u003d new File(userDir);\n         }\n         ShellCommandExecutor s \u003d new ShellCommandExecutor(\n             cmdList.toArray(new String[cmdList.size()]), dir);\n         try {\n           s.execute();\n           allOutput.append(s.getOutput()).append(\" \");\n         } catch (Exception e) {\n           LOG.warn(\"Exception running \" + s, e);\n           return null;\n         }\n         loopCount++;\n       }\n       return allOutput.toString();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected String runResolveCommand(List\u003cString\u003e args, \n        String commandScriptName) {\n      int loopCount \u003d 0;\n      if (args.size() \u003d\u003d 0) {\n        return null;\n      }\n      StringBuilder allOutput \u003d new StringBuilder();\n      int numProcessed \u003d 0;\n      if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n        LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n            + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n            + Integer.toString(MIN_ALLOWABLE_ARGS));\n        return null;\n      }\n\n      while (numProcessed !\u003d args.size()) {\n        int start \u003d maxArgs * loopCount;\n        List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n        cmdList.add(commandScriptName);\n        for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n            numProcessed \u003c args.size(); numProcessed++) {\n          cmdList.add(args.get(numProcessed));\n        }\n        File dir \u003d null;\n        String userDir;\n        if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n          dir \u003d new File(userDir);\n        }\n        ShellCommandExecutor s \u003d new ShellCommandExecutor(\n            cmdList.toArray(new String[cmdList.size()]), dir);\n        try {\n          s.execute();\n          allOutput.append(s.getOutput()).append(\" \");\n        } catch (Exception e) {\n          LOG.warn(\"Exception running \" + s, e);\n          return null;\n        }\n        loopCount++;\n      }\n      return allOutput.toString();\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
          "extendedDetails": {}
        }
      ]
    },
    "3f8d7dbde34f1688078b9598ee9d05f25535a209": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8046 Revert StaticMapping semantics to the existing ones, add DNS mapping diagnostics in progress\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1245911 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/02/12 4:57 AM",
      "commitName": "3f8d7dbde34f1688078b9598ee9d05f25535a209",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "26/11/11 9:45 AM",
      "commitNameOld": "783dbb4125900c5ec9bc28a4d57643581af8a63d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 83.8,
      "commitsBetweenForRepo": 485,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     private String runResolveCommand(List\u003cString\u003e args) {\n       int loopCount \u003d 0;\n       if (args.size() \u003d\u003d 0) {\n         return null;\n       }\n       StringBuilder allOutput \u003d new StringBuilder();\n       int numProcessed \u003d 0;\n       if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n         LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n             + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n             + Integer.toString(MIN_ALLOWABLE_ARGS));\n         return null;\n       }\n \n       while (numProcessed !\u003d args.size()) {\n         int start \u003d maxArgs * loopCount;\n         List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n         cmdList.add(scriptName);\n         for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n             numProcessed \u003c args.size(); numProcessed++) {\n           cmdList.add(args.get(numProcessed));\n         }\n         File dir \u003d null;\n         String userDir;\n         if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n           dir \u003d new File(userDir);\n         }\n         ShellCommandExecutor s \u003d new ShellCommandExecutor(\n             cmdList.toArray(new String[cmdList.size()]), dir);\n         try {\n           s.execute();\n           allOutput.append(s.getOutput()).append(\" \");\n         } catch (Exception e) {\n-          LOG.warn(\"Exception: \", e);\n+          LOG.warn(\"Exception running \" + s, e);\n           return null;\n         }\n         loopCount++;\n       }\n       return allOutput.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String runResolveCommand(List\u003cString\u003e args) {\n      int loopCount \u003d 0;\n      if (args.size() \u003d\u003d 0) {\n        return null;\n      }\n      StringBuilder allOutput \u003d new StringBuilder();\n      int numProcessed \u003d 0;\n      if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n        LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n            + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n            + Integer.toString(MIN_ALLOWABLE_ARGS));\n        return null;\n      }\n\n      while (numProcessed !\u003d args.size()) {\n        int start \u003d maxArgs * loopCount;\n        List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n        cmdList.add(scriptName);\n        for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n            numProcessed \u003c args.size(); numProcessed++) {\n          cmdList.add(args.get(numProcessed));\n        }\n        File dir \u003d null;\n        String userDir;\n        if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n          dir \u003d new File(userDir);\n        }\n        ShellCommandExecutor s \u003d new ShellCommandExecutor(\n            cmdList.toArray(new String[cmdList.size()]), dir);\n        try {\n          s.execute();\n          allOutput.append(s.getOutput()).append(\" \");\n        } catch (Exception e) {\n          LOG.warn(\"Exception running \" + s, e);\n          return null;\n        }\n        loopCount++;\n      }\n      return allOutput.toString();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "783dbb4125900c5ec9bc28a4d57643581af8a63d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7777 a base class for DNSToSwitchMapping implementations\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1206515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/11 9:45 AM",
      "commitName": "783dbb4125900c5ec9bc28a4d57643581af8a63d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/10/11 7:26 PM",
      "commitNameOld": "29b51cc116a1e1732c06f8c4a69b2ecf012064a4",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 29.64,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     private String runResolveCommand(List\u003cString\u003e args) {\n       int loopCount \u003d 0;\n       if (args.size() \u003d\u003d 0) {\n         return null;\n       }\n       StringBuilder allOutput \u003d new StringBuilder();\n       int numProcessed \u003d 0;\n       if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n         LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n             + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n             + Integer.toString(MIN_ALLOWABLE_ARGS));\n         return null;\n       }\n \n       while (numProcessed !\u003d args.size()) {\n         int start \u003d maxArgs * loopCount;\n         List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n         cmdList.add(scriptName);\n         for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n             numProcessed \u003c args.size(); numProcessed++) {\n           cmdList.add(args.get(numProcessed));\n         }\n         File dir \u003d null;\n         String userDir;\n         if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n           dir \u003d new File(userDir);\n         }\n         ShellCommandExecutor s \u003d new ShellCommandExecutor(\n-            cmdList.toArray(new String[0]), dir);\n+            cmdList.toArray(new String[cmdList.size()]), dir);\n         try {\n           s.execute();\n-          allOutput.append(s.getOutput() + \" \");\n+          allOutput.append(s.getOutput()).append(\" \");\n         } catch (Exception e) {\n           LOG.warn(\"Exception: \", e);\n           return null;\n         }\n         loopCount++;\n       }\n       return allOutput.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String runResolveCommand(List\u003cString\u003e args) {\n      int loopCount \u003d 0;\n      if (args.size() \u003d\u003d 0) {\n        return null;\n      }\n      StringBuilder allOutput \u003d new StringBuilder();\n      int numProcessed \u003d 0;\n      if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n        LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n            + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n            + Integer.toString(MIN_ALLOWABLE_ARGS));\n        return null;\n      }\n\n      while (numProcessed !\u003d args.size()) {\n        int start \u003d maxArgs * loopCount;\n        List\u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n        cmdList.add(scriptName);\n        for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026\n            numProcessed \u003c args.size(); numProcessed++) {\n          cmdList.add(args.get(numProcessed));\n        }\n        File dir \u003d null;\n        String userDir;\n        if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n          dir \u003d new File(userDir);\n        }\n        ShellCommandExecutor s \u003d new ShellCommandExecutor(\n            cmdList.toArray(new String[cmdList.size()]), dir);\n        try {\n          s.execute();\n          allOutput.append(s.getOutput()).append(\" \");\n        } catch (Exception e) {\n          LOG.warn(\"Exception: \", e);\n          return null;\n        }\n        loopCount++;\n      }\n      return allOutput.toString();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String runResolveCommand(List\u003cString\u003e args) {\n    int loopCount \u003d 0;\n    if (args.size() \u003d\u003d 0) {\n      return null;\n    }\n    StringBuilder allOutput \u003d new StringBuilder();\n    int numProcessed \u003d 0;\n    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n          + Integer.toString(MIN_ALLOWABLE_ARGS));\n      return null;\n    }\n    \n    while (numProcessed !\u003d args.size()) {\n      int start \u003d maxArgs * loopCount;\n      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n      cmdList.add(scriptName);\n      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n           numProcessed \u003c args.size(); numProcessed++) {\n        cmdList.add(args.get(numProcessed)); \n      }\n      File dir \u003d null;\n      String userDir;\n      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n        dir \u003d new File(userDir);\n      }\n      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                   cmdList.toArray(new String[0]), dir);\n      try {\n        s.execute();\n        allOutput.append(s.getOutput() + \" \");\n      } catch (Exception e) {\n        LOG.warn(\"Exception: \", e);\n        return null;\n      }\n      loopCount++; \n    }\n    return allOutput.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String runResolveCommand(List\u003cString\u003e args) {\n    int loopCount \u003d 0;\n    if (args.size() \u003d\u003d 0) {\n      return null;\n    }\n    StringBuilder allOutput \u003d new StringBuilder();\n    int numProcessed \u003d 0;\n    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n          + Integer.toString(MIN_ALLOWABLE_ARGS));\n      return null;\n    }\n    \n    while (numProcessed !\u003d args.size()) {\n      int start \u003d maxArgs * loopCount;\n      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n      cmdList.add(scriptName);\n      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n           numProcessed \u003c args.size(); numProcessed++) {\n        cmdList.add(args.get(numProcessed)); \n      }\n      File dir \u003d null;\n      String userDir;\n      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n        dir \u003d new File(userDir);\n      }\n      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                   cmdList.toArray(new String[0]), dir);\n      try {\n        s.execute();\n        allOutput.append(s.getOutput() + \" \");\n      } catch (Exception e) {\n        LOG.warn(\"Exception: \", e);\n        return null;\n      }\n      loopCount++; \n    }\n    return allOutput.toString();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java"
      }
    },
    "1191be630ff05c9f1a540b952a8e34665f7fc181": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7385 Remove StringUtils.stringifyException(ie) in logger functions.  Contributed by Bharath Mundlapudi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139123 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/06/11 4:55 PM",
      "commitName": "1191be630ff05c9f1a540b952a8e34665f7fc181",
      "commitAuthor": "Tanping Wang",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.08,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private String runResolveCommand(List\u003cString\u003e args) {\n     int loopCount \u003d 0;\n     if (args.size() \u003d\u003d 0) {\n       return null;\n     }\n     StringBuilder allOutput \u003d new StringBuilder();\n     int numProcessed \u003d 0;\n     if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n       LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n           + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n           + Integer.toString(MIN_ALLOWABLE_ARGS));\n       return null;\n     }\n     \n     while (numProcessed !\u003d args.size()) {\n       int start \u003d maxArgs * loopCount;\n       List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n       cmdList.add(scriptName);\n       for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n            numProcessed \u003c args.size(); numProcessed++) {\n         cmdList.add(args.get(numProcessed)); \n       }\n       File dir \u003d null;\n       String userDir;\n       if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n         dir \u003d new File(userDir);\n       }\n       ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                    cmdList.toArray(new String[0]), dir);\n       try {\n         s.execute();\n         allOutput.append(s.getOutput() + \" \");\n       } catch (Exception e) {\n-        LOG.warn(StringUtils.stringifyException(e));\n+        LOG.warn(\"Exception: \", e);\n         return null;\n       }\n       loopCount++; \n     }\n     return allOutput.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String runResolveCommand(List\u003cString\u003e args) {\n    int loopCount \u003d 0;\n    if (args.size() \u003d\u003d 0) {\n      return null;\n    }\n    StringBuilder allOutput \u003d new StringBuilder();\n    int numProcessed \u003d 0;\n    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n          + Integer.toString(MIN_ALLOWABLE_ARGS));\n      return null;\n    }\n    \n    while (numProcessed !\u003d args.size()) {\n      int start \u003d maxArgs * loopCount;\n      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n      cmdList.add(scriptName);\n      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n           numProcessed \u003c args.size(); numProcessed++) {\n        cmdList.add(args.get(numProcessed)); \n      }\n      File dir \u003d null;\n      String userDir;\n      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n        dir \u003d new File(userDir);\n      }\n      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                   cmdList.toArray(new String[0]), dir);\n      try {\n        s.execute();\n        allOutput.append(s.getOutput() + \" \");\n      } catch (Exception e) {\n        LOG.warn(\"Exception: \", e);\n        return null;\n      }\n      loopCount++; \n    }\n    return allOutput.toString();\n  }",
      "path": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String runResolveCommand(List\u003cString\u003e args) {\n    int loopCount \u003d 0;\n    if (args.size() \u003d\u003d 0) {\n      return null;\n    }\n    StringBuilder allOutput \u003d new StringBuilder();\n    int numProcessed \u003d 0;\n    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n          + Integer.toString(MIN_ALLOWABLE_ARGS));\n      return null;\n    }\n    \n    while (numProcessed !\u003d args.size()) {\n      int start \u003d maxArgs * loopCount;\n      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n      cmdList.add(scriptName);\n      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n           numProcessed \u003c args.size(); numProcessed++) {\n        cmdList.add(args.get(numProcessed)); \n      }\n      File dir \u003d null;\n      String userDir;\n      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n        dir \u003d new File(userDir);\n      }\n      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                   cmdList.toArray(new String[0]), dir);\n      try {\n        s.execute();\n        allOutput.append(s.getOutput() + \" \");\n      } catch (Exception e) {\n        LOG.warn(StringUtils.stringifyException(e));\n        return null;\n      }\n      loopCount++; \n    }\n    return allOutput.toString();\n  }",
      "path": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
        "newPath": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java"
      }
    },
    "0485fe23ba76f7d96a198aed00f392fd571124bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6471. StringBuffer -\u003e StringBuilder - conversion of references as necessary. Contributed by Kay Kay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@926256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/10 12:08 PM",
      "commitName": "0485fe23ba76f7d96a198aed00f392fd571124bc",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/09/09 5:26 PM",
      "commitNameOld": "6ef2552953322f086fa63a11385c55b36d124d0b",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 184.78,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private String runResolveCommand(List\u003cString\u003e args) {\n     int loopCount \u003d 0;\n     if (args.size() \u003d\u003d 0) {\n       return null;\n     }\n-    StringBuffer allOutput \u003d new StringBuffer();\n+    StringBuilder allOutput \u003d new StringBuilder();\n     int numProcessed \u003d 0;\n     if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n       LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n           + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n           + Integer.toString(MIN_ALLOWABLE_ARGS));\n       return null;\n     }\n     \n     while (numProcessed !\u003d args.size()) {\n       int start \u003d maxArgs * loopCount;\n       List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n       cmdList.add(scriptName);\n       for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n            numProcessed \u003c args.size(); numProcessed++) {\n         cmdList.add(args.get(numProcessed)); \n       }\n       File dir \u003d null;\n       String userDir;\n       if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n         dir \u003d new File(userDir);\n       }\n       ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                    cmdList.toArray(new String[0]), dir);\n       try {\n         s.execute();\n         allOutput.append(s.getOutput() + \" \");\n       } catch (Exception e) {\n         LOG.warn(StringUtils.stringifyException(e));\n         return null;\n       }\n       loopCount++; \n     }\n     return allOutput.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String runResolveCommand(List\u003cString\u003e args) {\n    int loopCount \u003d 0;\n    if (args.size() \u003d\u003d 0) {\n      return null;\n    }\n    StringBuilder allOutput \u003d new StringBuilder();\n    int numProcessed \u003d 0;\n    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n          + Integer.toString(MIN_ALLOWABLE_ARGS));\n      return null;\n    }\n    \n    while (numProcessed !\u003d args.size()) {\n      int start \u003d maxArgs * loopCount;\n      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n      cmdList.add(scriptName);\n      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n           numProcessed \u003c args.size(); numProcessed++) {\n        cmdList.add(args.get(numProcessed)); \n      }\n      File dir \u003d null;\n      String userDir;\n      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n        dir \u003d new File(userDir);\n      }\n      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                   cmdList.toArray(new String[0]), dir);\n      try {\n        s.execute();\n        allOutput.append(s.getOutput() + \" \");\n      } catch (Exception e) {\n        LOG.warn(StringUtils.stringifyException(e));\n        return null;\n      }\n      loopCount++; \n    }\n    return allOutput.toString();\n  }",
      "path": "src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,40 @@\n+  private String runResolveCommand(List\u003cString\u003e args) {\n+    int loopCount \u003d 0;\n+    if (args.size() \u003d\u003d 0) {\n+      return null;\n+    }\n+    StringBuffer allOutput \u003d new StringBuffer();\n+    int numProcessed \u003d 0;\n+    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n+      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n+          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n+          + Integer.toString(MIN_ALLOWABLE_ARGS));\n+      return null;\n+    }\n+    \n+    while (numProcessed !\u003d args.size()) {\n+      int start \u003d maxArgs * loopCount;\n+      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n+      cmdList.add(scriptName);\n+      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n+           numProcessed \u003c args.size(); numProcessed++) {\n+        cmdList.add(args.get(numProcessed)); \n+      }\n+      File dir \u003d null;\n+      String userDir;\n+      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n+        dir \u003d new File(userDir);\n+      }\n+      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n+                                   cmdList.toArray(new String[0]), dir);\n+      try {\n+        s.execute();\n+        allOutput.append(s.getOutput() + \" \");\n+      } catch (Exception e) {\n+        LOG.warn(StringUtils.stringifyException(e));\n+        return null;\n+      }\n+      loopCount++; \n+    }\n+    return allOutput.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String runResolveCommand(List\u003cString\u003e args) {\n    int loopCount \u003d 0;\n    if (args.size() \u003d\u003d 0) {\n      return null;\n    }\n    StringBuffer allOutput \u003d new StringBuffer();\n    int numProcessed \u003d 0;\n    if (maxArgs \u003c MIN_ALLOWABLE_ARGS) {\n      LOG.warn(\"Invalid value \" + Integer.toString(maxArgs)\n          + \" for \" + SCRIPT_ARG_COUNT_KEY + \"; must be \u003e\u003d \"\n          + Integer.toString(MIN_ALLOWABLE_ARGS));\n      return null;\n    }\n    \n    while (numProcessed !\u003d args.size()) {\n      int start \u003d maxArgs * loopCount;\n      List \u003cString\u003e cmdList \u003d new ArrayList\u003cString\u003e();\n      cmdList.add(scriptName);\n      for (numProcessed \u003d start; numProcessed \u003c (start + maxArgs) \u0026\u0026 \n           numProcessed \u003c args.size(); numProcessed++) {\n        cmdList.add(args.get(numProcessed)); \n      }\n      File dir \u003d null;\n      String userDir;\n      if ((userDir \u003d System.getProperty(\"user.dir\")) !\u003d null) {\n        dir \u003d new File(userDir);\n      }\n      ShellCommandExecutor s \u003d new ShellCommandExecutor(\n                                   cmdList.toArray(new String[0]), dir);\n      try {\n        s.execute();\n        allOutput.append(s.getOutput() + \" \");\n      } catch (Exception e) {\n        LOG.warn(StringUtils.stringifyException(e));\n        return null;\n      }\n      loopCount++; \n    }\n    return allOutput.toString();\n  }",
      "path": "src/java/org/apache/hadoop/net/ScriptBasedMapping.java"
    }
  }
}