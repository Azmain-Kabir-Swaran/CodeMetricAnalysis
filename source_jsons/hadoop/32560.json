{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLogsPage.java",
  "functionName": "printLocalLogFile",
  "functionId": "printLocalLogFile___html-Block__logFile-File",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
  "functionStartLine": 182,
  "functionEndLine": 250,
  "numCommitsSeen": 38,
  "timeTaken": 4269,
  "changeHistory": [
    "631b5c2db733b0733a779e843b8035f68d0fcdf3",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "41a548a916d4248164cb9495320f123ec215d70e",
    "a759abcd898224c3481c55aa7e424bc286f60b15",
    "5420f287ccc83df69b6725942754c82b89e46b3e",
    "ae15ad6202c15f05d31e331decdbc352485b6671",
    "67673227f22f0599593081d3f62378cce3c8cae5",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cda16311a90134a50c57585831218c7b43827693",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449"
  ],
  "changeHistoryShort": {
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": "Yrename",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "41a548a916d4248164cb9495320f123ec215d70e": "Ybodychange",
    "a759abcd898224c3481c55aa7e424bc286f60b15": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "5420f287ccc83df69b6725942754c82b89e46b3e": "Ybodychange",
    "ae15ad6202c15f05d31e331decdbc352485b6671": "Ybodychange",
    "67673227f22f0599593081d3f62378cce3c8cae5": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cda16311a90134a50c57585831218c7b43827693": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Yintroduced"
  },
  "changeHistoryDetails": {
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": {
      "type": "Yrename",
      "commitMessage": "YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)\n\nChange-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec\n",
      "commitDate": "15/12/17 3:38 PM",
      "commitName": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 140.98,
      "commitsBetweenForRepo": 1187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n-    private void printLogFile(Block html, File logFile) {\n+    private void printLocalLogFile(Block html, File logFile) {\n       long start \u003d\n           $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n       start \u003d start \u003c 0 ? logFile.length() + start : start;\n       start \u003d start \u003c 0 ? 0 : start;\n       long end \u003d\n           $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n       end \u003d end \u003c 0 ? logFile.length() + end : end;\n       end \u003d end \u003c 0 ? logFile.length() : end;\n       if (start \u003e end) {\n         html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n             + \", end[\" + end + \"]\");\n         return;\n       } else {\n         FileInputStream logByteStream \u003d null;\n \n         try {\n           logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n               logFile, nmContext);\n         } catch (IOException ex) {\n           html.h1(ex.getMessage());\n           return;\n         }\n         \n         try {\n           long toRead \u003d end - start;\n           if (toRead \u003c logFile.length()) {\n             html.p().__(\"Showing \" + toRead + \" bytes. Click \")\n                 .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                     logFile.getName(), \"?start\u003d0\"), \"here\").\n                 __(\" for full log\").__();\n           }\n           \n           IOUtils.skipFully(logByteStream, start);\n           InputStreamReader reader \u003d\n               new InputStreamReader(logByteStream, Charset.forName(\"UTF-8\"));\n           int bufferSize \u003d 65536;\n           char[] cbuf \u003d new char[bufferSize];\n \n           int len \u003d 0;\n           int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n           PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n           while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n               \u0026\u0026 toRead \u003e 0) {\n             pre.__(new String(cbuf, 0, len));\n             toRead \u003d toRead - len;\n             currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n           }\n \n           pre.__();\n           reader.close();\n \n         } catch (IOException e) {\n           LOG.error(\n               \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n           html.h1(\"Exception reading log file. It might be because log \"\n                 + \"file was aggregated : \" + logFile.getName());\n         } finally {\n           if (logByteStream !\u003d null) {\n             try {\n               logByteStream.close();\n             } catch (IOException e) {\n               // Ignore\n             }\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLocalLogFile(Block html, File logFile) {\n      long start \u003d\n          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n      start \u003d start \u003c 0 ? logFile.length() + start : start;\n      start \u003d start \u003c 0 ? 0 : start;\n      long end \u003d\n          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n      end \u003d end \u003c 0 ? logFile.length() + end : end;\n      end \u003d end \u003c 0 ? logFile.length() : end;\n      if (start \u003e end) {\n        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n            + \", end[\" + end + \"]\");\n        return;\n      } else {\n        FileInputStream logByteStream \u003d null;\n\n        try {\n          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n              logFile, nmContext);\n        } catch (IOException ex) {\n          html.h1(ex.getMessage());\n          return;\n        }\n        \n        try {\n          long toRead \u003d end - start;\n          if (toRead \u003c logFile.length()) {\n            html.p().__(\"Showing \" + toRead + \" bytes. Click \")\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d0\"), \"here\").\n                __(\" for full log\").__();\n          }\n          \n          IOUtils.skipFully(logByteStream, start);\n          InputStreamReader reader \u003d\n              new InputStreamReader(logByteStream, Charset.forName(\"UTF-8\"));\n          int bufferSize \u003d 65536;\n          char[] cbuf \u003d new char[bufferSize];\n\n          int len \u003d 0;\n          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n              \u0026\u0026 toRead \u003e 0) {\n            pre.__(new String(cbuf, 0, len));\n            toRead \u003d toRead - len;\n            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          }\n\n          pre.__();\n          reader.close();\n\n        } catch (IOException e) {\n          LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n          html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n        } finally {\n          if (logByteStream !\u003d null) {\n            try {\n              logByteStream.close();\n            } catch (IOException e) {\n              // Ignore\n            }\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {
        "oldValue": "printLogFile",
        "newValue": "printLocalLogFile"
      }
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 408.09,
      "commitsBetweenForRepo": 2572,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n     private void printLogFile(Block html, File logFile) {\n       long start \u003d\n           $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n       start \u003d start \u003c 0 ? logFile.length() + start : start;\n       start \u003d start \u003c 0 ? 0 : start;\n       long end \u003d\n           $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n       end \u003d end \u003c 0 ? logFile.length() + end : end;\n       end \u003d end \u003c 0 ? logFile.length() : end;\n       if (start \u003e end) {\n         html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n             + \", end[\" + end + \"]\");\n         return;\n       } else {\n         FileInputStream logByteStream \u003d null;\n \n         try {\n           logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n               logFile, nmContext);\n         } catch (IOException ex) {\n           html.h1(ex.getMessage());\n           return;\n         }\n         \n         try {\n           long toRead \u003d end - start;\n           if (toRead \u003c logFile.length()) {\n-            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n+            html.p().__(\"Showing \" + toRead + \" bytes. Click \")\n                 .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                     logFile.getName(), \"?start\u003d0\"), \"here\").\n-                    _(\" for full log\")._();\n+                __(\" for full log\").__();\n           }\n           \n           IOUtils.skipFully(logByteStream, start);\n           InputStreamReader reader \u003d\n               new InputStreamReader(logByteStream, Charset.forName(\"UTF-8\"));\n           int bufferSize \u003d 65536;\n           char[] cbuf \u003d new char[bufferSize];\n \n           int len \u003d 0;\n           int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n           PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n           while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n               \u0026\u0026 toRead \u003e 0) {\n-            pre._(new String(cbuf, 0, len));\n+            pre.__(new String(cbuf, 0, len));\n             toRead \u003d toRead - len;\n             currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n           }\n \n-          pre._();\n+          pre.__();\n           reader.close();\n \n         } catch (IOException e) {\n           LOG.error(\n               \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n           html.h1(\"Exception reading log file. It might be because log \"\n                 + \"file was aggregated : \" + logFile.getName());\n         } finally {\n           if (logByteStream !\u003d null) {\n             try {\n               logByteStream.close();\n             } catch (IOException e) {\n               // Ignore\n             }\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogFile(Block html, File logFile) {\n      long start \u003d\n          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n      start \u003d start \u003c 0 ? logFile.length() + start : start;\n      start \u003d start \u003c 0 ? 0 : start;\n      long end \u003d\n          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n      end \u003d end \u003c 0 ? logFile.length() + end : end;\n      end \u003d end \u003c 0 ? logFile.length() : end;\n      if (start \u003e end) {\n        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n            + \", end[\" + end + \"]\");\n        return;\n      } else {\n        FileInputStream logByteStream \u003d null;\n\n        try {\n          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n              logFile, nmContext);\n        } catch (IOException ex) {\n          html.h1(ex.getMessage());\n          return;\n        }\n        \n        try {\n          long toRead \u003d end - start;\n          if (toRead \u003c logFile.length()) {\n            html.p().__(\"Showing \" + toRead + \" bytes. Click \")\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d0\"), \"here\").\n                __(\" for full log\").__();\n          }\n          \n          IOUtils.skipFully(logByteStream, start);\n          InputStreamReader reader \u003d\n              new InputStreamReader(logByteStream, Charset.forName(\"UTF-8\"));\n          int bufferSize \u003d 65536;\n          char[] cbuf \u003d new char[bufferSize];\n\n          int len \u003d 0;\n          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n              \u0026\u0026 toRead \u003e 0) {\n            pre.__(new String(cbuf, 0, len));\n            toRead \u003d toRead - len;\n            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          }\n\n          pre.__();\n          reader.close();\n\n        } catch (IOException e) {\n          LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n          html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n        } finally {\n          if (logByteStream !\u003d null) {\n            try {\n              logByteStream.close();\n            } catch (IOException e) {\n              // Ignore\n            }\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "41a548a916d4248164cb9495320f123ec215d70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2937. Fixed new findbugs warnings in hadoop-yarn-nodemanager. Contributed by Varun Saxena.\n",
      "commitDate": "23/12/14 8:32 PM",
      "commitName": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "01/09/13 5:09 PM",
      "commitNameOld": "a759abcd898224c3481c55aa7e424bc286f60b15",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 478.18,
      "commitsBetweenForRepo": 3633,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n     private void printLogFile(Block html, File logFile) {\n       long start \u003d\n           $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n       start \u003d start \u003c 0 ? logFile.length() + start : start;\n       start \u003d start \u003c 0 ? 0 : start;\n       long end \u003d\n           $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n       end \u003d end \u003c 0 ? logFile.length() + end : end;\n       end \u003d end \u003c 0 ? logFile.length() : end;\n       if (start \u003e end) {\n         html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n             + \", end[\" + end + \"]\");\n         return;\n       } else {\n         FileInputStream logByteStream \u003d null;\n \n         try {\n           logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n               logFile, nmContext);\n         } catch (IOException ex) {\n           html.h1(ex.getMessage());\n           return;\n         }\n         \n         try {\n           long toRead \u003d end - start;\n           if (toRead \u003c logFile.length()) {\n             html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                 .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                     logFile.getName(), \"?start\u003d0\"), \"here\").\n                     _(\" for full log\")._();\n           }\n           \n           IOUtils.skipFully(logByteStream, start);\n-          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n+          InputStreamReader reader \u003d\n+              new InputStreamReader(logByteStream, Charset.forName(\"UTF-8\"));\n           int bufferSize \u003d 65536;\n           char[] cbuf \u003d new char[bufferSize];\n \n           int len \u003d 0;\n           int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n           PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n           while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n               \u0026\u0026 toRead \u003e 0) {\n             pre._(new String(cbuf, 0, len));\n             toRead \u003d toRead - len;\n             currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n           }\n \n           pre._();\n           reader.close();\n \n         } catch (IOException e) {\n           LOG.error(\n               \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n           html.h1(\"Exception reading log file. It might be because log \"\n                 + \"file was aggregated : \" + logFile.getName());\n         } finally {\n           if (logByteStream !\u003d null) {\n             try {\n               logByteStream.close();\n             } catch (IOException e) {\n               // Ignore\n             }\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogFile(Block html, File logFile) {\n      long start \u003d\n          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n      start \u003d start \u003c 0 ? logFile.length() + start : start;\n      start \u003d start \u003c 0 ? 0 : start;\n      long end \u003d\n          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n      end \u003d end \u003c 0 ? logFile.length() + end : end;\n      end \u003d end \u003c 0 ? logFile.length() : end;\n      if (start \u003e end) {\n        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n            + \", end[\" + end + \"]\");\n        return;\n      } else {\n        FileInputStream logByteStream \u003d null;\n\n        try {\n          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n              logFile, nmContext);\n        } catch (IOException ex) {\n          html.h1(ex.getMessage());\n          return;\n        }\n        \n        try {\n          long toRead \u003d end - start;\n          if (toRead \u003c logFile.length()) {\n            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d0\"), \"here\").\n                    _(\" for full log\")._();\n          }\n          \n          IOUtils.skipFully(logByteStream, start);\n          InputStreamReader reader \u003d\n              new InputStreamReader(logByteStream, Charset.forName(\"UTF-8\"));\n          int bufferSize \u003d 65536;\n          char[] cbuf \u003d new char[bufferSize];\n\n          int len \u003d 0;\n          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n              \u0026\u0026 toRead \u003e 0) {\n            pre._(new String(cbuf, 0, len));\n            toRead \u003d toRead - len;\n            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          }\n\n          pre._();\n          reader.close();\n\n        } catch (IOException e) {\n          LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n          html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n        } finally {\n          if (logByteStream !\u003d null) {\n            try {\n              logByteStream.close();\n            } catch (IOException e) {\n              // Ignore\n            }\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "a759abcd898224c3481c55aa7e424bc286f60b15": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-649. Added a new NM web-service to serve container logs in plain text over HTTP. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519326 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/09/13 5:09 PM",
      "commitName": "a759abcd898224c3481c55aa7e424bc286f60b15",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-649. Added a new NM web-service to serve container logs in plain text over HTTP. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519326 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/09/13 5:09 PM",
          "commitName": "a759abcd898224c3481c55aa7e424bc286f60b15",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/05/13 4:14 PM",
          "commitNameOld": "5420f287ccc83df69b6725942754c82b89e46b3e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 95.04,
          "commitsBetweenForRepo": 609,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,140 +1,68 @@\n-    private void printLogs(Block html, ContainerId containerId,\n-        ApplicationId applicationId, Application application) {\n-      // Check for the authorization.\n-      String remoteUser \u003d request().getRemoteUser();\n-      UserGroupInformation callerUGI \u003d null;\n-\n-      if (remoteUser !\u003d null) {\n-        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n-      }\n-      if (callerUGI !\u003d null\n-          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n-              ApplicationAccessType.VIEW_APP, application.getUser(),\n-              applicationId)) {\n-        html.h1(\n-            \"User [\" + remoteUser\n-                + \"] is not authorized to view the logs for application \"\n-                + applicationId);\n+    private void printLogFile(Block html, File logFile) {\n+      long start \u003d\n+          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n+      start \u003d start \u003c 0 ? logFile.length() + start : start;\n+      start \u003d start \u003c 0 ? 0 : start;\n+      long end \u003d\n+          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n+      end \u003d end \u003c 0 ? logFile.length() + end : end;\n+      end \u003d end \u003c 0 ? logFile.length() : end;\n+      if (start \u003e end) {\n+        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n+            + \", end[\" + end + \"]\");\n         return;\n-      }\n-\n-      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n-        File logFile \u003d null;\n-        try {\n-          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n-              ContainerLaunch.getRelativeContainerLogDir(\n-                  applicationId.toString(), containerId.toString())\n-                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n-          logFile \u003d new File(logPathURI.getPath());\n-        } catch (URISyntaxException e) {\n-          html.h1(\"Cannot find this log on the local disk.\");\n-          return;\n-        } catch (Exception e) {\n-          html.h1(\"Cannot find this log on the local disk.\");\n-          return;\n-        }\n-        long start \u003d\n-            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n-        start \u003d start \u003c 0 ? logFile.length() + start : start;\n-        start \u003d start \u003c 0 ? 0 : start;\n-        long end \u003d\n-            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n-        end \u003d end \u003c 0 ? logFile.length() + end : end;\n-        end \u003d end \u003c 0 ? logFile.length() : end;\n-        if (start \u003e end) {\n-          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n-              + \", end[\" + end + \"]\");\n-          return;\n-        } else {\n-          FileInputStream logByteStream \u003d null;\n-          \n-          try {\n-            logByteStream \u003d\n-                SecureIOUtils.openForRead(logFile, application.getUser(), null);\n-          }  catch (IOException e) {\n-            LOG.error(\n-              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n-            if (e.getMessage().contains(\n-              \"did not match expected owner \u0027\" + application.getUser()\n-                  + \"\u0027\")) {\n-              html.h1(\"Exception reading log file. Application submitted by \u0027\"\n-                  + application.getUser()\n-                  + \"\u0027 doesn\u0027t own requested log file : \"\n-                  + logFile.getName());\n-            } else {\n-              html.h1(\"Exception reading log file. It might be because log \"\n-                  + \"file was aggregated : \" + logFile.getName());\n-            }\n-            return;\n-          }\n-          \n-          try {\n-            long toRead \u003d end - start;\n-            if (toRead \u003c logFile.length()) {\n-              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n-                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n-                      logFile.getName(), \"?start\u003d0\"), \"here\").\n-                      _(\" for full log\")._();\n-            }\n-            // TODO Fix findBugs close warning along with IOUtils change\n-            IOUtils.skipFully(logByteStream, start);\n-            InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n-            int bufferSize \u003d 65536;\n-            char[] cbuf \u003d new char[bufferSize];\n-\n-            int len \u003d 0;\n-            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            PRE\u003cHamlet\u003e pre \u003d html.pre();\n-\n-            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n-                \u0026\u0026 toRead \u003e 0) {\n-              pre._(new String(cbuf, 0, len));\n-              toRead \u003d toRead - len;\n-              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            }\n-\n-            pre._();\n-            reader.close();\n-\n-          } catch (IOException e) {\n-            LOG.error(\n-              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n-            html.h1(\"Exception reading log file. It might be because log \"\n-                + \"file was aggregated : \" + logFile.getName());\n-          } finally {\n-            if (logByteStream !\u003d null) {\n-              try {\n-                logByteStream.close();\n-              } catch (IOException e) {\n-                // Ignore\n-              }\n-            }\n-          }\n-        }\n       } else {\n-        // Print out log types in lexical order\n-        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n-            dirsHandler);\n-        Collections.sort(containerLogsDirs);\n-        boolean foundLogFile \u003d false;\n-        for (File containerLogsDir : containerLogsDirs) {\n-          File[] logFiles \u003d containerLogsDir.listFiles();\n-          if (logFiles !\u003d null) {\n-            Arrays.sort(logFiles);\n-            for (File logFile : logFiles) {\n-              foundLogFile \u003d true;\n-              html.p()\n-                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n-                      logFile.getName(), \"?start\u003d-4096\"),\n-                      logFile.getName() + \" : Total file length is \"\n-                          + logFile.length() + \" bytes.\")._();\n+        FileInputStream logByteStream \u003d null;\n+\n+        try {\n+          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n+              logFile, nmContext);\n+        } catch (IOException ex) {\n+          html.h1(ex.getMessage());\n+          return;\n+        }\n+        \n+        try {\n+          long toRead \u003d end - start;\n+          if (toRead \u003c logFile.length()) {\n+            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n+                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n+                    logFile.getName(), \"?start\u003d0\"), \"here\").\n+                    _(\" for full log\")._();\n+          }\n+          \n+          IOUtils.skipFully(logByteStream, start);\n+          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n+          int bufferSize \u003d 65536;\n+          char[] cbuf \u003d new char[bufferSize];\n+\n+          int len \u003d 0;\n+          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+          PRE\u003cHamlet\u003e pre \u003d html.pre();\n+\n+          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n+              \u0026\u0026 toRead \u003e 0) {\n+            pre._(new String(cbuf, 0, len));\n+            toRead \u003d toRead - len;\n+            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+          }\n+\n+          pre._();\n+          reader.close();\n+\n+        } catch (IOException e) {\n+          LOG.error(\n+              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n+          html.h1(\"Exception reading log file. It might be because log \"\n+                + \"file was aggregated : \" + logFile.getName());\n+        } finally {\n+          if (logByteStream !\u003d null) {\n+            try {\n+              logByteStream.close();\n+            } catch (IOException e) {\n+              // Ignore\n             }\n           }\n         }\n-        if (!foundLogFile) {\n-          html.h1(\"No logs available for container \" + containerId.toString());\n-          return;\n-        }\n       }\n-      return;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void printLogFile(Block html, File logFile) {\n      long start \u003d\n          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n      start \u003d start \u003c 0 ? logFile.length() + start : start;\n      start \u003d start \u003c 0 ? 0 : start;\n      long end \u003d\n          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n      end \u003d end \u003c 0 ? logFile.length() + end : end;\n      end \u003d end \u003c 0 ? logFile.length() : end;\n      if (start \u003e end) {\n        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n            + \", end[\" + end + \"]\");\n        return;\n      } else {\n        FileInputStream logByteStream \u003d null;\n\n        try {\n          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n              logFile, nmContext);\n        } catch (IOException ex) {\n          html.h1(ex.getMessage());\n          return;\n        }\n        \n        try {\n          long toRead \u003d end - start;\n          if (toRead \u003c logFile.length()) {\n            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d0\"), \"here\").\n                    _(\" for full log\")._();\n          }\n          \n          IOUtils.skipFully(logByteStream, start);\n          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n          int bufferSize \u003d 65536;\n          char[] cbuf \u003d new char[bufferSize];\n\n          int len \u003d 0;\n          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n              \u0026\u0026 toRead \u003e 0) {\n            pre._(new String(cbuf, 0, len));\n            toRead \u003d toRead - len;\n            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          }\n\n          pre._();\n          reader.close();\n\n        } catch (IOException e) {\n          LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n          html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n        } finally {\n          if (logByteStream !\u003d null) {\n            try {\n              logByteStream.close();\n            } catch (IOException e) {\n              // Ignore\n            }\n          }\n        }\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
          "extendedDetails": {
            "oldValue": "printLogs",
            "newValue": "printLogFile"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-649. Added a new NM web-service to serve container logs in plain text over HTTP. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519326 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/09/13 5:09 PM",
          "commitName": "a759abcd898224c3481c55aa7e424bc286f60b15",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/05/13 4:14 PM",
          "commitNameOld": "5420f287ccc83df69b6725942754c82b89e46b3e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 95.04,
          "commitsBetweenForRepo": 609,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,140 +1,68 @@\n-    private void printLogs(Block html, ContainerId containerId,\n-        ApplicationId applicationId, Application application) {\n-      // Check for the authorization.\n-      String remoteUser \u003d request().getRemoteUser();\n-      UserGroupInformation callerUGI \u003d null;\n-\n-      if (remoteUser !\u003d null) {\n-        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n-      }\n-      if (callerUGI !\u003d null\n-          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n-              ApplicationAccessType.VIEW_APP, application.getUser(),\n-              applicationId)) {\n-        html.h1(\n-            \"User [\" + remoteUser\n-                + \"] is not authorized to view the logs for application \"\n-                + applicationId);\n+    private void printLogFile(Block html, File logFile) {\n+      long start \u003d\n+          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n+      start \u003d start \u003c 0 ? logFile.length() + start : start;\n+      start \u003d start \u003c 0 ? 0 : start;\n+      long end \u003d\n+          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n+      end \u003d end \u003c 0 ? logFile.length() + end : end;\n+      end \u003d end \u003c 0 ? logFile.length() : end;\n+      if (start \u003e end) {\n+        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n+            + \", end[\" + end + \"]\");\n         return;\n-      }\n-\n-      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n-        File logFile \u003d null;\n-        try {\n-          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n-              ContainerLaunch.getRelativeContainerLogDir(\n-                  applicationId.toString(), containerId.toString())\n-                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n-          logFile \u003d new File(logPathURI.getPath());\n-        } catch (URISyntaxException e) {\n-          html.h1(\"Cannot find this log on the local disk.\");\n-          return;\n-        } catch (Exception e) {\n-          html.h1(\"Cannot find this log on the local disk.\");\n-          return;\n-        }\n-        long start \u003d\n-            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n-        start \u003d start \u003c 0 ? logFile.length() + start : start;\n-        start \u003d start \u003c 0 ? 0 : start;\n-        long end \u003d\n-            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n-        end \u003d end \u003c 0 ? logFile.length() + end : end;\n-        end \u003d end \u003c 0 ? logFile.length() : end;\n-        if (start \u003e end) {\n-          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n-              + \", end[\" + end + \"]\");\n-          return;\n-        } else {\n-          FileInputStream logByteStream \u003d null;\n-          \n-          try {\n-            logByteStream \u003d\n-                SecureIOUtils.openForRead(logFile, application.getUser(), null);\n-          }  catch (IOException e) {\n-            LOG.error(\n-              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n-            if (e.getMessage().contains(\n-              \"did not match expected owner \u0027\" + application.getUser()\n-                  + \"\u0027\")) {\n-              html.h1(\"Exception reading log file. Application submitted by \u0027\"\n-                  + application.getUser()\n-                  + \"\u0027 doesn\u0027t own requested log file : \"\n-                  + logFile.getName());\n-            } else {\n-              html.h1(\"Exception reading log file. It might be because log \"\n-                  + \"file was aggregated : \" + logFile.getName());\n-            }\n-            return;\n-          }\n-          \n-          try {\n-            long toRead \u003d end - start;\n-            if (toRead \u003c logFile.length()) {\n-              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n-                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n-                      logFile.getName(), \"?start\u003d0\"), \"here\").\n-                      _(\" for full log\")._();\n-            }\n-            // TODO Fix findBugs close warning along with IOUtils change\n-            IOUtils.skipFully(logByteStream, start);\n-            InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n-            int bufferSize \u003d 65536;\n-            char[] cbuf \u003d new char[bufferSize];\n-\n-            int len \u003d 0;\n-            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            PRE\u003cHamlet\u003e pre \u003d html.pre();\n-\n-            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n-                \u0026\u0026 toRead \u003e 0) {\n-              pre._(new String(cbuf, 0, len));\n-              toRead \u003d toRead - len;\n-              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            }\n-\n-            pre._();\n-            reader.close();\n-\n-          } catch (IOException e) {\n-            LOG.error(\n-              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n-            html.h1(\"Exception reading log file. It might be because log \"\n-                + \"file was aggregated : \" + logFile.getName());\n-          } finally {\n-            if (logByteStream !\u003d null) {\n-              try {\n-                logByteStream.close();\n-              } catch (IOException e) {\n-                // Ignore\n-              }\n-            }\n-          }\n-        }\n       } else {\n-        // Print out log types in lexical order\n-        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n-            dirsHandler);\n-        Collections.sort(containerLogsDirs);\n-        boolean foundLogFile \u003d false;\n-        for (File containerLogsDir : containerLogsDirs) {\n-          File[] logFiles \u003d containerLogsDir.listFiles();\n-          if (logFiles !\u003d null) {\n-            Arrays.sort(logFiles);\n-            for (File logFile : logFiles) {\n-              foundLogFile \u003d true;\n-              html.p()\n-                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n-                      logFile.getName(), \"?start\u003d-4096\"),\n-                      logFile.getName() + \" : Total file length is \"\n-                          + logFile.length() + \" bytes.\")._();\n+        FileInputStream logByteStream \u003d null;\n+\n+        try {\n+          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n+              logFile, nmContext);\n+        } catch (IOException ex) {\n+          html.h1(ex.getMessage());\n+          return;\n+        }\n+        \n+        try {\n+          long toRead \u003d end - start;\n+          if (toRead \u003c logFile.length()) {\n+            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n+                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n+                    logFile.getName(), \"?start\u003d0\"), \"here\").\n+                    _(\" for full log\")._();\n+          }\n+          \n+          IOUtils.skipFully(logByteStream, start);\n+          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n+          int bufferSize \u003d 65536;\n+          char[] cbuf \u003d new char[bufferSize];\n+\n+          int len \u003d 0;\n+          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+          PRE\u003cHamlet\u003e pre \u003d html.pre();\n+\n+          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n+              \u0026\u0026 toRead \u003e 0) {\n+            pre._(new String(cbuf, 0, len));\n+            toRead \u003d toRead - len;\n+            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+          }\n+\n+          pre._();\n+          reader.close();\n+\n+        } catch (IOException e) {\n+          LOG.error(\n+              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n+          html.h1(\"Exception reading log file. It might be because log \"\n+                + \"file was aggregated : \" + logFile.getName());\n+        } finally {\n+          if (logByteStream !\u003d null) {\n+            try {\n+              logByteStream.close();\n+            } catch (IOException e) {\n+              // Ignore\n             }\n           }\n         }\n-        if (!foundLogFile) {\n-          html.h1(\"No logs available for container \" + containerId.toString());\n-          return;\n-        }\n       }\n-      return;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void printLogFile(Block html, File logFile) {\n      long start \u003d\n          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n      start \u003d start \u003c 0 ? logFile.length() + start : start;\n      start \u003d start \u003c 0 ? 0 : start;\n      long end \u003d\n          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n      end \u003d end \u003c 0 ? logFile.length() + end : end;\n      end \u003d end \u003c 0 ? logFile.length() : end;\n      if (start \u003e end) {\n        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n            + \", end[\" + end + \"]\");\n        return;\n      } else {\n        FileInputStream logByteStream \u003d null;\n\n        try {\n          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n              logFile, nmContext);\n        } catch (IOException ex) {\n          html.h1(ex.getMessage());\n          return;\n        }\n        \n        try {\n          long toRead \u003d end - start;\n          if (toRead \u003c logFile.length()) {\n            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d0\"), \"here\").\n                    _(\" for full log\")._();\n          }\n          \n          IOUtils.skipFully(logByteStream, start);\n          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n          int bufferSize \u003d 65536;\n          char[] cbuf \u003d new char[bufferSize];\n\n          int len \u003d 0;\n          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n              \u0026\u0026 toRead \u003e 0) {\n            pre._(new String(cbuf, 0, len));\n            toRead \u003d toRead - len;\n            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          }\n\n          pre._();\n          reader.close();\n\n        } catch (IOException e) {\n          LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n          html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n        } finally {\n          if (logByteStream !\u003d null) {\n            try {\n              logByteStream.close();\n            } catch (IOException e) {\n              // Ignore\n            }\n          }\n        }\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
          "extendedDetails": {
            "oldValue": "[html-Block, containerId-ContainerId, applicationId-ApplicationId, application-Application]",
            "newValue": "[html-Block, logFile-File]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-649. Added a new NM web-service to serve container logs in plain text over HTTP. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519326 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/09/13 5:09 PM",
          "commitName": "a759abcd898224c3481c55aa7e424bc286f60b15",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/05/13 4:14 PM",
          "commitNameOld": "5420f287ccc83df69b6725942754c82b89e46b3e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 95.04,
          "commitsBetweenForRepo": 609,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,140 +1,68 @@\n-    private void printLogs(Block html, ContainerId containerId,\n-        ApplicationId applicationId, Application application) {\n-      // Check for the authorization.\n-      String remoteUser \u003d request().getRemoteUser();\n-      UserGroupInformation callerUGI \u003d null;\n-\n-      if (remoteUser !\u003d null) {\n-        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n-      }\n-      if (callerUGI !\u003d null\n-          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n-              ApplicationAccessType.VIEW_APP, application.getUser(),\n-              applicationId)) {\n-        html.h1(\n-            \"User [\" + remoteUser\n-                + \"] is not authorized to view the logs for application \"\n-                + applicationId);\n+    private void printLogFile(Block html, File logFile) {\n+      long start \u003d\n+          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n+      start \u003d start \u003c 0 ? logFile.length() + start : start;\n+      start \u003d start \u003c 0 ? 0 : start;\n+      long end \u003d\n+          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n+      end \u003d end \u003c 0 ? logFile.length() + end : end;\n+      end \u003d end \u003c 0 ? logFile.length() : end;\n+      if (start \u003e end) {\n+        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n+            + \", end[\" + end + \"]\");\n         return;\n-      }\n-\n-      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n-        File logFile \u003d null;\n-        try {\n-          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n-              ContainerLaunch.getRelativeContainerLogDir(\n-                  applicationId.toString(), containerId.toString())\n-                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n-          logFile \u003d new File(logPathURI.getPath());\n-        } catch (URISyntaxException e) {\n-          html.h1(\"Cannot find this log on the local disk.\");\n-          return;\n-        } catch (Exception e) {\n-          html.h1(\"Cannot find this log on the local disk.\");\n-          return;\n-        }\n-        long start \u003d\n-            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n-        start \u003d start \u003c 0 ? logFile.length() + start : start;\n-        start \u003d start \u003c 0 ? 0 : start;\n-        long end \u003d\n-            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n-        end \u003d end \u003c 0 ? logFile.length() + end : end;\n-        end \u003d end \u003c 0 ? logFile.length() : end;\n-        if (start \u003e end) {\n-          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n-              + \", end[\" + end + \"]\");\n-          return;\n-        } else {\n-          FileInputStream logByteStream \u003d null;\n-          \n-          try {\n-            logByteStream \u003d\n-                SecureIOUtils.openForRead(logFile, application.getUser(), null);\n-          }  catch (IOException e) {\n-            LOG.error(\n-              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n-            if (e.getMessage().contains(\n-              \"did not match expected owner \u0027\" + application.getUser()\n-                  + \"\u0027\")) {\n-              html.h1(\"Exception reading log file. Application submitted by \u0027\"\n-                  + application.getUser()\n-                  + \"\u0027 doesn\u0027t own requested log file : \"\n-                  + logFile.getName());\n-            } else {\n-              html.h1(\"Exception reading log file. It might be because log \"\n-                  + \"file was aggregated : \" + logFile.getName());\n-            }\n-            return;\n-          }\n-          \n-          try {\n-            long toRead \u003d end - start;\n-            if (toRead \u003c logFile.length()) {\n-              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n-                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n-                      logFile.getName(), \"?start\u003d0\"), \"here\").\n-                      _(\" for full log\")._();\n-            }\n-            // TODO Fix findBugs close warning along with IOUtils change\n-            IOUtils.skipFully(logByteStream, start);\n-            InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n-            int bufferSize \u003d 65536;\n-            char[] cbuf \u003d new char[bufferSize];\n-\n-            int len \u003d 0;\n-            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            PRE\u003cHamlet\u003e pre \u003d html.pre();\n-\n-            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n-                \u0026\u0026 toRead \u003e 0) {\n-              pre._(new String(cbuf, 0, len));\n-              toRead \u003d toRead - len;\n-              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            }\n-\n-            pre._();\n-            reader.close();\n-\n-          } catch (IOException e) {\n-            LOG.error(\n-              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n-            html.h1(\"Exception reading log file. It might be because log \"\n-                + \"file was aggregated : \" + logFile.getName());\n-          } finally {\n-            if (logByteStream !\u003d null) {\n-              try {\n-                logByteStream.close();\n-              } catch (IOException e) {\n-                // Ignore\n-              }\n-            }\n-          }\n-        }\n       } else {\n-        // Print out log types in lexical order\n-        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n-            dirsHandler);\n-        Collections.sort(containerLogsDirs);\n-        boolean foundLogFile \u003d false;\n-        for (File containerLogsDir : containerLogsDirs) {\n-          File[] logFiles \u003d containerLogsDir.listFiles();\n-          if (logFiles !\u003d null) {\n-            Arrays.sort(logFiles);\n-            for (File logFile : logFiles) {\n-              foundLogFile \u003d true;\n-              html.p()\n-                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n-                      logFile.getName(), \"?start\u003d-4096\"),\n-                      logFile.getName() + \" : Total file length is \"\n-                          + logFile.length() + \" bytes.\")._();\n+        FileInputStream logByteStream \u003d null;\n+\n+        try {\n+          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n+              logFile, nmContext);\n+        } catch (IOException ex) {\n+          html.h1(ex.getMessage());\n+          return;\n+        }\n+        \n+        try {\n+          long toRead \u003d end - start;\n+          if (toRead \u003c logFile.length()) {\n+            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n+                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n+                    logFile.getName(), \"?start\u003d0\"), \"here\").\n+                    _(\" for full log\")._();\n+          }\n+          \n+          IOUtils.skipFully(logByteStream, start);\n+          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n+          int bufferSize \u003d 65536;\n+          char[] cbuf \u003d new char[bufferSize];\n+\n+          int len \u003d 0;\n+          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+          PRE\u003cHamlet\u003e pre \u003d html.pre();\n+\n+          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n+              \u0026\u0026 toRead \u003e 0) {\n+            pre._(new String(cbuf, 0, len));\n+            toRead \u003d toRead - len;\n+            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+          }\n+\n+          pre._();\n+          reader.close();\n+\n+        } catch (IOException e) {\n+          LOG.error(\n+              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n+          html.h1(\"Exception reading log file. It might be because log \"\n+                + \"file was aggregated : \" + logFile.getName());\n+        } finally {\n+          if (logByteStream !\u003d null) {\n+            try {\n+              logByteStream.close();\n+            } catch (IOException e) {\n+              // Ignore\n             }\n           }\n         }\n-        if (!foundLogFile) {\n-          html.h1(\"No logs available for container \" + containerId.toString());\n-          return;\n-        }\n       }\n-      return;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void printLogFile(Block html, File logFile) {\n      long start \u003d\n          $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n      start \u003d start \u003c 0 ? logFile.length() + start : start;\n      start \u003d start \u003c 0 ? 0 : start;\n      long end \u003d\n          $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n      end \u003d end \u003c 0 ? logFile.length() + end : end;\n      end \u003d end \u003c 0 ? logFile.length() : end;\n      if (start \u003e end) {\n        html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n            + \", end[\" + end + \"]\");\n        return;\n      } else {\n        FileInputStream logByteStream \u003d null;\n\n        try {\n          logByteStream \u003d ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),\n              logFile, nmContext);\n        } catch (IOException ex) {\n          html.h1(ex.getMessage());\n          return;\n        }\n        \n        try {\n          long toRead \u003d end - start;\n          if (toRead \u003c logFile.length()) {\n            html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d0\"), \"here\").\n                    _(\" for full log\")._();\n          }\n          \n          IOUtils.skipFully(logByteStream, start);\n          InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n          int bufferSize \u003d 65536;\n          char[] cbuf \u003d new char[bufferSize];\n\n          int len \u003d 0;\n          int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n          while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n              \u0026\u0026 toRead \u003e 0) {\n            pre._(new String(cbuf, 0, len));\n            toRead \u003d toRead - len;\n            currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n          }\n\n          pre._();\n          reader.close();\n\n        } catch (IOException e) {\n          LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n          html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n        } finally {\n          if (logByteStream !\u003d null) {\n            try {\n              logByteStream.close();\n            } catch (IOException e) {\n              // Ignore\n            }\n          }\n        }\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
          "extendedDetails": {}
        }
      ]
    },
    "5420f287ccc83df69b6725942754c82b89e46b3e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-578. Fixed NM to use SecureIOUtils for reading and aggregating logs. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 4:14 PM",
      "commitName": "5420f287ccc83df69b6725942754c82b89e46b3e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/11/12 11:22 AM",
      "commitNameOld": "397c261433fdc3748050905f748d4fc7f5474b46",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 196.16,
      "commitsBetweenForRepo": 1029,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,120 +1,140 @@\n     private void printLogs(Block html, ContainerId containerId,\n         ApplicationId applicationId, Application application) {\n       // Check for the authorization.\n       String remoteUser \u003d request().getRemoteUser();\n       UserGroupInformation callerUGI \u003d null;\n \n       if (remoteUser !\u003d null) {\n         callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       }\n       if (callerUGI !\u003d null\n           \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n               ApplicationAccessType.VIEW_APP, application.getUser(),\n               applicationId)) {\n         html.h1(\n             \"User [\" + remoteUser\n                 + \"] is not authorized to view the logs for application \"\n                 + applicationId);\n         return;\n       }\n \n       if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n         File logFile \u003d null;\n         try {\n           URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n               ContainerLaunch.getRelativeContainerLogDir(\n                   applicationId.toString(), containerId.toString())\n                   + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n           logFile \u003d new File(logPathURI.getPath());\n         } catch (URISyntaxException e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         } catch (Exception e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         }\n         long start \u003d\n             $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n         start \u003d start \u003c 0 ? logFile.length() + start : start;\n         start \u003d start \u003c 0 ? 0 : start;\n         long end \u003d\n             $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n         end \u003d end \u003c 0 ? logFile.length() + end : end;\n         end \u003d end \u003c 0 ? logFile.length() : end;\n         if (start \u003e end) {\n           html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n               + \", end[\" + end + \"]\");\n           return;\n         } else {\n           FileInputStream logByteStream \u003d null;\n+          \n+          try {\n+            logByteStream \u003d\n+                SecureIOUtils.openForRead(logFile, application.getUser(), null);\n+          }  catch (IOException e) {\n+            LOG.error(\n+              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n+            if (e.getMessage().contains(\n+              \"did not match expected owner \u0027\" + application.getUser()\n+                  + \"\u0027\")) {\n+              html.h1(\"Exception reading log file. Application submitted by \u0027\"\n+                  + application.getUser()\n+                  + \"\u0027 doesn\u0027t own requested log file : \"\n+                  + logFile.getName());\n+            } else {\n+              html.h1(\"Exception reading log file. It might be because log \"\n+                  + \"file was aggregated : \" + logFile.getName());\n+            }\n+            return;\n+          }\n+          \n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n               html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                       logFile.getName(), \"?start\u003d0\"), \"here\").\n                       _(\" for full log\")._();\n             }\n-            // TODO: Use secure IO Utils to avoid symlink attacks.\n             // TODO Fix findBugs close warning along with IOUtils change\n-            logByteStream \u003d new FileInputStream(logFile);\n             IOUtils.skipFully(logByteStream, start);\n-\n             InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n             int bufferSize \u003d 65536;\n             char[] cbuf \u003d new char[bufferSize];\n \n             int len \u003d 0;\n             int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n             while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                 \u0026\u0026 toRead \u003e 0) {\n               pre._(new String(cbuf, 0, len));\n               toRead \u003d toRead - len;\n               currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             }\n \n             pre._();\n             reader.close();\n \n           } catch (IOException e) {\n-            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n-                + StringUtils.stringifyException(e));\n+            LOG.error(\n+              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n+            html.h1(\"Exception reading log file. It might be because log \"\n+                + \"file was aggregated : \" + logFile.getName());\n           } finally {\n             if (logByteStream !\u003d null) {\n               try {\n                 logByteStream.close();\n               } catch (IOException e) {\n                 // Ignore\n               }\n             }\n           }\n         }\n       } else {\n         // Print out log types in lexical order\n         List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n             dirsHandler);\n         Collections.sort(containerLogsDirs);\n         boolean foundLogFile \u003d false;\n         for (File containerLogsDir : containerLogsDirs) {\n           File[] logFiles \u003d containerLogsDir.listFiles();\n           if (logFiles !\u003d null) {\n             Arrays.sort(logFiles);\n             for (File logFile : logFiles) {\n               foundLogFile \u003d true;\n               html.p()\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n                       logFile.getName(), \"?start\u003d-4096\"),\n                       logFile.getName() + \" : Total file length is \"\n                           + logFile.length() + \" bytes.\")._();\n             }\n           }\n         }\n         if (!foundLogFile) {\n           html.h1(\"No logs available for container \" + containerId.toString());\n           return;\n         }\n       }\n       return;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n              ContainerLaunch.getRelativeContainerLogDir(\n                  applicationId.toString(), containerId.toString())\n                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n          logFile \u003d new File(logPathURI.getPath());\n        } catch (URISyntaxException e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          FileInputStream logByteStream \u003d null;\n          \n          try {\n            logByteStream \u003d\n                SecureIOUtils.openForRead(logFile, application.getUser(), null);\n          }  catch (IOException e) {\n            LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n            if (e.getMessage().contains(\n              \"did not match expected owner \u0027\" + application.getUser()\n                  + \"\u0027\")) {\n              html.h1(\"Exception reading log file. Application submitted by \u0027\"\n                  + application.getUser()\n                  + \"\u0027 doesn\u0027t own requested log file : \"\n                  + logFile.getName());\n            } else {\n              html.h1(\"Exception reading log file. It might be because log \"\n                  + \"file was aggregated : \" + logFile.getName());\n            }\n            return;\n          }\n          \n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO Fix findBugs close warning along with IOUtils change\n            IOUtils.skipFully(logByteStream, start);\n            InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              pre._(new String(cbuf, 0, len));\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            pre._();\n            reader.close();\n\n          } catch (IOException e) {\n            LOG.error(\n              \"Exception reading log file \" + logFile.getAbsolutePath(), e);\n            html.h1(\"Exception reading log file. It might be because log \"\n                + \"file was aggregated : \" + logFile.getName());\n          } finally {\n            if (logByteStream !\u003d null) {\n              try {\n                logByteStream.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Print out log types in lexical order\n        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n            dirsHandler);\n        Collections.sort(containerLogsDirs);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          File[] logFiles \u003d containerLogsDir.listFiles();\n          if (logFiles !\u003d null) {\n            Arrays.sort(logFiles);\n            for (File logFile : logFiles) {\n              foundLogFile \u003d true;\n              html.p()\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n                      logFile.getName(), \"?start\u003d-4096\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")._();\n            }\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "ae15ad6202c15f05d31e331decdbc352485b6671": {
      "type": "Ybodychange",
      "commitMessage": "YARN-163. Retrieving container log via NM webapp can hang with multibyte characters in log (jlowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1400189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/12 10:34 AM",
      "commitName": "ae15ad6202c15f05d31e331decdbc352485b6671",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "21/08/12 3:27 PM",
      "commitNameOld": "67673227f22f0599593081d3f62378cce3c8cae5",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 58.8,
      "commitsBetweenForRepo": 368,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,120 @@\n     private void printLogs(Block html, ContainerId containerId,\n         ApplicationId applicationId, Application application) {\n       // Check for the authorization.\n       String remoteUser \u003d request().getRemoteUser();\n       UserGroupInformation callerUGI \u003d null;\n \n       if (remoteUser !\u003d null) {\n         callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       }\n       if (callerUGI !\u003d null\n           \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n               ApplicationAccessType.VIEW_APP, application.getUser(),\n               applicationId)) {\n         html.h1(\n             \"User [\" + remoteUser\n                 + \"] is not authorized to view the logs for application \"\n                 + applicationId);\n         return;\n       }\n \n       if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n         File logFile \u003d null;\n         try {\n           URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n               ContainerLaunch.getRelativeContainerLogDir(\n                   applicationId.toString(), containerId.toString())\n                   + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n           logFile \u003d new File(logPathURI.getPath());\n         } catch (URISyntaxException e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         } catch (Exception e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         }\n         long start \u003d\n             $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n         start \u003d start \u003c 0 ? logFile.length() + start : start;\n         start \u003d start \u003c 0 ? 0 : start;\n         long end \u003d\n             $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n         end \u003d end \u003c 0 ? logFile.length() + end : end;\n         end \u003d end \u003c 0 ? logFile.length() : end;\n         if (start \u003e end) {\n           html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n               + \", end[\" + end + \"]\");\n           return;\n         } else {\n-          InputStreamReader reader \u003d null;\n+          FileInputStream logByteStream \u003d null;\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n               html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                       logFile.getName(), \"?start\u003d0\"), \"here\").\n                       _(\" for full log\")._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             // TODO Fix findBugs close warning along with IOUtils change\n-            reader \u003d new FileReader(logFile);\n+            logByteStream \u003d new FileInputStream(logFile);\n+            IOUtils.skipFully(logByteStream, start);\n+\n+            InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n             int bufferSize \u003d 65536;\n             char[] cbuf \u003d new char[bufferSize];\n \n-            long skipped \u003d 0;\n-            long totalSkipped \u003d 0;\n-            while (totalSkipped \u003c start) {\n-              skipped \u003d reader.skip(start - totalSkipped);\n-              totalSkipped +\u003d skipped;\n-            }\n-\n             int len \u003d 0;\n             int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-            writer().write(\"\u003cpre\u003e\");\n+            PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n             while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                 \u0026\u0026 toRead \u003e 0) {\n-              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n+              pre._(new String(cbuf, 0, len));\n               toRead \u003d toRead - len;\n               currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             }\n \n+            pre._();\n             reader.close();\n-            writer().write(\"\u003c/pre\u003e\");\n \n           } catch (IOException e) {\n             html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                 + StringUtils.stringifyException(e));\n           } finally {\n-            if (reader !\u003d null) {\n+            if (logByteStream !\u003d null) {\n               try {\n-                reader.close();\n+                logByteStream.close();\n               } catch (IOException e) {\n                 // Ignore\n               }\n             }\n           }\n         }\n       } else {\n         // Print out log types in lexical order\n         List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n             dirsHandler);\n         Collections.sort(containerLogsDirs);\n         boolean foundLogFile \u003d false;\n         for (File containerLogsDir : containerLogsDirs) {\n           File[] logFiles \u003d containerLogsDir.listFiles();\n           if (logFiles !\u003d null) {\n             Arrays.sort(logFiles);\n             for (File logFile : logFiles) {\n               foundLogFile \u003d true;\n               html.p()\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n                       logFile.getName(), \"?start\u003d-4096\"),\n                       logFile.getName() + \" : Total file length is \"\n                           + logFile.length() + \" bytes.\")._();\n             }\n           }\n         }\n         if (!foundLogFile) {\n           html.h1(\"No logs available for container \" + containerId.toString());\n           return;\n         }\n       }\n       return;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n              ContainerLaunch.getRelativeContainerLogDir(\n                  applicationId.toString(), containerId.toString())\n                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n          logFile \u003d new File(logPathURI.getPath());\n        } catch (URISyntaxException e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          FileInputStream logByteStream \u003d null;\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            // TODO Fix findBugs close warning along with IOUtils change\n            logByteStream \u003d new FileInputStream(logFile);\n            IOUtils.skipFully(logByteStream, start);\n\n            InputStreamReader reader \u003d new InputStreamReader(logByteStream);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              pre._(new String(cbuf, 0, len));\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            pre._();\n            reader.close();\n\n          } catch (IOException e) {\n            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                + StringUtils.stringifyException(e));\n          } finally {\n            if (logByteStream !\u003d null) {\n              try {\n                logByteStream.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Print out log types in lexical order\n        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n            dirsHandler);\n        Collections.sort(containerLogsDirs);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          File[] logFiles \u003d containerLogsDir.listFiles();\n          if (logFiles !\u003d null) {\n            Arrays.sort(logFiles);\n            for (File logFile : logFiles) {\n              foundLogFile \u003d true;\n              html.p()\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n                      logFile.getName(), \"?start\u003d-4096\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")._();\n            }\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "67673227f22f0599593081d3f62378cce3c8cae5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-22. Fix ContainerLogs to work if the log-dir is specified as a URI. (Contributed by Mayank Bansal)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/12 3:27 PM",
      "commitName": "67673227f22f0599593081d3f62378cce3c8cae5",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.71,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,120 +1,124 @@\n     private void printLogs(Block html, ContainerId containerId,\n         ApplicationId applicationId, Application application) {\n       // Check for the authorization.\n       String remoteUser \u003d request().getRemoteUser();\n       UserGroupInformation callerUGI \u003d null;\n \n       if (remoteUser !\u003d null) {\n         callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       }\n       if (callerUGI !\u003d null\n           \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n               ApplicationAccessType.VIEW_APP, application.getUser(),\n               applicationId)) {\n         html.h1(\n             \"User [\" + remoteUser\n                 + \"] is not authorized to view the logs for application \"\n                 + applicationId);\n         return;\n       }\n \n       if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n         File logFile \u003d null;\n         try {\n-          logFile \u003d\n-              new File(this.dirsHandler.getLogPathToRead(\n-                  ContainerLaunch.getRelativeContainerLogDir(\n+          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n+              ContainerLaunch.getRelativeContainerLogDir(\n                   applicationId.toString(), containerId.toString())\n-                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))\n-                  .toUri().getPath());\n+                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n+          logFile \u003d new File(logPathURI.getPath());\n+        } catch (URISyntaxException e) {\n+          html.h1(\"Cannot find this log on the local disk.\");\n+          return;\n         } catch (Exception e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         }\n         long start \u003d\n             $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n         start \u003d start \u003c 0 ? logFile.length() + start : start;\n         start \u003d start \u003c 0 ? 0 : start;\n         long end \u003d\n             $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n         end \u003d end \u003c 0 ? logFile.length() + end : end;\n         end \u003d end \u003c 0 ? logFile.length() : end;\n         if (start \u003e end) {\n           html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n               + \", end[\" + end + \"]\");\n           return;\n         } else {\n           InputStreamReader reader \u003d null;\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n               html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                       logFile.getName(), \"?start\u003d0\"), \"here\").\n                       _(\" for full log\")._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             // TODO Fix findBugs close warning along with IOUtils change\n             reader \u003d new FileReader(logFile);\n             int bufferSize \u003d 65536;\n             char[] cbuf \u003d new char[bufferSize];\n \n             long skipped \u003d 0;\n             long totalSkipped \u003d 0;\n             while (totalSkipped \u003c start) {\n               skipped \u003d reader.skip(start - totalSkipped);\n               totalSkipped +\u003d skipped;\n             }\n \n             int len \u003d 0;\n             int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             writer().write(\"\u003cpre\u003e\");\n \n             while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                 \u0026\u0026 toRead \u003e 0) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               toRead \u003d toRead - len;\n               currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             }\n \n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n \n           } catch (IOException e) {\n             html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                 + StringUtils.stringifyException(e));\n           } finally {\n             if (reader !\u003d null) {\n               try {\n                 reader.close();\n               } catch (IOException e) {\n                 // Ignore\n               }\n             }\n           }\n         }\n       } else {\n         // Print out log types in lexical order\n         List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n             dirsHandler);\n         Collections.sort(containerLogsDirs);\n         boolean foundLogFile \u003d false;\n         for (File containerLogsDir : containerLogsDirs) {\n           File[] logFiles \u003d containerLogsDir.listFiles();\n-          Arrays.sort(logFiles);\n-          for (File logFile : logFiles) {\n-            foundLogFile \u003d true;\n-            html.p()\n-                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n-                    logFile.getName(), \"?start\u003d-4096\"),\n-                    logFile.getName() + \" : Total file length is \"\n-                        + logFile.length() + \" bytes.\")._();\n+          if (logFiles !\u003d null) {\n+            Arrays.sort(logFiles);\n+            for (File logFile : logFiles) {\n+              foundLogFile \u003d true;\n+              html.p()\n+                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n+                      logFile.getName(), \"?start\u003d-4096\"),\n+                      logFile.getName() + \" : Total file length is \"\n+                          + logFile.length() + \" bytes.\")._();\n+            }\n           }\n         }\n         if (!foundLogFile) {\n           html.h1(\"No logs available for container \" + containerId.toString());\n           return;\n         }\n       }\n       return;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          URI logPathURI \u003d new URI(this.dirsHandler.getLogPathToRead(\n              ContainerLaunch.getRelativeContainerLogDir(\n                  applicationId.toString(), containerId.toString())\n                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());\n          logFile \u003d new File(logPathURI.getPath());\n        } catch (URISyntaxException e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          InputStreamReader reader \u003d null;\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            // TODO Fix findBugs close warning along with IOUtils change\n            reader \u003d new FileReader(logFile);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            long skipped \u003d 0;\n            long totalSkipped \u003d 0;\n            while (totalSkipped \u003c start) {\n              skipped \u003d reader.skip(start - totalSkipped);\n              totalSkipped +\u003d skipped;\n            }\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            writer().write(\"\u003cpre\u003e\");\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n\n          } catch (IOException e) {\n            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                + StringUtils.stringifyException(e));\n          } finally {\n            if (reader !\u003d null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Print out log types in lexical order\n        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n            dirsHandler);\n        Collections.sort(containerLogsDirs);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          File[] logFiles \u003d containerLogsDir.listFiles();\n          if (logFiles !\u003d null) {\n            Arrays.sort(logFiles);\n            for (File logFile : logFiles) {\n              foundLogFile \u003d true;\n              html.p()\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER),\n                      logFile.getName(), \"?start\u003d-4096\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")._();\n            }\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          logFile \u003d\n              new File(this.dirsHandler.getLogPathToRead(\n                  ContainerLaunch.getRelativeContainerLogDir(\n                  applicationId.toString(), containerId.toString())\n                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))\n                  .toUri().getPath());\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          InputStreamReader reader \u003d null;\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            // TODO Fix findBugs close warning along with IOUtils change\n            reader \u003d new FileReader(logFile);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            long skipped \u003d 0;\n            long totalSkipped \u003d 0;\n            while (totalSkipped \u003c start) {\n              skipped \u003d reader.skip(start - totalSkipped);\n              totalSkipped +\u003d skipped;\n            }\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            writer().write(\"\u003cpre\u003e\");\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n\n          } catch (IOException e) {\n            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                + StringUtils.stringifyException(e));\n          } finally {\n            if (reader !\u003d null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Print out log types in lexical order\n        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n            dirsHandler);\n        Collections.sort(containerLogsDirs);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          File[] logFiles \u003d containerLogsDir.listFiles();\n          Arrays.sort(logFiles);\n          for (File logFile : logFiles) {\n            foundLogFile \u003d true;\n            html.p()\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d-4096\"),\n                    logFile.getName() + \" : Total file length is \"\n                        + logFile.length() + \" bytes.\")._();\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java"
      }
    },
    "cda16311a90134a50c57585831218c7b43827693": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4169. Container Logs appear in unsorted order (Jonathan Eagles via bobby)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1331012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/12 11:27 AM",
      "commitName": "cda16311a90134a50c57585831218c7b43827693",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "30/01/12 8:53 PM",
      "commitNameOld": "443d8f6c0bf4008ef0e93accd2646148881d137c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 86.56,
      "commitsBetweenForRepo": 685,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,117 +1,120 @@\n     private void printLogs(Block html, ContainerId containerId,\n         ApplicationId applicationId, Application application) {\n       // Check for the authorization.\n       String remoteUser \u003d request().getRemoteUser();\n       UserGroupInformation callerUGI \u003d null;\n \n       if (remoteUser !\u003d null) {\n         callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       }\n       if (callerUGI !\u003d null\n           \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n               ApplicationAccessType.VIEW_APP, application.getUser(),\n               applicationId)) {\n         html.h1(\n             \"User [\" + remoteUser\n                 + \"] is not authorized to view the logs for application \"\n                 + applicationId);\n         return;\n       }\n \n       if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n         File logFile \u003d null;\n         try {\n           logFile \u003d\n               new File(this.dirsHandler.getLogPathToRead(\n                   ContainerLaunch.getRelativeContainerLogDir(\n                   applicationId.toString(), containerId.toString())\n                   + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))\n                   .toUri().getPath());\n         } catch (Exception e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         }\n         long start \u003d\n             $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n         start \u003d start \u003c 0 ? logFile.length() + start : start;\n         start \u003d start \u003c 0 ? 0 : start;\n         long end \u003d\n             $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n         end \u003d end \u003c 0 ? logFile.length() + end : end;\n         end \u003d end \u003c 0 ? logFile.length() : end;\n         if (start \u003e end) {\n           html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n               + \", end[\" + end + \"]\");\n           return;\n         } else {\n           InputStreamReader reader \u003d null;\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n               html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                       logFile.getName(), \"?start\u003d0\"), \"here\").\n                       _(\" for full log\")._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             // TODO Fix findBugs close warning along with IOUtils change\n             reader \u003d new FileReader(logFile);\n             int bufferSize \u003d 65536;\n             char[] cbuf \u003d new char[bufferSize];\n \n             long skipped \u003d 0;\n             long totalSkipped \u003d 0;\n             while (totalSkipped \u003c start) {\n               skipped \u003d reader.skip(start - totalSkipped);\n               totalSkipped +\u003d skipped;\n             }\n \n             int len \u003d 0;\n             int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             writer().write(\"\u003cpre\u003e\");\n \n             while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                 \u0026\u0026 toRead \u003e 0) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               toRead \u003d toRead - len;\n               currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             }\n \n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n \n           } catch (IOException e) {\n             html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                 + StringUtils.stringifyException(e));\n           } finally {\n             if (reader !\u003d null) {\n               try {\n                 reader.close();\n               } catch (IOException e) {\n                 // Ignore\n               }\n             }\n           }\n         }\n       } else {\n-        // Just print out the log-types\n+        // Print out log types in lexical order\n         List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n             dirsHandler);\n+        Collections.sort(containerLogsDirs);\n         boolean foundLogFile \u003d false;\n         for (File containerLogsDir : containerLogsDirs) {\n-          for (File logFile : containerLogsDir.listFiles()) {\n+          File[] logFiles \u003d containerLogsDir.listFiles();\n+          Arrays.sort(logFiles);\n+          for (File logFile : logFiles) {\n             foundLogFile \u003d true;\n             html.p()\n                 .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                     logFile.getName(), \"?start\u003d-4096\"),\n                     logFile.getName() + \" : Total file length is \"\n                         + logFile.length() + \" bytes.\")._();\n           }\n         }\n         if (!foundLogFile) {\n           html.h1(\"No logs available for container \" + containerId.toString());\n           return;\n         }\n       }\n       return;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          logFile \u003d\n              new File(this.dirsHandler.getLogPathToRead(\n                  ContainerLaunch.getRelativeContainerLogDir(\n                  applicationId.toString(), containerId.toString())\n                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))\n                  .toUri().getPath());\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          InputStreamReader reader \u003d null;\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            // TODO Fix findBugs close warning along with IOUtils change\n            reader \u003d new FileReader(logFile);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            long skipped \u003d 0;\n            long totalSkipped \u003d 0;\n            while (totalSkipped \u003c start) {\n              skipped \u003d reader.skip(start - totalSkipped);\n              totalSkipped +\u003d skipped;\n            }\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            writer().write(\"\u003cpre\u003e\");\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n\n          } catch (IOException e) {\n            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                + StringUtils.stringifyException(e));\n          } finally {\n            if (reader !\u003d null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Print out log types in lexical order\n        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n            dirsHandler);\n        Collections.sort(containerLogsDirs);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          File[] logFiles \u003d containerLogsDir.listFiles();\n          Arrays.sort(logFiles);\n          for (File logFile : logFiles) {\n            foundLogFile \u003d true;\n            html.p()\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d-4096\"),\n                    logFile.getName() + \" : Total file length is \"\n                        + logFile.length() + \" bytes.\")._();\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "03/11/11 1:02 AM",
      "commitNameOld": "c27601fefebd0af887a12d684bfc6f90d9fc0321",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.64,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,117 @@\n     private void printLogs(Block html, ContainerId containerId,\n         ApplicationId applicationId, Application application) {\n       // Check for the authorization.\n       String remoteUser \u003d request().getRemoteUser();\n       UserGroupInformation callerUGI \u003d null;\n \n       if (remoteUser !\u003d null) {\n         callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n       }\n       if (callerUGI !\u003d null\n           \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n               ApplicationAccessType.VIEW_APP, application.getUser(),\n               applicationId)) {\n         html.h1(\n             \"User [\" + remoteUser\n                 + \"] is not authorized to view the logs for application \"\n                 + applicationId);\n         return;\n       }\n \n       if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n         File logFile \u003d null;\n         try {\n           logFile \u003d\n-              new File(this.logsSelector\n-                  .getLocalPathToRead(\n-                      ContainerLaunch.getRelativeContainerLogDir(\n-                          applicationId.toString(), containerId.toString())\n-                          + Path.SEPARATOR + $(CONTAINER_LOG_TYPE), this.conf)\n+              new File(this.dirsHandler.getLogPathToRead(\n+                  ContainerLaunch.getRelativeContainerLogDir(\n+                  applicationId.toString(), containerId.toString())\n+                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))\n                   .toUri().getPath());\n         } catch (Exception e) {\n           html.h1(\"Cannot find this log on the local disk.\");\n           return;\n         }\n         long start \u003d\n             $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n         start \u003d start \u003c 0 ? logFile.length() + start : start;\n         start \u003d start \u003c 0 ? 0 : start;\n         long end \u003d\n             $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n         end \u003d end \u003c 0 ? logFile.length() + end : end;\n         end \u003d end \u003c 0 ? logFile.length() : end;\n         if (start \u003e end) {\n           html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n               + \", end[\" + end + \"]\");\n           return;\n         } else {\n           InputStreamReader reader \u003d null;\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n               html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                   .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                       logFile.getName(), \"?start\u003d0\"), \"here\").\n                       _(\" for full log\")._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             // TODO Fix findBugs close warning along with IOUtils change\n             reader \u003d new FileReader(logFile);\n             int bufferSize \u003d 65536;\n             char[] cbuf \u003d new char[bufferSize];\n \n             long skipped \u003d 0;\n             long totalSkipped \u003d 0;\n             while (totalSkipped \u003c start) {\n               skipped \u003d reader.skip(start - totalSkipped);\n               totalSkipped +\u003d skipped;\n             }\n \n             int len \u003d 0;\n             int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             writer().write(\"\u003cpre\u003e\");\n \n             while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                 \u0026\u0026 toRead \u003e 0) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               toRead \u003d toRead - len;\n               currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n             }\n \n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n \n           } catch (IOException e) {\n             html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                 + StringUtils.stringifyException(e));\n           } finally {\n             if (reader !\u003d null) {\n               try {\n                 reader.close();\n               } catch (IOException e) {\n                 // Ignore\n               }\n             }\n           }\n         }\n       } else {\n         // Just print out the log-types\n-        List\u003cFile\u003e containerLogsDirs \u003d\n-            getContainerLogDirs(this.conf, containerId);\n+        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n+            dirsHandler);\n         boolean foundLogFile \u003d false;\n         for (File containerLogsDir : containerLogsDirs) {\n           for (File logFile : containerLogsDir.listFiles()) {\n             foundLogFile \u003d true;\n             html.p()\n                 .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                     logFile.getName(), \"?start\u003d-4096\"),\n                     logFile.getName() + \" : Total file length is \"\n                         + logFile.length() + \" bytes.\")._();\n           }\n         }\n         if (!foundLogFile) {\n           html.h1(\"No logs available for container \" + containerId.toString());\n           return;\n         }\n       }\n       return;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          logFile \u003d\n              new File(this.dirsHandler.getLogPathToRead(\n                  ContainerLaunch.getRelativeContainerLogDir(\n                  applicationId.toString(), containerId.toString())\n                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))\n                  .toUri().getPath());\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          InputStreamReader reader \u003d null;\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            // TODO Fix findBugs close warning along with IOUtils change\n            reader \u003d new FileReader(logFile);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            long skipped \u003d 0;\n            long totalSkipped \u003d 0;\n            while (totalSkipped \u003c start) {\n              skipped \u003d reader.skip(start - totalSkipped);\n              totalSkipped +\u003d skipped;\n            }\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            writer().write(\"\u003cpre\u003e\");\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n\n          } catch (IOException e) {\n            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                + StringUtils.stringifyException(e));\n          } finally {\n            if (reader !\u003d null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Just print out the log-types\n        List\u003cFile\u003e containerLogsDirs \u003d getContainerLogDirs(containerId,\n            dirsHandler);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          for (File logFile : containerLogsDir.listFiles()) {\n            foundLogFile \u003d true;\n            html.p()\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d-4096\"),\n                    logFile.getName() + \" : Total file length is \"\n                        + logFile.length() + \" bytes.\")._();\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,118 @@\n+    private void printLogs(Block html, ContainerId containerId,\n+        ApplicationId applicationId, Application application) {\n+      // Check for the authorization.\n+      String remoteUser \u003d request().getRemoteUser();\n+      UserGroupInformation callerUGI \u003d null;\n+\n+      if (remoteUser !\u003d null) {\n+        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n+      }\n+      if (callerUGI !\u003d null\n+          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n+              ApplicationAccessType.VIEW_APP, application.getUser(),\n+              applicationId)) {\n+        html.h1(\n+            \"User [\" + remoteUser\n+                + \"] is not authorized to view the logs for application \"\n+                + applicationId);\n+        return;\n+      }\n+\n+      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n+        File logFile \u003d null;\n+        try {\n+          logFile \u003d\n+              new File(this.logsSelector\n+                  .getLocalPathToRead(\n+                      ContainerLaunch.getRelativeContainerLogDir(\n+                          applicationId.toString(), containerId.toString())\n+                          + Path.SEPARATOR + $(CONTAINER_LOG_TYPE), this.conf)\n+                  .toUri().getPath());\n+        } catch (Exception e) {\n+          html.h1(\"Cannot find this log on the local disk.\");\n+          return;\n+        }\n+        long start \u003d\n+            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n+        start \u003d start \u003c 0 ? logFile.length() + start : start;\n+        start \u003d start \u003c 0 ? 0 : start;\n+        long end \u003d\n+            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n+        end \u003d end \u003c 0 ? logFile.length() + end : end;\n+        end \u003d end \u003c 0 ? logFile.length() : end;\n+        if (start \u003e end) {\n+          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n+              + \", end[\" + end + \"]\");\n+          return;\n+        } else {\n+          InputStreamReader reader \u003d null;\n+          try {\n+            long toRead \u003d end - start;\n+            if (toRead \u003c logFile.length()) {\n+              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n+                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n+                      logFile.getName(), \"?start\u003d0\"), \"here\").\n+                      _(\" for full log\")._();\n+            }\n+            // TODO: Use secure IO Utils to avoid symlink attacks.\n+            // TODO Fix findBugs close warning along with IOUtils change\n+            reader \u003d new FileReader(logFile);\n+            int bufferSize \u003d 65536;\n+            char[] cbuf \u003d new char[bufferSize];\n+\n+            long skipped \u003d 0;\n+            long totalSkipped \u003d 0;\n+            while (totalSkipped \u003c start) {\n+              skipped \u003d reader.skip(start - totalSkipped);\n+              totalSkipped +\u003d skipped;\n+            }\n+\n+            int len \u003d 0;\n+            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+            writer().write(\"\u003cpre\u003e\");\n+\n+            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n+                \u0026\u0026 toRead \u003e 0) {\n+              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n+              toRead \u003d toRead - len;\n+              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+            }\n+\n+            reader.close();\n+            writer().write(\"\u003c/pre\u003e\");\n+\n+          } catch (IOException e) {\n+            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n+                + StringUtils.stringifyException(e));\n+          } finally {\n+            if (reader !\u003d null) {\n+              try {\n+                reader.close();\n+              } catch (IOException e) {\n+                // Ignore\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        // Just print out the log-types\n+        List\u003cFile\u003e containerLogsDirs \u003d\n+            getContainerLogDirs(this.conf, containerId);\n+        boolean foundLogFile \u003d false;\n+        for (File containerLogsDir : containerLogsDirs) {\n+          for (File logFile : containerLogsDir.listFiles()) {\n+            foundLogFile \u003d true;\n+            html.p()\n+                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n+                    logFile.getName(), \"?start\u003d-4096\"),\n+                    logFile.getName() + \" : Total file length is \"\n+                        + logFile.length() + \" bytes.\")._();\n+          }\n+        }\n+        if (!foundLogFile) {\n+          html.h1(\"No logs available for container \" + containerId.toString());\n+          return;\n+        }\n+      }\n+      return;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void printLogs(Block html, ContainerId containerId,\n        ApplicationId applicationId, Application application) {\n      // Check for the authorization.\n      String remoteUser \u003d request().getRemoteUser();\n      UserGroupInformation callerUGI \u003d null;\n\n      if (remoteUser !\u003d null) {\n        callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n      }\n      if (callerUGI !\u003d null\n          \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n              ApplicationAccessType.VIEW_APP, application.getUser(),\n              applicationId)) {\n        html.h1(\n            \"User [\" + remoteUser\n                + \"] is not authorized to view the logs for application \"\n                + applicationId);\n        return;\n      }\n\n      if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n        File logFile \u003d null;\n        try {\n          logFile \u003d\n              new File(this.logsSelector\n                  .getLocalPathToRead(\n                      ContainerLaunch.getRelativeContainerLogDir(\n                          applicationId.toString(), containerId.toString())\n                          + Path.SEPARATOR + $(CONTAINER_LOG_TYPE), this.conf)\n                  .toUri().getPath());\n        } catch (Exception e) {\n          html.h1(\"Cannot find this log on the local disk.\");\n          return;\n        }\n        long start \u003d\n            $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n        start \u003d start \u003c 0 ? logFile.length() + start : start;\n        start \u003d start \u003c 0 ? 0 : start;\n        long end \u003d\n            $(\"end\").isEmpty() ? logFile.length() : Long.parseLong($(\"end\"));\n        end \u003d end \u003c 0 ? logFile.length() + end : end;\n        end \u003d end \u003c 0 ? logFile.length() : end;\n        if (start \u003e end) {\n          html.h1(\"Invalid start and end values. Start: [\" + start + \"]\"\n              + \", end[\" + end + \"]\");\n          return;\n        } else {\n          InputStreamReader reader \u003d null;\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n              html.p()._(\"Showing \" + toRead + \" bytes. Click \")\n                  .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                      logFile.getName(), \"?start\u003d0\"), \"here\").\n                      _(\" for full log\")._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            // TODO Fix findBugs close warning along with IOUtils change\n            reader \u003d new FileReader(logFile);\n            int bufferSize \u003d 65536;\n            char[] cbuf \u003d new char[bufferSize];\n\n            long skipped \u003d 0;\n            long totalSkipped \u003d 0;\n            while (totalSkipped \u003c start) {\n              skipped \u003d reader.skip(start - totalSkipped);\n              totalSkipped +\u003d skipped;\n            }\n\n            int len \u003d 0;\n            int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            writer().write(\"\u003cpre\u003e\");\n\n            while ((len \u003d reader.read(cbuf, 0, currentToRead)) \u003e 0\n                \u0026\u0026 toRead \u003e 0) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              toRead \u003d toRead - len;\n              currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n            }\n\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n\n          } catch (IOException e) {\n            html.h1(\"Exception reading log-file. Log file was likely aggregated. \"\n                + StringUtils.stringifyException(e));\n          } finally {\n            if (reader !\u003d null) {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                // Ignore\n              }\n            }\n          }\n        }\n      } else {\n        // Just print out the log-types\n        List\u003cFile\u003e containerLogsDirs \u003d\n            getContainerLogDirs(this.conf, containerId);\n        boolean foundLogFile \u003d false;\n        for (File containerLogsDir : containerLogsDirs) {\n          for (File logFile : containerLogsDir.listFiles()) {\n            foundLogFile \u003d true;\n            html.p()\n                .a(url(\"containerlogs\", $(CONTAINER_ID), $(APP_OWNER), \n                    logFile.getName(), \"?start\u003d-4096\"),\n                    logFile.getName() + \" : Total file length is \"\n                        + logFile.length() + \" bytes.\")._();\n          }\n        }\n        if (!foundLogFile) {\n          html.h1(\"No logs available for container \" + containerId.toString());\n          return;\n        }\n      }\n      return;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java"
    }
  }
}