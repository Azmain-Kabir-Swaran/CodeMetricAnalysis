{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "isOverAMShareLimit",
  "functionId": "isOverAMShareLimit",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 934,
  "functionEndLine": 945,
  "numCommitsSeen": 76,
  "timeTaken": 3979,
  "changeHistory": [
    "55bd35921c2bb013e45120bbd1602b658b8b999b",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7"
  ],
  "changeHistoryShort": {
    "55bd35921c2bb013e45120bbd1602b658b8b999b": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55bd35921c2bb013e45120bbd1602b658b8b999b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9552. FairScheduler: NODE_UPDATE can cause NoSuchElementException. Contributed by Peter Bacsko.\n",
      "commitDate": "15/05/19 11:50 AM",
      "commitName": "55bd35921c2bb013e45120bbd1602b658b8b999b",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 60.81,
      "commitsBetweenForRepo": 361,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   private boolean isOverAMShareLimit() {\n     // Check the AM resource usage for the leaf queue\n     if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n       // Return true if we have not ask, or queue is not be able to run app\u0027s AM\n       PendingAsk ask \u003d appSchedulingInfo.getNextPendingAsk();\n-      if (ask.getCount() \u003d\u003d 0 || !getQueue().canRunAppAM(\n-          ask.getPerAllocationResource())) {\n+      if (ask !\u003d null \u0026\u0026 (ask.getCount() \u003d\u003d 0 || !getQueue().canRunAppAM(\n+          ask.getPerAllocationResource()))) {\n         return true;\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isOverAMShareLimit() {\n    // Check the AM resource usage for the leaf queue\n    if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n      // Return true if we have not ask, or queue is not be able to run app\u0027s AM\n      PendingAsk ask \u003d appSchedulingInfo.getNextPendingAsk();\n      if (ask !\u003d null \u0026\u0026 (ask.getCount() \u003d\u003d 0 || !getQueue().canRunAppAM(\n          ask.getPerAllocationResource()))) {\n        return true;\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,12 @@\n   private boolean isOverAMShareLimit() {\n     // Check the AM resource usage for the leaf queue\n     if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n-      List\u003cResourceRequest\u003e ask \u003d appSchedulingInfo.getAllResourceRequests();\n-      if (ask.isEmpty() || !getQueue().canRunAppAM(\n-          ask.get(0).getCapability())) {\n+      // Return true if we have not ask, or queue is not be able to run app\u0027s AM\n+      PendingAsk ask \u003d appSchedulingInfo.getNextPendingAsk();\n+      if (ask.getCount() \u003d\u003d 0 || !getQueue().canRunAppAM(\n+          ask.getPerAllocationResource())) {\n         return true;\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isOverAMShareLimit() {\n    // Check the AM resource usage for the leaf queue\n    if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n      // Return true if we have not ask, or queue is not be able to run app\u0027s AM\n      PendingAsk ask \u003d appSchedulingInfo.getNextPendingAsk();\n      if (ask.getCount() \u003d\u003d 0 || !getQueue().canRunAppAM(\n          ask.getPerAllocationResource())) {\n        return true;\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
      "commitDate": "07/06/15 11:37 AM",
      "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,11 @@\n+  private boolean isOverAMShareLimit() {\n+    // Check the AM resource usage for the leaf queue\n+    if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n+      List\u003cResourceRequest\u003e ask \u003d appSchedulingInfo.getAllResourceRequests();\n+      if (ask.isEmpty() || !getQueue().canRunAppAM(\n+          ask.get(0).getCapability())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isOverAMShareLimit() {\n    // Check the AM resource usage for the leaf queue\n    if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n      List\u003cResourceRequest\u003e ask \u003d appSchedulingInfo.getAllResourceRequests();\n      if (ask.isEmpty() || !getQueue().canRunAppAM(\n          ask.get(0).getCapability())) {\n        return true;\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}