{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainersMonitorImpl.java",
  "functionName": "updateContainerMetrics",
  "functionId": "updateContainerMetrics___monitoringEvent-ContainersMonitorEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
  "functionStartLine": 832,
  "functionEndLine": 884,
  "numCommitsSeen": 66,
  "timeTaken": 2998,
  "changeHistory": [
    "1b790f4dd1f682423d5dbb8e70c6225cbddce989",
    "99cc439e29794f8e61bebe03b2a7ca4b6743ec92",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "fdf02d1f26cea372bf69e071f57b8bfc09c092c4",
    "c59ae4eeb17e52e8fc659b9962d20628719fc621"
  ],
  "changeHistoryShort": {
    "1b790f4dd1f682423d5dbb8e70c6225cbddce989": "Ybodychange",
    "99cc439e29794f8e61bebe03b2a7ca4b6743ec92": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "fdf02d1f26cea372bf69e071f57b8bfc09c092c4": "Ybodychange",
    "c59ae4eeb17e52e8fc659b9962d20628719fc621": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1b790f4dd1f682423d5dbb8e70c6225cbddce989": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9071.  Improved status update for reinitialized containers.\n            Contributed by Chandni Singh\n",
      "commitDate": "05/12/18 2:00 PM",
      "commitName": "1b790f4dd1f682423d5dbb8e70c6225cbddce989",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/10/18 11:09 AM",
      "commitNameOld": "f76e3c3db789dd6866fa0fef8e014cbfe8c8f80d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 41.16,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n     if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     ContainerMetrics usageMetrics;\n \n     int vmemLimitMBs;\n     int pmemLimitMBs;\n     int cpuVcores;\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       usageMetrics \u003d ContainerMetrics\n           .forContainer(containerId, containerMetricsPeriodMs,\n           containerMetricsUnregisterDelayMs);\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n       usageMetrics.recordStateChangeDurations(\n           startEvent.getLaunchDuration(),\n           startEvent.getLocalizationDuration());\n       cpuVcores \u003d startEvent.getCpuVcores();\n       vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n       pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     case STOP_MONITORING_CONTAINER:\n+      ContainerStopMonitoringEvent stopEvent \u003d\n+          (ContainerStopMonitoringEvent) monitoringEvent;\n       usageMetrics \u003d ContainerMetrics.getContainerMetrics(\n           containerId);\n       if (usageMetrics !\u003d null) {\n-        usageMetrics.finished();\n+        usageMetrics.finished(stopEvent.isForReInit());\n       }\n       break;\n     case CHANGE_MONITORING_CONTAINER_RESOURCE:\n       usageMetrics \u003d ContainerMetrics\n           .forContainer(containerId, containerMetricsPeriodMs,\n           containerMetricsUnregisterDelayMs);\n       ChangeMonitoringContainerResourceEvent changeEvent \u003d\n           (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n       Resource resource \u003d changeEvent.getResource();\n       pmemLimitMBs \u003d (int) resource.getMemorySize();\n       vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n       cpuVcores \u003d resource.getVirtualCores();\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     default:\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n    if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    ContainerMetrics usageMetrics;\n\n    int vmemLimitMBs;\n    int pmemLimitMBs;\n    int cpuVcores;\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      usageMetrics \u003d ContainerMetrics\n          .forContainer(containerId, containerMetricsPeriodMs,\n          containerMetricsUnregisterDelayMs);\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      usageMetrics.recordStateChangeDurations(\n          startEvent.getLaunchDuration(),\n          startEvent.getLocalizationDuration());\n      cpuVcores \u003d startEvent.getCpuVcores();\n      vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n      pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      ContainerStopMonitoringEvent stopEvent \u003d\n          (ContainerStopMonitoringEvent) monitoringEvent;\n      usageMetrics \u003d ContainerMetrics.getContainerMetrics(\n          containerId);\n      if (usageMetrics !\u003d null) {\n        usageMetrics.finished(stopEvent.isForReInit());\n      }\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      usageMetrics \u003d ContainerMetrics\n          .forContainer(containerId, containerMetricsPeriodMs,\n          containerMetricsUnregisterDelayMs);\n      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n      Resource resource \u003d changeEvent.getResource();\n      pmemLimitMBs \u003d (int) resource.getMemorySize();\n      vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n      cpuVcores \u003d resource.getVirtualCores();\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    default:\n      break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "99cc439e29794f8e61bebe03b2a7ca4b6743ec92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5190. Registering/unregistering container metrics in ContainerMonitorImpl and ContainerImpl causing uncaught exception in ContainerMonitorImpl. Contributed by Junping Du\n",
      "commitDate": "03/06/16 11:10 AM",
      "commitName": "99cc439e29794f8e61bebe03b2a7ca4b6743ec92",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 5.09,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,51 @@\n   private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n     if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n-    ContainerMetrics usageMetrics \u003d ContainerMetrics\n-        .forContainer(containerId, containerMetricsPeriodMs,\n-        containerMetricsUnregisterDelayMs);\n+    ContainerMetrics usageMetrics;\n \n     int vmemLimitMBs;\n     int pmemLimitMBs;\n     int cpuVcores;\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n+      usageMetrics \u003d ContainerMetrics\n+          .forContainer(containerId, containerMetricsPeriodMs,\n+          containerMetricsUnregisterDelayMs);\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n       usageMetrics.recordStateChangeDurations(\n           startEvent.getLaunchDuration(),\n           startEvent.getLocalizationDuration());\n       cpuVcores \u003d startEvent.getCpuVcores();\n       vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n       pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     case STOP_MONITORING_CONTAINER:\n-      usageMetrics.finished();\n+      usageMetrics \u003d ContainerMetrics.getContainerMetrics(\n+          containerId);\n+      if (usageMetrics !\u003d null) {\n+        usageMetrics.finished();\n+      }\n       break;\n     case CHANGE_MONITORING_CONTAINER_RESOURCE:\n+      usageMetrics \u003d ContainerMetrics\n+          .forContainer(containerId, containerMetricsPeriodMs,\n+          containerMetricsUnregisterDelayMs);\n       ChangeMonitoringContainerResourceEvent changeEvent \u003d\n           (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n       Resource resource \u003d changeEvent.getResource();\n       pmemLimitMBs \u003d (int) resource.getMemorySize();\n       vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n       cpuVcores \u003d resource.getVirtualCores();\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     default:\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n    if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    ContainerMetrics usageMetrics;\n\n    int vmemLimitMBs;\n    int pmemLimitMBs;\n    int cpuVcores;\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      usageMetrics \u003d ContainerMetrics\n          .forContainer(containerId, containerMetricsPeriodMs,\n          containerMetricsUnregisterDelayMs);\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      usageMetrics.recordStateChangeDurations(\n          startEvent.getLaunchDuration(),\n          startEvent.getLocalizationDuration());\n      cpuVcores \u003d startEvent.getCpuVcores();\n      vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n      pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      usageMetrics \u003d ContainerMetrics.getContainerMetrics(\n          containerId);\n      if (usageMetrics !\u003d null) {\n        usageMetrics.finished();\n      }\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      usageMetrics \u003d ContainerMetrics\n          .forContainer(containerId, containerMetricsPeriodMs,\n          containerMetricsUnregisterDelayMs);\n      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n      Resource resource \u003d changeEvent.getResource();\n      pmemLimitMBs \u003d (int) resource.getMemorySize();\n      vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n      cpuVcores \u003d resource.getVirtualCores();\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    default:\n      break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "27/05/16 5:49 PM",
      "commitNameOld": "4fc09a897b25914a9b9321cc443f3f3ff3d776d5",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.63,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n     if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     ContainerMetrics usageMetrics \u003d ContainerMetrics\n         .forContainer(containerId, containerMetricsPeriodMs,\n         containerMetricsUnregisterDelayMs);\n \n     int vmemLimitMBs;\n     int pmemLimitMBs;\n     int cpuVcores;\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n       usageMetrics.recordStateChangeDurations(\n           startEvent.getLaunchDuration(),\n           startEvent.getLocalizationDuration());\n       cpuVcores \u003d startEvent.getCpuVcores();\n       vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n       pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     case STOP_MONITORING_CONTAINER:\n       usageMetrics.finished();\n       break;\n     case CHANGE_MONITORING_CONTAINER_RESOURCE:\n       ChangeMonitoringContainerResourceEvent changeEvent \u003d\n           (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n       Resource resource \u003d changeEvent.getResource();\n-      pmemLimitMBs \u003d resource.getMemory();\n+      pmemLimitMBs \u003d (int) resource.getMemorySize();\n       vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n       cpuVcores \u003d resource.getVirtualCores();\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     default:\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n    if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    ContainerMetrics usageMetrics \u003d ContainerMetrics\n        .forContainer(containerId, containerMetricsPeriodMs,\n        containerMetricsUnregisterDelayMs);\n\n    int vmemLimitMBs;\n    int pmemLimitMBs;\n    int cpuVcores;\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      usageMetrics.recordStateChangeDurations(\n          startEvent.getLaunchDuration(),\n          startEvent.getLocalizationDuration());\n      cpuVcores \u003d startEvent.getCpuVcores();\n      vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n      pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      usageMetrics.finished();\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n      Resource resource \u003d changeEvent.getResource();\n      pmemLimitMBs \u003d (int) resource.getMemorySize();\n      vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n      cpuVcores \u003d resource.getVirtualCores();\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    default:\n      break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "fdf02d1f26cea372bf69e071f57b8bfc09c092c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3619. ContainerMetrics unregisters during getMetrics and leads to ConcurrentModificationException. Contributed by Zhihai Xu\n",
      "commitDate": "02/10/15 1:20 PM",
      "commitName": "fdf02d1f26cea372bf69e071f57b8bfc09c092c4",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c59ae4eeb17e52e8fc659b9962d20628719fc621",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n     if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     ContainerMetrics usageMetrics \u003d ContainerMetrics\n-        .forContainer(containerId, containerMetricsPeriodMs);\n+        .forContainer(containerId, containerMetricsPeriodMs,\n+        containerMetricsUnregisterDelayMs);\n \n     int vmemLimitMBs;\n     int pmemLimitMBs;\n     int cpuVcores;\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n       usageMetrics.recordStateChangeDurations(\n           startEvent.getLaunchDuration(),\n           startEvent.getLocalizationDuration());\n       cpuVcores \u003d startEvent.getCpuVcores();\n       vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n       pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     case STOP_MONITORING_CONTAINER:\n       usageMetrics.finished();\n       break;\n     case CHANGE_MONITORING_CONTAINER_RESOURCE:\n       ChangeMonitoringContainerResourceEvent changeEvent \u003d\n           (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n       Resource resource \u003d changeEvent.getResource();\n       pmemLimitMBs \u003d resource.getMemory();\n       vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n       cpuVcores \u003d resource.getVirtualCores();\n       usageMetrics.recordResourceLimit(\n           vmemLimitMBs, pmemLimitMBs, cpuVcores);\n       break;\n     default:\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n    if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    ContainerMetrics usageMetrics \u003d ContainerMetrics\n        .forContainer(containerId, containerMetricsPeriodMs,\n        containerMetricsUnregisterDelayMs);\n\n    int vmemLimitMBs;\n    int pmemLimitMBs;\n    int cpuVcores;\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      usageMetrics.recordStateChangeDurations(\n          startEvent.getLaunchDuration(),\n          startEvent.getLocalizationDuration());\n      cpuVcores \u003d startEvent.getCpuVcores();\n      vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n      pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      usageMetrics.finished();\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n      Resource resource \u003d changeEvent.getResource();\n      pmemLimitMBs \u003d resource.getMemory();\n      vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n      cpuVcores \u003d resource.getVirtualCores();\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    default:\n      break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "c59ae4eeb17e52e8fc659b9962d20628719fc621": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1643. Make ContainersMonitor support changing monitoring size of an allocated container. Contributed by Meng Ding and Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c59ae4eeb17e52e8fc659b9962d20628719fc621",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,42 @@\n+  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n+    if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n+      return;\n+    }\n+\n+    ContainerId containerId \u003d monitoringEvent.getContainerId();\n+    ContainerMetrics usageMetrics \u003d ContainerMetrics\n+        .forContainer(containerId, containerMetricsPeriodMs);\n+\n+    int vmemLimitMBs;\n+    int pmemLimitMBs;\n+    int cpuVcores;\n+    switch (monitoringEvent.getType()) {\n+    case START_MONITORING_CONTAINER:\n+      ContainerStartMonitoringEvent startEvent \u003d\n+          (ContainerStartMonitoringEvent) monitoringEvent;\n+      usageMetrics.recordStateChangeDurations(\n+          startEvent.getLaunchDuration(),\n+          startEvent.getLocalizationDuration());\n+      cpuVcores \u003d startEvent.getCpuVcores();\n+      vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n+      pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n+      usageMetrics.recordResourceLimit(\n+          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n+      break;\n+    case STOP_MONITORING_CONTAINER:\n+      usageMetrics.finished();\n+      break;\n+    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n+      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n+          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n+      Resource resource \u003d changeEvent.getResource();\n+      pmemLimitMBs \u003d resource.getMemory();\n+      vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n+      cpuVcores \u003d resource.getVirtualCores();\n+      usageMetrics.recordResourceLimit(\n+          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n+      break;\n+    default:\n+      break;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateContainerMetrics(ContainersMonitorEvent monitoringEvent) {\n    if (!containerMetricsEnabled || monitoringEvent \u003d\u003d null) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    ContainerMetrics usageMetrics \u003d ContainerMetrics\n        .forContainer(containerId, containerMetricsPeriodMs);\n\n    int vmemLimitMBs;\n    int pmemLimitMBs;\n    int cpuVcores;\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      usageMetrics.recordStateChangeDurations(\n          startEvent.getLaunchDuration(),\n          startEvent.getLocalizationDuration());\n      cpuVcores \u003d startEvent.getCpuVcores();\n      vmemLimitMBs \u003d (int) (startEvent.getVmemLimit() \u003e\u003e 20);\n      pmemLimitMBs \u003d (int) (startEvent.getPmemLimit() \u003e\u003e 20);\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      usageMetrics.finished();\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n      Resource resource \u003d changeEvent.getResource();\n      pmemLimitMBs \u003d resource.getMemory();\n      vmemLimitMBs \u003d (int) (pmemLimitMBs * vmemRatio);\n      cpuVcores \u003d resource.getVirtualCores();\n      usageMetrics.recordResourceLimit(\n          vmemLimitMBs, pmemLimitMBs, cpuVcores);\n      break;\n    default:\n      break;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
    }
  }
}