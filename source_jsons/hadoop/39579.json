{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "completedContainer",
  "functionId": "completedContainer___clusterResource-Resource__application-FiCaSchedulerApp__node-FiCaSchedulerNode__rmContainer-RMContainer__containerStatus-ContainerStatus__event-RMContainerEventType__completedChildQueue-CSQueue__sortQueues-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 879,
  "functionEndLine": 895,
  "numCommitsSeen": 148,
  "timeTaken": 12053,
  "changeHistory": [
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "4641196fe02af5cab3d56a9f3c78875c495dbe03",
    "86358221fc85a7743052a0b4c1647353508bf308",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "9c22065109a77681bc2534063eabe8692fbcb3cd",
    "5b99672658ce24bfd1002b880583cbecfa47f9b3",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": "Ybodychange",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ybodychange",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ybodychange",
    "4641196fe02af5cab3d56a9f3c78875c495dbe03": "Ybodychange",
    "86358221fc85a7743052a0b4c1647353508bf308": "Ybodychange",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "5b99672658ce24bfd1002b880583cbecfa47f9b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       internalReleaseResource(clusterResource, node,\n-          rmContainer.getContainer().getResource(), false);\n+          rmContainer.getContainer().getResource());\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      internalReleaseResource(clusterResource, node,\n          rmContainer.getContainer().getResource());\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/10/16 10:30 AM",
      "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 10.03,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       internalReleaseResource(clusterResource, node,\n-          rmContainer.getContainer().getResource(), false, completedChildQueue,\n-          sortQueues);\n+          rmContainer.getContainer().getResource(), false);\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      internalReleaseResource(clusterResource, node,\n          rmContainer.getContainer().getResource(), false);\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/08/15 9:46 AM",
      "commitNameOld": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 47.15,
      "commitsBetweenForRepo": 271,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,18 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n-      // Careful! Locking order is important!\n-      // Book keeping\n-      synchronized (this) {\n-        super.releaseResource(clusterResource, rmContainer.getContainer()\n-            .getResource(), node.getPartition());\n-\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n-        }\n-\n-        // Note that this is using an iterator on the childQueues so this can\u0027t\n-        // be called if already within an iterator for the childQueues. Like\n-        // from assignContainersToChildQueues.\n-        if (sortQueues) {\n-          // reinsert the updated queue\n-          for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n-               iter.hasNext();) {\n-            CSQueue csqueue \u003d iter.next();\n-            if(csqueue.equals(completedChildQueue)) {\n-              iter.remove();\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n-              }\n-              childQueues.add(csqueue);\n-              break;\n-            }\n-          }\n-        }\n-        \n-        // If we skipped sort queue this time, we need to resort queues to make\n-        // sure we allocate from least usage (or order defined by queue policy)\n-        // queues.\n-        needToResortQueuesAtNextAllocation \u003d !sortQueues;\n-      }\n+      internalReleaseResource(clusterResource, node,\n+          rmContainer.getContainer().getResource(), false, completedChildQueue,\n+          sortQueues);\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      internalReleaseResource(clusterResource, node,\n          rmContainer.getContainer().getResource(), false, completedChildQueue,\n          sortQueues);\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3966. Fix excessive loggings in CapacityScheduler. (Jian He via wangda)\n",
      "commitDate": "07/08/15 9:46 AM",
      "commitName": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/08/15 1:47 PM",
      "commitNameOld": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,49 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         super.releaseResource(clusterResource, rmContainer.getContainer()\n             .getResource(), node.getPartition());\n \n-        LOG.info(\"completedContainer\" +\n-            \" queue\u003d\" + getQueueName() + \n-            \" usedCapacity\u003d\" + getUsedCapacity() +\n-            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n-            \" used\u003d\" + queueUsage.getUsed() + \n-            \" cluster\u003d\" + clusterResource);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n+        }\n \n         // Note that this is using an iterator on the childQueues so this can\u0027t\n         // be called if already within an iterator for the childQueues. Like\n         // from assignContainersToChildQueues.\n         if (sortQueues) {\n           // reinsert the updated queue\n           for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n                iter.hasNext();) {\n             CSQueue csqueue \u003d iter.next();\n             if(csqueue.equals(completedChildQueue)) {\n               iter.remove();\n-              LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n-                  \" stats: \" + csqueue);\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n+              }\n               childQueues.add(csqueue);\n               break;\n             }\n           }\n         }\n         \n         // If we skipped sort queue this time, we need to resort queues to make\n         // sure we allocate from least usage (or order defined by queue policy)\n         // queues.\n         needToResortQueuesAtNextAllocation \u003d !sortQueues;\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), node.getPartition());\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"completedContainer \" + this + \", cluster\u003d\" + clusterResource);\n        }\n\n        // Note that this is using an iterator on the childQueues so this can\u0027t\n        // be called if already within an iterator for the childQueues. Like\n        // from assignContainersToChildQueues.\n        if (sortQueues) {\n          // reinsert the updated queue\n          for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n               iter.hasNext();) {\n            CSQueue csqueue \u003d iter.next();\n            if(csqueue.equals(completedChildQueue)) {\n              iter.remove();\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Re-sorting completed queue: \" + csqueue);\n              }\n              childQueues.add(csqueue);\n              break;\n            }\n          }\n        }\n        \n        // If we skipped sort queue this time, we need to resort queues to make\n        // sure we allocate from least usage (or order defined by queue policy)\n        // queues.\n        needToResortQueuesAtNextAllocation \u003d !sortQueues;\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/07/15 9:52 PM",
      "commitNameOld": "5ed1fead6b5ec24bb0ce1a3db033c2ee1ede4bb4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.67,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,51 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         super.releaseResource(clusterResource, rmContainer.getContainer()\n             .getResource(), node.getPartition());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + queueUsage.getUsed() + \n             \" cluster\u003d\" + clusterResource);\n \n         // Note that this is using an iterator on the childQueues so this can\u0027t\n         // be called if already within an iterator for the childQueues. Like\n         // from assignContainersToChildQueues.\n         if (sortQueues) {\n           // reinsert the updated queue\n           for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n                iter.hasNext();) {\n             CSQueue csqueue \u003d iter.next();\n             if(csqueue.equals(completedChildQueue)) {\n               iter.remove();\n               LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n                   \" stats: \" + csqueue);\n               childQueues.add(csqueue);\n               break;\n             }\n           }\n         }\n+        \n+        // If we skipped sort queue this time, we need to resort queues to make\n+        // sure we allocate from least usage (or order defined by queue policy)\n+        // queues.\n+        needToResortQueuesAtNextAllocation \u003d !sortQueues;\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), node.getPartition());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + queueUsage.getUsed() + \n            \" cluster\u003d\" + clusterResource);\n\n        // Note that this is using an iterator on the childQueues so this can\u0027t\n        // be called if already within an iterator for the childQueues. Like\n        // from assignContainersToChildQueues.\n        if (sortQueues) {\n          // reinsert the updated queue\n          for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n               iter.hasNext();) {\n            CSQueue csqueue \u003d iter.next();\n            if(csqueue.equals(completedChildQueue)) {\n              iter.remove();\n              LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n                  \" stats: \" + csqueue);\n              childQueues.add(csqueue);\n              break;\n            }\n          }\n        }\n        \n        // If we skipped sort queue this time, we need to resort queues to make\n        // sure we allocate from least usage (or order defined by queue policy)\n        // queues.\n        needToResortQueuesAtNextAllocation \u003d !sortQueues;\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/04/15 11:38 PM",
      "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 4.51,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         super.releaseResource(clusterResource, rmContainer.getContainer()\n-            .getResource(), node.getLabels());\n+            .getResource(), node.getPartition());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + queueUsage.getUsed() + \n             \" cluster\u003d\" + clusterResource);\n \n         // Note that this is using an iterator on the childQueues so this can\u0027t\n         // be called if already within an iterator for the childQueues. Like\n         // from assignContainersToChildQueues.\n         if (sortQueues) {\n           // reinsert the updated queue\n           for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n                iter.hasNext();) {\n             CSQueue csqueue \u003d iter.next();\n             if(csqueue.equals(completedChildQueue)) {\n               iter.remove();\n               LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n                   \" stats: \" + csqueue);\n               childQueues.add(csqueue);\n               break;\n             }\n           }\n         }\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), node.getPartition());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + queueUsage.getUsed() + \n            \" cluster\u003d\" + clusterResource);\n\n        // Note that this is using an iterator on the childQueues so this can\u0027t\n        // be called if already within an iterator for the childQueues. Like\n        // from assignContainersToChildQueues.\n        if (sortQueues) {\n          // reinsert the updated queue\n          for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n               iter.hasNext();) {\n            CSQueue csqueue \u003d iter.next();\n            if(csqueue.equals(completedChildQueue)) {\n              iter.remove();\n              LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n                  \" stats: \" + csqueue);\n              childQueues.add(csqueue);\n              break;\n            }\n          }\n        }\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "4641196fe02af5cab3d56a9f3c78875c495dbe03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3145. Fixed ConcurrentModificationException on CapacityScheduler ParentQueue#getQueueUserAclInfo. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "05/02/15 4:12 PM",
      "commitName": "4641196fe02af5cab3d56a9f3c78875c495dbe03",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/02/15 11:28 AM",
      "commitNameOld": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         super.releaseResource(clusterResource, rmContainer.getContainer()\n             .getResource(), node.getLabels());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + queueUsage.getUsed() + \n             \" cluster\u003d\" + clusterResource);\n-      }\n \n-      // Note that this is using an iterator on the childQueues so this can\u0027t be\n-      // called if already within an iterator for the childQueues. Like  \n-      // from assignContainersToChildQueues.\n-      if (sortQueues) {\n-        // reinsert the updated queue\n-        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n-          CSQueue csqueue \u003d iter.next();\n-          if(csqueue.equals(completedChildQueue))\n-          {\n-            iter.remove();\n-            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n-                \" stats: \" + csqueue);\n-            childQueues.add(csqueue);\n-            break;\n+        // Note that this is using an iterator on the childQueues so this can\u0027t\n+        // be called if already within an iterator for the childQueues. Like\n+        // from assignContainersToChildQueues.\n+        if (sortQueues) {\n+          // reinsert the updated queue\n+          for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n+               iter.hasNext();) {\n+            CSQueue csqueue \u003d iter.next();\n+            if(csqueue.equals(completedChildQueue)) {\n+              iter.remove();\n+              LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n+                  \" stats: \" + csqueue);\n+              childQueues.add(csqueue);\n+              break;\n+            }\n           }\n         }\n       }\n-      \n+\n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), node.getLabels());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + queueUsage.getUsed() + \n            \" cluster\u003d\" + clusterResource);\n\n        // Note that this is using an iterator on the childQueues so this can\u0027t\n        // be called if already within an iterator for the childQueues. Like\n        // from assignContainersToChildQueues.\n        if (sortQueues) {\n          // reinsert the updated queue\n          for (Iterator\u003cCSQueue\u003e iter \u003d childQueues.iterator();\n               iter.hasNext();) {\n            CSQueue csqueue \u003d iter.next();\n            if(csqueue.equals(completedChildQueue)) {\n              iter.remove();\n              LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() +\n                  \" stats: \" + csqueue);\n              childQueues.add(csqueue);\n              break;\n            }\n          }\n        }\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "86358221fc85a7743052a0b4c1647353508bf308": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3099. Capacity Scheduler LeafQueue/ParentQueue should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "30/01/15 3:15 PM",
      "commitName": "86358221fc85a7743052a0b4c1647353508bf308",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/01/15 2:15 PM",
      "commitNameOld": "dd57c2047bfd21910acc38c98153eedf1db75169",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 24.04,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         super.releaseResource(clusterResource, rmContainer.getContainer()\n             .getResource(), node.getLabels());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n-            \" used\u003d\" + usedResources + \n+            \" used\u003d\" + queueUsage.getUsed() + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Note that this is using an iterator on the childQueues so this can\u0027t be\n       // called if already within an iterator for the childQueues. Like  \n       // from assignContainersToChildQueues.\n       if (sortQueues) {\n         // reinsert the updated queue\n         for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n           CSQueue csqueue \u003d iter.next();\n           if(csqueue.equals(completedChildQueue))\n           {\n             iter.remove();\n             LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                 \" stats: \" + csqueue);\n             childQueues.add(csqueue);\n             break;\n           }\n         }\n       }\n       \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), node.getLabels());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + queueUsage.getUsed() + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t be\n      // called if already within an iterator for the childQueues. Like  \n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n          CSQueue csqueue \u003d iter.next();\n          if(csqueue.equals(completedChildQueue))\n          {\n            iter.remove();\n            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                \" stats: \" + csqueue);\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2920. Changed CapacityScheduler to kill containers on nodes where node labels are changed. Contributed by  Wangda Tan\n",
      "commitDate": "22/12/14 4:51 PM",
      "commitName": "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 67.97,
      "commitsBetweenForRepo": 558,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         super.releaseResource(clusterResource, rmContainer.getContainer()\n-            .getResource(), labelManager.getLabelsOnNode(node.getNodeID()));\n+            .getResource(), node.getLabels());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Note that this is using an iterator on the childQueues so this can\u0027t be\n       // called if already within an iterator for the childQueues. Like  \n       // from assignContainersToChildQueues.\n       if (sortQueues) {\n         // reinsert the updated queue\n         for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n           CSQueue csqueue \u003d iter.next();\n           if(csqueue.equals(completedChildQueue))\n           {\n             iter.remove();\n             LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                 \" stats: \" + csqueue);\n             childQueues.add(csqueue);\n             break;\n           }\n         }\n       }\n       \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), node.getLabels());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t be\n      // called if already within an iterator for the childQueues. Like  \n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n          CSQueue csqueue \u003d iter.next();\n          if(csqueue.equals(completedChildQueue))\n          {\n            iter.remove();\n            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                \" stats: \" + csqueue);\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/14 3:41 PM",
      "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthorOld": "carlo curino",
      "daysBetweenCommits": 12.12,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n       RMContainerEventType event, CSQueue completedChildQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n-        releaseResource(clusterResource, \n-            rmContainer.getContainer().getResource());\n+        super.releaseResource(clusterResource, rmContainer.getContainer()\n+            .getResource(), labelManager.getLabelsOnNode(node.getNodeID()));\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Note that this is using an iterator on the childQueues so this can\u0027t be\n       // called if already within an iterator for the childQueues. Like  \n       // from assignContainersToChildQueues.\n       if (sortQueues) {\n         // reinsert the updated queue\n         for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n           CSQueue csqueue \u003d iter.next();\n           if(csqueue.equals(completedChildQueue))\n           {\n             iter.remove();\n             LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                 \" stats: \" + csqueue);\n             childQueues.add(csqueue);\n             break;\n           }\n         }\n       }\n       \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        super.releaseResource(clusterResource, rmContainer.getContainer()\n            .getResource(), labelManager.getLabelsOnNode(node.getNodeID()));\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t be\n      // called if already within an iterator for the childQueues. Like  \n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n          CSQueue csqueue \u003d iter.next();\n          if(csqueue.equals(completedChildQueue))\n          {\n            iter.remove();\n            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                \" stats: \" + csqueue);\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n-      RMContainerEventType event, CSQueue completedChildQueue) {\n+      RMContainerEventType event, CSQueue completedChildQueue,\n+      boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n-      // reinsert the updated queue\n-      for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n-        CSQueue csqueue \u003d iter.next();\n-        if(csqueue.equals(completedChildQueue))\n-        {\n-          iter.remove();\n-          LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n-              \" stats: \" + csqueue);\n-          childQueues.add(csqueue);\n-          break;\n+      // Note that this is using an iterator on the childQueues so this can\u0027t be\n+      // called if already within an iterator for the childQueues. Like  \n+      // from assignContainersToChildQueues.\n+      if (sortQueues) {\n+        // reinsert the updated queue\n+        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n+          CSQueue csqueue \u003d iter.next();\n+          if(csqueue.equals(completedChildQueue))\n+          {\n+            iter.remove();\n+            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n+                \" stats: \" + csqueue);\n+            childQueues.add(csqueue);\n+            break;\n+          }\n         }\n       }\n       \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n-            node, rmContainer, null, event, this);\n+            node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t be\n      // called if already within an iterator for the childQueues. Like  \n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n          CSQueue csqueue \u003d iter.next();\n          if(csqueue.equals(completedChildQueue))\n          {\n            iter.remove();\n            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                \" stats: \" + csqueue);\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, completedChildQueue-CSQueue]",
            "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, completedChildQueue-CSQueue, sortQueues-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, \n-      RMContainerEventType event, CSQueue completedChildQueue) {\n+      RMContainerEventType event, CSQueue completedChildQueue,\n+      boolean sortQueues) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n-      // reinsert the updated queue\n-      for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n-        CSQueue csqueue \u003d iter.next();\n-        if(csqueue.equals(completedChildQueue))\n-        {\n-          iter.remove();\n-          LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n-              \" stats: \" + csqueue);\n-          childQueues.add(csqueue);\n-          break;\n+      // Note that this is using an iterator on the childQueues so this can\u0027t be\n+      // called if already within an iterator for the childQueues. Like  \n+      // from assignContainersToChildQueues.\n+      if (sortQueues) {\n+        // reinsert the updated queue\n+        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n+          CSQueue csqueue \u003d iter.next();\n+          if(csqueue.equals(completedChildQueue))\n+          {\n+            iter.remove();\n+            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n+                \" stats: \" + csqueue);\n+            childQueues.add(csqueue);\n+            break;\n+          }\n         }\n       }\n       \n       // Inform the parent\n       if (parent !\u003d null) {\n         // complete my parent\n         parent.completedContainer(clusterResource, application, \n-            node, rmContainer, null, event, this);\n+            node, rmContainer, null, event, this, sortQueues);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Note that this is using an iterator on the childQueues so this can\u0027t be\n      // called if already within an iterator for the childQueues. Like  \n      // from assignContainersToChildQueues.\n      if (sortQueues) {\n        // reinsert the updated queue\n        for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n          CSQueue csqueue \u003d iter.next();\n          if(csqueue.equals(completedChildQueue))\n          {\n            iter.remove();\n            LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n                \" stats: \" + csqueue);\n            childQueues.add(csqueue);\n            break;\n          }\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this, sortQueues);\n      }    \n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "5b99672658ce24bfd1002b880583cbecfa47f9b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/07/13 7:59 AM",
      "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/07/13 7:59 AM",
          "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "21/06/13 11:28 AM",
          "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 28.85,
          "commitsBetweenForRepo": 137,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,40 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n-      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n+      RMContainer rmContainer, ContainerStatus containerStatus, \n+      RMContainerEventType event, CSQueue completedChildQueue) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n+      // reinsert the updated queue\n+      for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n+        CSQueue csqueue \u003d iter.next();\n+        if(csqueue.equals(completedChildQueue))\n+        {\n+          iter.remove();\n+          LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n+              \" stats: \" + csqueue);\n+          childQueues.add(csqueue);\n+          break;\n+        }\n+      }\n+      \n       // Inform the parent\n       if (parent !\u003d null) {\n+        // complete my parent\n         parent.completedContainer(clusterResource, application, \n-            node, rmContainer, null, event);\n+            node, rmContainer, null, event, this);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // reinsert the updated queue\n      for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n        CSQueue csqueue \u003d iter.next();\n        if(csqueue.equals(completedChildQueue))\n        {\n          iter.remove();\n          LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n              \" stats: \" + csqueue);\n          childQueues.add(csqueue);\n          break;\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this);\n      }    \n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]",
            "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, completedChildQueue-CSQueue]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/07/13 7:59 AM",
          "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "21/06/13 11:28 AM",
          "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 28.85,
          "commitsBetweenForRepo": 137,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,40 @@\n   public void completedContainer(Resource clusterResource,\n       FiCaSchedulerApp application, FiCaSchedulerNode node, \n-      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n+      RMContainer rmContainer, ContainerStatus containerStatus, \n+      RMContainerEventType event, CSQueue completedChildQueue) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n+      // reinsert the updated queue\n+      for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n+        CSQueue csqueue \u003d iter.next();\n+        if(csqueue.equals(completedChildQueue))\n+        {\n+          iter.remove();\n+          LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n+              \" stats: \" + csqueue);\n+          childQueues.add(csqueue);\n+          break;\n+        }\n+      }\n+      \n       // Inform the parent\n       if (parent !\u003d null) {\n+        // complete my parent\n         parent.completedContainer(clusterResource, application, \n-            node, rmContainer, null, event);\n+            node, rmContainer, null, event, this);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, \n      RMContainerEventType event, CSQueue completedChildQueue) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // reinsert the updated queue\n      for (Iterator\u003cCSQueue\u003e iter\u003dchildQueues.iterator(); iter.hasNext();) {\n        CSQueue csqueue \u003d iter.next();\n        if(csqueue.equals(completedChildQueue))\n        {\n          iter.remove();\n          LOG.info(\"Re-sorting completed queue: \" + csqueue.getQueuePath() + \n              \" stats: \" + csqueue);\n          childQueues.add(csqueue);\n          break;\n        }\n      }\n      \n      // Inform the parent\n      if (parent !\u003d null) {\n        // complete my parent\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event, this);\n      }    \n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event);\n      }    \n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "19/06/12 6:06 AM",
      "commitNameOld": "01b61c76a85858a0bc0cba24cc00f961affa4922",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 27.53,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void completedContainer(Resource clusterResource,\n-      SchedulerApp application, SchedulerNode node, \n+      FiCaSchedulerApp application, FiCaSchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      FiCaSchedulerApp application, FiCaSchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event);\n      }    \n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldValue": "[clusterResource-Resource, application-SchedulerApp, node-SchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]",
        "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
      }
    },
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3816 capacity scheduler web ui bar graphs for used capacity wrong (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1294808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 12:06 PM",
      "commitName": "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "07/02/12 2:08 PM",
      "commitNameOld": "59b88655bc15535d7bf765987cb9b82f17e16b80",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void completedContainer(Resource clusterResource,\n       SchedulerApp application, SchedulerNode node, \n       RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n-            \" util\u003d\" + getUtilization() + \n+            \" usedCapacity\u003d\" + getUsedCapacity() +\n+            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         parent.completedContainer(clusterResource, application, \n             node, rmContainer, null, event);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      SchedulerApp application, SchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event);\n      }    \n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n   public void completedContainer(Resource clusterResource,\n       SchedulerApp application, SchedulerNode node, \n-      RMContainer rmContainer, RMContainerEventType event) {\n+      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" util\u003d\" + getUtilization() + \n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         parent.completedContainer(clusterResource, application, \n-            node, rmContainer, event);\n+            node, rmContainer, null, event);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource,\n      SchedulerApp application, SchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event);\n      }    \n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApp, node-SchedulerNode, rmContainer-RMContainer, event-RMContainerEventType]",
            "newValue": "[clusterResource-Resource, application-SchedulerApp, node-SchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n   public void completedContainer(Resource clusterResource,\n       SchedulerApp application, SchedulerNode node, \n-      RMContainer rmContainer, RMContainerEventType event) {\n+      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       // Book keeping\n       synchronized (this) {\n         releaseResource(clusterResource, \n             rmContainer.getContainer().getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" queue\u003d\" + getQueueName() + \n             \" util\u003d\" + getUtilization() + \n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent\n       if (parent !\u003d null) {\n         parent.completedContainer(clusterResource, application, \n-            node, rmContainer, event);\n+            node, rmContainer, null, event);\n       }    \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource,\n      SchedulerApp application, SchedulerNode node, \n      RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, null, event);\n      }    \n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      SchedulerApp application, SchedulerNode node, \n      RMContainer rmContainer, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, event);\n      }    \n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,24 @@\n+  public void completedContainer(Resource clusterResource,\n+      SchedulerApp application, SchedulerNode node, \n+      RMContainer rmContainer, RMContainerEventType event) {\n+    if (application !\u003d null) {\n+      // Careful! Locking order is important!\n+      // Book keeping\n+      synchronized (this) {\n+        releaseResource(clusterResource, \n+            rmContainer.getContainer().getResource());\n+\n+        LOG.info(\"completedContainer\" +\n+            \" queue\u003d\" + getQueueName() + \n+            \" util\u003d\" + getUtilization() + \n+            \" used\u003d\" + usedResources + \n+            \" cluster\u003d\" + clusterResource);\n+      }\n+\n+      // Inform the parent\n+      if (parent !\u003d null) {\n+        parent.completedContainer(clusterResource, application, \n+            node, rmContainer, event);\n+      }    \n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource,\n      SchedulerApp application, SchedulerNode node, \n      RMContainer rmContainer, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      // Book keeping\n      synchronized (this) {\n        releaseResource(clusterResource, \n            rmContainer.getContainer().getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" queue\u003d\" + getQueueName() + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent\n      if (parent !\u003d null) {\n        parent.completedContainer(clusterResource, application, \n            node, rmContainer, event);\n      }    \n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}