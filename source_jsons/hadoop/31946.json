{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowScanner.java",
  "functionName": "compareCellValues",
  "functionId": "compareCellValues___previouslyChosenCell-Cell__currentCell-Cell__currentAggOp-AggregationOperation__converter-NumericValueConverter",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-2/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java",
  "functionStartLine": 539,
  "functionEndLine": 576,
  "numCommitsSeen": 4,
  "timeTaken": 770,
  "changeHistory": [
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b"
  ],
  "changeHistoryShort": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55ba49dd071b66e72c47a1c41e88b9a5feddf53b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7346. Add a profile to allow optional compilation for ATSv2 with HBase-2.0. Contributed by Haibo Chen and Rohith.\n",
      "commitDate": "05/03/18 10:25 PM",
      "commitName": "55ba49dd071b66e72c47a1c41e88b9a5feddf53b",
      "commitAuthor": "Rohith Sharma K S",
      "diff": "@@ -0,0 +1,38 @@\n+  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n+      AggregationOperation currentAggOp, NumericValueConverter converter)\n+      throws IOException {\n+    if (previouslyChosenCell \u003d\u003d null) {\n+      return currentCell;\n+    }\n+    try {\n+      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n+          CellUtil.cloneValue(previouslyChosenCell));\n+      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n+          .cloneValue(currentCell));\n+      switch (currentAggOp) {\n+      case GLOBAL_MIN:\n+        if (converter.compare(\n+            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n+          // new value is minimum, hence return this cell\n+          return currentCell;\n+        } else {\n+          // previously chosen value is miniumum, hence return previous min cell\n+          return previouslyChosenCell;\n+        }\n+      case GLOBAL_MAX:\n+        if (converter.compare(\n+            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n+          // new value is max, hence return this cell\n+          return currentCell;\n+        } else {\n+          // previously chosen value is max, hence return previous max cell\n+          return previouslyChosenCell;\n+        }\n+      default:\n+        return currentCell;\n+      }\n+    } catch (IllegalArgumentException iae) {\n+      LOG.error(\"caught iae during conversion to long \", iae);\n+      return currentCell;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Cell compareCellValues(Cell previouslyChosenCell, Cell currentCell,\n      AggregationOperation currentAggOp, NumericValueConverter converter)\n      throws IOException {\n    if (previouslyChosenCell \u003d\u003d null) {\n      return currentCell;\n    }\n    try {\n      Number previouslyChosenCellValue \u003d (Number)converter.decodeValue(\n          CellUtil.cloneValue(previouslyChosenCell));\n      Number currentCellValue \u003d (Number) converter.decodeValue(CellUtil\n          .cloneValue(currentCell));\n      switch (currentAggOp) {\n      case GLOBAL_MIN:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003c 0) {\n          // new value is minimum, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is miniumum, hence return previous min cell\n          return previouslyChosenCell;\n        }\n      case GLOBAL_MAX:\n        if (converter.compare(\n            currentCellValue, previouslyChosenCellValue) \u003e 0) {\n          // new value is max, hence return this cell\n          return currentCell;\n        } else {\n          // previously chosen value is max, hence return previous max cell\n          return previouslyChosenCell;\n        }\n      default:\n        return currentCell;\n      }\n    } catch (IllegalArgumentException iae) {\n      LOG.error(\"caught iae during conversion to long \", iae);\n      return currentCell;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-server/hadoop-yarn-server-timelineservice-hbase-server-2/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/flow/FlowScanner.java"
    }
  }
}