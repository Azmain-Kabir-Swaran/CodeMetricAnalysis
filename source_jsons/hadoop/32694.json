{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "getValueForHeartbeat",
  "functionId": "getValueForHeartbeat",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 928,
  "functionEndLine": 959,
  "numCommitsSeen": 117,
  "timeTaken": 1782,
  "changeHistory": [
    "f659485ee83f3f34e3717631983adfc8fa1e53dc"
  ],
  "changeHistoryShort": {
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8925. Updating distributed node attributes only when necessary. Contributed by Tao Yang.\n",
      "commitDate": "20/12/18 6:56 PM",
      "commitName": "f659485ee83f3f34e3717631983adfc8fa1e53dc",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,32 @@\n+    public T getValueForHeartbeat() {\n+      T value \u003d getValueFromProvider();\n+      // if the provider returns null then consider default value are set\n+      if (defaultValue !\u003d null) {\n+        value \u003d (null \u003d\u003d value) ? defaultValue : value;\n+      }\n+      // take some action only on modification of value\n+      boolean isValueUpdated \u003d isValueUpdated(value);\n+\n+      isValueSented \u003d false;\n+      // When value updated or resync time is elapsed will send again in\n+      // heartbeat.\n+      if (isValueUpdated || isResyncIntervalElapsed()) {\n+        previousValue \u003d value;\n+        try {\n+          validate(value);\n+          isValueSented \u003d true;\n+        } catch (IOException e) {\n+          // take previous value to replace invalid value, so that invalid\n+          // value are not verified for every HB, and send empty set\n+          // to RM to have same value which was earlier set.\n+          value \u003d null;\n+        } finally {\n+          // Set last send time in heartbeat\n+          lastSendMills \u003d System.currentTimeMillis();\n+        }\n+      } else {\n+        // if value have not changed then no need to send\n+        value \u003d null;\n+      }\n+      return value;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public T getValueForHeartbeat() {\n      T value \u003d getValueFromProvider();\n      // if the provider returns null then consider default value are set\n      if (defaultValue !\u003d null) {\n        value \u003d (null \u003d\u003d value) ? defaultValue : value;\n      }\n      // take some action only on modification of value\n      boolean isValueUpdated \u003d isValueUpdated(value);\n\n      isValueSented \u003d false;\n      // When value updated or resync time is elapsed will send again in\n      // heartbeat.\n      if (isValueUpdated || isResyncIntervalElapsed()) {\n        previousValue \u003d value;\n        try {\n          validate(value);\n          isValueSented \u003d true;\n        } catch (IOException e) {\n          // take previous value to replace invalid value, so that invalid\n          // value are not verified for every HB, and send empty set\n          // to RM to have same value which was earlier set.\n          value \u003d null;\n        } finally {\n          // Set last send time in heartbeat\n          lastSendMills \u003d System.currentTimeMillis();\n        }\n      } else {\n        // if value have not changed then no need to send\n        value \u003d null;\n      }\n      return value;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}