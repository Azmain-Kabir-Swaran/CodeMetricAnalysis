{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyMapper.java",
  "functionName": "setup",
  "functionId": "setup___context-Context",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
  "functionStartLine": 103,
  "functionEndLine": 129,
  "numCommitsSeen": 25,
  "timeTaken": 2285,
  "changeHistory": [
    "de804e53b9d20a2df75a4c7252bf83ed52011488",
    "63720ef574df6d79a9bab0628edb915d1e3a7c30",
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "18c7e582839ea0b550463569b18b5827d23f8849",
    "8ef07f767f0421b006b0fc77e5daf36c7b06abf1",
    "3671a5e16fbddbe5a0516289ce98e1305e02291c",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "de804e53b9d20a2df75a4c7252bf83ed52011488": "Ybodychange",
    "63720ef574df6d79a9bab0628edb915d1e3a7c30": "Ybodychange",
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "18c7e582839ea0b550463569b18b5827d23f8849": "Ybodychange",
    "8ef07f767f0421b006b0fc77e5daf36c7b06abf1": "Ybodychange",
    "3671a5e16fbddbe5a0516289ce98e1305e02291c": "Ybodychange",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de804e53b9d20a2df75a4c7252bf83ed52011488": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15281. Distcp to add no-rename copy option.\n\nContributed by Andrew Olson.\n",
      "commitDate": "07/02/19 2:07 AM",
      "commitName": "de804e53b9d20a2df75a4c7252bf83ed52011488",
      "commitAuthor": "Andrew Olson",
      "commitDateOld": "15/08/18 8:31 AM",
      "commitNameOld": "3e3963b035911703c61e6d9a2939eb894da5644c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 175.77,
      "commitsBetweenForRepo": 1362,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   public void setup(Context context) throws IOException, InterruptedException {\n     conf \u003d context.getConfiguration();\n \n     syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n     ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n     skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n     overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n     append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n     verboseLog \u003d conf.getBoolean(\n         DistCpOptionSwitch.VERBOSE_LOG.getConfigLabel(), false);\n     preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n         PRESERVE_STATUS.getConfigLabel()));\n+    directWrite \u003d conf.getBoolean(\n+        DistCpOptionSwitch.DIRECT_WRITE.getConfigLabel(), false);\n \n     targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n     Path targetFinalPath \u003d new Path(conf.get(\n             DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     targetFS \u003d targetFinalPath.getFileSystem(conf);\n \n     try {\n       overWrite \u003d overWrite || targetFS.getFileStatus(targetFinalPath).isFile();\n     } catch (FileNotFoundException ignored) {\n     }\n \n     startEpoch \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n    verboseLog \u003d conf.getBoolean(\n        DistCpOptionSwitch.VERBOSE_LOG.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n    directWrite \u003d conf.getBoolean(\n        DistCpOptionSwitch.DIRECT_WRITE.getConfigLabel(), false);\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    try {\n      overWrite \u003d overWrite || targetFS.getFileStatus(targetFinalPath).isFile();\n    } catch (FileNotFoundException ignored) {\n    }\n\n    startEpoch \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "63720ef574df6d79a9bab0628edb915d1e3a7c30": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14839. DistCp log output should contain copied and deleted files and directories. Contributed by Yiqun Lin.\n",
      "commitDate": "05/09/17 11:34 PM",
      "commitName": "63720ef574df6d79a9bab0628edb915d1e3a7c30",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 159.25,
      "commitsBetweenForRepo": 958,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public void setup(Context context) throws IOException, InterruptedException {\n     conf \u003d context.getConfiguration();\n \n     syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n     ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n     skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n     overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n     append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n+    verboseLog \u003d conf.getBoolean(\n+        DistCpOptionSwitch.VERBOSE_LOG.getConfigLabel(), false);\n     preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n         PRESERVE_STATUS.getConfigLabel()));\n \n     targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n     Path targetFinalPath \u003d new Path(conf.get(\n             DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     targetFS \u003d targetFinalPath.getFileSystem(conf);\n \n     try {\n       overWrite \u003d overWrite || targetFS.getFileStatus(targetFinalPath).isFile();\n     } catch (FileNotFoundException ignored) {\n     }\n \n     startEpoch \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n    verboseLog \u003d conf.getBoolean(\n        DistCpOptionSwitch.VERBOSE_LOG.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    try {\n      overWrite \u003d overWrite || targetFS.getFileStatus(targetFinalPath).isFile();\n    } catch (FileNotFoundException ignored) {\n    }\n\n    startEpoch \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "24/10/16 12:46 PM",
      "commitNameOld": "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 21.97,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public void setup(Context context) throws IOException, InterruptedException {\n     conf \u003d context.getConfiguration();\n \n     syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n     ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n     skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n     overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n     append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n     preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n         PRESERVE_STATUS.getConfigLabel()));\n \n     targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n     Path targetFinalPath \u003d new Path(conf.get(\n             DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     targetFS \u003d targetFinalPath.getFileSystem(conf);\n \n-    if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n-      overWrite \u003d true; // When target is an existing file, overwrite it.\n+    try {\n+      overWrite \u003d overWrite || targetFS.getFileStatus(targetFinalPath).isFile();\n+    } catch (FileNotFoundException ignored) {\n     }\n \n     startEpoch \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    try {\n      overWrite \u003d overWrite || targetFS.getFileStatus(targetFinalPath).isFile();\n    } catch (FileNotFoundException ignored) {\n    }\n\n    startEpoch \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "18c7e582839ea0b550463569b18b5827d23f8849": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9640. Remove hsftp from DistCp in trunk. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "27/03/16 11:32 PM",
      "commitName": "18c7e582839ea0b550463569b18b5827d23f8849",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/10/15 3:24 AM",
      "commitNameOld": "7e2c971fedd1195a51203ff12fdfdeb4642f2082",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 169.84,
      "commitsBetweenForRepo": 1120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,22 @@\n   public void setup(Context context) throws IOException, InterruptedException {\n     conf \u003d context.getConfiguration();\n \n     syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n     ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n     skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n     overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n     append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n     preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n         PRESERVE_STATUS.getConfigLabel()));\n \n     targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n     Path targetFinalPath \u003d new Path(conf.get(\n             DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     targetFS \u003d targetFinalPath.getFileSystem(conf);\n \n     if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n       overWrite \u003d true; // When target is an existing file, overwrite it.\n     }\n \n-    if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n-      initializeSSLConf(context);\n-    }\n     startEpoch \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n      overWrite \u003d true; // When target is an existing file, overwrite it.\n    }\n\n    startEpoch \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "8ef07f767f0421b006b0fc77e5daf36c7b06abf1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11203. Allow ditscp to accept bandwitdh in fraction MegaBytes. Contributed by Raju Bairishetti\n",
      "commitDate": "25/06/15 9:22 PM",
      "commitName": "8ef07f767f0421b006b0fc77e5daf36c7b06abf1",
      "commitAuthor": "Amareshwari Sriramadasu",
      "commitDateOld": "03/03/15 1:06 AM",
      "commitNameOld": "9ae7f9eb7baeb244e1b95aabc93ad8124870b9a9",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 114.8,
      "commitsBetweenForRepo": 1014,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void setup(Context context) throws IOException, InterruptedException {\n     conf \u003d context.getConfiguration();\n \n     syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n     ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n     skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n     overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n     append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n     preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n         PRESERVE_STATUS.getConfigLabel()));\n \n     targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n     Path targetFinalPath \u003d new Path(conf.get(\n             DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     targetFS \u003d targetFinalPath.getFileSystem(conf);\n \n     if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n       overWrite \u003d true; // When target is an existing file, overwrite it.\n     }\n \n     if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n       initializeSSLConf(context);\n     }\n+    startEpoch \u003d System.currentTimeMillis();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n      overWrite \u003d true; // When target is an existing file, overwrite it.\n    }\n\n    if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n      initializeSSLConf(context);\n    }\n    startEpoch \u003d System.currentTimeMillis();\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "3671a5e16fbddbe5a0516289ce98e1305e02291c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5899. Support incremental data copy in DistCp. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596931 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/14 11:17 AM",
      "commitName": "3671a5e16fbddbe5a0516289ce98e1305e02291c",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "16/05/14 11:25 AM",
      "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public void setup(Context context) throws IOException, InterruptedException {\n     conf \u003d context.getConfiguration();\n \n     syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n     ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n     skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n     overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n+    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n     preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n         PRESERVE_STATUS.getConfigLabel()));\n \n     targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n     Path targetFinalPath \u003d new Path(conf.get(\n             DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     targetFS \u003d targetFinalPath.getFileSystem(conf);\n \n     if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n       overWrite \u003d true; // When target is an existing file, overwrite it.\n     }\n \n     if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n       initializeSSLConf(context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    append \u003d conf.getBoolean(DistCpOptionSwitch.APPEND.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n      overWrite \u003d true; // When target is an existing file, overwrite it.\n    }\n\n    if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n      initializeSSLConf(context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,23 @@\n+  public void setup(Context context) throws IOException, InterruptedException {\n+    conf \u003d context.getConfiguration();\n+\n+    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n+    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n+    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n+    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n+    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n+        PRESERVE_STATUS.getConfigLabel()));\n+\n+    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n+    Path targetFinalPath \u003d new Path(conf.get(\n+            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n+    targetFS \u003d targetFinalPath.getFileSystem(conf);\n+\n+    if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n+      overWrite \u003d true; // When target is an existing file, overwrite it.\n+    }\n+\n+    if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n+      initializeSSLConf(context);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setup(Context context) throws IOException, InterruptedException {\n    conf \u003d context.getConfiguration();\n\n    syncFolders \u003d conf.getBoolean(DistCpOptionSwitch.SYNC_FOLDERS.getConfigLabel(), false);\n    ignoreFailures \u003d conf.getBoolean(DistCpOptionSwitch.IGNORE_FAILURES.getConfigLabel(), false);\n    skipCrc \u003d conf.getBoolean(DistCpOptionSwitch.SKIP_CRC.getConfigLabel(), false);\n    overWrite \u003d conf.getBoolean(DistCpOptionSwitch.OVERWRITE.getConfigLabel(), false);\n    preserve \u003d DistCpUtils.unpackAttributes(conf.get(DistCpOptionSwitch.\n        PRESERVE_STATUS.getConfigLabel()));\n\n    targetWorkPath \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n    Path targetFinalPath \u003d new Path(conf.get(\n            DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    targetFS \u003d targetFinalPath.getFileSystem(conf);\n\n    if (targetFS.exists(targetFinalPath) \u0026\u0026 targetFS.isFile(targetFinalPath)) {\n      overWrite \u003d true; // When target is an existing file, overwrite it.\n    }\n\n    if (conf.get(DistCpConstants.CONF_LABEL_SSL_CONF) !\u003d null) {\n      initializeSSLConf(context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java"
    }
  }
}