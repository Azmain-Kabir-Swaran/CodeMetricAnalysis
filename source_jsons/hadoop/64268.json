{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SessionTokenBinding.java",
  "functionName": "maybeInitSTS",
  "functionId": "maybeInitSTS",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/SessionTokenBinding.java",
  "functionStartLine": 278,
  "functionEndLine": 320,
  "numCommitsSeen": 8,
  "timeTaken": 2348,
  "changeHistory": [
    "e02b1023c2f42b6792d2941c1f987ae06259b021",
    "0e4b757955ae8da1651b870c12458e3344c0b613",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502"
  ],
  "changeHistoryShort": {
    "e02b1023c2f42b6792d2941c1f987ae06259b021": "Ybodychange",
    "0e4b757955ae8da1651b870c12458e3344c0b613": "Ybodychange",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e02b1023c2f42b6792d2941c1f987ae06259b021": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16445. Allow separate custom signing algorithms for S3 and DDB (#1332)\n\n",
      "commitDate": "20/09/19 11:20 PM",
      "commitName": "e02b1023c2f42b6792d2941c1f987ae06259b021",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "14/08/19 1:50 AM",
      "commitNameOld": "0e4b757955ae8da1651b870c12458e3344c0b613",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 37.9,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   private synchronized Optional\u003cSTSClientFactory.STSClient\u003e maybeInitSTS()\n       throws IOException {\n     if (stsInitAttempted.getAndSet(true)) {\n       // whether or not it succeeded, the state of the STS client is what\n       // callers get after the first attempt.\n       return stsClient;\n     }\n \n     Configuration conf \u003d getConfig();\n     URI uri \u003d getCanonicalUri();\n \n     // Ask the owner for any session credentials which it already has\n     // so that it can just propagate them.\n     // this call may fail if there are no credentials on the auth\n     // chain.\n     // As no codepath (session propagation, STS creation) will work,\n     // throw this.\n     final AWSCredentials parentCredentials \u003d once(\"get credentials\",\n         \"\",\n         () -\u003e parentAuthChain.getCredentials());\n     hasSessionCreds \u003d parentCredentials instanceof AWSSessionCredentials;\n \n     if (!hasSessionCreds) {\n       LOG.debug(\"Creating STS client for {}\", getDescription());\n \n       invoker \u003d new Invoker(new S3ARetryPolicy(conf), LOG_EVENT);\n       ClientConfiguration awsConf \u003d\n-          S3AUtils.createAwsConf(conf, uri.getHost());\n+          S3AUtils.createAwsConf(conf, uri.getHost(),\n+              Constants.AWS_SERVICE_IDENTIFIER_STS);\n       AWSSecurityTokenService tokenService \u003d\n           STSClientFactory.builder(parentAuthChain,\n               awsConf,\n               endpoint,\n               region)\n               .build();\n       stsClient \u003d Optional.of(\n           STSClientFactory.createClientConnection(tokenService, invoker));\n     } else {\n       LOG.debug(\"Parent-provided session credentials will be propagated\");\n       stsClient \u003d Optional.empty();\n     }\n     return stsClient;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Optional\u003cSTSClientFactory.STSClient\u003e maybeInitSTS()\n      throws IOException {\n    if (stsInitAttempted.getAndSet(true)) {\n      // whether or not it succeeded, the state of the STS client is what\n      // callers get after the first attempt.\n      return stsClient;\n    }\n\n    Configuration conf \u003d getConfig();\n    URI uri \u003d getCanonicalUri();\n\n    // Ask the owner for any session credentials which it already has\n    // so that it can just propagate them.\n    // this call may fail if there are no credentials on the auth\n    // chain.\n    // As no codepath (session propagation, STS creation) will work,\n    // throw this.\n    final AWSCredentials parentCredentials \u003d once(\"get credentials\",\n        \"\",\n        () -\u003e parentAuthChain.getCredentials());\n    hasSessionCreds \u003d parentCredentials instanceof AWSSessionCredentials;\n\n    if (!hasSessionCreds) {\n      LOG.debug(\"Creating STS client for {}\", getDescription());\n\n      invoker \u003d new Invoker(new S3ARetryPolicy(conf), LOG_EVENT);\n      ClientConfiguration awsConf \u003d\n          S3AUtils.createAwsConf(conf, uri.getHost(),\n              Constants.AWS_SERVICE_IDENTIFIER_STS);\n      AWSSecurityTokenService tokenService \u003d\n          STSClientFactory.builder(parentAuthChain,\n              awsConf,\n              endpoint,\n              region)\n              .build();\n      stsClient \u003d Optional.of(\n          STSClientFactory.createClientConnection(tokenService, invoker));\n    } else {\n      LOG.debug(\"Parent-provided session credentials will be propagated\");\n      stsClient \u003d Optional.empty();\n    }\n    return stsClient;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/SessionTokenBinding.java",
      "extendedDetails": {}
    },
    "0e4b757955ae8da1651b870c12458e3344c0b613": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16500 S3ADelegationTokens to only log at debug on startup (#1269). Contributed by Steve Loughran.\n\nChange-Id: Ifafc15f32791911976d7ebc36fb6e8853f59ed41",
      "commitDate": "14/08/19 1:50 AM",
      "commitName": "0e4b757955ae8da1651b870c12458e3344c0b613",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/02/19 1:07 PM",
      "commitNameOld": "6c999fe4b0181720c8e55be8388bd592196c8c87",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 183.49,
      "commitsBetweenForRepo": 1409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private synchronized Optional\u003cSTSClientFactory.STSClient\u003e maybeInitSTS()\n       throws IOException {\n     if (stsInitAttempted.getAndSet(true)) {\n       // whether or not it succeeded, the state of the STS client is what\n       // callers get after the first attempt.\n       return stsClient;\n     }\n \n     Configuration conf \u003d getConfig();\n     URI uri \u003d getCanonicalUri();\n \n     // Ask the owner for any session credentials which it already has\n     // so that it can just propagate them.\n     // this call may fail if there are no credentials on the auth\n     // chain.\n     // As no codepath (session propagation, STS creation) will work,\n     // throw this.\n     final AWSCredentials parentCredentials \u003d once(\"get credentials\",\n         \"\",\n         () -\u003e parentAuthChain.getCredentials());\n     hasSessionCreds \u003d parentCredentials instanceof AWSSessionCredentials;\n \n     if (!hasSessionCreds) {\n-      LOG.info(\"Creating STS client for {}\", getDescription());\n+      LOG.debug(\"Creating STS client for {}\", getDescription());\n \n       invoker \u003d new Invoker(new S3ARetryPolicy(conf), LOG_EVENT);\n       ClientConfiguration awsConf \u003d\n           S3AUtils.createAwsConf(conf, uri.getHost());\n       AWSSecurityTokenService tokenService \u003d\n           STSClientFactory.builder(parentAuthChain,\n               awsConf,\n               endpoint,\n               region)\n               .build();\n       stsClient \u003d Optional.of(\n           STSClientFactory.createClientConnection(tokenService, invoker));\n     } else {\n       LOG.debug(\"Parent-provided session credentials will be propagated\");\n       stsClient \u003d Optional.empty();\n     }\n     return stsClient;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Optional\u003cSTSClientFactory.STSClient\u003e maybeInitSTS()\n      throws IOException {\n    if (stsInitAttempted.getAndSet(true)) {\n      // whether or not it succeeded, the state of the STS client is what\n      // callers get after the first attempt.\n      return stsClient;\n    }\n\n    Configuration conf \u003d getConfig();\n    URI uri \u003d getCanonicalUri();\n\n    // Ask the owner for any session credentials which it already has\n    // so that it can just propagate them.\n    // this call may fail if there are no credentials on the auth\n    // chain.\n    // As no codepath (session propagation, STS creation) will work,\n    // throw this.\n    final AWSCredentials parentCredentials \u003d once(\"get credentials\",\n        \"\",\n        () -\u003e parentAuthChain.getCredentials());\n    hasSessionCreds \u003d parentCredentials instanceof AWSSessionCredentials;\n\n    if (!hasSessionCreds) {\n      LOG.debug(\"Creating STS client for {}\", getDescription());\n\n      invoker \u003d new Invoker(new S3ARetryPolicy(conf), LOG_EVENT);\n      ClientConfiguration awsConf \u003d\n          S3AUtils.createAwsConf(conf, uri.getHost());\n      AWSSecurityTokenService tokenService \u003d\n          STSClientFactory.builder(parentAuthChain,\n              awsConf,\n              endpoint,\n              region)\n              .build();\n      stsClient \u003d Optional.of(\n          STSClientFactory.createClientConnection(tokenService, invoker));\n    } else {\n      LOG.debug(\"Parent-provided session credentials will be propagated\");\n      stsClient \u003d Optional.empty();\n    }\n    return stsClient;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/SessionTokenBinding.java",
      "extendedDetails": {}
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,42 @@\n+  private synchronized Optional\u003cSTSClientFactory.STSClient\u003e maybeInitSTS()\n+      throws IOException {\n+    if (stsInitAttempted.getAndSet(true)) {\n+      // whether or not it succeeded, the state of the STS client is what\n+      // callers get after the first attempt.\n+      return stsClient;\n+    }\n+\n+    Configuration conf \u003d getConfig();\n+    URI uri \u003d getCanonicalUri();\n+\n+    // Ask the owner for any session credentials which it already has\n+    // so that it can just propagate them.\n+    // this call may fail if there are no credentials on the auth\n+    // chain.\n+    // As no codepath (session propagation, STS creation) will work,\n+    // throw this.\n+    final AWSCredentials parentCredentials \u003d once(\"get credentials\",\n+        \"\",\n+        () -\u003e parentAuthChain.getCredentials());\n+    hasSessionCreds \u003d parentCredentials instanceof AWSSessionCredentials;\n+\n+    if (!hasSessionCreds) {\n+      LOG.info(\"Creating STS client for {}\", getDescription());\n+\n+      invoker \u003d new Invoker(new S3ARetryPolicy(conf), LOG_EVENT);\n+      ClientConfiguration awsConf \u003d\n+          S3AUtils.createAwsConf(conf, uri.getHost());\n+      AWSSecurityTokenService tokenService \u003d\n+          STSClientFactory.builder(parentAuthChain,\n+              awsConf,\n+              endpoint,\n+              region)\n+              .build();\n+      stsClient \u003d Optional.of(\n+          STSClientFactory.createClientConnection(tokenService, invoker));\n+    } else {\n+      LOG.debug(\"Parent-provided session credentials will be propagated\");\n+      stsClient \u003d Optional.empty();\n+    }\n+    return stsClient;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized Optional\u003cSTSClientFactory.STSClient\u003e maybeInitSTS()\n      throws IOException {\n    if (stsInitAttempted.getAndSet(true)) {\n      // whether or not it succeeded, the state of the STS client is what\n      // callers get after the first attempt.\n      return stsClient;\n    }\n\n    Configuration conf \u003d getConfig();\n    URI uri \u003d getCanonicalUri();\n\n    // Ask the owner for any session credentials which it already has\n    // so that it can just propagate them.\n    // this call may fail if there are no credentials on the auth\n    // chain.\n    // As no codepath (session propagation, STS creation) will work,\n    // throw this.\n    final AWSCredentials parentCredentials \u003d once(\"get credentials\",\n        \"\",\n        () -\u003e parentAuthChain.getCredentials());\n    hasSessionCreds \u003d parentCredentials instanceof AWSSessionCredentials;\n\n    if (!hasSessionCreds) {\n      LOG.info(\"Creating STS client for {}\", getDescription());\n\n      invoker \u003d new Invoker(new S3ARetryPolicy(conf), LOG_EVENT);\n      ClientConfiguration awsConf \u003d\n          S3AUtils.createAwsConf(conf, uri.getHost());\n      AWSSecurityTokenService tokenService \u003d\n          STSClientFactory.builder(parentAuthChain,\n              awsConf,\n              endpoint,\n              region)\n              .build();\n      stsClient \u003d Optional.of(\n          STSClientFactory.createClientConnection(tokenService, invoker));\n    } else {\n      LOG.debug(\"Parent-provided session credentials will be propagated\");\n      stsClient \u003d Optional.empty();\n    }\n    return stsClient;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/SessionTokenBinding.java"
    }
  }
}