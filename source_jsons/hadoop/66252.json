{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "runNewAM",
  "functionId": "runNewAM___jobType-String__user-String__jobQueue-String__oldJobId-String__jobStartTimeMS-long__jobFinishTimeMS-long__containerList-List__ContainerSimulator____reservationId-ReservationId__deadline-long__amContainerResource-Resource__labelExpr-String__params-Map__String,String__",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 845,
  "functionEndLine": 878,
  "numCommitsSeen": 138,
  "timeTaken": 5854,
  "changeHistory": [
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
    "0ba8cda13549cc4a3946c440016f9d2a9e78740d",
    "147df300bf00b5f4ed250426b6ccdd69085466da",
    "475f933b41276b1bdeeec09e30369120f7eccdb8"
  ],
  "changeHistoryShort": {
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09": "Ybodychange",
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Ymultichange(Yparameterchange,Ybodychange)",
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": "Ymultichange(Yparameterchange,Ybodychange)",
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": "Ymultichange(Yparameterchange,Ybodychange)",
    "0ba8cda13549cc4a3946c440016f9d2a9e78740d": "Ybodychange",
    "147df300bf00b5f4ed250426b6ccdd69085466da": "Ymultichange(Yparameterchange,Ybodychange)",
    "475f933b41276b1bdeeec09e30369120f7eccdb8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9293. Optimize MockAMLauncher event handling. Contributed by Bibin A Chundatt.\n",
      "commitDate": "14/02/19 9:26 AM",
      "commitName": "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/10/18 3:40 AM",
      "commitNameOld": "b4a38e7b3e530756fb79d23dd4e218beeb5e3190",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 122.28,
      "commitsBetweenForRepo": 866,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n       ReservationId reservationId, long deadline, Resource amContainerResource,\n       String labelExpr, Map\u003cString, String\u003e params) {\n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n           jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n-          runner.getStartTimeMS(), amContainerResource, labelExpr, params);\n+          runner.getStartTimeMS(), amContainerResource, labelExpr, params,\n+          appIdAMSim);\n       if(reservationId !\u003d null) {\n         // if we have a ReservationId, delegate reservation creation to\n         // AMSim (reservation shape is impl specific)\n         UTCClock clock \u003d new UTCClock();\n         amSim.initReservation(reservationId, deadline, clock.getTime());\n       }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline, Resource amContainerResource,\n      String labelExpr, Map\u003cString, String\u003e params) {\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource, labelExpr, params,\n          appIdAMSim);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "31/07/18 9:36 AM",
          "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "26/04/18 1:52 PM",
          "commitNameOld": "2adda92de1535c0472c0df33a145fa1814703f4f",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 95.82,
          "commitsBetweenForRepo": 689,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,33 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n       ReservationId reservationId, long deadline, Resource amContainerResource,\n-      Map\u003cString, String\u003e params) {\n-\n+      String labelExpr, Map\u003cString, String\u003e params) {\n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n           jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n-          runner.getStartTimeMS(), amContainerResource, params);\n+          runner.getStartTimeMS(), amContainerResource, labelExpr, params);\n       if(reservationId !\u003d null) {\n         // if we have a ReservationId, delegate reservation creation to\n         // AMSim (reservation shape is impl specific)\n         UTCClock clock \u003d new UTCClock();\n         amSim.initReservation(reservationId, deadline, clock.getTime());\n       }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline, Resource amContainerResource,\n      String labelExpr, Map\u003cString, String\u003e params) {\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource, labelExpr, params);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, reservationId-ReservationId, deadline-long, amContainerResource-Resource, params-Map\u003cString,String\u003e]",
            "newValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, reservationId-ReservationId, deadline-long, amContainerResource-Resource, labelExpr-String, params-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "31/07/18 9:36 AM",
          "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "26/04/18 1:52 PM",
          "commitNameOld": "2adda92de1535c0472c0df33a145fa1814703f4f",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 95.82,
          "commitsBetweenForRepo": 689,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,33 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n       ReservationId reservationId, long deadline, Resource amContainerResource,\n-      Map\u003cString, String\u003e params) {\n-\n+      String labelExpr, Map\u003cString, String\u003e params) {\n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n           jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n-          runner.getStartTimeMS(), amContainerResource, params);\n+          runner.getStartTimeMS(), amContainerResource, labelExpr, params);\n       if(reservationId !\u003d null) {\n         // if we have a ReservationId, delegate reservation creation to\n         // AMSim (reservation shape is impl specific)\n         UTCClock clock \u003d new UTCClock();\n         amSim.initReservation(reservationId, deadline, clock.getTime());\n       }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline, Resource amContainerResource,\n      String labelExpr, Map\u003cString, String\u003e params) {\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource, labelExpr, params);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
      "commitDate": "20/02/18 5:00 PM",
      "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthor": "Carlo Curino",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "25/01/18 1:06 PM",
          "commitNameOld": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 26.16,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n-      ReservationId reservationId, long deadline,\n-      Resource amContainerResource) {\n+      ReservationId reservationId, long deadline, Resource amContainerResource,\n+      Map\u003cString, String\u003e params) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n           jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n-          runner.getStartTimeMS(), amContainerResource);\n+          runner.getStartTimeMS(), amContainerResource, params);\n       if(reservationId !\u003d null) {\n         // if we have a ReservationId, delegate reservation creation to\n         // AMSim (reservation shape is impl specific)\n         UTCClock clock \u003d new UTCClock();\n         amSim.initReservation(reservationId, deadline, clock.getTime());\n       }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline, Resource amContainerResource,\n      Map\u003cString, String\u003e params) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource, params);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, reservationId-ReservationId, deadline-long, amContainerResource-Resource]",
            "newValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, reservationId-ReservationId, deadline-long, amContainerResource-Resource, params-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "25/01/18 1:06 PM",
          "commitNameOld": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 26.16,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n-      ReservationId reservationId, long deadline,\n-      Resource amContainerResource) {\n+      ReservationId reservationId, long deadline, Resource amContainerResource,\n+      Map\u003cString, String\u003e params) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n           jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n-          runner.getStartTimeMS(), amContainerResource);\n+          runner.getStartTimeMS(), amContainerResource, params);\n       if(reservationId !\u003d null) {\n         // if we have a ReservationId, delegate reservation creation to\n         // AMSim (reservation shape is impl specific)\n         UTCClock clock \u003d new UTCClock();\n         amSim.initReservation(reservationId, deadline, clock.getTime());\n       }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline, Resource amContainerResource,\n      Map\u003cString, String\u003e params) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource, params);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
      "commitDate": "25/01/18 1:06 PM",
      "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
      "commitAuthor": "Yufei Gu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
          "commitDate": "25/01/18 1:06 PM",
          "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "09/11/17 12:09 PM",
          "commitNameOld": "ba8136615ab66c450884614557eddc6509d63b7c",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 77.04,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,34 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n-      ReservationSubmissionRequest rr, Resource amContainerResource) {\n+      ReservationId reservationId, long deadline,\n+      Resource amContainerResource) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n-\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n-          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n+          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n           runner.getStartTimeMS(), amContainerResource);\n+      if(reservationId !\u003d null) {\n+        // if we have a ReservationId, delegate reservation creation to\n+        // AMSim (reservation shape is impl specific)\n+        UTCClock clock \u003d new UTCClock();\n+        amSim.initReservation(reservationId, deadline, clock.getTime());\n+      }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline,\n      Resource amContainerResource) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, rr-ReservationSubmissionRequest, amContainerResource-Resource]",
            "newValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, reservationId-ReservationId, deadline-long, amContainerResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
          "commitDate": "25/01/18 1:06 PM",
          "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "09/11/17 12:09 PM",
          "commitNameOld": "ba8136615ab66c450884614557eddc6509d63b7c",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 77.04,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,34 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n-      ReservationSubmissionRequest rr, Resource amContainerResource) {\n+      ReservationId reservationId, long deadline,\n+      Resource amContainerResource) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n \n       if (oldJobId \u003d\u003d null) {\n         oldJobId \u003d Integer.toString(AM_ID);\n       }\n       AM_ID++;\n-\n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n-          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n+          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n           runner.getStartTimeMS(), amContainerResource);\n+      if(reservationId !\u003d null) {\n+        // if we have a ReservationId, delegate reservation creation to\n+        // AMSim (reservation shape is impl specific)\n+        UTCClock clock \u003d new UTCClock();\n+        amSim.initReservation(reservationId, deadline, clock.getTime());\n+      }\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationId reservationId, long deadline,\n      Resource amContainerResource) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId,\n          runner.getStartTimeMS(), amContainerResource);\n      if(reservationId !\u003d null) {\n        // if we have a ReservationId, delegate reservation creation to\n        // AMSim (reservation shape is impl specific)\n        UTCClock clock \u003d new UTCClock();\n        amSim.initReservation(reservationId, deadline, clock.getTime());\n      }\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "0ba8cda13549cc4a3946c440016f9d2a9e78740d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6685. Add job count in to SLS JSON input format. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "20/07/17 8:15 AM",
      "commitName": "0ba8cda13549cc4a3946c440016f9d2a9e78740d",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "30/06/17 5:03 PM",
      "commitNameOld": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 19.63,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n       ReservationSubmissionRequest rr, Resource amContainerResource) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n+\n+      if (oldJobId \u003d\u003d null) {\n+        oldJobId \u003d Integer.toString(AM_ID);\n+      }\n       AM_ID++;\n \n       amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n           jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n           runner.getStartTimeMS(), amContainerResource);\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationSubmissionRequest rr, Resource amContainerResource) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n\n      if (oldJobId \u003d\u003d null) {\n        oldJobId \u003d Integer.toString(AM_ID);\n      }\n      AM_ID++;\n\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n          runner.getStartTimeMS(), amContainerResource);\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "147df300bf00b5f4ed250426b6ccdd69085466da": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "30/06/17 5:03 PM",
      "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
          "commitDate": "30/06/17 5:03 PM",
          "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "19/06/17 9:18 PM",
          "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 10.82,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n-      ReservationSubmissionRequest rr) {\n+      ReservationSubmissionRequest rr, Resource amContainerResource) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n-      amSim.init(AM_ID++, heartbeatInterval, containerList,\n-          rm, this, jobStartTimeMS, jobFinishTimeMS, user, jobQueue,\n-          isTracked, oldJobId, rr, runner.getStartTimeMS());\n+      AM_ID++;\n+\n+      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n+          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n+          runner.getStartTimeMS(), amContainerResource);\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationSubmissionRequest rr, Resource amContainerResource) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n      AM_ID++;\n\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n          runner.getStartTimeMS(), amContainerResource);\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, rr-ReservationSubmissionRequest]",
            "newValue": "[jobType-String, user-String, jobQueue-String, oldJobId-String, jobStartTimeMS-long, jobFinishTimeMS-long, containerList-List\u003cContainerSimulator\u003e, rr-ReservationSubmissionRequest, amContainerResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
          "commitDate": "30/06/17 5:03 PM",
          "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "19/06/17 9:18 PM",
          "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 10.82,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n   private void runNewAM(String jobType, String user,\n       String jobQueue, String oldJobId, long jobStartTimeMS,\n       long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n-      ReservationSubmissionRequest rr) {\n+      ReservationSubmissionRequest rr, Resource amContainerResource) {\n \n     AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n         amClassMap.get(jobType), new Configuration());\n \n     if (amSim !\u003d null) {\n       int heartbeatInterval \u003d getConf().getInt(\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n           SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n       boolean isTracked \u003d trackedApps.contains(oldJobId);\n-      amSim.init(AM_ID++, heartbeatInterval, containerList,\n-          rm, this, jobStartTimeMS, jobFinishTimeMS, user, jobQueue,\n-          isTracked, oldJobId, rr, runner.getStartTimeMS());\n+      AM_ID++;\n+\n+      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n+          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n+          runner.getStartTimeMS(), amContainerResource);\n       runner.schedule(amSim);\n       maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n       numTasks +\u003d containerList.size();\n       amMap.put(oldJobId, amSim);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationSubmissionRequest rr, Resource amContainerResource) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n      AM_ID++;\n\n      amSim.init(heartbeatInterval, containerList, rm, this, jobStartTimeMS,\n          jobFinishTimeMS, user, jobQueue, isTracked, oldJobId, rr,\n          runner.getStartTimeMS(), amContainerResource);\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "475f933b41276b1bdeeec09e30369120f7eccdb8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6423. Queue metrics doesn\u0027t work for Fair Scheduler in SLS (yufeigu via rkanter)\n",
      "commitDate": "25/04/17 4:26 PM",
      "commitName": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,22 @@\n+  private void runNewAM(String jobType, String user,\n+      String jobQueue, String oldJobId, long jobStartTimeMS,\n+      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n+      ReservationSubmissionRequest rr) {\n+\n+    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n+        amClassMap.get(jobType), new Configuration());\n+\n+    if (amSim !\u003d null) {\n+      int heartbeatInterval \u003d getConf().getInt(\n+          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n+          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n+      boolean isTracked \u003d trackedApps.contains(oldJobId);\n+      amSim.init(AM_ID++, heartbeatInterval, containerList,\n+          rm, this, jobStartTimeMS, jobFinishTimeMS, user, jobQueue,\n+          isTracked, oldJobId, rr, runner.getStartTimeMS());\n+      runner.schedule(amSim);\n+      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n+      numTasks +\u003d containerList.size();\n+      amMap.put(oldJobId, amSim);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void runNewAM(String jobType, String user,\n      String jobQueue, String oldJobId, long jobStartTimeMS,\n      long jobFinishTimeMS, List\u003cContainerSimulator\u003e containerList,\n      ReservationSubmissionRequest rr) {\n\n    AMSimulator amSim \u003d (AMSimulator) ReflectionUtils.newInstance(\n        amClassMap.get(jobType), new Configuration());\n\n    if (amSim !\u003d null) {\n      int heartbeatInterval \u003d getConf().getInt(\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n          SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n      boolean isTracked \u003d trackedApps.contains(oldJobId);\n      amSim.init(AM_ID++, heartbeatInterval, containerList,\n          rm, this, jobStartTimeMS, jobFinishTimeMS, user, jobQueue,\n          isTracked, oldJobId, rr, runner.getStartTimeMS());\n      runner.schedule(amSim);\n      maxRuntime \u003d Math.max(maxRuntime, jobFinishTimeMS);\n      numTasks +\u003d containerList.size();\n      amMap.put(oldJobId, amSim);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}