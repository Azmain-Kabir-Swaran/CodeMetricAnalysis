{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenRenewer.java",
  "functionName": "requestNewHdfsDelegationTokenIfNeeded",
  "functionId": "requestNewHdfsDelegationTokenIfNeeded___dttr-DelegationTokenToRenew(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
  "functionStartLine": 667,
  "functionEndLine": 703,
  "numCommitsSeen": 37,
  "timeTaken": 3426,
  "changeHistory": [
    "6a923464afa6b635f505be5d5b2414d47d570f99",
    "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9",
    "bb6dde68f19be1885a9e7f7949316a03825b6f3e",
    "a1afbc48b53f6bdbd30dc8eb56a7621d49c5d6db",
    "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54"
  ],
  "changeHistoryShort": {
    "6a923464afa6b635f505be5d5b2414d47d570f99": "Ymodifierchange",
    "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9": "Ybodychange",
    "bb6dde68f19be1885a9e7f7949316a03825b6f3e": "Ybodychange",
    "a1afbc48b53f6bdbd30dc8eb56a7621d49c5d6db": "Ybodychange",
    "9c5911294e0ba71aefe4763731b0e780cde9d0ca": "Ybodychange",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a923464afa6b635f505be5d5b2414d47d570f99": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-6523. Optimize system credentials sent in node heartbeat responses. Contributed by Manikandan R\n",
      "commitDate": "08/01/19 2:54 PM",
      "commitName": "6a923464afa6b635f505be5d5b2414d47d570f99",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/06/18 2:49 PM",
      "commitNameOld": "931f78718f3a09775bfa1f9a952c069c416d0914",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 221.04,
      "commitsBetweenForRepo": 1701,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n-  private void requestNewHdfsDelegationTokenIfNeeded(\n+  void requestNewHdfsDelegationTokenIfNeeded(\n       final DelegationTokenToRenew dttr) throws IOException,\n       InterruptedException {\n \n     if (hasProxyUserPrivileges\n         \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n         \u0026\u0026 dttr.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n \n       final Collection\u003cApplicationId\u003e applicationIds;\n       synchronized (dttr.referringAppIds) {\n         applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n         dttr.referringAppIds.clear();\n       }\n       // remove all old expiring hdfs tokens for this application.\n       for (ApplicationId appId : applicationIds) {\n         Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n         if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n           continue;\n         }\n         Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n         synchronized (tokenSet) {\n           while (iter.hasNext()) {\n             DelegationTokenToRenew t \u003d iter.next();\n             if (t.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n               iter.remove();\n               allTokens.remove(t.token);\n               t.cancelTimer();\n               LOG.info(\"Removed expiring token \" + t);\n             }\n           }\n         }\n       }\n       LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n       requestNewHdfsDelegationTokenAsProxyUser(applicationIds, dttr.user,\n           dttr.shouldCancelAtEnd);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr) throws IOException,\n      InterruptedException {\n\n    if (hasProxyUserPrivileges\n        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n        \u0026\u0026 dttr.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n\n      final Collection\u003cApplicationId\u003e applicationIds;\n      synchronized (dttr.referringAppIds) {\n        applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n        dttr.referringAppIds.clear();\n      }\n      // remove all old expiring hdfs tokens for this application.\n      for (ApplicationId appId : applicationIds) {\n        Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n        if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n          continue;\n        }\n        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n        synchronized (tokenSet) {\n          while (iter.hasNext()) {\n            DelegationTokenToRenew t \u003d iter.next();\n            if (t.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n              iter.remove();\n              allTokens.remove(t.token);\n              t.cancelTimer();\n              LOG.info(\"Removed expiring token \" + t);\n            }\n          }\n        }\n      }\n      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n      requestNewHdfsDelegationTokenAsProxyUser(applicationIds, dttr.user,\n          dttr.shouldCancelAtEnd);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5098. Fixed ResourceManager\u0027s DelegationTokenRenewer to replace expiring system-tokens if RM stops and only restarts after a long time. Contributed by Jian He.\n",
      "commitDate": "03/06/16 1:00 PM",
      "commitName": "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/05/16 9:50 PM",
      "commitNameOld": "47c41e7ac7e6b905a58550f8899f629c1cf8b138",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 27.63,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void requestNewHdfsDelegationTokenIfNeeded(\n       final DelegationTokenToRenew dttr) throws IOException,\n       InterruptedException {\n \n     if (hasProxyUserPrivileges\n         \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n         \u0026\u0026 dttr.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n \n       final Collection\u003cApplicationId\u003e applicationIds;\n       synchronized (dttr.referringAppIds) {\n         applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n         dttr.referringAppIds.clear();\n       }\n       // remove all old expiring hdfs tokens for this application.\n       for (ApplicationId appId : applicationIds) {\n         Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n         if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n           continue;\n         }\n         Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n         synchronized (tokenSet) {\n           while (iter.hasNext()) {\n             DelegationTokenToRenew t \u003d iter.next();\n             if (t.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n               iter.remove();\n               allTokens.remove(t.token);\n               t.cancelTimer();\n               LOG.info(\"Removed expiring token \" + t);\n             }\n           }\n         }\n       }\n       LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n-      requestNewHdfsDelegationToken(applicationIds, dttr.user,\n+      requestNewHdfsDelegationTokenAsProxyUser(applicationIds, dttr.user,\n           dttr.shouldCancelAtEnd);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr) throws IOException,\n      InterruptedException {\n\n    if (hasProxyUserPrivileges\n        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n        \u0026\u0026 dttr.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n\n      final Collection\u003cApplicationId\u003e applicationIds;\n      synchronized (dttr.referringAppIds) {\n        applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n        dttr.referringAppIds.clear();\n      }\n      // remove all old expiring hdfs tokens for this application.\n      for (ApplicationId appId : applicationIds) {\n        Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n        if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n          continue;\n        }\n        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n        synchronized (tokenSet) {\n          while (iter.hasNext()) {\n            DelegationTokenToRenew t \u003d iter.next();\n            if (t.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n              iter.remove();\n              allTokens.remove(t.token);\n              t.cancelTimer();\n              LOG.info(\"Removed expiring token \" + t);\n            }\n          }\n        }\n      }\n      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n      requestNewHdfsDelegationTokenAsProxyUser(applicationIds, dttr.user,\n          dttr.shouldCancelAtEnd);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "bb6dde68f19be1885a9e7f7949316a03825b6f3e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3021. YARN\u0027s delegation-token handling disallows certain trust setups to operate properly over DistCp. Contributed by Yongjun Zhang\n",
      "commitDate": "16/04/15 7:43 PM",
      "commitName": "bb6dde68f19be1885a9e7f7949316a03825b6f3e",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/04/15 2:07 PM",
      "commitNameOld": "a1afbc48b53f6bdbd30dc8eb56a7621d49c5d6db",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.23,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void requestNewHdfsDelegationTokenIfNeeded(\n       final DelegationTokenToRenew dttr) throws IOException,\n       InterruptedException {\n \n     if (hasProxyUserPrivileges\n         \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n-        \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n+        \u0026\u0026 dttr.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n \n       final Collection\u003cApplicationId\u003e applicationIds;\n       synchronized (dttr.referringAppIds) {\n         applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n         dttr.referringAppIds.clear();\n       }\n       // remove all old expiring hdfs tokens for this application.\n       for (ApplicationId appId : applicationIds) {\n         Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n         if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n           continue;\n         }\n         Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n         synchronized (tokenSet) {\n           while (iter.hasNext()) {\n             DelegationTokenToRenew t \u003d iter.next();\n-            if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n+            if (t.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n               iter.remove();\n               allTokens.remove(t.token);\n               t.cancelTimer();\n               LOG.info(\"Removed expiring token \" + t);\n             }\n           }\n         }\n       }\n       LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n       requestNewHdfsDelegationToken(applicationIds, dttr.user,\n           dttr.shouldCancelAtEnd);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr) throws IOException,\n      InterruptedException {\n\n    if (hasProxyUserPrivileges\n        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n        \u0026\u0026 dttr.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n\n      final Collection\u003cApplicationId\u003e applicationIds;\n      synchronized (dttr.referringAppIds) {\n        applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n        dttr.referringAppIds.clear();\n      }\n      // remove all old expiring hdfs tokens for this application.\n      for (ApplicationId appId : applicationIds) {\n        Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n        if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n          continue;\n        }\n        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n        synchronized (tokenSet) {\n          while (iter.hasNext()) {\n            DelegationTokenToRenew t \u003d iter.next();\n            if (t.token.getKind().equals(HDFS_DELEGATION_KIND)) {\n              iter.remove();\n              allTokens.remove(t.token);\n              t.cancelTimer();\n              LOG.info(\"Removed expiring token \" + t);\n            }\n          }\n        }\n      }\n      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n      requestNewHdfsDelegationToken(applicationIds, dttr.user,\n          dttr.shouldCancelAtEnd);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "a1afbc48b53f6bdbd30dc8eb56a7621d49c5d6db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3472. Fixed possible leak in DelegationTokenRenewer#allTokens. Contributed by Rohith Sharmaks\n",
      "commitDate": "13/04/15 2:07 PM",
      "commitName": "a1afbc48b53f6bdbd30dc8eb56a7621d49c5d6db",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/04/15 1:08 PM",
      "commitNameOld": "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.04,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   private void requestNewHdfsDelegationTokenIfNeeded(\n       final DelegationTokenToRenew dttr) throws IOException,\n       InterruptedException {\n \n     if (hasProxyUserPrivileges\n         \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n         \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n \n       final Collection\u003cApplicationId\u003e applicationIds;\n       synchronized (dttr.referringAppIds) {\n         applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n         dttr.referringAppIds.clear();\n       }\n       // remove all old expiring hdfs tokens for this application.\n       for (ApplicationId appId : applicationIds) {\n         Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n         if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n           continue;\n         }\n         Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n         synchronized (tokenSet) {\n           while (iter.hasNext()) {\n             DelegationTokenToRenew t \u003d iter.next();\n             if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n               iter.remove();\n+              allTokens.remove(t.token);\n               t.cancelTimer();\n               LOG.info(\"Removed expiring token \" + t);\n             }\n           }\n         }\n       }\n       LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n       requestNewHdfsDelegationToken(applicationIds, dttr.user,\n           dttr.shouldCancelAtEnd);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr) throws IOException,\n      InterruptedException {\n\n    if (hasProxyUserPrivileges\n        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n        \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n\n      final Collection\u003cApplicationId\u003e applicationIds;\n      synchronized (dttr.referringAppIds) {\n        applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n        dttr.referringAppIds.clear();\n      }\n      // remove all old expiring hdfs tokens for this application.\n      for (ApplicationId appId : applicationIds) {\n        Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n        if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n          continue;\n        }\n        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n        synchronized (tokenSet) {\n          while (iter.hasNext()) {\n            DelegationTokenToRenew t \u003d iter.next();\n            if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n              iter.remove();\n              allTokens.remove(t.token);\n              t.cancelTimer();\n              LOG.info(\"Removed expiring token \" + t);\n            }\n          }\n        }\n      }\n      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n      requestNewHdfsDelegationToken(applicationIds, dttr.user,\n          dttr.shouldCancelAtEnd);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "9c5911294e0ba71aefe4763731b0e780cde9d0ca": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3055. Fixed ResourceManager\u0027s DelegationTokenRenewer to not stop token renewal of applications part of a bigger workflow. Contributed by Daryn Sharp.\n",
      "commitDate": "09/04/15 1:08 PM",
      "commitName": "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/03/15 10:45 AM",
      "commitNameOld": "6ca1f12024fd7cec7b01df0f039ca59f3f365dc1",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 17.1,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   private void requestNewHdfsDelegationTokenIfNeeded(\n       final DelegationTokenToRenew dttr) throws IOException,\n       InterruptedException {\n \n     if (hasProxyUserPrivileges\n         \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n         \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n \n+      final Collection\u003cApplicationId\u003e applicationIds;\n+      synchronized (dttr.referringAppIds) {\n+        applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n+        dttr.referringAppIds.clear();\n+      }\n       // remove all old expiring hdfs tokens for this application.\n-      Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(dttr.applicationId);\n-      if (tokenSet !\u003d null \u0026\u0026 !tokenSet.isEmpty()) {\n+      for (ApplicationId appId : applicationIds) {\n+        Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n+        if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n+          continue;\n+        }\n         Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n         synchronized (tokenSet) {\n           while (iter.hasNext()) {\n             DelegationTokenToRenew t \u003d iter.next();\n             if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n               iter.remove();\n-              if (t.timerTask !\u003d null) {\n-                t.timerTask.cancel();\n-              }\n+              t.cancelTimer();\n               LOG.info(\"Removed expiring token \" + t);\n             }\n           }\n         }\n       }\n       LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n-      requestNewHdfsDelegationToken(dttr.applicationId, dttr.user,\n-        dttr.shouldCancelAtEnd);\n+      requestNewHdfsDelegationToken(applicationIds, dttr.user,\n+          dttr.shouldCancelAtEnd);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr) throws IOException,\n      InterruptedException {\n\n    if (hasProxyUserPrivileges\n        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n        \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n\n      final Collection\u003cApplicationId\u003e applicationIds;\n      synchronized (dttr.referringAppIds) {\n        applicationIds \u003d new HashSet\u003c\u003e(dttr.referringAppIds);\n        dttr.referringAppIds.clear();\n      }\n      // remove all old expiring hdfs tokens for this application.\n      for (ApplicationId appId : applicationIds) {\n        Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(appId);\n        if (tokenSet \u003d\u003d null || tokenSet.isEmpty()) {\n          continue;\n        }\n        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n        synchronized (tokenSet) {\n          while (iter.hasNext()) {\n            DelegationTokenToRenew t \u003d iter.next();\n            if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n              iter.remove();\n              t.cancelTimer();\n              LOG.info(\"Removed expiring token \" + t);\n            }\n          }\n        }\n      }\n      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n      requestNewHdfsDelegationToken(applicationIds, dttr.user,\n          dttr.shouldCancelAtEnd);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2704. Changed ResourceManager to optionally obtain tokens itself for the sake of localization and log-aggregation for long-running services. Contributed by Jian He.\n",
      "commitDate": "27/10/14 3:49 PM",
      "commitName": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  private void requestNewHdfsDelegationTokenIfNeeded(\n+      final DelegationTokenToRenew dttr) throws IOException,\n+      InterruptedException {\n+\n+    if (hasProxyUserPrivileges\n+        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n+        \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n+\n+      // remove all old expiring hdfs tokens for this application.\n+      Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(dttr.applicationId);\n+      if (tokenSet !\u003d null \u0026\u0026 !tokenSet.isEmpty()) {\n+        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n+        synchronized (tokenSet) {\n+          while (iter.hasNext()) {\n+            DelegationTokenToRenew t \u003d iter.next();\n+            if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n+              iter.remove();\n+              if (t.timerTask !\u003d null) {\n+                t.timerTask.cancel();\n+              }\n+              LOG.info(\"Removed expiring token \" + t);\n+            }\n+          }\n+        }\n+      }\n+      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n+      requestNewHdfsDelegationToken(dttr.applicationId, dttr.user,\n+        dttr.shouldCancelAtEnd);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenIfNeeded(\n      final DelegationTokenToRenew dttr) throws IOException,\n      InterruptedException {\n\n    if (hasProxyUserPrivileges\n        \u0026\u0026 dttr.maxDate - dttr.expirationDate \u003c credentialsValidTimeRemaining\n        \u0026\u0026 dttr.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n\n      // remove all old expiring hdfs tokens for this application.\n      Set\u003cDelegationTokenToRenew\u003e tokenSet \u003d appTokens.get(dttr.applicationId);\n      if (tokenSet !\u003d null \u0026\u0026 !tokenSet.isEmpty()) {\n        Iterator\u003cDelegationTokenToRenew\u003e iter \u003d tokenSet.iterator();\n        synchronized (tokenSet) {\n          while (iter.hasNext()) {\n            DelegationTokenToRenew t \u003d iter.next();\n            if (t.token.getKind().equals(new Text(\"HDFS_DELEGATION_TOKEN\"))) {\n              iter.remove();\n              if (t.timerTask !\u003d null) {\n                t.timerTask.cancel();\n              }\n              LOG.info(\"Removed expiring token \" + t);\n            }\n          }\n        }\n      }\n      LOG.info(\"Token\u003d (\" + dttr + \") is expiring, request new token.\");\n      requestNewHdfsDelegationToken(dttr.applicationId, dttr.user,\n        dttr.shouldCancelAtEnd);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java"
    }
  }
}