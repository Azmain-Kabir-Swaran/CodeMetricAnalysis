{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
  "functionStartLine": 93,
  "functionEndLine": 221,
  "numCommitsSeen": 37,
  "timeTaken": 8325,
  "changeHistory": [
    "9520b2ad790bd8527033a03e7ee50da71a85df1d",
    "e6de10d0a6363bdaf767a7bdac7ad908d7786718",
    "3a8dade9b1bf01cf75fc68cecb351c23302cdee5",
    "263e2c692a4b0013766cd1f6b6d7ed674b2b1040",
    "722ee841948db1f246f0056acec9a1ac464fe1f9",
    "6f101e7df10d477cf7469f6979d0cb8269315a3e",
    "acf9bd8b1d87b9c46821ecf0461d8dcd0a6ec6d6",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "172b23af33554b7d58fd41b022d983bcc2433da7",
    "ef2dd7b78c5bf15bd85a9c793e57855255148b7f",
    "93bacda08bc546612f9278b31f5c38107867630a",
    "ae5308fe1d08479da0f3929cc6a57816411e9121",
    "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a",
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
    "0306d902f53582320aa5895ca9f5c31f64aaaff6",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a",
    "b2e6cf607f1712d103520ca6b3ff21ecc07cd265",
    "92431c961741747b5d6442f4025016d48d9a6863",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6",
    "4e886eb9cbd2dcb128bbfd17309c734083093a4c",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b",
    "c3003eba6f9802f15699564a5eb7c6e34424cb14",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "8314674947ec087899d2515ae6b668c6c39cabbd",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": "Ybodychange",
    "e6de10d0a6363bdaf767a7bdac7ad908d7786718": "Ybodychange",
    "3a8dade9b1bf01cf75fc68cecb351c23302cdee5": "Ybodychange",
    "263e2c692a4b0013766cd1f6b6d7ed674b2b1040": "Ybodychange",
    "722ee841948db1f246f0056acec9a1ac464fe1f9": "Ybodychange",
    "6f101e7df10d477cf7469f6979d0cb8269315a3e": "Ybodychange",
    "acf9bd8b1d87b9c46821ecf0461d8dcd0a6ec6d6": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "172b23af33554b7d58fd41b022d983bcc2433da7": "Ybodychange",
    "ef2dd7b78c5bf15bd85a9c793e57855255148b7f": "Ybodychange",
    "93bacda08bc546612f9278b31f5c38107867630a": "Ybodychange",
    "ae5308fe1d08479da0f3929cc6a57816411e9121": "Ybodychange",
    "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a": "Ybodychange",
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8": "Ybodychange",
    "0306d902f53582320aa5895ca9f5c31f64aaaff6": "Ybodychange",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Ybodychange",
    "b2e6cf607f1712d103520ca6b3ff21ecc07cd265": "Ybodychange",
    "92431c961741747b5d6442f4025016d48d9a6863": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Ybodychange",
    "4e886eb9cbd2dcb128bbfd17309c734083093a4c": "Ybodychange",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": "Ybodychange",
    "c3003eba6f9802f15699564a5eb7c6e34424cb14": "Ybodychange",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ybodychange",
    "8314674947ec087899d2515ae6b668c6c39cabbd": "Ybodychange",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10083. Provide utility to ask whether an application is in final status. Contributed by Adam Antal\n",
      "commitDate": "22/01/20 7:25 AM",
      "commitName": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "09/05/19 2:02 PM",
      "commitNameOld": "1b48100a5e5c6a08b91a9283bc2dbb7725e3236d",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 257.77,
      "commitsBetweenForRepo": 1648,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,129 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d getApplicationReport(request);\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return getApplicationReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     //Validate if able to read application attempts\n     // which should also validate if kill is allowed for the user based on ACLs\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d getApplicationAttemptsReport(request);\n       } else {\n         attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n             public Collection\u003cApplicationAttemptReport\u003e run()\n                 throws Exception {\n               return getApplicationAttemptsReport(request);\n             }\n           });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n \n     // YARN-6890. for secured cluster allow anonymous UI access, application kill\n     // shouldn\u0027t be there.\n     boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 this.unsecuredUI;\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n             \u0026\u0026 !unsecuredUIForSecuredCluster\n-            \u0026\u0026 !isAppInFinalState(app)) {\n+            \u0026\u0026 !Apps.isApplicationFinalState(app.getAppState())) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d getApplicationReport(request);\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return getApplicationReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    //Validate if able to read application attempts\n    // which should also validate if kill is allowed for the user based on ACLs\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d getApplicationAttemptsReport(request);\n      } else {\n        attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run()\n                throws Exception {\n              return getApplicationAttemptsReport(request);\n            }\n          });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster\n            \u0026\u0026 !Apps.isApplicationFinalState(app.getAppState())) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "e6de10d0a6363bdaf767a7bdac7ad908d7786718": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8022. ResourceManager UI cluster/app/\u003capp-id\u003e page fails to render. Contributed by Tarun Parimi.\n",
      "commitDate": "13/03/18 9:12 PM",
      "commitName": "e6de10d0a6363bdaf767a7bdac7ad908d7786718",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "09/03/18 10:46 PM",
      "commitNameOld": "3a8dade9b1bf01cf75fc68cecb351c23302cdee5",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 3.89,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,209 +1,129 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n-        appReport \u003d\n-            appBaseProt.getApplicationReport(request).getApplicationReport();\n+        appReport \u003d getApplicationReport(request);\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return getApplicationReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     //Validate if able to read application attempts\n     // which should also validate if kill is allowed for the user based on ACLs\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n-      attempts \u003d callerUGI.doAs(\n+      if (callerUGI \u003d\u003d null) {\n+        attempts \u003d getApplicationAttemptsReport(request);\n+      } else {\n+        attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n-            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n+            public Collection\u003cApplicationAttemptReport\u003e run()\n+                throws Exception {\n               return getApplicationAttemptsReport(request);\n             }\n           });\n+      }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n \n     // YARN-6890. for secured cluster allow anonymous UI access, application kill\n     // shouldn\u0027t be there.\n     boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 this.unsecuredUI;\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n             \u0026\u0026 !unsecuredUIForSecuredCluster\n             \u0026\u0026 !isAppInFinalState(app)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n-    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n-      .__(\"User:\", schedulerPath, app.getUser())\n-      .__(\"Name:\", app.getName())\n-      .__(\"Application Type:\", app.getType())\n-      .__(\"Application Tags:\",\n-        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n-      .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n-      .__(\n-        \"YarnApplicationState:\",\n-        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n-          .getAppState()))\n-      .__(\"Queue:\", schedulerPath, app.getQueue())\n-      .__(\"FinalStatus Reported by AM:\",\n-        clairfyAppFinalStatus(app.getFinalAppStatus()))\n-      .__(\"Started:\", Times.format(app.getStartedTime()))\n-      .__(\n-        \"Elapsed:\",\n-        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n-          app.getFinishedTime())))\n-      .__(\n-        \"Tracking URL:\",\n-        app.getTrackingUrl() \u003d\u003d null\n-            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n-          .getTrackingUrl()),\n-        app.getTrackingUrl() \u003d\u003d null\n-            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n-          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n-            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n-            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n-            : \"ApplicationMaster\");\n-    if (webUiType !\u003d null\n-        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n-      LogAggregationStatus status \u003d getLogAggregationStatus();\n-      if (status \u003d\u003d null) {\n-        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n-      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n-          || status \u003d\u003d LogAggregationStatus.NOT_START\n-          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n-        overviewTable.__(\"Log Aggregation Status:\", status.name());\n-      } else {\n-        overviewTable.__(\"Log Aggregation Status:\",\n-            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n-      }\n-      long timeout \u003d appReport.getApplicationTimeouts()\n-          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n-      if (timeout \u003c 0) {\n-        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n-      } else {\n-        overviewTable.__(\"Application Timeout (Remaining Time):\",\n-            String.format(\"%d seconds\", timeout));\n-      }\n-    }\n-    overviewTable.__(\"Diagnostics:\",\n-        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n-    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n-    overviewTable.__(\"Application Node Label expression:\",\n-        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n-            : app.getAppNodeLabelExpression());\n-    overviewTable.__(\"AM container Node Label expression:\",\n-        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n-            : app.getAmNodeLabelExpression());\n-\n-    try {\n-      final GetApplicationAttemptsRequest request \u003d\n-          GetApplicationAttemptsRequest.newInstance(appID);\n-      if (callerUGI \u003d\u003d null) {\n-        attempts \u003d appBaseProt.getApplicationAttempts(request)\n-            .getApplicationAttemptList();\n-      } else {\n-        attempts \u003d callerUGI.doAs(\n-            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n-          @Override\n-          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n-            return appBaseProt.getApplicationAttempts(request)\n-                .getApplicationAttemptList();\n-          }\n-        });\n-      }\n-    } catch (Exception e) {\n-      String message \u003d\n-          \"Failed to read the attempts of the application \" + appID + \".\";\n-      LOG.error(message, e);\n-      html.p().__(message).__();\n-      return;\n-    }\n+    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d getApplicationReport(request);\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return getApplicationReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    //Validate if able to read application attempts\n    // which should also validate if kill is allowed for the user based on ACLs\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d getApplicationAttemptsReport(request);\n      } else {\n        attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run()\n                throws Exception {\n              return getApplicationAttemptsReport(request);\n            }\n          });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster\n            \u0026\u0026 !isAppInFinalState(app)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "3a8dade9b1bf01cf75fc68cecb351c23302cdee5": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14077. Add ability to access jmx via proxy.  Contributed by Yuanbo Liu.\"\n\nThis reverts commit 172b23af33554b7d58fd41b022d983bcc2433da7.\n\n(cherry picked from commit d0d2d4c51e9534e08893ae14cf3fff7b2ee70b1d)\n",
      "commitDate": "09/03/18 10:46 PM",
      "commitName": "3a8dade9b1bf01cf75fc68cecb351c23302cdee5",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "03/10/17 2:06 PM",
      "commitNameOld": "4a877737182808fe3392a116762ba59973a477a6",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 157.4,
      "commitsBetweenForRepo": 1075,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,209 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n-        throw new AuthenticationException(\n-            \"Failed to get user name from request\");\n+        appReport \u003d\n+            appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return getApplicationReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     //Validate if able to read application attempts\n     // which should also validate if kill is allowed for the user based on ACLs\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n             public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n               return getApplicationAttemptsReport(request);\n             }\n           });\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n \n     // YARN-6890. for secured cluster allow anonymous UI access, application kill\n     // shouldn\u0027t be there.\n     boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 this.unsecuredUI;\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n             \u0026\u0026 !unsecuredUIForSecuredCluster\n             \u0026\u0026 !isAppInFinalState(app)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n-    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n+    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n+      .__(\"User:\", schedulerPath, app.getUser())\n+      .__(\"Name:\", app.getName())\n+      .__(\"Application Type:\", app.getType())\n+      .__(\"Application Tags:\",\n+        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n+      .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n+      .__(\n+        \"YarnApplicationState:\",\n+        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n+          .getAppState()))\n+      .__(\"Queue:\", schedulerPath, app.getQueue())\n+      .__(\"FinalStatus Reported by AM:\",\n+        clairfyAppFinalStatus(app.getFinalAppStatus()))\n+      .__(\"Started:\", Times.format(app.getStartedTime()))\n+      .__(\n+        \"Elapsed:\",\n+        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n+          app.getFinishedTime())))\n+      .__(\n+        \"Tracking URL:\",\n+        app.getTrackingUrl() \u003d\u003d null\n+            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n+          .getTrackingUrl()),\n+        app.getTrackingUrl() \u003d\u003d null\n+            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n+          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n+            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n+            : \"ApplicationMaster\");\n+    if (webUiType !\u003d null\n+        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n+      LogAggregationStatus status \u003d getLogAggregationStatus();\n+      if (status \u003d\u003d null) {\n+        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n+      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n+          || status \u003d\u003d LogAggregationStatus.NOT_START\n+          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n+        overviewTable.__(\"Log Aggregation Status:\", status.name());\n+      } else {\n+        overviewTable.__(\"Log Aggregation Status:\",\n+            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n+      }\n+      long timeout \u003d appReport.getApplicationTimeouts()\n+          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n+      if (timeout \u003c 0) {\n+        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n+      } else {\n+        overviewTable.__(\"Application Timeout (Remaining Time):\",\n+            String.format(\"%d seconds\", timeout));\n+      }\n+    }\n+    overviewTable.__(\"Diagnostics:\",\n+        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n+    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n+    overviewTable.__(\"Application Node Label expression:\",\n+        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n+            : app.getAppNodeLabelExpression());\n+    overviewTable.__(\"AM container Node Label expression:\",\n+        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n+            : app.getAmNodeLabelExpression());\n+\n+    try {\n+      final GetApplicationAttemptsRequest request \u003d\n+          GetApplicationAttemptsRequest.newInstance(appID);\n+      if (callerUGI \u003d\u003d null) {\n+        attempts \u003d appBaseProt.getApplicationAttempts(request)\n+            .getApplicationAttemptList();\n+      } else {\n+        attempts \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n+          @Override\n+          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n+            return appBaseProt.getApplicationAttempts(request)\n+                .getApplicationAttemptList();\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n+      String message \u003d\n+          \"Failed to read the attempts of the application \" + appID + \".\";\n+      LOG.error(message, e);\n+      html.p().__(message).__();\n+      return;\n+    }\n \n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return getApplicationReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    //Validate if able to read application attempts\n    // which should also validate if kill is allowed for the user based on ACLs\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return getApplicationAttemptsReport(request);\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster\n            \u0026\u0026 !isAppInFinalState(app)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      .__(\"User:\", schedulerPath, app.getUser())\n      .__(\"Name:\", app.getName())\n      .__(\"Application Type:\", app.getType())\n      .__(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      .__(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n      .__(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      .__(\"Queue:\", schedulerPath, app.getQueue())\n      .__(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      .__(\"Started:\", Times.format(app.getStartedTime()))\n      .__(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      .__(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable.__(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable.__(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable.__(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable.__(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable.__(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable.__(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "263e2c692a4b0013766cd1f6b6d7ed674b2b1040": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6991. \"Kill application\" button does not show error if other user tries to kill the application for secure cluster. (Suma Shivaprasad via wangda)\n\nChange-Id: I7e7894b24609709f89064ee5882f055dbb09080b\n",
      "commitDate": "21/09/17 12:00 PM",
      "commitName": "263e2c692a4b0013766cd1f6b6d7ed674b2b1040",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/09/17 9:58 PM",
      "commitNameOld": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 10.59,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,125 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         throw new AuthenticationException(\n             \"Failed to get user name from request\");\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return getApplicationReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n+    //Validate if able to read application attempts\n+    // which should also validate if kill is allowed for the user based on ACLs\n+\n+    Collection\u003cApplicationAttemptReport\u003e attempts;\n+    try {\n+      final GetApplicationAttemptsRequest request \u003d\n+          GetApplicationAttemptsRequest.newInstance(appID);\n+      attempts \u003d callerUGI.doAs(\n+          new PrivilegedExceptionAction\u003cCollection\u003c\n+              ApplicationAttemptReport\u003e\u003e() {\n+            @Override\n+            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n+              return getApplicationAttemptsReport(request);\n+            }\n+          });\n+    } catch (Exception e) {\n+      String message \u003d\n+          \"Failed to read the attempts of the application \" + appID + \".\";\n+      LOG.error(message, e);\n+      html.p().__(message).__();\n+      return;\n+    }\n+\n+\n     // YARN-6890. for secured cluster allow anonymous UI access, application kill\n     // shouldn\u0027t be there.\n     boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 this.unsecuredUI;\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n             \u0026\u0026 !unsecuredUIForSecuredCluster\n             \u0026\u0026 !isAppInFinalState(app)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n-    Collection\u003cApplicationAttemptReport\u003e attempts;\n-    try {\n-      final GetApplicationAttemptsRequest request \u003d\n-          GetApplicationAttemptsRequest.newInstance(appID);\n-      attempts \u003d callerUGI.doAs(\n-          new PrivilegedExceptionAction\u003cCollection\u003c\n-              ApplicationAttemptReport\u003e\u003e() {\n-            @Override\n-            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n-              return getApplicationAttemptsReport(request);\n-            }\n-          });\n-    } catch (Exception e) {\n-      String message \u003d\n-          \"Failed to read the attempts of the application \" + appID + \".\";\n-      LOG.error(message, e);\n-      html.p().__(message).__();\n-      return;\n-    }\n-\n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        throw new AuthenticationException(\n            \"Failed to get user name from request\");\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return getApplicationReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    //Validate if able to read application attempts\n    // which should also validate if kill is allowed for the user based on ACLs\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return getApplicationAttemptsReport(request);\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster\n            \u0026\u0026 !isAppInFinalState(app)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "722ee841948db1f246f0056acec9a1ac464fe1f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7163. RMContext need not to be injected to webapp and other Always Running services. Contributed by Rohith Sharma K S.\n",
      "commitDate": "10/09/17 9:58 PM",
      "commitName": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/09/17 12:46 AM",
      "commitNameOld": "6f101e7df10d477cf7469f6979d0cb8269315a3e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 3.88,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,123 +1,121 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         throw new AuthenticationException(\n             \"Failed to get user name from request\");\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n-            return appBaseProt.getApplicationReport(request)\n-                .getApplicationReport();\n+            return getApplicationReport(request);\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     // YARN-6890. for secured cluster allow anonymous UI access, application kill\n     // shouldn\u0027t be there.\n     boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 this.unsecuredUI;\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n             \u0026\u0026 !unsecuredUIForSecuredCluster\n             \u0026\u0026 !isAppInFinalState(app)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n             public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n-              return appBaseProt.getApplicationAttempts(request)\n-                  .getApplicationAttemptList();\n+              return getApplicationAttemptsReport(request);\n             }\n           });\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        throw new AuthenticationException(\n            \"Failed to get user name from request\");\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return getApplicationReport(request);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster\n            \u0026\u0026 !isAppInFinalState(app)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return getApplicationAttemptsReport(request);\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "6f101e7df10d477cf7469f6979d0cb8269315a3e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6992. Kill application button is visible even if the application is FINISHED in RM UI. Contributed by Suma Shivaprasad.\n",
      "commitDate": "07/09/17 12:46 AM",
      "commitName": "6f101e7df10d477cf7469f6979d0cb8269315a3e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "08/08/17 11:09 AM",
      "commitNameOld": "acf9bd8b1d87b9c46821ecf0461d8dcd0a6ec6d6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 29.57,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,122 +1,123 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         throw new AuthenticationException(\n             \"Failed to get user name from request\");\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     // YARN-6890. for secured cluster allow anonymous UI access, application kill\n     // shouldn\u0027t be there.\n     boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 this.unsecuredUI;\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n-            \u0026\u0026 !unsecuredUIForSecuredCluster) {\n+            \u0026\u0026 !unsecuredUIForSecuredCluster\n+            \u0026\u0026 !isAppInFinalState(app)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n             public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n               return appBaseProt.getApplicationAttempts(request)\n                   .getApplicationAttemptList();\n             }\n           });\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        throw new AuthenticationException(\n            \"Failed to get user name from request\");\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster\n            \u0026\u0026 !isAppInFinalState(app)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return appBaseProt.getApplicationAttempts(request)\n                  .getApplicationAttemptList();\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "acf9bd8b1d87b9c46821ecf0461d8dcd0a6ec6d6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6890. Not display killApp button on UI if UI is unsecured but cluster is secured. Contributed by Junping Du\n",
      "commitDate": "08/08/17 11:09 AM",
      "commitName": "acf9bd8b1d87b9c46821ecf0461d8dcd0a6ec6d6",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.75,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,116 +1,122 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         throw new AuthenticationException(\n             \"Failed to get user name from request\");\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n+    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n+    // shouldn\u0027t be there.\n+    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n+        \u0026\u0026 this.unsecuredUI;\n+\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n-          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n+          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n+            \u0026\u0026 !unsecuredUIForSecuredCluster) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n           .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n             public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n               return appBaseProt.getApplicationAttempts(request)\n                   .getApplicationAttemptList();\n             }\n           });\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p().__(message).__();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        throw new AuthenticationException(\n            \"Failed to get user name from request\");\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    // YARN-6890. for secured cluster allow anonymous UI access, application kill\n    // shouldn\u0027t be there.\n    boolean unsecuredUIForSecuredCluster \u003d UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 this.unsecuredUI;\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)\n            \u0026\u0026 !unsecuredUIForSecuredCluster) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return appBaseProt.getApplicationAttempts(request)\n                  .getApplicationAttemptList();\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/02/17 6:34 PM",
      "commitNameOld": "172b23af33554b7d58fd41b022d983bcc2433da7",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 158.9,
      "commitsBetweenForRepo": 845,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,116 +1,116 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         throw new AuthenticationException(\n             \"Failed to get user name from request\");\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n-      html.p()._(message)._();\n+      html.p().__(message).__();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n-          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n-          ._();\n+          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n+          .__();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n-      html.script().$type(\"text/javascript\")._(script.toString())._();\n+      html.script().$type(\"text/javascript\").__(script.toString()).__();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       attempts \u003d callerUGI.doAs(\n           new PrivilegedExceptionAction\u003cCollection\u003c\n               ApplicationAttemptReport\u003e\u003e() {\n             @Override\n             public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n               return appBaseProt.getApplicationAttempts(request)\n                   .getApplicationAttemptList();\n             }\n           });\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n-      html.p()._(message)._();\n+      html.p().__(message).__();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n-    html._(InfoBlock.class);\n+    html.__(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        throw new AuthenticationException(\n            \"Failed to get user name from request\");\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\").__()\n          .__();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\").__(script.toString()).__();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return appBaseProt.getApplicationAttempts(request)\n                  .getApplicationAttemptList();\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p().__(message).__();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html.__(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "172b23af33554b7d58fd41b022d983bcc2433da7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14077. Add ability to access jmx via proxy.  Contributed by Yuanbo Liu.\n",
      "commitDate": "18/02/17 6:34 PM",
      "commitName": "172b23af33554b7d58fd41b022d983bcc2433da7",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/12/16 10:14 PM",
      "commitNameOld": "ef2dd7b78c5bf15bd85a9c793e57855255148b7f",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 61.85,
      "commitsBetweenForRepo": 293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,180 +1,116 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n-        appReport \u003d\n-            appBaseProt.getApplicationReport(request).getApplicationReport();\n+        throw new AuthenticationException(\n+            \"Failed to get user name from request\");\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n-    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n-      ._(\"User:\", schedulerPath, app.getUser())\n-      ._(\"Name:\", app.getName())\n-      ._(\"Application Type:\", app.getType())\n-      ._(\"Application Tags:\",\n-        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n-      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n-      ._(\n-        \"YarnApplicationState:\",\n-        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n-          .getAppState()))\n-      ._(\"Queue:\", schedulerPath, app.getQueue())\n-      ._(\"FinalStatus Reported by AM:\",\n-        clairfyAppFinalStatus(app.getFinalAppStatus()))\n-      ._(\"Started:\", Times.format(app.getStartedTime()))\n-      ._(\n-        \"Elapsed:\",\n-        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n-          app.getFinishedTime())))\n-      ._(\n-        \"Tracking URL:\",\n-        app.getTrackingUrl() \u003d\u003d null\n-            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n-          .getTrackingUrl()),\n-        app.getTrackingUrl() \u003d\u003d null\n-            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n-          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n-            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n-            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n-            : \"ApplicationMaster\");\n-    if (webUiType !\u003d null\n-        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n-      LogAggregationStatus status \u003d getLogAggregationStatus();\n-      if (status \u003d\u003d null) {\n-        overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n-      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n-          || status \u003d\u003d LogAggregationStatus.NOT_START\n-          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n-        overviewTable._(\"Log Aggregation Status:\", status.name());\n-      } else {\n-        overviewTable._(\"Log Aggregation Status:\",\n-            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n-      }\n-      long timeout \u003d appReport.getApplicationTimeouts()\n-          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n-      if (timeout \u003c 0) {\n-        overviewTable._(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n-      } else {\n-        overviewTable._(\"Application Timeout (Remaining Time):\",\n-            String.format(\"%d seconds\", timeout));\n-      }\n-    }\n-    overviewTable._(\"Diagnostics:\",\n-        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n-    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n-    overviewTable._(\"Application Node Label expression:\",\n-        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n-            : app.getAppNodeLabelExpression());\n-    overviewTable._(\"AM container Node Label expression:\",\n-        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n-            : app.getAmNodeLabelExpression());\n+    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n-      if (callerUGI \u003d\u003d null) {\n-        attempts \u003d appBaseProt.getApplicationAttempts(request)\n-            .getApplicationAttemptList();\n-      } else {\n-        attempts \u003d callerUGI.doAs(\n-            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n-          @Override\n-          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n-            return appBaseProt.getApplicationAttempts(request)\n-                .getApplicationAttemptList();\n-          }\n-        });\n-      }\n+      attempts \u003d callerUGI.doAs(\n+          new PrivilegedExceptionAction\u003cCollection\u003c\n+              ApplicationAttemptReport\u003e\u003e() {\n+            @Override\n+            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n+              return appBaseProt.getApplicationAttempts(request)\n+                  .getApplicationAttemptList();\n+            }\n+          });\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        throw new AuthenticationException(\n            \"Failed to get user name from request\");\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      attempts \u003d callerUGI.doAs(\n          new PrivilegedExceptionAction\u003cCollection\u003c\n              ApplicationAttemptReport\u003e\u003e() {\n            @Override\n            public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n              return appBaseProt.getApplicationAttempts(request)\n                  .getApplicationAttemptList();\n            }\n          });\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "ef2dd7b78c5bf15bd85a9c793e57855255148b7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5650. Render Application Timeout value in web UI. Contributed by Akhil PB.\n",
      "commitDate": "18/12/16 10:14 PM",
      "commitName": "ef2dd7b78c5bf15bd85a9c793e57855255148b7f",
      "commitAuthor": "Sunil G",
      "commitDateOld": "06/04/16 4:13 PM",
      "commitNameOld": "93bacda08bc546612f9278b31f5c38107867630a",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 256.29,
      "commitsBetweenForRepo": 1877,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,172 +1,180 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable._(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable._(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n+      long timeout \u003d appReport.getApplicationTimeouts()\n+          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n+      if (timeout \u003c 0) {\n+        overviewTable._(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n+      } else {\n+        overviewTable._(\"Application Timeout (Remaining Time):\",\n+            String.format(\"%d seconds\", timeout));\n+      }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n     overviewTable._(\"Application Node Label expression:\",\n         app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAppNodeLabelExpression());\n     overviewTable._(\"AM container Node Label expression:\",\n         app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAmNodeLabelExpression());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n      long timeout \u003d appReport.getApplicationTimeouts()\n          .get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\n      if (timeout \u003c 0) {\n        overviewTable._(\"Application Timeout (Remaining Time):\", \"Unlimited\");\n      } else {\n        overviewTable._(\"Application Timeout (Remaining Time):\",\n            String.format(\"%d seconds\", timeout));\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable._(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable._(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "93bacda08bc546612f9278b31f5c38107867630a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4769. Add support for CSRF header in the dump capacity scheduler logs and kill app buttons in RM web UI. Contributed by Varun Vasudev\n",
      "commitDate": "06/04/16 4:13 PM",
      "commitName": "93bacda08bc546612f9278b31f5c38107867630a",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/09/15 11:40 AM",
      "commitNameOld": "ae5308fe1d08479da0f3929cc6a57816411e9121",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 204.19,
      "commitsBetweenForRepo": 1386,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,171 +1,172 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n+          .append(getCSRFHeaderString(conf))\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable._(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable._(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n     overviewTable._(\"Application Node Label expression:\",\n         app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAppNodeLabelExpression());\n     overviewTable._(\"AM container Node Label expression:\",\n         app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n             : app.getAmNodeLabelExpression());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(getCSRFHeaderString(conf))\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable._(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable._(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "ae5308fe1d08479da0f3929cc6a57816411e9121": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3717. Expose app/am/queue\u0027s node-label-expression to RM web UI / CLI / REST-API. (Naganarasimha G R via wangda)\n",
      "commitDate": "15/09/15 11:40 AM",
      "commitName": "ae5308fe1d08479da0f3929cc6a57816411e9121",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/08/15 10:53 PM",
      "commitNameOld": "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 27.53,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,165 +1,171 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable._(\"Log Aggregation Status:\", status.name());\n       } else {\n         overviewTable._(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n+    overviewTable._(\"Application Node Label expression:\",\n+        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n+            : app.getAppNodeLabelExpression());\n+    overviewTable._(\"AM container Node Label expression:\",\n+        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n+            : app.getAmNodeLabelExpression());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n    overviewTable._(\"Application Node Label expression:\",\n        app.getAppNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAppNodeLabelExpression());\n    overviewTable._(\"AM container Node Label expression:\",\n        app.getAmNodeLabelExpression() \u003d\u003d null ? \"\u003cNot set\u003e\"\n            : app.getAmNodeLabelExpression());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4028. AppBlock page key update and diagnostics value null on\nrecovery. Contributed by Bibin A Chundatt\n",
      "commitDate": "18/08/15 10:53 PM",
      "commitName": "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a",
      "commitAuthor": "Xuan",
      "commitDateOld": "06/08/15 10:13 PM",
      "commitNameOld": "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 12.03,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,165 +1,165 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n-        overviewTable._(\"Log Aggregation Status\", \"N/A\");\n+        overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n-        overviewTable._(\"Log Aggregation Status\", status.name());\n+        overviewTable._(\"Log Aggregation Status:\", status.name());\n       } else {\n-        overviewTable._(\"Log Aggregation Status\",\n+        overviewTable._(\"Log Aggregation Status:\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status:\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status:\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status:\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3948. Display Application Priority in RM Web UI.(Sunil G via rohithsharmaks)\n",
      "commitDate": "06/08/15 10:13 PM",
      "commitName": "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "03/08/15 3:46 PM",
      "commitNameOld": "0306d902f53582320aa5895ca9f5c31f64aaaff6",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 3.27,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,165 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n+      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable._(\"Log Aggregation Status\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable._(\"Log Aggregation Status\", status.name());\n       } else {\n         overviewTable._(\"Log Aggregation Status\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n     overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"Application Priority:\", clarifyAppPriority(app.getPriority()))\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "0306d902f53582320aa5895ca9f5c31f64aaaff6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3543. ApplicationReport should be able to tell whether the\nApplication is AM managed or not. Contributed by Rohith Sharma K S\n",
      "commitDate": "03/08/15 3:46 PM",
      "commitName": "0306d902f53582320aa5895ca9f5c31f64aaaff6",
      "commitAuthor": "Xuan",
      "commitDateOld": "03/08/15 8:38 AM",
      "commitNameOld": "3cd02b95224e9d43fd63a4ef9ac5c44f113f710d",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,163 +1,164 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       LogAggregationStatus status \u003d getLogAggregationStatus();\n       if (status \u003d\u003d null) {\n         overviewTable._(\"Log Aggregation Status\", \"N/A\");\n       } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n           || status \u003d\u003d LogAggregationStatus.NOT_START\n           || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n         overviewTable._(\"Log Aggregation Status\", status.name());\n       } else {\n         overviewTable._(\"Log Aggregation Status\",\n             root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n       }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n+    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n    overviewTable._(\"Unmanaged Application:\", app.isUnmanagedApp());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/04/15 8:04 AM",
      "commitNameOld": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 28.12,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,154 +1,163 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n         \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n \n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n-      overviewTable._(\"Log Aggregation Status\",\n-        root_url(\"logaggregationstatus\", app.getAppId()), \"Status\");\n+      LogAggregationStatus status \u003d getLogAggregationStatus();\n+      if (status \u003d\u003d null) {\n+        overviewTable._(\"Log Aggregation Status\", \"N/A\");\n+      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n+          || status \u003d\u003d LogAggregationStatus.NOT_START\n+          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n+        overviewTable._(\"Log Aggregation Status\", status.name());\n+      } else {\n+        overviewTable._(\"Log Aggregation Status\",\n+            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n+      }\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      LogAggregationStatus status \u003d getLogAggregationStatus();\n      if (status \u003d\u003d null) {\n        overviewTable._(\"Log Aggregation Status\", \"N/A\");\n      } else if (status \u003d\u003d LogAggregationStatus.DISABLED\n          || status \u003d\u003d LogAggregationStatus.NOT_START\n          || status \u003d\u003d LogAggregationStatus.SUCCEEDED) {\n        overviewTable._(\"Log Aggregation Status\", status.name());\n      } else {\n        overviewTable._(\"Log Aggregation Status\",\n            root_url(\"logaggregationstatus\", app.getAppId()), status.name());\n      }\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "b2e6cf607f1712d103520ca6b3ff21ecc07cd265": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3404. Display queue name on application page. Contributed by Ryu Kobayashi\n",
      "commitDate": "15/04/15 1:52 PM",
      "commitName": "b2e6cf607f1712d103520ca6b3ff21ecc07cd265",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.21,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,150 +1,154 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n+    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n+        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n+\n     ResponseInfo overviewTable \u003d info(\"Application Overview\")\n-      ._(\"User:\", app.getUser())\n+      ._(\"User:\", schedulerPath, app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n+      ._(\"Queue:\", schedulerPath, app.getQueue())\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n             : \"ApplicationMaster\");\n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       overviewTable._(\"Log Aggregation Status\",\n         root_url(\"logaggregationstatus\", app.getAppId()), \"Status\");\n     }\n     overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    String schedulerPath \u003d WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) +\n        \"/cluster/scheduler?openQueues\u003d\" + app.getQueue();\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", schedulerPath, app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"Queue:\", schedulerPath, app.getQueue())\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      overviewTable._(\"Log Aggregation Status\",\n        root_url(\"logaggregationstatus\", app.getAppId()), \"Status\");\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/04/15 4:19 AM",
      "commitNameOld": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 9.19,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,145 +1,150 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n-    info(\"Application Overview\")\n+    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\n         \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\n         \"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n           .getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null\n             || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n           .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n             || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n             || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n-            : \"ApplicationMaster\")\n-      ._(\"Diagnostics:\",\n+            : \"ApplicationMaster\");\n+    if (webUiType !\u003d null\n+        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n+      overviewTable._(\"Log Aggregation Status\",\n+        root_url(\"logaggregationstatus\", app.getAppId()), \"Status\");\n+    }\n+    overviewTable._(\"Diagnostics:\",\n         app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     generateApplicationTable(html, callerUGI, attempts);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    ResponseInfo overviewTable \u003d info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\");\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      overviewTable._(\"Log Aggregation Status\",\n        root_url(\"logaggregationstatus\", app.getAppId()), \"Status\");\n    }\n    overviewTable._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "commitDateOld": "19/03/15 10:27 PM",
      "commitNameOld": "4e886eb9cbd2dcb128bbfd17309c734083093a4c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 12.24,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,217 +1,145 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n-    ApplicationReport appReport \u003d null;\n+    ApplicationReport appReport;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n-      ._(\"YarnApplicationState:\",\n+      ._(\n+        \"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n-      ._(\"Tracking URL:\",\n-        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n-            ? null : root_url(app.getTrackingUrl()),\n-        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n-            ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n-                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n-                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n-                : \"ApplicationMaster\")\n+      ._(\n+        \"Tracking URL:\",\n+        app.getTrackingUrl() \u003d\u003d null\n+            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n+          .getTrackingUrl()),\n+        app.getTrackingUrl() \u003d\u003d null\n+            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n+          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n+            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n+            : \"ApplicationMaster\")\n       ._(\"Diagnostics:\",\n-          app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n+        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n-    // Application Attempt Table\n-    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n-        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n-          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n-          ._()._().tbody();\n+    generateApplicationTable(html, callerUGI, attempts);\n \n-    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n-    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n-      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n-      ContainerReport containerReport \u003d null;\n-      try {\n-        // AM container is always the first container of the attempt\n-        final GetContainerReportRequest request \u003d\n-            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n-              appAttemptReport.getApplicationAttemptId(), 1));\n-        if (callerUGI \u003d\u003d null) {\n-          containerReport \u003d\n-              appBaseProt.getContainerReport(request).getContainerReport();\n-        } else {\n-          containerReport \u003d callerUGI.doAs(\n-              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n-            @Override\n-            public ContainerReport run() throws Exception {\n-              ContainerReport report \u003d null;\n-              try {\n-                report \u003d appBaseProt.getContainerReport(request)\n-                    .getContainerReport();\n-              } catch (ContainerNotFoundException ex) {\n-                LOG.warn(ex.getMessage());\n-              }\n-              return report;\n-            }\n-          });\n-        }\n-      } catch (Exception e) {\n-        String message \u003d\n-            \"Failed to read the AM container of the application attempt \"\n-                + appAttemptReport.getApplicationAttemptId() + \".\";\n-        LOG.error(message, e);\n-        html.p()._(message)._();\n-        return;\n-      }\n-      long startTime \u003d 0L;\n-      String logsLink \u003d null;\n-      String nodeLink \u003d null;\n-      if (containerReport !\u003d null) {\n-        ContainerInfo container \u003d new ContainerInfo(containerReport);\n-        startTime \u003d container.getStartedTime();\n-        logsLink \u003d containerReport.getLogUrl();\n-        nodeLink \u003d containerReport.getNodeHttpAddress();\n-      }\n-      // AppAttemptID numerical value parsed by parseHadoopID in\n-      // yarn.dt.plugins.js\n-      attemptsTableData\n-        .append(\"[\\\"\u003ca href\u003d\u0027\")\n-        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n-        .append(\"\u0027\u003e\")\n-        .append(appAttempt.getAppAttemptId())\n-        .append(\"\u003c/a\u003e\\\",\\\"\")\n-        .append(startTime)\n-        .append(\"\\\",\\\"\u003ca \")\n-        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n-        .append(\"\u0027\u003e\")\n-        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n-            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n-        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n-        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n-        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n-    }\n-    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n-      attemptsTableData.delete(attemptsTableData.length() - 2,\n-        attemptsTableData.length() - 1);\n-    }\n-    attemptsTableData.append(\"]\");\n-    html.script().$type(\"text/javascript\")\n-      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n-\n-    tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\n        \"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\n        \"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app\n          .getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null\n            || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : app\n          .getAppState() \u003d\u003d YarnApplicationState.FINISHED\n            || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n            || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n            : \"ApplicationMaster\")\n      ._(\"Diagnostics:\",\n        app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    generateApplicationTable(html, callerUGI, attempts);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "4e886eb9cbd2dcb128bbfd17309c734083093a4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3379. Fixed missing data in localityTable and ResourceRequests table in RM WebUI. Contributed by Xuan Gong\n",
      "commitDate": "19/03/15 10:27 PM",
      "commitName": "4e886eb9cbd2dcb128bbfd17309c734083093a4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/03/15 7:35 PM",
      "commitNameOld": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 8.12,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,246 +1,217 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n-    ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport \u003d null;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? null : root_url(app.getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                 : \"ApplicationMaster\")\n       ._(\"Diagnostics:\",\n           app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n-    //TODO:YARN-3284\n-    //The preemption metrics will be exposed from ApplicationReport\n-    // and ApplicationAttemptReport\n-    ApplicationResourceUsageReport usageReport \u003d\n-        appReport.getApplicationResourceUsageReport();\n-    DIV\u003cHamlet\u003e pdiv \u003d html.\n-        _(InfoBlock.class).\n-        div(_INFO_WRAP);\n-    info(\"Application Overview\").clear();\n-    info(\"Application Metrics\")\n-        ._(\"Total Resource Preempted:\",\n-          Resources.none()) // TODO: YARN-3284\n-        ._(\"Total Number of Non-AM Containers Preempted:\",\n-          String.valueOf(0)) // TODO: YARN-3284\n-        ._(\"Total Number of AM Containers Preempted:\",\n-          String.valueOf(0)) // TODO: YARN-3284\n-        ._(\"Resource Preempted from Current Attempt:\",\n-          Resources.none()) // TODO: YARN-3284\n-        ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n-          0) // TODO: YARN-3284\n-        ._(\"Aggregate Resource Allocation:\",\n-          String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n-            ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n-            : usageReport.getVcoreSeconds()));\n-    pdiv._();\n+    createApplicationMetricsTable(html);\n \n     html._(InfoBlock.class);\n \n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport \u003d null;\n       try {\n         // AM container is always the first container of the attempt\n         final GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n               appAttemptReport.getApplicationAttemptId(), 1));\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               try {\n                 report \u003d appBaseProt.getContainerReport(request)\n                     .getContainerReport();\n               } catch (ContainerNotFoundException ex) {\n                 LOG.warn(ex.getMessage());\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca \")\n         .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n-\n-    if (webUiType !\u003d null \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n-      createResourceRequestsTable(html, null); // TODO:YARN-3284\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport \u003d null;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? null : root_url(app.getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\")\n      ._(\"Diagnostics:\",\n          app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    createApplicationMetricsTable(html);\n\n    html._(InfoBlock.class);\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport \u003d null;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n              appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1884. Added nodeHttpAddress into ContainerReport and fixed the link to NM web page. Contributed by Xuan Gong.\n",
      "commitDate": "11/03/15 7:35 PM",
      "commitName": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "09/03/15 8:46 PM",
      "commitNameOld": "c3003eba6f9802f15699564a5eb7c6e34424cb14",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,249 +1,246 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport \u003d null;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? null : root_url(app.getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                 : \"ApplicationMaster\")\n       ._(\"Diagnostics:\",\n           app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     //TODO:YARN-3284\n     //The preemption metrics will be exposed from ApplicationReport\n     // and ApplicationAttemptReport\n     ApplicationResourceUsageReport usageReport \u003d\n         appReport.getApplicationResourceUsageReport();\n     DIV\u003cHamlet\u003e pdiv \u003d html.\n         _(InfoBlock.class).\n         div(_INFO_WRAP);\n     info(\"Application Overview\").clear();\n     info(\"Application Metrics\")\n         ._(\"Total Resource Preempted:\",\n           Resources.none()) // TODO: YARN-3284\n         ._(\"Total Number of Non-AM Containers Preempted:\",\n           String.valueOf(0)) // TODO: YARN-3284\n         ._(\"Total Number of AM Containers Preempted:\",\n           String.valueOf(0)) // TODO: YARN-3284\n         ._(\"Resource Preempted from Current Attempt:\",\n           Resources.none()) // TODO: YARN-3284\n         ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n           0) // TODO: YARN-3284\n         ._(\"Aggregate Resource Allocation:\",\n           String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n             ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n             : usageReport.getVcoreSeconds()));\n     pdiv._();\n \n     html._(InfoBlock.class);\n \n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport \u003d null;\n       try {\n         // AM container is always the first container of the attempt\n         final GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n               appAttemptReport.getApplicationAttemptId(), 1));\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               try {\n                 report \u003d appBaseProt.getContainerReport(request)\n                     .getContainerReport();\n               } catch (ContainerNotFoundException ex) {\n                 LOG.warn(ex.getMessage());\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n+      String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n-      }\n-      String nodeLink \u003d null;\n-      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n-          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n-        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n+        nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n-        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n+        .append(\"\\\",\\\"\u003ca \")\n+        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n \n     if (webUiType !\u003d null \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n       createResourceRequestsTable(html, null); // TODO:YARN-3284\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport \u003d null;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? null : root_url(app.getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\")\n      ._(\"Diagnostics:\",\n          app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    //TODO:YARN-3284\n    //The preemption metrics will be exposed from ApplicationReport\n    // and ApplicationAttemptReport\n    ApplicationResourceUsageReport usageReport \u003d\n        appReport.getApplicationResourceUsageReport();\n    DIV\u003cHamlet\u003e pdiv \u003d html.\n        _(InfoBlock.class).\n        div(_INFO_WRAP);\n    info(\"Application Overview\").clear();\n    info(\"Application Metrics\")\n        ._(\"Total Resource Preempted:\",\n          Resources.none()) // TODO: YARN-3284\n        ._(\"Total Number of Non-AM Containers Preempted:\",\n          String.valueOf(0)) // TODO: YARN-3284\n        ._(\"Total Number of AM Containers Preempted:\",\n          String.valueOf(0)) // TODO: YARN-3284\n        ._(\"Resource Preempted from Current Attempt:\",\n          Resources.none()) // TODO: YARN-3284\n        ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n          0) // TODO: YARN-3284\n        ._(\"Aggregate Resource Allocation:\",\n          String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n            ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n            : usageReport.getVcoreSeconds()));\n    pdiv._();\n\n    html._(InfoBlock.class);\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport \u003d null;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n              appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca \")\n        .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n\n    if (webUiType !\u003d null \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      createResourceRequestsTable(html, null); // TODO:YARN-3284\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "c3003eba6f9802f15699564a5eb7c6e34424cb14": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3300. Outstanding_resource_requests table should not be shown in AHS. Contributed by Xuan Gong\n",
      "commitDate": "09/03/15 8:46 PM",
      "commitName": "c3003eba6f9802f15699564a5eb7c6e34424cb14",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/03/15 9:20 PM",
      "commitNameOld": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.94,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,248 +1,249 @@\n   protected void render(Block html) {\n     String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport \u003d null;\n     try {\n       final GetApplicationReportRequest request \u003d\n           GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         appReport \u003d\n             appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n             return appBaseProt.getApplicationReport(request)\n                 .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n \n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     if (webUiType !\u003d null\n         \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n         \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n       // Application Kill\n       html.div()\n         .button()\n           .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n           ._();\n \n       StringBuilder script \u003d new StringBuilder();\n       script.append(\"function confirmAction() {\")\n           .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n           .append(\" if (b \u003d\u003d true) {\")\n           .append(\" $.ajax({\")\n           .append(\" type: \u0027PUT\u0027,\")\n           .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n           .append(\" contentType: \u0027application/json\u0027,\")\n           .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n           .append(\" dataType: \u0027json\u0027\")\n           .append(\" }).done(function(data){\")\n           .append(\" setTimeout(function(){\")\n           .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n           .append(\" }, 1000);\")\n           .append(\" }).fail(function(data){\")\n           .append(\" console.log(data);\")\n           .append(\" });\")\n           .append(\" }\")\n           .append(\"}\");\n \n       html.script().$type(\"text/javascript\")._(script.toString())._();\n     }\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"Application Tags:\",\n         app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n       ._(\"YarnApplicationState:\",\n         app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n           .getAppState()))\n       ._(\"FinalStatus Reported by AM:\",\n         clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? null : root_url(app.getTrackingUrl()),\n         app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n             ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                 || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                 : \"ApplicationMaster\")\n       ._(\"Diagnostics:\",\n           app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       final GetApplicationAttemptsRequest request \u003d\n           GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n         attempts \u003d appBaseProt.getApplicationAttempts(request)\n             .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n             return appBaseProt.getApplicationAttempts(request)\n                 .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     //TODO:YARN-3284\n     //The preemption metrics will be exposed from ApplicationReport\n     // and ApplicationAttemptReport\n     ApplicationResourceUsageReport usageReport \u003d\n         appReport.getApplicationResourceUsageReport();\n     DIV\u003cHamlet\u003e pdiv \u003d html.\n         _(InfoBlock.class).\n         div(_INFO_WRAP);\n     info(\"Application Overview\").clear();\n     info(\"Application Metrics\")\n         ._(\"Total Resource Preempted:\",\n           Resources.none()) // TODO: YARN-3284\n         ._(\"Total Number of Non-AM Containers Preempted:\",\n           String.valueOf(0)) // TODO: YARN-3284\n         ._(\"Total Number of AM Containers Preempted:\",\n           String.valueOf(0)) // TODO: YARN-3284\n         ._(\"Resource Preempted from Current Attempt:\",\n           Resources.none()) // TODO: YARN-3284\n         ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n           0) // TODO: YARN-3284\n         ._(\"Aggregate Resource Allocation:\",\n           String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n             ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n             : usageReport.getVcoreSeconds()));\n     pdiv._();\n \n     html._(InfoBlock.class);\n \n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport \u003d null;\n       try {\n         // AM container is always the first container of the attempt\n         final GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n               appAttemptReport.getApplicationAttemptId(), 1));\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n             @Override\n             public ContainerReport run() throws Exception {\n               ContainerReport report \u003d null;\n               try {\n                 report \u003d appBaseProt.getContainerReport(request)\n                     .getContainerReport();\n               } catch (ContainerNotFoundException ex) {\n                 LOG.warn(ex.getMessage());\n               }\n               return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n       }\n       String nodeLink \u003d null;\n       if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n           \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n         nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(\"#\") // TODO: replace with node http address (YARN-1884)\n         .append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n         .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n \n-    createContainerLocalityTable(html); //TODO:YARN-3284\n-    createResourceRequestsTable(html, null); //TODO:YARN-3284\n+    if (webUiType !\u003d null \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n+      createResourceRequestsTable(html, null); // TODO:YARN-3284\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport \u003d null;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? null : root_url(app.getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\")\n      ._(\"Diagnostics:\",\n          app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    //TODO:YARN-3284\n    //The preemption metrics will be exposed from ApplicationReport\n    // and ApplicationAttemptReport\n    ApplicationResourceUsageReport usageReport \u003d\n        appReport.getApplicationResourceUsageReport();\n    DIV\u003cHamlet\u003e pdiv \u003d html.\n        _(InfoBlock.class).\n        div(_INFO_WRAP);\n    info(\"Application Overview\").clear();\n    info(\"Application Metrics\")\n        ._(\"Total Resource Preempted:\",\n          Resources.none()) // TODO: YARN-3284\n        ._(\"Total Number of Non-AM Containers Preempted:\",\n          String.valueOf(0)) // TODO: YARN-3284\n        ._(\"Total Number of AM Containers Preempted:\",\n          String.valueOf(0)) // TODO: YARN-3284\n        ._(\"Resource Preempted from Current Attempt:\",\n          Resources.none()) // TODO: YARN-3284\n        ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n          0) // TODO: YARN-3284\n        ._(\"Aggregate Resource Allocation:\",\n          String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n            ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n            : usageReport.getVcoreSeconds()));\n    pdiv._();\n\n    html._(InfoBlock.class);\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport \u003d null;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n              appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n      }\n      String nodeLink \u003d null;\n      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n\n    if (webUiType !\u003d null \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)) {\n      createResourceRequestsTable(html, null); // TODO:YARN-3284\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong\n",
      "commitDate": "05/03/15 9:20 PM",
      "commitName": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 175.14,
      "commitsBetweenForRepo": 1474,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,156 +1,248 @@\n   protected void render(Block html) {\n+    String webUiType \u003d $(WEB_UI_TYPE);\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n-    final ApplicationId appIDFinal \u003d appID;\n     UserGroupInformation callerUGI \u003d getCallerUGI();\n-    ApplicationReport appReport;\n+    ApplicationReport appReport \u003d null;\n     try {\n+      final GetApplicationReportRequest request \u003d\n+          GetApplicationReportRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n-        appReport \u003d appContext.getApplication(appID);\n+        appReport \u003d\n+            appBaseProt.getApplicationReport(request).getApplicationReport();\n       } else {\n         appReport \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n           @Override\n           public ApplicationReport run() throws Exception {\n-            return appContext.getApplication(appIDFinal);\n+            return appBaseProt.getApplicationReport(request)\n+                .getApplicationReport();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n+\n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n+\n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n+    if (webUiType !\u003d null\n+        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n+        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n+          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n+      // Application Kill\n+      html.div()\n+        .button()\n+          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n+          ._();\n+\n+      StringBuilder script \u003d new StringBuilder();\n+      script.append(\"function confirmAction() {\")\n+          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n+          .append(\" if (b \u003d\u003d true) {\")\n+          .append(\" $.ajax({\")\n+          .append(\" type: \u0027PUT\u0027,\")\n+          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n+          .append(\" contentType: \u0027application/json\u0027,\")\n+          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n+          .append(\" dataType: \u0027json\u0027\")\n+          .append(\" }).done(function(data){\")\n+          .append(\" setTimeout(function(){\")\n+          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n+          .append(\" }, 1000);\")\n+          .append(\" }).fail(function(data){\")\n+          .append(\" console.log(data);\")\n+          .append(\" });\")\n+          .append(\" }\")\n+          .append(\"}\");\n+\n+      html.script().$type(\"text/javascript\")._(script.toString())._();\n+    }\n+\n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n-      ._(\"State:\", app.getAppState())\n-      ._(\"FinalStatus:\", app.getFinalAppStatus())\n+      ._(\"Application Tags:\",\n+        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n+      ._(\"YarnApplicationState:\",\n+        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n+          .getAppState()))\n+      ._(\"FinalStatus Reported by AM:\",\n+        clairfyAppFinalStatus(app.getFinalAppStatus()))\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n-        app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n-        \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n-\n-    html._(InfoBlock.class);\n+        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n+            ? null : root_url(app.getTrackingUrl()),\n+        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n+            ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n+                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n+                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n+                : \"ApplicationMaster\")\n+      ._(\"Diagnostics:\",\n+          app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n+      final GetApplicationAttemptsRequest request \u003d\n+          GetApplicationAttemptsRequest.newInstance(appID);\n       if (callerUGI \u003d\u003d null) {\n-        attempts \u003d appContext.getApplicationAttempts(appID).values();\n+        attempts \u003d appBaseProt.getApplicationAttempts(request)\n+            .getApplicationAttemptList();\n       } else {\n         attempts \u003d callerUGI.doAs(\n             new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n           @Override\n           public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n-            return appContext.getApplicationAttempts(appIDFinal).values();\n+            return appBaseProt.getApplicationAttempts(request)\n+                .getApplicationAttemptList();\n           }\n         });\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n+    //TODO:YARN-3284\n+    //The preemption metrics will be exposed from ApplicationReport\n+    // and ApplicationAttemptReport\n+    ApplicationResourceUsageReport usageReport \u003d\n+        appReport.getApplicationResourceUsageReport();\n+    DIV\u003cHamlet\u003e pdiv \u003d html.\n+        _(InfoBlock.class).\n+        div(_INFO_WRAP);\n+    info(\"Application Overview\").clear();\n+    info(\"Application Metrics\")\n+        ._(\"Total Resource Preempted:\",\n+          Resources.none()) // TODO: YARN-3284\n+        ._(\"Total Number of Non-AM Containers Preempted:\",\n+          String.valueOf(0)) // TODO: YARN-3284\n+        ._(\"Total Number of AM Containers Preempted:\",\n+          String.valueOf(0)) // TODO: YARN-3284\n+        ._(\"Resource Preempted from Current Attempt:\",\n+          Resources.none()) // TODO: YARN-3284\n+        ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n+          0) // TODO: YARN-3284\n+        ._(\"Aggregate Resource Allocation:\",\n+          String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n+            ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n+            : usageReport.getVcoreSeconds()));\n+    pdiv._();\n+\n+    html._(InfoBlock.class);\n+\n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n-      ContainerReport containerReport;\n+      ContainerReport containerReport \u003d null;\n       try {\n+        // AM container is always the first container of the attempt\n+        final GetContainerReportRequest request \u003d\n+            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n+              appAttemptReport.getApplicationAttemptId(), 1));\n         if (callerUGI \u003d\u003d null) {\n-          containerReport \u003d appContext.getAMContainer(appAttemptReport\n-              .getApplicationAttemptId());\n+          containerReport \u003d\n+              appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n             @Override\n             public ContainerReport run() throws Exception {\n-              return appContext.getAMContainer(appAttemptReport\n-                  .getApplicationAttemptId());\n+              ContainerReport report \u003d null;\n+              try {\n+                report \u003d appBaseProt.getContainerReport(request)\n+                    .getContainerReport();\n+              } catch (ContainerNotFoundException ex) {\n+                LOG.warn(ex.getMessage());\n+              }\n+              return report;\n             }\n           });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n-      long startTime \u003d Long.MAX_VALUE;\n+      long startTime \u003d 0L;\n       String logsLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n       }\n       String nodeLink \u003d null;\n       if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n           \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n         nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(\n-          nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n+        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n         .append(\"\u0027\u003e\")\n-        .append(\n-          nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n+        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n-        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(logsLink \u003d\u003d null ? \"#\" : logsLink).append(\"\u0027\u003e\")\n+        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n+        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n+\n+    createContainerLocalityTable(html); //TODO:YARN-3284\n+    createResourceRequestsTable(html, null); //TODO:YARN-3284\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String webUiType \u003d $(WEB_UI_TYPE);\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport \u003d null;\n    try {\n      final GetApplicationReportRequest request \u003d\n          GetApplicationReportRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d\n            appBaseProt.getApplicationReport(request).getApplicationReport();\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appBaseProt.getApplicationReport(request)\n                .getApplicationReport();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    if (webUiType !\u003d null\n        \u0026\u0026 webUiType.equals(YarnWebParams.RM_WEB_UI)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {\n      // Application Kill\n      html.div()\n        .button()\n          .$onclick(\"confirmAction()\").b(\"Kill Application\")._()\n          ._();\n\n      StringBuilder script \u003d new StringBuilder();\n      script.append(\"function confirmAction() {\")\n          .append(\" b \u003d confirm(\\\"Are you sure?\\\");\")\n          .append(\" if (b \u003d\u003d true) {\")\n          .append(\" $.ajax({\")\n          .append(\" type: \u0027PUT\u0027,\")\n          .append(\" url: \u0027/ws/v1/cluster/apps/\").append(aid).append(\"/state\u0027,\")\n          .append(\" contentType: \u0027application/json\u0027,\")\n          .append(\" data: \u0027{\\\"state\\\":\\\"KILLED\\\"}\u0027,\")\n          .append(\" dataType: \u0027json\u0027\")\n          .append(\" }).done(function(data){\")\n          .append(\" setTimeout(function(){\")\n          .append(\" location.href \u003d \u0027/cluster/app/\").append(aid).append(\"\u0027;\")\n          .append(\" }, 1000);\")\n          .append(\" }).fail(function(data){\")\n          .append(\" console.log(data);\")\n          .append(\" });\")\n          .append(\" }\")\n          .append(\"}\");\n\n      html.script().$type(\"text/javascript\")._(script.toString())._();\n    }\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"Application Tags:\",\n        app.getApplicationTags() \u003d\u003d null ? \"\" : app.getApplicationTags())\n      ._(\"YarnApplicationState:\",\n        app.getAppState() \u003d\u003d null ? UNAVAILABLE : clarifyAppState(app\n          .getAppState()))\n      ._(\"FinalStatus Reported by AM:\",\n        clairfyAppFinalStatus(app.getFinalAppStatus()))\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? null : root_url(app.getTrackingUrl()),\n        app.getTrackingUrl() \u003d\u003d null || app.getTrackingUrl() \u003d\u003d UNAVAILABLE\n            ? \"Unassigned\" : app.getAppState() \u003d\u003d YarnApplicationState.FINISHED\n                || app.getAppState() \u003d\u003d YarnApplicationState.FAILED\n                || app.getAppState() \u003d\u003d YarnApplicationState.KILLED ? \"History\"\n                : \"ApplicationMaster\")\n      ._(\"Diagnostics:\",\n          app.getDiagnosticsInfo() \u003d\u003d null ? \"\" : app.getDiagnosticsInfo());\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      final GetApplicationAttemptsRequest request \u003d\n          GetApplicationAttemptsRequest.newInstance(appID);\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appBaseProt.getApplicationAttempts(request)\n            .getApplicationAttemptList();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appBaseProt.getApplicationAttempts(request)\n                .getApplicationAttemptList();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    //TODO:YARN-3284\n    //The preemption metrics will be exposed from ApplicationReport\n    // and ApplicationAttemptReport\n    ApplicationResourceUsageReport usageReport \u003d\n        appReport.getApplicationResourceUsageReport();\n    DIV\u003cHamlet\u003e pdiv \u003d html.\n        _(InfoBlock.class).\n        div(_INFO_WRAP);\n    info(\"Application Overview\").clear();\n    info(\"Application Metrics\")\n        ._(\"Total Resource Preempted:\",\n          Resources.none()) // TODO: YARN-3284\n        ._(\"Total Number of Non-AM Containers Preempted:\",\n          String.valueOf(0)) // TODO: YARN-3284\n        ._(\"Total Number of AM Containers Preempted:\",\n          String.valueOf(0)) // TODO: YARN-3284\n        ._(\"Resource Preempted from Current Attempt:\",\n          Resources.none()) // TODO: YARN-3284\n        ._(\"Number of Non-AM Containers Preempted from Current Attempt:\",\n          0) // TODO: YARN-3284\n        ._(\"Aggregate Resource Allocation:\",\n          String.format(\"%d MB-seconds, %d vcore-seconds\", usageReport \u003d\u003d null\n            ? 0 : usageReport.getMemorySeconds(), usageReport \u003d\u003d null ? 0\n            : usageReport.getVcoreSeconds()));\n    pdiv._();\n\n    html._(InfoBlock.class);\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport \u003d null;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n              appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n            @Override\n            public ContainerReport run() throws Exception {\n              ContainerReport report \u003d null;\n              try {\n                report \u003d appBaseProt.getContainerReport(request)\n                    .getContainerReport();\n              } catch (ContainerNotFoundException ex) {\n                LOG.warn(ex.getMessage());\n              }\n              return report;\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n      }\n      String nodeLink \u003d null;\n      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\"#\") // TODO: replace with node http address (YARN-1884)\n        .append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n        .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n\n    createContainerLocalityTable(html); //TODO:YARN-3284\n    createResourceRequestsTable(html, null); //TODO:YARN-3284\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "17/03/14 2:36 PM",
      "commitNameOld": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 178.19,
      "commitsBetweenForRepo": 1264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,156 @@\n   protected void render(Block html) {\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n+    final ApplicationId appIDFinal \u003d appID;\n+    UserGroupInformation callerUGI \u003d getCallerUGI();\n     ApplicationReport appReport;\n     try {\n-      appReport \u003d appContext.getApplication(appID);\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        appReport \u003d appContext.getApplication(appID);\n+      } else {\n+        appReport \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n+          @Override\n+          public ApplicationReport run() throws Exception {\n+            return appContext.getApplication(appIDFinal);\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"State:\", app.getAppState())\n       ._(\"FinalStatus:\", app.getFinalAppStatus())\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n         \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n-      attempts \u003d appContext.getApplicationAttempts(appID).values();\n-    } catch (IOException e) {\n+      if (callerUGI \u003d\u003d null) {\n+        attempts \u003d appContext.getApplicationAttempts(appID).values();\n+      } else {\n+        attempts \u003d callerUGI.doAs(\n+            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n+          @Override\n+          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n+            return appContext.getApplicationAttempts(appIDFinal).values();\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n-    for (ApplicationAttemptReport appAttemptReport : attempts) {\n+    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n-        containerReport \u003d\n-            appContext.getAMContainer(appAttemptReport\n+        if (callerUGI \u003d\u003d null) {\n+          containerReport \u003d appContext.getAMContainer(appAttemptReport\n               .getApplicationAttemptId());\n-      } catch (IOException e) {\n+        } else {\n+          containerReport \u003d callerUGI.doAs(\n+              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n+            @Override\n+            public ContainerReport run() throws Exception {\n+              return appContext.getAMContainer(appAttemptReport\n+                  .getApplicationAttemptId());\n+            }\n+          });\n+        }\n+      } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d Long.MAX_VALUE;\n       String logsLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n       }\n       String nodeLink \u003d null;\n       if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n           \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n         nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(\n           nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n         .append(\"\u0027\u003e\")\n         .append(\n           nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(logsLink \u003d\u003d null ? \"#\" : logsLink).append(\"\u0027\u003e\")\n         .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    final ApplicationId appIDFinal \u003d appID;\n    UserGroupInformation callerUGI \u003d getCallerUGI();\n    ApplicationReport appReport;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        appReport \u003d appContext.getApplication(appID);\n      } else {\n        appReport \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cApplicationReport\u003e () {\n          @Override\n          public ApplicationReport run() throws Exception {\n            return appContext.getApplication(appIDFinal);\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"State:\", app.getAppState())\n      ._(\"FinalStatus:\", app.getFinalAppStatus())\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n        \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      if (callerUGI \u003d\u003d null) {\n        attempts \u003d appContext.getApplicationAttempts(appID).values();\n      } else {\n        attempts \u003d callerUGI.doAs(\n            new PrivilegedExceptionAction\u003cCollection\u003cApplicationAttemptReport\u003e\u003e () {\n          @Override\n          public Collection\u003cApplicationAttemptReport\u003e run() throws Exception {\n            return appContext.getApplicationAttempts(appIDFinal).values();\n          }\n        });\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d appContext.getAMContainer(appAttemptReport\n              .getApplicationAttemptId());\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e () {\n            @Override\n            public ContainerReport run() throws Exception {\n              return appContext.getAMContainer(appAttemptReport\n                  .getApplicationAttemptId());\n            }\n          });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d Long.MAX_VALUE;\n      String logsLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n      }\n      String nodeLink \u003d null;\n      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\n          nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n        .append(\"\u0027\u003e\")\n        .append(\n          nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(logsLink \u003d\u003d null ? \"#\" : logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "8314674947ec087899d2515ae6b668c6c39cabbd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1685. Fixed few bugs related to handling of containers\u0027 log-URLs on ResourceManager and history-service. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 2:36 PM",
      "commitName": "8314674947ec087899d2515ae6b668c6c39cabbd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/02/14 12:01 PM",
      "commitNameOld": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 31.07,
      "commitsBetweenForRepo": 282,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,124 @@\n   protected void render(Block html) {\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     ApplicationReport appReport;\n     try {\n       appReport \u003d appContext.getApplication(appID);\n     } catch (IOException e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"State:\", app.getAppState())\n       ._(\"FinalStatus:\", app.getFinalAppStatus())\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n         \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       attempts \u003d appContext.getApplicationAttempts(appID).values();\n     } catch (IOException e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         containerReport \u003d\n             appContext.getAMContainer(appAttemptReport\n               .getApplicationAttemptId());\n       } catch (IOException e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d Long.MAX_VALUE;\n       String logsLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n-        logsLink \u003d getPartUrl(logsLink, \"log\");\n       }\n       String nodeLink \u003d null;\n       if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n           \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n         nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(\n           nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n         .append(\"\u0027\u003e\")\n         .append(\n           nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n-        .append(logsLink \u003d\u003d null ? \"#\" : url(logsLink)).append(\"\u0027\u003e\")\n-        .append(nodeLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n+        .append(logsLink \u003d\u003d null ? \"#\" : logsLink).append(\"\u0027\u003e\")\n+        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    ApplicationReport appReport;\n    try {\n      appReport \u003d appContext.getApplication(appID);\n    } catch (IOException e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"State:\", app.getAppState())\n      ._(\"FinalStatus:\", app.getFinalAppStatus())\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n        \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      attempts \u003d appContext.getApplicationAttempts(appID).values();\n    } catch (IOException e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        containerReport \u003d\n            appContext.getAMContainer(appAttemptReport\n              .getApplicationAttemptId());\n      } catch (IOException e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d Long.MAX_VALUE;\n      String logsLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n      }\n      String nodeLink \u003d null;\n      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\n          nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n        .append(\"\u0027\u003e\")\n        .append(\n          nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(logsLink \u003d\u003d null ? \"#\" : logsLink).append(\"\u0027\u003e\")\n        .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.63,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,125 @@\n   protected void render(Block html) {\n     String aid \u003d $(APPLICATION_ID);\n     if (aid.isEmpty()) {\n       puts(\"Bad request: requires Application ID\");\n       return;\n     }\n \n     ApplicationId appID \u003d null;\n     try {\n       appID \u003d Apps.toAppID(aid);\n     } catch (Exception e) {\n       puts(\"Invalid Application ID: \" + aid);\n       return;\n     }\n \n     ApplicationReport appReport;\n     try {\n       appReport \u003d appContext.getApplication(appID);\n     } catch (IOException e) {\n       String message \u003d \"Failed to read the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n     if (appReport \u003d\u003d null) {\n       puts(\"Application not found: \" + aid);\n       return;\n     }\n     AppInfo app \u003d new AppInfo(appReport);\n \n     setTitle(join(\"Application \", aid));\n \n     info(\"Application Overview\")\n       ._(\"User:\", app.getUser())\n       ._(\"Name:\", app.getName())\n       ._(\"Application Type:\", app.getType())\n       ._(\"State:\", app.getAppState())\n       ._(\"FinalStatus:\", app.getFinalAppStatus())\n       ._(\"Started:\", Times.format(app.getStartedTime()))\n       ._(\n         \"Elapsed:\",\n         StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n           app.getFinishedTime())))\n       ._(\"Tracking URL:\",\n         app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n         \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n \n     html._(InfoBlock.class);\n \n     Collection\u003cApplicationAttemptReport\u003e attempts;\n     try {\n       attempts \u003d appContext.getApplicationAttempts(appID).values();\n     } catch (IOException e) {\n       String message \u003d\n           \"Failed to read the attempts of the application \" + appID + \".\";\n       LOG.error(message, e);\n       html.p()._(message)._();\n       return;\n     }\n \n     // Application Attempt Table\n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n           .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n           ._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport;\n       try {\n         containerReport \u003d\n             appContext.getAMContainer(appAttemptReport\n               .getApplicationAttemptId());\n       } catch (IOException e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d Long.MAX_VALUE;\n       String logsLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         logsLink \u003d getPartUrl(logsLink, \"log\");\n       }\n       String nodeLink \u003d null;\n       if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n           \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n         nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n       }\n       // AppAttemptID numerical value parsed by parseHadoopID in\n       // yarn.dt.plugins.js\n       attemptsTableData\n         .append(\"[\\\"\u003ca href\u003d\u0027\")\n         .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n         .append(\"\u0027\u003e\")\n         .append(appAttempt.getAppAttemptId())\n         .append(\"\u003c/a\u003e\\\",\\\"\")\n         .append(startTime)\n         .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(\n-          nodeLink \u003d\u003d null ? \"#\" : url(HttpConfig.getSchemePrefix(), nodeLink))\n+          nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n         .append(\"\u0027\u003e\")\n         .append(\n           nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n             .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n         .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n         .append(logsLink \u003d\u003d null ? \"#\" : url(logsLink)).append(\"\u0027\u003e\")\n         .append(nodeLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n         attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n       ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    ApplicationReport appReport;\n    try {\n      appReport \u003d appContext.getApplication(appID);\n    } catch (IOException e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"State:\", app.getAppState())\n      ._(\"FinalStatus:\", app.getFinalAppStatus())\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n        \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      attempts \u003d appContext.getApplicationAttempts(appID).values();\n    } catch (IOException e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        containerReport \u003d\n            appContext.getAMContainer(appAttemptReport\n              .getApplicationAttemptId());\n      } catch (IOException e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d Long.MAX_VALUE;\n      String logsLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        logsLink \u003d getPartUrl(logsLink, \"log\");\n      }\n      String nodeLink \u003d null;\n      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\n          nodeLink \u003d\u003d null ? \"#\" : url(\"//\", nodeLink))\n        .append(\"\u0027\u003e\")\n        .append(\n          nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(logsLink \u003d\u003d null ? \"#\" : url(logsLink)).append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,125 @@\n+  protected void render(Block html) {\n+    String aid \u003d $(APPLICATION_ID);\n+    if (aid.isEmpty()) {\n+      puts(\"Bad request: requires Application ID\");\n+      return;\n+    }\n+\n+    ApplicationId appID \u003d null;\n+    try {\n+      appID \u003d Apps.toAppID(aid);\n+    } catch (Exception e) {\n+      puts(\"Invalid Application ID: \" + aid);\n+      return;\n+    }\n+\n+    ApplicationReport appReport;\n+    try {\n+      appReport \u003d appContext.getApplication(appID);\n+    } catch (IOException e) {\n+      String message \u003d \"Failed to read the application \" + appID + \".\";\n+      LOG.error(message, e);\n+      html.p()._(message)._();\n+      return;\n+    }\n+    if (appReport \u003d\u003d null) {\n+      puts(\"Application not found: \" + aid);\n+      return;\n+    }\n+    AppInfo app \u003d new AppInfo(appReport);\n+\n+    setTitle(join(\"Application \", aid));\n+\n+    info(\"Application Overview\")\n+      ._(\"User:\", app.getUser())\n+      ._(\"Name:\", app.getName())\n+      ._(\"Application Type:\", app.getType())\n+      ._(\"State:\", app.getAppState())\n+      ._(\"FinalStatus:\", app.getFinalAppStatus())\n+      ._(\"Started:\", Times.format(app.getStartedTime()))\n+      ._(\n+        \"Elapsed:\",\n+        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n+          app.getFinishedTime())))\n+      ._(\"Tracking URL:\",\n+        app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n+        \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n+\n+    html._(InfoBlock.class);\n+\n+    Collection\u003cApplicationAttemptReport\u003e attempts;\n+    try {\n+      attempts \u003d appContext.getApplicationAttempts(appID).values();\n+    } catch (IOException e) {\n+      String message \u003d\n+          \"Failed to read the attempts of the application \" + appID + \".\";\n+      LOG.error(message, e);\n+      html.p()._(message)._();\n+      return;\n+    }\n+\n+    // Application Attempt Table\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n+          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n+          ._()._().tbody();\n+\n+    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n+    for (ApplicationAttemptReport appAttemptReport : attempts) {\n+      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n+      ContainerReport containerReport;\n+      try {\n+        containerReport \u003d\n+            appContext.getAMContainer(appAttemptReport\n+              .getApplicationAttemptId());\n+      } catch (IOException e) {\n+        String message \u003d\n+            \"Failed to read the AM container of the application attempt \"\n+                + appAttemptReport.getApplicationAttemptId() + \".\";\n+        LOG.error(message, e);\n+        html.p()._(message)._();\n+        return;\n+      }\n+      long startTime \u003d Long.MAX_VALUE;\n+      String logsLink \u003d null;\n+      if (containerReport !\u003d null) {\n+        ContainerInfo container \u003d new ContainerInfo(containerReport);\n+        startTime \u003d container.getStartedTime();\n+        logsLink \u003d containerReport.getLogUrl();\n+        logsLink \u003d getPartUrl(logsLink, \"log\");\n+      }\n+      String nodeLink \u003d null;\n+      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n+          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n+        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n+      }\n+      // AppAttemptID numerical value parsed by parseHadoopID in\n+      // yarn.dt.plugins.js\n+      attemptsTableData\n+        .append(\"[\\\"\u003ca href\u003d\u0027\")\n+        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n+        .append(\"\u0027\u003e\")\n+        .append(appAttempt.getAppAttemptId())\n+        .append(\"\u003c/a\u003e\\\",\\\"\")\n+        .append(startTime)\n+        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n+        .append(\n+          nodeLink \u003d\u003d null ? \"#\" : url(HttpConfig.getSchemePrefix(), nodeLink))\n+        .append(\"\u0027\u003e\")\n+        .append(\n+          nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n+            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n+        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n+        .append(logsLink \u003d\u003d null ? \"#\" : url(logsLink)).append(\"\u0027\u003e\")\n+        .append(nodeLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n+    }\n+    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      attemptsTableData.delete(attemptsTableData.length() - 2,\n+        attemptsTableData.length() - 1);\n+    }\n+    attemptsTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\")\n+      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    String aid \u003d $(APPLICATION_ID);\n    if (aid.isEmpty()) {\n      puts(\"Bad request: requires Application ID\");\n      return;\n    }\n\n    ApplicationId appID \u003d null;\n    try {\n      appID \u003d Apps.toAppID(aid);\n    } catch (Exception e) {\n      puts(\"Invalid Application ID: \" + aid);\n      return;\n    }\n\n    ApplicationReport appReport;\n    try {\n      appReport \u003d appContext.getApplication(appID);\n    } catch (IOException e) {\n      String message \u003d \"Failed to read the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n    if (appReport \u003d\u003d null) {\n      puts(\"Application not found: \" + aid);\n      return;\n    }\n    AppInfo app \u003d new AppInfo(appReport);\n\n    setTitle(join(\"Application \", aid));\n\n    info(\"Application Overview\")\n      ._(\"User:\", app.getUser())\n      ._(\"Name:\", app.getName())\n      ._(\"Application Type:\", app.getType())\n      ._(\"State:\", app.getAppState())\n      ._(\"FinalStatus:\", app.getFinalAppStatus())\n      ._(\"Started:\", Times.format(app.getStartedTime()))\n      ._(\n        \"Elapsed:\",\n        StringUtils.formatTime(Times.elapsed(app.getStartedTime(),\n          app.getFinishedTime())))\n      ._(\"Tracking URL:\",\n        app.getTrackingUrl() \u003d\u003d null ? \"#\" : root_url(app.getTrackingUrl()),\n        \"History\")._(\"Diagnostics:\", app.getDiagnosticsInfo());\n\n    html._(InfoBlock.class);\n\n    Collection\u003cApplicationAttemptReport\u003e attempts;\n    try {\n      attempts \u003d appContext.getApplicationAttempts(appID).values();\n    } catch (IOException e) {\n      String message \u003d\n          \"Failed to read the attempts of the application \" + appID + \".\";\n      LOG.error(message, e);\n      html.p()._(message)._();\n      return;\n    }\n\n    // Application Attempt Table\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n          .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n          ._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport;\n      try {\n        containerReport \u003d\n            appContext.getAMContainer(appAttemptReport\n              .getApplicationAttemptId());\n      } catch (IOException e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d Long.MAX_VALUE;\n      String logsLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        logsLink \u003d getPartUrl(logsLink, \"log\");\n      }\n      String nodeLink \u003d null;\n      if (appAttempt.getHost() !\u003d null \u0026\u0026 appAttempt.getRpcPort() \u003e\u003d 0\n          \u0026\u0026 appAttempt.getRpcPort() \u003c 65536) {\n        nodeLink \u003d appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\n      }\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n        .append(\"[\\\"\u003ca href\u003d\u0027\")\n        .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n        .append(\"\u0027\u003e\")\n        .append(appAttempt.getAppAttemptId())\n        .append(\"\u003c/a\u003e\\\",\\\"\")\n        .append(startTime)\n        .append(\"\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(\n          nodeLink \u003d\u003d null ? \"#\" : url(HttpConfig.getSchemePrefix(), nodeLink))\n        .append(\"\u0027\u003e\")\n        .append(\n          nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n            .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n        .append(\"\u003c/a\u003e\\\",\\\"\u003ca href\u003d\u0027\")\n        .append(logsLink \u003d\u003d null ? \"#\" : url(logsLink)).append(\"\u0027\u003e\")\n        .append(nodeLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n        attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n      ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppBlock.java"
    }
  }
}