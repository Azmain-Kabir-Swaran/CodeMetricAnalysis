{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitCache.java",
  "functionName": "accept",
  "functionId": "accept___visitor-CacheVisitor",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
  "functionStartLine": 951,
  "functionEndLine": 979,
  "numCommitsSeen": 31,
  "timeTaken": 3338,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "f0d64a078da7e932b9509734f75170e3e525e68c",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Yfilerename",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "f0d64a078da7e932b9509734f75170e3e525e68c": "Ybodychange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:52 PM",
      "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   public void accept(CacheVisitor visitor) {\n     lock.lock();\n     try {\n-      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n-          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n-      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n-          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n+      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d new HashMap\u003c\u003e();\n+      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n-            replicaInfoMap.entrySet()) {\n+          replicaInfoMap.entrySet()) {\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n         if (waitable.hasVal()) {\n           if (waitable.getVal().getReplica() !\u003d null) {\n             replicas.put(entry.getKey(), waitable.getVal().getReplica());\n           } else {\n             // The exception may be null here, indicating a failed load that\n             // isn\u0027t the result of an invalid block token.\n             failedLoads.put(entry.getKey(),\n                 waitable.getVal().getInvalidTokenException());\n           }\n         }\n       }\n       LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n-          + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n+              + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n           visitor.getClass().getName(), outstandingMmapCount, replicas,\n           failedLoads, evictable, evictableMmapped);\n       visitor.visit(outstandingMmapCount, replicas, failedLoads,\n-            evictable, evictableMmapped);\n+          evictable, evictableMmapped);\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d new HashMap\u003c\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n          replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n              + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n          visitor.getClass().getName(), outstandingMmapCount, replicas,\n          failedLoads, evictable, evictableMmapped);\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n          evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,31 @@\n   public void accept(CacheVisitor visitor) {\n     lock.lock();\n     try {\n       Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n           new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n       Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n           new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n       for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n             replicaInfoMap.entrySet()) {\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n         if (waitable.hasVal()) {\n           if (waitable.getVal().getReplica() !\u003d null) {\n             replicas.put(entry.getKey(), waitable.getVal().getReplica());\n           } else {\n             // The exception may be null here, indicating a failed load that\n             // isn\u0027t the result of an invalid block token.\n             failedLoads.put(entry.getKey(),\n                 waitable.getVal().getInvalidTokenException());\n           }\n         }\n       }\n-      if (LOG.isDebugEnabled()) {\n-        StringBuilder builder \u003d new StringBuilder();\n-        builder.append(\"visiting \").append(visitor.getClass().getName()).\n-            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n-            append(\", replicas\u003d\");\n-        String prefix \u003d \"\";\n-        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n-          builder.append(prefix).append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        prefix \u003d \"\";\n-        builder.append(\", failedLoads\u003d\");\n-        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n-          builder.append(prefix).append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        prefix \u003d \"\";\n-        builder.append(\", evictable\u003d\");\n-        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n-          builder.append(prefix).append(entry.getKey()).\n-              append(\":\").append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        prefix \u003d \"\";\n-        builder.append(\", evictableMmapped\u003d\");\n-        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n-          builder.append(prefix).append(entry.getKey()).\n-              append(\":\").append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        LOG.debug(builder.toString());\n-      }\n+      LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n+          + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n+          visitor.getClass().getName(), outstandingMmapCount, replicas,\n+          failedLoads, evictable, evictableMmapped);\n       visitor.visit(outstandingMmapCount, replicas, failedLoads,\n             evictable, evictableMmapped);\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n          + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n          visitor.getClass().getName(), outstandingMmapCount, replicas,\n          failedLoads, evictable, evictableMmapped);\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,59 @@\n   public void accept(CacheVisitor visitor) {\n     lock.lock();\n     try {\n       Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n           new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n       Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n           new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n       for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n             replicaInfoMap.entrySet()) {\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n         if (waitable.hasVal()) {\n           if (waitable.getVal().getReplica() !\u003d null) {\n             replicas.put(entry.getKey(), waitable.getVal().getReplica());\n           } else {\n             // The exception may be null here, indicating a failed load that\n             // isn\u0027t the result of an invalid block token.\n             failedLoads.put(entry.getKey(),\n                 waitable.getVal().getInvalidTokenException());\n           }\n         }\n       }\n-      LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n-          + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n-          visitor.getClass().getName(), outstandingMmapCount, replicas,\n-          failedLoads, evictable, evictableMmapped);\n+      if (LOG.isDebugEnabled()) {\n+        StringBuilder builder \u003d new StringBuilder();\n+        builder.append(\"visiting \").append(visitor.getClass().getName()).\n+            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n+            append(\", replicas\u003d\");\n+        String prefix \u003d \"\";\n+        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n+          builder.append(prefix).append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        prefix \u003d \"\";\n+        builder.append(\", failedLoads\u003d\");\n+        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n+          builder.append(prefix).append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        prefix \u003d \"\";\n+        builder.append(\", evictable\u003d\");\n+        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n+          builder.append(prefix).append(entry.getKey()).\n+              append(\":\").append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        prefix \u003d \"\";\n+        builder.append(\", evictableMmapped\u003d\");\n+        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n+          builder.append(prefix).append(entry.getKey()).\n+              append(\":\").append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        LOG.debug(builder.toString());\n+      }\n       visitor.visit(outstandingMmapCount, replicas, failedLoads,\n             evictable, evictableMmapped);\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"visiting \").append(visitor.getClass().getName()).\n            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n            append(\", replicas\u003d\");\n        String prefix \u003d \"\";\n        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", failedLoads\u003d\");\n        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictable\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictableMmapped\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        LOG.debug(builder.toString());\n      }\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/08/15 2:02 PM",
      "commitNameOld": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 34.16,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,31 @@\n   public void accept(CacheVisitor visitor) {\n     lock.lock();\n     try {\n       Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n           new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n       Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n           new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n       for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n             replicaInfoMap.entrySet()) {\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n         if (waitable.hasVal()) {\n           if (waitable.getVal().getReplica() !\u003d null) {\n             replicas.put(entry.getKey(), waitable.getVal().getReplica());\n           } else {\n             // The exception may be null here, indicating a failed load that\n             // isn\u0027t the result of an invalid block token.\n             failedLoads.put(entry.getKey(),\n                 waitable.getVal().getInvalidTokenException());\n           }\n         }\n       }\n-      if (LOG.isDebugEnabled()) {\n-        StringBuilder builder \u003d new StringBuilder();\n-        builder.append(\"visiting \").append(visitor.getClass().getName()).\n-            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n-            append(\", replicas\u003d\");\n-        String prefix \u003d \"\";\n-        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n-          builder.append(prefix).append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        prefix \u003d \"\";\n-        builder.append(\", failedLoads\u003d\");\n-        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n-          builder.append(prefix).append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        prefix \u003d \"\";\n-        builder.append(\", evictable\u003d\");\n-        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n-          builder.append(prefix).append(entry.getKey()).\n-              append(\":\").append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        prefix \u003d \"\";\n-        builder.append(\", evictableMmapped\u003d\");\n-        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n-          builder.append(prefix).append(entry.getKey()).\n-              append(\":\").append(entry.getValue());\n-          prefix \u003d \",\";\n-        }\n-        LOG.debug(builder.toString());\n-      }\n+      LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n+          + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n+          visitor.getClass().getName(), outstandingMmapCount, replicas,\n+          failedLoads, evictable, evictableMmapped);\n       visitor.visit(outstandingMmapCount, replicas, failedLoads,\n             evictable, evictableMmapped);\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      LOG.debug(\"visiting {} with outstandingMmapCount\u003d{}, replicas\u003d{}, \"\n          + \"failedLoads\u003d{}, evictable\u003d{}, evictableMmapped\u003d{}\",\n          visitor.getClass().getName(), outstandingMmapCount, replicas,\n          failedLoads, evictable, evictableMmapped);\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/08/15 2:29 PM",
      "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"visiting \").append(visitor.getClass().getName()).\n            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n            append(\", replicas\u003d\");\n        String prefix \u003d \"\";\n        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", failedLoads\u003d\");\n        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictable\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictableMmapped\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        LOG.debug(builder.toString());\n      }\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"visiting \").append(visitor.getClass().getName()).\n            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n            append(\", replicas\u003d\");\n        String prefix \u003d \"\";\n        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", failedLoads\u003d\");\n        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictable\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictableMmapped\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        LOG.debug(builder.toString());\n      }\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "f0d64a078da7e932b9509734f75170e3e525e68c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5940.  Minor cleanups to ShortCircuitReplica, FsDatasetCache, and DomainSocketWatcher (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567835 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 7:10 PM",
      "commitName": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 11:08 AM",
      "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public void accept(CacheVisitor visitor) {\n     lock.lock();\n     try {\n-      Map\u003cKey, ShortCircuitReplica\u003e replicas \u003d\n-          new HashMap\u003cKey, ShortCircuitReplica\u003e();\n-      Map\u003cKey, InvalidToken\u003e failedLoads \u003d\n-          new HashMap\u003cKey, InvalidToken\u003e();\n-      for (Entry\u003cKey, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n+      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n+          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n+      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n+          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n+      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n             replicaInfoMap.entrySet()) {\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n         if (waitable.hasVal()) {\n           if (waitable.getVal().getReplica() !\u003d null) {\n             replicas.put(entry.getKey(), waitable.getVal().getReplica());\n           } else {\n             // The exception may be null here, indicating a failed load that\n             // isn\u0027t the result of an invalid block token.\n             failedLoads.put(entry.getKey(),\n                 waitable.getVal().getInvalidTokenException());\n           }\n         }\n       }\n       if (LOG.isDebugEnabled()) {\n         StringBuilder builder \u003d new StringBuilder();\n         builder.append(\"visiting \").append(visitor.getClass().getName()).\n             append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n             append(\", replicas\u003d\");\n         String prefix \u003d \"\";\n-        for (Entry\u003cKey, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n+        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n           builder.append(prefix).append(entry.getValue());\n           prefix \u003d \",\";\n         }\n         prefix \u003d \"\";\n         builder.append(\", failedLoads\u003d\");\n-        for (Entry\u003cKey, InvalidToken\u003e entry : failedLoads.entrySet()) {\n+        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n           builder.append(prefix).append(entry.getValue());\n           prefix \u003d \",\";\n         }\n         prefix \u003d \"\";\n         builder.append(\", evictable\u003d\");\n         for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n           builder.append(prefix).append(entry.getKey()).\n               append(\":\").append(entry.getValue());\n           prefix \u003d \",\";\n         }\n         prefix \u003d \"\";\n         builder.append(\", evictableMmapped\u003d\");\n         for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n           builder.append(prefix).append(entry.getKey()).\n               append(\":\").append(entry.getValue());\n           prefix \u003d \",\";\n         }\n         LOG.debug(builder.toString());\n       }\n       visitor.visit(outstandingMmapCount, replicas, failedLoads,\n             evictable, evictableMmapped);\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cExtendedBlockId, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cExtendedBlockId, ShortCircuitReplica\u003e();\n      Map\u003cExtendedBlockId, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cExtendedBlockId, InvalidToken\u003e();\n      for (Entry\u003cExtendedBlockId, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"visiting \").append(visitor.getClass().getName()).\n            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n            append(\", replicas\u003d\");\n        String prefix \u003d \"\";\n        for (Entry\u003cExtendedBlockId, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", failedLoads\u003d\");\n        for (Entry\u003cExtendedBlockId, InvalidToken\u003e entry : failedLoads.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictable\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictableMmapped\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        LOG.debug(builder.toString());\n      }\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,59 @@\n+  public void accept(CacheVisitor visitor) {\n+    lock.lock();\n+    try {\n+      Map\u003cKey, ShortCircuitReplica\u003e replicas \u003d\n+          new HashMap\u003cKey, ShortCircuitReplica\u003e();\n+      Map\u003cKey, InvalidToken\u003e failedLoads \u003d\n+          new HashMap\u003cKey, InvalidToken\u003e();\n+      for (Entry\u003cKey, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n+            replicaInfoMap.entrySet()) {\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n+        if (waitable.hasVal()) {\n+          if (waitable.getVal().getReplica() !\u003d null) {\n+            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n+          } else {\n+            // The exception may be null here, indicating a failed load that\n+            // isn\u0027t the result of an invalid block token.\n+            failedLoads.put(entry.getKey(),\n+                waitable.getVal().getInvalidTokenException());\n+          }\n+        }\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        StringBuilder builder \u003d new StringBuilder();\n+        builder.append(\"visiting \").append(visitor.getClass().getName()).\n+            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n+            append(\", replicas\u003d\");\n+        String prefix \u003d \"\";\n+        for (Entry\u003cKey, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n+          builder.append(prefix).append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        prefix \u003d \"\";\n+        builder.append(\", failedLoads\u003d\");\n+        for (Entry\u003cKey, InvalidToken\u003e entry : failedLoads.entrySet()) {\n+          builder.append(prefix).append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        prefix \u003d \"\";\n+        builder.append(\", evictable\u003d\");\n+        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n+          builder.append(prefix).append(entry.getKey()).\n+              append(\":\").append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        prefix \u003d \"\";\n+        builder.append(\", evictableMmapped\u003d\");\n+        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n+          builder.append(prefix).append(entry.getKey()).\n+              append(\":\").append(entry.getValue());\n+          prefix \u003d \",\";\n+        }\n+        LOG.debug(builder.toString());\n+      }\n+      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n+            evictable, evictableMmapped);\n+    } finally {\n+      lock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void accept(CacheVisitor visitor) {\n    lock.lock();\n    try {\n      Map\u003cKey, ShortCircuitReplica\u003e replicas \u003d\n          new HashMap\u003cKey, ShortCircuitReplica\u003e();\n      Map\u003cKey, InvalidToken\u003e failedLoads \u003d\n          new HashMap\u003cKey, InvalidToken\u003e();\n      for (Entry\u003cKey, Waitable\u003cShortCircuitReplicaInfo\u003e\u003e entry :\n            replicaInfoMap.entrySet()) {\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitable \u003d entry.getValue();\n        if (waitable.hasVal()) {\n          if (waitable.getVal().getReplica() !\u003d null) {\n            replicas.put(entry.getKey(), waitable.getVal().getReplica());\n          } else {\n            // The exception may be null here, indicating a failed load that\n            // isn\u0027t the result of an invalid block token.\n            failedLoads.put(entry.getKey(),\n                waitable.getVal().getInvalidTokenException());\n          }\n        }\n      }\n      if (LOG.isDebugEnabled()) {\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"visiting \").append(visitor.getClass().getName()).\n            append(\"with outstandingMmapCount\u003d\").append(outstandingMmapCount).\n            append(\", replicas\u003d\");\n        String prefix \u003d \"\";\n        for (Entry\u003cKey, ShortCircuitReplica\u003e entry : replicas.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", failedLoads\u003d\");\n        for (Entry\u003cKey, InvalidToken\u003e entry : failedLoads.entrySet()) {\n          builder.append(prefix).append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictable\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictable.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        prefix \u003d \"\";\n        builder.append(\", evictableMmapped\u003d\");\n        for (Entry\u003cLong, ShortCircuitReplica\u003e entry : evictableMmapped.entrySet()) {\n          builder.append(prefix).append(entry.getKey()).\n              append(\":\").append(entry.getValue());\n          prefix \u003d \",\";\n        }\n        LOG.debug(builder.toString());\n      }\n      visitor.visit(outstandingMmapCount, replicas, failedLoads,\n            evictable, evictableMmapped);\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java"
    }
  }
}