{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMNodeImpl.java",
  "functionName": "findLostContainers",
  "functionId": "findLostContainers___numRemoteRunning-int__containerStatuses-List__ContainerStatus__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
  "functionStartLine": 1488,
  "functionEndLine": 1516,
  "numCommitsSeen": 92,
  "timeTaken": 1944,
  "changeHistory": [
    "e0f4620cc7db3db4b781e6042ab7dd754af28f18"
  ],
  "changeHistoryShort": {
    "e0f4620cc7db3db4b781e6042ab7dd754af28f18": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0f4620cc7db3db4b781e6042ab7dd754af28f18": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5197. RM leaks containers if running container disappears from node update. Contributed by Jason Lowe.\n",
      "commitDate": "10/06/16 9:52 PM",
      "commitName": "e0f4620cc7db3db4b781e6042ab7dd754af28f18",
      "commitAuthor": "Rohith Sharma K S",
      "diff": "@@ -0,0 +1,29 @@\n+  private List\u003cContainerStatus\u003e findLostContainers(int numRemoteRunning,\n+      List\u003cContainerStatus\u003e containerStatuses) {\n+    if (numRemoteRunning \u003e\u003d launchedContainers.size()) {\n+      return Collections.emptyList();\n+    }\n+    Set\u003cContainerId\u003e nodeContainers \u003d\n+        new HashSet\u003cContainerId\u003e(numRemoteRunning);\n+    List\u003cContainerStatus\u003e lostContainers \u003d new ArrayList\u003cContainerStatus\u003e(\n+        launchedContainers.size() - numRemoteRunning);\n+    for (ContainerStatus remoteContainer : containerStatuses) {\n+      if (remoteContainer.getState() \u003d\u003d ContainerState.RUNNING\n+          \u0026\u0026 remoteContainer.getExecutionType() \u003d\u003d ExecutionType.GUARANTEED) {\n+        nodeContainers.add(remoteContainer.getContainerId());\n+      }\n+    }\n+    Iterator\u003cContainerId\u003e iter \u003d launchedContainers.iterator();\n+    while (iter.hasNext()) {\n+      ContainerId containerId \u003d iter.next();\n+      if (!nodeContainers.contains(containerId)) {\n+        String diag \u003d \"Container \" + containerId\n+            + \" was running but not reported from \" + nodeId;\n+        LOG.warn(diag);\n+        lostContainers.add(SchedulerUtils.createAbnormalContainerStatus(\n+            containerId, diag));\n+        iter.remove();\n+      }\n+    }\n+    return lostContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerStatus\u003e findLostContainers(int numRemoteRunning,\n      List\u003cContainerStatus\u003e containerStatuses) {\n    if (numRemoteRunning \u003e\u003d launchedContainers.size()) {\n      return Collections.emptyList();\n    }\n    Set\u003cContainerId\u003e nodeContainers \u003d\n        new HashSet\u003cContainerId\u003e(numRemoteRunning);\n    List\u003cContainerStatus\u003e lostContainers \u003d new ArrayList\u003cContainerStatus\u003e(\n        launchedContainers.size() - numRemoteRunning);\n    for (ContainerStatus remoteContainer : containerStatuses) {\n      if (remoteContainer.getState() \u003d\u003d ContainerState.RUNNING\n          \u0026\u0026 remoteContainer.getExecutionType() \u003d\u003d ExecutionType.GUARANTEED) {\n        nodeContainers.add(remoteContainer.getContainerId());\n      }\n    }\n    Iterator\u003cContainerId\u003e iter \u003d launchedContainers.iterator();\n    while (iter.hasNext()) {\n      ContainerId containerId \u003d iter.next();\n      if (!nodeContainers.contains(containerId)) {\n        String diag \u003d \"Container \" + containerId\n            + \" was running but not reported from \" + nodeId;\n        LOG.warn(diag);\n        lostContainers.add(SchedulerUtils.createAbnormalContainerStatus(\n            containerId, diag));\n        iter.remove();\n      }\n    }\n    return lostContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java"
    }
  }
}