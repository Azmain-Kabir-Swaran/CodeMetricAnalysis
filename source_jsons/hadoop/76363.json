{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectWritable.java",
  "functionName": "writeObject",
  "functionId": "writeObject___out-DataOutput__instance-Object__declaredClass-Class__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
  "functionStartLine": 125,
  "functionEndLine": 129,
  "numCommitsSeen": 9,
  "timeTaken": 995,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "0d55e1a14430ee18a84de6f985da86dc61d7ae80",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "0d55e1a14430ee18a84de6f985da86dc61d7ae80": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void writeObject(DataOutput out, Object instance,\n                                 Class declaredClass, \n                                 Configuration conf) throws IOException {\n    writeObject(out, instance, declaredClass, conf, false);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void writeObject(DataOutput out, Object instance,\n                                 Class declaredClass, \n                                 Configuration conf) throws IOException {\n    writeObject(out, instance, declaredClass, conf, false);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void writeObject(DataOutput out, Object instance,\n                                 Class declaredClass, \n                                 Configuration conf) throws IOException {\n    writeObject(out, instance, declaredClass, conf, false);\n  }",
      "path": "common/src/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "common/src/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "0d55e1a14430ee18a84de6f985da86dc61d7ae80": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6949. Reduce RPC packet size of primitive arrays using ArrayPrimitiveWritable instead of ObjectWritable. Contributed by Matt Foley.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1083957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/11 2:10 PM",
      "commitName": "0d55e1a14430ee18a84de6f985da86dc61d7ae80",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 282.98,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,5 @@\n   public static void writeObject(DataOutput out, Object instance,\n                                  Class declaredClass, \n                                  Configuration conf) throws IOException {\n-\n-    if (instance \u003d\u003d null) {                       // null\n-      instance \u003d new NullInstance(declaredClass, conf);\n-      declaredClass \u003d Writable.class;\n-    }\n-\n-    UTF8.writeString(out, declaredClass.getName()); // always write declared\n-\n-    if (declaredClass.isArray()) {                // array\n-      int length \u003d Array.getLength(instance);\n-      out.writeInt(length);\n-      for (int i \u003d 0; i \u003c length; i++) {\n-        writeObject(out, Array.get(instance, i),\n-                    declaredClass.getComponentType(), conf);\n-      }\n-      \n-    } else if (declaredClass \u003d\u003d String.class) {   // String\n-      UTF8.writeString(out, (String)instance);\n-      \n-    } else if (declaredClass.isPrimitive()) {     // primitive type\n-\n-      if (declaredClass \u003d\u003d Boolean.TYPE) {        // boolean\n-        out.writeBoolean(((Boolean)instance).booleanValue());\n-      } else if (declaredClass \u003d\u003d Character.TYPE) { // char\n-        out.writeChar(((Character)instance).charValue());\n-      } else if (declaredClass \u003d\u003d Byte.TYPE) {    // byte\n-        out.writeByte(((Byte)instance).byteValue());\n-      } else if (declaredClass \u003d\u003d Short.TYPE) {   // short\n-        out.writeShort(((Short)instance).shortValue());\n-      } else if (declaredClass \u003d\u003d Integer.TYPE) { // int\n-        out.writeInt(((Integer)instance).intValue());\n-      } else if (declaredClass \u003d\u003d Long.TYPE) {    // long\n-        out.writeLong(((Long)instance).longValue());\n-      } else if (declaredClass \u003d\u003d Float.TYPE) {   // float\n-        out.writeFloat(((Float)instance).floatValue());\n-      } else if (declaredClass \u003d\u003d Double.TYPE) {  // double\n-        out.writeDouble(((Double)instance).doubleValue());\n-      } else if (declaredClass \u003d\u003d Void.TYPE) {    // void\n-      } else {\n-        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n-      }\n-    } else if (declaredClass.isEnum()) {         // enum\n-      UTF8.writeString(out, ((Enum)instance).name());\n-    } else if (Writable.class.isAssignableFrom(declaredClass)) { // Writable\n-      UTF8.writeString(out, instance.getClass().getName());\n-      ((Writable)instance).write(out);\n-\n-    } else {\n-      throw new IOException(\"Can\u0027t write: \"+instance+\" as \"+declaredClass);\n-    }\n+    writeObject(out, instance, declaredClass, conf, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeObject(DataOutput out, Object instance,\n                                 Class declaredClass, \n                                 Configuration conf) throws IOException {\n    writeObject(out, instance, declaredClass, conf, false);\n  }",
      "path": "src/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,54 @@\n+  public static void writeObject(DataOutput out, Object instance,\n+                                 Class declaredClass, \n+                                 Configuration conf) throws IOException {\n+\n+    if (instance \u003d\u003d null) {                       // null\n+      instance \u003d new NullInstance(declaredClass, conf);\n+      declaredClass \u003d Writable.class;\n+    }\n+\n+    UTF8.writeString(out, declaredClass.getName()); // always write declared\n+\n+    if (declaredClass.isArray()) {                // array\n+      int length \u003d Array.getLength(instance);\n+      out.writeInt(length);\n+      for (int i \u003d 0; i \u003c length; i++) {\n+        writeObject(out, Array.get(instance, i),\n+                    declaredClass.getComponentType(), conf);\n+      }\n+      \n+    } else if (declaredClass \u003d\u003d String.class) {   // String\n+      UTF8.writeString(out, (String)instance);\n+      \n+    } else if (declaredClass.isPrimitive()) {     // primitive type\n+\n+      if (declaredClass \u003d\u003d Boolean.TYPE) {        // boolean\n+        out.writeBoolean(((Boolean)instance).booleanValue());\n+      } else if (declaredClass \u003d\u003d Character.TYPE) { // char\n+        out.writeChar(((Character)instance).charValue());\n+      } else if (declaredClass \u003d\u003d Byte.TYPE) {    // byte\n+        out.writeByte(((Byte)instance).byteValue());\n+      } else if (declaredClass \u003d\u003d Short.TYPE) {   // short\n+        out.writeShort(((Short)instance).shortValue());\n+      } else if (declaredClass \u003d\u003d Integer.TYPE) { // int\n+        out.writeInt(((Integer)instance).intValue());\n+      } else if (declaredClass \u003d\u003d Long.TYPE) {    // long\n+        out.writeLong(((Long)instance).longValue());\n+      } else if (declaredClass \u003d\u003d Float.TYPE) {   // float\n+        out.writeFloat(((Float)instance).floatValue());\n+      } else if (declaredClass \u003d\u003d Double.TYPE) {  // double\n+        out.writeDouble(((Double)instance).doubleValue());\n+      } else if (declaredClass \u003d\u003d Void.TYPE) {    // void\n+      } else {\n+        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n+      }\n+    } else if (declaredClass.isEnum()) {         // enum\n+      UTF8.writeString(out, ((Enum)instance).name());\n+    } else if (Writable.class.isAssignableFrom(declaredClass)) { // Writable\n+      UTF8.writeString(out, instance.getClass().getName());\n+      ((Writable)instance).write(out);\n+\n+    } else {\n+      throw new IOException(\"Can\u0027t write: \"+instance+\" as \"+declaredClass);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeObject(DataOutput out, Object instance,\n                                 Class declaredClass, \n                                 Configuration conf) throws IOException {\n\n    if (instance \u003d\u003d null) {                       // null\n      instance \u003d new NullInstance(declaredClass, conf);\n      declaredClass \u003d Writable.class;\n    }\n\n    UTF8.writeString(out, declaredClass.getName()); // always write declared\n\n    if (declaredClass.isArray()) {                // array\n      int length \u003d Array.getLength(instance);\n      out.writeInt(length);\n      for (int i \u003d 0; i \u003c length; i++) {\n        writeObject(out, Array.get(instance, i),\n                    declaredClass.getComponentType(), conf);\n      }\n      \n    } else if (declaredClass \u003d\u003d String.class) {   // String\n      UTF8.writeString(out, (String)instance);\n      \n    } else if (declaredClass.isPrimitive()) {     // primitive type\n\n      if (declaredClass \u003d\u003d Boolean.TYPE) {        // boolean\n        out.writeBoolean(((Boolean)instance).booleanValue());\n      } else if (declaredClass \u003d\u003d Character.TYPE) { // char\n        out.writeChar(((Character)instance).charValue());\n      } else if (declaredClass \u003d\u003d Byte.TYPE) {    // byte\n        out.writeByte(((Byte)instance).byteValue());\n      } else if (declaredClass \u003d\u003d Short.TYPE) {   // short\n        out.writeShort(((Short)instance).shortValue());\n      } else if (declaredClass \u003d\u003d Integer.TYPE) { // int\n        out.writeInt(((Integer)instance).intValue());\n      } else if (declaredClass \u003d\u003d Long.TYPE) {    // long\n        out.writeLong(((Long)instance).longValue());\n      } else if (declaredClass \u003d\u003d Float.TYPE) {   // float\n        out.writeFloat(((Float)instance).floatValue());\n      } else if (declaredClass \u003d\u003d Double.TYPE) {  // double\n        out.writeDouble(((Double)instance).doubleValue());\n      } else if (declaredClass \u003d\u003d Void.TYPE) {    // void\n      } else {\n        throw new IllegalArgumentException(\"Not a primitive: \"+declaredClass);\n      }\n    } else if (declaredClass.isEnum()) {         // enum\n      UTF8.writeString(out, ((Enum)instance).name());\n    } else if (Writable.class.isAssignableFrom(declaredClass)) { // Writable\n      UTF8.writeString(out, instance.getClass().getName());\n      ((Writable)instance).write(out);\n\n    } else {\n      throw new IOException(\"Can\u0027t write: \"+instance+\" as \"+declaredClass);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/ObjectWritable.java"
    }
  }
}