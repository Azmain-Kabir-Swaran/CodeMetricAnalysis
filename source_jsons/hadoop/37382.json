{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 278,
  "functionEndLine": 327,
  "numCommitsSeen": 174,
  "timeTaken": 12742,
  "changeHistory": [
    "e7d44e48f708ba41e14d2a9e32a6760a62617485",
    "1845a83cec6563482523d8c34b38c4e36c0aa9df",
    "ed13cf84068ad50a78e66211132c1f08238fb65b",
    "c05b5d424b000bab766f57e88a07f2b4e9a56647",
    "cc0310a5266c8b8351f338f5fc8087a203c68cac",
    "5324388cf2357b1f80efd0c34392f577bf417455",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "0928502029ef141759008997335ea2cd836a7154",
    "ab16a375720f1b5fa8400498d6a727007275e1d8",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "48414b08277b86cdbc34ae36d7c4d204fd838294",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": "Ybodychange",
    "1845a83cec6563482523d8c34b38c4e36c0aa9df": "Ybodychange",
    "ed13cf84068ad50a78e66211132c1f08238fb65b": "Ybodychange",
    "c05b5d424b000bab766f57e88a07f2b4e9a56647": "Ybodychange",
    "cc0310a5266c8b8351f338f5fc8087a203c68cac": "Ybodychange",
    "5324388cf2357b1f80efd0c34392f577bf417455": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": "Ybodychange",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Ybodychange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "ab16a375720f1b5fa8400498d6a727007275e1d8": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "48414b08277b86cdbc34ae36d7c4d204fd838294": "Ybodychange",
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9761. Allow overriding application submissions based on server side configs. Contributed by Pralabh Kumar\n",
      "commitDate": "06/09/19 10:17 AM",
      "commitName": "e7d44e48f708ba41e14d2a9e32a6760a62617485",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "15/08/19 8:15 AM",
      "commitNameOld": "1845a83cec6563482523d8c34b38c4e36c0aa9df",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 22.08,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,50 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     this.server.addTerseExceptions(ApplicationNotFoundException.class,\n         ApplicationAttemptNotFoundException.class,\n         ContainerNotFoundException.class,\n         YARNFeatureNotEnabledException.class);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.filterAppsByUser  \u003d conf.getBoolean(\n         YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n         YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                                YarnConfiguration.RM_ADDRESS,\n                                                YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n     this.timelineServiceV2Enabled \u003d YarnConfiguration.\n         timelineServiceV2Enabled(conf);\n \n+    if (conf.getBoolean(\n+        YarnConfiguration.RM_SUBMISSION_PREPROCESSOR_ENABLED,\n+        YarnConfiguration.DEFAULT_RM_SUBMISSION_PREPROCESSOR_ENABLED)) {\n+      this.contextPreProcessor \u003d new SubmissionContextPreProcessor();\n+      this.contextPreProcessor.start(conf);\n+    }\n+\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    this.server.addTerseExceptions(ApplicationNotFoundException.class,\n        ApplicationAttemptNotFoundException.class,\n        ContainerNotFoundException.class,\n        YARNFeatureNotEnabledException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.filterAppsByUser  \u003d conf.getBoolean(\n        YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n\n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n    if (conf.getBoolean(\n        YarnConfiguration.RM_SUBMISSION_PREPROCESSOR_ENABLED,\n        YarnConfiguration.DEFAULT_RM_SUBMISSION_PREPROCESSOR_ENABLED)) {\n      this.contextPreProcessor \u003d new SubmissionContextPreProcessor();\n      this.contextPreProcessor.start(conf);\n    }\n\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "1845a83cec6563482523d8c34b38c4e36c0aa9df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9488. Skip YARNFeatureNotEnabledException from ClientRMService. Contributed by Prabhu Joseph\n",
      "commitDate": "15/08/19 8:15 AM",
      "commitName": "1845a83cec6563482523d8c34b38c4e36c0aa9df",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 152.66,
      "commitsBetweenForRepo": 1121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     this.server.addTerseExceptions(ApplicationNotFoundException.class,\n         ApplicationAttemptNotFoundException.class,\n-        ContainerNotFoundException.class);\n+        ContainerNotFoundException.class,\n+        YARNFeatureNotEnabledException.class);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.filterAppsByUser  \u003d conf.getBoolean(\n         YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n         YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                                YarnConfiguration.RM_ADDRESS,\n                                                YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n     this.timelineServiceV2Enabled \u003d YarnConfiguration.\n         timelineServiceV2Enabled(conf);\n \n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    this.server.addTerseExceptions(ApplicationNotFoundException.class,\n        ApplicationAttemptNotFoundException.class,\n        ContainerNotFoundException.class,\n        YARNFeatureNotEnabledException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.filterAppsByUser  \u003d conf.getBoolean(\n        YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n\n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "ed13cf84068ad50a78e66211132c1f08238fb65b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9317. Avoid repeated YarnConfiguration#timelineServiceV2Enabled check. Contributed by Prabhu Joseph\n",
      "commitDate": "22/02/19 7:31 AM",
      "commitName": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "01/11/18 2:22 PM",
      "commitNameOld": "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 112.76,
      "commitsBetweenForRepo": 767,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     this.server.addTerseExceptions(ApplicationNotFoundException.class,\n         ApplicationAttemptNotFoundException.class,\n         ContainerNotFoundException.class);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.filterAppsByUser  \u003d conf.getBoolean(\n         YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n         YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                                YarnConfiguration.RM_ADDRESS,\n                                                YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n+    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n+        timelineServiceV2Enabled(conf);\n+\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    this.server.addTerseExceptions(ApplicationNotFoundException.class,\n        ApplicationAttemptNotFoundException.class,\n        ContainerNotFoundException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.filterAppsByUser  \u003d conf.getBoolean(\n        YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n\n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "c05b5d424b000bab766f57e88a07f2b4e9a56647": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8319. More YARN pages need to honor yarn.resourcemanager.display.per-user-apps. Contributed by Sunil G.\n",
      "commitDate": "24/05/18 1:49 AM",
      "commitName": "c05b5d424b000bab766f57e88a07f2b4e9a56647",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "09/05/18 8:45 PM",
      "commitNameOld": "cc0310a5266c8b8351f338f5fc8087a203c68cac",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     this.server.addTerseExceptions(ApplicationNotFoundException.class,\n         ApplicationAttemptNotFoundException.class,\n         ContainerNotFoundException.class);\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n-    this.displayPerUserApps  \u003d conf.getBoolean(\n-        YarnConfiguration.DISPLAY_APPS_FOR_LOGGED_IN_USER,\n+    this.filterAppsByUser  \u003d conf.getBoolean(\n+        YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n         YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                                YarnConfiguration.RM_ADDRESS,\n                                                YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    this.server.addTerseExceptions(ApplicationNotFoundException.class,\n        ApplicationAttemptNotFoundException.class,\n        ContainerNotFoundException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.filterAppsByUser  \u003d conf.getBoolean(\n        YarnConfiguration.FILTER_ENTITY_LIST_BY_USER,\n        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n\n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cc0310a5266c8b8351f338f5fc8087a203c68cac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8201. Skip stacktrace of few exception from ClientRMService. Contributed by Bilwa S T.\n",
      "commitDate": "09/05/18 8:45 PM",
      "commitName": "cc0310a5266c8b8351f338f5fc8087a203c68cac",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "22/11/17 7:18 PM",
      "commitNameOld": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 168.02,
      "commitsBetweenForRepo": 1670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,39 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n+    this.server.addTerseExceptions(ApplicationNotFoundException.class,\n+        ApplicationAttemptNotFoundException.class,\n+        ContainerNotFoundException.class);\n+\n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n \n     this.displayPerUserApps  \u003d conf.getBoolean(\n         YarnConfiguration.DISPLAY_APPS_FOR_LOGGED_IN_USER,\n         YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                                YarnConfiguration.RM_ADDRESS,\n                                                YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    this.server.addTerseExceptions(ApplicationNotFoundException.class,\n        ApplicationAttemptNotFoundException.class,\n        ContainerNotFoundException.class);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.displayPerUserApps  \u003d conf.getBoolean(\n        YarnConfiguration.DISPLAY_APPS_FOR_LOGGED_IN_USER,\n        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n\n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "5324388cf2357b1f80efd0c34392f577bf417455": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7157. Add admin configuration to filter per-user\u0027s apps in secure cluster. Contributed by Sunil G.\n",
      "commitDate": "13/09/17 11:06 AM",
      "commitName": "5324388cf2357b1f80efd0c34392f577bf417455",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n-    \n+\n+    this.displayPerUserApps  \u003d conf.getBoolean(\n+        YarnConfiguration.DISPLAY_APPS_FOR_LOGGED_IN_USER,\n+        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n+\n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                                YarnConfiguration.RM_ADDRESS,\n                                                YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n\n    this.displayPerUserApps  \u003d conf.getBoolean(\n        YarnConfiguration.DISPLAY_APPS_FOR_LOGGED_IN_USER,\n        YarnConfiguration.DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER);\n\n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "02/07/14 2:36 PM",
      "commitNameOld": "45b191e38cd226760f8e706ab0370747cd8f9321",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.94,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       InputStream inputStream \u003d\n           this.rmContext.getConfigurationProvider()\n               .getConfigurationInputStream(conf,\n                   YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n       if (inputStream !\u003d null) {\n         conf.addResource(inputStream);\n       }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n-    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n+    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n+                                               YarnConfiguration.RM_ADDRESS,\n+                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                                               YarnConfiguration.RM_ADDRESS,\n                                               YarnConfiguration.DEFAULT_RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a60434368cdf0fd119d024c2ed10942abdb2e7f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1758. Fixed ResourceManager to not mandate the presence of site specific configuration files and thus fix failures in downstream tests. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/14 11:41 AM",
      "commitName": "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 9:52 AM",
      "commitNameOld": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.08,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      conf.addResource(this.rmContext.getConfigurationProvider()\n-          .getConfigurationInputStream(conf,\n-              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n+      InputStream inputStream \u003d\n+          this.rmContext.getConfigurationProvider()\n+              .getConfigurationInputStream(conf,\n+                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n+      if (inputStream !\u003d null) {\n+        conf.addResource(inputStream);\n+      }\n       refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      InputStream inputStream \u003d\n          this.rmContext.getConfigurationProvider()\n              .getConfigurationInputStream(conf,\n                  YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE);\n      if (inputStream !\u003d null) {\n        conf.addResource(inputStream);\n      }\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/02/14 2:50 PM",
      "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(\n-          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n-              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n-          RMPolicyProvider.getInstance());\n+      conf.addResource(this.rmContext.getConfigurationProvider()\n+          .getConfigurationInputStream(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n+      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      conf.addResource(this.rmContext.getConfigurationProvider()\n          .getConfigurationInputStream(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE));\n      refreshServiceAcls(conf, RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 8:55 PM",
      "commitNameOld": "ebe0c17a95ae37d4768f2928ea193e89db34ead5",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(conf, new RMPolicyProvider());\n+      refreshServiceAcls(\n+          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n+          RMPolicyProvider.getInstance());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(\n          this.rmContext.getConfigurationProvider().getConfiguration(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n          RMPolicyProvider.getInstance());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1107. Fixed a bug in ResourceManager because of which RM in secure mode fails to restart. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1520726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 10:43 PM",
      "commitName": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/08/13 6:12 PM",
      "commitNameOld": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,22 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n-    // enable RM to short-circuit token operations directly to itself\n-    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n-        rmDTSecretManager, clientBindAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/06/13 8:54 AM",
      "commitNameOld": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.44,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n-      rpc.getServer(ClientRMProtocol.class, this,\n+      rpc.getServer(ApplicationClientProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     // enable RM to short-circuit token operations directly to itself\n     RMDelegationTokenIdentifier.Renewer.setSecretManager(\n         rmDTSecretManager, clientBindAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ApplicationClientProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    // enable RM to short-circuit token operations directly to itself\n    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n        rmDTSecretManager, clientBindAddress);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     // enable RM to short-circuit token operations directly to itself\n     RMDelegationTokenIdentifier.Renewer.setSecretManager(\n         rmDTSecretManager, clientBindAddress);\n-    \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    // enable RM to short-circuit token operations directly to itself\n    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n        rmDTSecretManager, clientBindAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     // enable RM to short-circuit token operations directly to itself\n     RMDelegationTokenIdentifier.Renewer.setSecretManager(\n         rmDTSecretManager, clientBindAddress);\n-    \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    // enable RM to short-circuit token operations directly to itself\n    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n        rmDTSecretManager, clientBindAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     // enable RM to short-circuit token operations directly to itself\n     RMDelegationTokenIdentifier.Renewer.setSecretManager(\n         rmDTSecretManager, clientBindAddress);\n-    \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    // enable RM to short-circuit token operations directly to itself\n    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n        rmDTSecretManager, clientBindAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 1:59 PM",
          "commitNameOld": "af8514eef297574240652672d048748100c97733",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 5.79,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n     // enable RM to short-circuit token operations directly to itself\n     RMDelegationTokenIdentifier.Renewer.setSecretManager(\n         rmDTSecretManager, clientBindAddress);\n-    \n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    // enable RM to short-circuit token operations directly to itself\n    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n        rmDTSecretManager, clientBindAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "ab16a375720f1b5fa8400498d6a727007275e1d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-355. Fixes a bug where RM app submission could jam under load. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/13 11:03 AM",
      "commitName": "ab16a375720f1b5fa8400498d6a727007275e1d8",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "09/01/13 11:33 AM",
      "commitNameOld": "ba5b19fb5d6a925231a123616d171e3f6062bd27",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 27.98,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                                server.getListenerAddress());\n+    // enable RM to short-circuit token operations directly to itself\n+    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n+        rmDTSecretManager, clientBindAddress);\n+    \n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    // enable RM to short-circuit token operations directly to itself\n    RMDelegationTokenIdentifier.Renewer.setSecretManager(\n        rmDTSecretManager, clientBindAddress);\n    \n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "48414b08277b86cdbc34ae36d7c4d204fd838294": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4163. consistently set the bind address (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 11:35 AM",
      "commitName": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/04/12 1:33 PM",
      "commitNameOld": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,22 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n-    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n-      String resolvedAddress \u003d\n-        this.server.getListenerAddress().getHostName() + \":\" + this.server.getListenerAddress().getPort();\n-      conf.set(YarnConfiguration.RM_ADDRESS, resolvedAddress);\n-    }\n+    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n+                                               server.getListenerAddress());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    clientBindAddress \u003d conf.updateConnectAddr(YarnConfiguration.RM_ADDRESS,\n                                               server.getListenerAddress());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3867. MiniMRYarn/MiniYarn uses fixed ports (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 1:33 PM",
      "commitName": "df654cca49c12ab3fa8ec1e626da1bb562bbb6c1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,25 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n+    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      String resolvedAddress \u003d\n+        this.server.getListenerAddress().getHostName() + \":\" + this.server.getListenerAddress().getPort();\n+      conf.set(YarnConfiguration.RM_ADDRESS, resolvedAddress);\n+    }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      String resolvedAddress \u003d\n        this.server.getListenerAddress().getHostName() + \":\" + this.server.getListenerAddress().getPort();\n      conf.set(YarnConfiguration.RM_ADDRESS, resolvedAddress);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "27/10/11 10:45 PM",
      "commitNameOld": "69dd2844527f4d6fba99a13ed25538055e0613dd",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 74.84,
      "commitsBetweenForRepo": 397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,20 @@\n   public void start() {\n-    // All the clients to appsManager are supposed to be authenticated via\n-    // Kerberos if security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n-            conf, null,\n+            conf, this.rmDTSecretManager,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n     \n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, this.rmDTSecretManager,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,22 @@\n   public void start() {\n     // All the clients to appsManager are supposed to be authenticated via\n     // Kerberos if security is enabled, so no secretManager.\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             conf, null,\n             conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n+    \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n+        false)) {\n+      refreshServiceAcls(conf, new RMPolicyProvider());\n+    }\n+    \n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    // All the clients to appsManager are supposed to be authenticated via\n    // Kerberos if security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, null,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n    \n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/09/11 3:19 PM",
      "commitNameOld": "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 4.56,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,14 @@\n   public void start() {\n     // All the clients to appsManager are supposed to be authenticated via\n     // Kerberos if security is enabled, so no secretManager.\n-    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    Configuration clientServerConf \u003d new Configuration(getConfig());\n-    clientServerConf.setClass(\n-        YarnConfiguration.YARN_SECURITY_INFO,\n-        ClientRMSecurityInfo.class, SecurityInfo.class);\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n-            clientServerConf, null,\n-            clientServerConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n+            conf, null,\n+            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    // All the clients to appsManager are supposed to be authenticated via\n    // Kerberos if security is enabled, so no secretManager.\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            conf, null,\n            conf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 6:24 PM",
      "commitNameOld": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public void start() {\n     // All the clients to appsManager are supposed to be authenticated via\n     // Kerberos if security is enabled, so no secretManager.\n     YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     Configuration clientServerConf \u003d new Configuration(getConfig());\n     clientServerConf.setClass(\n         YarnConfiguration.YARN_SECURITY_INFO,\n         ClientRMSecurityInfo.class, SecurityInfo.class);\n     this.server \u003d   \n       rpc.getServer(ClientRMProtocol.class, this,\n             clientBindAddress,\n             clientServerConf, null,\n-            clientServerConf.getInt(RMConfig.RM_CLIENT_THREADS, \n-                RMConfig.DEFAULT_RM_CLIENT_THREADS));\n+            clientServerConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n+                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n     this.server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    // All the clients to appsManager are supposed to be authenticated via\n    // Kerberos if security is enabled, so no secretManager.\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration clientServerConf \u003d new Configuration(getConfig());\n    clientServerConf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        ClientRMSecurityInfo.class, SecurityInfo.class);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            clientServerConf, null,\n            clientServerConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n    // All the clients to appsManager are supposed to be authenticated via\n    // Kerberos if security is enabled, so no secretManager.\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration clientServerConf \u003d new Configuration(getConfig());\n    clientServerConf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        ClientRMSecurityInfo.class, SecurityInfo.class);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            clientServerConf, null,\n            clientServerConf.getInt(RMConfig.RM_CLIENT_THREADS, \n                RMConfig.DEFAULT_RM_CLIENT_THREADS));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  public void start() {\n+    // All the clients to appsManager are supposed to be authenticated via\n+    // Kerberos if security is enabled, so no secretManager.\n+    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+    Configuration clientServerConf \u003d new Configuration(getConfig());\n+    clientServerConf.setClass(\n+        YarnConfiguration.YARN_SECURITY_INFO,\n+        ClientRMSecurityInfo.class, SecurityInfo.class);\n+    this.server \u003d   \n+      rpc.getServer(ClientRMProtocol.class, this,\n+            clientBindAddress,\n+            clientServerConf, null,\n+            clientServerConf.getInt(RMConfig.RM_CLIENT_THREADS, \n+                RMConfig.DEFAULT_RM_CLIENT_THREADS));\n+    this.server.start();\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    // All the clients to appsManager are supposed to be authenticated via\n    // Kerberos if security is enabled, so no secretManager.\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration clientServerConf \u003d new Configuration(getConfig());\n    clientServerConf.setClass(\n        YarnConfiguration.YARN_SECURITY_INFO,\n        ClientRMSecurityInfo.class, SecurityInfo.class);\n    this.server \u003d   \n      rpc.getServer(ClientRMProtocol.class, this,\n            clientBindAddress,\n            clientServerConf, null,\n            clientServerConf.getInt(RMConfig.RM_CLIENT_THREADS, \n                RMConfig.DEFAULT_RM_CLIENT_THREADS));\n    this.server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}