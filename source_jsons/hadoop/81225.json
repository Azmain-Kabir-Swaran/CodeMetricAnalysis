{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetworkTopology.java",
  "functionName": "add",
  "functionId": "add___node-Node",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
  "functionStartLine": 123,
  "functionEndLine": 158,
  "numCommitsSeen": 55,
  "timeTaken": 3576,
  "changeHistory": [
    "2ae4b33d48db40bb0c222ac88df49e4b7c8e1493",
    "dcc292d7ded200a4976f6d348952ecba10f01db2",
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
    "e59f6fad6a8849cfab6acbf012f338d9cc7dd63c",
    "6338ce3ae8870548cac5abe2f685748b5efb13c1",
    "b6c7de68bc850ee5fa144eb3ea8d304065dbf4ea",
    "64741f46352f25743bfb77f804a06970d355a177",
    "415ce38b82fd173790fdbf3760a7846a41a0579d",
    "b5a8ccb75b25c90e54ccf8c1834b4b12e6261f05",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "2ae4b33d48db40bb0c222ac88df49e4b7c8e1493": "Ybodychange",
    "dcc292d7ded200a4976f6d348952ecba10f01db2": "Ybodychange",
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470": "Ybodychange",
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": "Ybodychange",
    "e59f6fad6a8849cfab6acbf012f338d9cc7dd63c": "Ybodychange",
    "6338ce3ae8870548cac5abe2f685748b5efb13c1": "Ybodychange",
    "b6c7de68bc850ee5fa144eb3ea8d304065dbf4ea": "Ybodychange",
    "64741f46352f25743bfb77f804a06970d355a177": "Ybodychange",
    "415ce38b82fd173790fdbf3760a7846a41a0579d": "Ybodychange",
    "b5a8ccb75b25c90e54ccf8c1834b4b12e6261f05": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ae4b33d48db40bb0c222ac88df49e4b7c8e1493": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16662. Remove unnecessary InnerNode check in NetworkTopology#add(). Contributed by Lisheng Sun.\n",
      "commitDate": "18/10/19 10:35 PM",
      "commitName": "2ae4b33d48db40bb0c222ac88df49e4b7c8e1493",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "16/08/19 5:19 PM",
      "commitNameOld": "971a4c8e8328a4bdea65de4a0e84c82b5b2de24b",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 63.22,
      "commitsBetweenForRepo": 511,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n       if( node instanceof InnerNode ) {\n         throw new IllegalArgumentException(\n           \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n       }\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n         LOG.error(\"Error: can\u0027t add leaf node {} at depth {} to topology:{}\\n\",\n             NodeBase.getPath(node), newDepth, this);\n         throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n             \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           incrementRacks();\n         }\n-        if (!(node instanceof InnerNode)) {\n-          if (depthOfAllLeaves \u003d\u003d -1) {\n-            depthOfAllLeaves \u003d node.getLevel();\n-          }\n+        if (depthOfAllLeaves \u003d\u003d -1) {\n+          depthOfAllLeaves \u003d node.getLevel();\n         }\n       }\n       LOG.debug(\"NetworkTopology became:\\n{}\", this);\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if( node instanceof InnerNode ) {\n        throw new IllegalArgumentException(\n          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n      }\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node {} at depth {} to topology:{}\\n\",\n            NodeBase.getPath(node), newDepth, this);\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          incrementRacks();\n        }\n        if (depthOfAllLeaves \u003d\u003d -1) {\n          depthOfAllLeaves \u003d node.getLevel();\n        }\n      }\n      LOG.debug(\"NetworkTopology became:\\n{}\", this);\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "dcc292d7ded200a4976f6d348952ecba10f01db2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14369. NetworkTopology calls expensive toString() when logging. Contributed by Inigo Goiri.\n",
      "commitDate": "02/05/17 10:51 AM",
      "commitName": "dcc292d7ded200a4976f6d348952ecba10f01db2",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/03/17 8:02 AM",
      "commitNameOld": "6b0933643835d7696ced011cfdb8b74f63022e8b",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 35.12,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n       if( node instanceof InnerNode ) {\n         throw new IllegalArgumentException(\n           \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n       }\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n-        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n-            \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n+        LOG.error(\"Error: can\u0027t add leaf node {} at depth {} to topology:{}\\n\",\n+            NodeBase.getPath(node), newDepth, this);\n         throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n             \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           incrementRacks();\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           }\n         }\n       }\n-      LOG.debug(\"NetworkTopology became:\\n{}\", this.toString());\n+      LOG.debug(\"NetworkTopology became:\\n{}\", this);\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if( node instanceof InnerNode ) {\n        throw new IllegalArgumentException(\n          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n      }\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node {} at depth {} to topology:{}\\n\",\n            NodeBase.getPath(node), newDepth, this);\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          incrementRacks();\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      LOG.debug(\"NetworkTopology became:\\n{}\", this);\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10320. Rack failures may result in NN terminate. (Xiao Chen via mingma)\n",
      "commitDate": "04/05/16 5:02 PM",
      "commitName": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "19/03/16 2:02 PM",
      "commitNameOld": "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 46.13,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n       if( node instanceof InnerNode ) {\n         throw new IllegalArgumentException(\n           \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n       }\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n         LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n             \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n         throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n             \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           incrementRacks();\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           }\n         }\n       }\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n-      }\n+      LOG.debug(\"NetworkTopology became:\\n{}\", this.toString());\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if( node instanceof InnerNode ) {\n        throw new IllegalArgumentException(\n          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n      }\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n            \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          incrementRacks();\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      LOG.debug(\"NetworkTopology became:\\n{}\", this.toString());\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8647. Abstract BlockManager\u0027s rack policy into BlockPlacementPolicy. (Brahma Reddy Battula via mingma)\n",
      "commitDate": "21/10/15 8:06 AM",
      "commitName": "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "13/08/15 1:45 AM",
      "commitNameOld": "53bef9c5b98dee87d4ffaf35415bc38e2f876ed8",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 69.27,
      "commitsBetweenForRepo": 480,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n       if( node instanceof InnerNode ) {\n         throw new IllegalArgumentException(\n           \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n       }\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n         LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n             \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n         throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n             \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n-          numOfRacks++;\n+          incrementRacks();\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           }\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if( node instanceof InnerNode ) {\n        throw new IllegalArgumentException(\n          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n      }\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n            \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          incrementRacks();\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "e59f6fad6a8849cfab6acbf012f338d9cc7dd63c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12173. NetworkTopology::add calls toString always. Contributed by Inigo Goiri\n",
      "commitDate": "02/07/15 9:39 PM",
      "commitName": "e59f6fad6a8849cfab6acbf012f338d9cc7dd63c",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "10/02/15 1:24 PM",
      "commitNameOld": "6338ce3ae8870548cac5abe2f685748b5efb13c1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 142.3,
      "commitsBetweenForRepo": 1283,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n-      String oldTopoStr \u003d this.toString();\n       if( node instanceof InnerNode ) {\n         throw new IllegalArgumentException(\n           \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n       }\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n         LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n-            \" at depth \" + newDepth + \" to topology:\\n\" + oldTopoStr);\n+            \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n         throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n             \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           }\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if( node instanceof InnerNode ) {\n        throw new IllegalArgumentException(\n          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n      }\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n            \" at depth \" + newDepth + \" to topology:\\n\" + this.toString());\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "6338ce3ae8870548cac5abe2f685748b5efb13c1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10953. NetworkTopology#add calls NetworkTopology#toString without holding the netlock (Liang Xie via Colin P. McCabe)\n",
      "commitDate": "10/02/15 1:24 PM",
      "commitName": "6338ce3ae8870548cac5abe2f685748b5efb13c1",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "09/02/15 12:17 PM",
      "commitNameOld": "ab934e85947dcf2092050023909dd81ae274ff45",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n-    String oldTopoStr \u003d this.toString();\n-    if( node instanceof InnerNode ) {\n-      throw new IllegalArgumentException(\n-        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n-    }\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n+      String oldTopoStr \u003d this.toString();\n+      if( node instanceof InnerNode ) {\n+        throw new IllegalArgumentException(\n+          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n+      }\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n         LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n             \" at depth \" + newDepth + \" to topology:\\n\" + oldTopoStr);\n         throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n             \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           }\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      String oldTopoStr \u003d this.toString();\n      if( node instanceof InnerNode ) {\n        throw new IllegalArgumentException(\n          \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n      }\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n            \" at depth \" + newDepth + \" to topology:\\n\" + oldTopoStr);\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "b6c7de68bc850ee5fa144eb3ea8d304065dbf4ea": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9673. NetworkTopology: When a node cannot be added, print out its location for diagnostic purposes\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1497176 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/06/13 6:22 PM",
      "commitName": "b6c7de68bc850ee5fa144eb3ea8d304065dbf4ea",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "26/04/13 1:39 PM",
      "commitNameOld": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 61.2,
      "commitsBetweenForRepo": 405,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     String oldTopoStr \u003d this.toString();\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n     int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n       if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n-        LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n-            newDepth + \" to topology:\\n\" + oldTopoStr);\n-        throw new InvalidTopologyException(\"Invalid network topology. \" +\n-            \"You cannot have a rack and a non-rack node at the same \" +\n+        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n+            \" at depth \" + newDepth + \" to topology:\\n\" + oldTopoStr);\n+        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n+            \": You cannot have a rack and a non-rack node at the same \" +\n             \"level of the network topology.\");\n       }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           }\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    String oldTopoStr \u003d this.toString();\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node \" + NodeBase.getPath(node) +\n            \" at depth \" + newDepth + \" to topology:\\n\" + oldTopoStr);\n        throw new InvalidTopologyException(\"Failed to add \" + NodeBase.getPath(node) +\n            \": You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "64741f46352f25743bfb77f804a06970d355a177": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4521. Invalid network toploogies should not be cached. Contributed by Colin Patrick McCabe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1457878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 10:20 AM",
      "commitName": "64741f46352f25743bfb77f804a06970d355a177",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "28/11/12 11:41 AM",
      "commitNameOld": "833b928adf40ccf6385d665bdef8d5fca8a2f480",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 109.9,
      "commitsBetweenForRepo": 471,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     String oldTopoStr \u003d this.toString();\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n+    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n     netlock.writeLock().lock();\n     try {\n+      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n+        LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n+            newDepth + \" to topology:\\n\" + oldTopoStr);\n+        throw new InvalidTopologyException(\"Invalid network topology. \" +\n+            \"You cannot have a rack and a non-rack node at the same \" +\n+            \"level of the network topology.\");\n+      }\n       Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n-          } else {\n-            if (depthOfAllLeaves !\u003d node.getLevel()) {\n-              LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n-                  node.getLevel() + \" to topology:\\n\" + oldTopoStr);\n-              throw new InvalidTopologyException(\"Invalid network topology. \" +\n-                  \"You cannot have a rack and a non-rack node at the same \" +\n-                  \"level of the network topology.\");\n-            }\n           }\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    String oldTopoStr \u003d this.toString();\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    int newDepth \u003d NodeBase.locationToDepth(node.getNetworkLocation()) + 1;\n    netlock.writeLock().lock();\n    try {\n      if ((depthOfAllLeaves !\u003d -1) \u0026\u0026 (depthOfAllLeaves !\u003d newDepth)) {\n        LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n            newDepth + \" to topology:\\n\" + oldTopoStr);\n        throw new InvalidTopologyException(\"Invalid network topology. \" +\n            \"You cannot have a rack and a non-rack node at the same \" +\n            \"level of the network topology.\");\n      }\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "415ce38b82fd173790fdbf3760a7846a41a0579d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8469. Make NetworkTopology class pluggable.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1347867 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/12 7:29 PM",
      "commitName": "415ce38b82fd173790fdbf3760a7846a41a0579d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/04/12 9:37 AM",
      "commitNameOld": "f01ede227f0594388afb855234b0c4fbd250be26",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 56.41,
      "commitsBetweenForRepo": 329,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     String oldTopoStr \u003d this.toString();\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n     netlock.writeLock().lock();\n     try {\n-      Node rack \u003d getNode(node.getNetworkLocation());\n+      Node rack \u003d getNodeForNetworkLocation(node);\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n         if (!(node instanceof InnerNode)) {\n           if (depthOfAllLeaves \u003d\u003d -1) {\n             depthOfAllLeaves \u003d node.getLevel();\n           } else {\n             if (depthOfAllLeaves !\u003d node.getLevel()) {\n               LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n                   node.getLevel() + \" to topology:\\n\" + oldTopoStr);\n               throw new InvalidTopologyException(\"Invalid network topology. \" +\n                   \"You cannot have a rack and a non-rack node at the same \" +\n                   \"level of the network topology.\");\n             }\n           }\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    String oldTopoStr \u003d this.toString();\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNodeForNetworkLocation(node);\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          } else {\n            if (depthOfAllLeaves !\u003d node.getLevel()) {\n              LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n                  node.getLevel() + \" to topology:\\n\" + oldTopoStr);\n              throw new InvalidTopologyException(\"Invalid network topology. \" +\n                  \"You cannot have a rack and a non-rack node at the same \" +\n                  \"level of the network topology.\");\n            }\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "b5a8ccb75b25c90e54ccf8c1834b4b12e6261f05": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8159. NetworkTopology: getLeaf should check for invalid topologies. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/12 3:43 PM",
      "commitName": "b5a8ccb75b25c90e54ccf8c1834b4b12e6261f05",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "27/10/11 9:29 AM",
      "commitNameOld": "a3c0a0e799688b790bacf55b5d8f7b6b70e9cc5f",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 147.26,
      "commitsBetweenForRepo": 1031,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,41 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n+    String oldTopoStr \u003d this.toString();\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n     netlock.writeLock().lock();\n     try {\n       Node rack \u003d getNode(node.getNetworkLocation());\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n+        if (!(node instanceof InnerNode)) {\n+          if (depthOfAllLeaves \u003d\u003d -1) {\n+            depthOfAllLeaves \u003d node.getLevel();\n+          } else {\n+            if (depthOfAllLeaves !\u003d node.getLevel()) {\n+              LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n+                  node.getLevel() + \" to topology:\\n\" + oldTopoStr);\n+              throw new InvalidTopologyException(\"Invalid network topology. \" +\n+                  \"You cannot have a rack and a non-rack node at the same \" +\n+                  \"level of the network topology.\");\n+            }\n+          }\n+        }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    String oldTopoStr \u003d this.toString();\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNode(node.getNetworkLocation());\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n        if (!(node instanceof InnerNode)) {\n          if (depthOfAllLeaves \u003d\u003d -1) {\n            depthOfAllLeaves \u003d node.getLevel();\n          } else {\n            if (depthOfAllLeaves !\u003d node.getLevel()) {\n              LOG.error(\"Error: can\u0027t add leaf node at depth \" +\n                  node.getLevel() + \" to topology:\\n\" + oldTopoStr);\n              throw new InvalidTopologyException(\"Invalid network topology. \" +\n                  \"You cannot have a rack and a non-rack node at the same \" +\n                  \"level of the network topology.\");\n            }\n          }\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNode(node.getNetworkLocation());\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNode(node.getNetworkLocation());\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNode(node.getNetworkLocation());\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 78.05,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n     netlock.writeLock().lock();\n     try {\n       Node rack \u003d getNode(node.getNetworkLocation());\n       if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n                                            + node.toString() \n                                            + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           numOfRacks++;\n         }\n       }\n-      LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n+      }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNode(node.getNetworkLocation());\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "src/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,25 @@\n+  public void add(Node node) {\n+    if (node\u003d\u003dnull) return;\n+    if( node instanceof InnerNode ) {\n+      throw new IllegalArgumentException(\n+        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n+    }\n+    netlock.writeLock().lock();\n+    try {\n+      Node rack \u003d getNode(node.getNetworkLocation());\n+      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n+        throw new IllegalArgumentException(\"Unexpected data node \" \n+                                           + node.toString() \n+                                           + \" at an illegal network location\");\n+      }\n+      if (clusterMap.add(node)) {\n+        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n+        if (rack \u003d\u003d null) {\n+          numOfRacks++;\n+        }\n+      }\n+      LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n+    } finally {\n+      netlock.writeLock().unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d getNode(node.getNetworkLocation());\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n                                           + node.toString() \n                                           + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \"+NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          numOfRacks++;\n        }\n      }\n      LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "src/java/org/apache/hadoop/net/NetworkTopology.java"
    }
  }
}