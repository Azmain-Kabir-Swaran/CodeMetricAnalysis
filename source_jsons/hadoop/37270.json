{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "toIntervalMap",
  "functionId": "toIntervalMap",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 243,
  "functionEndLine": 272,
  "numCommitsSeen": 11,
  "timeTaken": 1435,
  "changeHistory": [
    "da1016365aba1cee9c06771ab142d077379f27af",
    "156f24ead00436faad5d4aeef327a546392cd265"
  ],
  "changeHistoryShort": {
    "da1016365aba1cee9c06771ab142d077379f27af": "Ybodychange",
    "156f24ead00436faad5d4aeef327a546392cd265": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "25/07/15 7:39 AM",
      "commitNameOld": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthorOld": "ccurino",
      "daysBetweenCommits": 119.14,
      "commitsBetweenForRepo": 803,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   public Map\u003cReservationInterval, Resource\u003e toIntervalMap() {\n \n     readLock.lock();\n     try {\n       Map\u003cReservationInterval, Resource\u003e allocations \u003d\n           new TreeMap\u003cReservationInterval, Resource\u003e();\n \n       // Empty\n       if (isEmpty()) {\n         return allocations;\n       }\n \n       Map.Entry\u003cLong, Resource\u003e lastEntry \u003d null;\n       for (Map.Entry\u003cLong, Resource\u003e entry : cumulativeCapacity.entrySet()) {\n \n-        if (lastEntry !\u003d null) {\n+        if (lastEntry !\u003d null \u0026\u0026 entry.getValue() !\u003d null) {\n           ReservationInterval interval \u003d\n               new ReservationInterval(lastEntry.getKey(), entry.getKey());\n           Resource resource \u003d lastEntry.getValue();\n \n           allocations.put(interval, resource);\n         }\n \n         lastEntry \u003d entry;\n       }\n       return allocations;\n     } finally {\n       readLock.unlock();\n     }\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cReservationInterval, Resource\u003e toIntervalMap() {\n\n    readLock.lock();\n    try {\n      Map\u003cReservationInterval, Resource\u003e allocations \u003d\n          new TreeMap\u003cReservationInterval, Resource\u003e();\n\n      // Empty\n      if (isEmpty()) {\n        return allocations;\n      }\n\n      Map.Entry\u003cLong, Resource\u003e lastEntry \u003d null;\n      for (Map.Entry\u003cLong, Resource\u003e entry : cumulativeCapacity.entrySet()) {\n\n        if (lastEntry !\u003d null \u0026\u0026 entry.getValue() !\u003d null) {\n          ReservationInterval interval \u003d\n              new ReservationInterval(lastEntry.getKey(), entry.getKey());\n          Resource resource \u003d lastEntry.getValue();\n\n          allocations.put(interval, resource);\n        }\n\n        lastEntry \u003d entry;\n      }\n      return allocations;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "diff": "@@ -0,0 +1,31 @@\n+  public Map\u003cReservationInterval, Resource\u003e toIntervalMap() {\n+\n+    readLock.lock();\n+    try {\n+      Map\u003cReservationInterval, Resource\u003e allocations \u003d\n+          new TreeMap\u003cReservationInterval, Resource\u003e();\n+\n+      // Empty\n+      if (isEmpty()) {\n+        return allocations;\n+      }\n+\n+      Map.Entry\u003cLong, Resource\u003e lastEntry \u003d null;\n+      for (Map.Entry\u003cLong, Resource\u003e entry : cumulativeCapacity.entrySet()) {\n+\n+        if (lastEntry !\u003d null) {\n+          ReservationInterval interval \u003d\n+              new ReservationInterval(lastEntry.getKey(), entry.getKey());\n+          Resource resource \u003d lastEntry.getValue();\n+\n+          allocations.put(interval, resource);\n+        }\n+\n+        lastEntry \u003d entry;\n+      }\n+      return allocations;\n+    } finally {\n+      readLock.unlock();\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cReservationInterval, Resource\u003e toIntervalMap() {\n\n    readLock.lock();\n    try {\n      Map\u003cReservationInterval, Resource\u003e allocations \u003d\n          new TreeMap\u003cReservationInterval, Resource\u003e();\n\n      // Empty\n      if (isEmpty()) {\n        return allocations;\n      }\n\n      Map.Entry\u003cLong, Resource\u003e lastEntry \u003d null;\n      for (Map.Entry\u003cLong, Resource\u003e entry : cumulativeCapacity.entrySet()) {\n\n        if (lastEntry !\u003d null) {\n          ReservationInterval interval \u003d\n              new ReservationInterval(lastEntry.getKey(), entry.getKey());\n          Resource resource \u003d lastEntry.getValue();\n\n          allocations.put(interval, resource);\n        }\n\n        lastEntry \u003d entry;\n      }\n      return allocations;\n    } finally {\n      readLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}