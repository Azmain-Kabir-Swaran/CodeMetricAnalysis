{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WorkloadDriver.java",
  "functionName": "getJobForSubmission",
  "functionId": "getJobForSubmission___baseConf-Configuration__nnURI-String__startTimestampMs-long__mapperClass-Class__? extends WorkloadMapper__?,?,?,?____",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
  "functionStartLine": 140,
  "functionEndLine": 160,
  "numCommitsSeen": 7,
  "timeTaken": 3596,
  "changeHistory": [
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090": "Ymultichange(Yparameterchange,Ybodychange)",
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": "Ymultichange(Yparameterchange,Yexceptionschange)",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
      "commitDate": "01/11/19 9:32 AM",
      "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
      "commitAuthor": "Takanobu Asanuma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
          "commitDate": "01/11/19 9:32 AM",
          "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
          "commitAuthor": "Takanobu Asanuma",
          "commitDateOld": "11/07/19 8:29 AM",
          "commitNameOld": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 113.04,
          "commitsBetweenForRepo": 885,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,21 @@\n   public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n-      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass)\n-      throws IOException, InstantiationException, IllegalAccessException {\n+      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e\n+      mapperClass) throws IOException, InstantiationException,\n+      IllegalAccessException {\n     Configuration conf \u003d new Configuration(baseConf);\n     conf.set(NN_URI, nnURI);\n     conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n \n     String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n         .format(new Date(startTimestampMs));\n     LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n         + startTimeString + \")\");\n     conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n \n     Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n-    job.setOutputFormatClass(NullOutputFormat.class);\n     job.setJarByClass(mapperClass);\n     job.setMapperClass(mapperClass);\n-    job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n-    job.setOutputFormatClass(NullOutputFormat.class);\n-    job.setNumReduceTasks(0);\n-    job.setMapOutputKeyClass(NullWritable.class);\n-    job.setMapOutputValueClass(NullWritable.class);\n-    job.setOutputKeyClass(NullWritable.class);\n-    job.setOutputValueClass(NullWritable.class);\n+    mapperClass.newInstance().configureJob(job);\n \n     return job;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e\n      mapperClass) throws IOException, InstantiationException,\n      IllegalAccessException {\n    Configuration conf \u003d new Configuration(baseConf);\n    conf.set(NN_URI, nnURI);\n    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n\n    String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n        .format(new Date(startTimestampMs));\n    LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n        + startTimeString + \")\");\n    conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n\n    Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n    job.setJarByClass(mapperClass);\n    job.setMapperClass(mapperClass);\n    mapperClass.newInstance().configureJob(job);\n\n    return job;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {
            "oldValue": "[baseConf-Configuration, nnURI-String, startTimestampMs-long, mapperClass-Class\u003c? extends WorkloadMapper\u003c?,?\u003e\u003e]",
            "newValue": "[baseConf-Configuration, nnURI-String, startTimestampMs-long, mapperClass-Class\u003c? extends WorkloadMapper\u003c?,?,?,?\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
          "commitDate": "01/11/19 9:32 AM",
          "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
          "commitAuthor": "Takanobu Asanuma",
          "commitDateOld": "11/07/19 8:29 AM",
          "commitNameOld": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 113.04,
          "commitsBetweenForRepo": 885,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,21 @@\n   public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n-      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass)\n-      throws IOException, InstantiationException, IllegalAccessException {\n+      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e\n+      mapperClass) throws IOException, InstantiationException,\n+      IllegalAccessException {\n     Configuration conf \u003d new Configuration(baseConf);\n     conf.set(NN_URI, nnURI);\n     conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n \n     String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n         .format(new Date(startTimestampMs));\n     LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n         + startTimeString + \")\");\n     conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n \n     Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n-    job.setOutputFormatClass(NullOutputFormat.class);\n     job.setJarByClass(mapperClass);\n     job.setMapperClass(mapperClass);\n-    job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n-    job.setOutputFormatClass(NullOutputFormat.class);\n-    job.setNumReduceTasks(0);\n-    job.setMapOutputKeyClass(NullWritable.class);\n-    job.setMapOutputValueClass(NullWritable.class);\n-    job.setOutputKeyClass(NullWritable.class);\n-    job.setOutputValueClass(NullWritable.class);\n+    mapperClass.newInstance().configureJob(job);\n \n     return job;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e\n      mapperClass) throws IOException, InstantiationException,\n      IllegalAccessException {\n    Configuration conf \u003d new Configuration(baseConf);\n    conf.set(NN_URI, nnURI);\n    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n\n    String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n        .format(new Date(startTimestampMs));\n    LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n        + startTimeString + \")\");\n    conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n\n    Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n    job.setJarByClass(mapperClass);\n    job.setMapperClass(mapperClass);\n    mapperClass.newInstance().configureJob(job);\n\n    return job;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {}
        }
      ]
    },
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange)",
      "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
      "commitDate": "11/07/19 8:29 AM",
      "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
          "commitDate": "11/07/19 8:29 AM",
          "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "25/06/19 8:07 AM",
          "commitNameOld": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 16.02,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n   public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n-      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003e mapperClass)\n-      throws IOException, ClassNotFoundException, InstantiationException,\n-      IllegalAccessException {\n+      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass)\n+      throws IOException, InstantiationException, IllegalAccessException {\n     Configuration conf \u003d new Configuration(baseConf);\n     conf.set(NN_URI, nnURI);\n     conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n \n     String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n         .format(new Date(startTimestampMs));\n     LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n         + startTimeString + \")\");\n     conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n \n     Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n     job.setOutputFormatClass(NullOutputFormat.class);\n     job.setJarByClass(mapperClass);\n     job.setMapperClass(mapperClass);\n     job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n     job.setOutputFormatClass(NullOutputFormat.class);\n     job.setNumReduceTasks(0);\n     job.setMapOutputKeyClass(NullWritable.class);\n     job.setMapOutputValueClass(NullWritable.class);\n     job.setOutputKeyClass(NullWritable.class);\n     job.setOutputValueClass(NullWritable.class);\n \n     return job;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass)\n      throws IOException, InstantiationException, IllegalAccessException {\n    Configuration conf \u003d new Configuration(baseConf);\n    conf.set(NN_URI, nnURI);\n    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n\n    String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n        .format(new Date(startTimestampMs));\n    LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n        + startTimeString + \")\");\n    conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n\n    Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n    job.setOutputFormatClass(NullOutputFormat.class);\n    job.setJarByClass(mapperClass);\n    job.setMapperClass(mapperClass);\n    job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n    job.setOutputFormatClass(NullOutputFormat.class);\n    job.setNumReduceTasks(0);\n    job.setMapOutputKeyClass(NullWritable.class);\n    job.setMapOutputValueClass(NullWritable.class);\n    job.setOutputKeyClass(NullWritable.class);\n    job.setOutputValueClass(NullWritable.class);\n\n    return job;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {
            "oldValue": "[baseConf-Configuration, nnURI-String, startTimestampMs-long, mapperClass-Class\u003c? extends WorkloadMapper\u003e]",
            "newValue": "[baseConf-Configuration, nnURI-String, startTimestampMs-long, mapperClass-Class\u003c? extends WorkloadMapper\u003c?,?\u003e\u003e]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
          "commitDate": "11/07/19 8:29 AM",
          "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "25/06/19 8:07 AM",
          "commitNameOld": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
          "commitAuthorOld": "Erik Krogen",
          "daysBetweenCommits": 16.02,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n   public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n-      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003e mapperClass)\n-      throws IOException, ClassNotFoundException, InstantiationException,\n-      IllegalAccessException {\n+      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass)\n+      throws IOException, InstantiationException, IllegalAccessException {\n     Configuration conf \u003d new Configuration(baseConf);\n     conf.set(NN_URI, nnURI);\n     conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n \n     String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n         .format(new Date(startTimestampMs));\n     LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n         + startTimeString + \")\");\n     conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n \n     Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n     job.setOutputFormatClass(NullOutputFormat.class);\n     job.setJarByClass(mapperClass);\n     job.setMapperClass(mapperClass);\n     job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n     job.setOutputFormatClass(NullOutputFormat.class);\n     job.setNumReduceTasks(0);\n     job.setMapOutputKeyClass(NullWritable.class);\n     job.setMapOutputValueClass(NullWritable.class);\n     job.setOutputKeyClass(NullWritable.class);\n     job.setOutputValueClass(NullWritable.class);\n \n     return job;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass)\n      throws IOException, InstantiationException, IllegalAccessException {\n    Configuration conf \u003d new Configuration(baseConf);\n    conf.set(NN_URI, nnURI);\n    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n\n    String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n        .format(new Date(startTimestampMs));\n    LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n        + startTimeString + \")\");\n    conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n\n    Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n    job.setOutputFormatClass(NullOutputFormat.class);\n    job.setJarByClass(mapperClass);\n    job.setMapperClass(mapperClass);\n    job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n    job.setOutputFormatClass(NullOutputFormat.class);\n    job.setNumReduceTasks(0);\n    job.setMapOutputKeyClass(NullWritable.class);\n    job.setMapOutputValueClass(NullWritable.class);\n    job.setOutputKeyClass(NullWritable.class);\n    job.setOutputValueClass(NullWritable.class);\n\n    return job;\n  }",
          "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
          "extendedDetails": {
            "oldValue": "[IOException, ClassNotFoundException, InstantiationException, IllegalAccessException]",
            "newValue": "[IOException, InstantiationException, IllegalAccessException]"
          }
        }
      ]
    },
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,28 @@\n+  public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n+      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003e mapperClass)\n+      throws IOException, ClassNotFoundException, InstantiationException,\n+      IllegalAccessException {\n+    Configuration conf \u003d new Configuration(baseConf);\n+    conf.set(NN_URI, nnURI);\n+    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n+\n+    String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n+        .format(new Date(startTimestampMs));\n+    LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n+        + startTimeString + \")\");\n+    conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n+\n+    Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n+    job.setOutputFormatClass(NullOutputFormat.class);\n+    job.setJarByClass(mapperClass);\n+    job.setMapperClass(mapperClass);\n+    job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n+    job.setOutputFormatClass(NullOutputFormat.class);\n+    job.setNumReduceTasks(0);\n+    job.setMapOutputKeyClass(NullWritable.class);\n+    job.setMapOutputValueClass(NullWritable.class);\n+    job.setOutputKeyClass(NullWritable.class);\n+    job.setOutputValueClass(NullWritable.class);\n+\n+    return job;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Job getJobForSubmission(Configuration baseConf, String nnURI,\n      long startTimestampMs, Class\u003c? extends WorkloadMapper\u003e mapperClass)\n      throws IOException, ClassNotFoundException, InstantiationException,\n      IllegalAccessException {\n    Configuration conf \u003d new Configuration(baseConf);\n    conf.set(NN_URI, nnURI);\n    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE, false);\n\n    String startTimeString \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss z\")\n        .format(new Date(startTimestampMs));\n    LOG.info(\"The workload will start at \" + startTimestampMs + \" ms (\"\n        + startTimeString + \")\");\n    conf.setLong(START_TIMESTAMP_MS, startTimestampMs);\n\n    Job job \u003d Job.getInstance(conf, \"Dynamometer Workload Driver\");\n    job.setOutputFormatClass(NullOutputFormat.class);\n    job.setJarByClass(mapperClass);\n    job.setMapperClass(mapperClass);\n    job.setInputFormatClass(mapperClass.newInstance().getInputFormat(conf));\n    job.setOutputFormatClass(NullOutputFormat.class);\n    job.setNumReduceTasks(0);\n    job.setMapOutputKeyClass(NullWritable.class);\n    job.setMapOutputValueClass(NullWritable.class);\n    job.setOutputKeyClass(NullWritable.class);\n    job.setOutputValueClass(NullWritable.class);\n\n    return job;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java"
    }
  }
}