{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultOOMHandler.java",
  "functionName": "isContainerOutOfLimit",
  "functionId": "isContainerOutOfLimit___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java",
  "functionStartLine": 78,
  "functionEndLine": 105,
  "numCommitsSeen": 6,
  "timeTaken": 2783,
  "changeHistory": [
    "d5eca1a6a0e3939eead6711805b7a61c364d254b",
    "d9964799544eefcf424fcc178d987525f5356cdf"
  ],
  "changeHistoryShort": {
    "d5eca1a6a0e3939eead6711805b7a61c364d254b": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "d9964799544eefcf424fcc178d987525f5356cdf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5eca1a6a0e3939eead6711805b7a61c364d254b": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.\n",
      "commitDate": "07/06/18 4:38 PM",
      "commitName": "d5eca1a6a0e3939eead6711805b7a61c364d254b",
      "commitAuthor": "Miklos Szegedi",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.\n",
          "commitDate": "07/06/18 4:38 PM",
          "commitName": "d5eca1a6a0e3939eead6711805b7a61c364d254b",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "23/05/18 4:35 PM",
          "commitNameOld": "d9964799544eefcf424fcc178d987525f5356cdf",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.0,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,28 @@\n-  private boolean killContainerIfOOM(Container container, String fileName) {\n+  private boolean isContainerOutOfLimit(Container container) {\n+    boolean outOfLimit \u003d false;\n+\n     String value \u003d null;\n     try {\n       value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n-          container.getContainerId().toString(),\n-          fileName);\n+          container.getContainerId().toString(), memoryStatFile);\n       long usage \u003d Long.parseLong(value);\n       long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n \n       // Check if the container has exceeded its limits.\n       if (usage \u003e request) {\n-        // Kill the container\n-        // We could call the regular cleanup but that sends a\n-        // SIGTERM first that cannot be handled by frozen processes.\n-        // Walk through the cgroup\n-        // tasks file and kill all processes in it\n-        sigKill(container);\n+        outOfLimit \u003d true;\n         String message \u003d String.format(\n-            \"Container %s was killed by elastic cgroups OOM handler using %d \" +\n+            \"Container %s is out of its limits, using %d \" +\n                 \"when requested only %d\",\n             container.getContainerId(), usage, request);\n         LOG.warn(message);\n-        return true;\n       }\n     } catch (ResourceHandlerException ex) {\n       LOG.warn(String.format(\"Could not access memory resource for %s\",\n           container.getContainerId()), ex);\n     } catch (NumberFormatException ex) {\n-      LOG.warn(String.format(\"Could not parse %s in %s\",\n-          value, container.getContainerId()));\n+      LOG.warn(String.format(\"Could not parse %s in %s\", value,\n+          container.getContainerId()));\n     }\n-    return false;\n+    return outOfLimit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isContainerOutOfLimit(Container container) {\n    boolean outOfLimit \u003d false;\n\n    String value \u003d null;\n    try {\n      value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n          container.getContainerId().toString(), memoryStatFile);\n      long usage \u003d Long.parseLong(value);\n      long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n\n      // Check if the container has exceeded its limits.\n      if (usage \u003e request) {\n        outOfLimit \u003d true;\n        String message \u003d String.format(\n            \"Container %s is out of its limits, using %d \" +\n                \"when requested only %d\",\n            container.getContainerId(), usage, request);\n        LOG.warn(message);\n      }\n    } catch (ResourceHandlerException ex) {\n      LOG.warn(String.format(\"Could not access memory resource for %s\",\n          container.getContainerId()), ex);\n    } catch (NumberFormatException ex) {\n      LOG.warn(String.format(\"Could not parse %s in %s\", value,\n          container.getContainerId()));\n    }\n    return outOfLimit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java",
          "extendedDetails": {
            "oldValue": "killContainerIfOOM",
            "newValue": "isContainerOutOfLimit"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.\n",
          "commitDate": "07/06/18 4:38 PM",
          "commitName": "d5eca1a6a0e3939eead6711805b7a61c364d254b",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "23/05/18 4:35 PM",
          "commitNameOld": "d9964799544eefcf424fcc178d987525f5356cdf",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.0,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,28 @@\n-  private boolean killContainerIfOOM(Container container, String fileName) {\n+  private boolean isContainerOutOfLimit(Container container) {\n+    boolean outOfLimit \u003d false;\n+\n     String value \u003d null;\n     try {\n       value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n-          container.getContainerId().toString(),\n-          fileName);\n+          container.getContainerId().toString(), memoryStatFile);\n       long usage \u003d Long.parseLong(value);\n       long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n \n       // Check if the container has exceeded its limits.\n       if (usage \u003e request) {\n-        // Kill the container\n-        // We could call the regular cleanup but that sends a\n-        // SIGTERM first that cannot be handled by frozen processes.\n-        // Walk through the cgroup\n-        // tasks file and kill all processes in it\n-        sigKill(container);\n+        outOfLimit \u003d true;\n         String message \u003d String.format(\n-            \"Container %s was killed by elastic cgroups OOM handler using %d \" +\n+            \"Container %s is out of its limits, using %d \" +\n                 \"when requested only %d\",\n             container.getContainerId(), usage, request);\n         LOG.warn(message);\n-        return true;\n       }\n     } catch (ResourceHandlerException ex) {\n       LOG.warn(String.format(\"Could not access memory resource for %s\",\n           container.getContainerId()), ex);\n     } catch (NumberFormatException ex) {\n-      LOG.warn(String.format(\"Could not parse %s in %s\",\n-          value, container.getContainerId()));\n+      LOG.warn(String.format(\"Could not parse %s in %s\", value,\n+          container.getContainerId()));\n     }\n-    return false;\n+    return outOfLimit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isContainerOutOfLimit(Container container) {\n    boolean outOfLimit \u003d false;\n\n    String value \u003d null;\n    try {\n      value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n          container.getContainerId().toString(), memoryStatFile);\n      long usage \u003d Long.parseLong(value);\n      long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n\n      // Check if the container has exceeded its limits.\n      if (usage \u003e request) {\n        outOfLimit \u003d true;\n        String message \u003d String.format(\n            \"Container %s is out of its limits, using %d \" +\n                \"when requested only %d\",\n            container.getContainerId(), usage, request);\n        LOG.warn(message);\n      }\n    } catch (ResourceHandlerException ex) {\n      LOG.warn(String.format(\"Could not access memory resource for %s\",\n          container.getContainerId()), ex);\n    } catch (NumberFormatException ex) {\n      LOG.warn(String.format(\"Could not parse %s in %s\", value,\n          container.getContainerId()));\n    }\n    return outOfLimit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java",
          "extendedDetails": {
            "oldValue": "[container-Container, fileName-String]",
            "newValue": "[container-Container]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6677. Preempt opportunistic containers when root container cgroup goes over memory limit. Contributed by Haibo Chen.\n",
          "commitDate": "07/06/18 4:38 PM",
          "commitName": "d5eca1a6a0e3939eead6711805b7a61c364d254b",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "23/05/18 4:35 PM",
          "commitNameOld": "d9964799544eefcf424fcc178d987525f5356cdf",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.0,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,28 @@\n-  private boolean killContainerIfOOM(Container container, String fileName) {\n+  private boolean isContainerOutOfLimit(Container container) {\n+    boolean outOfLimit \u003d false;\n+\n     String value \u003d null;\n     try {\n       value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n-          container.getContainerId().toString(),\n-          fileName);\n+          container.getContainerId().toString(), memoryStatFile);\n       long usage \u003d Long.parseLong(value);\n       long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n \n       // Check if the container has exceeded its limits.\n       if (usage \u003e request) {\n-        // Kill the container\n-        // We could call the regular cleanup but that sends a\n-        // SIGTERM first that cannot be handled by frozen processes.\n-        // Walk through the cgroup\n-        // tasks file and kill all processes in it\n-        sigKill(container);\n+        outOfLimit \u003d true;\n         String message \u003d String.format(\n-            \"Container %s was killed by elastic cgroups OOM handler using %d \" +\n+            \"Container %s is out of its limits, using %d \" +\n                 \"when requested only %d\",\n             container.getContainerId(), usage, request);\n         LOG.warn(message);\n-        return true;\n       }\n     } catch (ResourceHandlerException ex) {\n       LOG.warn(String.format(\"Could not access memory resource for %s\",\n           container.getContainerId()), ex);\n     } catch (NumberFormatException ex) {\n-      LOG.warn(String.format(\"Could not parse %s in %s\",\n-          value, container.getContainerId()));\n+      LOG.warn(String.format(\"Could not parse %s in %s\", value,\n+          container.getContainerId()));\n     }\n-    return false;\n+    return outOfLimit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isContainerOutOfLimit(Container container) {\n    boolean outOfLimit \u003d false;\n\n    String value \u003d null;\n    try {\n      value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n          container.getContainerId().toString(), memoryStatFile);\n      long usage \u003d Long.parseLong(value);\n      long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n\n      // Check if the container has exceeded its limits.\n      if (usage \u003e request) {\n        outOfLimit \u003d true;\n        String message \u003d String.format(\n            \"Container %s is out of its limits, using %d \" +\n                \"when requested only %d\",\n            container.getContainerId(), usage, request);\n        LOG.warn(message);\n      }\n    } catch (ResourceHandlerException ex) {\n      LOG.warn(String.format(\"Could not access memory resource for %s\",\n          container.getContainerId()), ex);\n    } catch (NumberFormatException ex) {\n      LOG.warn(String.format(\"Could not parse %s in %s\", value,\n          container.getContainerId()));\n    }\n    return outOfLimit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "d9964799544eefcf424fcc178d987525f5356cdf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4599. Set OOM control for memory cgroups. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "23/05/18 4:35 PM",
      "commitName": "d9964799544eefcf424fcc178d987525f5356cdf",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,33 @@\n+  private boolean killContainerIfOOM(Container container, String fileName) {\n+    String value \u003d null;\n+    try {\n+      value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n+          container.getContainerId().toString(),\n+          fileName);\n+      long usage \u003d Long.parseLong(value);\n+      long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n+\n+      // Check if the container has exceeded its limits.\n+      if (usage \u003e request) {\n+        // Kill the container\n+        // We could call the regular cleanup but that sends a\n+        // SIGTERM first that cannot be handled by frozen processes.\n+        // Walk through the cgroup\n+        // tasks file and kill all processes in it\n+        sigKill(container);\n+        String message \u003d String.format(\n+            \"Container %s was killed by elastic cgroups OOM handler using %d \" +\n+                \"when requested only %d\",\n+            container.getContainerId(), usage, request);\n+        LOG.warn(message);\n+        return true;\n+      }\n+    } catch (ResourceHandlerException ex) {\n+      LOG.warn(String.format(\"Could not access memory resource for %s\",\n+          container.getContainerId()), ex);\n+    } catch (NumberFormatException ex) {\n+      LOG.warn(String.format(\"Could not parse %s in %s\",\n+          value, container.getContainerId()));\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean killContainerIfOOM(Container container, String fileName) {\n    String value \u003d null;\n    try {\n      value \u003d cgroups.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,\n          container.getContainerId().toString(),\n          fileName);\n      long usage \u003d Long.parseLong(value);\n      long request \u003d container.getResource().getMemorySize() * 1024 * 1024;\n\n      // Check if the container has exceeded its limits.\n      if (usage \u003e request) {\n        // Kill the container\n        // We could call the regular cleanup but that sends a\n        // SIGTERM first that cannot be handled by frozen processes.\n        // Walk through the cgroup\n        // tasks file and kill all processes in it\n        sigKill(container);\n        String message \u003d String.format(\n            \"Container %s was killed by elastic cgroups OOM handler using %d \" +\n                \"when requested only %d\",\n            container.getContainerId(), usage, request);\n        LOG.warn(message);\n        return true;\n      }\n    } catch (ResourceHandlerException ex) {\n      LOG.warn(String.format(\"Could not access memory resource for %s\",\n          container.getContainerId()), ex);\n    } catch (NumberFormatException ex) {\n      LOG.warn(String.format(\"Could not parse %s in %s\",\n          value, container.getContainerId()));\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/DefaultOOMHandler.java"
    }
  }
}