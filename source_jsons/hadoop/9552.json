{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReportCommand.java",
  "functionName": "handleNodeReport",
  "functionId": "handleNodeReport___cmd-CommandLine(modifiers-final)__result-TextStringBuilder__nodeFormat-String(modifiers-final)__volumeFormat-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
  "functionStartLine": 134,
  "functionEndLine": 173,
  "numCommitsSeen": 23,
  "timeTaken": 2000,
  "changeHistory": [
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
    "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4",
    "8a93f45a80932a1ef62a6c20551e8cab95888fee",
    "35c5943b8ba394191405555cdfc5e6127053ee97",
    "9f29f423e426e2d42e650cbed88e46c1c29a2a63",
    "7b23ad1ef76739bc04374aefe6e8e88c23449653",
    "b502102bb1a1f416f43dd1227886c57ccad70fcc"
  ],
  "changeHistoryShort": {
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": "Yparameterchange",
    "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4": "Ybodychange",
    "8a93f45a80932a1ef62a6c20551e8cab95888fee": "Ybodychange",
    "35c5943b8ba394191405555cdfc5e6127053ee97": "Ybodychange",
    "9f29f423e426e2d42e650cbed88e46c1c29a2a63": "Ymultichange(Yexceptionschange,Ybodychange)",
    "7b23ad1ef76739bc04374aefe6e8e88c23449653": "Ybodychange",
    "b502102bb1a1f416f43dd1227886c57ccad70fcc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88625f5cd90766136a9ebd76a8d84b45a37e6c99": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-15531. Use commons-text instead of commons-lang in some classes to fix deprecation warnings. Contributed by Takanobu Asanuma.\n",
      "commitDate": "13/07/18 8:42 AM",
      "commitName": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/06/18 10:17 AM",
      "commitNameOld": "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.93,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n+  private void handleNodeReport(final CommandLine cmd, TextStringBuilder result,\n       final String nodeFormat, final String volumeFormat) throws Exception {\n     String outputLine \u003d \"\";\n     /*\n      * get value that identifies DataNode(s) from command line, it could be\n      * UUID, IP address or host name.\n      */\n     final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n        * Reporting volume information for specific DataNode(s)\n        */\n       outputLine \u003d String.format(\n           \"Reporting volume information for DataNode(s). \"\n           + \"These DataNode(s) are parsed from \u0027%s\u0027.\", nodeVal);\n \n       recordOutput(result, outputLine);\n \n       List\u003cDiskBalancerDataNode\u003e dbdns \u003d Lists.newArrayList();\n       try {\n         dbdns \u003d getNodes(nodeVal);\n       } catch (DiskBalancerException e) {\n         // If there are some invalid nodes that contained in nodeVal,\n         // the exception will be threw.\n         recordOutput(result, e.getMessage());\n         return;\n       }\n \n       if (!dbdns.isEmpty()) {\n         for (DiskBalancerDataNode node : dbdns) {\n           recordNodeReport(result, node, nodeFormat, volumeFormat);\n           result.append(System.lineSeparator());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNodeReport(final CommandLine cmd, TextStringBuilder result,\n      final String nodeFormat, final String volumeFormat) throws Exception {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies DataNode(s) from command line, it could be\n     * UUID, IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for specific DataNode(s)\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode(s). \"\n          + \"These DataNode(s) are parsed from \u0027%s\u0027.\", nodeVal);\n\n      recordOutput(result, outputLine);\n\n      List\u003cDiskBalancerDataNode\u003e dbdns \u003d Lists.newArrayList();\n      try {\n        dbdns \u003d getNodes(nodeVal);\n      } catch (DiskBalancerException e) {\n        // If there are some invalid nodes that contained in nodeVal,\n        // the exception will be threw.\n        recordOutput(result, e.getMessage());\n        return;\n      }\n\n      if (!dbdns.isEmpty()) {\n        for (DiskBalancerDataNode node : dbdns) {\n          recordNodeReport(result, node, nodeFormat, volumeFormat);\n          result.append(System.lineSeparator());\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {
        "oldValue": "[cmd-CommandLine(modifiers-final), result-StrBuilder, nodeFormat-String(modifiers-final), volumeFormat-String(modifiers-final)]",
        "newValue": "[cmd-CommandLine(modifiers-final), result-TextStringBuilder, nodeFormat-String(modifiers-final), volumeFormat-String(modifiers-final)]"
      }
    },
    "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11358. DiskBalancer: Report command supports reading nodes from host file. Contributed by Yiqun Lin.\n",
      "commitDate": "21/03/17 2:44 AM",
      "commitName": "3b908f71c5825a8fd6ded2a6108eb4c6c4a5b9c4",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "14/10/16 5:07 PM",
      "commitNameOld": "30bb1970cc27c1345871a35bcf1220e520c1804b",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 157.4,
      "commitsBetweenForRepo": 957,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n       final String nodeFormat, final String volumeFormat) throws Exception {\n     String outputLine \u003d \"\";\n     /*\n      * get value that identifies DataNode(s) from command line, it could be\n      * UUID, IP address or host name.\n      */\n     final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n        * Reporting volume information for specific DataNode(s)\n        */\n       outputLine \u003d String.format(\n-          \"Reporting volume information for DataNode(s) \u0027%s\u0027.\", nodeVal);\n+          \"Reporting volume information for DataNode(s). \"\n+          + \"These DataNode(s) are parsed from \u0027%s\u0027.\", nodeVal);\n+\n       recordOutput(result, outputLine);\n \n       List\u003cDiskBalancerDataNode\u003e dbdns \u003d Lists.newArrayList();\n       try {\n         dbdns \u003d getNodes(nodeVal);\n       } catch (DiskBalancerException e) {\n         // If there are some invalid nodes that contained in nodeVal,\n         // the exception will be threw.\n         recordOutput(result, e.getMessage());\n         return;\n       }\n \n       if (!dbdns.isEmpty()) {\n         for (DiskBalancerDataNode node : dbdns) {\n           recordNodeReport(result, node, nodeFormat, volumeFormat);\n           result.append(System.lineSeparator());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) throws Exception {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies DataNode(s) from command line, it could be\n     * UUID, IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for specific DataNode(s)\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode(s). \"\n          + \"These DataNode(s) are parsed from \u0027%s\u0027.\", nodeVal);\n\n      recordOutput(result, outputLine);\n\n      List\u003cDiskBalancerDataNode\u003e dbdns \u003d Lists.newArrayList();\n      try {\n        dbdns \u003d getNodes(nodeVal);\n      } catch (DiskBalancerException e) {\n        // If there are some invalid nodes that contained in nodeVal,\n        // the exception will be threw.\n        recordOutput(result, e.getMessage());\n        return;\n      }\n\n      if (!dbdns.isEmpty()) {\n        for (DiskBalancerDataNode node : dbdns) {\n          recordNodeReport(result, node, nodeFormat, volumeFormat);\n          result.append(System.lineSeparator());\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {}
    },
    "8a93f45a80932a1ef62a6c20551e8cab95888fee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10821. DiskBalancer: Report command support with multiple nodes. Contributed by Yiqun Lin.\n",
      "commitDate": "12/09/16 3:45 PM",
      "commitName": "8a93f45a80932a1ef62a6c20551e8cab95888fee",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "08/09/16 7:26 PM",
      "commitNameOld": "35c5943b8ba394191405555cdfc5e6127053ee97",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,38 @@\n   private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n       final String nodeFormat, final String volumeFormat) throws Exception {\n     String outputLine \u003d \"\";\n     /*\n-     * get value that identifies a DataNode from command line, it could be UUID,\n-     * IP address or host name.\n+     * get value that identifies DataNode(s) from command line, it could be\n+     * UUID, IP address or host name.\n      */\n     final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n-       * Reporting volume information for a specific DataNode\n+       * Reporting volume information for specific DataNode(s)\n        */\n       outputLine \u003d String.format(\n-          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n+          \"Reporting volume information for DataNode(s) \u0027%s\u0027.\", nodeVal);\n       recordOutput(result, outputLine);\n \n-      final String trueStr \u003d \"True\";\n-      final String falseStr \u003d \"False\";\n-      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n-      // get storage path of datanode\n-      populatePathNames(dbdn);\n+      List\u003cDiskBalancerDataNode\u003e dbdns \u003d Lists.newArrayList();\n+      try {\n+        dbdns \u003d getNodes(nodeVal);\n+      } catch (DiskBalancerException e) {\n+        // If there are some invalid nodes that contained in nodeVal,\n+        // the exception will be threw.\n+        recordOutput(result, e.getMessage());\n+        return;\n+      }\n \n-      if (dbdn \u003d\u003d null) {\n-        outputLine \u003d String.format(\n-            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n-        recordOutput(result, outputLine);\n-      } else {\n-        result.appendln(String.format(nodeFormat,\n-            dbdn.getDataNodeName(),\n-            dbdn.getDataNodeIP(),\n-            dbdn.getDataNodePort(),\n-            dbdn.getDataNodeUUID(),\n-            dbdn.getVolumeCount(),\n-            dbdn.getNodeDataDensity()));\n-\n-        List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n-        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n-          for (DiskBalancerVolume vol : vset.getVolumes()) {\n-            volumeList.add(String.format(volumeFormat,\n-                vol.getStorageType(),\n-                vol.getPath(),\n-                vol.getUsedRatio(),\n-                vol.getUsed(),\n-                vol.getCapacity(),\n-                vol.getFreeRatio(),\n-                vol.getFreeSpace(),\n-                vol.getCapacity(),\n-                vol.isFailed() ? trueStr : falseStr,\n-                vol.isReadOnly() ? trueStr : falseStr,\n-                vol.isSkip() ? trueStr : falseStr,\n-                vol.isTransient() ? trueStr : falseStr));\n-          }\n+      if (!dbdns.isEmpty()) {\n+        for (DiskBalancerDataNode node : dbdns) {\n+          recordNodeReport(result, node, nodeFormat, volumeFormat);\n+          result.append(System.lineSeparator());\n         }\n-\n-        Collections.sort(volumeList);\n-        result.appendln(\n-            StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) throws Exception {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies DataNode(s) from command line, it could be\n     * UUID, IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for specific DataNode(s)\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode(s) \u0027%s\u0027.\", nodeVal);\n      recordOutput(result, outputLine);\n\n      List\u003cDiskBalancerDataNode\u003e dbdns \u003d Lists.newArrayList();\n      try {\n        dbdns \u003d getNodes(nodeVal);\n      } catch (DiskBalancerException e) {\n        // If there are some invalid nodes that contained in nodeVal,\n        // the exception will be threw.\n        recordOutput(result, e.getMessage());\n        return;\n      }\n\n      if (!dbdns.isEmpty()) {\n        for (DiskBalancerDataNode node : dbdns) {\n          recordNodeReport(result, node, nodeFormat, volumeFormat);\n          result.append(System.lineSeparator());\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {}
    },
    "35c5943b8ba394191405555cdfc5e6127053ee97": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10553. DiskBalancer: Rename Tools/DiskBalancer class to Tools/DiskBalancerCLI. Contributed by Manoj Govindassamy.\n",
      "commitDate": "08/09/16 7:26 PM",
      "commitName": "35c5943b8ba394191405555cdfc5e6127053ee97",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "15/08/16 9:47 AM",
      "commitNameOld": "9f29f423e426e2d42e650cbed88e46c1c29a2a63",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 24.4,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n       final String nodeFormat, final String volumeFormat) throws Exception {\n     String outputLine \u003d \"\";\n     /*\n      * get value that identifies a DataNode from command line, it could be UUID,\n      * IP address or host name.\n      */\n-    final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n+    final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n        * Reporting volume information for a specific DataNode\n        */\n       outputLine \u003d String.format(\n           \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n       recordOutput(result, outputLine);\n \n       final String trueStr \u003d \"True\";\n       final String falseStr \u003d \"False\";\n       DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n       // get storage path of datanode\n       populatePathNames(dbdn);\n \n       if (dbdn \u003d\u003d null) {\n         outputLine \u003d String.format(\n             \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n         recordOutput(result, outputLine);\n       } else {\n         result.appendln(String.format(nodeFormat,\n             dbdn.getDataNodeName(),\n             dbdn.getDataNodeIP(),\n             dbdn.getDataNodePort(),\n             dbdn.getDataNodeUUID(),\n             dbdn.getVolumeCount(),\n             dbdn.getNodeDataDensity()));\n \n         List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n         for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n           for (DiskBalancerVolume vol : vset.getVolumes()) {\n             volumeList.add(String.format(volumeFormat,\n                 vol.getStorageType(),\n                 vol.getPath(),\n                 vol.getUsedRatio(),\n                 vol.getUsed(),\n                 vol.getCapacity(),\n                 vol.getFreeRatio(),\n                 vol.getFreeSpace(),\n                 vol.getCapacity(),\n                 vol.isFailed() ? trueStr : falseStr,\n                 vol.isReadOnly() ? trueStr : falseStr,\n                 vol.isSkip() ? trueStr : falseStr,\n                 vol.isTransient() ? trueStr : falseStr));\n           }\n         }\n \n         Collections.sort(volumeList);\n         result.appendln(\n             StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) throws Exception {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies a DataNode from command line, it could be UUID,\n     * IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancerCLI.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for a specific DataNode\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n      recordOutput(result, outputLine);\n\n      final String trueStr \u003d \"True\";\n      final String falseStr \u003d \"False\";\n      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n      // get storage path of datanode\n      populatePathNames(dbdn);\n\n      if (dbdn \u003d\u003d null) {\n        outputLine \u003d String.format(\n            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n        recordOutput(result, outputLine);\n      } else {\n        result.appendln(String.format(nodeFormat,\n            dbdn.getDataNodeName(),\n            dbdn.getDataNodeIP(),\n            dbdn.getDataNodePort(),\n            dbdn.getDataNodeUUID(),\n            dbdn.getVolumeCount(),\n            dbdn.getNodeDataDensity()));\n\n        List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n          for (DiskBalancerVolume vol : vset.getVolumes()) {\n            volumeList.add(String.format(volumeFormat,\n                vol.getStorageType(),\n                vol.getPath(),\n                vol.getUsedRatio(),\n                vol.getUsed(),\n                vol.getCapacity(),\n                vol.getFreeRatio(),\n                vol.getFreeSpace(),\n                vol.getCapacity(),\n                vol.isFailed() ? trueStr : falseStr,\n                vol.isReadOnly() ? trueStr : falseStr,\n                vol.isSkip() ? trueStr : falseStr,\n                vol.isTransient() ? trueStr : falseStr));\n          }\n        }\n\n        Collections.sort(volumeList);\n        result.appendln(\n            StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {}
    },
    "9f29f423e426e2d42e650cbed88e46c1c29a2a63": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-10737. disk balancer add volume path to report command. Contributed by Yuanbo Liu.\n",
      "commitDate": "15/08/16 9:47 AM",
      "commitName": "9f29f423e426e2d42e650cbed88e46c1c29a2a63",
      "commitAuthor": "Anu Engineer",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-10737. disk balancer add volume path to report command. Contributed by Yuanbo Liu.\n",
          "commitDate": "15/08/16 9:47 AM",
          "commitName": "9f29f423e426e2d42e650cbed88e46c1c29a2a63",
          "commitAuthor": "Anu Engineer",
          "commitDateOld": "23/06/16 6:27 PM",
          "commitNameOld": "66fa34c839c89733839cb67878fdfdc4b1f65ab8",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 52.64,
          "commitsBetweenForRepo": 431,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,64 @@\n   private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n-      final String nodeFormat, final String volumeFormat) {\n+      final String nodeFormat, final String volumeFormat) throws Exception {\n     String outputLine \u003d \"\";\n     /*\n      * get value that identifies a DataNode from command line, it could be UUID,\n      * IP address or host name.\n      */\n     final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n        * Reporting volume information for a specific DataNode\n        */\n       outputLine \u003d String.format(\n           \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n       recordOutput(result, outputLine);\n \n       final String trueStr \u003d \"True\";\n       final String falseStr \u003d \"False\";\n       DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n+      // get storage path of datanode\n+      populatePathNames(dbdn);\n \n       if (dbdn \u003d\u003d null) {\n         outputLine \u003d String.format(\n             \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n         recordOutput(result, outputLine);\n       } else {\n         result.appendln(String.format(nodeFormat,\n             dbdn.getDataNodeName(),\n             dbdn.getDataNodeIP(),\n             dbdn.getDataNodePort(),\n             dbdn.getDataNodeUUID(),\n             dbdn.getVolumeCount(),\n             dbdn.getNodeDataDensity()));\n \n         List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n         for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n           for (DiskBalancerVolume vol : vset.getVolumes()) {\n             volumeList.add(String.format(volumeFormat,\n                 vol.getStorageType(),\n                 vol.getPath(),\n                 vol.getUsedRatio(),\n                 vol.getUsed(),\n                 vol.getCapacity(),\n                 vol.getFreeRatio(),\n                 vol.getFreeSpace(),\n                 vol.getCapacity(),\n                 vol.isFailed() ? trueStr : falseStr,\n                 vol.isReadOnly() ? trueStr : falseStr,\n                 vol.isSkip() ? trueStr : falseStr,\n                 vol.isTransient() ? trueStr : falseStr));\n           }\n         }\n \n         Collections.sort(volumeList);\n         result.appendln(\n             StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) throws Exception {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies a DataNode from command line, it could be UUID,\n     * IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for a specific DataNode\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n      recordOutput(result, outputLine);\n\n      final String trueStr \u003d \"True\";\n      final String falseStr \u003d \"False\";\n      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n      // get storage path of datanode\n      populatePathNames(dbdn);\n\n      if (dbdn \u003d\u003d null) {\n        outputLine \u003d String.format(\n            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n        recordOutput(result, outputLine);\n      } else {\n        result.appendln(String.format(nodeFormat,\n            dbdn.getDataNodeName(),\n            dbdn.getDataNodeIP(),\n            dbdn.getDataNodePort(),\n            dbdn.getDataNodeUUID(),\n            dbdn.getVolumeCount(),\n            dbdn.getNodeDataDensity()));\n\n        List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n          for (DiskBalancerVolume vol : vset.getVolumes()) {\n            volumeList.add(String.format(volumeFormat,\n                vol.getStorageType(),\n                vol.getPath(),\n                vol.getUsedRatio(),\n                vol.getUsed(),\n                vol.getCapacity(),\n                vol.getFreeRatio(),\n                vol.getFreeSpace(),\n                vol.getCapacity(),\n                vol.isFailed() ? trueStr : falseStr,\n                vol.isReadOnly() ? trueStr : falseStr,\n                vol.isSkip() ? trueStr : falseStr,\n                vol.isTransient() ? trueStr : falseStr));\n          }\n        }\n\n        Collections.sort(volumeList);\n        result.appendln(\n            StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10737. disk balancer add volume path to report command. Contributed by Yuanbo Liu.\n",
          "commitDate": "15/08/16 9:47 AM",
          "commitName": "9f29f423e426e2d42e650cbed88e46c1c29a2a63",
          "commitAuthor": "Anu Engineer",
          "commitDateOld": "23/06/16 6:27 PM",
          "commitNameOld": "66fa34c839c89733839cb67878fdfdc4b1f65ab8",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 52.64,
          "commitsBetweenForRepo": 431,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,64 @@\n   private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n-      final String nodeFormat, final String volumeFormat) {\n+      final String nodeFormat, final String volumeFormat) throws Exception {\n     String outputLine \u003d \"\";\n     /*\n      * get value that identifies a DataNode from command line, it could be UUID,\n      * IP address or host name.\n      */\n     final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n        * Reporting volume information for a specific DataNode\n        */\n       outputLine \u003d String.format(\n           \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n       recordOutput(result, outputLine);\n \n       final String trueStr \u003d \"True\";\n       final String falseStr \u003d \"False\";\n       DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n+      // get storage path of datanode\n+      populatePathNames(dbdn);\n \n       if (dbdn \u003d\u003d null) {\n         outputLine \u003d String.format(\n             \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n         recordOutput(result, outputLine);\n       } else {\n         result.appendln(String.format(nodeFormat,\n             dbdn.getDataNodeName(),\n             dbdn.getDataNodeIP(),\n             dbdn.getDataNodePort(),\n             dbdn.getDataNodeUUID(),\n             dbdn.getVolumeCount(),\n             dbdn.getNodeDataDensity()));\n \n         List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n         for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n           for (DiskBalancerVolume vol : vset.getVolumes()) {\n             volumeList.add(String.format(volumeFormat,\n                 vol.getStorageType(),\n                 vol.getPath(),\n                 vol.getUsedRatio(),\n                 vol.getUsed(),\n                 vol.getCapacity(),\n                 vol.getFreeRatio(),\n                 vol.getFreeSpace(),\n                 vol.getCapacity(),\n                 vol.isFailed() ? trueStr : falseStr,\n                 vol.isReadOnly() ? trueStr : falseStr,\n                 vol.isSkip() ? trueStr : falseStr,\n                 vol.isTransient() ? trueStr : falseStr));\n           }\n         }\n \n         Collections.sort(volumeList);\n         result.appendln(\n             StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) throws Exception {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies a DataNode from command line, it could be UUID,\n     * IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for a specific DataNode\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n      recordOutput(result, outputLine);\n\n      final String trueStr \u003d \"True\";\n      final String falseStr \u003d \"False\";\n      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n      // get storage path of datanode\n      populatePathNames(dbdn);\n\n      if (dbdn \u003d\u003d null) {\n        outputLine \u003d String.format(\n            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n        recordOutput(result, outputLine);\n      } else {\n        result.appendln(String.format(nodeFormat,\n            dbdn.getDataNodeName(),\n            dbdn.getDataNodeIP(),\n            dbdn.getDataNodePort(),\n            dbdn.getDataNodeUUID(),\n            dbdn.getVolumeCount(),\n            dbdn.getNodeDataDensity()));\n\n        List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n          for (DiskBalancerVolume vol : vset.getVolumes()) {\n            volumeList.add(String.format(volumeFormat,\n                vol.getStorageType(),\n                vol.getPath(),\n                vol.getUsedRatio(),\n                vol.getUsed(),\n                vol.getCapacity(),\n                vol.getFreeRatio(),\n                vol.getFreeSpace(),\n                vol.getCapacity(),\n                vol.isFailed() ? trueStr : falseStr,\n                vol.isReadOnly() ? trueStr : falseStr,\n                vol.isSkip() ? trueStr : falseStr,\n                vol.isTransient() ? trueStr : falseStr));\n          }\n        }\n\n        Collections.sort(volumeList);\n        result.appendln(\n            StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
          "extendedDetails": {}
        }
      ]
    },
    "7b23ad1ef76739bc04374aefe6e8e88c23449653": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10550. DiskBalancer: fix issue of order dependency in iteration in ReportCommand test. Contributed by Xiaobing Zhou.\n",
      "commitDate": "23/06/16 6:27 PM",
      "commitName": "7b23ad1ef76739bc04374aefe6e8e88c23449653",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "af11ab34d0cff3883885a25aa918be4f98566142",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,62 @@\n   private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n       final String nodeFormat, final String volumeFormat) {\n     String outputLine \u003d \"\";\n     /*\n      * get value that identifies a DataNode from command line, it could be UUID,\n      * IP address or host name.\n      */\n     final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n \n     if (StringUtils.isBlank(nodeVal)) {\n       outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n       recordOutput(result, outputLine);\n     } else {\n       /*\n        * Reporting volume information for a specific DataNode\n        */\n       outputLine \u003d String.format(\n           \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n       recordOutput(result, outputLine);\n \n       final String trueStr \u003d \"True\";\n       final String falseStr \u003d \"False\";\n       DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n \n       if (dbdn \u003d\u003d null) {\n         outputLine \u003d String.format(\n             \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n         recordOutput(result, outputLine);\n       } else {\n         result.appendln(String.format(nodeFormat,\n             dbdn.getDataNodeName(),\n             dbdn.getDataNodeIP(),\n             dbdn.getDataNodePort(),\n             dbdn.getDataNodeUUID(),\n             dbdn.getVolumeCount(),\n             dbdn.getNodeDataDensity()));\n \n+        List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n         for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n           for (DiskBalancerVolume vol : vset.getVolumes()) {\n-            result.appendln(String.format(volumeFormat,\n+            volumeList.add(String.format(volumeFormat,\n                 vol.getStorageType(),\n                 vol.getPath(),\n                 vol.getUsedRatio(),\n                 vol.getUsed(),\n                 vol.getCapacity(),\n                 vol.getFreeRatio(),\n                 vol.getFreeSpace(),\n                 vol.getCapacity(),\n                 vol.isFailed() ? trueStr : falseStr,\n                 vol.isReadOnly() ? trueStr : falseStr,\n                 vol.isSkip() ? trueStr : falseStr,\n                 vol.isTransient() ? trueStr : falseStr));\n           }\n         }\n+\n+        Collections.sort(volumeList);\n+        result.appendln(\n+            StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies a DataNode from command line, it could be UUID,\n     * IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for a specific DataNode\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n      recordOutput(result, outputLine);\n\n      final String trueStr \u003d \"True\";\n      final String falseStr \u003d \"False\";\n      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n\n      if (dbdn \u003d\u003d null) {\n        outputLine \u003d String.format(\n            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n        recordOutput(result, outputLine);\n      } else {\n        result.appendln(String.format(nodeFormat,\n            dbdn.getDataNodeName(),\n            dbdn.getDataNodeIP(),\n            dbdn.getDataNodePort(),\n            dbdn.getDataNodeUUID(),\n            dbdn.getVolumeCount(),\n            dbdn.getNodeDataDensity()));\n\n        List\u003cString\u003e volumeList \u003d Lists.newArrayList();\n        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n          for (DiskBalancerVolume vol : vset.getVolumes()) {\n            volumeList.add(String.format(volumeFormat,\n                vol.getStorageType(),\n                vol.getPath(),\n                vol.getUsedRatio(),\n                vol.getUsed(),\n                vol.getCapacity(),\n                vol.getFreeRatio(),\n                vol.getFreeSpace(),\n                vol.getCapacity(),\n                vol.isFailed() ? trueStr : falseStr,\n                vol.isReadOnly() ? trueStr : falseStr,\n                vol.isSkip() ? trueStr : falseStr,\n                vol.isTransient() ? trueStr : falseStr));\n          }\n        }\n\n        Collections.sort(volumeList);\n        result.appendln(\n            StringUtils.join(volumeList.toArray(), System.lineSeparator()));\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java",
      "extendedDetails": {}
    },
    "b502102bb1a1f416f43dd1227886c57ccad70fcc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9461. DiskBalancer: Add Report Command. Contributed by Xiaobing Zhou.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "b502102bb1a1f416f43dd1227886c57ccad70fcc",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,57 @@\n+  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n+      final String nodeFormat, final String volumeFormat) {\n+    String outputLine \u003d \"\";\n+    /*\n+     * get value that identifies a DataNode from command line, it could be UUID,\n+     * IP address or host name.\n+     */\n+    final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n+\n+    if (StringUtils.isBlank(nodeVal)) {\n+      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n+      recordOutput(result, outputLine);\n+    } else {\n+      /*\n+       * Reporting volume information for a specific DataNode\n+       */\n+      outputLine \u003d String.format(\n+          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n+      recordOutput(result, outputLine);\n+\n+      final String trueStr \u003d \"True\";\n+      final String falseStr \u003d \"False\";\n+      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n+\n+      if (dbdn \u003d\u003d null) {\n+        outputLine \u003d String.format(\n+            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n+        recordOutput(result, outputLine);\n+      } else {\n+        result.appendln(String.format(nodeFormat,\n+            dbdn.getDataNodeName(),\n+            dbdn.getDataNodeIP(),\n+            dbdn.getDataNodePort(),\n+            dbdn.getDataNodeUUID(),\n+            dbdn.getVolumeCount(),\n+            dbdn.getNodeDataDensity()));\n+\n+        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n+          for (DiskBalancerVolume vol : vset.getVolumes()) {\n+            result.appendln(String.format(volumeFormat,\n+                vol.getStorageType(),\n+                vol.getPath(),\n+                vol.getUsedRatio(),\n+                vol.getUsed(),\n+                vol.getCapacity(),\n+                vol.getFreeRatio(),\n+                vol.getFreeSpace(),\n+                vol.getCapacity(),\n+                vol.isFailed() ? trueStr : falseStr,\n+                vol.isReadOnly() ? trueStr : falseStr,\n+                vol.isSkip() ? trueStr : falseStr,\n+                vol.isTransient() ? trueStr : falseStr));\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNodeReport(final CommandLine cmd, StrBuilder result,\n      final String nodeFormat, final String volumeFormat) {\n    String outputLine \u003d \"\";\n    /*\n     * get value that identifies a DataNode from command line, it could be UUID,\n     * IP address or host name.\n     */\n    final String nodeVal \u003d cmd.getOptionValue(DiskBalancer.NODE);\n\n    if (StringUtils.isBlank(nodeVal)) {\n      outputLine \u003d \"The value for \u0027-node\u0027 is neither specified or empty.\";\n      recordOutput(result, outputLine);\n    } else {\n      /*\n       * Reporting volume information for a specific DataNode\n       */\n      outputLine \u003d String.format(\n          \"Reporting volume information for DataNode \u0027%s\u0027.\", nodeVal);\n      recordOutput(result, outputLine);\n\n      final String trueStr \u003d \"True\";\n      final String falseStr \u003d \"False\";\n      DiskBalancerDataNode dbdn \u003d getNode(nodeVal);\n\n      if (dbdn \u003d\u003d null) {\n        outputLine \u003d String.format(\n            \"Can\u0027t find a DataNode that matches \u0027%s\u0027.\", nodeVal);\n        recordOutput(result, outputLine);\n      } else {\n        result.appendln(String.format(nodeFormat,\n            dbdn.getDataNodeName(),\n            dbdn.getDataNodeIP(),\n            dbdn.getDataNodePort(),\n            dbdn.getDataNodeUUID(),\n            dbdn.getVolumeCount(),\n            dbdn.getNodeDataDensity()));\n\n        for (DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {\n          for (DiskBalancerVolume vol : vset.getVolumes()) {\n            result.appendln(String.format(volumeFormat,\n                vol.getStorageType(),\n                vol.getPath(),\n                vol.getUsedRatio(),\n                vol.getUsed(),\n                vol.getCapacity(),\n                vol.getFreeRatio(),\n                vol.getFreeSpace(),\n                vol.getCapacity(),\n                vol.isFailed() ? trueStr : falseStr,\n                vol.isReadOnly() ? trueStr : falseStr,\n                vol.isSkip() ? trueStr : falseStr,\n                vol.isTransient() ? trueStr : falseStr));\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/command/ReportCommand.java"
    }
  }
}