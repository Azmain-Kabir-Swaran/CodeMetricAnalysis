{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenRenewer.java",
  "functionName": "handleDTRenewerAppSubmitEvent",
  "functionId": "handleDTRenewerAppSubmitEvent___event-DelegationTokenRenewerAppSubmitEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
  "functionStartLine": 1051,
  "functionEndLine": 1076,
  "numCommitsSeen": 37,
  "timeTaken": 2097,
  "changeHistory": [
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "4de17c60528cb29bf7306dbaa720b96063948b17",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4"
  ],
  "changeHistoryShort": {
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "4de17c60528cb29bf7306dbaa720b96063948b17": "Ybodychange",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/04/15 7:43 PM",
      "commitNameOld": "bb6dde68f19be1885a9e7f7949316a03825b6f3e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 181.9,
      "commitsBetweenForRepo": 1539,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private void handleDTRenewerAppSubmitEvent(\n         DelegationTokenRenewerAppSubmitEvent event) {\n       /*\n        * For applications submitted with delegation tokens we are not submitting\n        * the application to scheduler from RMAppManager. Instead we are doing\n        * it from here. The primary goal is to make token renewal as a part of\n        * application submission asynchronous so that client thread is not\n        * blocked during app submission.\n        */\n       try {\n         // Setup tokens for renewal\n         DelegationTokenRenewer.this.handleAppSubmitEvent(event);\n         rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppEvent(event.getApplicationId(), RMAppEventType.START));\n       } catch (Throwable t) {\n         LOG.warn(\n             \"Unable to add the application to the delegation token renewer.\",\n             t);\n         // Sending APP_REJECTED is fine, since we assume that the\n         // RMApp is in NEW state and thus we havne\u0027t yet informed the\n         // Scheduler about the existence of the application\n         rmContext.getDispatcher().getEventHandler().handle(\n-            new RMAppRejectedEvent(event.getApplicationId(), t.getMessage()));\n+            new RMAppEvent(event.getApplicationId(),\n+                RMAppEventType.APP_REJECTED, t.getMessage()));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleDTRenewerAppSubmitEvent(\n        DelegationTokenRenewerAppSubmitEvent event) {\n      /*\n       * For applications submitted with delegation tokens we are not submitting\n       * the application to scheduler from RMAppManager. Instead we are doing\n       * it from here. The primary goal is to make token renewal as a part of\n       * application submission asynchronous so that client thread is not\n       * blocked during app submission.\n       */\n      try {\n        // Setup tokens for renewal\n        DelegationTokenRenewer.this.handleAppSubmitEvent(event);\n        rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(event.getApplicationId(), RMAppEventType.START));\n      } catch (Throwable t) {\n        LOG.warn(\n            \"Unable to add the application to the delegation token renewer.\",\n            t);\n        // Sending APP_REJECTED is fine, since we assume that the\n        // RMApp is in NEW state and thus we havne\u0027t yet informed the\n        // Scheduler about the existence of the application\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(event.getApplicationId(),\n                RMAppEventType.APP_REJECTED, t.getMessage()));\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "4de17c60528cb29bf7306dbaa720b96063948b17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/14 11:25 AM",
      "commitName": "4de17c60528cb29bf7306dbaa720b96063948b17",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/11/13 9:20 PM",
      "commitNameOld": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 113.54,
      "commitsBetweenForRepo": 797,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n     private void handleDTRenewerAppSubmitEvent(\n         DelegationTokenRenewerAppSubmitEvent event) {\n       /*\n        * For applications submitted with delegation tokens we are not submitting\n        * the application to scheduler from RMAppManager. Instead we are doing\n        * it from here. The primary goal is to make token renewal as a part of\n        * application submission asynchronous so that client thread is not\n        * blocked during app submission.\n        */\n       try {\n         // Setup tokens for renewal\n         DelegationTokenRenewer.this.handleAppSubmitEvent(event);\n         rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppEvent(event.getApplicationId(),\n-                event.isApplicationRecovered() ? RMAppEventType.RECOVER\n-                    : RMAppEventType.START));\n+            .handle(new RMAppEvent(event.getApplicationId(), RMAppEventType.START));\n       } catch (Throwable t) {\n         LOG.warn(\n             \"Unable to add the application to the delegation token renewer.\",\n             t);\n         // Sending APP_REJECTED is fine, since we assume that the\n         // RMApp is in NEW state and thus we havne\u0027t yet informed the\n         // Scheduler about the existence of the application\n         rmContext.getDispatcher().getEventHandler().handle(\n             new RMAppRejectedEvent(event.getApplicationId(), t.getMessage()));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleDTRenewerAppSubmitEvent(\n        DelegationTokenRenewerAppSubmitEvent event) {\n      /*\n       * For applications submitted with delegation tokens we are not submitting\n       * the application to scheduler from RMAppManager. Instead we are doing\n       * it from here. The primary goal is to make token renewal as a part of\n       * application submission asynchronous so that client thread is not\n       * blocked during app submission.\n       */\n      try {\n        // Setup tokens for renewal\n        DelegationTokenRenewer.this.handleAppSubmitEvent(event);\n        rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(event.getApplicationId(), RMAppEventType.START));\n      } catch (Throwable t) {\n        LOG.warn(\n            \"Unable to add the application to the delegation token renewer.\",\n            t);\n        // Sending APP_REJECTED is fine, since we assume that the\n        // RMApp is in NEW state and thus we havne\u0027t yet informed the\n        // Scheduler about the existence of the application\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppRejectedEvent(event.getApplicationId(), t.getMessage()));\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:20 PM",
      "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,27 @@\n+    private void handleDTRenewerAppSubmitEvent(\n+        DelegationTokenRenewerAppSubmitEvent event) {\n+      /*\n+       * For applications submitted with delegation tokens we are not submitting\n+       * the application to scheduler from RMAppManager. Instead we are doing\n+       * it from here. The primary goal is to make token renewal as a part of\n+       * application submission asynchronous so that client thread is not\n+       * blocked during app submission.\n+       */\n+      try {\n+        // Setup tokens for renewal\n+        DelegationTokenRenewer.this.handleAppSubmitEvent(event);\n+        rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMAppEvent(event.getApplicationId(),\n+                event.isApplicationRecovered() ? RMAppEventType.RECOVER\n+                    : RMAppEventType.START));\n+      } catch (Throwable t) {\n+        LOG.warn(\n+            \"Unable to add the application to the delegation token renewer.\",\n+            t);\n+        // Sending APP_REJECTED is fine, since we assume that the\n+        // RMApp is in NEW state and thus we havne\u0027t yet informed the\n+        // Scheduler about the existence of the application\n+        rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppRejectedEvent(event.getApplicationId(), t.getMessage()));\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleDTRenewerAppSubmitEvent(\n        DelegationTokenRenewerAppSubmitEvent event) {\n      /*\n       * For applications submitted with delegation tokens we are not submitting\n       * the application to scheduler from RMAppManager. Instead we are doing\n       * it from here. The primary goal is to make token renewal as a part of\n       * application submission asynchronous so that client thread is not\n       * blocked during app submission.\n       */\n      try {\n        // Setup tokens for renewal\n        DelegationTokenRenewer.this.handleAppSubmitEvent(event);\n        rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(event.getApplicationId(),\n                event.isApplicationRecovered() ? RMAppEventType.RECOVER\n                    : RMAppEventType.START));\n      } catch (Throwable t) {\n        LOG.warn(\n            \"Unable to add the application to the delegation token renewer.\",\n            t);\n        // Sending APP_REJECTED is fine, since we assume that the\n        // RMApp is in NEW state and thus we havne\u0027t yet informed the\n        // Scheduler about the existence of the application\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppRejectedEvent(event.getApplicationId(), t.getMessage()));\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java"
    }
  }
}