{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KafkaSink.java",
  "functionName": "init",
  "functionId": "init___conf-SubsetConfiguration",
  "sourceFilePath": "hadoop-tools/hadoop-kafka/src/main/java/org/apache/hadoop/metrics2/sink/KafkaSink.java",
  "functionStartLine": 78,
  "functionEndLine": 120,
  "numCommitsSeen": 3,
  "timeTaken": 373,
  "changeHistory": [
    "b59e434116a54464efa91c6e81dcd2eb94fdf1f8"
  ],
  "changeHistoryShort": {
    "b59e434116a54464efa91c6e81dcd2eb94fdf1f8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b59e434116a54464efa91c6e81dcd2eb94fdf1f8": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10949. metrics2 sink plugin for Apache Kafka (Babak Behzad via aw)\n",
      "commitDate": "05/10/15 2:02 PM",
      "commitName": "b59e434116a54464efa91c6e81dcd2eb94fdf1f8",
      "commitAuthor": "Allen Wittenauer",
      "diff": "@@ -0,0 +1,43 @@\n+  public void init(SubsetConfiguration conf) {\n+    // Get Kafka broker configuration.\n+    Properties props \u003d new Properties();\n+    brokerList \u003d conf.getString(BROKER_LIST);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Broker list \" + brokerList);\n+    }\n+    props.put(\"bootstrap.servers\", brokerList);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Kafka brokers: \" + brokerList);\n+    }\n+\n+    // Get Kafka topic configuration.\n+    topic \u003d conf.getString(TOPIC);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Kafka topic \" + topic);\n+    }\n+    if (Strings.isNullOrEmpty(topic)) {\n+      throw new MetricsException(\"Kafka topic can not be null\");\n+    }\n+\n+    // Set the rest of Kafka configuration.\n+    props.put(\"key.serializer\",\n+        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n+    props.put(\"value.serializer\",\n+        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n+    props.put(\"request.required.acks\", \"0\");\n+\n+    // Set the hostname once and use it in every message.\n+    hostname \u003d \"null\";\n+    try {\n+      hostname \u003d InetAddress.getLocalHost().getHostName();\n+    } catch (Exception e) {\n+      LOG.warn(\"Error getting Hostname, going to continue\");\n+    }\n+\n+    try {\n+      // Create the producer object.\n+      producer \u003d new KafkaProducer\u003cInteger, byte[]\u003e(props);\n+    } catch (Exception e) {\n+      throw new MetricsException(\"Error creating Producer, \" + brokerList, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    // Get Kafka broker configuration.\n    Properties props \u003d new Properties();\n    brokerList \u003d conf.getString(BROKER_LIST);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Broker list \" + brokerList);\n    }\n    props.put(\"bootstrap.servers\", brokerList);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Kafka brokers: \" + brokerList);\n    }\n\n    // Get Kafka topic configuration.\n    topic \u003d conf.getString(TOPIC);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Kafka topic \" + topic);\n    }\n    if (Strings.isNullOrEmpty(topic)) {\n      throw new MetricsException(\"Kafka topic can not be null\");\n    }\n\n    // Set the rest of Kafka configuration.\n    props.put(\"key.serializer\",\n        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    props.put(\"value.serializer\",\n        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    props.put(\"request.required.acks\", \"0\");\n\n    // Set the hostname once and use it in every message.\n    hostname \u003d \"null\";\n    try {\n      hostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n      LOG.warn(\"Error getting Hostname, going to continue\");\n    }\n\n    try {\n      // Create the producer object.\n      producer \u003d new KafkaProducer\u003cInteger, byte[]\u003e(props);\n    } catch (Exception e) {\n      throw new MetricsException(\"Error creating Producer, \" + brokerList, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-kafka/src/main/java/org/apache/hadoop/metrics2/sink/KafkaSink.java"
    }
  }
}