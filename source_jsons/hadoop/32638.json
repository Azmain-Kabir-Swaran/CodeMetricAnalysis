{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultContainerExecutor.java",
  "functionName": "getWorkingDir",
  "functionId": "getWorkingDir___localDirs-List__String____user-String__appId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
  "functionStartLine": 730,
  "functionEndLine": 762,
  "numCommitsSeen": 50,
  "timeTaken": 2938,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "7b4e9ec3b03dfd8aa9375f823e3e8f4aebe86e6b",
    "f5d92359145dfb820a9521e00e2d44c4ee96e67e",
    "41a548a916d4248164cb9495320f123ec215d70e",
    "0fd0ebae645e671699f6a6a56a012ebe6dfb5b2a",
    "cc93e7e683fa74eb1a7aa2b357a36667bd21086a"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "7b4e9ec3b03dfd8aa9375f823e3e8f4aebe86e6b": "Ybodychange",
    "f5d92359145dfb820a9521e00e2d44c4ee96e67e": "Ybodychange",
    "41a548a916d4248164cb9495320f123ec215d70e": "Ybodychange",
    "0fd0ebae645e671699f6a6a56a012ebe6dfb5b2a": "Ymodifierchange",
    "cc93e7e683fa74eb1a7aa2b357a36667bd21086a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n       String appId) throws IOException {\n     long totalAvailable \u003d 0L;\n     long[] availableOnDisk \u003d new long[localDirs.size()];\n     int i \u003d 0;\n     // randomly choose the app directory\n     // the chance of picking a directory is proportional to\n     // the available space on the directory.\n     // firstly calculate the sum of all available space on these directories\n     for (String localDir : localDirs) {\n       Path curBase \u003d getApplicationDir(new Path(localDir), user, appId);\n       long space \u003d 0L;\n       try {\n         space \u003d getDiskFreeSpace(curBase);\n       } catch (IOException e) {\n-        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n+        LOG.warn(\"Unable to get Free Space for {}\", curBase, e);\n       }\n       availableOnDisk[i++] \u003d space;\n       totalAvailable +\u003d space;\n     }\n \n     // throw an IOException if totalAvailable is 0.\n     if (totalAvailable \u003c\u003d 0L) {\n       throw new IOException(\"Not able to find a working directory for \" + user);\n     }\n \n     // make probability to pick a directory proportional to\n     // the available space on the directory.\n     long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n     int dir \u003d pickDirectory(randomPosition, availableOnDisk);\n \n     return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n      String appId) throws IOException {\n    long totalAvailable \u003d 0L;\n    long[] availableOnDisk \u003d new long[localDirs.size()];\n    int i \u003d 0;\n    // randomly choose the app directory\n    // the chance of picking a directory is proportional to\n    // the available space on the directory.\n    // firstly calculate the sum of all available space on these directories\n    for (String localDir : localDirs) {\n      Path curBase \u003d getApplicationDir(new Path(localDir), user, appId);\n      long space \u003d 0L;\n      try {\n        space \u003d getDiskFreeSpace(curBase);\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get Free Space for {}\", curBase, e);\n      }\n      availableOnDisk[i++] \u003d space;\n      totalAvailable +\u003d space;\n    }\n\n    // throw an IOException if totalAvailable is 0.\n    if (totalAvailable \u003c\u003d 0L) {\n      throw new IOException(\"Not able to find a working directory for \" + user);\n    }\n\n    // make probability to pick a directory proportional to\n    // the available space on the directory.\n    long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n    int dir \u003d pickDirectory(randomPosition, availableOnDisk);\n\n    return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "7b4e9ec3b03dfd8aa9375f823e3e8f4aebe86e6b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5686. DefaultContainerExecutor random working dir algorigthm skews results (Vrushali C via Varun Saxena)\n",
      "commitDate": "27/10/16 1:32 AM",
      "commitName": "7b4e9ec3b03dfd8aa9375f823e3e8f4aebe86e6b",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "17/10/16 2:29 PM",
      "commitNameOld": "f5d92359145dfb820a9521e00e2d44c4ee96e67e",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 9.46,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,33 @@\n   protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n       String appId) throws IOException {\n     long totalAvailable \u003d 0L;\n     long[] availableOnDisk \u003d new long[localDirs.size()];\n     int i \u003d 0;\n     // randomly choose the app directory\n     // the chance of picking a directory is proportional to\n     // the available space on the directory.\n     // firstly calculate the sum of all available space on these directories\n     for (String localDir : localDirs) {\n       Path curBase \u003d getApplicationDir(new Path(localDir), user, appId);\n       long space \u003d 0L;\n       try {\n         space \u003d getDiskFreeSpace(curBase);\n       } catch (IOException e) {\n         LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n       }\n       availableOnDisk[i++] \u003d space;\n       totalAvailable +\u003d space;\n     }\n \n     // throw an IOException if totalAvailable is 0.\n     if (totalAvailable \u003c\u003d 0L) {\n       throw new IOException(\"Not able to find a working directory for \" + user);\n     }\n \n     // make probability to pick a directory proportional to\n     // the available space on the directory.\n     long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n-    int dir \u003d 0;\n-    // skip zero available space directory,\n-    // because totalAvailable is greater than 0 and randomPosition\n-    // is less than totalAvailable, we can find a valid directory\n-    // with nonzero available space.\n-    while (availableOnDisk[dir] \u003d\u003d 0L) {\n-      dir++;\n-    }\n-    while (randomPosition \u003e availableOnDisk[dir]) {\n-      randomPosition -\u003d availableOnDisk[dir++];\n-    }\n+    int dir \u003d pickDirectory(randomPosition, availableOnDisk);\n \n     return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n      String appId) throws IOException {\n    long totalAvailable \u003d 0L;\n    long[] availableOnDisk \u003d new long[localDirs.size()];\n    int i \u003d 0;\n    // randomly choose the app directory\n    // the chance of picking a directory is proportional to\n    // the available space on the directory.\n    // firstly calculate the sum of all available space on these directories\n    for (String localDir : localDirs) {\n      Path curBase \u003d getApplicationDir(new Path(localDir), user, appId);\n      long space \u003d 0L;\n      try {\n        space \u003d getDiskFreeSpace(curBase);\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n      }\n      availableOnDisk[i++] \u003d space;\n      totalAvailable +\u003d space;\n    }\n\n    // throw an IOException if totalAvailable is 0.\n    if (totalAvailable \u003c\u003d 0L) {\n      throw new IOException(\"Not able to find a working directory for \" + user);\n    }\n\n    // make probability to pick a directory proportional to\n    // the available space on the directory.\n    long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n    int dir \u003d pickDirectory(randomPosition, availableOnDisk);\n\n    return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "f5d92359145dfb820a9521e00e2d44c4ee96e67e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5466. DefaultContainerExecutor needs JavaDocs (templedf via rkanter)\n",
      "commitDate": "17/10/16 2:29 PM",
      "commitName": "f5d92359145dfb820a9521e00e2d44c4ee96e67e",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "15/09/16 7:15 AM",
      "commitNameOld": "40b5a59b726733df456330a26f03d5174cc0bc1c",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 32.3,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,43 @@\n   protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n       String appId) throws IOException {\n-    Path appStorageDir \u003d null;\n     long totalAvailable \u003d 0L;\n     long[] availableOnDisk \u003d new long[localDirs.size()];\n     int i \u003d 0;\n     // randomly choose the app directory\n     // the chance of picking a directory is proportional to\n     // the available space on the directory.\n     // firstly calculate the sum of all available space on these directories\n     for (String localDir : localDirs) {\n-      Path curBase \u003d getApplicationDir(new Path(localDir),\n-          user, appId);\n+      Path curBase \u003d getApplicationDir(new Path(localDir), user, appId);\n       long space \u003d 0L;\n       try {\n         space \u003d getDiskFreeSpace(curBase);\n       } catch (IOException e) {\n         LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n       }\n       availableOnDisk[i++] \u003d space;\n       totalAvailable +\u003d space;\n     }\n \n     // throw an IOException if totalAvailable is 0.\n     if (totalAvailable \u003c\u003d 0L) {\n-      throw new IOException(\"Not able to find a working directory for \"\n-          + user);\n+      throw new IOException(\"Not able to find a working directory for \" + user);\n     }\n \n     // make probability to pick a directory proportional to\n     // the available space on the directory.\n     long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n     int dir \u003d 0;\n     // skip zero available space directory,\n     // because totalAvailable is greater than 0 and randomPosition\n     // is less than totalAvailable, we can find a valid directory\n     // with nonzero available space.\n     while (availableOnDisk[dir] \u003d\u003d 0L) {\n       dir++;\n     }\n     while (randomPosition \u003e availableOnDisk[dir]) {\n       randomPosition -\u003d availableOnDisk[dir++];\n     }\n-    appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n-        user, appId);\n \n-    return appStorageDir;\n+    return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n      String appId) throws IOException {\n    long totalAvailable \u003d 0L;\n    long[] availableOnDisk \u003d new long[localDirs.size()];\n    int i \u003d 0;\n    // randomly choose the app directory\n    // the chance of picking a directory is proportional to\n    // the available space on the directory.\n    // firstly calculate the sum of all available space on these directories\n    for (String localDir : localDirs) {\n      Path curBase \u003d getApplicationDir(new Path(localDir), user, appId);\n      long space \u003d 0L;\n      try {\n        space \u003d getDiskFreeSpace(curBase);\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n      }\n      availableOnDisk[i++] \u003d space;\n      totalAvailable +\u003d space;\n    }\n\n    // throw an IOException if totalAvailable is 0.\n    if (totalAvailable \u003c\u003d 0L) {\n      throw new IOException(\"Not able to find a working directory for \" + user);\n    }\n\n    // make probability to pick a directory proportional to\n    // the available space on the directory.\n    long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n    int dir \u003d 0;\n    // skip zero available space directory,\n    // because totalAvailable is greater than 0 and randomPosition\n    // is less than totalAvailable, we can find a valid directory\n    // with nonzero available space.\n    while (availableOnDisk[dir] \u003d\u003d 0L) {\n      dir++;\n    }\n    while (randomPosition \u003e availableOnDisk[dir]) {\n      randomPosition -\u003d availableOnDisk[dir++];\n    }\n\n    return getApplicationDir(new Path(localDirs.get(dir)), user, appId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "41a548a916d4248164cb9495320f123ec215d70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2937. Fixed new findbugs warnings in hadoop-yarn-nodemanager. Contributed by Varun Saxena.\n",
      "commitDate": "23/12/14 8:32 PM",
      "commitName": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "03/11/14 12:37 PM",
      "commitNameOld": "6157ace5475fff8d2513fd3cd99134b532b0b406",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 50.33,
      "commitsBetweenForRepo": 401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n       String appId) throws IOException {\n     Path appStorageDir \u003d null;\n     long totalAvailable \u003d 0L;\n     long[] availableOnDisk \u003d new long[localDirs.size()];\n     int i \u003d 0;\n     // randomly choose the app directory\n     // the chance of picking a directory is proportional to\n     // the available space on the directory.\n     // firstly calculate the sum of all available space on these directories\n     for (String localDir : localDirs) {\n       Path curBase \u003d getApplicationDir(new Path(localDir),\n           user, appId);\n       long space \u003d 0L;\n       try {\n         space \u003d getDiskFreeSpace(curBase);\n       } catch (IOException e) {\n         LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n       }\n       availableOnDisk[i++] \u003d space;\n       totalAvailable +\u003d space;\n     }\n \n     // throw an IOException if totalAvailable is 0.\n     if (totalAvailable \u003c\u003d 0L) {\n       throw new IOException(\"Not able to find a working directory for \"\n           + user);\n     }\n \n     // make probability to pick a directory proportional to\n     // the available space on the directory.\n-    Random r \u003d new Random();\n-    long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n+    long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n     int dir \u003d 0;\n     // skip zero available space directory,\n     // because totalAvailable is greater than 0 and randomPosition\n     // is less than totalAvailable, we can find a valid directory\n     // with nonzero available space.\n     while (availableOnDisk[dir] \u003d\u003d 0L) {\n       dir++;\n     }\n     while (randomPosition \u003e availableOnDisk[dir]) {\n       randomPosition -\u003d availableOnDisk[dir++];\n     }\n     appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n         user, appId);\n \n     return appStorageDir;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n      String appId) throws IOException {\n    Path appStorageDir \u003d null;\n    long totalAvailable \u003d 0L;\n    long[] availableOnDisk \u003d new long[localDirs.size()];\n    int i \u003d 0;\n    // randomly choose the app directory\n    // the chance of picking a directory is proportional to\n    // the available space on the directory.\n    // firstly calculate the sum of all available space on these directories\n    for (String localDir : localDirs) {\n      Path curBase \u003d getApplicationDir(new Path(localDir),\n          user, appId);\n      long space \u003d 0L;\n      try {\n        space \u003d getDiskFreeSpace(curBase);\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n      }\n      availableOnDisk[i++] \u003d space;\n      totalAvailable +\u003d space;\n    }\n\n    // throw an IOException if totalAvailable is 0.\n    if (totalAvailable \u003c\u003d 0L) {\n      throw new IOException(\"Not able to find a working directory for \"\n          + user);\n    }\n\n    // make probability to pick a directory proportional to\n    // the available space on the directory.\n    long randomPosition \u003d RandomUtils.nextLong() % totalAvailable;\n    int dir \u003d 0;\n    // skip zero available space directory,\n    // because totalAvailable is greater than 0 and randomPosition\n    // is less than totalAvailable, we can find a valid directory\n    // with nonzero available space.\n    while (availableOnDisk[dir] \u003d\u003d 0L) {\n      dir++;\n    }\n    while (randomPosition \u003e availableOnDisk[dir]) {\n      randomPosition -\u003d availableOnDisk[dir++];\n    }\n    appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n        user, appId);\n\n    return appStorageDir;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "0fd0ebae645e671699f6a6a56a012ebe6dfb5b2a": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-2682. Updated WindowsSecureContainerExecutor to not use DefaultContainerExecutor#getFirstApplicationDir and use getWorkingDir() instead. Contributed by Zhihai Xu\n",
      "commitDate": "16/10/14 6:14 PM",
      "commitName": "0fd0ebae645e671699f6a6a56a012ebe6dfb5b2a",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/10/14 4:32 PM",
      "commitNameOld": "cc93e7e683fa74eb1a7aa2b357a36667bd21086a",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n-  private Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n+  protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n       String appId) throws IOException {\n     Path appStorageDir \u003d null;\n     long totalAvailable \u003d 0L;\n     long[] availableOnDisk \u003d new long[localDirs.size()];\n     int i \u003d 0;\n     // randomly choose the app directory\n     // the chance of picking a directory is proportional to\n     // the available space on the directory.\n     // firstly calculate the sum of all available space on these directories\n     for (String localDir : localDirs) {\n       Path curBase \u003d getApplicationDir(new Path(localDir),\n           user, appId);\n       long space \u003d 0L;\n       try {\n         space \u003d getDiskFreeSpace(curBase);\n       } catch (IOException e) {\n         LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n       }\n       availableOnDisk[i++] \u003d space;\n       totalAvailable +\u003d space;\n     }\n \n     // throw an IOException if totalAvailable is 0.\n     if (totalAvailable \u003c\u003d 0L) {\n       throw new IOException(\"Not able to find a working directory for \"\n           + user);\n     }\n \n     // make probability to pick a directory proportional to\n     // the available space on the directory.\n     Random r \u003d new Random();\n     long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n     int dir \u003d 0;\n     // skip zero available space directory,\n     // because totalAvailable is greater than 0 and randomPosition\n     // is less than totalAvailable, we can find a valid directory\n     // with nonzero available space.\n     while (availableOnDisk[dir] \u003d\u003d 0L) {\n       dir++;\n     }\n     while (randomPosition \u003e availableOnDisk[dir]) {\n       randomPosition -\u003d availableOnDisk[dir++];\n     }\n     appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n         user, appId);\n \n     return appStorageDir;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n      String appId) throws IOException {\n    Path appStorageDir \u003d null;\n    long totalAvailable \u003d 0L;\n    long[] availableOnDisk \u003d new long[localDirs.size()];\n    int i \u003d 0;\n    // randomly choose the app directory\n    // the chance of picking a directory is proportional to\n    // the available space on the directory.\n    // firstly calculate the sum of all available space on these directories\n    for (String localDir : localDirs) {\n      Path curBase \u003d getApplicationDir(new Path(localDir),\n          user, appId);\n      long space \u003d 0L;\n      try {\n        space \u003d getDiskFreeSpace(curBase);\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n      }\n      availableOnDisk[i++] \u003d space;\n      totalAvailable +\u003d space;\n    }\n\n    // throw an IOException if totalAvailable is 0.\n    if (totalAvailable \u003c\u003d 0L) {\n      throw new IOException(\"Not able to find a working directory for \"\n          + user);\n    }\n\n    // make probability to pick a directory proportional to\n    // the available space on the directory.\n    Random r \u003d new Random();\n    long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n    int dir \u003d 0;\n    // skip zero available space directory,\n    // because totalAvailable is greater than 0 and randomPosition\n    // is less than totalAvailable, we can find a valid directory\n    // with nonzero available space.\n    while (availableOnDisk[dir] \u003d\u003d 0L) {\n      dir++;\n    }\n    while (randomPosition \u003e availableOnDisk[dir]) {\n      randomPosition -\u003d availableOnDisk[dir++];\n    }\n    appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n        user, appId);\n\n    return appStorageDir;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "cc93e7e683fa74eb1a7aa2b357a36667bd21086a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2566. DefaultContainerExecutor should pick a working directory randomly. (Zhihai Xu via kasha)\n",
      "commitDate": "13/10/14 4:32 PM",
      "commitName": "cc93e7e683fa74eb1a7aa2b357a36667bd21086a",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,49 @@\n+  private Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n+      String appId) throws IOException {\n+    Path appStorageDir \u003d null;\n+    long totalAvailable \u003d 0L;\n+    long[] availableOnDisk \u003d new long[localDirs.size()];\n+    int i \u003d 0;\n+    // randomly choose the app directory\n+    // the chance of picking a directory is proportional to\n+    // the available space on the directory.\n+    // firstly calculate the sum of all available space on these directories\n+    for (String localDir : localDirs) {\n+      Path curBase \u003d getApplicationDir(new Path(localDir),\n+          user, appId);\n+      long space \u003d 0L;\n+      try {\n+        space \u003d getDiskFreeSpace(curBase);\n+      } catch (IOException e) {\n+        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n+      }\n+      availableOnDisk[i++] \u003d space;\n+      totalAvailable +\u003d space;\n+    }\n+\n+    // throw an IOException if totalAvailable is 0.\n+    if (totalAvailable \u003c\u003d 0L) {\n+      throw new IOException(\"Not able to find a working directory for \"\n+          + user);\n+    }\n+\n+    // make probability to pick a directory proportional to\n+    // the available space on the directory.\n+    Random r \u003d new Random();\n+    long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n+    int dir \u003d 0;\n+    // skip zero available space directory,\n+    // because totalAvailable is greater than 0 and randomPosition\n+    // is less than totalAvailable, we can find a valid directory\n+    // with nonzero available space.\n+    while (availableOnDisk[dir] \u003d\u003d 0L) {\n+      dir++;\n+    }\n+    while (randomPosition \u003e availableOnDisk[dir]) {\n+      randomPosition -\u003d availableOnDisk[dir++];\n+    }\n+    appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n+        user, appId);\n+\n+    return appStorageDir;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Path getWorkingDir(List\u003cString\u003e localDirs, String user,\n      String appId) throws IOException {\n    Path appStorageDir \u003d null;\n    long totalAvailable \u003d 0L;\n    long[] availableOnDisk \u003d new long[localDirs.size()];\n    int i \u003d 0;\n    // randomly choose the app directory\n    // the chance of picking a directory is proportional to\n    // the available space on the directory.\n    // firstly calculate the sum of all available space on these directories\n    for (String localDir : localDirs) {\n      Path curBase \u003d getApplicationDir(new Path(localDir),\n          user, appId);\n      long space \u003d 0L;\n      try {\n        space \u003d getDiskFreeSpace(curBase);\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get Free Space for \" + curBase.toString(), e);\n      }\n      availableOnDisk[i++] \u003d space;\n      totalAvailable +\u003d space;\n    }\n\n    // throw an IOException if totalAvailable is 0.\n    if (totalAvailable \u003c\u003d 0L) {\n      throw new IOException(\"Not able to find a working directory for \"\n          + user);\n    }\n\n    // make probability to pick a directory proportional to\n    // the available space on the directory.\n    Random r \u003d new Random();\n    long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n    int dir \u003d 0;\n    // skip zero available space directory,\n    // because totalAvailable is greater than 0 and randomPosition\n    // is less than totalAvailable, we can find a valid directory\n    // with nonzero available space.\n    while (availableOnDisk[dir] \u003d\u003d 0L) {\n      dir++;\n    }\n    while (randomPosition \u003e availableOnDisk[dir]) {\n      randomPosition -\u003d availableOnDisk[dir++];\n    }\n    appStorageDir \u003d getApplicationDir(new Path(localDirs.get(dir)),\n        user, appId);\n\n    return appStorageDir;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java"
    }
  }
}