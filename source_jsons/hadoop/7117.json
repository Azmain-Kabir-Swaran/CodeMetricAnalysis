{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicySatisfier.java",
  "functionName": "checkSourceAndTargetTypeExists",
  "functionId": "checkSourceAndTargetTypeExists___dn-DatanodeInfo__existingStorageTypes-List__StorageType____expectedStorageTypes-List__StorageType____liveDns-DatanodeMap",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
  "functionStartLine": 881,
  "functionEndLine": 902,
  "numCommitsSeen": 59,
  "timeTaken": 5124,
  "changeHistory": [
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
    "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54",
    "df2b551e79c9e5d8bdd981c48be52bae5f0d9a82"
  ],
  "changeHistoryShort": {
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2": "Ymultichange(Yparameterchange,Ybodychange)",
    "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d": "Ymultichange(Yparameterchange,Ybodychange)",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": "Yfilerename",
    "df2b551e79c9e5d8bdd981c48be52bae5f0d9a82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,22 @@\n   private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n-      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes,\n-      DatanodeStorageReport[] liveDns) {\n+      List\u003cStorageType\u003e existingStorageTypes,\n+      List\u003cStorageType\u003e expectedStorageTypes, DatanodeMap liveDns) {\n     boolean isExpectedTypeAvailable \u003d false;\n     boolean isExistingTypeAvailable \u003d false;\n-    for (DatanodeStorageReport liveDn : liveDns) {\n-      if (dn.equals(liveDn.getDatanodeInfo())) {\n-        StorageReport[] storageReports \u003d liveDn.getStorageReports();\n-        for (StorageReport eachStorage : storageReports) {\n-          StorageType storageType \u003d eachStorage.getStorage().getStorageType();\n-          if (existing.contains(storageType)) {\n+    for (DatanodeWithStorage liveDn : liveDns.getTargets()) {\n+      if (dn.equals(liveDn.datanode)) {\n+        for (StorageType eachType : liveDn.getStorageTypes()) {\n+          if (existingStorageTypes.contains(eachType)) {\n             isExistingTypeAvailable \u003d true;\n           }\n-          if (expectedStorageTypes.contains(storageType)) {\n+          if (expectedStorageTypes.contains(eachType)) {\n             isExpectedTypeAvailable \u003d true;\n           }\n           if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n             return true;\n           }\n         }\n       }\n     }\n     return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n      List\u003cStorageType\u003e existingStorageTypes,\n      List\u003cStorageType\u003e expectedStorageTypes, DatanodeMap liveDns) {\n    boolean isExpectedTypeAvailable \u003d false;\n    boolean isExistingTypeAvailable \u003d false;\n    for (DatanodeWithStorage liveDn : liveDns.getTargets()) {\n      if (dn.equals(liveDn.datanode)) {\n        for (StorageType eachType : liveDn.getStorageTypes()) {\n          if (existingStorageTypes.contains(eachType)) {\n            isExistingTypeAvailable \u003d true;\n          }\n          if (expectedStorageTypes.contains(eachType)) {\n            isExpectedTypeAvailable \u003d true;\n          }\n          if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n            return true;\n          }\n        }\n      }\n    }\n    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "[dn-DatanodeInfo, existing-List\u003cStorageType\u003e, expectedStorageTypes-List\u003cStorageType\u003e, liveDns-DatanodeStorageReport[]]",
            "newValue": "[dn-DatanodeInfo, existingStorageTypes-List\u003cStorageType\u003e, expectedStorageTypes-List\u003cStorageType\u003e, liveDns-DatanodeMap]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,22 @@\n   private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n-      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes,\n-      DatanodeStorageReport[] liveDns) {\n+      List\u003cStorageType\u003e existingStorageTypes,\n+      List\u003cStorageType\u003e expectedStorageTypes, DatanodeMap liveDns) {\n     boolean isExpectedTypeAvailable \u003d false;\n     boolean isExistingTypeAvailable \u003d false;\n-    for (DatanodeStorageReport liveDn : liveDns) {\n-      if (dn.equals(liveDn.getDatanodeInfo())) {\n-        StorageReport[] storageReports \u003d liveDn.getStorageReports();\n-        for (StorageReport eachStorage : storageReports) {\n-          StorageType storageType \u003d eachStorage.getStorage().getStorageType();\n-          if (existing.contains(storageType)) {\n+    for (DatanodeWithStorage liveDn : liveDns.getTargets()) {\n+      if (dn.equals(liveDn.datanode)) {\n+        for (StorageType eachType : liveDn.getStorageTypes()) {\n+          if (existingStorageTypes.contains(eachType)) {\n             isExistingTypeAvailable \u003d true;\n           }\n-          if (expectedStorageTypes.contains(storageType)) {\n+          if (expectedStorageTypes.contains(eachType)) {\n             isExpectedTypeAvailable \u003d true;\n           }\n           if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n             return true;\n           }\n         }\n       }\n     }\n     return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n      List\u003cStorageType\u003e existingStorageTypes,\n      List\u003cStorageType\u003e expectedStorageTypes, DatanodeMap liveDns) {\n    boolean isExpectedTypeAvailable \u003d false;\n    boolean isExistingTypeAvailable \u003d false;\n    for (DatanodeWithStorage liveDn : liveDns.getTargets()) {\n      if (dn.equals(liveDn.datanode)) {\n        for (StorageType eachType : liveDn.getStorageTypes()) {\n          if (existingStorageTypes.contains(eachType)) {\n            isExistingTypeAvailable \u003d true;\n          }\n          if (expectedStorageTypes.contains(eachType)) {\n            isExpectedTypeAvailable \u003d true;\n          }\n          if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n            return true;\n          }\n        }\n      }\n    }\n    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {}
        }
      ]
    },
    "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12982 : [SPS]: Reduce the locking and cleanup the Namesystem access. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12982 : [SPS]: Reduce the locking and cleanup the Namesystem access. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,24 @@\n-  private boolean checkSourceAndTargetTypeExists(DatanodeDescriptor dn,\n-      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes) {\n-    DatanodeStorageInfo[] allDNStorageInfos \u003d dn.getStorageInfos();\n+  private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n+      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes,\n+      DatanodeStorageReport[] liveDns) {\n     boolean isExpectedTypeAvailable \u003d false;\n     boolean isExistingTypeAvailable \u003d false;\n-    for (DatanodeStorageInfo dnInfo : allDNStorageInfos) {\n-      StorageType storageType \u003d dnInfo.getStorageType();\n-      if (existing.contains(storageType)) {\n-        isExistingTypeAvailable \u003d true;\n-      }\n-      if (expectedStorageTypes.contains(storageType)) {\n-        isExpectedTypeAvailable \u003d true;\n+    for (DatanodeStorageReport liveDn : liveDns) {\n+      if (dn.equals(liveDn.getDatanodeInfo())) {\n+        StorageReport[] storageReports \u003d liveDn.getStorageReports();\n+        for (StorageReport eachStorage : storageReports) {\n+          StorageType storageType \u003d eachStorage.getStorage().getStorageType();\n+          if (existing.contains(storageType)) {\n+            isExistingTypeAvailable \u003d true;\n+          }\n+          if (expectedStorageTypes.contains(storageType)) {\n+            isExpectedTypeAvailable \u003d true;\n+          }\n+          if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n+            return true;\n+          }\n+        }\n       }\n     }\n     return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes,\n      DatanodeStorageReport[] liveDns) {\n    boolean isExpectedTypeAvailable \u003d false;\n    boolean isExistingTypeAvailable \u003d false;\n    for (DatanodeStorageReport liveDn : liveDns) {\n      if (dn.equals(liveDn.getDatanodeInfo())) {\n        StorageReport[] storageReports \u003d liveDn.getStorageReports();\n        for (StorageReport eachStorage : storageReports) {\n          StorageType storageType \u003d eachStorage.getStorage().getStorageType();\n          if (existing.contains(storageType)) {\n            isExistingTypeAvailable \u003d true;\n          }\n          if (expectedStorageTypes.contains(storageType)) {\n            isExpectedTypeAvailable \u003d true;\n          }\n          if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n            return true;\n          }\n        }\n      }\n    }\n    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "[dn-DatanodeDescriptor, existing-List\u003cStorageType\u003e, expectedStorageTypes-List\u003cStorageType\u003e]",
            "newValue": "[dn-DatanodeInfo, existing-List\u003cStorageType\u003e, expectedStorageTypes-List\u003cStorageType\u003e, liveDns-DatanodeStorageReport[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12982 : [SPS]: Reduce the locking and cleanup the Namesystem access. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,24 @@\n-  private boolean checkSourceAndTargetTypeExists(DatanodeDescriptor dn,\n-      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes) {\n-    DatanodeStorageInfo[] allDNStorageInfos \u003d dn.getStorageInfos();\n+  private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n+      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes,\n+      DatanodeStorageReport[] liveDns) {\n     boolean isExpectedTypeAvailable \u003d false;\n     boolean isExistingTypeAvailable \u003d false;\n-    for (DatanodeStorageInfo dnInfo : allDNStorageInfos) {\n-      StorageType storageType \u003d dnInfo.getStorageType();\n-      if (existing.contains(storageType)) {\n-        isExistingTypeAvailable \u003d true;\n-      }\n-      if (expectedStorageTypes.contains(storageType)) {\n-        isExpectedTypeAvailable \u003d true;\n+    for (DatanodeStorageReport liveDn : liveDns) {\n+      if (dn.equals(liveDn.getDatanodeInfo())) {\n+        StorageReport[] storageReports \u003d liveDn.getStorageReports();\n+        for (StorageReport eachStorage : storageReports) {\n+          StorageType storageType \u003d eachStorage.getStorage().getStorageType();\n+          if (existing.contains(storageType)) {\n+            isExistingTypeAvailable \u003d true;\n+          }\n+          if (expectedStorageTypes.contains(storageType)) {\n+            isExpectedTypeAvailable \u003d true;\n+          }\n+          if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n+            return true;\n+          }\n+        }\n       }\n     }\n     return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkSourceAndTargetTypeExists(DatanodeInfo dn,\n      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes,\n      DatanodeStorageReport[] liveDns) {\n    boolean isExpectedTypeAvailable \u003d false;\n    boolean isExistingTypeAvailable \u003d false;\n    for (DatanodeStorageReport liveDn : liveDns) {\n      if (dn.equals(liveDn.getDatanodeInfo())) {\n        StorageReport[] storageReports \u003d liveDn.getStorageReports();\n        for (StorageReport eachStorage : storageReports) {\n          StorageType storageType \u003d eachStorage.getStorage().getStorageType();\n          if (existing.contains(storageType)) {\n            isExistingTypeAvailable \u003d true;\n          }\n          if (expectedStorageTypes.contains(storageType)) {\n            isExpectedTypeAvailable \u003d true;\n          }\n          if (isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable) {\n            return true;\n          }\n        }\n      }\n    }\n    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {}
        }
      ]
    },
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-12955: [SPS]: Move SPS classes to a separate package. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "c561cb316e365ef674784cd6cf0b12c0fbc271a3",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean checkSourceAndTargetTypeExists(DatanodeDescriptor dn,\n      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes) {\n    DatanodeStorageInfo[] allDNStorageInfos \u003d dn.getStorageInfos();\n    boolean isExpectedTypeAvailable \u003d false;\n    boolean isExistingTypeAvailable \u003d false;\n    for (DatanodeStorageInfo dnInfo : allDNStorageInfos) {\n      StorageType storageType \u003d dnInfo.getStorageType();\n      if (existing.contains(storageType)) {\n        isExistingTypeAvailable \u003d true;\n      }\n      if (expectedStorageTypes.contains(storageType)) {\n        isExpectedTypeAvailable \u003d true;\n      }\n    }\n    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySatisfier.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java"
      }
    },
    "df2b551e79c9e5d8bdd981c48be52bae5f0d9a82": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11293: [SPS]: Local DN should be given preference as source node, when target available in same node. Contributed by Yuanbo Liu and Uma Maheswara Rao G\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "df2b551e79c9e5d8bdd981c48be52bae5f0d9a82",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,16 @@\n+  private boolean checkSourceAndTargetTypeExists(DatanodeDescriptor dn,\n+      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes) {\n+    DatanodeStorageInfo[] allDNStorageInfos \u003d dn.getStorageInfos();\n+    boolean isExpectedTypeAvailable \u003d false;\n+    boolean isExistingTypeAvailable \u003d false;\n+    for (DatanodeStorageInfo dnInfo : allDNStorageInfos) {\n+      StorageType storageType \u003d dnInfo.getStorageType();\n+      if (existing.contains(storageType)) {\n+        isExistingTypeAvailable \u003d true;\n+      }\n+      if (expectedStorageTypes.contains(storageType)) {\n+        isExpectedTypeAvailable \u003d true;\n+      }\n+    }\n+    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkSourceAndTargetTypeExists(DatanodeDescriptor dn,\n      List\u003cStorageType\u003e existing, List\u003cStorageType\u003e expectedStorageTypes) {\n    DatanodeStorageInfo[] allDNStorageInfos \u003d dn.getStorageInfos();\n    boolean isExpectedTypeAvailable \u003d false;\n    boolean isExistingTypeAvailable \u003d false;\n    for (DatanodeStorageInfo dnInfo : allDNStorageInfos) {\n      StorageType storageType \u003d dnInfo.getStorageType();\n      if (existing.contains(storageType)) {\n        isExistingTypeAvailable \u003d true;\n      }\n      if (expectedStorageTypes.contains(storageType)) {\n        isExpectedTypeAvailable \u003d true;\n      }\n    }\n    return isExistingTypeAvailable \u0026\u0026 isExpectedTypeAvailable;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySatisfier.java"
    }
  }
}