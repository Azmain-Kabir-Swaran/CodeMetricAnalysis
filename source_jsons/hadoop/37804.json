{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMServerUtils.java",
  "functionName": "queryRMNodes",
  "functionId": "queryRMNodes___context-RMContext__acceptedStates-EnumSet__NodeState__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
  "functionStartLine": 109,
  "functionEndLine": 143,
  "numCommitsSeen": 48,
  "timeTaken": 3363,
  "changeHistory": [
    "604b2489a9e168a0fd702343f6f8844df9e86d17",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421",
    "30ee57ceb1e80c30ea3adfe7736d4d4c7d5c8386",
    "d0da13229cf692579c8c9db47a93f6c6255392c8",
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
    "1cbcd4a491e6a57d466c2897335614dc6770b475",
    "5e4f6ad1d9aa6df96af837600674af4467c1e99c"
  ],
  "changeHistoryShort": {
    "604b2489a9e168a0fd702343f6f8844df9e86d17": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Ybodychange",
    "30ee57ceb1e80c30ea3adfe7736d4d4c7d5c8386": "Ybodychange",
    "d0da13229cf692579c8c9db47a93f6c6255392c8": "Ybodychange",
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c": "Ybodychange",
    "1cbcd4a491e6a57d466c2897335614dc6770b475": "Ybodychange",
    "5e4f6ad1d9aa6df96af837600674af4467c1e99c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "604b2489a9e168a0fd702343f6f8844df9e86d17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9206. RMServerUtils does not count SHUTDOWN as an accepted state. Contributed by Kuhu Shukla.\n",
      "commitDate": "03/02/19 11:18 PM",
      "commitName": "604b2489a9e168a0fd702343f6f8844df9e86d17",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/09/18 2:47 AM",
      "commitNameOld": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 127.9,
      "commitsBetweenForRepo": 945,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,35 @@\n   public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n       EnumSet\u003cNodeState\u003e acceptedStates) {\n     // nodes contains nodes that are NEW, RUNNING, UNHEALTHY or DECOMMISSIONING.\n     ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n-    if (acceptedStates.contains(NodeState.NEW) ||\n-        acceptedStates.contains(NodeState.RUNNING) ||\n-        acceptedStates.contains(NodeState.DECOMMISSIONING) ||\n-        acceptedStates.contains(NodeState.UNHEALTHY)) {\n+    boolean hasActive \u003d false;\n+    boolean hasInactive \u003d false;\n+    for (NodeState nodeState : acceptedStates) {\n+      if (!hasInactive \u0026\u0026 nodeState.isInactiveState()) {\n+        hasInactive \u003d true;\n+      }\n+      if (!hasActive \u0026\u0026 nodeState.isActiveState()) {\n+        hasActive \u003d true;\n+      }\n+      if (hasActive \u0026\u0026 hasInactive) {\n+        break;\n+      }\n+    }\n+    if (hasActive) {\n       for (RMNode rmNode : context.getRMNodes().values()) {\n         if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n \n     // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n-    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n-        acceptedStates.contains(NodeState.LOST) ||\n-        acceptedStates.contains(NodeState.REBOOTED)) {\n+    if (hasInactive) {\n       for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n         if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING, UNHEALTHY or DECOMMISSIONING.\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    boolean hasActive \u003d false;\n    boolean hasInactive \u003d false;\n    for (NodeState nodeState : acceptedStates) {\n      if (!hasInactive \u0026\u0026 nodeState.isInactiveState()) {\n        hasInactive \u003d true;\n      }\n      if (!hasActive \u0026\u0026 nodeState.isActiveState()) {\n        hasActive \u003d true;\n      }\n      if (hasActive \u0026\u0026 hasInactive) {\n        break;\n      }\n    }\n    if (hasActive) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n\n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (hasInactive) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "commitDateOld": "08/07/16 4:14 AM",
      "commitNameOld": "30ee57ceb1e80c30ea3adfe7736d4d4c7d5c8386",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 41.13,
      "commitsBetweenForRepo": 405,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n       EnumSet\u003cNodeState\u003e acceptedStates) {\n-    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n+    // nodes contains nodes that are NEW, RUNNING, UNHEALTHY or DECOMMISSIONING.\n     ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n     if (acceptedStates.contains(NodeState.NEW) ||\n         acceptedStates.contains(NodeState.RUNNING) ||\n         acceptedStates.contains(NodeState.DECOMMISSIONING) ||\n         acceptedStates.contains(NodeState.UNHEALTHY)) {\n       for (RMNode rmNode : context.getRMNodes().values()) {\n         if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n \n     // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n     if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n         acceptedStates.contains(NodeState.LOST) ||\n         acceptedStates.contains(NodeState.REBOOTED)) {\n       for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n         if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING, UNHEALTHY or DECOMMISSIONING.\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    if (acceptedStates.contains(NodeState.NEW) ||\n        acceptedStates.contains(NodeState.RUNNING) ||\n        acceptedStates.contains(NodeState.DECOMMISSIONING) ||\n        acceptedStates.contains(NodeState.UNHEALTHY)) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n\n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n        acceptedStates.contains(NodeState.LOST) ||\n        acceptedStates.contains(NodeState.REBOOTED)) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "30ee57ceb1e80c30ea3adfe7736d4d4c7d5c8386": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4939. The decommissioning Node should keep alive during NM restart. Contributed by sandflee.\n",
      "commitDate": "08/07/16 4:14 AM",
      "commitName": "30ee57ceb1e80c30ea3adfe7736d4d4c7d5c8386",
      "commitAuthor": "Junping Du",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 39.81,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n       EnumSet\u003cNodeState\u003e acceptedStates) {\n     // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n     ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n     if (acceptedStates.contains(NodeState.NEW) ||\n         acceptedStates.contains(NodeState.RUNNING) ||\n+        acceptedStates.contains(NodeState.DECOMMISSIONING) ||\n         acceptedStates.contains(NodeState.UNHEALTHY)) {\n       for (RMNode rmNode : context.getRMNodes().values()) {\n         if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n \n     // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n     if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n         acceptedStates.contains(NodeState.LOST) ||\n         acceptedStates.contains(NodeState.REBOOTED)) {\n       for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n         if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    if (acceptedStates.contains(NodeState.NEW) ||\n        acceptedStates.contains(NodeState.RUNNING) ||\n        acceptedStates.contains(NodeState.DECOMMISSIONING) ||\n        acceptedStates.contains(NodeState.UNHEALTHY)) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n\n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n        acceptedStates.contains(NodeState.LOST) ||\n        acceptedStates.contains(NodeState.REBOOTED)) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "d0da13229cf692579c8c9db47a93f6c6255392c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\n",
      "commitDate": "05/05/16 7:07 AM",
      "commitName": "d0da13229cf692579c8c9db47a93f6c6255392c8",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "11/04/16 8:51 AM",
      "commitNameOld": "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 23.93,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n       EnumSet\u003cNodeState\u003e acceptedStates) {\n     // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n     ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n     if (acceptedStates.contains(NodeState.NEW) ||\n         acceptedStates.contains(NodeState.RUNNING) ||\n         acceptedStates.contains(NodeState.UNHEALTHY)) {\n       for (RMNode rmNode : context.getRMNodes().values()) {\n         if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n \n     // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n     if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n         acceptedStates.contains(NodeState.LOST) ||\n         acceptedStates.contains(NodeState.REBOOTED)) {\n       for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n-        if (acceptedStates.contains(rmNode.getState())) {\n+        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    if (acceptedStates.contains(NodeState.NEW) ||\n        acceptedStates.contains(NodeState.RUNNING) ||\n        acceptedStates.contains(NodeState.UNHEALTHY)) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n\n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n        acceptedStates.contains(NodeState.LOST) ||\n        acceptedStates.contains(NodeState.REBOOTED)) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\"\n\nThis reverts commit 1cbcd4a491e6a57d466c2897335614dc6770b475.\n",
      "commitDate": "11/04/16 8:51 AM",
      "commitName": "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "05/04/16 6:40 AM",
      "commitNameOld": "1cbcd4a491e6a57d466c2897335614dc6770b475",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n       EnumSet\u003cNodeState\u003e acceptedStates) {\n     // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n     ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n     if (acceptedStates.contains(NodeState.NEW) ||\n         acceptedStates.contains(NodeState.RUNNING) ||\n         acceptedStates.contains(NodeState.UNHEALTHY)) {\n       for (RMNode rmNode : context.getRMNodes().values()) {\n         if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n \n     // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n     if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n         acceptedStates.contains(NodeState.LOST) ||\n         acceptedStates.contains(NodeState.REBOOTED)) {\n       for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n-        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n+        if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    if (acceptedStates.contains(NodeState.NEW) ||\n        acceptedStates.contains(NodeState.RUNNING) ||\n        acceptedStates.contains(NodeState.UNHEALTHY)) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n\n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n        acceptedStates.contains(NodeState.LOST) ||\n        acceptedStates.contains(NodeState.REBOOTED)) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "1cbcd4a491e6a57d466c2897335614dc6770b475": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\n",
      "commitDate": "05/04/16 6:40 AM",
      "commitName": "1cbcd4a491e6a57d466c2897335614dc6770b475",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "28/01/16 2:51 PM",
      "commitNameOld": "7f46636495e23693d588b0915f464fa7afd9102e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 67.62,
      "commitsBetweenForRepo": 424,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n       EnumSet\u003cNodeState\u003e acceptedStates) {\n     // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n     ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n     if (acceptedStates.contains(NodeState.NEW) ||\n         acceptedStates.contains(NodeState.RUNNING) ||\n         acceptedStates.contains(NodeState.UNHEALTHY)) {\n       for (RMNode rmNode : context.getRMNodes().values()) {\n         if (acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n \n     // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n     if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n         acceptedStates.contains(NodeState.LOST) ||\n         acceptedStates.contains(NodeState.REBOOTED)) {\n       for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n-        if (acceptedStates.contains(rmNode.getState())) {\n+        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n           results.add(rmNode);\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    if (acceptedStates.contains(NodeState.NEW) ||\n        acceptedStates.contains(NodeState.RUNNING) ||\n        acceptedStates.contains(NodeState.UNHEALTHY)) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n\n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n        acceptedStates.contains(NodeState.LOST) ||\n        acceptedStates.contains(NodeState.REBOOTED)) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if ((rmNode !\u003d null) \u0026\u0026 acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "5e4f6ad1d9aa6df96af837600674af4467c1e99c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-791. Changed RM APIs and web-services related to nodes to ensure that both are consistent with each other. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1500994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/13 3:30 PM",
      "commitName": "5e4f6ad1d9aa6df96af837600674af4467c1e99c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,26 @@\n+  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n+      EnumSet\u003cNodeState\u003e acceptedStates) {\n+    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n+    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n+    if (acceptedStates.contains(NodeState.NEW) ||\n+        acceptedStates.contains(NodeState.RUNNING) ||\n+        acceptedStates.contains(NodeState.UNHEALTHY)) {\n+      for (RMNode rmNode : context.getRMNodes().values()) {\n+        if (acceptedStates.contains(rmNode.getState())) {\n+          results.add(rmNode);\n+        }\n+      }\n+    }\n+    \n+    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n+    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n+        acceptedStates.contains(NodeState.LOST) ||\n+        acceptedStates.contains(NodeState.REBOOTED)) {\n+      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n+        if (acceptedStates.contains(rmNode.getState())) {\n+          results.add(rmNode);\n+        }\n+      }\n+    }\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRMNode\u003e queryRMNodes(RMContext context,\n      EnumSet\u003cNodeState\u003e acceptedStates) {\n    // nodes contains nodes that are NEW, RUNNING OR UNHEALTHY\n    ArrayList\u003cRMNode\u003e results \u003d new ArrayList\u003cRMNode\u003e();\n    if (acceptedStates.contains(NodeState.NEW) ||\n        acceptedStates.contains(NodeState.RUNNING) ||\n        acceptedStates.contains(NodeState.UNHEALTHY)) {\n      for (RMNode rmNode : context.getRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    \n    // inactiveNodes contains nodes that are DECOMMISSIONED, LOST, OR REBOOTED\n    if (acceptedStates.contains(NodeState.DECOMMISSIONED) ||\n        acceptedStates.contains(NodeState.LOST) ||\n        acceptedStates.contains(NodeState.REBOOTED)) {\n      for (RMNode rmNode : context.getInactiveRMNodes().values()) {\n        if (acceptedStates.contains(rmNode.getState())) {\n          results.add(rmNode);\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java"
    }
  }
}