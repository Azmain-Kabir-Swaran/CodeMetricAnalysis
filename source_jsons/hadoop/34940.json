{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "readDirAsUser",
  "functionId": "readDirAsUser___user-String__dir-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 881,
  "functionEndLine": 917,
  "numCommitsSeen": 84,
  "timeTaken": 3003,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
    "f76f5c0919cdb0b032edb309d137093952e77268",
    "cde3a00526c562a500308232e2b93498d22c90d7"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": "Ybodychange",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": "Ybodychange",
    "f76f5c0919cdb0b032edb309d137093952e77268": "Ybodychange",
    "cde3a00526c562a500308232e2b93498d22c90d7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected File[] readDirAsUser(String user, Path dir) {\n     List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n     PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d \"\";\n \n     if (dir !\u003d null) {\n       dirString \u003d dir.toUri().getPath();\n     }\n \n     listAsUserOp.appendArgs(runAsUser, user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n         dirString);\n \n     try {\n       PrivilegedOperationExecutor privOpExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       String results \u003d\n           privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n \n       for (String file: results.split(\"\\n\")) {\n         // The container-executor always dumps its log output to stdout, which\n         // includes 3 lines that start with \"main : \"\n         if (!file.startsWith(\"main :\")) {\n           files.add(new File(new File(dirString), file));\n         }\n       }\n     } catch (PrivilegedOperationException e) {\n-      LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n-          + e.getExitCode(), e);\n+      LOG.error(\"ListAsUser for {} returned with exit code: {}\",\n+          dir, e.getExitCode(), e);\n     }\n \n     return files.toArray(new File[files.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected File[] readDirAsUser(String user, Path dir) {\n    List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n    PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d \"\";\n\n    if (dir !\u003d null) {\n      dirString \u003d dir.toUri().getPath();\n    }\n\n    listAsUserOp.appendArgs(runAsUser, user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n        dirString);\n\n    try {\n      PrivilegedOperationExecutor privOpExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      String results \u003d\n          privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n\n      for (String file: results.split(\"\\n\")) {\n        // The container-executor always dumps its log output to stdout, which\n        // includes 3 lines that start with \"main : \"\n        if (!file.startsWith(\"main :\")) {\n          files.add(new File(new File(dirString), file));\n        }\n      }\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"ListAsUser for {} returned with exit code: {}\",\n          dir, e.getExitCode(), e);\n    }\n\n    return files.toArray(new File[files.size()]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:44 PM",
      "commitName": "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:42 PM",
      "commitNameOld": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected File[] readDirAsUser(String user, Path dir) {\n     List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n     PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d \"\";\n \n     if (dir !\u003d null) {\n       dirString \u003d dir.toUri().getPath();\n     }\n \n     listAsUserOp.appendArgs(runAsUser, user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n         dirString);\n \n     try {\n       PrivilegedOperationExecutor privOpExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(super.getConf());\n+          getPrivilegedOperationExecutor();\n \n       String results \u003d\n           privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n \n       for (String file: results.split(\"\\n\")) {\n         // The container-executor always dumps its log output to stdout, which\n         // includes 3 lines that start with \"main : \"\n         if (!file.startsWith(\"main :\")) {\n           files.add(new File(new File(dirString), file));\n         }\n       }\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n           + e.getExitCode(), e);\n     }\n \n     return files.toArray(new File[files.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected File[] readDirAsUser(String user, Path dir) {\n    List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n    PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d \"\";\n\n    if (dir !\u003d null) {\n      dirString \u003d dir.toUri().getPath();\n    }\n\n    listAsUserOp.appendArgs(runAsUser, user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n        dirString);\n\n    try {\n      PrivilegedOperationExecutor privOpExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      String results \u003d\n          privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n\n      for (String file: results.split(\"\\n\")) {\n        // The container-executor always dumps its log output to stdout, which\n        // includes 3 lines that start with \"main : \"\n        if (!file.startsWith(\"main :\")) {\n          files.add(new File(new File(dirString), file));\n        }\n      }\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n          + e.getExitCode(), e);\n    }\n\n    return files.toArray(new File[files.size()]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\"\n\nThis reverts commit f76f5c0919cdb0b032edb309d137093952e77268.\n",
      "commitDate": "13/07/17 3:42 PM",
      "commitName": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:38 PM",
      "commitNameOld": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected File[] readDirAsUser(String user, Path dir) {\n     List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n     PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d \"\";\n \n     if (dir !\u003d null) {\n       dirString \u003d dir.toUri().getPath();\n     }\n \n     listAsUserOp.appendArgs(runAsUser, user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n         dirString);\n \n     try {\n       PrivilegedOperationExecutor privOpExecutor \u003d\n-          getPrivilegedOperationExecutor();\n+          PrivilegedOperationExecutor.getInstance(super.getConf());\n \n       String results \u003d\n           privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n \n       for (String file: results.split(\"\\n\")) {\n         // The container-executor always dumps its log output to stdout, which\n         // includes 3 lines that start with \"main : \"\n         if (!file.startsWith(\"main :\")) {\n           files.add(new File(new File(dirString), file));\n         }\n       }\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n           + e.getExitCode(), e);\n     }\n \n     return files.toArray(new File[files.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected File[] readDirAsUser(String user, Path dir) {\n    List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n    PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d \"\";\n\n    if (dir !\u003d null) {\n      dirString \u003d dir.toUri().getPath();\n    }\n\n    listAsUserOp.appendArgs(runAsUser, user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n        dirString);\n\n    try {\n      PrivilegedOperationExecutor privOpExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(super.getConf());\n\n      String results \u003d\n          privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n\n      for (String file: results.split(\"\\n\")) {\n        // The container-executor always dumps its log output to stdout, which\n        // includes 3 lines that start with \"main : \"\n        if (!file.startsWith(\"main :\")) {\n          files.add(new File(new File(dirString), file));\n        }\n      }\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n          + e.getExitCode(), e);\n    }\n\n    return files.toArray(new File[files.size()]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "f76f5c0919cdb0b032edb309d137093952e77268": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:38 PM",
      "commitName": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/05/17 10:46 AM",
      "commitNameOld": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 64.2,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   protected File[] readDirAsUser(String user, Path dir) {\n     List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n     PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n     String runAsUser \u003d getRunAsUser(user);\n     String dirString \u003d \"\";\n \n     if (dir !\u003d null) {\n       dirString \u003d dir.toUri().getPath();\n     }\n \n     listAsUserOp.appendArgs(runAsUser, user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n         dirString);\n \n     try {\n       PrivilegedOperationExecutor privOpExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(super.getConf());\n+          getPrivilegedOperationExecutor();\n \n       String results \u003d\n           privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n \n       for (String file: results.split(\"\\n\")) {\n         // The container-executor always dumps its log output to stdout, which\n         // includes 3 lines that start with \"main : \"\n         if (!file.startsWith(\"main :\")) {\n           files.add(new File(new File(dirString), file));\n         }\n       }\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n           + e.getExitCode(), e);\n     }\n \n     return files.toArray(new File[files.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected File[] readDirAsUser(String user, Path dir) {\n    List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n    PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d \"\";\n\n    if (dir !\u003d null) {\n      dirString \u003d dir.toUri().getPath();\n    }\n\n    listAsUserOp.appendArgs(runAsUser, user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n        dirString);\n\n    try {\n      PrivilegedOperationExecutor privOpExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      String results \u003d\n          privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n\n      for (String file: results.split(\"\\n\")) {\n        // The container-executor always dumps its log output to stdout, which\n        // includes 3 lines that start with \"main : \"\n        if (!file.startsWith(\"main :\")) {\n          files.add(new File(new File(dirString), file));\n        }\n      }\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n          + e.getExitCode(), e);\n    }\n\n    return files.toArray(new File[files.size()]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "cde3a00526c562a500308232e2b93498d22c90d7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5373. NPE listing wildcard directory in containerLaunch. (Daniel Templeton via kasha)\n",
      "commitDate": "26/08/16 11:04 AM",
      "commitName": "cde3a00526c562a500308232e2b93498d22c90d7",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,37 @@\n+  protected File[] readDirAsUser(String user, Path dir) {\n+    List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n+    PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n+    String runAsUser \u003d getRunAsUser(user);\n+    String dirString \u003d \"\";\n+\n+    if (dir !\u003d null) {\n+      dirString \u003d dir.toUri().getPath();\n+    }\n+\n+    listAsUserOp.appendArgs(runAsUser, user,\n+        Integer.toString(\n+            PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n+        dirString);\n+\n+    try {\n+      PrivilegedOperationExecutor privOpExecutor \u003d\n+          PrivilegedOperationExecutor.getInstance(super.getConf());\n+\n+      String results \u003d\n+          privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n+\n+      for (String file: results.split(\"\\n\")) {\n+        // The container-executor always dumps its log output to stdout, which\n+        // includes 3 lines that start with \"main : \"\n+        if (!file.startsWith(\"main :\")) {\n+          files.add(new File(new File(dirString), file));\n+        }\n+      }\n+    } catch (PrivilegedOperationException e) {\n+      LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n+          + e.getExitCode(), e);\n+    }\n+\n+    return files.toArray(new File[files.size()]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected File[] readDirAsUser(String user, Path dir) {\n    List\u003cFile\u003e files \u003d new ArrayList\u003c\u003e();\n    PrivilegedOperation listAsUserOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.LIST_AS_USER, (String)null);\n    String runAsUser \u003d getRunAsUser(user);\n    String dirString \u003d \"\";\n\n    if (dir !\u003d null) {\n      dirString \u003d dir.toUri().getPath();\n    }\n\n    listAsUserOp.appendArgs(runAsUser, user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.LIST_AS_USER.getValue()),\n        dirString);\n\n    try {\n      PrivilegedOperationExecutor privOpExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(super.getConf());\n\n      String results \u003d\n          privOpExecutor.executePrivilegedOperation(listAsUserOp, true);\n\n      for (String file: results.split(\"\\n\")) {\n        // The container-executor always dumps its log output to stdout, which\n        // includes 3 lines that start with \"main : \"\n        if (!file.startsWith(\"main :\")) {\n          files.add(new File(new File(dirString), file));\n        }\n      }\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"ListAsUser for \" + dir + \" returned with exit code: \"\n          + e.getExitCode(), e);\n    }\n\n    return files.toArray(new File[files.size()]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}