{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "getUserRLEResourceAllocation",
  "functionId": "getUserRLEResourceAllocation___user-String__period-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 151,
  "functionEndLine": 171,
  "numCommitsSeen": 19,
  "timeTaken": 1162,
  "changeHistory": [
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0"
  ],
  "changeHistoryShort": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,21 @@\n+  private RLESparseResourceAllocation getUserRLEResourceAllocation(String user,\n+      long period) {\n+    RLESparseResourceAllocation resAlloc \u003d null;\n+    if (period \u003e 0) {\n+      if (userPeriodicResourceAlloc.containsKey(user)) {\n+        resAlloc \u003d userPeriodicResourceAlloc.get(user);\n+      } else {\n+        resAlloc \u003d new PeriodicRLESparseResourceAllocation(resCalc,\n+            periodicRle.getTimePeriod());\n+        userPeriodicResourceAlloc.put(user, resAlloc);\n+      }\n+    } else {\n+      if (userResourceAlloc.containsKey(user)) {\n+        resAlloc \u003d userResourceAlloc.get(user);\n+      } else {\n+        resAlloc \u003d new RLESparseResourceAllocation(resCalc);\n+        userResourceAlloc.put(user, resAlloc);\n+      }\n+    }\n+    return resAlloc;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private RLESparseResourceAllocation getUserRLEResourceAllocation(String user,\n      long period) {\n    RLESparseResourceAllocation resAlloc \u003d null;\n    if (period \u003e 0) {\n      if (userPeriodicResourceAlloc.containsKey(user)) {\n        resAlloc \u003d userPeriodicResourceAlloc.get(user);\n      } else {\n        resAlloc \u003d new PeriodicRLESparseResourceAllocation(resCalc,\n            periodicRle.getTimePeriod());\n        userPeriodicResourceAlloc.put(user, resAlloc);\n      }\n    } else {\n      if (userResourceAlloc.containsKey(user)) {\n        resAlloc \u003d userResourceAlloc.get(user);\n      } else {\n        resAlloc \u003d new RLESparseResourceAllocation(resCalc);\n        userResourceAlloc.put(user, resAlloc);\n      }\n    }\n    return resAlloc;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}