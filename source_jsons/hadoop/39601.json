{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PriorityUtilizationQueueOrderingPolicy.java",
  "functionName": "compare",
  "functionId": "compare___q1-CSQueue__q2-CSQueue__q1Used-float__q2Used-float__partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/policy/PriorityUtilizationQueueOrderingPolicy.java",
  "functionStartLine": 144,
  "functionEndLine": 175,
  "numCommitsSeen": 4,
  "timeTaken": 702,
  "changeHistory": [
    "a8316df8c05a7b3d1a5577174b838711a49ef971"
  ],
  "changeHistoryShort": {
    "a8316df8c05a7b3d1a5577174b838711a49ef971": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a8316df8c05a7b3d1a5577174b838711a49ef971": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7520. Queue Ordering policy changes for ordering auto created leaf queues within Managed parent Queues. (Suma Shivaprasad via wangda)\n\nChange-Id: I482f086945bd448d512cb5b3879d7371e37ee134\n",
      "commitDate": "08/12/17 3:11 PM",
      "commitName": "a8316df8c05a7b3d1a5577174b838711a49ef971",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,32 @@\n+    private int compare(CSQueue q1, CSQueue q2, float q1Used, float q2Used,\n+        String partition) {\n+\n+      int p1 \u003d 0;\n+      int p2 \u003d 0;\n+      if (respectPriority) {\n+        p1 \u003d q1.getPriority().getPriority();\n+        p2 \u003d q2.getPriority().getPriority();\n+      }\n+\n+      int rc \u003d PriorityUtilizationQueueOrderingPolicy.compare(q1Used, q2Used,\n+          p1, p2);\n+\n+      // For queue with same used ratio / priority, queue with higher configured\n+      // capacity goes first\n+      if (0 \u003d\u003d rc) {\n+        Resource minEffRes1 \u003d\n+            q1.getQueueResourceQuotas().getConfiguredMinResource(partition);\n+        Resource minEffRes2 \u003d\n+            q2.getQueueResourceQuotas().getConfiguredMinResource(partition);\n+        if (!minEffRes1.equals(Resources.none()) \u0026\u0026 !minEffRes2.equals(\n+            Resources.none())) {\n+          return minEffRes2.compareTo(minEffRes1);\n+        }\n+\n+        float abs1 \u003d q1.getQueueCapacities().getAbsoluteCapacity(partition);\n+        float abs2 \u003d q2.getQueueCapacities().getAbsoluteCapacity(partition);\n+        return Float.compare(abs2, abs1);\n+      }\n+\n+      return rc;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int compare(CSQueue q1, CSQueue q2, float q1Used, float q2Used,\n        String partition) {\n\n      int p1 \u003d 0;\n      int p2 \u003d 0;\n      if (respectPriority) {\n        p1 \u003d q1.getPriority().getPriority();\n        p2 \u003d q2.getPriority().getPriority();\n      }\n\n      int rc \u003d PriorityUtilizationQueueOrderingPolicy.compare(q1Used, q2Used,\n          p1, p2);\n\n      // For queue with same used ratio / priority, queue with higher configured\n      // capacity goes first\n      if (0 \u003d\u003d rc) {\n        Resource minEffRes1 \u003d\n            q1.getQueueResourceQuotas().getConfiguredMinResource(partition);\n        Resource minEffRes2 \u003d\n            q2.getQueueResourceQuotas().getConfiguredMinResource(partition);\n        if (!minEffRes1.equals(Resources.none()) \u0026\u0026 !minEffRes2.equals(\n            Resources.none())) {\n          return minEffRes2.compareTo(minEffRes1);\n        }\n\n        float abs1 \u003d q1.getQueueCapacities().getAbsoluteCapacity(partition);\n        float abs2 \u003d q2.getQueueCapacities().getAbsoluteCapacity(partition);\n        return Float.compare(abs2, abs1);\n      }\n\n      return rc;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/policy/PriorityUtilizationQueueOrderingPolicy.java"
    }
  }
}