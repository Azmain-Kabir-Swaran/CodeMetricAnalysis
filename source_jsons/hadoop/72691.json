{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "call",
  "functionId": "call___conn-HttpURLConnection__jsonOutput-Object__expectedResponse-int__klass-Class__T__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 538,
  "functionEndLine": 541,
  "numCommitsSeen": 124,
  "timeTaken": 2862,
  "changeHistory": [
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
    "2d8e6e2c4a52a4ba815b23d6d1ac21be4df23d9e",
    "a4c9b80a7c2b30404840f39f2f46646479914345",
    "70b218748badf079c859c3af2b468a0b7b49c333",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": "Yparameterchange",
    "2d8e6e2c4a52a4ba815b23d6d1ac21be4df23d9e": "Ybodychange",
    "a4c9b80a7c2b30404840f39f2f46646479914345": "Ymultichange(Ymodifierchange,Ybodychange)",
    "70b218748badf079c859c3af2b468a0b7b49c333": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-14705. Add batched interface reencryptEncryptedKeys to KMS.\n",
      "commitDate": "22/08/17 7:47 AM",
      "commitName": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "14/07/17 10:22 PM",
      "commitNameOld": "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 38.39,
      "commitsBetweenForRepo": 268,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n-  private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n+  private \u003cT\u003e T call(HttpURLConnection conn, Object jsonOutput,\n       int expectedResponse, Class\u003cT\u003e klass) throws IOException {\n     return call(conn, jsonOutput, expectedResponse, klass, authRetry);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e T call(HttpURLConnection conn, Object jsonOutput,\n      int expectedResponse, Class\u003cT\u003e klass) throws IOException {\n    return call(conn, jsonOutput, expectedResponse, klass, authRetry);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {
        "oldValue": "[conn-HttpURLConnection, jsonOutput-Map, expectedResponse-int, klass-Class\u003cT\u003e]",
        "newValue": "[conn-HttpURLConnection, jsonOutput-Object, expectedResponse-int, klass-Class\u003cT\u003e]"
      }
    },
    "2d8e6e2c4a52a4ba815b23d6d1ac21be4df23d9e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11151. Automatically refresh auth token and retry on auth failure. Contributed by Arun Suresh.\n",
      "commitDate": "02/10/14 7:54 PM",
      "commitName": "2d8e6e2c4a52a4ba815b23d6d1ac21be4df23d9e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "30/09/14 4:48 PM",
      "commitNameOld": "a4c9b80a7c2b30404840f39f2f46646479914345",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,4 @@\n   private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n-      int expectedResponse, Class\u003cT\u003e klass)\n-      throws IOException {\n-    T ret \u003d null;\n-    try {\n-      if (jsonOutput !\u003d null) {\n-        writeJson(jsonOutput, conn.getOutputStream());\n-      }\n-    } catch (IOException ex) {\n-      conn.getInputStream().close();\n-      throw ex;\n-    }\n-    if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN) {\n-      // Ideally, this should happen only when there is an Authentication\n-      // failure. Unfortunately, the AuthenticationFilter returns 403 when it\n-      // cannot authenticate (Since a 401 requires Server to send\n-      // WWW-Authenticate header as well)..\n-      KMSClientProvider.this.authToken \u003d\n-          new DelegationTokenAuthenticatedURL.Token();\n-    }\n-    HttpExceptionUtils.validateResponse(conn, expectedResponse);\n-    if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n-        \u0026\u0026 klass !\u003d null) {\n-      ObjectMapper mapper \u003d new ObjectMapper();\n-      InputStream is \u003d null;\n-      try {\n-        is \u003d conn.getInputStream();\n-        ret \u003d mapper.readValue(is, klass);\n-      } catch (IOException ex) {\n-        if (is !\u003d null) {\n-          is.close();\n-        }\n-        throw ex;\n-      } finally {\n-        if (is !\u003d null) {\n-          is.close();\n-        }\n-      }\n-    }\n-    return ret;\n+      int expectedResponse, Class\u003cT\u003e klass) throws IOException {\n+    return call(conn, jsonOutput, expectedResponse, klass, authRetry);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n      int expectedResponse, Class\u003cT\u003e klass) throws IOException {\n    return call(conn, jsonOutput, expectedResponse, klass, authRetry);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "a4c9b80a7c2b30404840f39f2f46646479914345": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-11113. Namenode not able to reconnect to KMS after KMS restart. (Arun Suresh via wang)\n",
      "commitDate": "30/09/14 4:48 PM",
      "commitName": "a4c9b80a7c2b30404840f39f2f46646479914345",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-11113. Namenode not able to reconnect to KMS after KMS restart. (Arun Suresh via wang)\n",
          "commitDate": "30/09/14 4:48 PM",
          "commitName": "a4c9b80a7c2b30404840f39f2f46646479914345",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/14 4:03 PM",
          "commitNameOld": "fad4cd85b313a1d2378adcf03cad67e946a12cd5",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 12.03,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  private static \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n+  private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n       int expectedResponse, Class\u003cT\u003e klass)\n       throws IOException {\n     T ret \u003d null;\n     try {\n       if (jsonOutput !\u003d null) {\n         writeJson(jsonOutput, conn.getOutputStream());\n       }\n     } catch (IOException ex) {\n       conn.getInputStream().close();\n       throw ex;\n     }\n+    if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN) {\n+      // Ideally, this should happen only when there is an Authentication\n+      // failure. Unfortunately, the AuthenticationFilter returns 403 when it\n+      // cannot authenticate (Since a 401 requires Server to send\n+      // WWW-Authenticate header as well)..\n+      KMSClientProvider.this.authToken \u003d\n+          new DelegationTokenAuthenticatedURL.Token();\n+    }\n     HttpExceptionUtils.validateResponse(conn, expectedResponse);\n     if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n         \u0026\u0026 klass !\u003d null) {\n       ObjectMapper mapper \u003d new ObjectMapper();\n       InputStream is \u003d null;\n       try {\n         is \u003d conn.getInputStream();\n         ret \u003d mapper.readValue(is, klass);\n       } catch (IOException ex) {\n         if (is !\u003d null) {\n           is.close();\n         }\n         throw ex;\n       } finally {\n         if (is !\u003d null) {\n           is.close();\n         }\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n      int expectedResponse, Class\u003cT\u003e klass)\n      throws IOException {\n    T ret \u003d null;\n    try {\n      if (jsonOutput !\u003d null) {\n        writeJson(jsonOutput, conn.getOutputStream());\n      }\n    } catch (IOException ex) {\n      conn.getInputStream().close();\n      throw ex;\n    }\n    if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN) {\n      // Ideally, this should happen only when there is an Authentication\n      // failure. Unfortunately, the AuthenticationFilter returns 403 when it\n      // cannot authenticate (Since a 401 requires Server to send\n      // WWW-Authenticate header as well)..\n      KMSClientProvider.this.authToken \u003d\n          new DelegationTokenAuthenticatedURL.Token();\n    }\n    HttpExceptionUtils.validateResponse(conn, expectedResponse);\n    if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n        \u0026\u0026 klass !\u003d null) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      InputStream is \u003d null;\n      try {\n        is \u003d conn.getInputStream();\n        ret \u003d mapper.readValue(is, klass);\n      } catch (IOException ex) {\n        if (is !\u003d null) {\n          is.close();\n        }\n        throw ex;\n      } finally {\n        if (is !\u003d null) {\n          is.close();\n        }\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11113. Namenode not able to reconnect to KMS after KMS restart. (Arun Suresh via wang)\n",
          "commitDate": "30/09/14 4:48 PM",
          "commitName": "a4c9b80a7c2b30404840f39f2f46646479914345",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/09/14 4:03 PM",
          "commitNameOld": "fad4cd85b313a1d2378adcf03cad67e946a12cd5",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 12.03,
          "commitsBetweenForRepo": 124,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  private static \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n+  private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n       int expectedResponse, Class\u003cT\u003e klass)\n       throws IOException {\n     T ret \u003d null;\n     try {\n       if (jsonOutput !\u003d null) {\n         writeJson(jsonOutput, conn.getOutputStream());\n       }\n     } catch (IOException ex) {\n       conn.getInputStream().close();\n       throw ex;\n     }\n+    if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN) {\n+      // Ideally, this should happen only when there is an Authentication\n+      // failure. Unfortunately, the AuthenticationFilter returns 403 when it\n+      // cannot authenticate (Since a 401 requires Server to send\n+      // WWW-Authenticate header as well)..\n+      KMSClientProvider.this.authToken \u003d\n+          new DelegationTokenAuthenticatedURL.Token();\n+    }\n     HttpExceptionUtils.validateResponse(conn, expectedResponse);\n     if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n         \u0026\u0026 klass !\u003d null) {\n       ObjectMapper mapper \u003d new ObjectMapper();\n       InputStream is \u003d null;\n       try {\n         is \u003d conn.getInputStream();\n         ret \u003d mapper.readValue(is, klass);\n       } catch (IOException ex) {\n         if (is !\u003d null) {\n           is.close();\n         }\n         throw ex;\n       } finally {\n         if (is !\u003d null) {\n           is.close();\n         }\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n      int expectedResponse, Class\u003cT\u003e klass)\n      throws IOException {\n    T ret \u003d null;\n    try {\n      if (jsonOutput !\u003d null) {\n        writeJson(jsonOutput, conn.getOutputStream());\n      }\n    } catch (IOException ex) {\n      conn.getInputStream().close();\n      throw ex;\n    }\n    if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_FORBIDDEN) {\n      // Ideally, this should happen only when there is an Authentication\n      // failure. Unfortunately, the AuthenticationFilter returns 403 when it\n      // cannot authenticate (Since a 401 requires Server to send\n      // WWW-Authenticate header as well)..\n      KMSClientProvider.this.authToken \u003d\n          new DelegationTokenAuthenticatedURL.Token();\n    }\n    HttpExceptionUtils.validateResponse(conn, expectedResponse);\n    if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n        \u0026\u0026 klass !\u003d null) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      InputStream is \u003d null;\n      try {\n        is \u003d conn.getInputStream();\n        ret \u003d mapper.readValue(is, klass);\n      } catch (IOException ex) {\n        if (is !\u003d null) {\n          is.close();\n        }\n        throw ex;\n      } finally {\n        if (is !\u003d null) {\n          is.close();\n        }\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "70b218748badf079c859c3af2b468a0b7b49c333": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11015. Http server/client utils to propagate and recreate Exceptions from server to client. (tucu)\n",
      "commitDate": "04/09/14 9:11 AM",
      "commitName": "70b218748badf079c859c3af2b468a0b7b49c333",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/08/14 2:21 PM",
      "commitNameOld": "c60da4d3b31e5fa0c4b27cf75ab7ed4add56396a",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 5.78,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private static \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n       int expectedResponse, Class\u003cT\u003e klass)\n       throws IOException {\n     T ret \u003d null;\n     try {\n       if (jsonOutput !\u003d null) {\n         writeJson(jsonOutput, conn.getOutputStream());\n       }\n     } catch (IOException ex) {\n       conn.getInputStream().close();\n       throw ex;\n     }\n-    validateResponse(conn, expectedResponse);\n+    HttpExceptionUtils.validateResponse(conn, expectedResponse);\n     if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n         \u0026\u0026 klass !\u003d null) {\n       ObjectMapper mapper \u003d new ObjectMapper();\n       InputStream is \u003d null;\n       try {\n         is \u003d conn.getInputStream();\n         ret \u003d mapper.readValue(is, klass);\n       } catch (IOException ex) {\n         if (is !\u003d null) {\n           is.close();\n         }\n         throw ex;\n       } finally {\n         if (is !\u003d null) {\n           is.close();\n         }\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n      int expectedResponse, Class\u003cT\u003e klass)\n      throws IOException {\n    T ret \u003d null;\n    try {\n      if (jsonOutput !\u003d null) {\n        writeJson(jsonOutput, conn.getOutputStream());\n      }\n    } catch (IOException ex) {\n      conn.getInputStream().close();\n      throw ex;\n    }\n    HttpExceptionUtils.validateResponse(conn, expectedResponse);\n    if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n        \u0026\u0026 klass !\u003d null) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      InputStream is \u003d null;\n      try {\n        is \u003d conn.getInputStream();\n        ret \u003d mapper.readValue(is, klass);\n      } catch (IOException ex) {\n        if (is !\u003d null) {\n          is.close();\n        }\n        throw ex;\n      } finally {\n        if (is !\u003d null) {\n          is.close();\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,33 @@\n+  private static \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n+      int expectedResponse, Class\u003cT\u003e klass)\n+      throws IOException {\n+    T ret \u003d null;\n+    try {\n+      if (jsonOutput !\u003d null) {\n+        writeJson(jsonOutput, conn.getOutputStream());\n+      }\n+    } catch (IOException ex) {\n+      conn.getInputStream().close();\n+      throw ex;\n+    }\n+    validateResponse(conn, expectedResponse);\n+    if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n+        \u0026\u0026 klass !\u003d null) {\n+      ObjectMapper mapper \u003d new ObjectMapper();\n+      InputStream is \u003d null;\n+      try {\n+        is \u003d conn.getInputStream();\n+        ret \u003d mapper.readValue(is, klass);\n+      } catch (IOException ex) {\n+        if (is !\u003d null) {\n+          is.close();\n+        }\n+        throw ex;\n+      } finally {\n+        if (is !\u003d null) {\n+          is.close();\n+        }\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static \u003cT\u003e T call(HttpURLConnection conn, Map jsonOutput,\n      int expectedResponse, Class\u003cT\u003e klass)\n      throws IOException {\n    T ret \u003d null;\n    try {\n      if (jsonOutput !\u003d null) {\n        writeJson(jsonOutput, conn.getOutputStream());\n      }\n    } catch (IOException ex) {\n      conn.getInputStream().close();\n      throw ex;\n    }\n    validateResponse(conn, expectedResponse);\n    if (APPLICATION_JSON_MIME.equalsIgnoreCase(conn.getContentType())\n        \u0026\u0026 klass !\u003d null) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      InputStream is \u003d null;\n      try {\n        is \u003d conn.getInputStream();\n        ret \u003d mapper.readValue(is, klass);\n      } catch (IOException ex) {\n        if (is !\u003d null) {\n          is.close();\n        }\n        throw ex;\n      } finally {\n        if (is !\u003d null) {\n          is.close();\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}