{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecommissioningNodesWatcher.java",
  "functionName": "checkDecommissioningStatus",
  "functionId": "checkDecommissioningStatus___nodeId-NodeId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
  "functionStartLine": 232,
  "functionEndLine": 256,
  "numCommitsSeen": 7,
  "timeTaken": 1780,
  "changeHistory": [
    "304a47e22cb836cfde227803c853ecf4def870e1",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421"
  ],
  "changeHistoryShort": {
    "304a47e22cb836cfde227803c853ecf4def870e1": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "304a47e22cb836cfde227803c853ecf4def870e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9608. DecommissioningNodesWatcher should get lists of running applications on node from RMNode. Contributed by Abhishek Modi.\n",
      "commitDate": "17/06/19 2:09 AM",
      "commitName": "304a47e22cb836cfde227803c853ecf4def870e1",
      "commitAuthor": "Zhankun Tang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 93.41,
      "commitsBetweenForRepo": 582,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   public DecommissioningNodeStatus checkDecommissioningStatus(NodeId nodeId) {\n     DecommissioningNodeContext context \u003d decomNodes.get(nodeId);\n     if (context \u003d\u003d null) {\n       return DecommissioningNodeStatus.NONE;\n     }\n \n     if (context.nodeState \u003d\u003d NodeState.DECOMMISSIONED) {\n       return DecommissioningNodeStatus.DECOMMISSIONED;\n     }\n \n     long waitTime \u003d mclock.getTime() - context.decommissioningStartTime;\n     if (context.numActiveContainers \u003e 0) {\n       return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n           DecommissioningNodeStatus.WAIT_CONTAINER :\n           DecommissioningNodeStatus.TIMEOUT;\n     }\n \n-    removeCompletedApps(context);\n     if (context.appIds.size() \u003d\u003d 0) {\n       return DecommissioningNodeStatus.READY;\n     } else {\n       return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n           DecommissioningNodeStatus.WAIT_APP :\n           DecommissioningNodeStatus.TIMEOUT;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DecommissioningNodeStatus checkDecommissioningStatus(NodeId nodeId) {\n    DecommissioningNodeContext context \u003d decomNodes.get(nodeId);\n    if (context \u003d\u003d null) {\n      return DecommissioningNodeStatus.NONE;\n    }\n\n    if (context.nodeState \u003d\u003d NodeState.DECOMMISSIONED) {\n      return DecommissioningNodeStatus.DECOMMISSIONED;\n    }\n\n    long waitTime \u003d mclock.getTime() - context.decommissioningStartTime;\n    if (context.numActiveContainers \u003e 0) {\n      return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n          DecommissioningNodeStatus.WAIT_CONTAINER :\n          DecommissioningNodeStatus.TIMEOUT;\n    }\n\n    if (context.appIds.size() \u003d\u003d 0) {\n      return DecommissioningNodeStatus.READY;\n    } else {\n      return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n          DecommissioningNodeStatus.WAIT_APP :\n          DecommissioningNodeStatus.TIMEOUT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,26 @@\n+  public DecommissioningNodeStatus checkDecommissioningStatus(NodeId nodeId) {\n+    DecommissioningNodeContext context \u003d decomNodes.get(nodeId);\n+    if (context \u003d\u003d null) {\n+      return DecommissioningNodeStatus.NONE;\n+    }\n+\n+    if (context.nodeState \u003d\u003d NodeState.DECOMMISSIONED) {\n+      return DecommissioningNodeStatus.DECOMMISSIONED;\n+    }\n+\n+    long waitTime \u003d mclock.getTime() - context.decommissioningStartTime;\n+    if (context.numActiveContainers \u003e 0) {\n+      return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n+          DecommissioningNodeStatus.WAIT_CONTAINER :\n+          DecommissioningNodeStatus.TIMEOUT;\n+    }\n+\n+    removeCompletedApps(context);\n+    if (context.appIds.size() \u003d\u003d 0) {\n+      return DecommissioningNodeStatus.READY;\n+    } else {\n+      return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n+          DecommissioningNodeStatus.WAIT_APP :\n+          DecommissioningNodeStatus.TIMEOUT;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DecommissioningNodeStatus checkDecommissioningStatus(NodeId nodeId) {\n    DecommissioningNodeContext context \u003d decomNodes.get(nodeId);\n    if (context \u003d\u003d null) {\n      return DecommissioningNodeStatus.NONE;\n    }\n\n    if (context.nodeState \u003d\u003d NodeState.DECOMMISSIONED) {\n      return DecommissioningNodeStatus.DECOMMISSIONED;\n    }\n\n    long waitTime \u003d mclock.getTime() - context.decommissioningStartTime;\n    if (context.numActiveContainers \u003e 0) {\n      return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n          DecommissioningNodeStatus.WAIT_CONTAINER :\n          DecommissioningNodeStatus.TIMEOUT;\n    }\n\n    removeCompletedApps(context);\n    if (context.appIds.size() \u003d\u003d 0) {\n      return DecommissioningNodeStatus.READY;\n    } else {\n      return (context.timeoutMs \u003c 0 || waitTime \u003c context.timeoutMs)?\n          DecommissioningNodeStatus.WAIT_APP :\n          DecommissioningNodeStatus.TIMEOUT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java"
    }
  }
}