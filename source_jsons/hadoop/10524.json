{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "checkNNVersion",
  "functionId": "checkNNVersion___nsInfo-NamespaceInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 265,
  "functionEndLine": 282,
  "numCommitsSeen": 148,
  "timeTaken": 3190,
  "changeHistory": [
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7",
    "1e346aa829519f8a2aa830e76d9856f914861805",
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd",
    "1f92266516c882e43fa453b876dd8ca09893c477"
  ],
  "changeHistoryShort": {
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7": "Ybodychange",
    "1e346aa829519f8a2aa830e76d9856f914861805": "Ymultichange(Ymovefromfile,Ybodychange)",
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd": "Ymovefromfile",
    "1f92266516c882e43fa453b876dd8ca09893c477": "Yintroduced"
  },
  "changeHistoryDetails": {
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5874. Should not compare DataNode current layout version with that of NameNode in DataStrorage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1565750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 10:25 AM",
      "commitName": "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "01/02/14 1:01 AM",
      "commitNameOld": "35e59eeaa2b6692f3ea4db643923ff2b277c7e57",
      "commitAuthorOld": "",
      "daysBetweenCommits": 6.39,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,18 @@\n   private void checkNNVersion(NamespaceInfo nsInfo)\n       throws IncorrectVersionException {\n     // build and layout versions should match\n     String nnVersion \u003d nsInfo.getSoftwareVersion();\n     String minimumNameNodeVersion \u003d dnConf.getMinimumNameNodeVersion();\n     if (VersionUtil.compareVersions(nnVersion, minimumNameNodeVersion) \u003c 0) {\n       IncorrectVersionException ive \u003d new IncorrectVersionException(\n           minimumNameNodeVersion, nnVersion, \"NameNode\", \"DataNode\");\n       LOG.warn(ive.getMessage());\n       throw ive;\n     }\n     String dnVersion \u003d VersionInfo.getVersion();\n     if (!nnVersion.equals(dnVersion)) {\n       LOG.info(\"Reported NameNode version \u0027\" + nnVersion + \"\u0027 does not match \" +\n           \"DataNode version \u0027\" + dnVersion + \"\u0027 but is within acceptable \" +\n           \"limits. Note: This is normal during a rolling upgrade.\");\n     }\n-    \n-    if (HdfsConstants.DATANODE_LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n-      LOG.info(\"DataNode and NameNode layout versions are different:\" +\n-        \" DataNode version: \"+ HdfsConstants.DATANODE_LAYOUT_VERSION +\n-        \" NameNode version: \"+ nsInfo.getLayoutVersion());\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkNNVersion(NamespaceInfo nsInfo)\n      throws IncorrectVersionException {\n    // build and layout versions should match\n    String nnVersion \u003d nsInfo.getSoftwareVersion();\n    String minimumNameNodeVersion \u003d dnConf.getMinimumNameNodeVersion();\n    if (VersionUtil.compareVersions(nnVersion, minimumNameNodeVersion) \u003c 0) {\n      IncorrectVersionException ive \u003d new IncorrectVersionException(\n          minimumNameNodeVersion, nnVersion, \"NameNode\", \"DataNode\");\n      LOG.warn(ive.getMessage());\n      throw ive;\n    }\n    String dnVersion \u003d VersionInfo.getVersion();\n    if (!nnVersion.equals(dnVersion)) {\n      LOG.info(\"Reported NameNode version \u0027\" + nnVersion + \"\u0027 does not match \" +\n          \"DataNode version \u0027\" + dnVersion + \"\u0027 but is within acceptable \" +\n          \"limits. Note: This is normal during a rolling upgrade.\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "15/12/13 4:58 PM",
      "commitNameOld": "938565925adb9d866e8c6951361cd5582076e013",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 46.1,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   private void checkNNVersion(NamespaceInfo nsInfo)\n       throws IncorrectVersionException {\n     // build and layout versions should match\n     String nnVersion \u003d nsInfo.getSoftwareVersion();\n     String minimumNameNodeVersion \u003d dnConf.getMinimumNameNodeVersion();\n     if (VersionUtil.compareVersions(nnVersion, minimumNameNodeVersion) \u003c 0) {\n       IncorrectVersionException ive \u003d new IncorrectVersionException(\n           minimumNameNodeVersion, nnVersion, \"NameNode\", \"DataNode\");\n       LOG.warn(ive.getMessage());\n       throw ive;\n     }\n     String dnVersion \u003d VersionInfo.getVersion();\n     if (!nnVersion.equals(dnVersion)) {\n       LOG.info(\"Reported NameNode version \u0027\" + nnVersion + \"\u0027 does not match \" +\n           \"DataNode version \u0027\" + dnVersion + \"\u0027 but is within acceptable \" +\n           \"limits. Note: This is normal during a rolling upgrade.\");\n     }\n-\n-    if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n-      LOG.warn(\"DataNode and NameNode layout versions must be the same.\" +\n-        \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n-        \" actual \"+ nsInfo.getLayoutVersion());\n-      throw new IncorrectVersionException(\n-          nsInfo.getLayoutVersion(), \"namenode\");\n+    \n+    if (HdfsConstants.DATANODE_LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n+      LOG.info(\"DataNode and NameNode layout versions are different:\" +\n+        \" DataNode version: \"+ HdfsConstants.DATANODE_LAYOUT_VERSION +\n+        \" NameNode version: \"+ nsInfo.getLayoutVersion());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkNNVersion(NamespaceInfo nsInfo)\n      throws IncorrectVersionException {\n    // build and layout versions should match\n    String nnVersion \u003d nsInfo.getSoftwareVersion();\n    String minimumNameNodeVersion \u003d dnConf.getMinimumNameNodeVersion();\n    if (VersionUtil.compareVersions(nnVersion, minimumNameNodeVersion) \u003c 0) {\n      IncorrectVersionException ive \u003d new IncorrectVersionException(\n          minimumNameNodeVersion, nnVersion, \"NameNode\", \"DataNode\");\n      LOG.warn(ive.getMessage());\n      throw ive;\n    }\n    String dnVersion \u003d VersionInfo.getVersion();\n    if (!nnVersion.equals(dnVersion)) {\n      LOG.info(\"Reported NameNode version \u0027\" + nnVersion + \"\u0027 does not match \" +\n          \"DataNode version \u0027\" + dnVersion + \"\u0027 but is within acceptable \" +\n          \"limits. Note: This is normal during a rolling upgrade.\");\n    }\n    \n    if (HdfsConstants.DATANODE_LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n      LOG.info(\"DataNode and NameNode layout versions are different:\" +\n        \" DataNode version: \"+ HdfsConstants.DATANODE_LAYOUT_VERSION +\n        \" NameNode version: \"+ nsInfo.getLayoutVersion());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2983. Relax the build version check to permit rolling upgrades within a release. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1325110 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/12 8:36 PM",
      "commitName": "7f427646dfe80f9a4dfac0a979709f367e74a7e7",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "09/04/12 10:12 PM",
      "commitNameOld": "df3e1a31582653f1c4e187ae7466aee6cb27e4d4",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   private void checkNNVersion(NamespaceInfo nsInfo)\n       throws IncorrectVersionException {\n     // build and layout versions should match\n-    String nsBuildVer \u003d nsInfo.getBuildVersion();\n-    String stBuildVer \u003d Storage.getBuildVersion();\n-    if (!nsBuildVer.equals(stBuildVer)) {\n-      LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n-        \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n-        \"build version: \" + stBuildVer);\n-      throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n+    String nnVersion \u003d nsInfo.getSoftwareVersion();\n+    String minimumNameNodeVersion \u003d dnConf.getMinimumNameNodeVersion();\n+    if (VersionUtil.compareVersions(nnVersion, minimumNameNodeVersion) \u003c 0) {\n+      IncorrectVersionException ive \u003d new IncorrectVersionException(\n+          minimumNameNodeVersion, nnVersion, \"NameNode\", \"DataNode\");\n+      LOG.warn(ive.getMessage());\n+      throw ive;\n+    }\n+    String dnVersion \u003d VersionInfo.getVersion();\n+    if (!nnVersion.equals(dnVersion)) {\n+      LOG.info(\"Reported NameNode version \u0027\" + nnVersion + \"\u0027 does not match \" +\n+          \"DataNode version \u0027\" + dnVersion + \"\u0027 but is within acceptable \" +\n+          \"limits. Note: This is normal during a rolling upgrade.\");\n     }\n \n     if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n-      LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n+      LOG.warn(\"DataNode and NameNode layout versions must be the same.\" +\n         \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n         \" actual \"+ nsInfo.getLayoutVersion());\n       throw new IncorrectVersionException(\n           nsInfo.getLayoutVersion(), \"namenode\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkNNVersion(NamespaceInfo nsInfo)\n      throws IncorrectVersionException {\n    // build and layout versions should match\n    String nnVersion \u003d nsInfo.getSoftwareVersion();\n    String minimumNameNodeVersion \u003d dnConf.getMinimumNameNodeVersion();\n    if (VersionUtil.compareVersions(nnVersion, minimumNameNodeVersion) \u003c 0) {\n      IncorrectVersionException ive \u003d new IncorrectVersionException(\n          minimumNameNodeVersion, nnVersion, \"NameNode\", \"DataNode\");\n      LOG.warn(ive.getMessage());\n      throw ive;\n    }\n    String dnVersion \u003d VersionInfo.getVersion();\n    if (!nnVersion.equals(dnVersion)) {\n      LOG.info(\"Reported NameNode version \u0027\" + nnVersion + \"\u0027 does not match \" +\n          \"DataNode version \u0027\" + dnVersion + \"\u0027 but is within acceptable \" +\n          \"limits. Note: This is normal during a rolling upgrade.\");\n    }\n\n    if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n      LOG.warn(\"DataNode and NameNode layout versions must be the same.\" +\n        \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n        \" actual \"+ nsInfo.getLayoutVersion());\n      throw new IncorrectVersionException(\n          nsInfo.getLayoutVersion(), \"namenode\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "1e346aa829519f8a2aa830e76d9856f914861805": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 5:10 PM",
      "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   private void checkNNVersion(NamespaceInfo nsInfo)\n       throws IncorrectVersionException {\n     // build and layout versions should match\n     String nsBuildVer \u003d nsInfo.getBuildVersion();\n     String stBuildVer \u003d Storage.getBuildVersion();\n     if (!nsBuildVer.equals(stBuildVer)) {\n       LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n         \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n         \"build version: \" + stBuildVer);\n       throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n     }\n \n     if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n       LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n         \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n-        \" actual \"+ bpNSInfo.getLayoutVersion());\n+        \" actual \"+ nsInfo.getLayoutVersion());\n       throw new IncorrectVersionException(\n-          bpNSInfo.getLayoutVersion(), \"namenode\");\n+          nsInfo.getLayoutVersion(), \"namenode\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkNNVersion(NamespaceInfo nsInfo)\n      throws IncorrectVersionException {\n    // build and layout versions should match\n    String nsBuildVer \u003d nsInfo.getBuildVersion();\n    String stBuildVer \u003d Storage.getBuildVersion();\n    if (!nsBuildVer.equals(stBuildVer)) {\n      LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n        \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n        \"build version: \" + stBuildVer);\n      throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n    }\n\n    if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n      LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n        \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n        \" actual \"+ nsInfo.getLayoutVersion());\n      throw new IncorrectVersionException(\n          nsInfo.getLayoutVersion(), \"namenode\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
            "oldMethodName": "checkNNVersion",
            "newMethodName": "checkNNVersion"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   private void checkNNVersion(NamespaceInfo nsInfo)\n       throws IncorrectVersionException {\n     // build and layout versions should match\n     String nsBuildVer \u003d nsInfo.getBuildVersion();\n     String stBuildVer \u003d Storage.getBuildVersion();\n     if (!nsBuildVer.equals(stBuildVer)) {\n       LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n         \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n         \"build version: \" + stBuildVer);\n       throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n     }\n \n     if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n       LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n         \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n-        \" actual \"+ bpNSInfo.getLayoutVersion());\n+        \" actual \"+ nsInfo.getLayoutVersion());\n       throw new IncorrectVersionException(\n-          bpNSInfo.getLayoutVersion(), \"namenode\");\n+          nsInfo.getLayoutVersion(), \"namenode\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkNNVersion(NamespaceInfo nsInfo)\n      throws IncorrectVersionException {\n    // build and layout versions should match\n    String nsBuildVer \u003d nsInfo.getBuildVersion();\n    String stBuildVer \u003d Storage.getBuildVersion();\n    if (!nsBuildVer.equals(stBuildVer)) {\n      LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n        \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n        \"build version: \" + stBuildVer);\n      throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n    }\n\n    if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n      LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n        \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n        \" actual \"+ nsInfo.getLayoutVersion());\n      throw new IncorrectVersionException(\n          nsInfo.getLayoutVersion(), \"namenode\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-2566. Move BPOfferService to be a non-inner class. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/11 11:27 AM",
      "commitName": "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "21/11/11 11:03 AM",
      "commitNameOld": "68173af69d2fbda3292404c90a5077483e14d6f4",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n-    private void checkNNVersion(NamespaceInfo nsInfo)\n-        throws IncorrectVersionException {\n-      // build and layout versions should match\n-      String nsBuildVer \u003d nsInfo.getBuildVersion();\n-      String stBuildVer \u003d Storage.getBuildVersion();\n-      if (!nsBuildVer.equals(stBuildVer)) {\n-        LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n-          \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n-          \"build version: \" + stBuildVer);\n-        throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n-      }\n+  private void checkNNVersion(NamespaceInfo nsInfo)\n+      throws IncorrectVersionException {\n+    // build and layout versions should match\n+    String nsBuildVer \u003d nsInfo.getBuildVersion();\n+    String stBuildVer \u003d Storage.getBuildVersion();\n+    if (!nsBuildVer.equals(stBuildVer)) {\n+      LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n+        \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n+        \"build version: \" + stBuildVer);\n+      throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n+    }\n \n-      if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n-        LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n-          \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n-          \" actual \"+ bpNSInfo.getLayoutVersion());\n-        throw new IncorrectVersionException(\n-            bpNSInfo.getLayoutVersion(), \"namenode\");\n-      }\n-    }\n\\ No newline at end of file\n+    if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n+      LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n+        \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n+        \" actual \"+ bpNSInfo.getLayoutVersion());\n+      throw new IncorrectVersionException(\n+          bpNSInfo.getLayoutVersion(), \"namenode\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkNNVersion(NamespaceInfo nsInfo)\n      throws IncorrectVersionException {\n    // build and layout versions should match\n    String nsBuildVer \u003d nsInfo.getBuildVersion();\n    String stBuildVer \u003d Storage.getBuildVersion();\n    if (!nsBuildVer.equals(stBuildVer)) {\n      LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n        \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n        \"build version: \" + stBuildVer);\n      throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n    }\n\n    if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n      LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n        \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n        \" actual \"+ bpNSInfo.getLayoutVersion());\n      throw new IncorrectVersionException(\n          bpNSInfo.getLayoutVersion(), \"namenode\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
        "oldMethodName": "checkNNVersion",
        "newMethodName": "checkNNVersion"
      }
    },
    "1f92266516c882e43fa453b876dd8ca09893c477": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2563. Some cleanup in BPOfferService. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203943 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:31 PM",
      "commitName": "1f92266516c882e43fa453b876dd8ca09893c477",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+    private void checkNNVersion(NamespaceInfo nsInfo)\n+        throws IncorrectVersionException {\n+      // build and layout versions should match\n+      String nsBuildVer \u003d nsInfo.getBuildVersion();\n+      String stBuildVer \u003d Storage.getBuildVersion();\n+      if (!nsBuildVer.equals(stBuildVer)) {\n+        LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n+          \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n+          \"build version: \" + stBuildVer);\n+        throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n+      }\n+\n+      if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n+        LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n+          \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n+          \" actual \"+ bpNSInfo.getLayoutVersion());\n+        throw new IncorrectVersionException(\n+            bpNSInfo.getLayoutVersion(), \"namenode\");\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkNNVersion(NamespaceInfo nsInfo)\n        throws IncorrectVersionException {\n      // build and layout versions should match\n      String nsBuildVer \u003d nsInfo.getBuildVersion();\n      String stBuildVer \u003d Storage.getBuildVersion();\n      if (!nsBuildVer.equals(stBuildVer)) {\n        LOG.warn(\"Data-node and name-node Build versions must be the same. \" +\n          \"Namenode build version: \" + nsBuildVer + \"Datanode \" +\n          \"build version: \" + stBuildVer);\n        throw new IncorrectVersionException(nsBuildVer, \"namenode\", stBuildVer);\n      }\n\n      if (HdfsConstants.LAYOUT_VERSION !\u003d nsInfo.getLayoutVersion()) {\n        LOG.warn(\"Data-node and name-node layout versions must be the same.\" +\n          \" Expected: \"+ HdfsConstants.LAYOUT_VERSION +\n          \" actual \"+ bpNSInfo.getLayoutVersion());\n        throw new IncorrectVersionException(\n            bpNSInfo.getLayoutVersion(), \"namenode\");\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}