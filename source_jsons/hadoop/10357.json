{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IncrementalBlockReportManager.java",
  "functionName": "sendIBRs",
  "functionId": "sendIBRs___namenode-DatanodeProtocol__registration-DatanodeRegistration__bpid-String__nnRpcLatencySuffix-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
  "functionStartLine": 196,
  "functionEndLine": 230,
  "numCommitsSeen": 13,
  "timeTaken": 5041,
  "changeHistory": [
    "52d7b745c6d95e799542d6409dac30d0418ce8a8",
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
    "1168ece59640d8ad3166e355d2e82deec2fbaf14",
    "d1d4e16690cc85f7f22fbead9cf596260819b561",
    "4e5e1c0f9938e51699c0437731e7b2eef699d6da"
  ],
  "changeHistoryShort": {
    "52d7b745c6d95e799542d6409dac30d0418ce8a8": "Ybodychange",
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "1168ece59640d8ad3166e355d2e82deec2fbaf14": "Ymultichange(Yparameterchange,Ybodychange)",
    "d1d4e16690cc85f7f22fbead9cf596260819b561": "Ybodychange",
    "4e5e1c0f9938e51699c0437731e7b2eef699d6da": "Yintroduced"
  },
  "changeHistoryDetails": {
    "52d7b745c6d95e799542d6409dac30d0418ce8a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15062. Add LOG when sendIBRs failed. Contributed by Fei Hui.\n",
      "commitDate": "19/12/19 9:42 AM",
      "commitName": "52d7b745c6d95e799542d6409dac30d0418ce8a8",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "15/11/18 10:58 AM",
      "commitNameOld": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 398.95,
      "commitsBetweenForRepo": 2754,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n       String bpid, String nnRpcLatencySuffix) throws IOException {\n     // Generate a list of the pending reports for each storage under the lock\n     final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n     if (reports.length \u003d\u003d 0) {\n       // Nothing new to report.\n       return;\n     }\n \n     // Send incremental block reports to the Namenode outside the lock\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n     }\n     boolean success \u003d false;\n     final long startTime \u003d monotonicNow();\n     try {\n       namenode.blockReceivedAndDeleted(registration, bpid, reports);\n       success \u003d true;\n     } finally {\n \n       if (success) {\n         dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime,\n             nnRpcLatencySuffix);\n         lastIBR \u003d startTime;\n       } else {\n         // If we didn\u0027t succeed in sending the report, put all of the\n         // blocks back onto our queue, but only in the case where we\n         // didn\u0027t put something newer in the meantime.\n         putMissing(reports);\n+        LOG.warn(\"Failed to call blockReceivedAndDeleted: {}, nnId: {}\"\n+            + \", duration(ms): {}\", Arrays.toString(reports),\n+            nnRpcLatencySuffix, monotonicNow() - startTime);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid, String nnRpcLatencySuffix) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n    }\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n\n      if (success) {\n        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime,\n            nnRpcLatencySuffix);\n        lastIBR \u003d startTime;\n      } else {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n        LOG.warn(\"Failed to call blockReceivedAndDeleted: {}, nnId: {}\"\n            + \", duration(ms): {}\", Arrays.toString(reports),\n            nnRpcLatencySuffix, monotonicNow() - startTime);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
      "extendedDetails": {}
    },
    "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
      "commitDate": "15/11/18 10:58 AM",
      "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
          "commitDate": "15/11/18 10:58 AM",
          "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/03/17 2:33 PM",
          "commitNameOld": "1168ece59640d8ad3166e355d2e82deec2fbaf14",
          "commitAuthorOld": "Xiaobing Zhou",
          "daysBetweenCommits": 600.89,
          "commitsBetweenForRepo": 4939,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n   void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n-      String bpid) throws IOException {\n+      String bpid, String nnRpcLatencySuffix) throws IOException {\n     // Generate a list of the pending reports for each storage under the lock\n     final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n     if (reports.length \u003d\u003d 0) {\n       // Nothing new to report.\n       return;\n     }\n \n     // Send incremental block reports to the Namenode outside the lock\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n     }\n     boolean success \u003d false;\n     final long startTime \u003d monotonicNow();\n     try {\n       namenode.blockReceivedAndDeleted(registration, bpid, reports);\n       success \u003d true;\n     } finally {\n \n       if (success) {\n-        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime);\n+        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime,\n+            nnRpcLatencySuffix);\n         lastIBR \u003d startTime;\n       } else {\n         // If we didn\u0027t succeed in sending the report, put all of the\n         // blocks back onto our queue, but only in the case where we\n         // didn\u0027t put something newer in the meantime.\n         putMissing(reports);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid, String nnRpcLatencySuffix) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n    }\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n\n      if (success) {\n        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime,\n            nnRpcLatencySuffix);\n        lastIBR \u003d startTime;\n      } else {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
          "extendedDetails": {
            "oldValue": "[namenode-DatanodeProtocol, registration-DatanodeRegistration, bpid-String]",
            "newValue": "[namenode-DatanodeProtocol, registration-DatanodeRegistration, bpid-String, nnRpcLatencySuffix-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14045. Use different metrics in DataNode to better measure latency of heartbeat/blockReports/incrementalBlockReports of Active/Standby NN. Contributed by Jiandan Yang.\n",
          "commitDate": "15/11/18 10:58 AM",
          "commitName": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/03/17 2:33 PM",
          "commitNameOld": "1168ece59640d8ad3166e355d2e82deec2fbaf14",
          "commitAuthorOld": "Xiaobing Zhou",
          "daysBetweenCommits": 600.89,
          "commitsBetweenForRepo": 4939,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n   void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n-      String bpid) throws IOException {\n+      String bpid, String nnRpcLatencySuffix) throws IOException {\n     // Generate a list of the pending reports for each storage under the lock\n     final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n     if (reports.length \u003d\u003d 0) {\n       // Nothing new to report.\n       return;\n     }\n \n     // Send incremental block reports to the Namenode outside the lock\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n     }\n     boolean success \u003d false;\n     final long startTime \u003d monotonicNow();\n     try {\n       namenode.blockReceivedAndDeleted(registration, bpid, reports);\n       success \u003d true;\n     } finally {\n \n       if (success) {\n-        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime);\n+        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime,\n+            nnRpcLatencySuffix);\n         lastIBR \u003d startTime;\n       } else {\n         // If we didn\u0027t succeed in sending the report, put all of the\n         // blocks back onto our queue, but only in the case where we\n         // didn\u0027t put something newer in the meantime.\n         putMissing(reports);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid, String nnRpcLatencySuffix) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n    }\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n\n      if (success) {\n        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime,\n            nnRpcLatencySuffix);\n        lastIBR \u003d startTime;\n      } else {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1168ece59640d8ad3166e355d2e82deec2fbaf14": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11534. Add counters for number of blocks in pending IBR. Contributed by Xiaobing Zhou.\n",
      "commitDate": "24/03/17 2:33 PM",
      "commitName": "1168ece59640d8ad3166e355d2e82deec2fbaf14",
      "commitAuthor": "Xiaobing Zhou",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11534. Add counters for number of blocks in pending IBR. Contributed by Xiaobing Zhou.\n",
          "commitDate": "24/03/17 2:33 PM",
          "commitName": "1168ece59640d8ad3166e355d2e82deec2fbaf14",
          "commitAuthor": "Xiaobing Zhou",
          "commitDateOld": "04/04/16 6:49 PM",
          "commitNameOld": "818d6b799eead13a17a0214172df60a269b046fb",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 353.82,
          "commitsBetweenForRepo": 2389,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n   void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n-      String bpid, DataNodeMetrics metrics) throws IOException {\n+      String bpid) throws IOException {\n     // Generate a list of the pending reports for each storage under the lock\n     final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n     if (reports.length \u003d\u003d 0) {\n       // Nothing new to report.\n       return;\n     }\n \n     // Send incremental block reports to the Namenode outside the lock\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n     }\n     boolean success \u003d false;\n     final long startTime \u003d monotonicNow();\n     try {\n       namenode.blockReceivedAndDeleted(registration, bpid, reports);\n       success \u003d true;\n     } finally {\n-      metrics.addIncrementalBlockReport(monotonicNow() - startTime);\n+\n       if (success) {\n+        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime);\n         lastIBR \u003d startTime;\n       } else {\n         // If we didn\u0027t succeed in sending the report, put all of the\n         // blocks back onto our queue, but only in the case where we\n         // didn\u0027t put something newer in the meantime.\n         putMissing(reports);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n    }\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n\n      if (success) {\n        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime);\n        lastIBR \u003d startTime;\n      } else {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
          "extendedDetails": {
            "oldValue": "[namenode-DatanodeProtocol, registration-DatanodeRegistration, bpid-String, metrics-DataNodeMetrics]",
            "newValue": "[namenode-DatanodeProtocol, registration-DatanodeRegistration, bpid-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11534. Add counters for number of blocks in pending IBR. Contributed by Xiaobing Zhou.\n",
          "commitDate": "24/03/17 2:33 PM",
          "commitName": "1168ece59640d8ad3166e355d2e82deec2fbaf14",
          "commitAuthor": "Xiaobing Zhou",
          "commitDateOld": "04/04/16 6:49 PM",
          "commitNameOld": "818d6b799eead13a17a0214172df60a269b046fb",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 353.82,
          "commitsBetweenForRepo": 2389,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n   void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n-      String bpid, DataNodeMetrics metrics) throws IOException {\n+      String bpid) throws IOException {\n     // Generate a list of the pending reports for each storage under the lock\n     final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n     if (reports.length \u003d\u003d 0) {\n       // Nothing new to report.\n       return;\n     }\n \n     // Send incremental block reports to the Namenode outside the lock\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n     }\n     boolean success \u003d false;\n     final long startTime \u003d monotonicNow();\n     try {\n       namenode.blockReceivedAndDeleted(registration, bpid, reports);\n       success \u003d true;\n     } finally {\n-      metrics.addIncrementalBlockReport(monotonicNow() - startTime);\n+\n       if (success) {\n+        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime);\n         lastIBR \u003d startTime;\n       } else {\n         // If we didn\u0027t succeed in sending the report, put all of the\n         // blocks back onto our queue, but only in the case where we\n         // didn\u0027t put something newer in the meantime.\n         putMissing(reports);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n    }\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n\n      if (success) {\n        dnMetrics.addIncrementalBlockReport(monotonicNow() - startTime);\n        lastIBR \u003d startTime;\n      } else {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1d4e16690cc85f7f22fbead9cf596260819b561": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9710. DN can be configured to send block receipt IBRs in batches.\n",
      "commitDate": "26/02/16 3:32 PM",
      "commitName": "d1d4e16690cc85f7f22fbead9cf596260819b561",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "05/02/16 7:17 AM",
      "commitNameOld": "4e5e1c0f9938e51699c0437731e7b2eef699d6da",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 21.34,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n       String bpid, DataNodeMetrics metrics) throws IOException {\n     // Generate a list of the pending reports for each storage under the lock\n     final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n     if (reports.length \u003d\u003d 0) {\n       // Nothing new to report.\n       return;\n     }\n \n     // Send incremental block reports to the Namenode outside the lock\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n+    }\n     boolean success \u003d false;\n     final long startTime \u003d monotonicNow();\n     try {\n       namenode.blockReceivedAndDeleted(registration, bpid, reports);\n       success \u003d true;\n     } finally {\n       metrics.addIncrementalBlockReport(monotonicNow() - startTime);\n-      if (!success) {\n+      if (success) {\n+        lastIBR \u003d startTime;\n+      } else {\n         // If we didn\u0027t succeed in sending the report, put all of the\n         // blocks back onto our queue, but only in the case where we\n         // didn\u0027t put something newer in the meantime.\n         putMissing(reports);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid, DataNodeMetrics metrics) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"call blockReceivedAndDeleted: \" + Arrays.toString(reports));\n    }\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n      metrics.addIncrementalBlockReport(monotonicNow() - startTime);\n      if (success) {\n        lastIBR \u003d startTime;\n      } else {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java",
      "extendedDetails": {}
    },
    "4e5e1c0f9938e51699c0437731e7b2eef699d6da": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9726. Refactor IBR code to a new class.\n",
      "commitDate": "05/02/16 7:17 AM",
      "commitName": "4e5e1c0f9938e51699c0437731e7b2eef699d6da",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,25 @@\n+  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n+      String bpid, DataNodeMetrics metrics) throws IOException {\n+    // Generate a list of the pending reports for each storage under the lock\n+    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n+    if (reports.length \u003d\u003d 0) {\n+      // Nothing new to report.\n+      return;\n+    }\n+\n+    // Send incremental block reports to the Namenode outside the lock\n+    boolean success \u003d false;\n+    final long startTime \u003d monotonicNow();\n+    try {\n+      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n+      success \u003d true;\n+    } finally {\n+      metrics.addIncrementalBlockReport(monotonicNow() - startTime);\n+      if (!success) {\n+        // If we didn\u0027t succeed in sending the report, put all of the\n+        // blocks back onto our queue, but only in the case where we\n+        // didn\u0027t put something newer in the meantime.\n+        putMissing(reports);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void sendIBRs(DatanodeProtocol namenode, DatanodeRegistration registration,\n      String bpid, DataNodeMetrics metrics) throws IOException {\n    // Generate a list of the pending reports for each storage under the lock\n    final StorageReceivedDeletedBlocks[] reports \u003d generateIBRs();\n    if (reports.length \u003d\u003d 0) {\n      // Nothing new to report.\n      return;\n    }\n\n    // Send incremental block reports to the Namenode outside the lock\n    boolean success \u003d false;\n    final long startTime \u003d monotonicNow();\n    try {\n      namenode.blockReceivedAndDeleted(registration, bpid, reports);\n      success \u003d true;\n    } finally {\n      metrics.addIncrementalBlockReport(monotonicNow() - startTime);\n      if (!success) {\n        // If we didn\u0027t succeed in sending the report, put all of the\n        // blocks back onto our queue, but only in the case where we\n        // didn\u0027t put something newer in the meantime.\n        putMissing(reports);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/IncrementalBlockReportManager.java"
    }
  }
}