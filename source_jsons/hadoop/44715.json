{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TopCLI.java",
  "functionName": "parseOptions",
  "functionId": "parseOptions___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
  "functionStartLine": 499,
  "functionEndLine": 554,
  "numCommitsSeen": 12,
  "timeTaken": 1058,
  "changeHistory": [
    "577d755e4bf72d6adedeba51be01ff5f3f028de0"
  ],
  "changeHistoryShort": {
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3348. Add a \u0027yarn top\u0027 tool to help understand cluster usage. Contributed by Varun Vasudev\n",
      "commitDate": "10/04/15 9:57 AM",
      "commitName": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,56 @@\n+  private void parseOptions(String[] args) throws ParseException, IOException,\n+      InterruptedException {\n+\n+    // Command line options\n+    opts \u003d new Options();\n+    opts.addOption(\"queues\", true,\n+      \"Comma separated list of queues to restrict applications\");\n+    opts.addOption(\"users\", true,\n+      \"Comma separated list of users to restrict applications\");\n+    opts.addOption(\"types\", true, \"Comma separated list of types to restrict\"\n+        + \" applications, case sensitive(though the display is lower case)\");\n+    opts.addOption(\"cols\", true, \"Number of columns on the terminal\");\n+    opts.addOption(\"rows\", true, \"Number of rows on the terminal\");\n+    opts.addOption(\"help\", false,\n+      \"Print usage; for help while the tool is running press \u0027h\u0027 + Enter\");\n+    opts.addOption(\"delay\", true,\n+      \"The refresh delay(in seconds), default is 3 seconds\");\n+\n+    cliParser \u003d new GnuParser().parse(opts, args);\n+    if (cliParser.hasOption(\"queues\")) {\n+      String clqueues \u003d cliParser.getOptionValue(\"queues\");\n+      String[] queuesArray \u003d clqueues.split(\",\");\n+      queues.addAll(Arrays.asList(queuesArray));\n+    }\n+\n+    if (cliParser.hasOption(\"users\")) {\n+      String clusers \u003d cliParser.getOptionValue(\"users\");\n+      users.addAll(Arrays.asList(clusers.split(\",\")));\n+    }\n+\n+    if (cliParser.hasOption(\"types\")) {\n+      String cltypes \u003d cliParser.getOptionValue(\"types\");\n+      types.addAll(Arrays.asList(cltypes.split(\",\")));\n+    }\n+\n+    if (cliParser.hasOption(\"cols\")) {\n+      terminalWidth \u003d Integer.parseInt(cliParser.getOptionValue(\"cols\"));\n+    } else {\n+      setTerminalWidth();\n+    }\n+\n+    if (cliParser.hasOption(\"rows\")) {\n+      terminalHeight \u003d Integer.parseInt(cliParser.getOptionValue(\"rows\"));\n+    } else {\n+      setTerminalHeight();\n+    }\n+\n+    if (cliParser.hasOption(\"delay\")) {\n+      int delay \u003d Integer.parseInt(cliParser.getOptionValue(\"delay\"));\n+      if (delay \u003c 1) {\n+        LOG.warn(\"Delay set too low, using default\");\n+      } else {\n+        refreshPeriod \u003d delay * 1000;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseOptions(String[] args) throws ParseException, IOException,\n      InterruptedException {\n\n    // Command line options\n    opts \u003d new Options();\n    opts.addOption(\"queues\", true,\n      \"Comma separated list of queues to restrict applications\");\n    opts.addOption(\"users\", true,\n      \"Comma separated list of users to restrict applications\");\n    opts.addOption(\"types\", true, \"Comma separated list of types to restrict\"\n        + \" applications, case sensitive(though the display is lower case)\");\n    opts.addOption(\"cols\", true, \"Number of columns on the terminal\");\n    opts.addOption(\"rows\", true, \"Number of rows on the terminal\");\n    opts.addOption(\"help\", false,\n      \"Print usage; for help while the tool is running press \u0027h\u0027 + Enter\");\n    opts.addOption(\"delay\", true,\n      \"The refresh delay(in seconds), default is 3 seconds\");\n\n    cliParser \u003d new GnuParser().parse(opts, args);\n    if (cliParser.hasOption(\"queues\")) {\n      String clqueues \u003d cliParser.getOptionValue(\"queues\");\n      String[] queuesArray \u003d clqueues.split(\",\");\n      queues.addAll(Arrays.asList(queuesArray));\n    }\n\n    if (cliParser.hasOption(\"users\")) {\n      String clusers \u003d cliParser.getOptionValue(\"users\");\n      users.addAll(Arrays.asList(clusers.split(\",\")));\n    }\n\n    if (cliParser.hasOption(\"types\")) {\n      String cltypes \u003d cliParser.getOptionValue(\"types\");\n      types.addAll(Arrays.asList(cltypes.split(\",\")));\n    }\n\n    if (cliParser.hasOption(\"cols\")) {\n      terminalWidth \u003d Integer.parseInt(cliParser.getOptionValue(\"cols\"));\n    } else {\n      setTerminalWidth();\n    }\n\n    if (cliParser.hasOption(\"rows\")) {\n      terminalHeight \u003d Integer.parseInt(cliParser.getOptionValue(\"rows\"));\n    } else {\n      setTerminalHeight();\n    }\n\n    if (cliParser.hasOption(\"delay\")) {\n      int delay \u003d Integer.parseInt(cliParser.getOptionValue(\"delay\"));\n      if (delay \u003c 1) {\n        LOG.warn(\"Delay set too low, using default\");\n      } else {\n        refreshPeriod \u003d delay * 1000;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java"
    }
  }
}