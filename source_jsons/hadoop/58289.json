{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfiguredYarnAuthorizer.java",
  "functionName": "checkPermissionInternal",
  "functionId": "checkPermissionInternal___accessType-AccessType__target-PrivilegedEntity__user-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/security/ConfiguredYarnAuthorizer.java",
  "functionStartLine": 70,
  "functionEndLine": 93,
  "numCommitsSeen": 4,
  "timeTaken": 2771,
  "changeHistory": [
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e"
  ],
  "changeHistoryShort": {
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
      "commitDate": "12/01/16 9:18 PM",
      "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
          "commitDate": "12/01/16 9:18 PM",
          "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/15 8:34 PM",
          "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 337.03,
          "commitsBetweenForRepo": 2729,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public boolean checkPermission(AccessType accessType,\n+  private boolean checkPermissionInternal(AccessType accessType,\n       PrivilegedEntity target, UserGroupInformation user) {\n     boolean ret \u003d false;\n     Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n     if (acls !\u003d null) {\n       AccessControlList list \u003d acls.get(accessType);\n       if (list !\u003d null) {\n         ret \u003d list.isUserAllowed(user);\n       }\n     }\n \n     // recursively look up the queue to see if parent queue has the permission.\n     if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n       String queueName \u003d target.getName();\n       if (!queueName.contains(\".\")) {\n         return ret;\n       }\n-      String parentQueueName \u003d queueName.substring(0, queueName.lastIndexOf(\".\"));\n-      return checkPermission(accessType, new PrivilegedEntity(target.getType(),\n-        parentQueueName), user);\n+      String parentQueueName \u003d\n+          queueName.substring(0, queueName.lastIndexOf(\".\"));\n+      return checkPermissionInternal(accessType,\n+          new PrivilegedEntity(target.getType(), parentQueueName), user);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkPermissionInternal(AccessType accessType,\n      PrivilegedEntity target, UserGroupInformation user) {\n    boolean ret \u003d false;\n    Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n    if (acls !\u003d null) {\n      AccessControlList list \u003d acls.get(accessType);\n      if (list !\u003d null) {\n        ret \u003d list.isUserAllowed(user);\n      }\n    }\n\n    // recursively look up the queue to see if parent queue has the permission.\n    if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n      String queueName \u003d target.getName();\n      if (!queueName.contains(\".\")) {\n        return ret;\n      }\n      String parentQueueName \u003d\n          queueName.substring(0, queueName.lastIndexOf(\".\"));\n      return checkPermissionInternal(accessType,\n          new PrivilegedEntity(target.getType(), parentQueueName), user);\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/security/ConfiguredYarnAuthorizer.java",
          "extendedDetails": {
            "oldValue": "checkPermission",
            "newValue": "checkPermissionInternal"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
          "commitDate": "12/01/16 9:18 PM",
          "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/15 8:34 PM",
          "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 337.03,
          "commitsBetweenForRepo": 2729,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public boolean checkPermission(AccessType accessType,\n+  private boolean checkPermissionInternal(AccessType accessType,\n       PrivilegedEntity target, UserGroupInformation user) {\n     boolean ret \u003d false;\n     Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n     if (acls !\u003d null) {\n       AccessControlList list \u003d acls.get(accessType);\n       if (list !\u003d null) {\n         ret \u003d list.isUserAllowed(user);\n       }\n     }\n \n     // recursively look up the queue to see if parent queue has the permission.\n     if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n       String queueName \u003d target.getName();\n       if (!queueName.contains(\".\")) {\n         return ret;\n       }\n-      String parentQueueName \u003d queueName.substring(0, queueName.lastIndexOf(\".\"));\n-      return checkPermission(accessType, new PrivilegedEntity(target.getType(),\n-        parentQueueName), user);\n+      String parentQueueName \u003d\n+          queueName.substring(0, queueName.lastIndexOf(\".\"));\n+      return checkPermissionInternal(accessType,\n+          new PrivilegedEntity(target.getType(), parentQueueName), user);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkPermissionInternal(AccessType accessType,\n      PrivilegedEntity target, UserGroupInformation user) {\n    boolean ret \u003d false;\n    Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n    if (acls !\u003d null) {\n      AccessControlList list \u003d acls.get(accessType);\n      if (list !\u003d null) {\n        ret \u003d list.isUserAllowed(user);\n      }\n    }\n\n    // recursively look up the queue to see if parent queue has the permission.\n    if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n      String queueName \u003d target.getName();\n      if (!queueName.contains(\".\")) {\n        return ret;\n      }\n      String parentQueueName \u003d\n          queueName.substring(0, queueName.lastIndexOf(\".\"));\n      return checkPermissionInternal(accessType,\n          new PrivilegedEntity(target.getType(), parentQueueName), user);\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/security/ConfiguredYarnAuthorizer.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
          "commitDate": "12/01/16 9:18 PM",
          "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/15 8:34 PM",
          "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 337.03,
          "commitsBetweenForRepo": 2729,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public boolean checkPermission(AccessType accessType,\n+  private boolean checkPermissionInternal(AccessType accessType,\n       PrivilegedEntity target, UserGroupInformation user) {\n     boolean ret \u003d false;\n     Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n     if (acls !\u003d null) {\n       AccessControlList list \u003d acls.get(accessType);\n       if (list !\u003d null) {\n         ret \u003d list.isUserAllowed(user);\n       }\n     }\n \n     // recursively look up the queue to see if parent queue has the permission.\n     if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n       String queueName \u003d target.getName();\n       if (!queueName.contains(\".\")) {\n         return ret;\n       }\n-      String parentQueueName \u003d queueName.substring(0, queueName.lastIndexOf(\".\"));\n-      return checkPermission(accessType, new PrivilegedEntity(target.getType(),\n-        parentQueueName), user);\n+      String parentQueueName \u003d\n+          queueName.substring(0, queueName.lastIndexOf(\".\"));\n+      return checkPermissionInternal(accessType,\n+          new PrivilegedEntity(target.getType(), parentQueueName), user);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkPermissionInternal(AccessType accessType,\n      PrivilegedEntity target, UserGroupInformation user) {\n    boolean ret \u003d false;\n    Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n    if (acls !\u003d null) {\n      AccessControlList list \u003d acls.get(accessType);\n      if (list !\u003d null) {\n        ret \u003d list.isUserAllowed(user);\n      }\n    }\n\n    // recursively look up the queue to see if parent queue has the permission.\n    if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n      String queueName \u003d target.getName();\n      if (!queueName.contains(\".\")) {\n        return ret;\n      }\n      String parentQueueName \u003d\n          queueName.substring(0, queueName.lastIndexOf(\".\"));\n      return checkPermissionInternal(accessType,\n          new PrivilegedEntity(target.getType(), parentQueueName), user);\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/security/ConfiguredYarnAuthorizer.java",
          "extendedDetails": {}
        }
      ]
    },
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
      "commitDate": "09/02/15 8:34 PM",
      "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,23 @@\n+  public boolean checkPermission(AccessType accessType,\n+      PrivilegedEntity target, UserGroupInformation user) {\n+    boolean ret \u003d false;\n+    Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n+    if (acls !\u003d null) {\n+      AccessControlList list \u003d acls.get(accessType);\n+      if (list !\u003d null) {\n+        ret \u003d list.isUserAllowed(user);\n+      }\n+    }\n+\n+    // recursively look up the queue to see if parent queue has the permission.\n+    if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n+      String queueName \u003d target.getName();\n+      if (!queueName.contains(\".\")) {\n+        return ret;\n+      }\n+      String parentQueueName \u003d queueName.substring(0, queueName.lastIndexOf(\".\"));\n+      return checkPermission(accessType, new PrivilegedEntity(target.getType(),\n+        parentQueueName), user);\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean checkPermission(AccessType accessType,\n      PrivilegedEntity target, UserGroupInformation user) {\n    boolean ret \u003d false;\n    Map\u003cAccessType, AccessControlList\u003e acls \u003d allAcls.get(target);\n    if (acls !\u003d null) {\n      AccessControlList list \u003d acls.get(accessType);\n      if (list !\u003d null) {\n        ret \u003d list.isUserAllowed(user);\n      }\n    }\n\n    // recursively look up the queue to see if parent queue has the permission.\n    if (target.getType() \u003d\u003d EntityType.QUEUE \u0026\u0026 !ret) {\n      String queueName \u003d target.getName();\n      if (!queueName.contains(\".\")) {\n        return ret;\n      }\n      String parentQueueName \u003d queueName.substring(0, queueName.lastIndexOf(\".\"));\n      return checkPermission(accessType, new PrivilegedEntity(target.getType(),\n        parentQueueName), user);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/security/ConfiguredYarnAuthorizer.java"
    }
  }
}