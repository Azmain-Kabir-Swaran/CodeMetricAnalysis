{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppImpl.java",
  "functionName": "aggregateLogReport",
  "functionId": "aggregateLogReport___nodeId-NodeId__report-LogAggregationReport",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
  "functionStartLine": 1768,
  "functionEndLine": 1770,
  "numCommitsSeen": 170,
  "timeTaken": 5194,
  "changeHistory": [
    "4456ea67b949553b85e101e866b4b3f4b335f1f0",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1",
    "92431c961741747b5d6442f4025016d48d9a6863"
  ],
  "changeHistoryShort": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Ybodychange",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": "Ybodychange",
    "92431c961741747b5d6442f4025016d48d9a6863": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
      "commitDate": "16/08/19 2:36 AM",
      "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "11/06/19 10:41 AM",
      "commitNameOld": "60c95e9b6a899e37ecdc8bce7bb6d9ed0dc7a6be",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 65.66,
      "commitsBetweenForRepo": 585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,3 @@\n   public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n-    this.writeLock.lock();\n-    try {\n-      if (this.logAggregationEnabled \u0026\u0026 !isLogAggregationFinished()) {\n-        LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n-        boolean stateChangedToFinal \u003d false;\n-        if (curReport \u003d\u003d null) {\n-          this.logAggregationStatus.put(nodeId, report);\n-          if (isLogAggregationFinishedForNM(report)) {\n-            stateChangedToFinal \u003d true;\n-          }\n-        } else {\n-          if (isLogAggregationFinishedForNM(report)) {\n-            if (!isLogAggregationFinishedForNM(curReport)) {\n-              stateChangedToFinal \u003d true;\n-            }\n-          }\n-          if (report.getLogAggregationStatus() !\u003d LogAggregationStatus.RUNNING\n-              || curReport.getLogAggregationStatus() !\u003d\n-                  LogAggregationStatus.RUNNING_WITH_FAILURE) {\n-            if (curReport.getLogAggregationStatus()\n-                \u003d\u003d LogAggregationStatus.TIME_OUT\n-                \u0026\u0026 report.getLogAggregationStatus()\n-                    \u003d\u003d LogAggregationStatus.RUNNING) {\n-            // If the log aggregation status got from latest NM heartbeat\n-            // is RUNNING, and current log aggregation status is TIME_OUT,\n-            // based on whether there are any failure messages for this NM,\n-            // we will reset the log aggregation status as RUNNING or\n-            // RUNNING_WITH_FAILURE\n-              if (logAggregationFailureMessagesForNMs.get(nodeId) !\u003d null \u0026\u0026\n-                  !logAggregationFailureMessagesForNMs.get(nodeId).isEmpty()) {\n-                report.setLogAggregationStatus(\n-                    LogAggregationStatus.RUNNING_WITH_FAILURE);\n-              }\n-            }\n-            curReport.setLogAggregationStatus(report\n-              .getLogAggregationStatus());\n-          }\n-        }\n-        updateLogAggregationDiagnosticMessages(nodeId, report);\n-        if (isAppInFinalState(this) \u0026\u0026 stateChangedToFinal) {\n-          updateLogAggregationStatus(nodeId);\n-        }\n-      }\n-    } finally {\n-      this.writeLock.unlock();\n-    }\n+    logAggregation.aggregateLogReport(nodeId, report, this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n    logAggregation.aggregateLogReport(nodeId, report, this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n+    this.writeLock.lock();\n     try {\n-      this.writeLock.lock();\n       if (this.logAggregationEnabled \u0026\u0026 !isLogAggregationFinished()) {\n         LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n         boolean stateChangedToFinal \u003d false;\n         if (curReport \u003d\u003d null) {\n           this.logAggregationStatus.put(nodeId, report);\n           if (isLogAggregationFinishedForNM(report)) {\n             stateChangedToFinal \u003d true;\n           }\n         } else {\n           if (isLogAggregationFinishedForNM(report)) {\n             if (!isLogAggregationFinishedForNM(curReport)) {\n               stateChangedToFinal \u003d true;\n             }\n           }\n           if (report.getLogAggregationStatus() !\u003d LogAggregationStatus.RUNNING\n               || curReport.getLogAggregationStatus() !\u003d\n                   LogAggregationStatus.RUNNING_WITH_FAILURE) {\n             if (curReport.getLogAggregationStatus()\n                 \u003d\u003d LogAggregationStatus.TIME_OUT\n                 \u0026\u0026 report.getLogAggregationStatus()\n                     \u003d\u003d LogAggregationStatus.RUNNING) {\n             // If the log aggregation status got from latest NM heartbeat\n             // is RUNNING, and current log aggregation status is TIME_OUT,\n             // based on whether there are any failure messages for this NM,\n             // we will reset the log aggregation status as RUNNING or\n             // RUNNING_WITH_FAILURE\n               if (logAggregationFailureMessagesForNMs.get(nodeId) !\u003d null \u0026\u0026\n                   !logAggregationFailureMessagesForNMs.get(nodeId).isEmpty()) {\n                 report.setLogAggregationStatus(\n                     LogAggregationStatus.RUNNING_WITH_FAILURE);\n               }\n             }\n             curReport.setLogAggregationStatus(report\n               .getLogAggregationStatus());\n           }\n         }\n         updateLogAggregationDiagnosticMessages(nodeId, report);\n         if (isAppInFinalState(this) \u0026\u0026 stateChangedToFinal) {\n           updateLogAggregationStatus(nodeId);\n         }\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n    this.writeLock.lock();\n    try {\n      if (this.logAggregationEnabled \u0026\u0026 !isLogAggregationFinished()) {\n        LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n        boolean stateChangedToFinal \u003d false;\n        if (curReport \u003d\u003d null) {\n          this.logAggregationStatus.put(nodeId, report);\n          if (isLogAggregationFinishedForNM(report)) {\n            stateChangedToFinal \u003d true;\n          }\n        } else {\n          if (isLogAggregationFinishedForNM(report)) {\n            if (!isLogAggregationFinishedForNM(curReport)) {\n              stateChangedToFinal \u003d true;\n            }\n          }\n          if (report.getLogAggregationStatus() !\u003d LogAggregationStatus.RUNNING\n              || curReport.getLogAggregationStatus() !\u003d\n                  LogAggregationStatus.RUNNING_WITH_FAILURE) {\n            if (curReport.getLogAggregationStatus()\n                \u003d\u003d LogAggregationStatus.TIME_OUT\n                \u0026\u0026 report.getLogAggregationStatus()\n                    \u003d\u003d LogAggregationStatus.RUNNING) {\n            // If the log aggregation status got from latest NM heartbeat\n            // is RUNNING, and current log aggregation status is TIME_OUT,\n            // based on whether there are any failure messages for this NM,\n            // we will reset the log aggregation status as RUNNING or\n            // RUNNING_WITH_FAILURE\n              if (logAggregationFailureMessagesForNMs.get(nodeId) !\u003d null \u0026\u0026\n                  !logAggregationFailureMessagesForNMs.get(nodeId).isEmpty()) {\n                report.setLogAggregationStatus(\n                    LogAggregationStatus.RUNNING_WITH_FAILURE);\n              }\n            }\n            curReport.setLogAggregationStatus(report\n              .getLogAggregationStatus());\n          }\n        }\n        updateLogAggregationDiagnosticMessages(nodeId, report);\n        if (isAppInFinalState(this) \u0026\u0026 stateChangedToFinal) {\n          updateLogAggregationStatus(nodeId);\n        }\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "24/04/15 12:13 PM",
      "commitNameOld": "d03dcb9635dbd79a45d229d1cab5fd28e5e49f49",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 19.95,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,48 @@\n   public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n     try {\n       this.writeLock.lock();\n-      if (this.logAggregationEnabled) {\n+      if (this.logAggregationEnabled \u0026\u0026 !isLogAggregationFinished()) {\n         LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n+        boolean stateChangedToFinal \u003d false;\n         if (curReport \u003d\u003d null) {\n           this.logAggregationStatus.put(nodeId, report);\n+          if (isLogAggregationFinishedForNM(report)) {\n+            stateChangedToFinal \u003d true;\n+          }\n         } else {\n-          if (curReport.getLogAggregationStatus().equals(\n-            LogAggregationStatus.TIME_OUT)) {\n-            if (report.getLogAggregationStatus().equals(\n-              LogAggregationStatus.SUCCEEDED)\n-                || report.getLogAggregationStatus().equals(\n-                  LogAggregationStatus.FAILED)) {\n-              curReport.setLogAggregationStatus(report\n-                .getLogAggregationStatus());\n+          if (isLogAggregationFinishedForNM(report)) {\n+            if (!isLogAggregationFinishedForNM(curReport)) {\n+              stateChangedToFinal \u003d true;\n             }\n-          } else {\n-            curReport.setLogAggregationStatus(report.getLogAggregationStatus());\n           }\n-\n-          if (report.getDiagnosticMessage() !\u003d null\n-              \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n-            curReport\n-              .setDiagnosticMessage(curReport.getDiagnosticMessage() \u003d\u003d null\n-                  ? report.getDiagnosticMessage() : curReport\n-                    .getDiagnosticMessage() + report.getDiagnosticMessage());\n+          if (report.getLogAggregationStatus() !\u003d LogAggregationStatus.RUNNING\n+              || curReport.getLogAggregationStatus() !\u003d\n+                  LogAggregationStatus.RUNNING_WITH_FAILURE) {\n+            if (curReport.getLogAggregationStatus()\n+                \u003d\u003d LogAggregationStatus.TIME_OUT\n+                \u0026\u0026 report.getLogAggregationStatus()\n+                    \u003d\u003d LogAggregationStatus.RUNNING) {\n+            // If the log aggregation status got from latest nm heartbeat\n+            // is Running, and current log aggregation status is TimeOut,\n+            // based on whether there are any failure messages for this NM,\n+            // we will reset the log aggregation status as RUNNING or\n+            // RUNNING_WITH_FAILURE\n+              if (logAggregationFailureMessagesForNMs.get(nodeId) !\u003d null \u0026\u0026\n+                  !logAggregationFailureMessagesForNMs.get(nodeId).isEmpty()) {\n+                report.setLogAggregationStatus(\n+                    LogAggregationStatus.RUNNING_WITH_FAILURE);\n+              }\n+            }\n+            curReport.setLogAggregationStatus(report\n+              .getLogAggregationStatus());\n           }\n         }\n+        updateLogAggregationDiagnosticMessages(nodeId, report);\n+        if (isAppInFinalState(this) \u0026\u0026 stateChangedToFinal) {\n+          updateLogAggregationStatus(nodeId);\n+        }\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n    try {\n      this.writeLock.lock();\n      if (this.logAggregationEnabled \u0026\u0026 !isLogAggregationFinished()) {\n        LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n        boolean stateChangedToFinal \u003d false;\n        if (curReport \u003d\u003d null) {\n          this.logAggregationStatus.put(nodeId, report);\n          if (isLogAggregationFinishedForNM(report)) {\n            stateChangedToFinal \u003d true;\n          }\n        } else {\n          if (isLogAggregationFinishedForNM(report)) {\n            if (!isLogAggregationFinishedForNM(curReport)) {\n              stateChangedToFinal \u003d true;\n            }\n          }\n          if (report.getLogAggregationStatus() !\u003d LogAggregationStatus.RUNNING\n              || curReport.getLogAggregationStatus() !\u003d\n                  LogAggregationStatus.RUNNING_WITH_FAILURE) {\n            if (curReport.getLogAggregationStatus()\n                \u003d\u003d LogAggregationStatus.TIME_OUT\n                \u0026\u0026 report.getLogAggregationStatus()\n                    \u003d\u003d LogAggregationStatus.RUNNING) {\n            // If the log aggregation status got from latest nm heartbeat\n            // is Running, and current log aggregation status is TimeOut,\n            // based on whether there are any failure messages for this NM,\n            // we will reset the log aggregation status as RUNNING or\n            // RUNNING_WITH_FAILURE\n              if (logAggregationFailureMessagesForNMs.get(nodeId) !\u003d null \u0026\u0026\n                  !logAggregationFailureMessagesForNMs.get(nodeId).isEmpty()) {\n                report.setLogAggregationStatus(\n                    LogAggregationStatus.RUNNING_WITH_FAILURE);\n              }\n            }\n            curReport.setLogAggregationStatus(report\n              .getLogAggregationStatus());\n          }\n        }\n        updateLogAggregationDiagnosticMessages(nodeId, report);\n        if (isAppInFinalState(this) \u0026\u0026 stateChangedToFinal) {\n          updateLogAggregationStatus(nodeId);\n        }\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1402. Update related Web UI and CLI with exposing client API to check log aggregation status. Contributed by Xuan Gong.\n",
      "commitDate": "17/04/15 1:18 PM",
      "commitName": "1db355a875c3ecc40a244045c6812e00c8d36ef1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n     try {\n       this.writeLock.lock();\n       if (this.logAggregationEnabled) {\n         LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n         if (curReport \u003d\u003d null) {\n           this.logAggregationStatus.put(nodeId, report);\n         } else {\n           if (curReport.getLogAggregationStatus().equals(\n             LogAggregationStatus.TIME_OUT)) {\n             if (report.getLogAggregationStatus().equals(\n-              LogAggregationStatus.FINISHED)) {\n+              LogAggregationStatus.SUCCEEDED)\n+                || report.getLogAggregationStatus().equals(\n+                  LogAggregationStatus.FAILED)) {\n               curReport.setLogAggregationStatus(report\n                 .getLogAggregationStatus());\n             }\n           } else {\n             curReport.setLogAggregationStatus(report.getLogAggregationStatus());\n           }\n \n           if (report.getDiagnosticMessage() !\u003d null\n               \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n             curReport\n               .setDiagnosticMessage(curReport.getDiagnosticMessage() \u003d\u003d null\n                   ? report.getDiagnosticMessage() : curReport\n                     .getDiagnosticMessage() + report.getDiagnosticMessage());\n           }\n         }\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n    try {\n      this.writeLock.lock();\n      if (this.logAggregationEnabled) {\n        LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n        if (curReport \u003d\u003d null) {\n          this.logAggregationStatus.put(nodeId, report);\n        } else {\n          if (curReport.getLogAggregationStatus().equals(\n            LogAggregationStatus.TIME_OUT)) {\n            if (report.getLogAggregationStatus().equals(\n              LogAggregationStatus.SUCCEEDED)\n                || report.getLogAggregationStatus().equals(\n                  LogAggregationStatus.FAILED)) {\n              curReport.setLogAggregationStatus(report\n                .getLogAggregationStatus());\n            }\n          } else {\n            curReport.setLogAggregationStatus(report.getLogAggregationStatus());\n          }\n\n          if (report.getDiagnosticMessage() !\u003d null\n              \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n            curReport\n              .setDiagnosticMessage(curReport.getDiagnosticMessage() \u003d\u003d null\n                  ? report.getDiagnosticMessage() : curReport\n                    .getDiagnosticMessage() + report.getDiagnosticMessage());\n          }\n        }\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,32 @@\n+  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n+    try {\n+      this.writeLock.lock();\n+      if (this.logAggregationEnabled) {\n+        LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n+        if (curReport \u003d\u003d null) {\n+          this.logAggregationStatus.put(nodeId, report);\n+        } else {\n+          if (curReport.getLogAggregationStatus().equals(\n+            LogAggregationStatus.TIME_OUT)) {\n+            if (report.getLogAggregationStatus().equals(\n+              LogAggregationStatus.FINISHED)) {\n+              curReport.setLogAggregationStatus(report\n+                .getLogAggregationStatus());\n+            }\n+          } else {\n+            curReport.setLogAggregationStatus(report.getLogAggregationStatus());\n+          }\n+\n+          if (report.getDiagnosticMessage() !\u003d null\n+              \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n+            curReport\n+              .setDiagnosticMessage(curReport.getDiagnosticMessage() \u003d\u003d null\n+                  ? report.getDiagnosticMessage() : curReport\n+                    .getDiagnosticMessage() + report.getDiagnosticMessage());\n+          }\n+        }\n+      }\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void aggregateLogReport(NodeId nodeId, LogAggregationReport report) {\n    try {\n      this.writeLock.lock();\n      if (this.logAggregationEnabled) {\n        LogAggregationReport curReport \u003d this.logAggregationStatus.get(nodeId);\n        if (curReport \u003d\u003d null) {\n          this.logAggregationStatus.put(nodeId, report);\n        } else {\n          if (curReport.getLogAggregationStatus().equals(\n            LogAggregationStatus.TIME_OUT)) {\n            if (report.getLogAggregationStatus().equals(\n              LogAggregationStatus.FINISHED)) {\n              curReport.setLogAggregationStatus(report\n                .getLogAggregationStatus());\n            }\n          } else {\n            curReport.setLogAggregationStatus(report.getLogAggregationStatus());\n          }\n\n          if (report.getDiagnosticMessage() !\u003d null\n              \u0026\u0026 !report.getDiagnosticMessage().isEmpty()) {\n            curReport\n              .setDiagnosticMessage(curReport.getDiagnosticMessage() \u003d\u003d null\n                  ? report.getDiagnosticMessage() : curReport\n                    .getDiagnosticMessage() + report.getDiagnosticMessage());\n          }\n        }\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}