{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WorkflowPriorityMappingsManager.java",
  "functionName": "mapWorkflowPriorityForApp",
  "functionId": "mapWorkflowPriorityForApp___applicationId-ApplicationId__queue-CSQueue__user-String__priority-Priority",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/WorkflowPriorityMappingsManager.java",
  "functionStartLine": 178,
  "functionEndLine": 217,
  "numCommitsSeen": 2,
  "timeTaken": 1813,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "5462d2176f7a64b236f06700cd247f946798cb26"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "5462d2176f7a64b236f06700cd247f946798cb26": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "08/10/19 11:20 AM",
      "commitNameOld": "5462d2176f7a64b236f06700cd247f946798cb26",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 168.71,
      "commitsBetweenForRepo": 592,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public Priority mapWorkflowPriorityForApp(ApplicationId applicationId,\n       CSQueue queue, String user, Priority priority) throws YarnException {\n     if (overrideWithPriorityMappings) {\n       // Set the correct workflow priority\n       RMApp rmApp \u003d scheduler.getRMContext().getRMApps().get(applicationId);\n       if (rmApp !\u003d null \u0026\u0026 rmApp.getApplicationTags() !\u003d null\n           \u0026\u0026 rmApp.getApplicationSubmissionContext() !\u003d null) {\n         String workflowTagPrefix \u003d scheduler.getConf().get(\n             YarnConfiguration.YARN_WORKFLOW_ID_TAG_PREFIX,\n             YarnConfiguration.DEFAULT_YARN_WORKFLOW_ID_TAG_PREFIX);\n         String workflowID \u003d null;\n         for(String tag : rmApp.getApplicationTags()) {\n           if (tag.trim().startsWith(workflowTagPrefix)) {\n             workflowID \u003d tag.trim().substring(workflowTagPrefix.length());\n           }\n         }\n         if (workflowID !\u003d null \u0026\u0026 !workflowID.isEmpty()\n             \u0026\u0026 priorityMappings !\u003d null \u0026\u0026 priorityMappings.size() \u003e 0) {\n           Priority mappedPriority \u003d getMappedPriority(workflowID, queue);\n           if (mappedPriority !\u003d null) {\n             LOG.info(\"Application \" + applicationId + \" user \" + user\n-                + \" workflow \" + workflowID + \" queue \" + queue.getQueueName()\n+                + \" workflow \" + workflowID + \" queue \" + queue.getQueuePath()\n                 + \" mapping [\" + priority + \"] to [\" + mappedPriority\n                 + \"] override \" + overrideWithPriorityMappings);\n \n             // If workflow ID exists in workflow mapping, change this\n             // application\u0027s priority to mapped value. Else, use queue\n             // default priority.\n             priority \u003d mappedPriority;\n             priority \u003d scheduler.checkAndGetApplicationPriority(\n                 priority, UserGroupInformation.createRemoteUser(user),\n-                queue.getQueueName(), applicationId);\n+                queue.getQueuePath(), applicationId);\n             rmApp.getApplicationSubmissionContext().setPriority(priority);\n             ((RMAppImpl)rmApp).setApplicationPriority(priority);\n           }\n         }\n       }\n     }\n     return priority;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Priority mapWorkflowPriorityForApp(ApplicationId applicationId,\n      CSQueue queue, String user, Priority priority) throws YarnException {\n    if (overrideWithPriorityMappings) {\n      // Set the correct workflow priority\n      RMApp rmApp \u003d scheduler.getRMContext().getRMApps().get(applicationId);\n      if (rmApp !\u003d null \u0026\u0026 rmApp.getApplicationTags() !\u003d null\n          \u0026\u0026 rmApp.getApplicationSubmissionContext() !\u003d null) {\n        String workflowTagPrefix \u003d scheduler.getConf().get(\n            YarnConfiguration.YARN_WORKFLOW_ID_TAG_PREFIX,\n            YarnConfiguration.DEFAULT_YARN_WORKFLOW_ID_TAG_PREFIX);\n        String workflowID \u003d null;\n        for(String tag : rmApp.getApplicationTags()) {\n          if (tag.trim().startsWith(workflowTagPrefix)) {\n            workflowID \u003d tag.trim().substring(workflowTagPrefix.length());\n          }\n        }\n        if (workflowID !\u003d null \u0026\u0026 !workflowID.isEmpty()\n            \u0026\u0026 priorityMappings !\u003d null \u0026\u0026 priorityMappings.size() \u003e 0) {\n          Priority mappedPriority \u003d getMappedPriority(workflowID, queue);\n          if (mappedPriority !\u003d null) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" workflow \" + workflowID + \" queue \" + queue.getQueuePath()\n                + \" mapping [\" + priority + \"] to [\" + mappedPriority\n                + \"] override \" + overrideWithPriorityMappings);\n\n            // If workflow ID exists in workflow mapping, change this\n            // application\u0027s priority to mapped value. Else, use queue\n            // default priority.\n            priority \u003d mappedPriority;\n            priority \u003d scheduler.checkAndGetApplicationPriority(\n                priority, UserGroupInformation.createRemoteUser(user),\n                queue.getQueuePath(), applicationId);\n            rmApp.getApplicationSubmissionContext().setPriority(priority);\n            ((RMAppImpl)rmApp).setApplicationPriority(priority);\n          }\n        }\n      }\n    }\n    return priority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/WorkflowPriorityMappingsManager.java",
      "extendedDetails": {}
    },
    "5462d2176f7a64b236f06700cd247f946798cb26": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9760. Support configuring application priorities on a workflow level. Contributed by Varun Saxena\n",
      "commitDate": "08/10/19 11:20 AM",
      "commitName": "5462d2176f7a64b236f06700cd247f946798cb26",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,40 @@\n+  public Priority mapWorkflowPriorityForApp(ApplicationId applicationId,\n+      CSQueue queue, String user, Priority priority) throws YarnException {\n+    if (overrideWithPriorityMappings) {\n+      // Set the correct workflow priority\n+      RMApp rmApp \u003d scheduler.getRMContext().getRMApps().get(applicationId);\n+      if (rmApp !\u003d null \u0026\u0026 rmApp.getApplicationTags() !\u003d null\n+          \u0026\u0026 rmApp.getApplicationSubmissionContext() !\u003d null) {\n+        String workflowTagPrefix \u003d scheduler.getConf().get(\n+            YarnConfiguration.YARN_WORKFLOW_ID_TAG_PREFIX,\n+            YarnConfiguration.DEFAULT_YARN_WORKFLOW_ID_TAG_PREFIX);\n+        String workflowID \u003d null;\n+        for(String tag : rmApp.getApplicationTags()) {\n+          if (tag.trim().startsWith(workflowTagPrefix)) {\n+            workflowID \u003d tag.trim().substring(workflowTagPrefix.length());\n+          }\n+        }\n+        if (workflowID !\u003d null \u0026\u0026 !workflowID.isEmpty()\n+            \u0026\u0026 priorityMappings !\u003d null \u0026\u0026 priorityMappings.size() \u003e 0) {\n+          Priority mappedPriority \u003d getMappedPriority(workflowID, queue);\n+          if (mappedPriority !\u003d null) {\n+            LOG.info(\"Application \" + applicationId + \" user \" + user\n+                + \" workflow \" + workflowID + \" queue \" + queue.getQueueName()\n+                + \" mapping [\" + priority + \"] to [\" + mappedPriority\n+                + \"] override \" + overrideWithPriorityMappings);\n+\n+            // If workflow ID exists in workflow mapping, change this\n+            // application\u0027s priority to mapped value. Else, use queue\n+            // default priority.\n+            priority \u003d mappedPriority;\n+            priority \u003d scheduler.checkAndGetApplicationPriority(\n+                priority, UserGroupInformation.createRemoteUser(user),\n+                queue.getQueueName(), applicationId);\n+            rmApp.getApplicationSubmissionContext().setPriority(priority);\n+            ((RMAppImpl)rmApp).setApplicationPriority(priority);\n+          }\n+        }\n+      }\n+    }\n+    return priority;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Priority mapWorkflowPriorityForApp(ApplicationId applicationId,\n      CSQueue queue, String user, Priority priority) throws YarnException {\n    if (overrideWithPriorityMappings) {\n      // Set the correct workflow priority\n      RMApp rmApp \u003d scheduler.getRMContext().getRMApps().get(applicationId);\n      if (rmApp !\u003d null \u0026\u0026 rmApp.getApplicationTags() !\u003d null\n          \u0026\u0026 rmApp.getApplicationSubmissionContext() !\u003d null) {\n        String workflowTagPrefix \u003d scheduler.getConf().get(\n            YarnConfiguration.YARN_WORKFLOW_ID_TAG_PREFIX,\n            YarnConfiguration.DEFAULT_YARN_WORKFLOW_ID_TAG_PREFIX);\n        String workflowID \u003d null;\n        for(String tag : rmApp.getApplicationTags()) {\n          if (tag.trim().startsWith(workflowTagPrefix)) {\n            workflowID \u003d tag.trim().substring(workflowTagPrefix.length());\n          }\n        }\n        if (workflowID !\u003d null \u0026\u0026 !workflowID.isEmpty()\n            \u0026\u0026 priorityMappings !\u003d null \u0026\u0026 priorityMappings.size() \u003e 0) {\n          Priority mappedPriority \u003d getMappedPriority(workflowID, queue);\n          if (mappedPriority !\u003d null) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" workflow \" + workflowID + \" queue \" + queue.getQueueName()\n                + \" mapping [\" + priority + \"] to [\" + mappedPriority\n                + \"] override \" + overrideWithPriorityMappings);\n\n            // If workflow ID exists in workflow mapping, change this\n            // application\u0027s priority to mapped value. Else, use queue\n            // default priority.\n            priority \u003d mappedPriority;\n            priority \u003d scheduler.checkAndGetApplicationPriority(\n                priority, UserGroupInformation.createRemoteUser(user),\n                queue.getQueueName(), applicationId);\n            rmApp.getApplicationSubmissionContext().setPriority(priority);\n            ((RMAppImpl)rmApp).setApplicationPriority(priority);\n          }\n        }\n      }\n    }\n    return priority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/WorkflowPriorityMappingsManager.java"
    }
  }
}