{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "updateKnownResources",
  "functionId": "updateKnownResources",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 329,
  "functionEndLine": 359,
  "numCommitsSeen": 36,
  "timeTaken": 1795,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "da0b6a354bf6f6bf37ca5a05a4a8eece09aa4893",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "da0b6a354bf6f6bf37ca5a05a4a8eece09aa4893": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "15/10/18 3:08 AM",
      "commitNameOld": "8e5365e277a184ff65f2f6bca2bf037d1a9f3fd0",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 84.85,
      "commitsBetweenForRepo": 602,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,31 @@\n   private static void updateKnownResources() {\n     // Update resource names.\n     resourceTypesArray \u003d new ResourceInformation[resourceTypes.size()];\n+    List\u003cResourceInformation\u003e nonCountableResources \u003d new ArrayList\u003c\u003e();\n \n     int index \u003d 2;\n     for (ResourceInformation resInfo : resourceTypes.values()) {\n       if (resInfo.getName().equals(MEMORY)) {\n         resourceTypesArray[0] \u003d ResourceInformation\n             .newInstance(resourceTypes.get(MEMORY));\n       } else if (resInfo.getName().equals(VCORES)) {\n         resourceTypesArray[1] \u003d ResourceInformation\n             .newInstance(resourceTypes.get(VCORES));\n       } else {\n+        if (resInfo.getTags() !\u003d null \u0026\u0026 resInfo.getTags()\n+            .contains(EXTERNAL_VOLUME_RESOURCE_TAG)) {\n+          nonCountableResources.add(resInfo);\n+          continue;\n+        }\n         resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n         index++;\n       }\n     }\n+\n+    // Add all non-countable resource types to the end of the resource array.\n+    for(ResourceInformation resInfo: nonCountableResources) {\n+      resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n+      nonCountableResourceTypes.put(resInfo.getName(), resInfo);\n+      index++;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateKnownResources() {\n    // Update resource names.\n    resourceTypesArray \u003d new ResourceInformation[resourceTypes.size()];\n    List\u003cResourceInformation\u003e nonCountableResources \u003d new ArrayList\u003c\u003e();\n\n    int index \u003d 2;\n    for (ResourceInformation resInfo : resourceTypes.values()) {\n      if (resInfo.getName().equals(MEMORY)) {\n        resourceTypesArray[0] \u003d ResourceInformation\n            .newInstance(resourceTypes.get(MEMORY));\n      } else if (resInfo.getName().equals(VCORES)) {\n        resourceTypesArray[1] \u003d ResourceInformation\n            .newInstance(resourceTypes.get(VCORES));\n      } else {\n        if (resInfo.getTags() !\u003d null \u0026\u0026 resInfo.getTags()\n            .contains(EXTERNAL_VOLUME_RESOURCE_TAG)) {\n          nonCountableResources.add(resInfo);\n          continue;\n        }\n        resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n        index++;\n      }\n    }\n\n    // Add all non-countable resource types to the end of the resource array.\n    for(ResourceInformation resInfo: nonCountableResources) {\n      resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n      nonCountableResourceTypes.put(resInfo.getName(), resInfo);\n      index++;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "da0b6a354bf6f6bf37ca5a05a4a8eece09aa4893": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7137. [YARN-3926] Move newly added APIs to unstable in YARN-3926 branch. Contributed by Wangda Tan.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "da0b6a354bf6f6bf37ca5a05a4a8eece09aa4893",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,18 @@\n   private static void updateKnownResources() {\n     // Update resource names.\n-    resourceNamesArray \u003d new String[resourceTypes.size()];\n     resourceTypesArray \u003d new ResourceInformation[resourceTypes.size()];\n \n     int index \u003d 2;\n     for (ResourceInformation resInfo : resourceTypes.values()) {\n       if (resInfo.getName().equals(MEMORY)) {\n         resourceTypesArray[0] \u003d ResourceInformation\n             .newInstance(resourceTypes.get(MEMORY));\n-        resourceNamesArray[0] \u003d MEMORY;\n       } else if (resInfo.getName().equals(VCORES)) {\n         resourceTypesArray[1] \u003d ResourceInformation\n             .newInstance(resourceTypes.get(VCORES));\n-        resourceNamesArray[1] \u003d VCORES;\n       } else {\n         resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n-        resourceNamesArray[index] \u003d resInfo.getName();\n         index++;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateKnownResources() {\n    // Update resource names.\n    resourceTypesArray \u003d new ResourceInformation[resourceTypes.size()];\n\n    int index \u003d 2;\n    for (ResourceInformation resInfo : resourceTypes.values()) {\n      if (resInfo.getName().equals(MEMORY)) {\n        resourceTypesArray[0] \u003d ResourceInformation\n            .newInstance(resourceTypes.get(MEMORY));\n      } else if (resInfo.getName().equals(VCORES)) {\n        resourceTypesArray[1] \u003d ResourceInformation\n            .newInstance(resourceTypes.get(VCORES));\n      } else {\n        resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n        index++;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,22 @@\n+  private static void updateKnownResources() {\n+    // Update resource names.\n+    resourceNamesArray \u003d new String[resourceTypes.size()];\n+    resourceTypesArray \u003d new ResourceInformation[resourceTypes.size()];\n+\n+    int index \u003d 2;\n+    for (ResourceInformation resInfo : resourceTypes.values()) {\n+      if (resInfo.getName().equals(MEMORY)) {\n+        resourceTypesArray[0] \u003d ResourceInformation\n+            .newInstance(resourceTypes.get(MEMORY));\n+        resourceNamesArray[0] \u003d MEMORY;\n+      } else if (resInfo.getName().equals(VCORES)) {\n+        resourceTypesArray[1] \u003d ResourceInformation\n+            .newInstance(resourceTypes.get(VCORES));\n+        resourceNamesArray[1] \u003d VCORES;\n+      } else {\n+        resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n+        resourceNamesArray[index] \u003d resInfo.getName();\n+        index++;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateKnownResources() {\n    // Update resource names.\n    resourceNamesArray \u003d new String[resourceTypes.size()];\n    resourceTypesArray \u003d new ResourceInformation[resourceTypes.size()];\n\n    int index \u003d 2;\n    for (ResourceInformation resInfo : resourceTypes.values()) {\n      if (resInfo.getName().equals(MEMORY)) {\n        resourceTypesArray[0] \u003d ResourceInformation\n            .newInstance(resourceTypes.get(MEMORY));\n        resourceNamesArray[0] \u003d MEMORY;\n      } else if (resInfo.getName().equals(VCORES)) {\n        resourceTypesArray[1] \u003d ResourceInformation\n            .newInstance(resourceTypes.get(VCORES));\n        resourceNamesArray[1] \u003d VCORES;\n      } else {\n        resourceTypesArray[index] \u003d ResourceInformation.newInstance(resInfo);\n        resourceNamesArray[index] \u003d resInfo.getName();\n        index++;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}