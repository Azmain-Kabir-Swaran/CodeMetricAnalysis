{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "updateClusterResource",
  "functionId": "updateClusterResource___clusterResource-Resource__currentResourceLimits-ResourceLimits",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1809,
  "functionEndLine": 1850,
  "numCommitsSeen": 276,
  "timeTaken": 11320,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f",
    "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8",
    "0e065f2edead41f6f894c9d70def389af1c0f239",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "444b2ea7afebf9f6c3d356154b71abfd0ea95b23",
    "9b856d9787be5ec88ef34574b9b98755d7b669ea",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
    "d573f09fb93dbb711d504620af5d73840ea063a6",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15",
    "14dd647c556016d351f425ee956ccf800ccb9ce2",
    "18a594257e052e8f10a03e5594e6cc6901dc56be",
    "c53420f58364b11fbda1dace7679d45534533382",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "d0bbff6c32592cb5d49d7be8d8a7346788a9ba19",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "cc523683cfa76c1255667a3aedc48b08e5daabc7",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "97ed48e0357094ac43533c9e6bd05067b15010c6",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "6d80dc2a84bb9a7d15c51e79c624211a20a74b23",
    "c7007a8a3508a24a6f023302516fe8fbe270eab1",
    "a5c46c91655acebccd1367706b05946eff90f744",
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
    "21c9116309d8482e7e28522cd7386e65415b15e9",
    "9d1621da52fd7f4ee68f80fdbf420180a42b5b1d",
    "b8f0836f9420e71652404c41471653bb15f62a48",
    "6b608aad7d52b524fa94955a538e8b3524d42d93"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f": "Ybodychange",
    "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8": "Ybodychange",
    "0e065f2edead41f6f894c9d70def389af1c0f239": "Ybodychange",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "444b2ea7afebf9f6c3d356154b71abfd0ea95b23": "Ybodychange",
    "9b856d9787be5ec88ef34574b9b98755d7b669ea": "Ybodychange",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ybodychange",
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5": "Ybodychange",
    "d573f09fb93dbb711d504620af5d73840ea063a6": "Ybodychange",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ybodychange",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": "Ybodychange",
    "14dd647c556016d351f425ee956ccf800ccb9ce2": "Ymultichange(Yparameterchange,Ybodychange)",
    "18a594257e052e8f10a03e5594e6cc6901dc56be": "Ybodychange",
    "c53420f58364b11fbda1dace7679d45534533382": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "d0bbff6c32592cb5d49d7be8d8a7346788a9ba19": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "cc523683cfa76c1255667a3aedc48b08e5daabc7": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "97ed48e0357094ac43533c9e6bd05067b15010c6": "Ybodychange",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "6d80dc2a84bb9a7d15c51e79c624211a20a74b23": "Ybodychange",
    "c7007a8a3508a24a6f023302516fe8fbe270eab1": "Ybodychange",
    "a5c46c91655acebccd1367706b05946eff90f744": "Ybodychange",
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba": "Ybodychange",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": "Ybodychange",
    "21c9116309d8482e7e28522cd7386e65415b15e9": "Ybodychange",
    "9d1621da52fd7f4ee68f80fdbf420180a42b5b1d": "Ybodychange",
    "b8f0836f9420e71652404c41471653bb15f62a48": "Ybodychange",
    "6b608aad7d52b524fa94955a538e8b3524d42d93": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n       lastClusterResource \u003d clusterResource;\n \n       // Update headroom info based on new cluster resource value\n       // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n       // during allocation\n       setQueueResourceLimitsInfo(clusterResource);\n \n       // Update user consumedRatios\n       recalculateQueueUsageRatio(clusterResource, null);\n \n       // Update metrics\n       CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n           this, labelManager, null);\n       // Update configured capacity/max-capacity for default partition only\n       CSQueueUtils.updateConfiguredCapacityMetrics(resourceCalculator,\n           labelManager.getResourceByLabel(null, clusterResource),\n           RMNodeLabelsManager.NO_LABEL, this);\n \n       // queue metrics are updated, more resource may be available\n       // activate the pending applications if possible\n       activateApplications();\n \n       // In case of any resource change, invalidate recalculateULCount to clear\n       // the computed user-limit.\n       usersManager.userLimitNeedsRecompute();\n \n       // Update application properties\n       for (FiCaSchedulerApp application : orderingPolicy\n           .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, null);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    writeLock.lock();\n    try {\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          this, labelManager, null);\n      // Update configured capacity/max-capacity for default partition only\n      CSQueueUtils.updateConfiguredCapacityMetrics(resourceCalculator,\n          labelManager.getResourceByLabel(null, clusterResource),\n          RMNodeLabelsManager.NO_LABEL, this);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // In case of any resource change, invalidate recalculateULCount to clear\n      // the computed user-limit.\n      usersManager.userLimitNeedsRecompute();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, null);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9085. Add Guaranteed and MaxCapacity to CSQueueMetrics\n",
      "commitDate": "07/12/18 10:45 AM",
      "commitName": "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "21/08/18 7:42 AM",
      "commitNameOld": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 108.17,
      "commitsBetweenForRepo": 925,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     try {\n       writeLock.lock();\n       updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n       lastClusterResource \u003d clusterResource;\n \n       // Update headroom info based on new cluster resource value\n       // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n       // during allocation\n       setQueueResourceLimitsInfo(clusterResource);\n \n       // Update user consumedRatios\n       recalculateQueueUsageRatio(clusterResource, null);\n \n       // Update metrics\n       CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n           this, labelManager, null);\n+      // Update configured capacity/max-capacity for default partition only\n+      CSQueueUtils.updateConfiguredCapacityMetrics(resourceCalculator,\n+          labelManager.getResourceByLabel(null, clusterResource),\n+          RMNodeLabelsManager.NO_LABEL, this);\n \n       // queue metrics are updated, more resource may be available\n       // activate the pending applications if possible\n       activateApplications();\n \n       // In case of any resource change, invalidate recalculateULCount to clear\n       // the computed user-limit.\n       usersManager.userLimitNeedsRecompute();\n \n       // Update application properties\n       for (FiCaSchedulerApp application : orderingPolicy\n           .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, null);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    try {\n      writeLock.lock();\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          this, labelManager, null);\n      // Update configured capacity/max-capacity for default partition only\n      CSQueueUtils.updateConfiguredCapacityMetrics(resourceCalculator,\n          labelManager.getResourceByLabel(null, clusterResource),\n          RMNodeLabelsManager.NO_LABEL, this);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // In case of any resource change, invalidate recalculateULCount to clear\n      // the computed user-limit.\n      usersManager.userLimitNeedsRecompute();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, null);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6775. CapacityScheduler: Improvements to assignContainers, avoid unnecessary canAssignToUser/Queue calls. (Nathan Roberts via wangda)\n\nChange-Id: I84ccd54200ccbaae23018ef320028e42b4c3509a\n",
      "commitDate": "13/07/17 10:30 AM",
      "commitName": "945c0958bb8df3dd9d5f1467f1216d2e6b0ee3d8",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "22/06/17 11:50 PM",
      "commitNameOld": "ca13b224b2feb9c44de861da9cbba8dd2a12cb35",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 20.44,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     try {\n       writeLock.lock();\n       updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n       lastClusterResource \u003d clusterResource;\n \n       // Update headroom info based on new cluster resource value\n       // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n       // during allocation\n       setQueueResourceLimitsInfo(clusterResource);\n \n       // Update user consumedRatios\n       recalculateQueueUsageRatio(clusterResource, null);\n \n       // Update metrics\n       CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n           this, labelManager, null);\n \n       // queue metrics are updated, more resource may be available\n       // activate the pending applications if possible\n       activateApplications();\n \n       // In case of any resource change, invalidate recalculateULCount to clear\n       // the computed user-limit.\n       usersManager.userLimitNeedsRecompute();\n \n       // Update application properties\n       for (FiCaSchedulerApp application : orderingPolicy\n           .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n-            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n+            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, null);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    try {\n      writeLock.lock();\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          this, labelManager, null);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // In case of any resource change, invalidate recalculateULCount to clear\n      // the computed user-limit.\n      usersManager.userLimitNeedsRecompute();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, null);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "0e065f2edead41f6f894c9d70def389af1c0f239": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6195. Export UsedCapacity and AbsoluteUsedCapacity to JMX. Contributed by Benson Qiu\n",
      "commitDate": "11/04/17 6:44 AM",
      "commitName": "0e065f2edead41f6f894c9d70def389af1c0f239",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/04/17 3:34 PM",
      "commitNameOld": "7999318af12a75b35815461c601d4c25750e8340",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     try {\n       writeLock.lock();\n       updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n       lastClusterResource \u003d clusterResource;\n \n       // Update headroom info based on new cluster resource value\n       // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n       // during allocation\n       setQueueResourceLimitsInfo(clusterResource);\n \n       // Update user consumedRatios\n       recalculateQueueUsageRatio(clusterResource, null);\n \n       // Update metrics\n       CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n-          minimumAllocation, this, labelManager, null);\n+          this, labelManager, null);\n \n       // queue metrics are updated, more resource may be available\n       // activate the pending applications if possible\n       activateApplications();\n \n       // In case of any resource change, invalidate recalculateULCount to clear\n       // the computed user-limit.\n       usersManager.userLimitNeedsRecompute();\n \n       // Update application properties\n       for (FiCaSchedulerApp application : orderingPolicy\n           .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    try {\n      writeLock.lock();\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          this, labelManager, null);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // In case of any resource change, invalidate recalculateULCount to clear\n      // the computed user-limit.\n      usersManager.userLimitNeedsRecompute();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     try {\n       writeLock.lock();\n       updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n       lastClusterResource \u003d clusterResource;\n \n       // Update headroom info based on new cluster resource value\n       // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n       // during allocation\n       setQueueResourceLimitsInfo(clusterResource);\n \n       // Update user consumedRatios\n       recalculateQueueUsageRatio(clusterResource, null);\n \n       // Update metrics\n       CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n           minimumAllocation, this, labelManager, null);\n \n       // queue metrics are updated, more resource may be available\n       // activate the pending applications if possible\n       activateApplications();\n \n+      // In case of any resource change, invalidate recalculateULCount to clear\n+      // the computed user-limit.\n+      usersManager.userLimitNeedsRecompute();\n+\n       // Update application properties\n       for (FiCaSchedulerApp application : orderingPolicy\n           .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    try {\n      writeLock.lock();\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          minimumAllocation, this, labelManager, null);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // In case of any resource change, invalidate recalculateULCount to clear\n      // the computed user-limit.\n      usersManager.userLimitNeedsRecompute();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,34 @@\n-  public synchronized void updateClusterResource(Resource clusterResource,\n+  public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n-    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n-    lastClusterResource \u003d clusterResource;\n-    \n-    // Update headroom info based on new cluster resource value\n-    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n-    // during allocation\n-    setQueueResourceLimitsInfo(clusterResource);\n+    try {\n+      writeLock.lock();\n+      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n+      lastClusterResource \u003d clusterResource;\n \n-    // Update user consumedRatios\n-    recalculateQueueUsageRatio(clusterResource, null);\n+      // Update headroom info based on new cluster resource value\n+      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n+      // during allocation\n+      setQueueResourceLimitsInfo(clusterResource);\n \n-    // Update metrics\n-    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n-        minimumAllocation, this, labelManager, null);\n+      // Update user consumedRatios\n+      recalculateQueueUsageRatio(clusterResource, null);\n \n-    // queue metrics are updated, more resource may be available\n-    // activate the pending applications if possible\n-    activateApplications();\n+      // Update metrics\n+      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n+          minimumAllocation, this, labelManager, null);\n \n-    // Update application properties\n-    for (FiCaSchedulerApp application :\n-      orderingPolicy.getSchedulableEntities()) {\n-      synchronized (application) {\n+      // queue metrics are updated, more resource may be available\n+      // activate the pending applications if possible\n+      activateApplications();\n+\n+      // Update application properties\n+      for (FiCaSchedulerApp application : orderingPolicy\n+          .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    try {\n      writeLock.lock();\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          minimumAllocation, this, labelManager, null);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,34 @@\n-  public synchronized void updateClusterResource(Resource clusterResource,\n+  public void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n-    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n-    lastClusterResource \u003d clusterResource;\n-    \n-    // Update headroom info based on new cluster resource value\n-    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n-    // during allocation\n-    setQueueResourceLimitsInfo(clusterResource);\n+    try {\n+      writeLock.lock();\n+      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n+      lastClusterResource \u003d clusterResource;\n \n-    // Update user consumedRatios\n-    recalculateQueueUsageRatio(clusterResource, null);\n+      // Update headroom info based on new cluster resource value\n+      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n+      // during allocation\n+      setQueueResourceLimitsInfo(clusterResource);\n \n-    // Update metrics\n-    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n-        minimumAllocation, this, labelManager, null);\n+      // Update user consumedRatios\n+      recalculateQueueUsageRatio(clusterResource, null);\n \n-    // queue metrics are updated, more resource may be available\n-    // activate the pending applications if possible\n-    activateApplications();\n+      // Update metrics\n+      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n+          minimumAllocation, this, labelManager, null);\n \n-    // Update application properties\n-    for (FiCaSchedulerApp application :\n-      orderingPolicy.getSchedulableEntities()) {\n-      synchronized (application) {\n+      // queue metrics are updated, more resource may be available\n+      // activate the pending applications if possible\n+      activateApplications();\n+\n+      // Update application properties\n+      for (FiCaSchedulerApp application : orderingPolicy\n+          .getSchedulableEntities()) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    try {\n      writeLock.lock();\n      updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n      lastClusterResource \u003d clusterResource;\n\n      // Update headroom info based on new cluster resource value\n      // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n      // during allocation\n      setQueueResourceLimitsInfo(clusterResource);\n\n      // Update user consumedRatios\n      recalculateQueueUsageRatio(clusterResource, null);\n\n      // Update metrics\n      CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n          minimumAllocation, this, labelManager, null);\n\n      // queue metrics are updated, more resource may be available\n      // activate the pending applications if possible\n      activateApplications();\n\n      // Update application properties\n      for (FiCaSchedulerApp application : orderingPolicy\n          .getSchedulableEntities()) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "444b2ea7afebf9f6c3d356154b71abfd0ea95b23": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3388. Allocation in LeafQueue could get stuck because DRF calculator isn\u0027t well supported when computing user-limit. (Nathan Roberts via wangda)\n",
      "commitDate": "19/08/16 4:28 PM",
      "commitName": "444b2ea7afebf9f6c3d356154b71abfd0ea95b23",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/08/16 5:00 AM",
      "commitNameOld": "091dd19e8636b8bd5668dbb3bcd8bbce7c952274",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n     setQueueResourceLimitsInfo(clusterResource);\n-    \n+\n+    // Update user consumedRatios\n+    recalculateQueueUsageRatio(clusterResource, null);\n+\n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n         minimumAllocation, this, labelManager, null);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application :\n       orderingPolicy.getSchedulableEntities()) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n\n    // Update user consumedRatios\n    recalculateQueueUsageRatio(clusterResource, null);\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n        minimumAllocation, this, labelManager, null);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application :\n      orderingPolicy.getSchedulableEntities()) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "9b856d9787be5ec88ef34574b9b98755d7b669ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4416. Deadlock due to synchronised get Methods in AbstractCSQueue. (Naganarasimha G R via wangda)\n",
      "commitDate": "16/12/15 1:22 PM",
      "commitName": "9b856d9787be5ec88ef34574b9b98755d7b669ea",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/12/15 11:24 AM",
      "commitNameOld": "07b0fb996a32020678bd2ce482b672f0434651f0",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n-    updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n     setQueueResourceLimitsInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n         minimumAllocation, this, labelManager, null);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application :\n       orderingPolicy.getSchedulableEntities()) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n        minimumAllocation, this, labelManager, null);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application :\n      orderingPolicy.getSchedulableEntities()) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/07/15 11:54 AM",
      "commitNameOld": "76ec26de8099dc48ce3812c595b7ab857a600442",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n     setQueueResourceLimitsInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n         minimumAllocation, this, labelManager, null);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application :\n       orderingPolicy.getSchedulableEntities()) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n-            Resources.none(), RMNodeLabelsManager.NO_LABEL,\n+            RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n        minimumAllocation, this, labelManager, null);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application :\n      orderingPolicy.getSchedulableEntities()) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3463. Integrate OrderingPolicy Framework with CapacityScheduler. (Craig Welch via wangda)\n",
      "commitDate": "20/04/15 5:12 PM",
      "commitName": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/04/15 1:36 PM",
      "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n     setQueueResourceLimitsInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n         minimumAllocation, this, labelManager, null);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n-    for (FiCaSchedulerApp application : activeApplications) {\n+    for (FiCaSchedulerApp application :\n+      orderingPolicy.getSchedulableEntities()) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             Resources.none(), RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n        minimumAllocation, this, labelManager, null);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application :\n      orderingPolicy.getSchedulableEntities()) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            Resources.none(), RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "d573f09fb93dbb711d504620af5d73840ea063a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2696. Queue sorting in CapacityScheduler should consider node label. Contributed by Wangda Tan\n",
      "commitDate": "17/04/15 1:36 PM",
      "commitName": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/04/15 11:45 AM",
      "commitNameOld": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n     setQueueResourceLimitsInfo(clusterResource);\n     \n     // Update metrics\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, getParent(), clusterResource, \n-        minimumAllocation);\n+    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n+        minimumAllocation, this, labelManager, null);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource,\n             Resources.none(), RMNodeLabelsManager.NO_LABEL,\n             SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(resourceCalculator, clusterResource,\n        minimumAllocation, this, labelManager, null);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            Resources.none(), RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/04/15 11:38 PM",
      "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 4.51,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n     updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n     setQueueResourceLimitsInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n-        computeUserLimitAndSetHeadroom(application, clusterResource, \n-            Resources.none(), null);\n+        computeUserLimitAndSetHeadroom(application, clusterResource,\n+            Resources.none(), RMNodeLabelsManager.NO_LABEL,\n+            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource,\n            Resources.none(), RMNodeLabelsManager.NO_LABEL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
      "commitDate": "17/03/15 10:24 AM",
      "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/03/15 11:49 AM",
      "commitNameOld": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.9,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public synchronized void updateClusterResource(Resource clusterResource,\n       ResourceLimits currentResourceLimits) {\n-    this.currentResourceLimits \u003d currentResourceLimits;\n+    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n-    computeQueueCurrentLimitAndSetHeadroomInfo(clusterResource);\n+    setQueueResourceLimitsInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    updateCurrentResourceLimits(currentResourceLimits, clusterResource);\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    setQueueResourceLimitsInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none(), null);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "14dd647c556016d351f425ee956ccf800ccb9ce2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
      "commitDate": "02/03/15 5:52 PM",
      "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
          "commitDate": "02/03/15 5:52 PM",
          "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/02/15 2:58 PM",
          "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.12,
          "commitsBetweenForRepo": 155,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public synchronized void updateClusterResource(Resource clusterResource) {\n+  public synchronized void updateClusterResource(Resource clusterResource,\n+      ResourceLimits currentResourceLimits) {\n+    this.currentResourceLimits \u003d currentResourceLimits;\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n-    updateHeadroomInfo(clusterResource,\n-        queueCapacities.getAbsoluteMaximumCapacity());\n+    computeQueueCurrentLimitAndSetHeadroomInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    this.currentResourceLimits \u003d currentResourceLimits;\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    computeQueueCurrentLimitAndSetHeadroomInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none(), null);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource]",
            "newValue": "[clusterResource-Resource, currentResourceLimits-ResourceLimits]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
          "commitDate": "02/03/15 5:52 PM",
          "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/02/15 2:58 PM",
          "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 18.12,
          "commitsBetweenForRepo": 155,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public synchronized void updateClusterResource(Resource clusterResource) {\n+  public synchronized void updateClusterResource(Resource clusterResource,\n+      ResourceLimits currentResourceLimits) {\n+    this.currentResourceLimits \u003d currentResourceLimits;\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n-    updateHeadroomInfo(clusterResource,\n-        queueCapacities.getAbsoluteMaximumCapacity());\n+    computeQueueCurrentLimitAndSetHeadroomInfo(clusterResource);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource,\n      ResourceLimits currentResourceLimits) {\n    this.currentResourceLimits \u003d currentResourceLimits;\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    computeQueueCurrentLimitAndSetHeadroomInfo(clusterResource);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none(), null);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "18a594257e052e8f10a03e5594e6cc6901dc56be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
      "commitDate": "12/02/15 2:58 PM",
      "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/02/15 8:34 PM",
      "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     lastClusterResource \u003d clusterResource;\n     updateAbsoluteCapacityResource(clusterResource);\n     \n     // Update headroom info based on new cluster resource value\n     // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n     // during allocation\n-    updateHeadroomInfo(clusterResource, absoluteMaxCapacity);\n+    updateHeadroomInfo(clusterResource,\n+        queueCapacities.getAbsoluteMaximumCapacity());\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    updateHeadroomInfo(clusterResource,\n        queueCapacities.getAbsoluteMaximumCapacity());\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none(), null);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "c53420f58364b11fbda1dace7679d45534533382": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2637. Fixed max-am-resource-percent calculation in CapacityScheduler when activating applications. Contributed by Craig Welch\n",
      "commitDate": "13/01/15 5:32 PM",
      "commitName": "c53420f58364b11fbda1dace7679d45534533382",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/01/15 2:15 PM",
      "commitNameOld": "dd57c2047bfd21910acc38c98153eedf1db75169",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.14,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,26 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     lastClusterResource \u003d clusterResource;\n+    updateAbsoluteCapacityResource(clusterResource);\n     \n-    // Update queue properties\n-    maxActiveApplications \u003d \n-        CSQueueUtils.computeMaxActiveApplications(\n-            resourceCalculator,\n-            clusterResource, minimumAllocation, \n-            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n-    maxActiveAppsUsingAbsCap \u003d \n-        CSQueueUtils.computeMaxActiveApplications(\n-            resourceCalculator,\n-            clusterResource, minimumAllocation, \n-            maxAMResourcePerQueuePercent, absoluteCapacity);\n-    maxActiveApplicationsPerUser \u003d \n-        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n-            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n+    // Update headroom info based on new cluster resource value\n+    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n+    // during allocation\n+    updateHeadroomInfo(clusterResource, absoluteMaxCapacity);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    lastClusterResource \u003d clusterResource;\n    updateAbsoluteCapacityResource(clusterResource);\n    \n    // Update headroom info based on new cluster resource value\n    // absoluteMaxCapacity now,  will be replaced with absoluteMaxAvailCapacity\n    // during allocation\n    updateHeadroomInfo(clusterResource, absoluteMaxCapacity);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none(), null);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/10/14 1:45 PM",
      "commitNameOld": "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.2,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n+    lastClusterResource \u003d clusterResource;\n+    \n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             resourceCalculator,\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n     maxActiveAppsUsingAbsCap \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             resourceCalculator,\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n \n     // queue metrics are updated, more resource may be available\n     // activate the pending applications if possible\n     activateApplications();\n \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n-            Resources.none());\n+            Resources.none(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    lastClusterResource \u003d clusterResource;\n    \n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            resourceCalculator,\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            resourceCalculator,\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none(), null);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "d0bbff6c32592cb5d49d7be8d8a7346788a9ba19": {
      "type": "Ybodychange",
      "commitMessage": "YARN-209. Fix CapacityScheduler to trigger application-activation when the cluster capacity changes. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461773 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/13 11:38 AM",
      "commitName": "d0bbff6c32592cb5d49d7be8d8a7346788a9ba19",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/03/13 8:44 PM",
      "commitNameOld": "d60c2fa17f1b6ccb412ce25fc9e28b7af4c8c0a5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             resourceCalculator,\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n     maxActiveAppsUsingAbsCap \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             resourceCalculator,\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, getParent(), clusterResource, \n         minimumAllocation);\n-    \n+\n+    // queue metrics are updated, more resource may be available\n+    // activate the pending applications if possible\n+    activateApplications();\n+\n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            resourceCalculator,\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            resourceCalculator,\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n\n    // queue metrics are updated, more resource may be available\n    // activate the pending applications if possible\n    activateApplications();\n\n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/11/12 1:56 PM",
      "commitNameOld": "fb5b96dfc324f999e8b3698288c110a1c3b71c30",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 62.3,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n+            resourceCalculator,\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n     maxActiveAppsUsingAbsCap \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n+            resourceCalculator,\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n-        this, getParent(), clusterResource, minimumAllocation);\n+        resourceCalculator, this, getParent(), clusterResource, \n+        minimumAllocation);\n     \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            resourceCalculator,\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            resourceCalculator,\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, getParent(), clusterResource, \n        minimumAllocation);\n    \n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cc523683cfa76c1255667a3aedc48b08e5daabc7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-177. CapacityScheduler - adding a queue while the RM is running has wacky results (acmurthy vai tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401668 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 6:21 AM",
      "commitName": "cc523683cfa76c1255667a3aedc48b08e5daabc7",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "26/09/12 8:43 PM",
      "commitNameOld": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 27.4,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n     maxActiveAppsUsingAbsCap \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             clusterResource, minimumAllocation, \n             maxAMResourcePerQueuePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n-        this, parent, clusterResource, minimumAllocation);\n+        this, getParent(), clusterResource, minimumAllocation);\n     \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, getParent(), clusterResource, minimumAllocation);\n    \n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    \n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "97ed48e0357094ac43533c9e6bd05067b15010c6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3893. allow capacity scheduler configs max-apps and max-am-pct per queue (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1364764 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/12 12:31 PM",
      "commitName": "97ed48e0357094ac43533c9e6bd05067b15010c6",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "16/07/12 6:43 PM",
      "commitNameOld": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             clusterResource, minimumAllocation, \n-            maxAMResourcePercent, absoluteMaxCapacity);\n+            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n     maxActiveAppsUsingAbsCap \u003d \n-            CSQueueUtils.computeMaxActiveApplications(\n-                clusterResource, minimumAllocation, \n-                maxAMResourcePercent, absoluteCapacity);\n+        CSQueueUtils.computeMaxActiveApplications(\n+            clusterResource, minimumAllocation, \n+            maxAMResourcePerQueuePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         this, parent, clusterResource, minimumAllocation);\n     \n     // Update application properties\n     for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePerQueuePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    \n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             clusterResource, minimumAllocation, \n             maxAMResourcePercent, absoluteMaxCapacity);\n     maxActiveAppsUsingAbsCap \u003d \n             CSQueueUtils.computeMaxActiveApplications(\n                 clusterResource, minimumAllocation, \n                 maxAMResourcePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         this, parent, clusterResource, minimumAllocation);\n     \n     // Update application properties\n-    for (SchedulerApp application : activeApplications) {\n+    for (FiCaSchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n            CSQueueUtils.computeMaxActiveApplications(\n                clusterResource, minimumAllocation, \n                maxAMResourcePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    \n    // Update application properties\n    for (FiCaSchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "6d80dc2a84bb9a7d15c51e79c624211a20a74b23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3897. Fixed computation of maxActiveAppsPerUser for queues by using capacity and not max-capacity since we are already scaling it by userLimitFactor. Contributed by Eric Payne.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296898 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/12 3:44 PM",
      "commitName": "6d80dc2a84bb9a7d15c51e79c624211a20a74b23",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/02/12 12:06 PM",
      "commitNameOld": "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 5.15,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             clusterResource, minimumAllocation, \n             maxAMResourcePercent, absoluteMaxCapacity);\n+    maxActiveAppsUsingAbsCap \u003d \n+            CSQueueUtils.computeMaxActiveApplications(\n+                clusterResource, minimumAllocation, \n+                maxAMResourcePercent, absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n-            maxActiveApplications, userLimit, userLimitFactor);\n+            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n     \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         this, parent, clusterResource, minimumAllocation);\n     \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePercent, absoluteMaxCapacity);\n    maxActiveAppsUsingAbsCap \u003d \n            CSQueueUtils.computeMaxActiveApplications(\n                clusterResource, minimumAllocation, \n                maxAMResourcePercent, absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveAppsUsingAbsCap, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "c7007a8a3508a24a6f023302516fe8fbe270eab1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3747. Initialize queue metrics upfront and added start/finish time to RM Web-UI. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240886 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/12 7:38 PM",
      "commitName": "c7007a8a3508a24a6f023302516fe8fbe270eab1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "02/02/12 5:16 PM",
      "commitNameOld": "a5c46c91655acebccd1367706b05946eff90f744",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,22 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(\n             clusterResource, minimumAllocation, \n             maxAMResourcePercent, absoluteMaxCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(\n             maxActiveApplications, userLimit, userLimitFactor);\n     \n+    // Update metrics\n+    CSQueueUtils.updateQueueStatistics(\n+        this, parent, clusterResource, minimumAllocation);\n+    \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePercent, absoluteMaxCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveApplications, userLimit, userLimitFactor);\n    \n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "a5c46c91655acebccd1367706b05946eff90f744": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3784. Fixed CapacityScheduler so that maxActiveApplications and maxActiveApplicationsPerUser per queue are not too low for small clusters. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239971 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 5:16 PM",
      "commitName": "a5c46c91655acebccd1367706b05946eff90f744",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/02/12 4:33 PM",
      "commitNameOld": "72d34e6594371112bb4e9835817b382bd4161a6d",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n-        CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n-            absoluteCapacity);\n+        CSQueueUtils.computeMaxActiveApplications(\n+            clusterResource, minimumAllocation, \n+            maxAMResourcePercent, absoluteMaxCapacity);\n     maxActiveApplicationsPerUser \u003d \n-        CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n-            userLimitFactor);\n+        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n+            maxActiveApplications, userLimit, userLimitFactor);\n     \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n       synchronized (application) {\n         computeUserLimitAndSetHeadroom(application, clusterResource, \n             Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(\n            clusterResource, minimumAllocation, \n            maxAMResourcePercent, absoluteMaxCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(\n            maxActiveApplications, userLimit, userLimitFactor);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "ef1a619a4df3a612eb293a6e8e1e952eaef18eba": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3752. Modified application limits to include queue max-capacities besides the usual user limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239422 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 4:41 PM",
      "commitName": "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/01/12 5:32 PM",
      "commitNameOld": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n             absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n             userLimitFactor);\n     \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n       synchronized (application) {\n-        computeAndSetUserResourceLimit(\n-            application, clusterResource, Resources.none());\n+        computeUserLimitAndSetHeadroom(application, clusterResource, \n+            Resources.none());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n            absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n            userLimitFactor);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeUserLimitAndSetHeadroom(application, clusterResource, \n            Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3732. Modified CapacityScheduler to use only users with pending requests for computing user-limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/12 5:32 PM",
      "commitName": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/12 3:31 PM",
      "commitNameOld": "21c9116309d8482e7e28522cd7386e65415b15e9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n             absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n             userLimitFactor);\n     \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n-      computeAndSetUserResourceLimit(\n-          application, clusterResource, Resources.none());\n+      synchronized (application) {\n+        computeAndSetUserResourceLimit(\n+            application, clusterResource, Resources.none());\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n            absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n            userLimitFactor);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      synchronized (application) {\n        computeAndSetUserResourceLimit(\n            application, clusterResource, Resources.none());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "21c9116309d8482e7e28522cd7386e65415b15e9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3713. Fixed the way head-room is allocated to applications by CapacityScheduler so that it deducts current-usage per user and not per-application. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 3:31 PM",
      "commitName": "21c9116309d8482e7e28522cd7386e65415b15e9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/12 10:17 AM",
      "commitNameOld": "9d1621da52fd7f4ee68f80fdbf420180a42b5b1d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n         CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n             absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n             userLimitFactor);\n     \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n-      computeAndSetUserResourceLimit(application, clusterResource);\n+      computeAndSetUserResourceLimit(\n+          application, clusterResource, Resources.none());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n            absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n            userLimitFactor);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      computeAndSetUserResourceLimit(\n          application, clusterResource, Resources.none());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "9d1621da52fd7f4ee68f80fdbf420180a42b5b1d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3683. Fixed maxCapacity of queues to be product of parent maxCapacities. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:17 AM",
      "commitName": "9d1621da52fd7f4ee68f80fdbf420180a42b5b1d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "23/01/12 5:00 PM",
      "commitNameOld": "9a153334ac5a83a49a44ead02466453f3127120f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n     // Update queue properties\n     maxActiveApplications \u003d \n-        computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n+        CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n             absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n-        computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n+        CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n             userLimitFactor);\n     \n     // Update application properties\n     for (SchedulerApp application : activeApplications) {\n       computeAndSetUserResourceLimit(application, clusterResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        CSQueueUtils.computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n            absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        CSQueueUtils.computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n            userLimitFactor);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      computeAndSetUserResourceLimit(application, clusterResource);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "b8f0836f9420e71652404c41471653bb15f62a48": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3126. Fixed a corner case in CapacityScheduler where headroom wasn\u0027t updated on changes to cluster size.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1182000 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/11 11:24 AM",
      "commitName": "b8f0836f9420e71652404c41471653bb15f62a48",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/10/11 10:27 PM",
      "commitNameOld": "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 4.54,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,14 @@\n   public synchronized void updateClusterResource(Resource clusterResource) {\n+    // Update queue properties\n     maxActiveApplications \u003d \n         computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n             absoluteCapacity);\n     maxActiveApplicationsPerUser \u003d \n         computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n             userLimitFactor);\n+    \n+    // Update application properties\n+    for (SchedulerApp application : activeApplications) {\n+      computeAndSetUserResourceLimit(application, clusterResource);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    // Update queue properties\n    maxActiveApplications \u003d \n        computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n            absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n            userLimitFactor);\n    \n    // Update application properties\n    for (SchedulerApp application : activeApplications) {\n      computeAndSetUserResourceLimit(application, clusterResource);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "6b608aad7d52b524fa94955a538e8b3524d42d93": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2697. Enhance CapacityScheduler to cap concurrently running applications per-queue \u0026 per-user.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/11 12:49 PM",
      "commitName": "6b608aad7d52b524fa94955a538e8b3524d42d93",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,8 @@\n+  public synchronized void updateClusterResource(Resource clusterResource) {\n+    maxActiveApplications \u003d \n+        computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n+            absoluteCapacity);\n+    maxActiveApplicationsPerUser \u003d \n+        computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n+            userLimitFactor);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateClusterResource(Resource clusterResource) {\n    maxActiveApplications \u003d \n        computeMaxActiveApplications(clusterResource, maxAMResourcePercent, \n            absoluteCapacity);\n    maxActiveApplicationsPerUser \u003d \n        computeMaxActiveApplicationsPerUser(maxActiveApplications, userLimit, \n            userLimitFactor);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}