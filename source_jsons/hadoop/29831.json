{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemorySCMStore.java",
  "functionName": "isResourceEvictable",
  "functionId": "isResourceEvictable___key-String__file-FileStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-sharedcachemanager/src/main/java/org/apache/hadoop/yarn/server/sharedcachemanager/store/InMemorySCMStore.java",
  "functionStartLine": 415,
  "functionEndLine": 437,
  "numCommitsSeen": 6,
  "timeTaken": 679,
  "changeHistory": [
    "4f426fe2232ed90d8fdf8619fbdeae28d788b5c8"
  ],
  "changeHistoryShort": {
    "4f426fe2232ed90d8fdf8619fbdeae28d788b5c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4f426fe2232ed90d8fdf8619fbdeae28d788b5c8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2180. [YARN-1492] In-memory backing store for cache manager. (Chris Trezzo via kasha)\n",
      "commitDate": "09/10/14 5:16 PM",
      "commitName": "4f426fe2232ed90d8fdf8619fbdeae28d788b5c8",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,23 @@\n+  public boolean isResourceEvictable(String key, FileStatus file) {\n+    synchronized (initialAppsLock) {\n+      if (initialApps.size() \u003e 0) {\n+        return false;\n+      }\n+    }\n+\n+    long staleTime \u003d\n+        System.currentTimeMillis()\n+            - TimeUnit.MINUTES.toMillis(this.stalenessMinutes);\n+    long accessTime \u003d getAccessTime(key);\n+    if (accessTime \u003d\u003d -1) {\n+      // check modification time\n+      long modTime \u003d file.getModificationTime();\n+      // if modification time is older then the store startup time, we need to\n+      // just use the store startup time as the last point of certainty\n+      long lastUse \u003d modTime \u003c this.startTime ? this.startTime : modTime;\n+      return lastUse \u003c staleTime;\n+    } else {\n+      // check access time\n+      return accessTime \u003c staleTime;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean isResourceEvictable(String key, FileStatus file) {\n    synchronized (initialAppsLock) {\n      if (initialApps.size() \u003e 0) {\n        return false;\n      }\n    }\n\n    long staleTime \u003d\n        System.currentTimeMillis()\n            - TimeUnit.MINUTES.toMillis(this.stalenessMinutes);\n    long accessTime \u003d getAccessTime(key);\n    if (accessTime \u003d\u003d -1) {\n      // check modification time\n      long modTime \u003d file.getModificationTime();\n      // if modification time is older then the store startup time, we need to\n      // just use the store startup time as the last point of certainty\n      long lastUse \u003d modTime \u003c this.startTime ? this.startTime : modTime;\n      return lastUse \u003c staleTime;\n    } else {\n      // check access time\n      return accessTime \u003c staleTime;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-sharedcachemanager/src/main/java/org/apache/hadoop/yarn/server/sharedcachemanager/store/InMemorySCMStore.java"
    }
  }
}