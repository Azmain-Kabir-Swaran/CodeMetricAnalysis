{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfigurableResource.java",
  "functionName": "getResource",
  "functionId": "getResource___clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/ConfigurableResource.java",
  "functionStartLine": 79,
  "functionEndLine": 95,
  "numCommitsSeen": 9,
  "timeTaken": 2156,
  "changeHistory": [
    "9edc74f64a31450af3c55c0dadf352862e4b359d",
    "39ad98903a5f042573b97a2e5438bc57af7cc7a1",
    "17262470246232d0f0651d627a4961e55b1efe6a",
    "49ae538164bf631ebf961006a06c8ba0f3469b89"
  ],
  "changeHistoryShort": {
    "9edc74f64a31450af3c55c0dadf352862e4b359d": "Ybodychange",
    "39ad98903a5f042573b97a2e5438bc57af7cc7a1": "Ybodychange",
    "17262470246232d0f0651d627a4961e55b1efe6a": "Ybodychange",
    "49ae538164bf631ebf961006a06c8ba0f3469b89": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9edc74f64a31450af3c55c0dadf352862e4b359d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7556. Fair scheduler configuration should allow resource types in the minResources and maxResources properties. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "06/07/18 11:03 AM",
      "commitName": "9edc74f64a31450af3c55c0dadf352862e4b359d",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "05/07/18 12:22 PM",
      "commitNameOld": "39ad98903a5f042573b97a2e5438bc57af7cc7a1",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,17 @@\n   public Resource getResource(Resource clusterResource) {\n     if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n       long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n       int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n-      return Resource.newInstance(memory, vcore);\n+      Resource res \u003d Resource.newInstance(memory, vcore);\n+      ResourceInformation[] clusterInfo \u003d clusterResource.getResources();\n+\n+      for (int i \u003d 2; i \u003c clusterInfo.length; i++) {\n+        res.setResourceValue(i,\n+            (long)(clusterInfo[i].getValue() * percentages[i]));\n+      }\n+\n+      return res;\n     } else {\n       return resource;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getResource(Resource clusterResource) {\n    if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n      long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n      int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n      Resource res \u003d Resource.newInstance(memory, vcore);\n      ResourceInformation[] clusterInfo \u003d clusterResource.getResources();\n\n      for (int i \u003d 2; i \u003c clusterInfo.length; i++) {\n        res.setResourceValue(i,\n            (long)(clusterInfo[i].getValue() * percentages[i]));\n      }\n\n      return res;\n    } else {\n      return resource;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/ConfigurableResource.java",
      "extendedDetails": {}
    },
    "39ad98903a5f042573b97a2e5438bc57af7cc7a1": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Merge branch \u0027trunk\u0027 of https://git-wip-us.apache.org/repos/asf/hadoop into trunk\"\n\nThis reverts commit c163d1797ade0f47d35b4a44381b8ef1dfec5b60, reversing\nchanges made to 0d9804dcef2eab5ebf84667d9ca49bb035d9a731.\n",
      "commitDate": "05/07/18 12:22 PM",
      "commitName": "39ad98903a5f042573b97a2e5438bc57af7cc7a1",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "05/07/18 10:42 AM",
      "commitNameOld": "17262470246232d0f0651d627a4961e55b1efe6a",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,9 @@\n   public Resource getResource(Resource clusterResource) {\n     if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n       long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n       int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n-      Resource res \u003d Resource.newInstance(memory, vcore);\n-      ResourceInformation[] clusterInfo \u003d clusterResource.getResources();\n-\n-      for (int i \u003d 2; i \u003c clusterInfo.length; i++) {\n-        res.setResourceValue(i,\n-            (long)(clusterInfo[i].getValue() * percentages[i]));\n-      }\n-\n-      return res;\n+      return Resource.newInstance(memory, vcore);\n     } else {\n       return resource;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getResource(Resource clusterResource) {\n    if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n      long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n      int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n      return Resource.newInstance(memory, vcore);\n    } else {\n      return resource;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/ConfigurableResource.java",
      "extendedDetails": {}
    },
    "17262470246232d0f0651d627a4961e55b1efe6a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7556. Fair scheduler configuration should allow resource types in the minResources and maxResources properties. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "05/07/18 10:42 AM",
      "commitName": "17262470246232d0f0651d627a4961e55b1efe6a",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "09/10/17 5:12 AM",
      "commitNameOld": "6d6ca4c923142a893870fc8a6309c02f60dc2d24",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 269.23,
      "commitsBetweenForRepo": 2459,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,17 @@\n   public Resource getResource(Resource clusterResource) {\n     if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n       long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n       int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n-      return Resource.newInstance(memory, vcore);\n+      Resource res \u003d Resource.newInstance(memory, vcore);\n+      ResourceInformation[] clusterInfo \u003d clusterResource.getResources();\n+\n+      for (int i \u003d 2; i \u003c clusterInfo.length; i++) {\n+        res.setResourceValue(i,\n+            (long)(clusterInfo[i].getValue() * percentages[i]));\n+      }\n+\n+      return res;\n     } else {\n       return resource;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getResource(Resource clusterResource) {\n    if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n      long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n      int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n      Resource res \u003d Resource.newInstance(memory, vcore);\n      ResourceInformation[] clusterInfo \u003d clusterResource.getResources();\n\n      for (int i \u003d 2; i \u003c clusterInfo.length; i++) {\n        res.setResourceValue(i,\n            (long)(clusterInfo[i].getValue() * percentages[i]));\n      }\n\n      return res;\n    } else {\n      return resource;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/ConfigurableResource.java",
      "extendedDetails": {}
    },
    "49ae538164bf631ebf961006a06c8ba0f3469b89": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2162. Add ability in Fair Scheduler to optionally configure maxResources in terms of percentage(addendum). (Yufei Gu)\n",
      "commitDate": "06/10/17 12:08 AM",
      "commitName": "49ae538164bf631ebf961006a06c8ba0f3469b89",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,9 @@\n+  public Resource getResource(Resource clusterResource) {\n+    if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n+      long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n+      int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n+      return Resource.newInstance(memory, vcore);\n+    } else {\n+      return resource;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getResource(Resource clusterResource) {\n    if (percentages !\u003d null \u0026\u0026 clusterResource !\u003d null) {\n      long memory \u003d (long) (clusterResource.getMemorySize() * percentages[0]);\n      int vcore \u003d (int) (clusterResource.getVirtualCores() * percentages[1]);\n      return Resource.newInstance(memory, vcore);\n    } else {\n      return resource;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/ConfigurableResource.java"
    }
  }
}