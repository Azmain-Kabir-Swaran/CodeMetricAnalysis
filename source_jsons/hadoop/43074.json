{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServiceClient.java",
  "functionName": "loadAppJsonFromLocalFS",
  "functionId": "loadAppJsonFromLocalFS___fileName-String__serviceName-String__lifetime-Long__queue-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
  "functionStartLine": 314,
  "functionEndLine": 362,
  "numCommitsSeen": 28,
  "timeTaken": 2025,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from local FS: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java"
      }
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,49 @@\n+  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n+      Long lifetime, String queue) throws IOException, YarnException {\n+    File file \u003d new File(fileName);\n+    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n+      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n+      String[] examplesDirs;\n+      if (examplesDirStr \u003d\u003d null) {\n+        String yarnHome \u003d System\n+            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n+        examplesDirs \u003d new String[]{\n+            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n+            yarnHome + \"/yarn-service-examples\"\n+        };\n+      } else {\n+        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n+      }\n+      for (String dir : examplesDirs) {\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n+            dir, fileName, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+        // Then look for secondary location.\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n+            dir, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+      }\n+    }\n+    if (!file.exists()) {\n+      throw new YarnException(\"File or example could not be found: \" +\n+          fileName);\n+    }\n+    Path filePath \u003d new Path(file.getAbsolutePath());\n+    LOG.info(\"Loading service definition from local FS: \" + filePath);\n+    Service service \u003d jsonSerDeser\n+        .load(FileSystem.getLocal(getConfig()), filePath);\n+    if (!StringUtils.isEmpty(serviceName)) {\n+      service.setName(serviceName);\n+    }\n+    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n+      service.setLifetime(lifetime);\n+    }\n+    if (!StringUtils.isEmpty(queue)) {\n+      service.setQueue(queue);\n+    }\n+    return service;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from local FS: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java"
    }
  }
}