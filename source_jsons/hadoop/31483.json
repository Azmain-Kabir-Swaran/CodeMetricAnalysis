{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericEntityReader.java",
  "functionName": "constructFilterListBasedOnFilters",
  "functionId": "constructFilterListBasedOnFilters",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
  "functionStartLine": 99,
  "functionEndLine": 134,
  "numCommitsSeen": 32,
  "timeTaken": 4079,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": "Ybodychange",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils\n          .createSingleColValueFiltersByRange(EntityColumn.CREATED_TIME,\n              createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          EntityColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          EntityColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          EntityColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils\n          .createSingleColValueFiltersByRange(EntityColumn.CREATED_TIME,\n              createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          EntityColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          EntityColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(TimelineFilterUtils.createHBaseFilterList(\n          EntityColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,39 @@\n-  protected FilterList constructFilterListBasedOnFields() {\n-    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n-    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n-    // Fetch all the columns.\n-    if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n-        dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n-        (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n-        dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n-      return list;\n-    }\n-    FilterList infoColFamilyList \u003d new FilterList();\n-    // By default fetch everything in INFO column family.\n-    FamilyFilter infoColumnFamily \u003d\n-        new FamilyFilter(CompareOp.EQUAL,\n-           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n-    infoColFamilyList.addFilter(infoColumnFamily);\n+  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n+    // Filters here cannot be null for multiple entity reads as they are set in\n+    // augmentParams if null.\n+    FilterList listBasedOnFilters \u003d new FilterList();\n     TimelineEntityFilters filters \u003d getFilters();\n-    // Events not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getEventFilters() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on created time range and add it to\n+    // listBasedOnFilters.\n+    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n+    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n+    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createSingleColValueFiltersByRange(\n+              EntityColumn.CREATED_TIME, createdTimeBegin, createdTimeEnd));\n     }\n-    // info not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getInfoFilters() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on metric filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n+    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.METRIC, metricFilters));\n     }\n-    // is related to not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getIsRelatedTo() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on config filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n+    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.CONFIG, configFilters));\n     }\n-    // relates to not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getRelatesTo() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on info filters and add it to listBasedOnFilters\n+    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n+    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.INFO, infoFilters));\n     }\n-    list.addFilter(infoColFamilyList);\n-    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n-        (!isSingleEntityRead() \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n-        (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n-      FilterList filterCfg \u003d\n-          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n-              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n-      if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n-          !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n-        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n-      }\n-      list.addFilter(filterCfg);\n-    }\n-    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n-        (!isSingleEntityRead() \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n-        (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n-      FilterList filterMetrics \u003d\n-          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n-              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n-      if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-          !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n-        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n-      }\n-      list.addFilter(filterMetrics);\n-    }\n-    return list;\n+    return listBasedOnFilters;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createSingleColValueFiltersByRange(\n              EntityColumn.CREATED_TIME, createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
          "extendedDetails": {
            "oldValue": "constructFilterListBasedOnFields",
            "newValue": "constructFilterListBasedOnFilters"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,39 @@\n-  protected FilterList constructFilterListBasedOnFields() {\n-    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n-    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n-    // Fetch all the columns.\n-    if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n-        dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n-        (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n-        dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n-      return list;\n-    }\n-    FilterList infoColFamilyList \u003d new FilterList();\n-    // By default fetch everything in INFO column family.\n-    FamilyFilter infoColumnFamily \u003d\n-        new FamilyFilter(CompareOp.EQUAL,\n-           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n-    infoColFamilyList.addFilter(infoColumnFamily);\n+  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n+    // Filters here cannot be null for multiple entity reads as they are set in\n+    // augmentParams if null.\n+    FilterList listBasedOnFilters \u003d new FilterList();\n     TimelineEntityFilters filters \u003d getFilters();\n-    // Events not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getEventFilters() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on created time range and add it to\n+    // listBasedOnFilters.\n+    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n+    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n+    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createSingleColValueFiltersByRange(\n+              EntityColumn.CREATED_TIME, createdTimeBegin, createdTimeEnd));\n     }\n-    // info not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getInfoFilters() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on metric filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n+    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.METRIC, metricFilters));\n     }\n-    // is related to not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getIsRelatedTo() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on config filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n+    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.CONFIG, configFilters));\n     }\n-    // relates to not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getRelatesTo() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on info filters and add it to listBasedOnFilters\n+    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n+    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.INFO, infoFilters));\n     }\n-    list.addFilter(infoColFamilyList);\n-    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n-        (!isSingleEntityRead() \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n-        (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n-      FilterList filterCfg \u003d\n-          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n-              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n-      if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n-          !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n-        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n-      }\n-      list.addFilter(filterCfg);\n-    }\n-    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n-        (!isSingleEntityRead() \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n-        (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n-      FilterList filterMetrics \u003d\n-          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n-              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n-      if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-          !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n-        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n-      }\n-      list.addFilter(filterMetrics);\n-    }\n-    return list;\n+    return listBasedOnFilters;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createSingleColValueFiltersByRange(\n              EntityColumn.CREATED_TIME, createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,39 @@\n-  protected FilterList constructFilterListBasedOnFields() {\n-    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n-    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n-    // Fetch all the columns.\n-    if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n-        dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n-        (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n-        dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n-      return list;\n-    }\n-    FilterList infoColFamilyList \u003d new FilterList();\n-    // By default fetch everything in INFO column family.\n-    FamilyFilter infoColumnFamily \u003d\n-        new FamilyFilter(CompareOp.EQUAL,\n-           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n-    infoColFamilyList.addFilter(infoColumnFamily);\n+  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n+    // Filters here cannot be null for multiple entity reads as they are set in\n+    // augmentParams if null.\n+    FilterList listBasedOnFilters \u003d new FilterList();\n     TimelineEntityFilters filters \u003d getFilters();\n-    // Events not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getEventFilters() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on created time range and add it to\n+    // listBasedOnFilters.\n+    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n+    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n+    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createSingleColValueFiltersByRange(\n+              EntityColumn.CREATED_TIME, createdTimeBegin, createdTimeEnd));\n     }\n-    // info not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getInfoFilters() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on metric filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n+    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.METRIC, metricFilters));\n     }\n-    // is related to not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getIsRelatedTo() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on config filters and add it to\n+    // listBasedOnFilters.\n+    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n+    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.CONFIG, configFilters));\n     }\n-    // relates to not required.\n-    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n-        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (isSingleEntityRead() || filters.getRelatesTo() \u003d\u003d null)) {\n-      infoColFamilyList.addFilter(\n-          new QualifierFilter(CompareOp.NOT_EQUAL,\n-          new BinaryPrefixComparator(\n-              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n+    // Create filter list based on info filters and add it to listBasedOnFilters\n+    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n+    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n+      listBasedOnFilters.addFilter(\n+          TimelineFilterUtils.createHBaseFilterList(\n+              EntityColumnPrefix.INFO, infoFilters));\n     }\n-    list.addFilter(infoColFamilyList);\n-    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n-        (!isSingleEntityRead() \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n-        (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n-      FilterList filterCfg \u003d\n-          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n-              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n-      if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n-          !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n-        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n-      }\n-      list.addFilter(filterCfg);\n-    }\n-    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n-        (!isSingleEntityRead() \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n-        (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n-      FilterList filterMetrics \u003d\n-          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n-              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n-      if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n-          !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n-        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n-      }\n-      list.addFilter(filterMetrics);\n-    }\n-    return list;\n+    return listBasedOnFilters;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFilters() throws IOException {\n    // Filters here cannot be null for multiple entity reads as they are set in\n    // augmentParams if null.\n    FilterList listBasedOnFilters \u003d new FilterList();\n    TimelineEntityFilters filters \u003d getFilters();\n    // Create filter list based on created time range and add it to\n    // listBasedOnFilters.\n    long createdTimeBegin \u003d filters.getCreatedTimeBegin();\n    long createdTimeEnd \u003d filters.getCreatedTimeEnd();\n    if (createdTimeBegin !\u003d 0 || createdTimeEnd !\u003d Long.MAX_VALUE) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createSingleColValueFiltersByRange(\n              EntityColumn.CREATED_TIME, createdTimeBegin, createdTimeEnd));\n    }\n    // Create filter list based on metric filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList metricFilters \u003d filters.getMetricFilters();\n    if (metricFilters !\u003d null \u0026\u0026 !metricFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.METRIC, metricFilters));\n    }\n    // Create filter list based on config filters and add it to\n    // listBasedOnFilters.\n    TimelineFilterList configFilters \u003d filters.getConfigFilters();\n    if (configFilters !\u003d null \u0026\u0026 !configFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.CONFIG, configFilters));\n    }\n    // Create filter list based on info filters and add it to listBasedOnFilters\n    TimelineFilterList infoFilters \u003d filters.getInfoFilters();\n    if (infoFilters !\u003d null \u0026\u0026 !infoFilters.getFilterList().isEmpty()) {\n      listBasedOnFilters.addFilter(\n          TimelineFilterUtils.createHBaseFilterList(\n              EntityColumnPrefix.INFO, infoFilters));\n    }\n    return listBasedOnFilters;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   protected FilterList constructFilterListBasedOnFields() {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n     TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // Fetch all the columns.\n     if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n         (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n         dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n         (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n         dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n       return list;\n     }\n     FilterList infoColFamilyList \u003d new FilterList();\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL,\n            new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n     infoColFamilyList.addFilter(infoColumnFamily);\n     TimelineEntityFilters filters \u003d getFilters();\n     // Events not required.\n     if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n         !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (singleEntityRead || filters.getEventFilters() \u003d\u003d null)) {\n+        (isSingleEntityRead() || filters.getEventFilters() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n           EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n     }\n     // info not required.\n     if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n         !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (singleEntityRead || filters.getInfoFilters() \u003d\u003d null)) {\n+        (isSingleEntityRead() || filters.getInfoFilters() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n               EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n     }\n     // is related to not required.\n     if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n         !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (singleEntityRead || filters.getIsRelatedTo() \u003d\u003d null)) {\n+        (isSingleEntityRead() || filters.getIsRelatedTo() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n               EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n     }\n     // relates to not required.\n     if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n         !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n-        (singleEntityRead || filters.getRelatesTo() \u003d\u003d null)) {\n+        (isSingleEntityRead() || filters.getRelatesTo() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n               EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n     }\n     list.addFilter(infoColFamilyList);\n     if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n-        (!singleEntityRead \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n+        (!isSingleEntityRead() \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n         (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n         !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n       FilterList filterCfg \u003d\n           new FilterList(new FamilyFilter(CompareOp.EQUAL,\n               new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n       if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n           !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n         filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n             EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n       }\n       list.addFilter(filterCfg);\n     }\n     if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n-        (!singleEntityRead \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n+        (!isSingleEntityRead() \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n         (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n         !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n       FilterList filterMetrics \u003d\n           new FilterList(new FamilyFilter(CompareOp.EQUAL,\n               new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n       if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n           !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n         filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n             EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n       }\n       list.addFilter(filterMetrics);\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // Fetch all the columns.\n    if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n        dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n        (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n        dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n      return list;\n    }\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    TimelineEntityFilters filters \u003d getFilters();\n    // Events not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (isSingleEntityRead() || filters.getEventFilters() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n    }\n    // info not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (isSingleEntityRead() || filters.getInfoFilters() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n    }\n    // is related to not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (isSingleEntityRead() || filters.getIsRelatedTo() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n    }\n    // relates to not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (isSingleEntityRead() || filters.getRelatesTo() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n    }\n    list.addFilter(infoColFamilyList);\n    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n        (!isSingleEntityRead() \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n        (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n        !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n      FilterList filterCfg \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n      if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n          !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n      }\n      list.addFilter(filterCfg);\n    }\n    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n        (!isSingleEntityRead() \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n        (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n      FilterList filterMetrics \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n      if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n          !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n      }\n      list.addFilter(filterMetrics);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {}
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,85 @@\n   protected FilterList constructFilterListBasedOnFields() {\n     FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n+    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n     // Fetch all the columns.\n-    if (fieldsToRetrieve.contains(Field.ALL) \u0026\u0026\n-        (confsToRetrieve \u003d\u003d null ||\n-        confsToRetrieve.getFilterList().isEmpty()) \u0026\u0026\n-        (metricsToRetrieve \u003d\u003d null ||\n-        metricsToRetrieve.getFilterList().isEmpty())) {\n+    if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n+        (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n+        dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n+        (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n+        dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n       return list;\n     }\n     FilterList infoColFamilyList \u003d new FilterList();\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d\n         new FamilyFilter(CompareOp.EQUAL,\n            new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n     infoColFamilyList.addFilter(infoColumnFamily);\n+    TimelineEntityFilters filters \u003d getFilters();\n     // Events not required.\n-    if (!fieldsToRetrieve.contains(Field.EVENTS) \u0026\u0026\n-        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 eventFilters \u003d\u003d null) {\n+    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n+        (singleEntityRead || filters.getEventFilters() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n           EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n     }\n     // info not required.\n-    if (!fieldsToRetrieve.contains(Field.INFO) \u0026\u0026\n-        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 infoFilters \u003d\u003d null) {\n+    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n+        (singleEntityRead || filters.getInfoFilters() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n               EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n     }\n     // is related to not required.\n-    if (!fieldsToRetrieve.contains(Field.IS_RELATED_TO) \u0026\u0026\n-        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 isRelatedTo \u003d\u003d null) {\n+    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n+        (singleEntityRead || filters.getIsRelatedTo() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n               EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n     }\n     // relates to not required.\n-    if (!fieldsToRetrieve.contains(Field.RELATES_TO) \u0026\u0026\n-        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 relatesTo \u003d\u003d null) {\n+    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n+        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n+        (singleEntityRead || filters.getRelatesTo() \u003d\u003d null)) {\n       infoColFamilyList.addFilter(\n           new QualifierFilter(CompareOp.NOT_EQUAL,\n           new BinaryPrefixComparator(\n               EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n     }\n     list.addFilter(infoColFamilyList);\n-    if ((fieldsToRetrieve.contains(Field.CONFIGS) || configFilters !\u003d null) ||\n-        (confsToRetrieve !\u003d null \u0026\u0026\n-        !confsToRetrieve.getFilterList().isEmpty())) {\n+    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n+        (!singleEntityRead \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n+        (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n+        !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n       FilterList filterCfg \u003d\n           new FilterList(new FamilyFilter(CompareOp.EQUAL,\n               new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n-      if (confsToRetrieve !\u003d null \u0026\u0026\n-          !confsToRetrieve.getFilterList().isEmpty()) {\n+      if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n+          !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n         filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.CONFIG, confsToRetrieve));\n+            EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n       }\n       list.addFilter(filterCfg);\n     }\n-    if ((fieldsToRetrieve.contains(Field.METRICS) || metricFilters !\u003d null) ||\n-        (metricsToRetrieve !\u003d null \u0026\u0026\n-        !metricsToRetrieve.getFilterList().isEmpty())) {\n+    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n+        (!singleEntityRead \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n+        (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n+        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n       FilterList filterMetrics \u003d\n           new FilterList(new FamilyFilter(CompareOp.EQUAL,\n               new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n-      if (metricsToRetrieve !\u003d null \u0026\u0026\n-          !metricsToRetrieve.getFilterList().isEmpty()) {\n+      if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n+          !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n         filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n-            EntityColumnPrefix.METRIC, metricsToRetrieve));\n+            EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n       }\n       list.addFilter(filterMetrics);\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    TimelineDataToRetrieve dataToRetrieve \u003d getDataToRetrieve();\n    // Fetch all the columns.\n    if (dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (dataToRetrieve.getConfsToRetrieve() \u003d\u003d null ||\n        dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) \u0026\u0026\n        (dataToRetrieve.getMetricsToRetrieve() \u003d\u003d null ||\n        dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n      return list;\n    }\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    TimelineEntityFilters filters \u003d getFilters();\n    // Events not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.EVENTS) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (singleEntityRead || filters.getEventFilters() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n    }\n    // info not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.INFO) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (singleEntityRead || filters.getInfoFilters() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n    }\n    // is related to not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.IS_RELATED_TO) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (singleEntityRead || filters.getIsRelatedTo() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n    }\n    // relates to not required.\n    if (!dataToRetrieve.getFieldsToRetrieve().contains(Field.RELATES_TO) \u0026\u0026\n        !dataToRetrieve.getFieldsToRetrieve().contains(Field.ALL) \u0026\u0026\n        (singleEntityRead || filters.getRelatesTo() \u003d\u003d null)) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n    }\n    list.addFilter(infoColFamilyList);\n    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.CONFIGS) ||\n        (!singleEntityRead \u0026\u0026 filters.getConfigFilters() !\u003d null)) ||\n        (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n        !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty())) {\n      FilterList filterCfg \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n      if (dataToRetrieve.getConfsToRetrieve() !\u003d null \u0026\u0026\n          !dataToRetrieve.getConfsToRetrieve().getFilterList().isEmpty()) {\n        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.CONFIG, dataToRetrieve.getConfsToRetrieve()));\n      }\n      list.addFilter(filterCfg);\n    }\n    if ((dataToRetrieve.getFieldsToRetrieve().contains(Field.METRICS) ||\n        (!singleEntityRead \u0026\u0026 filters.getMetricFilters() !\u003d null)) ||\n        (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n        !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty())) {\n      FilterList filterMetrics \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n      if (dataToRetrieve.getMetricsToRetrieve() !\u003d null \u0026\u0026\n          !dataToRetrieve.getMetricsToRetrieve().getFilterList().isEmpty()) {\n        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.METRIC, dataToRetrieve.getMetricsToRetrieve()));\n      }\n      list.addFilter(filterMetrics);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {}
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Fetch all the columns.\n    if (fieldsToRetrieve.contains(Field.ALL) \u0026\u0026\n        (confsToRetrieve \u003d\u003d null ||\n        confsToRetrieve.getFilterList().isEmpty()) \u0026\u0026\n        (metricsToRetrieve \u003d\u003d null ||\n        metricsToRetrieve.getFilterList().isEmpty())) {\n      return list;\n    }\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    // Events not required.\n    if (!fieldsToRetrieve.contains(Field.EVENTS) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 eventFilters \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n    }\n    // info not required.\n    if (!fieldsToRetrieve.contains(Field.INFO) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 infoFilters \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n    }\n    // is related to not required.\n    if (!fieldsToRetrieve.contains(Field.IS_RELATED_TO) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 isRelatedTo \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n    }\n    // relates to not required.\n    if (!fieldsToRetrieve.contains(Field.RELATES_TO) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 relatesTo \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n    }\n    list.addFilter(infoColFamilyList);\n    if ((fieldsToRetrieve.contains(Field.CONFIGS) || configFilters !\u003d null) ||\n        (confsToRetrieve !\u003d null \u0026\u0026\n        !confsToRetrieve.getFilterList().isEmpty())) {\n      FilterList filterCfg \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n      if (confsToRetrieve !\u003d null \u0026\u0026\n          !confsToRetrieve.getFilterList().isEmpty()) {\n        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.CONFIG, confsToRetrieve));\n      }\n      list.addFilter(filterCfg);\n    }\n    if ((fieldsToRetrieve.contains(Field.METRICS) || metricFilters !\u003d null) ||\n        (metricsToRetrieve !\u003d null \u0026\u0026\n        !metricsToRetrieve.getFilterList().isEmpty())) {\n      FilterList filterMetrics \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n      if (metricsToRetrieve !\u003d null \u0026\u0026\n          !metricsToRetrieve.getFilterList().isEmpty()) {\n        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.METRIC, metricsToRetrieve));\n      }\n      list.addFilter(filterMetrics);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/GenericEntityReader.java"
      }
    },
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,77 @@\n+  protected FilterList constructFilterListBasedOnFields() {\n+    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n+    // Fetch all the columns.\n+    if (fieldsToRetrieve.contains(Field.ALL) \u0026\u0026\n+        (confsToRetrieve \u003d\u003d null ||\n+        confsToRetrieve.getFilterList().isEmpty()) \u0026\u0026\n+        (metricsToRetrieve \u003d\u003d null ||\n+        metricsToRetrieve.getFilterList().isEmpty())) {\n+      return list;\n+    }\n+    FilterList infoColFamilyList \u003d new FilterList();\n+    // By default fetch everything in INFO column family.\n+    FamilyFilter infoColumnFamily \u003d\n+        new FamilyFilter(CompareOp.EQUAL,\n+           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n+    infoColFamilyList.addFilter(infoColumnFamily);\n+    // Events not required.\n+    if (!fieldsToRetrieve.contains(Field.EVENTS) \u0026\u0026\n+        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 eventFilters \u003d\u003d null) {\n+      infoColFamilyList.addFilter(\n+          new QualifierFilter(CompareOp.NOT_EQUAL,\n+          new BinaryPrefixComparator(\n+          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n+    }\n+    // info not required.\n+    if (!fieldsToRetrieve.contains(Field.INFO) \u0026\u0026\n+        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 infoFilters \u003d\u003d null) {\n+      infoColFamilyList.addFilter(\n+          new QualifierFilter(CompareOp.NOT_EQUAL,\n+          new BinaryPrefixComparator(\n+              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n+    }\n+    // is related to not required.\n+    if (!fieldsToRetrieve.contains(Field.IS_RELATED_TO) \u0026\u0026\n+        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 isRelatedTo \u003d\u003d null) {\n+      infoColFamilyList.addFilter(\n+          new QualifierFilter(CompareOp.NOT_EQUAL,\n+          new BinaryPrefixComparator(\n+              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n+    }\n+    // relates to not required.\n+    if (!fieldsToRetrieve.contains(Field.RELATES_TO) \u0026\u0026\n+        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 relatesTo \u003d\u003d null) {\n+      infoColFamilyList.addFilter(\n+          new QualifierFilter(CompareOp.NOT_EQUAL,\n+          new BinaryPrefixComparator(\n+              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n+    }\n+    list.addFilter(infoColFamilyList);\n+    if ((fieldsToRetrieve.contains(Field.CONFIGS) || configFilters !\u003d null) ||\n+        (confsToRetrieve !\u003d null \u0026\u0026\n+        !confsToRetrieve.getFilterList().isEmpty())) {\n+      FilterList filterCfg \u003d\n+          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n+              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n+      if (confsToRetrieve !\u003d null \u0026\u0026\n+          !confsToRetrieve.getFilterList().isEmpty()) {\n+        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n+            EntityColumnPrefix.CONFIG, confsToRetrieve));\n+      }\n+      list.addFilter(filterCfg);\n+    }\n+    if ((fieldsToRetrieve.contains(Field.METRICS) || metricFilters !\u003d null) ||\n+        (metricsToRetrieve !\u003d null \u0026\u0026\n+        !metricsToRetrieve.getFilterList().isEmpty())) {\n+      FilterList filterMetrics \u003d\n+          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n+              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n+      if (metricsToRetrieve !\u003d null \u0026\u0026\n+          !metricsToRetrieve.getFilterList().isEmpty()) {\n+        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n+            EntityColumnPrefix.METRIC, metricsToRetrieve));\n+      }\n+      list.addFilter(filterMetrics);\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() {\n    FilterList list \u003d new FilterList(Operator.MUST_PASS_ONE);\n    // Fetch all the columns.\n    if (fieldsToRetrieve.contains(Field.ALL) \u0026\u0026\n        (confsToRetrieve \u003d\u003d null ||\n        confsToRetrieve.getFilterList().isEmpty()) \u0026\u0026\n        (metricsToRetrieve \u003d\u003d null ||\n        metricsToRetrieve.getFilterList().isEmpty())) {\n      return list;\n    }\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d\n        new FamilyFilter(CompareOp.EQUAL,\n           new BinaryComparator(EntityColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    // Events not required.\n    if (!fieldsToRetrieve.contains(Field.EVENTS) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 eventFilters \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n          EntityColumnPrefix.EVENT.getColumnPrefixBytes(\"\"))));\n    }\n    // info not required.\n    if (!fieldsToRetrieve.contains(Field.INFO) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 infoFilters \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.INFO.getColumnPrefixBytes(\"\"))));\n    }\n    // is related to not required.\n    if (!fieldsToRetrieve.contains(Field.IS_RELATED_TO) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 isRelatedTo \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.IS_RELATED_TO.getColumnPrefixBytes(\"\"))));\n    }\n    // relates to not required.\n    if (!fieldsToRetrieve.contains(Field.RELATES_TO) \u0026\u0026\n        !fieldsToRetrieve.contains(Field.ALL) \u0026\u0026 relatesTo \u003d\u003d null) {\n      infoColFamilyList.addFilter(\n          new QualifierFilter(CompareOp.NOT_EQUAL,\n          new BinaryPrefixComparator(\n              EntityColumnPrefix.RELATES_TO.getColumnPrefixBytes(\"\"))));\n    }\n    list.addFilter(infoColFamilyList);\n    if ((fieldsToRetrieve.contains(Field.CONFIGS) || configFilters !\u003d null) ||\n        (confsToRetrieve !\u003d null \u0026\u0026\n        !confsToRetrieve.getFilterList().isEmpty())) {\n      FilterList filterCfg \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.CONFIGS.getBytes())));\n      if (confsToRetrieve !\u003d null \u0026\u0026\n          !confsToRetrieve.getFilterList().isEmpty()) {\n        filterCfg.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.CONFIG, confsToRetrieve));\n      }\n      list.addFilter(filterCfg);\n    }\n    if ((fieldsToRetrieve.contains(Field.METRICS) || metricFilters !\u003d null) ||\n        (metricsToRetrieve !\u003d null \u0026\u0026\n        !metricsToRetrieve.getFilterList().isEmpty())) {\n      FilterList filterMetrics \u003d\n          new FilterList(new FamilyFilter(CompareOp.EQUAL,\n              new BinaryComparator(EntityColumnFamily.METRICS.getBytes())));\n      if (metricsToRetrieve !\u003d null \u0026\u0026\n          !metricsToRetrieve.getFilterList().isEmpty()) {\n        filterMetrics.addFilter(TimelineFilterUtils.createHBaseFilterList(\n            EntityColumnPrefix.METRIC, metricsToRetrieve));\n      }\n      list.addFilter(filterMetrics);\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/GenericEntityReader.java"
    }
  }
}