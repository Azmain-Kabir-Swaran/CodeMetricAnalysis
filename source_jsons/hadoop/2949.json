{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyProviderCache.java",
  "functionName": "get",
  "functionId": "get___conf-Configuration(modifiers-final)__serverProviderUri-URI(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java",
  "functionStartLine": 70,
  "functionEndLine": 86,
  "numCommitsSeen": 10,
  "timeTaken": 2447,
  "changeHistory": [
    "18432130a7f580f206adf023507678c534487f2e",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb"
  ],
  "changeHistoryShort": {
    "18432130a7f580f206adf023507678c534487f2e": "Ymultichange(Yparameterchange,Ybodychange)",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Ymultichange(Yfilerename,Ybodychange)",
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18432130a7f580f206adf023507678c534487f2e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14104. Client should always ask namenode for kms provider path. Contributed by Rushabh S Shah.\n",
      "commitDate": "04/04/17 1:38 PM",
      "commitName": "18432130a7f580f206adf023507678c534487f2e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14104. Client should always ask namenode for kms provider path. Contributed by Rushabh S Shah.\n",
          "commitDate": "04/04/17 1:38 PM",
          "commitName": "18432130a7f580f206adf023507678c534487f2e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/16 10:25 PM",
          "commitNameOld": "ea839bd48e4478fc7b6d0a69e0eaeae2de5e0f0d",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 198.63,
          "commitsBetweenForRepo": 1239,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public KeyProvider get(final Configuration conf) {\n-    URI kpURI \u003d createKeyProviderURI(conf);\n-    if (kpURI \u003d\u003d null) {\n+  public KeyProvider get(final Configuration conf,\n+      final URI serverProviderUri) {\n+    if (serverProviderUri \u003d\u003d null) {\n       return null;\n     }\n     try {\n-      return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n+      return cache.get(serverProviderUri, new Callable\u003cKeyProvider\u003e() {\n         @Override\n         public KeyProvider call() throws Exception {\n-          return DFSUtilClient.createKeyProvider(conf);\n+          return KMSUtil.createKeyProviderFromUri(conf, serverProviderUri);\n         }\n       });\n     } catch (Exception e) {\n-      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n+      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KeyProvider get(final Configuration conf,\n      final URI serverProviderUri) {\n    if (serverProviderUri \u003d\u003d null) {\n      return null;\n    }\n    try {\n      return cache.get(serverProviderUri, new Callable\u003cKeyProvider\u003e() {\n        @Override\n        public KeyProvider call() throws Exception {\n          return KMSUtil.createKeyProviderFromUri(conf, serverProviderUri);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e);\n      return null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration(modifiers-final)]",
            "newValue": "[conf-Configuration(modifiers-final), serverProviderUri-URI(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14104. Client should always ask namenode for kms provider path. Contributed by Rushabh S Shah.\n",
          "commitDate": "04/04/17 1:38 PM",
          "commitName": "18432130a7f580f206adf023507678c534487f2e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/16 10:25 PM",
          "commitNameOld": "ea839bd48e4478fc7b6d0a69e0eaeae2de5e0f0d",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 198.63,
          "commitsBetweenForRepo": 1239,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  public KeyProvider get(final Configuration conf) {\n-    URI kpURI \u003d createKeyProviderURI(conf);\n-    if (kpURI \u003d\u003d null) {\n+  public KeyProvider get(final Configuration conf,\n+      final URI serverProviderUri) {\n+    if (serverProviderUri \u003d\u003d null) {\n       return null;\n     }\n     try {\n-      return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n+      return cache.get(serverProviderUri, new Callable\u003cKeyProvider\u003e() {\n         @Override\n         public KeyProvider call() throws Exception {\n-          return DFSUtilClient.createKeyProvider(conf);\n+          return KMSUtil.createKeyProviderFromUri(conf, serverProviderUri);\n         }\n       });\n     } catch (Exception e) {\n-      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n+      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KeyProvider get(final Configuration conf,\n      final URI serverProviderUri) {\n    if (serverProviderUri \u003d\u003d null) {\n      return null;\n    }\n    try {\n      return cache.get(serverProviderUri, new Callable\u003cKeyProvider\u003e() {\n        @Override\n        public KeyProvider call() throws Exception {\n          return KMSUtil.createKeyProviderFromUri(conf, serverProviderUri);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e);\n      return null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "28/08/15 2:38 PM",
          "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "28/08/15 2:21 PM",
          "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   public KeyProvider get(final Configuration conf) {\n     URI kpURI \u003d createKeyProviderURI(conf);\n     if (kpURI \u003d\u003d null) {\n       return null;\n     }\n     try {\n       return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n         @Override\n         public KeyProvider call() throws Exception {\n-          return DFSUtil.createKeyProvider(conf);\n+          return DFSUtilClient.createKeyProvider(conf);\n         }\n       });\n     } catch (Exception e) {\n       LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KeyProvider get(final Configuration conf) {\n    URI kpURI \u003d createKeyProviderURI(conf);\n    if (kpURI \u003d\u003d null) {\n      return null;\n    }\n    try {\n      return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n        @Override\n        public KeyProvider call() throws Exception {\n          return DFSUtilClient.createKeyProvider(conf);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n      return null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "28/08/15 2:38 PM",
          "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "28/08/15 2:21 PM",
          "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   public KeyProvider get(final Configuration conf) {\n     URI kpURI \u003d createKeyProviderURI(conf);\n     if (kpURI \u003d\u003d null) {\n       return null;\n     }\n     try {\n       return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n         @Override\n         public KeyProvider call() throws Exception {\n-          return DFSUtil.createKeyProvider(conf);\n+          return DFSUtilClient.createKeyProvider(conf);\n         }\n       });\n     } catch (Exception e) {\n       LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KeyProvider get(final Configuration conf) {\n    URI kpURI \u003d createKeyProviderURI(conf);\n    if (kpURI \u003d\u003d null) {\n      return null;\n    }\n    try {\n      return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n        @Override\n        public KeyProvider call() throws Exception {\n          return DFSUtilClient.createKeyProvider(conf);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n      return null;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7718. Store KeyProvider in ClientContext to avoid leaking key provider threads when using FileContext (Arun Suresh via Colin P. McCabe)\n",
      "commitDate": "09/02/15 8:23 PM",
      "commitName": "02340a24f211212b91dc7380c1e5b54ddb5e82eb",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,17 @@\n+  public KeyProvider get(final Configuration conf) {\n+    URI kpURI \u003d createKeyProviderURI(conf);\n+    if (kpURI \u003d\u003d null) {\n+      return null;\n+    }\n+    try {\n+      return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n+        @Override\n+        public KeyProvider call() throws Exception {\n+          return DFSUtil.createKeyProvider(conf);\n+        }\n+      });\n+    } catch (Exception e) {\n+      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyProvider get(final Configuration conf) {\n    URI kpURI \u003d createKeyProviderURI(conf);\n    if (kpURI \u003d\u003d null) {\n      return null;\n    }\n    try {\n      return cache.get(kpURI, new Callable\u003cKeyProvider\u003e() {\n        @Override\n        public KeyProvider call() throws Exception {\n          return DFSUtil.createKeyProvider(conf);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Could not create KeyProvider for DFSClient !!\", e.getCause());\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/KeyProviderCache.java"
    }
  }
}