{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "publishContainerStartEvent",
  "functionId": "publishContainerStartEvent___timelineClient-TimelineClient(modifiers-final)__container-Container(modifiers-final)__domainId-String__ugi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
  "functionStartLine": 1631,
  "functionEndLine": 1657,
  "numCommitsSeen": 164,
  "timeTaken": 4212,
  "changeHistory": [
    "e6c0742012ffeacad2bcaf712d86a7e5d1420b26",
    "f291d82cd49c04a81380bc45c97c279d791b571c",
    "f385851141522633184ce394899c659af5ace92a",
    "1d4612f5ad9678c952b416e798dccd20c88f96ef",
    "1a535f8dcdfc4fab8ba6125680957caf55ea8f46",
    "fd1c424548999cb8843f40cb6a342387f98bde6c"
  ],
  "changeHistoryShort": {
    "e6c0742012ffeacad2bcaf712d86a7e5d1420b26": "Ybodychange",
    "f291d82cd49c04a81380bc45c97c279d791b571c": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
    "f385851141522633184ce394899c659af5ace92a": "Ybodychange",
    "1d4612f5ad9678c952b416e798dccd20c88f96ef": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
    "1a535f8dcdfc4fab8ba6125680957caf55ea8f46": "Ybodychange",
    "fd1c424548999cb8843f40cb6a342387f98bde6c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6c0742012ffeacad2bcaf712d86a7e5d1420b26": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4965. Distributed shell AM failed due to ClientHandlerException thrown by jersey. Contributed by Junping Du\n",
      "commitDate": "16/04/16 7:39 PM",
      "commitName": "e6c0742012ffeacad2bcaf712d86a7e5d1420b26",
      "commitAuthor": "Xuan",
      "commitDateOld": "29/03/16 5:21 PM",
      "commitNameOld": "82862704665aa0bad51118b1b48c7230b194c01c",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 18.1,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void publishContainerStartEvent(\n       final TimelineClient timelineClient, final Container container,\n       String domainId, UserGroupInformation ugi) {\n     final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n     entity.setDomainId(domainId);\n     entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n     entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n         .getApplicationAttemptId().getApplicationId().toString());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n     try {\n       processTimelineResponseErrors(\n           putContainerEntity(timelineClient,\n               container.getId().getApplicationAttemptId(),\n               entity));\n-    } catch (YarnException | IOException e) {\n+    } catch (YarnException | IOException | ClientHandlerException e) {\n       LOG.error(\"Container start event could not be published for \"\n           + container.getId().toString(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishContainerStartEvent(\n      final TimelineClient timelineClient, final Container container,\n      String domainId, UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n        .getApplicationAttemptId().getApplicationId().toString());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      processTimelineResponseErrors(\n          putContainerEntity(timelineClient,\n              container.getId().getApplicationAttemptId(),\n              entity));\n    } catch (YarnException | IOException | ClientHandlerException e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "f291d82cd49c04a81380bc45c97c279d791b571c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-4545. Allow YARN distributed shell to use ATS v1.5 APIs. Li Lu via junping_du\n",
      "commitDate": "14/03/16 8:28 AM",
      "commitName": "f291d82cd49c04a81380bc45c97c279d791b571c",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4545. Allow YARN distributed shell to use ATS v1.5 APIs. Li Lu via junping_du\n",
          "commitDate": "14/03/16 8:28 AM",
          "commitName": "f291d82cd49c04a81380bc45c97c279d791b571c",
          "commitAuthor": "Junping Du",
          "commitDateOld": "18/01/16 4:58 PM",
          "commitNameOld": "f385851141522633184ce394899c659af5ace92a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 55.6,
          "commitsBetweenForRepo": 377,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  private static void publishContainerStartEvent(\n-      final TimelineClient timelineClient, Container container, String domainId,\n-      UserGroupInformation ugi) {\n+  private void publishContainerStartEvent(\n+      final TimelineClient timelineClient, final Container container,\n+      String domainId, UserGroupInformation ugi) {\n     final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n     entity.setDomainId(domainId);\n-    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n+    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n+    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n+        .getApplicationAttemptId().getApplicationId().toString());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n     try {\n-      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n-        @Override\n-        public TimelinePutResponse run() throws Exception {\n-          return processTimelineResponseErrors(\n-              timelineClient.putEntities(entity));\n-        }\n-      });\n-    } catch (Exception e) {\n+      processTimelineResponseErrors(\n+          putContainerEntity(timelineClient,\n+              container.getId().getApplicationAttemptId(),\n+              entity));\n+    } catch (YarnException | IOException e) {\n       LOG.error(\"Container start event could not be published for \"\n-          + container.getId().toString(),\n-          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+          + container.getId().toString(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerStartEvent(\n      final TimelineClient timelineClient, final Container container,\n      String domainId, UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n        .getApplicationAttemptId().getApplicationId().toString());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      processTimelineResponseErrors(\n          putContainerEntity(timelineClient,\n              container.getId().getApplicationAttemptId(),\n              entity));\n    } catch (YarnException | IOException e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4545. Allow YARN distributed shell to use ATS v1.5 APIs. Li Lu via junping_du\n",
          "commitDate": "14/03/16 8:28 AM",
          "commitName": "f291d82cd49c04a81380bc45c97c279d791b571c",
          "commitAuthor": "Junping Du",
          "commitDateOld": "18/01/16 4:58 PM",
          "commitNameOld": "f385851141522633184ce394899c659af5ace92a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 55.6,
          "commitsBetweenForRepo": 377,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  private static void publishContainerStartEvent(\n-      final TimelineClient timelineClient, Container container, String domainId,\n-      UserGroupInformation ugi) {\n+  private void publishContainerStartEvent(\n+      final TimelineClient timelineClient, final Container container,\n+      String domainId, UserGroupInformation ugi) {\n     final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n     entity.setDomainId(domainId);\n-    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n+    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n+    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n+        .getApplicationAttemptId().getApplicationId().toString());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n     try {\n-      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n-        @Override\n-        public TimelinePutResponse run() throws Exception {\n-          return processTimelineResponseErrors(\n-              timelineClient.putEntities(entity));\n-        }\n-      });\n-    } catch (Exception e) {\n+      processTimelineResponseErrors(\n+          putContainerEntity(timelineClient,\n+              container.getId().getApplicationAttemptId(),\n+              entity));\n+    } catch (YarnException | IOException e) {\n       LOG.error(\"Container start event could not be published for \"\n-          + container.getId().toString(),\n-          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+          + container.getId().toString(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerStartEvent(\n      final TimelineClient timelineClient, final Container container,\n      String domainId, UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n        .getApplicationAttemptId().getApplicationId().toString());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      processTimelineResponseErrors(\n          putContainerEntity(timelineClient,\n              container.getId().getApplicationAttemptId(),\n              entity));\n    } catch (YarnException | IOException e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-4545. Allow YARN distributed shell to use ATS v1.5 APIs. Li Lu via junping_du\n",
          "commitDate": "14/03/16 8:28 AM",
          "commitName": "f291d82cd49c04a81380bc45c97c279d791b571c",
          "commitAuthor": "Junping Du",
          "commitDateOld": "18/01/16 4:58 PM",
          "commitNameOld": "f385851141522633184ce394899c659af5ace92a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 55.6,
          "commitsBetweenForRepo": 377,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,27 @@\n-  private static void publishContainerStartEvent(\n-      final TimelineClient timelineClient, Container container, String domainId,\n-      UserGroupInformation ugi) {\n+  private void publishContainerStartEvent(\n+      final TimelineClient timelineClient, final Container container,\n+      String domainId, UserGroupInformation ugi) {\n     final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n     entity.setDomainId(domainId);\n-    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n+    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n+    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n+        .getApplicationAttemptId().getApplicationId().toString());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n     try {\n-      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n-        @Override\n-        public TimelinePutResponse run() throws Exception {\n-          return processTimelineResponseErrors(\n-              timelineClient.putEntities(entity));\n-        }\n-      });\n-    } catch (Exception e) {\n+      processTimelineResponseErrors(\n+          putContainerEntity(timelineClient,\n+              container.getId().getApplicationAttemptId(),\n+              entity));\n+    } catch (YarnException | IOException e) {\n       LOG.error(\"Container start event could not be published for \"\n-          + container.getId().toString(),\n-          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+          + container.getId().toString(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishContainerStartEvent(\n      final TimelineClient timelineClient, final Container container,\n      String domainId, UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(USER_TIMELINE_FILTER_NAME, ugi.getShortUserName());\n    entity.addPrimaryFilter(APPID_TIMELINE_FILTER_NAME, container.getId()\n        .getApplicationAttemptId().getApplicationId().toString());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      processTimelineResponseErrors(\n          putContainerEntity(timelineClient,\n              container.getId().getApplicationAttemptId(),\n              entity));\n    } catch (YarnException | IOException e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {
            "oldValue": "[timelineClient-TimelineClient(modifiers-final), container-Container, domainId-String, ugi-UserGroupInformation]",
            "newValue": "[timelineClient-TimelineClient(modifiers-final), container-Container(modifiers-final), domainId-String, ugi-UserGroupInformation]"
          }
        }
      ]
    },
    "f385851141522633184ce394899c659af5ace92a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4596. SystemMetricPublisher should not swallow error messages from TimelineClient#putEntities. Contributed by Li Lu\n",
      "commitDate": "18/01/16 4:58 PM",
      "commitName": "f385851141522633184ce394899c659af5ace92a",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/11/15 11:50 AM",
      "commitNameOld": "7ff280fca9af45b98cee2336e78803da46b0f8a5",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 67.21,
      "commitsBetweenForRepo": 393,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   private static void publishContainerStartEvent(\n       final TimelineClient timelineClient, Container container, String domainId,\n       UserGroupInformation ugi) {\n     final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n     entity.setDomainId(domainId);\n     entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n     try {\n       ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n         @Override\n         public TimelinePutResponse run() throws Exception {\n-          return timelineClient.putEntities(entity);\n+          return processTimelineResponseErrors(\n+              timelineClient.putEntities(entity));\n         }\n       });\n     } catch (Exception e) {\n       LOG.error(\"Container start event could not be published for \"\n           + container.getId().toString(),\n           e instanceof UndeclaredThrowableException ? e.getCause() : e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void publishContainerStartEvent(\n      final TimelineClient timelineClient, Container container, String domainId,\n      UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n        @Override\n        public TimelinePutResponse run() throws Exception {\n          return processTimelineResponseErrors(\n              timelineClient.putEntities(entity));\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(),\n          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "1d4612f5ad9678c952b416e798dccd20c88f96ef": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-2629. Made the distributed shell use the domain-based timeline ACLs. Contributed by Zhijie Shen.\n",
      "commitDate": "09/10/14 12:59 PM",
      "commitName": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2629. Made the distributed shell use the domain-based timeline ACLs. Contributed by Zhijie Shen.\n",
          "commitDate": "09/10/14 12:59 PM",
          "commitName": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "01/10/14 3:38 PM",
          "commitNameOld": "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  private static void publishContainerStartEvent(TimelineClient timelineClient,\n-      Container container) throws IOException, YarnException {\n-    TimelineEntity entity \u003d new TimelineEntity();\n+  private static void publishContainerStartEvent(\n+      final TimelineClient timelineClient, Container container, String domainId,\n+      UserGroupInformation ugi) {\n+    final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n-    entity.addPrimaryFilter(\"user\",\n-        UserGroupInformation.getCurrentUser().getShortUserName());\n+    entity.setDomainId(domainId);\n+    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n-    timelineClient.putEntities(entity);\n+    try {\n+      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n+        @Override\n+        public TimelinePutResponse run() throws Exception {\n+          return timelineClient.putEntities(entity);\n+        }\n+      });\n+    } catch (Exception e) {\n+      LOG.error(\"Container start event could not be published for \"\n+          + container.getId().toString(),\n+          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void publishContainerStartEvent(\n      final TimelineClient timelineClient, Container container, String domainId,\n      UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n        @Override\n        public TimelinePutResponse run() throws Exception {\n          return timelineClient.putEntities(entity);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(),\n          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {
            "oldValue": "[timelineClient-TimelineClient, container-Container]",
            "newValue": "[timelineClient-TimelineClient(modifiers-final), container-Container, domainId-String, ugi-UserGroupInformation]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2629. Made the distributed shell use the domain-based timeline ACLs. Contributed by Zhijie Shen.\n",
          "commitDate": "09/10/14 12:59 PM",
          "commitName": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "01/10/14 3:38 PM",
          "commitNameOld": "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  private static void publishContainerStartEvent(TimelineClient timelineClient,\n-      Container container) throws IOException, YarnException {\n-    TimelineEntity entity \u003d new TimelineEntity();\n+  private static void publishContainerStartEvent(\n+      final TimelineClient timelineClient, Container container, String domainId,\n+      UserGroupInformation ugi) {\n+    final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n-    entity.addPrimaryFilter(\"user\",\n-        UserGroupInformation.getCurrentUser().getShortUserName());\n+    entity.setDomainId(domainId);\n+    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n-    timelineClient.putEntities(entity);\n+    try {\n+      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n+        @Override\n+        public TimelinePutResponse run() throws Exception {\n+          return timelineClient.putEntities(entity);\n+        }\n+      });\n+    } catch (Exception e) {\n+      LOG.error(\"Container start event could not be published for \"\n+          + container.getId().toString(),\n+          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void publishContainerStartEvent(\n      final TimelineClient timelineClient, Container container, String domainId,\n      UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n        @Override\n        public TimelinePutResponse run() throws Exception {\n          return timelineClient.putEntities(entity);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(),\n          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {
            "oldValue": "[IOException, YarnException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2629. Made the distributed shell use the domain-based timeline ACLs. Contributed by Zhijie Shen.\n",
          "commitDate": "09/10/14 12:59 PM",
          "commitName": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "01/10/14 3:38 PM",
          "commitNameOld": "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  private static void publishContainerStartEvent(TimelineClient timelineClient,\n-      Container container) throws IOException, YarnException {\n-    TimelineEntity entity \u003d new TimelineEntity();\n+  private static void publishContainerStartEvent(\n+      final TimelineClient timelineClient, Container container, String domainId,\n+      UserGroupInformation ugi) {\n+    final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n-    entity.addPrimaryFilter(\"user\",\n-        UserGroupInformation.getCurrentUser().getShortUserName());\n+    entity.setDomainId(domainId);\n+    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n-    timelineClient.putEntities(entity);\n+    try {\n+      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n+        @Override\n+        public TimelinePutResponse run() throws Exception {\n+          return timelineClient.putEntities(entity);\n+        }\n+      });\n+    } catch (Exception e) {\n+      LOG.error(\"Container start event could not be published for \"\n+          + container.getId().toString(),\n+          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void publishContainerStartEvent(\n      final TimelineClient timelineClient, Container container, String domainId,\n      UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n        @Override\n        public TimelinePutResponse run() throws Exception {\n          return timelineClient.putEntities(entity);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(),\n          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-2629. Made the distributed shell use the domain-based timeline ACLs. Contributed by Zhijie Shen.\n",
          "commitDate": "09/10/14 12:59 PM",
          "commitName": "1d4612f5ad9678c952b416e798dccd20c88f96ef",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "01/10/14 3:38 PM",
          "commitNameOld": "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 7.89,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,28 @@\n-  private static void publishContainerStartEvent(TimelineClient timelineClient,\n-      Container container) throws IOException, YarnException {\n-    TimelineEntity entity \u003d new TimelineEntity();\n+  private static void publishContainerStartEvent(\n+      final TimelineClient timelineClient, Container container, String domainId,\n+      UserGroupInformation ugi) {\n+    final TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n-    entity.addPrimaryFilter(\"user\",\n-        UserGroupInformation.getCurrentUser().getShortUserName());\n+    entity.setDomainId(domainId);\n+    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n-    timelineClient.putEntities(entity);\n+    try {\n+      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n+        @Override\n+        public TimelinePutResponse run() throws Exception {\n+          return timelineClient.putEntities(entity);\n+        }\n+      });\n+    } catch (Exception e) {\n+      LOG.error(\"Container start event could not be published for \"\n+          + container.getId().toString(),\n+          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void publishContainerStartEvent(\n      final TimelineClient timelineClient, Container container, String domainId,\n      UserGroupInformation ugi) {\n    final TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.setDomainId(domainId);\n    entity.addPrimaryFilter(\"user\", ugi.getShortUserName());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    try {\n      ugi.doAs(new PrivilegedExceptionAction\u003cTimelinePutResponse\u003e() {\n        @Override\n        public TimelinePutResponse run() throws Exception {\n          return timelineClient.putEntities(entity);\n        }\n      });\n    } catch (Exception e) {\n      LOG.error(\"Container start event could not be published for \"\n          + container.getId().toString(),\n          e instanceof UndeclaredThrowableException ? e.getCause() : e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
          "extendedDetails": {
            "oldValue": "[timelineClient-TimelineClient, container-Container]",
            "newValue": "[timelineClient-TimelineClient(modifiers-final), container-Container, domainId-String, ugi-UserGroupInformation]"
          }
        }
      ]
    },
    "1a535f8dcdfc4fab8ba6125680957caf55ea8f46": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2070. Made DistributedShell publish the short user name to the timeline server. Contributed by Robert Kanter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617837 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/14 2:07 PM",
      "commitName": "1a535f8dcdfc4fab8ba6125680957caf55ea8f46",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "29/07/14 8:58 PM",
      "commitNameOld": "7e54b1c6d9dc3a7fb07df36347130d605bd0a718",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.71,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private static void publishContainerStartEvent(TimelineClient timelineClient,\n       Container container) throws IOException, YarnException {\n     TimelineEntity entity \u003d new TimelineEntity();\n     entity.setEntityId(container.getId().toString());\n     entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n-    entity.addPrimaryFilter(\"user\", UserGroupInformation.getCurrentUser()\n-        .toString());\n+    entity.addPrimaryFilter(\"user\",\n+        UserGroupInformation.getCurrentUser().getShortUserName());\n     TimelineEvent event \u003d new TimelineEvent();\n     event.setTimestamp(System.currentTimeMillis());\n     event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n     event.addEventInfo(\"Node\", container.getNodeId().toString());\n     event.addEventInfo(\"Resources\", container.getResource().toString());\n     entity.addEvent(event);\n \n     timelineClient.putEntities(entity);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void publishContainerStartEvent(TimelineClient timelineClient,\n      Container container) throws IOException, YarnException {\n    TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.addPrimaryFilter(\"user\",\n        UserGroupInformation.getCurrentUser().getShortUserName());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    timelineClient.putEntities(entity);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "fd1c424548999cb8843f40cb6a342387f98bde6c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1690. Made DistributedShell send timeline entities+events. Contributed by Mayank Bansal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579123 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/14 8:49 PM",
      "commitName": "fd1c424548999cb8843f40cb6a342387f98bde6c",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,16 @@\n+  private static void publishContainerStartEvent(TimelineClient timelineClient,\n+      Container container) throws IOException, YarnException {\n+    TimelineEntity entity \u003d new TimelineEntity();\n+    entity.setEntityId(container.getId().toString());\n+    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n+    entity.addPrimaryFilter(\"user\", UserGroupInformation.getCurrentUser()\n+        .toString());\n+    TimelineEvent event \u003d new TimelineEvent();\n+    event.setTimestamp(System.currentTimeMillis());\n+    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n+    event.addEventInfo(\"Node\", container.getNodeId().toString());\n+    event.addEventInfo(\"Resources\", container.getResource().toString());\n+    entity.addEvent(event);\n+\n+    timelineClient.putEntities(entity);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void publishContainerStartEvent(TimelineClient timelineClient,\n      Container container) throws IOException, YarnException {\n    TimelineEntity entity \u003d new TimelineEntity();\n    entity.setEntityId(container.getId().toString());\n    entity.setEntityType(DSEntity.DS_CONTAINER.toString());\n    entity.addPrimaryFilter(\"user\", UserGroupInformation.getCurrentUser()\n        .toString());\n    TimelineEvent event \u003d new TimelineEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setEventType(DSEvent.DS_CONTAINER_START.toString());\n    event.addEventInfo(\"Node\", container.getNodeId().toString());\n    event.addEventInfo(\"Resources\", container.getResource().toString());\n    entity.addEvent(event);\n\n    timelineClient.putEntities(entity);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java"
    }
  }
}