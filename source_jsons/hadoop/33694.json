{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegatingLinuxContainerRuntime.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration__nmContext-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
  "functionStartLine": 71,
  "functionEndLine": 110,
  "numCommitsSeen": 34,
  "timeTaken": 4517,
  "changeHistory": [
    "0e22e9ab83438af37d821cb2f96e31f9a19ace2c",
    "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
    "b0b535d9d5727cd84fd6368c6d1b38363616504e",
    "6f6dfe0202249c129b36edfd145a2224140139cc",
    "b2661765a5a48392a5691cee15904ed2de147b00",
    "3ddb92bd30d4a267c5c35b410b21c6ea42a7238b",
    "3e6fce91a471b4a5099de109582e7c6417e8a822"
  ],
  "changeHistoryShort": {
    "0e22e9ab83438af37d821cb2f96e31f9a19ace2c": "Ybodychange",
    "dffb7bfe6cd2292162f08ec0bded736bc5194c3f": "Ybodychange",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Ymultichange(Yparameterchange,Ybodychange)",
    "b0b535d9d5727cd84fd6368c6d1b38363616504e": "Ybodychange",
    "6f6dfe0202249c129b36edfd145a2224140139cc": "Ybodychange",
    "b2661765a5a48392a5691cee15904ed2de147b00": "Ybodychange",
    "3ddb92bd30d4a267c5c35b410b21c6ea42a7238b": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e22e9ab83438af37d821cb2f96e31f9a19ace2c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9562. Add Java changes for the new RuncContainerRuntime. Contributed by Eric Badger\n",
      "commitDate": "18/11/19 1:56 PM",
      "commitName": "0e22e9ab83438af37d821cb2f96e31f9a19ace2c",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 247.94,
      "commitsBetweenForRepo": 1753,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,40 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n         YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n         YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n     for (String configuredRuntime : configuredRuntimes) {\n       String normRuntime \u003d configuredRuntime.toUpperCase();\n       allowedRuntimes.add(normRuntime);\n       if (isPluggableRuntime(normRuntime)) {\n         LinuxContainerRuntime runtime \u003d createPluggableRuntime(conf,\n             configuredRuntime);\n         runtime.initialize(conf, nmContext);\n         pluggableRuntimes.add(runtime);\n       }\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\n       javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n       javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\n       dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n       dockerLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n+        LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {\n+      runcContainerRuntime \u003d new RuncContainerRuntime(\n+          PrivilegedOperationExecutor.getInstance(conf));\n+      runcContainerRuntime.initialize(conf, nmContext);\n+    }\n+    if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\n       defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n       defaultLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n        YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n        YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n    for (String configuredRuntime : configuredRuntimes) {\n      String normRuntime \u003d configuredRuntime.toUpperCase();\n      allowedRuntimes.add(normRuntime);\n      if (isPluggableRuntime(normRuntime)) {\n        LinuxContainerRuntime runtime \u003d createPluggableRuntime(conf,\n            configuredRuntime);\n        runtime.initialize(conf, nmContext);\n        pluggableRuntimes.add(runtime);\n      }\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\n      javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\n      dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      dockerLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.RUNC.name())) {\n      runcContainerRuntime \u003d new RuncContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      runcContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\n      defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      defaultLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "dffb7bfe6cd2292162f08ec0bded736bc5194c3f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8638. Allow linux container runtimes to be pluggable. Contributed by Craig Condit\n",
      "commitDate": "05/09/18 5:47 AM",
      "commitName": "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
      "commitAuthor": "Shane Kumpf",
      "commitDateOld": "10/04/18 4:25 PM",
      "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 147.56,
      "commitsBetweenForRepo": 1582,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n         YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n         YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n     for (String configuredRuntime : configuredRuntimes) {\n-      try {\n-        allowedRuntimes.add(\n-            LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n-                configuredRuntime.toUpperCase()));\n-      } catch (IllegalArgumentException e) {\n-        throw new ContainerExecutionException(\"Invalid runtime set in \"\n-            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n-            + configuredRuntime);\n+      String normRuntime \u003d configuredRuntime.toUpperCase();\n+      allowedRuntimes.add(normRuntime);\n+      if (isPluggableRuntime(normRuntime)) {\n+        LinuxContainerRuntime runtime \u003d createPluggableRuntime(conf,\n+            configuredRuntime);\n+        runtime.initialize(conf, nmContext);\n+        pluggableRuntimes.add(runtime);\n       }\n     }\n     if (isRuntimeAllowed(\n-        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n+        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\n       javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n       javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n-        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n+        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\n       dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n       dockerLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n-        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n+        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\n       defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n       defaultLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n        YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n        YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n    for (String configuredRuntime : configuredRuntimes) {\n      String normRuntime \u003d configuredRuntime.toUpperCase();\n      allowedRuntimes.add(normRuntime);\n      if (isPluggableRuntime(normRuntime)) {\n        LinuxContainerRuntime runtime \u003d createPluggableRuntime(conf,\n            configuredRuntime);\n        runtime.initialize(conf, nmContext);\n        pluggableRuntimes.add(runtime);\n      }\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX.name())) {\n      javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DOCKER.name())) {\n      dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      dockerLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT.name())) {\n      defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      defaultLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
          "commitDate": "28/10/17 10:38 PM",
          "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
          "commitAuthor": "Sunil G",
          "commitDateOld": "02/10/17 7:04 PM",
          "commitNameOld": "7eb8499996869cdb63743f1c9eca2ba91d57ad08",
          "commitAuthorOld": "Sidharta S",
          "daysBetweenCommits": 26.15,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  public void initialize(Configuration conf)\n+  public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n         YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n         YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n     for (String configuredRuntime : configuredRuntimes) {\n       try {\n         allowedRuntimes.add(\n             LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n                 configuredRuntime.toUpperCase()));\n       } catch (IllegalArgumentException e) {\n         throw new ContainerExecutionException(\"Invalid runtime set in \"\n             + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n             + configuredRuntime);\n       }\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n       javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n-      javaSandboxLinuxContainerRuntime.initialize(conf);\n+      javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n       dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n-      dockerLinuxContainerRuntime.initialize(conf);\n+      dockerLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n       defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n-      defaultLinuxContainerRuntime.initialize(conf);\n+      defaultLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n        YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n        YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n    for (String configuredRuntime : configuredRuntimes) {\n      try {\n        allowedRuntimes.add(\n            LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n                configuredRuntime.toUpperCase()));\n      } catch (IllegalArgumentException e) {\n        throw new ContainerExecutionException(\"Invalid runtime set in \"\n            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n            + configuredRuntime);\n      }\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n      javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n      dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      dockerLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n      defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      defaultLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[conf-Configuration, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
          "commitDate": "28/10/17 10:38 PM",
          "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
          "commitAuthor": "Sunil G",
          "commitDateOld": "02/10/17 7:04 PM",
          "commitNameOld": "7eb8499996869cdb63743f1c9eca2ba91d57ad08",
          "commitAuthorOld": "Sidharta S",
          "daysBetweenCommits": 26.15,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  public void initialize(Configuration conf)\n+  public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n         YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n         YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n     for (String configuredRuntime : configuredRuntimes) {\n       try {\n         allowedRuntimes.add(\n             LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n                 configuredRuntime.toUpperCase()));\n       } catch (IllegalArgumentException e) {\n         throw new ContainerExecutionException(\"Invalid runtime set in \"\n             + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n             + configuredRuntime);\n       }\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n       javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n-      javaSandboxLinuxContainerRuntime.initialize(conf);\n+      javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n       dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n-      dockerLinuxContainerRuntime.initialize(conf);\n+      dockerLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n     if (isRuntimeAllowed(\n         LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n       defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n           PrivilegedOperationExecutor.getInstance(conf));\n-      defaultLinuxContainerRuntime.initialize(conf);\n+      defaultLinuxContainerRuntime.initialize(conf, nmContext);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n        YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n        YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n    for (String configuredRuntime : configuredRuntimes) {\n      try {\n        allowedRuntimes.add(\n            LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n                configuredRuntime.toUpperCase()));\n      } catch (IllegalArgumentException e) {\n        throw new ContainerExecutionException(\"Invalid runtime set in \"\n            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n            + configuredRuntime);\n      }\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n      javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      javaSandboxLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n      dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      dockerLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n      defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      defaultLinuxContainerRuntime.initialize(conf, nmContext);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "b0b535d9d5727cd84fd6368c6d1b38363616504e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6930. Admins should be able to explicitly enable specific LinuxContainerRuntime in the NodeManager. Contributed by Shane Kumpf\n",
      "commitDate": "07/09/17 2:17 PM",
      "commitName": "b0b535d9d5727cd84fd6368c6d1b38363616504e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 16.54,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,35 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n-    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-        PrivilegedOperationExecutor.getInstance(conf);\n-    defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n-        privilegedOperationExecutor);\n-    defaultLinuxContainerRuntime.initialize(conf);\n-    dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n-        privilegedOperationExecutor);\n-    dockerLinuxContainerRuntime.initialize(conf);\n-    javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n-        privilegedOperationExecutor);\n-    javaSandboxLinuxContainerRuntime.initialize(conf);\n+    String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n+        YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n+        YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n+    for (String configuredRuntime : configuredRuntimes) {\n+      try {\n+        allowedRuntimes.add(\n+            LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n+                configuredRuntime.toUpperCase()));\n+      } catch (IllegalArgumentException e) {\n+        throw new ContainerExecutionException(\"Invalid runtime set in \"\n+            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n+            + configuredRuntime);\n+      }\n+    }\n+    if (isRuntimeAllowed(\n+        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n+      javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n+          PrivilegedOperationExecutor.getInstance(conf));\n+      javaSandboxLinuxContainerRuntime.initialize(conf);\n+    }\n+    if (isRuntimeAllowed(\n+        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n+      dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n+          PrivilegedOperationExecutor.getInstance(conf));\n+      dockerLinuxContainerRuntime.initialize(conf);\n+    }\n+    if (isRuntimeAllowed(\n+        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n+      defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n+          PrivilegedOperationExecutor.getInstance(conf));\n+      defaultLinuxContainerRuntime.initialize(conf);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    String[] configuredRuntimes \u003d conf.getTrimmedStrings(\n        YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES,\n        YarnConfiguration.DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES);\n    for (String configuredRuntime : configuredRuntimes) {\n      try {\n        allowedRuntimes.add(\n            LinuxContainerRuntimeConstants.RuntimeType.valueOf(\n                configuredRuntime.toUpperCase()));\n      } catch (IllegalArgumentException e) {\n        throw new ContainerExecutionException(\"Invalid runtime set in \"\n            + YarnConfiguration.LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES + \" : \"\n            + configuredRuntime);\n      }\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.JAVASANDBOX)) {\n      javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      javaSandboxLinuxContainerRuntime.initialize(conf);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DOCKER)) {\n      dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      dockerLinuxContainerRuntime.initialize(conf);\n    }\n    if (isRuntimeAllowed(\n        LinuxContainerRuntimeConstants.RuntimeType.DEFAULT)) {\n      defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n          PrivilegedOperationExecutor.getInstance(conf));\n      defaultLinuxContainerRuntime.initialize(conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "6f6dfe0202249c129b36edfd145a2224140139cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
      "commitDate": "01/03/17 2:53 PM",
      "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "26/08/16 4:00 AM",
      "commitNameOld": "bfb4d950596d6198e473045dac6eb36c685b0319",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 187.5,
      "commitsBetweenForRepo": 1158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,14 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n         PrivilegedOperationExecutor.getInstance(conf);\n     defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n         privilegedOperationExecutor);\n     defaultLinuxContainerRuntime.initialize(conf);\n     dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n         privilegedOperationExecutor);\n     dockerLinuxContainerRuntime.initialize(conf);\n+    javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n+        privilegedOperationExecutor);\n+    javaSandboxLinuxContainerRuntime.initialize(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n        PrivilegedOperationExecutor.getInstance(conf);\n    defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    defaultLinuxContainerRuntime.initialize(conf);\n    dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    dockerLinuxContainerRuntime.initialize(conf);\n    javaSandboxLinuxContainerRuntime \u003d new JavaSandboxLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    javaSandboxLinuxContainerRuntime.initialize(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "b2661765a5a48392a5691cee15904ed2de147b00": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4762. Fixed CgroupHandler\u0027s creation and usage to avoid NodeManagers crashing when LinuxContainerExecutor is enabled. (Sidharta Seethana via vinodkv)\n",
      "commitDate": "07/03/16 11:08 AM",
      "commitName": "b2661765a5a48392a5691cee15904ed2de147b00",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/01/16 12:59 AM",
      "commitNameOld": "3ddb92bd30d4a267c5c35b410b21c6ea42a7238b",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 53.42,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,11 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n         PrivilegedOperationExecutor.getInstance(conf);\n-    CGroupsHandler cGroupsHandler;\n-    try {\n-      cGroupsHandler \u003d ResourceHandlerModule.getCGroupsHandler(conf);\n-    } catch (ResourceHandlerException e) {\n-      LOG.error(\"Unable to get cgroups handle.\");\n-      throw new ContainerExecutionException(e);\n-    }\n-\n     defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n         privilegedOperationExecutor);\n     defaultLinuxContainerRuntime.initialize(conf);\n     dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n-        privilegedOperationExecutor, cGroupsHandler);\n+        privilegedOperationExecutor);\n     dockerLinuxContainerRuntime.initialize(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n        PrivilegedOperationExecutor.getInstance(conf);\n    defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    defaultLinuxContainerRuntime.initialize(conf);\n    dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    dockerLinuxContainerRuntime.initialize(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3ddb92bd30d4a267c5c35b410b21c6ea42a7238b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4553. Add cgroups support for docker containers. Contributed by Sidharta Seethana.\n",
      "commitDate": "14/01/16 12:59 AM",
      "commitName": "3ddb92bd30d4a267c5c35b410b21c6ea42a7238b",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "27/07/15 11:57 AM",
      "commitNameOld": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 170.58,
      "commitsBetweenForRepo": 1120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,19 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n         PrivilegedOperationExecutor.getInstance(conf);\n+    CGroupsHandler cGroupsHandler;\n+    try {\n+      cGroupsHandler \u003d ResourceHandlerModule.getCGroupsHandler(conf);\n+    } catch (ResourceHandlerException e) {\n+      LOG.error(\"Unable to get cgroups handle.\");\n+      throw new ContainerExecutionException(e);\n+    }\n \n     defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n         privilegedOperationExecutor);\n     defaultLinuxContainerRuntime.initialize(conf);\n     dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n-        privilegedOperationExecutor);\n+        privilegedOperationExecutor, cGroupsHandler);\n     dockerLinuxContainerRuntime.initialize(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n        PrivilegedOperationExecutor.getInstance(conf);\n    CGroupsHandler cGroupsHandler;\n    try {\n      cGroupsHandler \u003d ResourceHandlerModule.getCGroupsHandler(conf);\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Unable to get cgroups handle.\");\n      throw new ContainerExecutionException(e);\n    }\n\n    defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    defaultLinuxContainerRuntime.initialize(conf);\n    dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n        privilegedOperationExecutor, cGroupsHandler);\n    dockerLinuxContainerRuntime.initialize(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,12 @@\n+  public void initialize(Configuration conf)\n+      throws ContainerExecutionException {\n+    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n+        PrivilegedOperationExecutor.getInstance(conf);\n+\n+    defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n+        privilegedOperationExecutor);\n+    defaultLinuxContainerRuntime.initialize(conf);\n+    dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n+        privilegedOperationExecutor);\n+    dockerLinuxContainerRuntime.initialize(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n        PrivilegedOperationExecutor.getInstance(conf);\n\n    defaultLinuxContainerRuntime \u003d new DefaultLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    defaultLinuxContainerRuntime.initialize(conf);\n    dockerLinuxContainerRuntime \u003d new DockerLinuxContainerRuntime(\n        privilegedOperationExecutor);\n    dockerLinuxContainerRuntime.initialize(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DelegatingLinuxContainerRuntime.java"
    }
  }
}