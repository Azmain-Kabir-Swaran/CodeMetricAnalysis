{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMS.java",
  "functionName": "createKey",
  "functionId": "createKey___jsonKey-Map",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
  "functionStartLine": 114,
  "functionEndLine": 181,
  "numCommitsSeen": 24,
  "timeTaken": 2563,
  "changeHistory": [
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
    "65912e4027548868ebefd8ee36eb00fa889704a7",
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
    "d4df7849a5caf749403bd89d29652f69c9c3f5a8",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
    "021ae471153ce2566924b0f6d29809669074c06d",
    "bda9c584c828fdd18e9c066747d58dbf751a585d",
    "38e2322d84d54896eac23afec0a1434629b8c8b2",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": "Ybodychange",
    "65912e4027548868ebefd8ee36eb00fa889704a7": "Ybodychange",
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6": "Ybodychange",
    "d4df7849a5caf749403bd89d29652f69c9c3f5a8": "Ybodychange",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": "Ymultichange(Yparameterchange,Ybodychange)",
    "021ae471153ce2566924b0f6d29809669074c06d": "Ybodychange",
    "bda9c584c828fdd18e9c066747d58dbf751a585d": "Ybodychange",
    "38e2322d84d54896eac23afec0a1434629b8c8b2": "Ybodychange",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14705. Add batched interface reencryptEncryptedKeys to KMS.\n",
      "commitDate": "22/08/17 7:47 AM",
      "commitName": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/06/17 10:35 PM",
      "commitNameOld": "c4b5c32669423b9a792f33f9f8333d95528f2515",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 74.38,
      "commitsBetweenForRepo": 438,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public Response createKey(Map jsonKey) throws Exception {\n     try{\n       LOG.trace(\"Entering createKey Method.\");\n       KMSWebApp.getAdminCallsMeter().mark();\n       UserGroupInformation user \u003d HttpUserGroupInformation.get();\n       final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n-      KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n+      checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n       assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n       String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n       final String material;\n       material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n       int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                    ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n       String description \u003d (String)\n           jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n       LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n               \"length of key {}, description of key {}\", name, cipher,\n                length, description);\n       Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n           jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n       if (material !\u003d null) {\n         assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n             KMSOp.CREATE_KEY, name);\n       }\n       final KeyProvider.Options options \u003d new KeyProvider.Options(\n           KMSWebApp.getConfiguration());\n       if (cipher !\u003d null) {\n         options.setCipher(cipher);\n       }\n       if (length !\u003d 0) {\n         options.setBitLength(length);\n       }\n       options.setDescription(description);\n       options.setAttributes(attributes);\n \n       KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n           new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n             @Override\n             public KeyVersion run() throws Exception {\n               KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n                   ? provider.createKey(name, Base64.decodeBase64(material),\n                       options)\n                   : provider.createKey(name, options);\n               provider.flush();\n               return keyVersion;\n             }\n           }\n       );\n \n       kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n           (material !\u003d null) + \" Description:\" + description);\n \n       if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n         keyVersion \u003d removeKeyMaterial(keyVersion);\n       }\n-      Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n+      Map json \u003d KMSUtil.toJSON(keyVersion);\n       String requestURL \u003d KMSMDCFilter.getURL();\n       int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n       requestURL \u003d requestURL.substring(0, idx);\n       LOG.trace(\"Exiting createKey Method.\");\n       return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n           .type(MediaType.APPLICATION_JSON)\n           .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n     } catch (Exception e) {\n       LOG.debug(\"Exception in createKey.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(Map jsonKey) throws Exception {\n    try{\n      LOG.trace(\"Entering createKey Method.\");\n      KMSWebApp.getAdminCallsMeter().mark();\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n      checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n      assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n      String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n      final String material;\n      material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n      int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                   ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n      String description \u003d (String)\n          jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n      LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n              \"length of key {}, description of key {}\", name, cipher,\n               length, description);\n      Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n          jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n      if (material !\u003d null) {\n        assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n            KMSOp.CREATE_KEY, name);\n      }\n      final KeyProvider.Options options \u003d new KeyProvider.Options(\n          KMSWebApp.getConfiguration());\n      if (cipher !\u003d null) {\n        options.setCipher(cipher);\n      }\n      if (length !\u003d 0) {\n        options.setBitLength(length);\n      }\n      options.setDescription(description);\n      options.setAttributes(attributes);\n\n      KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n            @Override\n            public KeyVersion run() throws Exception {\n              KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n                  ? provider.createKey(name, Base64.decodeBase64(material),\n                      options)\n                  : provider.createKey(name, options);\n              provider.flush();\n              return keyVersion;\n            }\n          }\n      );\n\n      kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n          (material !\u003d null) + \" Description:\" + description);\n\n      if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n        keyVersion \u003d removeKeyMaterial(keyVersion);\n      }\n      Map json \u003d KMSUtil.toJSON(keyVersion);\n      String requestURL \u003d KMSMDCFilter.getURL();\n      int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n      requestURL \u003d requestURL.substring(0, idx);\n      LOG.trace(\"Exiting createKey Method.\");\n      return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n          .type(MediaType.APPLICATION_JSON)\n          .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in createKey.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "65912e4027548868ebefd8ee36eb00fa889704a7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13669. KMS Server should log exceptions before throwing. Contributed by Suraj Acharya.\n",
      "commitDate": "10/10/16 12:51 PM",
      "commitName": "65912e4027548868ebefd8ee36eb00fa889704a7",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "30/09/16 5:51 PM",
      "commitNameOld": "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 9.79,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,68 @@\n   public Response createKey(Map jsonKey) throws Exception {\n-    LOG.trace(\"Entering createKey Method.\");\n-    KMSWebApp.getAdminCallsMeter().mark();\n-    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n-    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n-    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n-    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n-    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n-    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n-    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n-                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n-    String description \u003d (String)\n-        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n-    LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n-            \"length of key {}, description of key {}\", name, cipher,\n-             length, description);\n-    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n-        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n-    if (material !\u003d null) {\n-      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n-          KMSOp.CREATE_KEY, name);\n-    }\n-    final KeyProvider.Options options \u003d new KeyProvider.Options(\n-        KMSWebApp.getConfiguration());\n-    if (cipher !\u003d null) {\n-      options.setCipher(cipher);\n-    }\n-    if (length !\u003d 0) {\n-      options.setBitLength(length);\n-    }\n-    options.setDescription(description);\n-    options.setAttributes(attributes);\n+    try{\n+      LOG.trace(\"Entering createKey Method.\");\n+      KMSWebApp.getAdminCallsMeter().mark();\n+      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n+      final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n+      KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n+      assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n+      String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n+      final String material;\n+      material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n+      int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n+                   ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n+      String description \u003d (String)\n+          jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n+      LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n+              \"length of key {}, description of key {}\", name, cipher,\n+               length, description);\n+      Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n+          jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n+      if (material !\u003d null) {\n+        assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n+            KMSOp.CREATE_KEY, name);\n+      }\n+      final KeyProvider.Options options \u003d new KeyProvider.Options(\n+          KMSWebApp.getConfiguration());\n+      if (cipher !\u003d null) {\n+        options.setCipher(cipher);\n+      }\n+      if (length !\u003d 0) {\n+        options.setBitLength(length);\n+      }\n+      options.setDescription(description);\n+      options.setAttributes(attributes);\n \n-    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n-        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n-          @Override\n-          public KeyVersion run() throws Exception {\n-            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n-              ? provider.createKey(name, Base64.decodeBase64(material), options)\n-              : provider.createKey(name, options);\n-            provider.flush();\n-            return keyVersion;\n+      KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n+          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+            @Override\n+            public KeyVersion run() throws Exception {\n+              KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n+                  ? provider.createKey(name, Base64.decodeBase64(material),\n+                      options)\n+                  : provider.createKey(name, options);\n+              provider.flush();\n+              return keyVersion;\n+            }\n           }\n-        }\n-    );\n+      );\n \n-    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n-        (material !\u003d null) + \" Description:\" + description);\n+      kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n+          (material !\u003d null) + \" Description:\" + description);\n \n-    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n-      keyVersion \u003d removeKeyMaterial(keyVersion);\n+      if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n+        keyVersion \u003d removeKeyMaterial(keyVersion);\n+      }\n+      Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n+      String requestURL \u003d KMSMDCFilter.getURL();\n+      int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n+      requestURL \u003d requestURL.substring(0, idx);\n+      LOG.trace(\"Exiting createKey Method.\");\n+      return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n+          .type(MediaType.APPLICATION_JSON)\n+          .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n+    } catch (Exception e) {\n+      LOG.debug(\"Exception in createKey.\", e);\n+      throw e;\n     }\n-    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n-    String requestURL \u003d KMSMDCFilter.getURL();\n-    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n-    requestURL \u003d requestURL.substring(0, idx);\n-    LOG.trace(\"Exiting createKey Method.\");\n-    return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n-        .type(MediaType.APPLICATION_JSON)\n-        .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(Map jsonKey) throws Exception {\n    try{\n      LOG.trace(\"Entering createKey Method.\");\n      KMSWebApp.getAdminCallsMeter().mark();\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n      KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n      assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n      String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n      final String material;\n      material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n      int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                   ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n      String description \u003d (String)\n          jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n      LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n              \"length of key {}, description of key {}\", name, cipher,\n               length, description);\n      Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n          jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n      if (material !\u003d null) {\n        assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n            KMSOp.CREATE_KEY, name);\n      }\n      final KeyProvider.Options options \u003d new KeyProvider.Options(\n          KMSWebApp.getConfiguration());\n      if (cipher !\u003d null) {\n        options.setCipher(cipher);\n      }\n      if (length !\u003d 0) {\n        options.setBitLength(length);\n      }\n      options.setDescription(description);\n      options.setAttributes(attributes);\n\n      KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n            @Override\n            public KeyVersion run() throws Exception {\n              KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n                  ? provider.createKey(name, Base64.decodeBase64(material),\n                      options)\n                  : provider.createKey(name, options);\n              provider.flush();\n              return keyVersion;\n            }\n          }\n      );\n\n      kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n          (material !\u003d null) + \" Description:\" + description);\n\n      if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n        keyVersion \u003d removeKeyMaterial(keyVersion);\n      }\n      Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n      String requestURL \u003d KMSMDCFilter.getURL();\n      int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n      requestURL \u003d requestURL.substring(0, idx);\n      LOG.trace(\"Exiting createKey Method.\");\n      return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n          .type(MediaType.APPLICATION_JSON)\n          .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in createKey.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13317. Add logs to KMS server-side to improve supportability. Contributed by Suraj Acharya.\n",
      "commitDate": "30/09/16 5:51 PM",
      "commitName": "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "25/03/16 3:28 PM",
      "commitNameOld": "d4df7849a5caf749403bd89d29652f69c9c3f5a8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 189.1,
      "commitsBetweenForRepo": 1358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,61 @@\n   public Response createKey(Map jsonKey) throws Exception {\n+    LOG.trace(\"Entering createKey Method.\");\n     KMSWebApp.getAdminCallsMeter().mark();\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n     assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n     final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n+    LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n+            \"length of key {}, description of key {}\", name, cipher,\n+             length, description);\n     Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n         jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n           KMSOp.CREATE_KEY, name);\n     }\n     final KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n     options.setAttributes(attributes);\n \n     KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n         new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n           @Override\n           public KeyVersion run() throws Exception {\n             KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n               ? provider.createKey(name, Base64.decodeBase64(material), options)\n               : provider.createKey(name, options);\n             provider.flush();\n             return keyVersion;\n           }\n         }\n     );\n \n     kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n     if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n+    LOG.trace(\"Exiting createKey Method.\");\n     return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n         .type(MediaType.APPLICATION_JSON)\n         .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(Map jsonKey) throws Exception {\n    LOG.trace(\"Entering createKey Method.\");\n    KMSWebApp.getAdminCallsMeter().mark();\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    LOG.debug(\"Creating key with name {}, cipher being used{}, \" +\n            \"length of key {}, description of key {}\", name, cipher,\n             length, description);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          KMSOp.CREATE_KEY, name);\n    }\n    final KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n          @Override\n          public KeyVersion run() throws Exception {\n            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n              ? provider.createKey(name, Base64.decodeBase64(material), options)\n              : provider.createKey(name, options);\n            provider.flush();\n            return keyVersion;\n          }\n        }\n    );\n\n    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    LOG.trace(\"Exiting createKey Method.\");\n    return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n        .type(MediaType.APPLICATION_JSON)\n        .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "d4df7849a5caf749403bd89d29652f69c9c3f5a8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12962. KMS key names are incorrectly encoded when creating key. Contributed by Xiao Chen.\n",
      "commitDate": "25/03/16 3:28 PM",
      "commitName": "d4df7849a5caf749403bd89d29652f69c9c3f5a8",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "03/09/14 3:08 PM",
      "commitNameOld": "d9a03e272adbf3e9fde501610400f18fb4f6b865",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 569.01,
      "commitsBetweenForRepo": 4537,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public Response createKey(Map jsonKey) throws Exception {\n     KMSWebApp.getAdminCallsMeter().mark();\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n     assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n     final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n     Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n         jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n           KMSOp.CREATE_KEY, name);\n     }\n     final KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n     options.setAttributes(attributes);\n \n     KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n         new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n           @Override\n           public KeyVersion run() throws Exception {\n             KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n               ? provider.createKey(name, Base64.decodeBase64(material), options)\n               : provider.createKey(name, options);\n             provider.flush();\n             return keyVersion;\n           }\n         }\n     );\n \n     kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n     if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n-    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n-    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n-        header(\"Location\", keyURL).entity(json).build();\n+    return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n+        .type(MediaType.APPLICATION_JSON)\n+        .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          KMSOp.CREATE_KEY, name);\n    }\n    final KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n          @Override\n          public KeyVersion run() throws Exception {\n            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n              ? provider.createKey(name, Base64.decodeBase64(material), options)\n              : provider.createKey(name, options);\n            provider.flush();\n            return keyVersion;\n          }\n        }\n    );\n\n    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name))\n        .type(MediaType.APPLICATION_JSON)\n        .header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 10:03 PM",
      "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,56 @@\n-  public Response createKey(@Context SecurityContext securityContext,\n-      Map jsonKey) throws Exception {\n+  public Response createKey(Map jsonKey) throws Exception {\n     KMSWebApp.getAdminCallsMeter().mark();\n-    Principal user \u003d getPrincipal(securityContext);\n-    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n+    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n     assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n-    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n+    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n     Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n         jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n           KMSOp.CREATE_KEY, name);\n     }\n-    KeyProvider.Options options \u003d new KeyProvider.Options(\n+    final KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n     options.setAttributes(attributes);\n \n-    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n-        ? provider.createKey(name, Base64.decodeBase64(material), options)\n-        : provider.createKey(name, options);\n-\n-    provider.flush();\n+    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n+        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+          @Override\n+          public KeyVersion run() throws Exception {\n+            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n+              ? provider.createKey(name, Base64.decodeBase64(material), options)\n+              : provider.createKey(name, options);\n+            provider.flush();\n+            return keyVersion;\n+          }\n+        }\n+    );\n \n     kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n-    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n+    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n     String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n     return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n         header(\"Location\", keyURL).entity(json).build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response createKey(Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          KMSOp.CREATE_KEY, name);\n    }\n    final KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n          @Override\n          public KeyVersion run() throws Exception {\n            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n              ? provider.createKey(name, Base64.decodeBase64(material), options)\n              : provider.createKey(name, options);\n            provider.flush();\n            return keyVersion;\n          }\n        }\n    );\n\n    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n        header(\"Location\", keyURL).entity(json).build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {
            "oldValue": "[securityContext-SecurityContext(annotations-@Context), jsonKey-Map]",
            "newValue": "[jsonKey-Map]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,56 @@\n-  public Response createKey(@Context SecurityContext securityContext,\n-      Map jsonKey) throws Exception {\n+  public Response createKey(Map jsonKey) throws Exception {\n     KMSWebApp.getAdminCallsMeter().mark();\n-    Principal user \u003d getPrincipal(securityContext);\n-    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n+    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n     assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n-    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n+    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n     Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n         jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n           KMSOp.CREATE_KEY, name);\n     }\n-    KeyProvider.Options options \u003d new KeyProvider.Options(\n+    final KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n     options.setAttributes(attributes);\n \n-    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n-        ? provider.createKey(name, Base64.decodeBase64(material), options)\n-        : provider.createKey(name, options);\n-\n-    provider.flush();\n+    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n+        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+          @Override\n+          public KeyVersion run() throws Exception {\n+            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n+              ? provider.createKey(name, Base64.decodeBase64(material), options)\n+              : provider.createKey(name, options);\n+            provider.flush();\n+            return keyVersion;\n+          }\n+        }\n+    );\n \n     kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n-    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n+    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n     String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n     return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n         header(\"Location\", keyURL).entity(json).build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response createKey(Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    final String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    final String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          KMSOp.CREATE_KEY, name);\n    }\n    final KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d user.doAs(\n        new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n          @Override\n          public KeyVersion run() throws Exception {\n            KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n              ? provider.createKey(name, Base64.decodeBase64(material), options)\n              : provider.createKey(name, options);\n            provider.flush();\n            return keyVersion;\n          }\n        }\n    );\n\n    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n        header(\"Location\", keyURL).entity(json).build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {}
        }
      ]
    },
    "021ae471153ce2566924b0f6d29809669074c06d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10862. Miscellaneous trivial corrections to KMS classes. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616903 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 4:10 PM",
      "commitName": "021ae471153ce2566924b0f6d29809669074c06d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "30/07/14 10:54 AM",
      "commitNameOld": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 9.22,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public Response createKey(@Context SecurityContext securityContext,\n       Map jsonKey) throws Exception {\n     KMSWebApp.getAdminCallsMeter().mark();\n     Principal user \u003d getPrincipal(securityContext);\n     String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n-    assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n+    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n     String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n     Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n         jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n-          CREATE_KEY + \" with user provided material\", name);\n+          KMSOp.CREATE_KEY, name);\n     }\n     KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n     options.setAttributes(attributes);\n \n     KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n         ? provider.createKey(name, Base64.decodeBase64(material), options)\n         : provider.createKey(name, options);\n \n     provider.flush();\n \n-    kmsAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n+    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n     if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n     String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n     return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n         header(\"Location\", keyURL).entity(json).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(@Context SecurityContext securityContext,\n      Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    Principal user \u003d getPrincipal(securityContext);\n    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          KMSOp.CREATE_KEY, name);\n    }\n    KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n        ? provider.createKey(name, Base64.decodeBase64(material), options)\n        : provider.createKey(name, options);\n\n    provider.flush();\n\n    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n        header(\"Location\", keyURL).entity(json).build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "bda9c584c828fdd18e9c066747d58dbf751a585d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 10:54 AM",
      "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/07/14 1:55 PM",
      "commitNameOld": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 8.87,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public Response createKey(@Context SecurityContext securityContext,\n       Map jsonKey) throws Exception {\n     KMSWebApp.getAdminCallsMeter().mark();\n     Principal user \u003d getPrincipal(securityContext);\n     String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n     assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n     String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n     Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n         jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n           CREATE_KEY + \" with user provided material\", name);\n     }\n     KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n     options.setAttributes(attributes);\n \n     KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n         ? provider.createKey(name, Base64.decodeBase64(material), options)\n         : provider.createKey(name, options);\n \n     provider.flush();\n \n-    KMSAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n+    kmsAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n     if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n     String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n     return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n         header(\"Location\", keyURL).entity(json).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(@Context SecurityContext securityContext,\n      Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    Principal user \u003d getPrincipal(securityContext);\n    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          CREATE_KEY + \" with user provided material\", name);\n    }\n    KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n        ? provider.createKey(name, Base64.decodeBase64(material), options)\n        : provider.createKey(name, options);\n\n    provider.flush();\n\n    kmsAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n        header(\"Location\", keyURL).entity(json).build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "38e2322d84d54896eac23afec0a1434629b8c8b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10696. Add optional attributes to KeyProvider Options and Metadata. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 3:18 PM",
      "commitName": "38e2322d84d54896eac23afec0a1434629b8c8b2",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "05/05/14 2:43 PM",
      "commitNameOld": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 45.02,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   public Response createKey(@Context SecurityContext securityContext,\n       Map jsonKey) throws Exception {\n     KMSWebApp.getAdminCallsMeter().mark();\n     Principal user \u003d getPrincipal(securityContext);\n     String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n     KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n     assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n     String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n     String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n     int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                  ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n     String description \u003d (String)\n         jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n-\n+    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n+        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n     if (material !\u003d null) {\n       assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n           CREATE_KEY + \" with user provided material\", name);\n     }\n     KeyProvider.Options options \u003d new KeyProvider.Options(\n         KMSWebApp.getConfiguration());\n     if (cipher !\u003d null) {\n       options.setCipher(cipher);\n     }\n     if (length !\u003d 0) {\n       options.setBitLength(length);\n     }\n     options.setDescription(description);\n+    options.setAttributes(attributes);\n \n     KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n         ? provider.createKey(name, Base64.decodeBase64(material), options)\n         : provider.createKey(name, options);\n \n     provider.flush();\n \n     KMSAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n         (material !\u003d null) + \" Description:\" + description);\n \n     if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n       keyVersion \u003d removeKeyMaterial(keyVersion);\n     }\n     Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n     String requestURL \u003d KMSMDCFilter.getURL();\n     int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n     requestURL \u003d requestURL.substring(0, idx);\n     String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n     return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n         header(\"Location\", keyURL).entity(json).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(@Context SecurityContext securityContext,\n      Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    Principal user \u003d getPrincipal(securityContext);\n    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n    Map\u003cString, String\u003e attributes \u003d (Map\u003cString, String\u003e)\n        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          CREATE_KEY + \" with user provided material\", name);\n    }\n    KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n    options.setAttributes(attributes);\n\n    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n        ? provider.createKey(name, Base64.decodeBase64(material), options)\n        : provider.createKey(name, options);\n\n    provider.flush();\n\n    KMSAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n        header(\"Location\", keyURL).entity(json).build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,48 @@\n+  public Response createKey(@Context SecurityContext securityContext,\n+      Map jsonKey) throws Exception {\n+    KMSWebApp.getAdminCallsMeter().mark();\n+    Principal user \u003d getPrincipal(securityContext);\n+    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n+    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n+    assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n+    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n+    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n+    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n+                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n+    String description \u003d (String)\n+        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n+\n+    if (material !\u003d null) {\n+      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n+          CREATE_KEY + \" with user provided material\", name);\n+    }\n+    KeyProvider.Options options \u003d new KeyProvider.Options(\n+        KMSWebApp.getConfiguration());\n+    if (cipher !\u003d null) {\n+      options.setCipher(cipher);\n+    }\n+    if (length !\u003d 0) {\n+      options.setBitLength(length);\n+    }\n+    options.setDescription(description);\n+\n+    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n+        ? provider.createKey(name, Base64.decodeBase64(material), options)\n+        : provider.createKey(name, options);\n+\n+    provider.flush();\n+\n+    KMSAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n+        (material !\u003d null) + \" Description:\" + description);\n+\n+    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n+      keyVersion \u003d removeKeyMaterial(keyVersion);\n+    }\n+    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n+    String requestURL \u003d KMSMDCFilter.getURL();\n+    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n+    requestURL \u003d requestURL.substring(0, idx);\n+    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n+    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n+        header(\"Location\", keyURL).entity(json).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createKey(@Context SecurityContext securityContext,\n      Map jsonKey) throws Exception {\n    KMSWebApp.getAdminCallsMeter().mark();\n    Principal user \u003d getPrincipal(securityContext);\n    String name \u003d (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\n    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\n    assertAccess(KMSACLs.Type.CREATE, user, CREATE_KEY, name);\n    String cipher \u003d (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\n    String material \u003d (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\n    int length \u003d (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))\n                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\n    String description \u003d (String)\n        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\n\n    if (material !\u003d null) {\n      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,\n          CREATE_KEY + \" with user provided material\", name);\n    }\n    KeyProvider.Options options \u003d new KeyProvider.Options(\n        KMSWebApp.getConfiguration());\n    if (cipher !\u003d null) {\n      options.setCipher(cipher);\n    }\n    if (length !\u003d 0) {\n      options.setBitLength(length);\n    }\n    options.setDescription(description);\n\n    KeyProvider.KeyVersion keyVersion \u003d (material !\u003d null)\n        ? provider.createKey(name, Base64.decodeBase64(material), options)\n        : provider.createKey(name, options);\n\n    provider.flush();\n\n    KMSAudit.ok(user, CREATE_KEY, name, \"UserProvidedMaterial:\" +\n        (material !\u003d null) + \" Description:\" + description);\n\n    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user.getName())) {\n      keyVersion \u003d removeKeyMaterial(keyVersion);\n    }\n    Map json \u003d KMSServerJSONUtils.toJSON(keyVersion);\n    String requestURL \u003d KMSMDCFilter.getURL();\n    int idx \u003d requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\n    requestURL \u003d requestURL.substring(0, idx);\n    String keyURL \u003d requestURL + KMSRESTConstants.KEY_RESOURCE + \"/\" + name;\n    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).\n        header(\"Location\", keyURL).entity(json).build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java"
    }
  }
}