{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FrameworkUploader.java",
  "functionName": "parseArguments",
  "functionId": "parseArguments___args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
  "functionStartLine": 483,
  "functionEndLine": 598,
  "numCommitsSeen": 12,
  "timeTaken": 2633,
  "changeHistory": [
    "263c76b678275dfff867415c71ba9dc00a9235ef",
    "836643d793c68bf1bee883abece84f024591da7c",
    "d716084f4503bf826ef10424d7025ea1ff4ee104",
    "e404650f489727d2df9a8813fddc4e0d682fbbee",
    "3b78607a02f3a81ad730975ecdfa35967413271d"
  ],
  "changeHistoryShort": {
    "263c76b678275dfff867415c71ba9dc00a9235ef": "Ybodychange",
    "836643d793c68bf1bee883abece84f024591da7c": "Ybodychange",
    "d716084f4503bf826ef10424d7025ea1ff4ee104": "Ybodychange",
    "e404650f489727d2df9a8813fddc4e0d682fbbee": "Ybodychange",
    "3b78607a02f3a81ad730975ecdfa35967413271d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "263c76b678275dfff867415c71ba9dc00a9235ef": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-17011. Tolerate leading and trailing spaces in fs.defaultFS. Contributed by Ctest\n\nSigned-off-by: Ayush Saxena \u003cayushsaxena@apache.org\u003e\n",
      "commitDate": "30/04/20 2:15 PM",
      "commitName": "263c76b678275dfff867415c71ba9dc00a9235ef",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "12/02/20 6:53 AM",
      "commitNameOld": "8d6ff87c1870cf88c3cbc39c4274e283ab6b7423",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 78.27,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,116 +1,116 @@\n   boolean parseArguments(String[] args) throws IOException {\n     Options opts \u003d new Options();\n     opts.addOption(OptionBuilder.create(\"h\"));\n     opts.addOption(OptionBuilder.create(\"help\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\"Input class path. Defaults to the default classpath.\")\n         .hasArg().create(\"input\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to include in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered necessary to include\")\n         .hasArg().create(\"whitelist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to exclude in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered unnecessary to include\")\n         .hasArg().create(\"blacklist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file system to upload to.\" +\n             \" Example: hdfs://foo.com:8020\")\n         .hasArg().create(\"fs\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file to upload to with a reference name.\" +\n                 \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n         .hasArg().create(\"target\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired initial replication count. Default 3.\")\n         .hasArg().create(\"initialReplication\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired final replication count. Default 10.\")\n         .hasArg().create(\"finalReplication\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired acceptable replication count. Default 9.\")\n         .hasArg().create(\"acceptableReplication\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired timeout for the acceptable\" +\n                 \" replication in seconds. Default 10\")\n         .hasArg().create(\"timeout\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\"Ignore symlinks into the same directory\")\n         .create(\"nosymlink\"));\n     GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n     if (parser.getCommandLine().hasOption(\"help\") ||\n         parser.getCommandLine().hasOption(\"h\")) {\n       printHelp(opts);\n       return false;\n     }\n     input \u003d parser.getCommandLine().getOptionValue(\n         \"input\", System.getProperty(\"java.class.path\"));\n     whitelist \u003d parser.getCommandLine().getOptionValue(\n         \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n     blacklist \u003d parser.getCommandLine().getOptionValue(\n         \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n     initialReplication \u003d\n         Short.parseShort(parser.getCommandLine().getOptionValue(\n             \"initialReplication\", \"3\"));\n     finalReplication \u003d\n         Short.parseShort(parser.getCommandLine().getOptionValue(\n             \"finalReplication\", \"10\"));\n     acceptableReplication \u003d\n         Short.parseShort(\n             parser.getCommandLine().getOptionValue(\n                 \"acceptableReplication\", \"9\"));\n     timeout \u003d\n         Integer.parseInt(\n             parser.getCommandLine().getOptionValue(\"timeout\", \"10\"));\n     if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n       ignoreSymlink \u003d true;\n     }\n     String fs \u003d parser.getCommandLine()\n         .getOptionValue(\"fs\", null);\n     String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n         \"/usr/lib/mr-framework.tar.gz#mr-framework\");\n     boolean isFullPath \u003d\n         path.startsWith(\"hdfs://\") ||\n         path.startsWith(\"file://\");\n \n     if (fs \u003d\u003d null) {\n-      fs \u003d conf.get(FS_DEFAULT_NAME_KEY);\n+      fs \u003d conf.getTrimmed(FS_DEFAULT_NAME_KEY);\n       if (fs \u003d\u003d null \u0026\u0026 !isFullPath) {\n         LOG.error(\"No filesystem specified in either fs or target.\");\n         printHelp(opts);\n         return false;\n       } else {\n         LOG.info(String.format(\n             \"Target file system not specified. Using default %s\", fs));\n       }\n     }\n     if (path.isEmpty()) {\n       LOG.error(\"Target directory not specified\");\n       printHelp(opts);\n       return false;\n     }\n     StringBuilder absolutePath \u003d new StringBuilder();\n     if (!isFullPath) {\n       absolutePath.append(fs);\n       absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n     }\n     absolutePath.append(path);\n     target \u003d absolutePath.toString();\n \n     if (parser.getRemainingArgs().length \u003e 0) {\n       LOG.warn(\"Unexpected parameters\");\n       printHelp(opts);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean parseArguments(String[] args) throws IOException {\n    Options opts \u003d new Options();\n    opts.addOption(OptionBuilder.create(\"h\"));\n    opts.addOption(OptionBuilder.create(\"help\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Input class path. Defaults to the default classpath.\")\n        .hasArg().create(\"input\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to include in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered necessary to include\")\n        .hasArg().create(\"whitelist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to exclude in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered unnecessary to include\")\n        .hasArg().create(\"blacklist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file system to upload to.\" +\n            \" Example: hdfs://foo.com:8020\")\n        .hasArg().create(\"fs\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file to upload to with a reference name.\" +\n                \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n        .hasArg().create(\"target\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired initial replication count. Default 3.\")\n        .hasArg().create(\"initialReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired final replication count. Default 10.\")\n        .hasArg().create(\"finalReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired acceptable replication count. Default 9.\")\n        .hasArg().create(\"acceptableReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired timeout for the acceptable\" +\n                \" replication in seconds. Default 10\")\n        .hasArg().create(\"timeout\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Ignore symlinks into the same directory\")\n        .create(\"nosymlink\"));\n    GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n    if (parser.getCommandLine().hasOption(\"help\") ||\n        parser.getCommandLine().hasOption(\"h\")) {\n      printHelp(opts);\n      return false;\n    }\n    input \u003d parser.getCommandLine().getOptionValue(\n        \"input\", System.getProperty(\"java.class.path\"));\n    whitelist \u003d parser.getCommandLine().getOptionValue(\n        \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n    blacklist \u003d parser.getCommandLine().getOptionValue(\n        \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n    initialReplication \u003d\n        Short.parseShort(parser.getCommandLine().getOptionValue(\n            \"initialReplication\", \"3\"));\n    finalReplication \u003d\n        Short.parseShort(parser.getCommandLine().getOptionValue(\n            \"finalReplication\", \"10\"));\n    acceptableReplication \u003d\n        Short.parseShort(\n            parser.getCommandLine().getOptionValue(\n                \"acceptableReplication\", \"9\"));\n    timeout \u003d\n        Integer.parseInt(\n            parser.getCommandLine().getOptionValue(\"timeout\", \"10\"));\n    if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n      ignoreSymlink \u003d true;\n    }\n    String fs \u003d parser.getCommandLine()\n        .getOptionValue(\"fs\", null);\n    String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n        \"/usr/lib/mr-framework.tar.gz#mr-framework\");\n    boolean isFullPath \u003d\n        path.startsWith(\"hdfs://\") ||\n        path.startsWith(\"file://\");\n\n    if (fs \u003d\u003d null) {\n      fs \u003d conf.getTrimmed(FS_DEFAULT_NAME_KEY);\n      if (fs \u003d\u003d null \u0026\u0026 !isFullPath) {\n        LOG.error(\"No filesystem specified in either fs or target.\");\n        printHelp(opts);\n        return false;\n      } else {\n        LOG.info(String.format(\n            \"Target file system not specified. Using default %s\", fs));\n      }\n    }\n    if (path.isEmpty()) {\n      LOG.error(\"Target directory not specified\");\n      printHelp(opts);\n      return false;\n    }\n    StringBuilder absolutePath \u003d new StringBuilder();\n    if (!isFullPath) {\n      absolutePath.append(fs);\n      absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n    }\n    absolutePath.append(path);\n    target \u003d absolutePath.toString();\n\n    if (parser.getRemainingArgs().length \u003e 0) {\n      LOG.warn(\"Unexpected parameters\");\n      printHelp(opts);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "836643d793c68bf1bee883abece84f024591da7c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6995. Uploader tool for Distributed Cache Deploy documentation (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "19/01/18 5:57 PM",
      "commitName": "836643d793c68bf1bee883abece84f024591da7c",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "16/01/18 10:45 AM",
      "commitNameOld": "d716084f4503bf826ef10424d7025ea1ff4ee104",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 3.3,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,116 @@\n   boolean parseArguments(String[] args) throws IOException {\n     Options opts \u003d new Options();\n     opts.addOption(OptionBuilder.create(\"h\"));\n     opts.addOption(OptionBuilder.create(\"help\"));\n     opts.addOption(OptionBuilder\n-        .withDescription(\"Input class path\")\n+        .withDescription(\"Input class path. Defaults to the default classpath.\")\n         .hasArg().create(\"input\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to include in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered necessary to include\")\n         .hasArg().create(\"whitelist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to exclude in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered unnecessary to include\")\n         .hasArg().create(\"blacklist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file system to upload to.\" +\n             \" Example: hdfs://foo.com:8020\")\n         .hasArg().create(\"fs\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file to upload to with a reference name.\" +\n                 \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n         .hasArg().create(\"target\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired initial replication count. Default 3.\")\n         .hasArg().create(\"initialReplication\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired final replication count. Default 10.\")\n         .hasArg().create(\"finalReplication\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired acceptable replication count. Default 9.\")\n         .hasArg().create(\"acceptableReplication\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired timeout for the acceptable\" +\n                 \" replication in seconds. Default 10\")\n         .hasArg().create(\"timeout\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\"Ignore symlinks into the same directory\")\n         .create(\"nosymlink\"));\n     GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n     if (parser.getCommandLine().hasOption(\"help\") ||\n         parser.getCommandLine().hasOption(\"h\")) {\n       printHelp(opts);\n       return false;\n     }\n     input \u003d parser.getCommandLine().getOptionValue(\n         \"input\", System.getProperty(\"java.class.path\"));\n     whitelist \u003d parser.getCommandLine().getOptionValue(\n         \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n     blacklist \u003d parser.getCommandLine().getOptionValue(\n         \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n     initialReplication \u003d\n         Short.parseShort(parser.getCommandLine().getOptionValue(\n             \"initialReplication\", \"3\"));\n     finalReplication \u003d\n         Short.parseShort(parser.getCommandLine().getOptionValue(\n             \"finalReplication\", \"10\"));\n     acceptableReplication \u003d\n         Short.parseShort(\n             parser.getCommandLine().getOptionValue(\n                 \"acceptableReplication\", \"9\"));\n     timeout \u003d\n         Integer.parseInt(\n             parser.getCommandLine().getOptionValue(\"timeout\", \"10\"));\n     if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n       ignoreSymlink \u003d true;\n     }\n     String fs \u003d parser.getCommandLine()\n         .getOptionValue(\"fs\", null);\n-    if (fs \u003d\u003d null) {\n-      LOG.error(\"Target file system not specified\");\n-      printHelp(opts);\n-      return false;\n-    }\n     String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n-        \"mr-framework.tar.gz#mr-framework\");\n-    if (path \u003d\u003d null) {\n+        \"/usr/lib/mr-framework.tar.gz#mr-framework\");\n+    boolean isFullPath \u003d\n+        path.startsWith(\"hdfs://\") ||\n+        path.startsWith(\"file://\");\n+\n+    if (fs \u003d\u003d null) {\n+      fs \u003d conf.get(FS_DEFAULT_NAME_KEY);\n+      if (fs \u003d\u003d null \u0026\u0026 !isFullPath) {\n+        LOG.error(\"No filesystem specified in either fs or target.\");\n+        printHelp(opts);\n+        return false;\n+      } else {\n+        LOG.info(String.format(\n+            \"Target file system not specified. Using default %s\", fs));\n+      }\n+    }\n+    if (path.isEmpty()) {\n       LOG.error(\"Target directory not specified\");\n       printHelp(opts);\n       return false;\n     }\n-    StringBuilder absolutePath \u003d new StringBuilder(fs);\n-    absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n+    StringBuilder absolutePath \u003d new StringBuilder();\n+    if (!isFullPath) {\n+      absolutePath.append(fs);\n+      absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n+    }\n     absolutePath.append(path);\n     target \u003d absolutePath.toString();\n \n     if (parser.getRemainingArgs().length \u003e 0) {\n       LOG.warn(\"Unexpected parameters\");\n       printHelp(opts);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean parseArguments(String[] args) throws IOException {\n    Options opts \u003d new Options();\n    opts.addOption(OptionBuilder.create(\"h\"));\n    opts.addOption(OptionBuilder.create(\"help\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Input class path. Defaults to the default classpath.\")\n        .hasArg().create(\"input\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to include in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered necessary to include\")\n        .hasArg().create(\"whitelist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to exclude in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered unnecessary to include\")\n        .hasArg().create(\"blacklist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file system to upload to.\" +\n            \" Example: hdfs://foo.com:8020\")\n        .hasArg().create(\"fs\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file to upload to with a reference name.\" +\n                \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n        .hasArg().create(\"target\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired initial replication count. Default 3.\")\n        .hasArg().create(\"initialReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired final replication count. Default 10.\")\n        .hasArg().create(\"finalReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired acceptable replication count. Default 9.\")\n        .hasArg().create(\"acceptableReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired timeout for the acceptable\" +\n                \" replication in seconds. Default 10\")\n        .hasArg().create(\"timeout\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Ignore symlinks into the same directory\")\n        .create(\"nosymlink\"));\n    GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n    if (parser.getCommandLine().hasOption(\"help\") ||\n        parser.getCommandLine().hasOption(\"h\")) {\n      printHelp(opts);\n      return false;\n    }\n    input \u003d parser.getCommandLine().getOptionValue(\n        \"input\", System.getProperty(\"java.class.path\"));\n    whitelist \u003d parser.getCommandLine().getOptionValue(\n        \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n    blacklist \u003d parser.getCommandLine().getOptionValue(\n        \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n    initialReplication \u003d\n        Short.parseShort(parser.getCommandLine().getOptionValue(\n            \"initialReplication\", \"3\"));\n    finalReplication \u003d\n        Short.parseShort(parser.getCommandLine().getOptionValue(\n            \"finalReplication\", \"10\"));\n    acceptableReplication \u003d\n        Short.parseShort(\n            parser.getCommandLine().getOptionValue(\n                \"acceptableReplication\", \"9\"));\n    timeout \u003d\n        Integer.parseInt(\n            parser.getCommandLine().getOptionValue(\"timeout\", \"10\"));\n    if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n      ignoreSymlink \u003d true;\n    }\n    String fs \u003d parser.getCommandLine()\n        .getOptionValue(\"fs\", null);\n    String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n        \"/usr/lib/mr-framework.tar.gz#mr-framework\");\n    boolean isFullPath \u003d\n        path.startsWith(\"hdfs://\") ||\n        path.startsWith(\"file://\");\n\n    if (fs \u003d\u003d null) {\n      fs \u003d conf.get(FS_DEFAULT_NAME_KEY);\n      if (fs \u003d\u003d null \u0026\u0026 !isFullPath) {\n        LOG.error(\"No filesystem specified in either fs or target.\");\n        printHelp(opts);\n        return false;\n      } else {\n        LOG.info(String.format(\n            \"Target file system not specified. Using default %s\", fs));\n      }\n    }\n    if (path.isEmpty()) {\n      LOG.error(\"Target directory not specified\");\n      printHelp(opts);\n      return false;\n    }\n    StringBuilder absolutePath \u003d new StringBuilder();\n    if (!isFullPath) {\n      absolutePath.append(fs);\n      absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n    }\n    absolutePath.append(path);\n    target \u003d absolutePath.toString();\n\n    if (parser.getRemainingArgs().length \u003e 0) {\n      LOG.warn(\"Unexpected parameters\");\n      printHelp(opts);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "d716084f4503bf826ef10424d7025ea1ff4ee104": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7032. Add the ability to specify a delayed replication count (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "16/01/18 10:45 AM",
      "commitName": "d716084f4503bf826ef10424d7025ea1ff4ee104",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "12/01/18 2:18 PM",
      "commitNameOld": "e404650f489727d2df9a8813fddc4e0d682fbbee",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,103 @@\n   boolean parseArguments(String[] args) throws IOException {\n     Options opts \u003d new Options();\n     opts.addOption(OptionBuilder.create(\"h\"));\n     opts.addOption(OptionBuilder.create(\"help\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\"Input class path\")\n         .hasArg().create(\"input\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to include in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered necessary to include\")\n         .hasArg().create(\"whitelist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to exclude in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered unnecessary to include\")\n         .hasArg().create(\"blacklist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file system to upload to.\" +\n             \" Example: hdfs://foo.com:8020\")\n         .hasArg().create(\"fs\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file to upload to with a reference name.\" +\n                 \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n         .hasArg().create(\"target\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n-            \"Desired replication count\")\n-        .hasArg().create(\"replication\"));\n+            \"Desired initial replication count. Default 3.\")\n+        .hasArg().create(\"initialReplication\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Desired final replication count. Default 10.\")\n+        .hasArg().create(\"finalReplication\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Desired acceptable replication count. Default 9.\")\n+        .hasArg().create(\"acceptableReplication\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Desired timeout for the acceptable\" +\n+                \" replication in seconds. Default 10\")\n+        .hasArg().create(\"timeout\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\"Ignore symlinks into the same directory\")\n         .create(\"nosymlink\"));\n     GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n     if (parser.getCommandLine().hasOption(\"help\") ||\n         parser.getCommandLine().hasOption(\"h\")) {\n       printHelp(opts);\n       return false;\n     }\n     input \u003d parser.getCommandLine().getOptionValue(\n         \"input\", System.getProperty(\"java.class.path\"));\n     whitelist \u003d parser.getCommandLine().getOptionValue(\n         \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n     blacklist \u003d parser.getCommandLine().getOptionValue(\n         \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n-    replication \u003d Short.parseShort(parser.getCommandLine().getOptionValue(\n-        \"replication\", \"10\"));\n+    initialReplication \u003d\n+        Short.parseShort(parser.getCommandLine().getOptionValue(\n+            \"initialReplication\", \"3\"));\n+    finalReplication \u003d\n+        Short.parseShort(parser.getCommandLine().getOptionValue(\n+            \"finalReplication\", \"10\"));\n+    acceptableReplication \u003d\n+        Short.parseShort(\n+            parser.getCommandLine().getOptionValue(\n+                \"acceptableReplication\", \"9\"));\n+    timeout \u003d\n+        Integer.parseInt(\n+            parser.getCommandLine().getOptionValue(\"timeout\", \"10\"));\n     if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n       ignoreSymlink \u003d true;\n     }\n     String fs \u003d parser.getCommandLine()\n         .getOptionValue(\"fs\", null);\n     if (fs \u003d\u003d null) {\n       LOG.error(\"Target file system not specified\");\n       printHelp(opts);\n       return false;\n     }\n     String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n         \"mr-framework.tar.gz#mr-framework\");\n     if (path \u003d\u003d null) {\n       LOG.error(\"Target directory not specified\");\n       printHelp(opts);\n       return false;\n     }\n     StringBuilder absolutePath \u003d new StringBuilder(fs);\n     absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n     absolutePath.append(path);\n     target \u003d absolutePath.toString();\n \n     if (parser.getRemainingArgs().length \u003e 0) {\n       LOG.warn(\"Unexpected parameters\");\n       printHelp(opts);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean parseArguments(String[] args) throws IOException {\n    Options opts \u003d new Options();\n    opts.addOption(OptionBuilder.create(\"h\"));\n    opts.addOption(OptionBuilder.create(\"help\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Input class path\")\n        .hasArg().create(\"input\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to include in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered necessary to include\")\n        .hasArg().create(\"whitelist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to exclude in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered unnecessary to include\")\n        .hasArg().create(\"blacklist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file system to upload to.\" +\n            \" Example: hdfs://foo.com:8020\")\n        .hasArg().create(\"fs\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file to upload to with a reference name.\" +\n                \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n        .hasArg().create(\"target\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired initial replication count. Default 3.\")\n        .hasArg().create(\"initialReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired final replication count. Default 10.\")\n        .hasArg().create(\"finalReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired acceptable replication count. Default 9.\")\n        .hasArg().create(\"acceptableReplication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired timeout for the acceptable\" +\n                \" replication in seconds. Default 10\")\n        .hasArg().create(\"timeout\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Ignore symlinks into the same directory\")\n        .create(\"nosymlink\"));\n    GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n    if (parser.getCommandLine().hasOption(\"help\") ||\n        parser.getCommandLine().hasOption(\"h\")) {\n      printHelp(opts);\n      return false;\n    }\n    input \u003d parser.getCommandLine().getOptionValue(\n        \"input\", System.getProperty(\"java.class.path\"));\n    whitelist \u003d parser.getCommandLine().getOptionValue(\n        \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n    blacklist \u003d parser.getCommandLine().getOptionValue(\n        \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n    initialReplication \u003d\n        Short.parseShort(parser.getCommandLine().getOptionValue(\n            \"initialReplication\", \"3\"));\n    finalReplication \u003d\n        Short.parseShort(parser.getCommandLine().getOptionValue(\n            \"finalReplication\", \"10\"));\n    acceptableReplication \u003d\n        Short.parseShort(\n            parser.getCommandLine().getOptionValue(\n                \"acceptableReplication\", \"9\"));\n    timeout \u003d\n        Integer.parseInt(\n            parser.getCommandLine().getOptionValue(\"timeout\", \"10\"));\n    if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n      ignoreSymlink \u003d true;\n    }\n    String fs \u003d parser.getCommandLine()\n        .getOptionValue(\"fs\", null);\n    if (fs \u003d\u003d null) {\n      LOG.error(\"Target file system not specified\");\n      printHelp(opts);\n      return false;\n    }\n    String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n        \"mr-framework.tar.gz#mr-framework\");\n    if (path \u003d\u003d null) {\n      LOG.error(\"Target directory not specified\");\n      printHelp(opts);\n      return false;\n    }\n    StringBuilder absolutePath \u003d new StringBuilder(fs);\n    absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n    absolutePath.append(path);\n    target \u003d absolutePath.toString();\n\n    if (parser.getRemainingArgs().length \u003e 0) {\n      LOG.warn(\"Unexpected parameters\");\n      printHelp(opts);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "e404650f489727d2df9a8813fddc4e0d682fbbee": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7030. Uploader tool should ignore symlinks to the same directory (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "12/01/18 2:18 PM",
      "commitName": "e404650f489727d2df9a8813fddc4e0d682fbbee",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "11/12/17 2:00 PM",
      "commitNameOld": "2316f526902e827b6c1b92a5bddef72d211bc742",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 32.01,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,79 @@\n   boolean parseArguments(String[] args) throws IOException {\n     Options opts \u003d new Options();\n     opts.addOption(OptionBuilder.create(\"h\"));\n     opts.addOption(OptionBuilder.create(\"help\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\"Input class path\")\n         .hasArg().create(\"input\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to include in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered necessary to include\")\n         .hasArg().create(\"whitelist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Regex specifying the full path of jars to exclude in the\" +\n                 \" framework tarball. Default is a hardcoded set of jars\" +\n                 \" considered unnecessary to include\")\n         .hasArg().create(\"blacklist\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file system to upload to.\" +\n             \" Example: hdfs://foo.com:8020\")\n         .hasArg().create(\"fs\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Target file to upload to with a reference name.\" +\n                 \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n         .hasArg().create(\"target\"));\n     opts.addOption(OptionBuilder\n         .withDescription(\n             \"Desired replication count\")\n         .hasArg().create(\"replication\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\"Ignore symlinks into the same directory\")\n+        .create(\"nosymlink\"));\n     GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n     if (parser.getCommandLine().hasOption(\"help\") ||\n         parser.getCommandLine().hasOption(\"h\")) {\n       printHelp(opts);\n       return false;\n     }\n     input \u003d parser.getCommandLine().getOptionValue(\n         \"input\", System.getProperty(\"java.class.path\"));\n     whitelist \u003d parser.getCommandLine().getOptionValue(\n         \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n     blacklist \u003d parser.getCommandLine().getOptionValue(\n         \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n     replication \u003d Short.parseShort(parser.getCommandLine().getOptionValue(\n         \"replication\", \"10\"));\n+    if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n+      ignoreSymlink \u003d true;\n+    }\n     String fs \u003d parser.getCommandLine()\n         .getOptionValue(\"fs\", null);\n     if (fs \u003d\u003d null) {\n       LOG.error(\"Target file system not specified\");\n       printHelp(opts);\n       return false;\n     }\n     String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n         \"mr-framework.tar.gz#mr-framework\");\n     if (path \u003d\u003d null) {\n       LOG.error(\"Target directory not specified\");\n       printHelp(opts);\n       return false;\n     }\n     StringBuilder absolutePath \u003d new StringBuilder(fs);\n     absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n     absolutePath.append(path);\n     target \u003d absolutePath.toString();\n \n     if (parser.getRemainingArgs().length \u003e 0) {\n       LOG.warn(\"Unexpected parameters\");\n       printHelp(opts);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean parseArguments(String[] args) throws IOException {\n    Options opts \u003d new Options();\n    opts.addOption(OptionBuilder.create(\"h\"));\n    opts.addOption(OptionBuilder.create(\"help\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Input class path\")\n        .hasArg().create(\"input\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to include in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered necessary to include\")\n        .hasArg().create(\"whitelist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to exclude in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered unnecessary to include\")\n        .hasArg().create(\"blacklist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file system to upload to.\" +\n            \" Example: hdfs://foo.com:8020\")\n        .hasArg().create(\"fs\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file to upload to with a reference name.\" +\n                \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n        .hasArg().create(\"target\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired replication count\")\n        .hasArg().create(\"replication\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Ignore symlinks into the same directory\")\n        .create(\"nosymlink\"));\n    GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n    if (parser.getCommandLine().hasOption(\"help\") ||\n        parser.getCommandLine().hasOption(\"h\")) {\n      printHelp(opts);\n      return false;\n    }\n    input \u003d parser.getCommandLine().getOptionValue(\n        \"input\", System.getProperty(\"java.class.path\"));\n    whitelist \u003d parser.getCommandLine().getOptionValue(\n        \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n    blacklist \u003d parser.getCommandLine().getOptionValue(\n        \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n    replication \u003d Short.parseShort(parser.getCommandLine().getOptionValue(\n        \"replication\", \"10\"));\n    if (parser.getCommandLine().hasOption(\"nosymlink\")) {\n      ignoreSymlink \u003d true;\n    }\n    String fs \u003d parser.getCommandLine()\n        .getOptionValue(\"fs\", null);\n    if (fs \u003d\u003d null) {\n      LOG.error(\"Target file system not specified\");\n      printHelp(opts);\n      return false;\n    }\n    String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n        \"mr-framework.tar.gz#mr-framework\");\n    if (path \u003d\u003d null) {\n      LOG.error(\"Target directory not specified\");\n      printHelp(opts);\n      return false;\n    }\n    StringBuilder absolutePath \u003d new StringBuilder(fs);\n    absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n    absolutePath.append(path);\n    target \u003d absolutePath.toString();\n\n    if (parser.getRemainingArgs().length \u003e 0) {\n      LOG.warn(\"Unexpected parameters\");\n      printHelp(opts);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "3b78607a02f3a81ad730975ecdfa35967413271d": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6994. Uploader tool for Distributed Cache Deploy code changes  (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "01/12/17 12:12 PM",
      "commitName": "3b78607a02f3a81ad730975ecdfa35967413271d",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,73 @@\n+  boolean parseArguments(String[] args) throws IOException {\n+    Options opts \u003d new Options();\n+    opts.addOption(OptionBuilder.create(\"h\"));\n+    opts.addOption(OptionBuilder.create(\"help\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\"Input class path\")\n+        .hasArg().create(\"input\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Regex specifying the full path of jars to include in the\" +\n+                \" framework tarball. Default is a hardcoded set of jars\" +\n+                \" considered necessary to include\")\n+        .hasArg().create(\"whitelist\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Regex specifying the full path of jars to exclude in the\" +\n+                \" framework tarball. Default is a hardcoded set of jars\" +\n+                \" considered unnecessary to include\")\n+        .hasArg().create(\"blacklist\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Target file system to upload to.\" +\n+            \" Example: hdfs://foo.com:8020\")\n+        .hasArg().create(\"fs\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Target file to upload to with a reference name.\" +\n+                \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n+        .hasArg().create(\"target\"));\n+    opts.addOption(OptionBuilder\n+        .withDescription(\n+            \"Desired replication count\")\n+        .hasArg().create(\"replication\"));\n+    GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n+    if (parser.getCommandLine().hasOption(\"help\") ||\n+        parser.getCommandLine().hasOption(\"h\")) {\n+      printHelp(opts);\n+      return false;\n+    }\n+    input \u003d parser.getCommandLine().getOptionValue(\n+        \"input\", System.getProperty(\"java.class.path\"));\n+    whitelist \u003d parser.getCommandLine().getOptionValue(\n+        \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n+    blacklist \u003d parser.getCommandLine().getOptionValue(\n+        \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n+    replication \u003d Short.parseShort(parser.getCommandLine().getOptionValue(\n+        \"replication\", \"10\"));\n+    String fs \u003d parser.getCommandLine()\n+        .getOptionValue(\"fs\", null);\n+    if (fs \u003d\u003d null) {\n+      LOG.error(\"Target file system not specified\");\n+      printHelp(opts);\n+      return false;\n+    }\n+    String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n+        \"mr-framework.tar.gz#mr-framework\");\n+    if (path \u003d\u003d null) {\n+      LOG.error(\"Target directory not specified\");\n+      printHelp(opts);\n+      return false;\n+    }\n+    StringBuilder absolutePath \u003d new StringBuilder(fs);\n+    absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n+    absolutePath.append(path);\n+    target \u003d absolutePath.toString();\n+\n+    if (parser.getRemainingArgs().length \u003e 0) {\n+      LOG.warn(\"Unexpected parameters\");\n+      printHelp(opts);\n+      return false;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean parseArguments(String[] args) throws IOException {\n    Options opts \u003d new Options();\n    opts.addOption(OptionBuilder.create(\"h\"));\n    opts.addOption(OptionBuilder.create(\"help\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\"Input class path\")\n        .hasArg().create(\"input\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to include in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered necessary to include\")\n        .hasArg().create(\"whitelist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Regex specifying the full path of jars to exclude in the\" +\n                \" framework tarball. Default is a hardcoded set of jars\" +\n                \" considered unnecessary to include\")\n        .hasArg().create(\"blacklist\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file system to upload to.\" +\n            \" Example: hdfs://foo.com:8020\")\n        .hasArg().create(\"fs\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Target file to upload to with a reference name.\" +\n                \" Example: /usr/mr-framework.tar.gz#mr-framework\")\n        .hasArg().create(\"target\"));\n    opts.addOption(OptionBuilder\n        .withDescription(\n            \"Desired replication count\")\n        .hasArg().create(\"replication\"));\n    GenericOptionsParser parser \u003d new GenericOptionsParser(opts, args);\n    if (parser.getCommandLine().hasOption(\"help\") ||\n        parser.getCommandLine().hasOption(\"h\")) {\n      printHelp(opts);\n      return false;\n    }\n    input \u003d parser.getCommandLine().getOptionValue(\n        \"input\", System.getProperty(\"java.class.path\"));\n    whitelist \u003d parser.getCommandLine().getOptionValue(\n        \"whitelist\", DefaultJars.DEFAULT_MR_JARS);\n    blacklist \u003d parser.getCommandLine().getOptionValue(\n        \"blacklist\", DefaultJars.DEFAULT_EXCLUDED_MR_JARS);\n    replication \u003d Short.parseShort(parser.getCommandLine().getOptionValue(\n        \"replication\", \"10\"));\n    String fs \u003d parser.getCommandLine()\n        .getOptionValue(\"fs\", null);\n    if (fs \u003d\u003d null) {\n      LOG.error(\"Target file system not specified\");\n      printHelp(opts);\n      return false;\n    }\n    String path \u003d parser.getCommandLine().getOptionValue(\"target\",\n        \"mr-framework.tar.gz#mr-framework\");\n    if (path \u003d\u003d null) {\n      LOG.error(\"Target directory not specified\");\n      printHelp(opts);\n      return false;\n    }\n    StringBuilder absolutePath \u003d new StringBuilder(fs);\n    absolutePath \u003d absolutePath.append(path.startsWith(\"/\") ? \"\" : \"/\");\n    absolutePath.append(path);\n    target \u003d absolutePath.toString();\n\n    if (parser.getRemainingArgs().length \u003e 0) {\n      LOG.warn(\"Unexpected parameters\");\n      printHelp(opts);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java"
    }
  }
}