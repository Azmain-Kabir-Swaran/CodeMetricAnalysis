{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "removeCacheDirective",
  "functionId": "removeCacheDirective___id-long__logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 7482,
  "functionEndLine": 7503,
  "numCommitsSeen": 1891,
  "timeTaken": 43472,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "ff013d2c952272f3176dcf624251b05d610503b5",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "d27d7fc72e279614212c1eae52a84675073e89fb",
    "7817674a3a4d097b647dd77f1345787dd376d5ea",
    "767b91cd834dc235ce9d116ba745b90c24ebe290",
    "e227fb8fbcd414717faded9454b8ef813f7aafea",
    "8e253cb93030642f5a7324bad0f161cd0ad33206",
    "1959afe1133eee3d099a012635082d82a077c8b3",
    "3b008baf35ad335827e704f61db31edfcbc1d141",
    "fad8620a71e12bd291c5ee346d34d7d0a24d2f36",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
    "f79b3e6b17450e9d34c483046b7437b09dd72016"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "ff013d2c952272f3176dcf624251b05d610503b5": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "d27d7fc72e279614212c1eae52a84675073e89fb": "Ybodychange",
    "7817674a3a4d097b647dd77f1345787dd376d5ea": "Ybodychange",
    "767b91cd834dc235ce9d116ba745b90c24ebe290": "Ybodychange",
    "e227fb8fbcd414717faded9454b8ef813f7aafea": "Ybodychange",
    "8e253cb93030642f5a7324bad0f161cd0ad33206": "Ymultichange(Yparameterchange,Ybodychange)",
    "1959afe1133eee3d099a012635082d82a077c8b3": "Ybodychange",
    "3b008baf35ad335827e704f61db31edfcbc1d141": "Ybodychange",
    "fad8620a71e12bd291c5ee346d34d7d0a24d2f36": "Ybodychange",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": "Ymultichange(Yrename,Ybodychange)",
    "f79b3e6b17450e9d34c483046b7437b09dd72016": "Ymultichange(Yrename,Ybodychange)"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"removeCacheDirective\";\n     String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n     checkOperation(OperationCategory.WRITE);\n     FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot remove cache directives\");\n         FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n             logRetryCache);\n       } finally {\n-        writeUnlock(operationName);\n+        writeUnlock(operationName, getLockReportInfoSupplier(idStr));\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, idStr, null, null);\n       throw ace;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, idStr, null, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"removeCacheDirective\";\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    checkOperation(OperationCategory.WRITE);\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot remove cache directives\");\n        FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n            logRetryCache);\n      } finally {\n        writeUnlock(operationName, getLockReportInfoSupplier(idStr));\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, idStr, null, null);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, idStr, null, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"removeCacheDirective\";\n     String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n     checkOperation(OperationCategory.WRITE);\n+    FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot remove cache directives\");\n         FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n             logRetryCache);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, idStr, null, null);\n       throw ace;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, idStr, null, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"removeCacheDirective\";\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    checkOperation(OperationCategory.WRITE);\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot remove cache directives\");\n        FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n            logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, idStr, null, null);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, idStr, null, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14810. Review FSNameSystem editlog sync. Contributed by Xiaoqiao He.\n",
      "commitDate": "17/10/19 9:26 AM",
      "commitName": "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "06/09/19 5:42 AM",
      "commitNameOld": "d98c54816d21d59c4d877ae4b1917b22268ffcef",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 41.16,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"removeCacheDirective\";\n     String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n     checkOperation(OperationCategory.WRITE);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot remove cache directives\");\n         FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n             logRetryCache);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, idStr, null, null);\n       throw ace;\n     }\n-    logAuditEvent(true, operationName, idStr, null, null);\n     getEditLog().logSync();\n+    logAuditEvent(true, operationName, idStr, null, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"removeCacheDirective\";\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    checkOperation(OperationCategory.WRITE);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot remove cache directives\");\n        FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n            logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, idStr, null, null);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, idStr, null, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"removeCacheDirective\";\n-    boolean success \u003d false;\n     String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n     checkOperation(OperationCategory.WRITE);\n-    writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n-      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n-      success \u003d true;\n+      writeLock();\n+      try {\n+        checkOperation(OperationCategory.WRITE);\n+        checkNameNodeSafeMode(\"Cannot remove cache directives\");\n+        FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n+            logRetryCache);\n+      } finally {\n+        writeUnlock(operationName);\n+      }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, operationName, idStr, null, null);\n+      logAuditEvent(false, operationName, idStr, null, null);\n       throw ace;\n-    } finally {\n-      writeUnlock(operationName);\n     }\n-    logAuditEvent(success, operationName, idStr, null, null);\n+    logAuditEvent(true, operationName, idStr, null, null);\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"removeCacheDirective\";\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    checkOperation(OperationCategory.WRITE);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot remove cache directives\");\n        FSNDNCacheOp.removeCacheDirective(this, cacheManager, id,\n            logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, idStr, null, null);\n      throw ace;\n    }\n    logAuditEvent(true, operationName, idStr, null, null);\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff013d2c952272f3176dcf624251b05d610503b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13602. Add checkOperation(WRITE) checks in FSNamesystem. Contributed by Chao Sun.",
      "commitDate": "31/05/18 5:37 PM",
      "commitName": "ff013d2c952272f3176dcf624251b05d610503b5",
      "commitAuthor": "Chao Sun",
      "commitDateOld": "26/04/18 1:52 PM",
      "commitNameOld": "2adda92de1535c0472c0df33a145fa1814703f4f",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 35.16,
      "commitsBetweenForRepo": 296,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"removeCacheDirective\";\n     boolean success \u003d false;\n     String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n+    checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot remove cache directives\");\n       FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n       success \u003d true;\n     } catch (AccessControlException ace) {\n       logAuditEvent(success, operationName, idStr, null, null);\n       throw ace;\n     } finally {\n       writeUnlock(operationName);\n     }\n     logAuditEvent(success, operationName, idStr, null, null);\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"removeCacheDirective\";\n    boolean success \u003d false;\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, idStr, null, null);\n      throw ace;\n    } finally {\n      writeUnlock(operationName);\n    }\n    logAuditEvent(success, operationName, idStr, null, null);\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n+    final String operationName \u003d \"removeCacheDirective\";\n     boolean success \u003d false;\n     String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot remove cache directives\");\n       FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n       success \u003d true;\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, \"removeCacheDirective\", idStr, null, null);\n+      logAuditEvent(success, operationName, idStr, null, null);\n       throw ace;\n     } finally {\n-      writeUnlock();\n+      writeUnlock(operationName);\n     }\n-    logAuditEvent(success, \"removeCacheDirective\", idStr, null, null);\n+    logAuditEvent(success, operationName, idStr, null, null);\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"removeCacheDirective\";\n    boolean success \u003d false;\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, idStr, null, null);\n      throw ace;\n    } finally {\n      writeUnlock(operationName);\n    }\n    logAuditEvent(success, operationName, idStr, null, null);\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d27d7fc72e279614212c1eae52a84675073e89fb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9395. Make HDFS audit logging consistant. Contributed by Kuhu Shukla.\n",
      "commitDate": "24/02/16 10:04 AM",
      "commitName": "d27d7fc72e279614212c1eae52a84675073e89fb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "21/02/16 7:51 PM",
      "commitNameOld": "f313516731d787f6be64c9406ca83d941d47ee99",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,18 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     boolean success \u003d false;\n+    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot remove cache directives\");\n       FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n       success \u003d true;\n+    } catch (AccessControlException ace) {\n+      logAuditEvent(success, \"removeCacheDirective\", idStr, null, null);\n+      throw ace;\n     } finally {\n       writeUnlock();\n-      String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n-      logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n-          null);\n     }\n+    logAuditEvent(success, \"removeCacheDirective\", idStr, null, null);\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    boolean success \u003d false;\n    String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, \"removeCacheDirective\", idStr, null, null);\n      throw ace;\n    } finally {\n      writeUnlock();\n    }\n    logAuditEvent(success, \"removeCacheDirective\", idStr, null, null);\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "7817674a3a4d097b647dd77f1345787dd376d5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7609. Avoid retry cache collision when Standby NameNode loading edits. Contributed by Ming Ma.\n",
      "commitDate": "29/05/15 11:05 AM",
      "commitName": "7817674a3a4d097b647dd77f1345787dd376d5ea",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/05/15 3:42 PM",
      "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,16 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n-    checkOperation(OperationCategory.WRITE);\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot remove cache directives\");\n       FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n       logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n           null);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n      logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n          null);\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "767b91cd834dc235ce9d116ba745b90c24ebe290": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8321. CacheDirectives and CachePool operations should throw RetriableException in safemode. Contributed by Haohui Mai.\n",
      "commitDate": "07/05/15 3:17 PM",
      "commitName": "767b91cd834dc235ce9d116ba745b90c24ebe290",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/05/15 4:06 PM",
      "commitNameOld": "c75cfa29cfc527242837d80962688aa53c111e72",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,17 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n-      if (isInSafeMode()) {\n-        throw new SafeModeException(\n-            \"Cannot remove cache directives\", safeMode);\n-      }\n+      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n       FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n       logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n           null);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot remove cache directives\");\n      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n      logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n          null);\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "e227fb8fbcd414717faded9454b8ef813f7aafea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7459. Consolidate cache-related implementation in FSNamesystem into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "05/12/14 6:37 PM",
      "commitName": "e227fb8fbcd414717faded9454b8ef813f7aafea",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/12/14 2:17 PM",
      "commitNameOld": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,20 @@\n   void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n-    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n-        getPermissionChecker() : null;\n-\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove cache directives\", safeMode);\n       }\n-      cacheManager.removeDirective(id, pc);\n-      getEditLog().logRemoveCacheDirectiveInfo(id, logRetryCache);\n+      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n-      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n-        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n-            null);\n-      }\n+      String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n+      logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n+          null);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      FSNDNCacheOp.removeCacheDirective(this, cacheManager, id, logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n      logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n          null);\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "8e253cb93030642f5a7324bad0f161cd0ad33206": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
      "commitDate": "24/11/14 11:11 AM",
      "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
          "commitDate": "24/11/14 11:11 AM",
          "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/11/14 10:46 AM",
          "commitNameOld": "daacbc18d739d030822df0b75205eeb067f89850",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n-  void removeCacheDirective(Long id) throws IOException {\n+  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n-    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n-      return;\n-    }\n+\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n-      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n+      getEditLog().logRemoveCacheDirectiveInfo(id, logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n+        String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n         logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n             null);\n       }\n-      RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n            null);\n      }\n    }\n    getEditLog().logSync();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[id-Long]",
            "newValue": "[id-long, logRetryCache-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
          "commitDate": "24/11/14 11:11 AM",
          "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/11/14 10:46 AM",
          "commitNameOld": "daacbc18d739d030822df0b75205eeb067f89850",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n-  void removeCacheDirective(Long id) throws IOException {\n+  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n-    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n-      return;\n-    }\n+\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n-      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n+      getEditLog().logRemoveCacheDirectiveInfo(id, logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n+        String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n         logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n             null);\n       }\n-      RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void removeCacheDirective(long id, boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        String idStr \u003d \"{id: \" + Long.toString(id) + \"}\";\n        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n            null);\n      }\n    }\n    getEditLog().logSync();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "1959afe1133eee3d099a012635082d82a077c8b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5683. Better audit log messages for caching operations. Contributed by Abhiraj Butala.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/14 2:29 PM",
      "commitName": "1959afe1133eee3d099a012635082d82a077c8b3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "13/05/14 6:15 PM",
      "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   void removeCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n       getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"removeCacheDirective\", null, null,\n+        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n+        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3b008baf35ad335827e704f61db31edfcbc1d141": {
      "type": "Ybodychange",
      "commitMessage": "Undo accidental FSNamesystem change introduced in HDFS-6224 commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 5:21 PM",
      "commitName": "3b008baf35ad335827e704f61db31edfcbc1d141",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "10/04/14 3:35 PM",
      "commitNameOld": "fad8620a71e12bd291c5ee346d34d7d0a24d2f36",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   void removeCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n       getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n-        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n+        logAuditEvent(success, \"removeCacheDirective\", null, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"removeCacheDirective\", null, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "fad8620a71e12bd291c5ee346d34d7d0a24d2f36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6224. Add a unit test to TestAuditLogger for file permissions passed to logAuditEvent. Contributed by Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586490 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 3:35 PM",
      "commitName": "fad8620a71e12bd291c5ee346d34d7d0a24d2f36",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/04/14 11:25 AM",
      "commitNameOld": "fe328621d4a84ae99efcb6394a910009b4e1761f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   void removeCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n       getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"removeCacheDirective\", null, null,\n+        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n+        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void removeCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        String idStr \u003d \"{id: \" + id.toString() + \"}\";\n        logAuditEvent(success, \"removeCacheDirective\", idStr, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 9:12 AM",
      "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/11/13 6:43 AM",
          "commitNameOld": "f26d2adbf98890cfe350c17241f5049b89a11e3c",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void removePathBasedCacheDirective(Long id) throws IOException {\n+  void removeCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n-            \"Cannot remove PathBasedCache directives\", safeMode);\n+            \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n-      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry !\u003d null);\n+      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"removePathBasedCacheDirective\", null, null,\n+        logAuditEvent(success, \"removeCacheDirective\", null, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void removeCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"removeCacheDirective\", null, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "removePathBasedCacheDirective",
            "newValue": "removeCacheDirective"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/11/13 6:43 AM",
          "commitNameOld": "f26d2adbf98890cfe350c17241f5049b89a11e3c",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void removePathBasedCacheDirective(Long id) throws IOException {\n+  void removeCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n-            \"Cannot remove PathBasedCache directives\", safeMode);\n+            \"Cannot remove cache directives\", safeMode);\n       }\n       cacheManager.removeDirective(id, pc);\n-      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry !\u003d null);\n+      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"removePathBasedCacheDirective\", null, null,\n+        logAuditEvent(success, \"removeCacheDirective\", null, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void removeCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove cache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemoveCacheDirectiveInfo(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"removeCacheDirective\", null, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f79b3e6b17450e9d34c483046b7437b09dd72016": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 2:07 PM",
      "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/11/13 1:49 PM",
          "commitNameOld": "3b91b7dece84b563a4b7cf66c245b7c5ee094578",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.05,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void removePathBasedCacheDescriptor(Long id) throws IOException {\n+  void removePathBasedCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove PathBasedCache directives\", safeMode);\n       }\n-      cacheManager.removeDescriptor(id, pc);\n-      getEditLog().logRemovePathBasedCacheDescriptor(id, cacheEntry !\u003d null);\n+      cacheManager.removeDirective(id, pc);\n+      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"removePathBasedCacheDescriptor\", null, null,\n+        logAuditEvent(success, \"removePathBasedCacheDirective\", null, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void removePathBasedCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove PathBasedCache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"removePathBasedCacheDirective\", null, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "removePathBasedCacheDescriptor",
            "newValue": "removePathBasedCacheDirective"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/11/13 1:49 PM",
          "commitNameOld": "3b91b7dece84b563a4b7cf66c245b7c5ee094578",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.05,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  void removePathBasedCacheDescriptor(Long id) throws IOException {\n+  void removePathBasedCacheDirective(Long id) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return;\n     }\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\n             \"Cannot remove PathBasedCache directives\", safeMode);\n       }\n-      cacheManager.removeDescriptor(id, pc);\n-      getEditLog().logRemovePathBasedCacheDescriptor(id, cacheEntry !\u003d null);\n+      cacheManager.removeDirective(id, pc);\n+      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       writeUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"removePathBasedCacheDescriptor\", null, null,\n+        logAuditEvent(success, \"removePathBasedCacheDirective\", null, null,\n             null);\n       }\n       RetryCache.setState(cacheEntry, success);\n     }\n     getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void removePathBasedCacheDirective(Long id) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return;\n    }\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\n            \"Cannot remove PathBasedCache directives\", safeMode);\n      }\n      cacheManager.removeDirective(id, pc);\n      getEditLog().logRemovePathBasedCacheDirective(id, cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      writeUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"removePathBasedCacheDirective\", null, null,\n            null);\n      }\n      RetryCache.setState(cacheEntry, success);\n    }\n    getEditLog().logSync();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}