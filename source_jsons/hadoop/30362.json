{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationHistoryManagerOnTimelineStore.java",
  "functionName": "generateApplicationReport",
  "functionId": "generateApplicationReport___entity-TimelineEntity__field-ApplicationReportField",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
  "functionStartLine": 680,
  "functionEndLine": 733,
  "numCommitsSeen": 42,
  "timeTaken": 3094,
  "changeHistory": [
    "d93c22ec274b1a0f29609217039b80732886fed7",
    "455b3acf0e82b214e06bd7b538968252945cd3c4",
    "9fae455e26e0230107e1c6db58a49a5b6b296cf4",
    "c05b581a5522eed499d3ba16af9fa6dc694563f6",
    "df3becf0800d24d1fe773651abb16d29f8bc3fdc",
    "90a0c03f0a696d32e871a5da4560828edea8cfa9",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38"
  ],
  "changeHistoryShort": {
    "d93c22ec274b1a0f29609217039b80732886fed7": "Ybodychange",
    "455b3acf0e82b214e06bd7b538968252945cd3c4": "Ybodychange",
    "9fae455e26e0230107e1c6db58a49a5b6b296cf4": "Ybodychange",
    "c05b581a5522eed499d3ba16af9fa6dc694563f6": "Ybodychange",
    "df3becf0800d24d1fe773651abb16d29f8bc3fdc": "Ybodychange",
    "90a0c03f0a696d32e871a5da4560828edea8cfa9": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d93c22ec274b1a0f29609217039b80732886fed7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4748. ApplicationHistoryManagerOnTimelineStore should not swallow exceptions on generateApplicationReport. Contributed by Li Lu\n",
      "commitDate": "29/02/16 6:19 PM",
      "commitName": "d93c22ec274b1a0f29609217039b80732886fed7",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/15 1:04 PM",
      "commitNameOld": "4ff973f96ae7f77cda3b52b38427e2991819ad31",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 84.22,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,54 @@\n   private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n     ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n     // If only user and acls are pulled to check attempt(s)/container(s) access\n     // control, we can return immediately\n     if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n       return app;\n     }\n     try {\n       checkAccess(app);\n       if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n         ApplicationAttemptReport appAttempt \u003d getApplicationAttempt(\n             app.appReport.getCurrentApplicationAttemptId(), false);\n         app.appReport.setHost(appAttempt.getHost());\n         app.appReport.setRpcPort(appAttempt.getRpcPort());\n         app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n         app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n       }\n     } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\n       // AuthorizationException is thrown because the user doesn\u0027t have access\n+      if (e instanceof AuthorizationException) {\n+        LOG.warn(\"Failed to authorize when generating application report for \"\n+            + app.appReport.getApplicationId()\n+            + \". Use a placeholder for its latest attempt id. \", e);\n+      } else { // Attempt not found\n+        LOG.info(\"No application attempt found for \"\n+            + app.appReport.getApplicationId()\n+            + \". Use a placeholder for its latest attempt id. \", e);\n+      }\n       // It\u0027s possible that the app is finished before the first attempt is created.\n       app.appReport.setDiagnostics(null);\n       app.appReport.setCurrentApplicationAttemptId(null);\n     }\n     if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n       app.appReport.setCurrentApplicationAttemptId(\n           ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n     if (app.appReport.getHost() \u003d\u003d null) {\n       app.appReport.setHost(UNAVAILABLE);\n     }\n     if (app.appReport.getRpcPort() \u003c 0) {\n       app.appReport.setRpcPort(-1);\n     }\n     if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n       app.appReport.setTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n       app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getDiagnostics() \u003d\u003d null) {\n       app.appReport.setDiagnostics(\"\");\n     }\n     return app;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d getApplicationAttempt(\n            app.appReport.getCurrentApplicationAttemptId(), false);\n        app.appReport.setHost(appAttempt.getHost());\n        app.appReport.setRpcPort(appAttempt.getRpcPort());\n        app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n        app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n      }\n    } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\n      // AuthorizationException is thrown because the user doesn\u0027t have access\n      if (e instanceof AuthorizationException) {\n        LOG.warn(\"Failed to authorize when generating application report for \"\n            + app.appReport.getApplicationId()\n            + \". Use a placeholder for its latest attempt id. \", e);\n      } else { // Attempt not found\n        LOG.info(\"No application attempt found for \"\n            + app.appReport.getApplicationId()\n            + \". Use a placeholder for its latest attempt id. \", e);\n      }\n      // It\u0027s possible that the app is finished before the first attempt is created.\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    if (app.appReport.getHost() \u003d\u003d null) {\n      app.appReport.setHost(UNAVAILABLE);\n    }\n    if (app.appReport.getRpcPort() \u003c 0) {\n      app.appReport.setRpcPort(-1);\n    }\n    if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n      app.appReport.setTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n      app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getDiagnostics() \u003d\u003d null) {\n      app.appReport.setDiagnostics(\"\");\n    }\n    return app;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "455b3acf0e82b214e06bd7b538968252945cd3c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3701. Isolating the error of generating a single app report when\ngetting all apps from generic history service. Contributed by Zhijie\nShen\n",
      "commitDate": "22/05/15 2:34 PM",
      "commitName": "455b3acf0e82b214e06bd7b538968252945cd3c4",
      "commitAuthor": "Xuan",
      "commitDateOld": "07/04/15 8:22 AM",
      "commitNameOld": "19a4feaf6fcf42ebbfe98b8a7153ade96d37fb14",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 45.26,
      "commitsBetweenForRepo": 486,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n     ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n     // If only user and acls are pulled to check attempt(s)/container(s) access\n     // control, we can return immediately\n     if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n       return app;\n     }\n     try {\n       checkAccess(app);\n       if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n-        ApplicationAttemptReport appAttempt \u003d\n-            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n+        ApplicationAttemptReport appAttempt \u003d getApplicationAttempt(\n+            app.appReport.getCurrentApplicationAttemptId(), false);\n         app.appReport.setHost(appAttempt.getHost());\n         app.appReport.setRpcPort(appAttempt.getRpcPort());\n         app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n         app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n       }\n     } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\n       // AuthorizationException is thrown because the user doesn\u0027t have access\n       // It\u0027s possible that the app is finished before the first attempt is created.\n       app.appReport.setDiagnostics(null);\n       app.appReport.setCurrentApplicationAttemptId(null);\n     }\n     if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n       app.appReport.setCurrentApplicationAttemptId(\n           ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n     if (app.appReport.getHost() \u003d\u003d null) {\n       app.appReport.setHost(UNAVAILABLE);\n     }\n     if (app.appReport.getRpcPort() \u003c 0) {\n       app.appReport.setRpcPort(-1);\n     }\n     if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n       app.appReport.setTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n       app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getDiagnostics() \u003d\u003d null) {\n       app.appReport.setDiagnostics(\"\");\n     }\n     return app;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d getApplicationAttempt(\n            app.appReport.getCurrentApplicationAttemptId(), false);\n        app.appReport.setHost(appAttempt.getHost());\n        app.appReport.setRpcPort(appAttempt.getRpcPort());\n        app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n        app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n      }\n    } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\n      // AuthorizationException is thrown because the user doesn\u0027t have access\n      // It\u0027s possible that the app is finished before the first attempt is created.\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    if (app.appReport.getHost() \u003d\u003d null) {\n      app.appReport.setHost(UNAVAILABLE);\n    }\n    if (app.appReport.getRpcPort() \u003c 0) {\n      app.appReport.setRpcPort(-1);\n    }\n    if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n      app.appReport.setTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n      app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getDiagnostics() \u003d\u003d null) {\n      app.appReport.setDiagnostics(\"\");\n    }\n    return app;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "9fae455e26e0230107e1c6db58a49a5b6b296cf4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3393. Getting application(s) goes wrong when app finishes before\nstarting the attempt. Contributed by Zhijie Shen\n",
      "commitDate": "23/03/15 8:33 PM",
      "commitName": "9fae455e26e0230107e1c6db58a49a5b6b296cf4",
      "commitAuthor": "Xuan",
      "commitDateOld": "11/03/15 7:35 PM",
      "commitNameOld": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 12.04,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n   private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n     ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n     // If only user and acls are pulled to check attempt(s)/container(s) access\n     // control, we can return immediately\n     if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n       return app;\n     }\n     try {\n       checkAccess(app);\n       if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n         ApplicationAttemptReport appAttempt \u003d\n             getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n-        if (appAttempt !\u003d null) {\n-          app.appReport.setHost(appAttempt.getHost());\n-          app.appReport.setRpcPort(appAttempt.getRpcPort());\n-          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n-          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n-        }\n+        app.appReport.setHost(appAttempt.getHost());\n+        app.appReport.setRpcPort(appAttempt.getRpcPort());\n+        app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n+        app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n       }\n-    } catch (AuthorizationException e) {\n+    } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\n       // AuthorizationException is thrown because the user doesn\u0027t have access\n+      // It\u0027s possible that the app is finished before the first attempt is created.\n       app.appReport.setDiagnostics(null);\n       app.appReport.setCurrentApplicationAttemptId(null);\n     }\n     if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n       app.appReport.setCurrentApplicationAttemptId(\n           ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n     if (app.appReport.getHost() \u003d\u003d null) {\n       app.appReport.setHost(UNAVAILABLE);\n     }\n     if (app.appReport.getRpcPort() \u003c 0) {\n       app.appReport.setRpcPort(-1);\n     }\n     if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n       app.appReport.setTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n       app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getDiagnostics() \u003d\u003d null) {\n       app.appReport.setDiagnostics(\"\");\n     }\n     return app;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d\n            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n        app.appReport.setHost(appAttempt.getHost());\n        app.appReport.setRpcPort(appAttempt.getRpcPort());\n        app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n        app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n      }\n    } catch (AuthorizationException | ApplicationAttemptNotFoundException e) {\n      // AuthorizationException is thrown because the user doesn\u0027t have access\n      // It\u0027s possible that the app is finished before the first attempt is created.\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    if (app.appReport.getHost() \u003d\u003d null) {\n      app.appReport.setHost(UNAVAILABLE);\n    }\n    if (app.appReport.getRpcPort() \u003c 0) {\n      app.appReport.setRpcPort(-1);\n    }\n    if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n      app.appReport.setTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n      app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getDiagnostics() \u003d\u003d null) {\n      app.appReport.setDiagnostics(\"\");\n    }\n    return app;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "c05b581a5522eed499d3ba16af9fa6dc694563f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2591. Fixed AHSWebServices to return FORBIDDEN(403) if the request user doesn\u0027t have access to the history data. Contributed by Zhijie Shen\n",
      "commitDate": "27/10/14 10:45 AM",
      "commitName": "c05b581a5522eed499d3ba16af9fa6dc694563f6",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/10/14 5:27 PM",
      "commitNameOld": "df3becf0800d24d1fe773651abb16d29f8bc3fdc",
      "commitAuthorOld": "Mayank Bansal",
      "daysBetweenCommits": 18.72,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n     ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n     // If only user and acls are pulled to check attempt(s)/container(s) access\n     // control, we can return immediately\n     if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n       return app;\n     }\n     try {\n       checkAccess(app);\n       if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n         ApplicationAttemptReport appAttempt \u003d\n             getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n         if (appAttempt !\u003d null) {\n           app.appReport.setHost(appAttempt.getHost());\n           app.appReport.setRpcPort(appAttempt.getRpcPort());\n           app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n           app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n         }\n       }\n-    } catch (YarnException e) {\n-      // YarnExcetpion is thrown because the user doesn\u0027t have access\n+    } catch (AuthorizationException e) {\n+      // AuthorizationException is thrown because the user doesn\u0027t have access\n       app.appReport.setDiagnostics(null);\n       app.appReport.setCurrentApplicationAttemptId(null);\n     }\n     if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n       app.appReport.setCurrentApplicationAttemptId(\n           ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n     if (app.appReport.getHost() \u003d\u003d null) {\n       app.appReport.setHost(UNAVAILABLE);\n     }\n     if (app.appReport.getRpcPort() \u003c 0) {\n       app.appReport.setRpcPort(-1);\n     }\n     if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n       app.appReport.setTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n       app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n     }\n     if (app.appReport.getDiagnostics() \u003d\u003d null) {\n       app.appReport.setDiagnostics(\"\");\n     }\n     return app;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d\n            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n        if (appAttempt !\u003d null) {\n          app.appReport.setHost(appAttempt.getHost());\n          app.appReport.setRpcPort(appAttempt.getRpcPort());\n          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n        }\n      }\n    } catch (AuthorizationException e) {\n      // AuthorizationException is thrown because the user doesn\u0027t have access\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    if (app.appReport.getHost() \u003d\u003d null) {\n      app.appReport.setHost(UNAVAILABLE);\n    }\n    if (app.appReport.getRpcPort() \u003c 0) {\n      app.appReport.setRpcPort(-1);\n    }\n    if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n      app.appReport.setTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n      app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getDiagnostics() \u003d\u003d null) {\n      app.appReport.setDiagnostics(\"\");\n    }\n    return app;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "df3becf0800d24d1fe773651abb16d29f8bc3fdc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2598 GHS should show N/A instead of null for the inaccessible information  (Zhijie Shen via mayank)\n",
      "commitDate": "08/10/14 5:27 PM",
      "commitName": "df3becf0800d24d1fe773651abb16d29f8bc3fdc",
      "commitAuthor": "Mayank Bansal",
      "commitDateOld": "30/09/14 4:44 PM",
      "commitNameOld": "bbff96be48119774688981d04baf444639135977",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.03,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,46 @@\n   private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n     ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n     // If only user and acls are pulled to check attempt(s)/container(s) access\n     // control, we can return immediately\n     if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n       return app;\n     }\n     try {\n       checkAccess(app);\n       if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n         ApplicationAttemptReport appAttempt \u003d\n             getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n         if (appAttempt !\u003d null) {\n           app.appReport.setHost(appAttempt.getHost());\n           app.appReport.setRpcPort(appAttempt.getRpcPort());\n           app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n           app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n         }\n       }\n     } catch (YarnException e) {\n       // YarnExcetpion is thrown because the user doesn\u0027t have access\n       app.appReport.setDiagnostics(null);\n       app.appReport.setCurrentApplicationAttemptId(null);\n     }\n     if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n       app.appReport.setCurrentApplicationAttemptId(\n           ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n+    if (app.appReport.getHost() \u003d\u003d null) {\n+      app.appReport.setHost(UNAVAILABLE);\n+    }\n+    if (app.appReport.getRpcPort() \u003c 0) {\n+      app.appReport.setRpcPort(-1);\n+    }\n+    if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n+      app.appReport.setTrackingUrl(UNAVAILABLE);\n+    }\n+    if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n+      app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n+    }\n+    if (app.appReport.getDiagnostics() \u003d\u003d null) {\n+      app.appReport.setDiagnostics(\"\");\n+    }\n     return app;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d\n            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n        if (appAttempt !\u003d null) {\n          app.appReport.setHost(appAttempt.getHost());\n          app.appReport.setRpcPort(appAttempt.getRpcPort());\n          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n        }\n      }\n    } catch (YarnException e) {\n      // YarnExcetpion is thrown because the user doesn\u0027t have access\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    if (app.appReport.getHost() \u003d\u003d null) {\n      app.appReport.setHost(UNAVAILABLE);\n    }\n    if (app.appReport.getRpcPort() \u003c 0) {\n      app.appReport.setRpcPort(-1);\n    }\n    if (app.appReport.getTrackingUrl() \u003d\u003d null) {\n      app.appReport.setTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getOriginalTrackingUrl() \u003d\u003d null) {\n      app.appReport.setOriginalTrackingUrl(UNAVAILABLE);\n    }\n    if (app.appReport.getDiagnostics() \u003d\u003d null) {\n      app.appReport.setDiagnostics(\"\");\n    }\n    return app;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "90a0c03f0a696d32e871a5da4560828edea8cfa9": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1250. Generic history service should support application-acls. (Contributed by Zhijie Shen)\n",
      "commitDate": "16/09/14 6:20 PM",
      "commitName": "90a0c03f0a696d32e871a5da4560828edea8cfa9",
      "commitAuthor": "junping_du",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1250. Generic history service should support application-acls. (Contributed by Zhijie Shen)\n",
          "commitDate": "16/09/14 6:20 PM",
          "commitName": "90a0c03f0a696d32e871a5da4560828edea8cfa9",
          "commitAuthor": "junping_du",
          "commitDateOld": "11/09/14 7:04 PM",
          "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
          "commitAuthorOld": "junping_du",
          "daysBetweenCommits": 4.97,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,31 @@\n-  private ApplicationReport generateApplicationReport(TimelineEntity entity,\n+  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n-    ApplicationReport app \u003d convertToApplicationReport(entity, field);\n-    if (field \u003d\u003d ApplicationReportField.ALL \u0026\u0026\n-        app !\u003d null \u0026\u0026 app.getCurrentApplicationAttemptId() !\u003d null) {\n-      ApplicationAttemptReport appAttempt \u003d\n-          getApplicationAttempt(app.getCurrentApplicationAttemptId());\n-      if (appAttempt !\u003d null) {\n-        app.setHost(appAttempt.getHost());\n-        app.setRpcPort(appAttempt.getRpcPort());\n-        app.setTrackingUrl(appAttempt.getTrackingUrl());\n-        app.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n+    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n+    // If only user and acls are pulled to check attempt(s)/container(s) access\n+    // control, we can return immediately\n+    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n+      return app;\n+    }\n+    try {\n+      checkAccess(app);\n+      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n+        ApplicationAttemptReport appAttempt \u003d\n+            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n+        if (appAttempt !\u003d null) {\n+          app.appReport.setHost(appAttempt.getHost());\n+          app.appReport.setRpcPort(appAttempt.getRpcPort());\n+          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n+          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n+        }\n       }\n+    } catch (YarnException e) {\n+      // YarnExcetpion is thrown because the user doesn\u0027t have access\n+      app.appReport.setDiagnostics(null);\n+      app.appReport.setCurrentApplicationAttemptId(null);\n+    }\n+    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n+      app.appReport.setCurrentApplicationAttemptId(\n+          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n     return app;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d\n            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n        if (appAttempt !\u003d null) {\n          app.appReport.setHost(appAttempt.getHost());\n          app.appReport.setRpcPort(appAttempt.getRpcPort());\n          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n        }\n      }\n    } catch (YarnException e) {\n      // YarnExcetpion is thrown because the user doesn\u0027t have access\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    return app;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
          "extendedDetails": {
            "oldValue": "ApplicationReport",
            "newValue": "ApplicationReportExt"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1250. Generic history service should support application-acls. (Contributed by Zhijie Shen)\n",
          "commitDate": "16/09/14 6:20 PM",
          "commitName": "90a0c03f0a696d32e871a5da4560828edea8cfa9",
          "commitAuthor": "junping_du",
          "commitDateOld": "11/09/14 7:04 PM",
          "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
          "commitAuthorOld": "junping_du",
          "daysBetweenCommits": 4.97,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,31 @@\n-  private ApplicationReport generateApplicationReport(TimelineEntity entity,\n+  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n       ApplicationReportField field) throws YarnException, IOException {\n-    ApplicationReport app \u003d convertToApplicationReport(entity, field);\n-    if (field \u003d\u003d ApplicationReportField.ALL \u0026\u0026\n-        app !\u003d null \u0026\u0026 app.getCurrentApplicationAttemptId() !\u003d null) {\n-      ApplicationAttemptReport appAttempt \u003d\n-          getApplicationAttempt(app.getCurrentApplicationAttemptId());\n-      if (appAttempt !\u003d null) {\n-        app.setHost(appAttempt.getHost());\n-        app.setRpcPort(appAttempt.getRpcPort());\n-        app.setTrackingUrl(appAttempt.getTrackingUrl());\n-        app.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n+    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n+    // If only user and acls are pulled to check attempt(s)/container(s) access\n+    // control, we can return immediately\n+    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n+      return app;\n+    }\n+    try {\n+      checkAccess(app);\n+      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n+        ApplicationAttemptReport appAttempt \u003d\n+            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n+        if (appAttempt !\u003d null) {\n+          app.appReport.setHost(appAttempt.getHost());\n+          app.appReport.setRpcPort(appAttempt.getRpcPort());\n+          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n+          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n+        }\n       }\n+    } catch (YarnException e) {\n+      // YarnExcetpion is thrown because the user doesn\u0027t have access\n+      app.appReport.setDiagnostics(null);\n+      app.appReport.setCurrentApplicationAttemptId(null);\n+    }\n+    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n+      app.appReport.setCurrentApplicationAttemptId(\n+          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n     }\n     return app;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationReportExt generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReportExt app \u003d convertToApplicationReport(entity, field);\n    // If only user and acls are pulled to check attempt(s)/container(s) access\n    // control, we can return immediately\n    if (field \u003d\u003d ApplicationReportField.USER_AND_ACLS) {\n      return app;\n    }\n    try {\n      checkAccess(app);\n      if (app.appReport.getCurrentApplicationAttemptId() !\u003d null) {\n        ApplicationAttemptReport appAttempt \u003d\n            getApplicationAttempt(app.appReport.getCurrentApplicationAttemptId());\n        if (appAttempt !\u003d null) {\n          app.appReport.setHost(appAttempt.getHost());\n          app.appReport.setRpcPort(appAttempt.getRpcPort());\n          app.appReport.setTrackingUrl(appAttempt.getTrackingUrl());\n          app.appReport.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n        }\n      }\n    } catch (YarnException e) {\n      // YarnExcetpion is thrown because the user doesn\u0027t have access\n      app.appReport.setDiagnostics(null);\n      app.appReport.setCurrentApplicationAttemptId(null);\n    }\n    if (app.appReport.getCurrentApplicationAttemptId() \u003d\u003d null) {\n      app.appReport.setCurrentApplicationAttemptId(\n          ApplicationAttemptId.newInstance(app.appReport.getApplicationId(), -1));\n    }\n    return app;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "diff": "@@ -0,0 +1,16 @@\n+  private ApplicationReport generateApplicationReport(TimelineEntity entity,\n+      ApplicationReportField field) throws YarnException, IOException {\n+    ApplicationReport app \u003d convertToApplicationReport(entity, field);\n+    if (field \u003d\u003d ApplicationReportField.ALL \u0026\u0026\n+        app !\u003d null \u0026\u0026 app.getCurrentApplicationAttemptId() !\u003d null) {\n+      ApplicationAttemptReport appAttempt \u003d\n+          getApplicationAttempt(app.getCurrentApplicationAttemptId());\n+      if (appAttempt !\u003d null) {\n+        app.setHost(appAttempt.getHost());\n+        app.setRpcPort(appAttempt.getRpcPort());\n+        app.setTrackingUrl(appAttempt.getTrackingUrl());\n+        app.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n+      }\n+    }\n+    return app;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReport generateApplicationReport(TimelineEntity entity,\n      ApplicationReportField field) throws YarnException, IOException {\n    ApplicationReport app \u003d convertToApplicationReport(entity, field);\n    if (field \u003d\u003d ApplicationReportField.ALL \u0026\u0026\n        app !\u003d null \u0026\u0026 app.getCurrentApplicationAttemptId() !\u003d null) {\n      ApplicationAttemptReport appAttempt \u003d\n          getApplicationAttempt(app.getCurrentApplicationAttemptId());\n      if (appAttempt !\u003d null) {\n        app.setHost(appAttempt.getHost());\n        app.setRpcPort(appAttempt.getRpcPort());\n        app.setTrackingUrl(appAttempt.getTrackingUrl());\n        app.setOriginalTrackingUrl(appAttempt.getOriginalTrackingUrl());\n      }\n    }\n    return app;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java"
    }
  }
}