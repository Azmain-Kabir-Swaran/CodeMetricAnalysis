{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsHandlerImpl.java",
  "functionName": "initializeControllerPathsFromMtab",
  "functionId": "initializeControllerPathsFromMtab___parsedMtab-Map__String,Set__String____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
  "functionStartLine": 178,
  "functionEndLine": 192,
  "numCommitsSeen": 34,
  "timeTaken": 3669,
  "changeHistory": [
    "a2f680493f040704e2b85108e286731ee3860a52",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
    "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
    "838b06ac87339494cea706d4a97e7f5383bdc442"
  ],
  "changeHistoryShort": {
    "a2f680493f040704e2b85108e286731ee3860a52": "Ymultichange(Yparameterchange,Ybodychange)",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": "Ybodychange",
    "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "838b06ac87339494cea706d4a97e7f5383bdc442": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2f680493f040704e2b85108e286731ee3860a52": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "09/05/17 12:05 PM",
      "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,15 @@\n   static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n-      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n-    try {\n-      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n-      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n+      Map\u003cString, Set\u003cString\u003e\u003e parsedMtab)\n+      throws ResourceHandlerException {\n+    Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n-      for (CGroupController controller : CGroupController.values()) {\n-        String subsystemName \u003d controller.getName();\n-        String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n+    for (CGroupController controller : CGroupController.values()) {\n+      String subsystemName \u003d controller.getName();\n+      String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n \n-        if (controllerPath !\u003d null) {\n-          ret.put(controller, controllerPath);\n-        } else {\n-          LOG.warn(\"Controller not mounted but automount disabled: \" +\n-              subsystemName);\n-        }\n+      if (controllerPath !\u003d null) {\n+        ret.put(controller, controllerPath);\n       }\n-      return ret;\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n-      throw new ResourceHandlerException(\n-        \"Failed to initialize controller paths!\");\n     }\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      Map\u003cString, Set\u003cString\u003e\u003e parsedMtab)\n      throws ResourceHandlerException {\n    Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n    for (CGroupController controller : CGroupController.values()) {\n      String subsystemName \u003d controller.getName();\n      String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n\n      if (controllerPath !\u003d null) {\n        ret.put(controller, controllerPath);\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[mtab-String, cGroupPrefix-String]",
            "newValue": "[parsedMtab-Map\u003cString,Set\u003cString\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,15 @@\n   static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n-      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n-    try {\n-      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n-      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n+      Map\u003cString, Set\u003cString\u003e\u003e parsedMtab)\n+      throws ResourceHandlerException {\n+    Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n-      for (CGroupController controller : CGroupController.values()) {\n-        String subsystemName \u003d controller.getName();\n-        String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n+    for (CGroupController controller : CGroupController.values()) {\n+      String subsystemName \u003d controller.getName();\n+      String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n \n-        if (controllerPath !\u003d null) {\n-          ret.put(controller, controllerPath);\n-        } else {\n-          LOG.warn(\"Controller not mounted but automount disabled: \" +\n-              subsystemName);\n-        }\n+      if (controllerPath !\u003d null) {\n+        ret.put(controller, controllerPath);\n       }\n-      return ret;\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n-      throw new ResourceHandlerException(\n-        \"Failed to initialize controller paths!\");\n     }\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      Map\u003cString, Set\u003cString\u003e\u003e parsedMtab)\n      throws ResourceHandlerException {\n    Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n    for (CGroupController controller : CGroupController.values()) {\n      String subsystemName \u003d controller.getName();\n      String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n\n      if (controllerPath !\u003d null) {\n        ret.put(controller, controllerPath);\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "11/01/17 4:00 PM",
      "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "07/03/16 7:40 AM",
      "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 310.35,
      "commitsBetweenForRepo": 2164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,24 @@\n   static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n       String mtab, String cGroupPrefix) throws ResourceHandlerException {\n     try {\n       Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n       Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n       for (CGroupController controller : CGroupController.values()) {\n-        String name \u003d controller.getName();\n-        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n+        String subsystemName \u003d controller.getName();\n+        String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n \n         if (controllerPath !\u003d null) {\n-          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n-\n-          if (FileUtil.canWrite(f)) {\n-            ret.put(controller, controllerPath);\n-          } else {\n-            String error \u003d\n-                new StringBuffer(\"Mount point Based on mtab file: \")\n-                    .append(mtab)\n-                    .append(\". Controller mount point not writable for: \")\n-                    .append(name).toString();\n-\n-            LOG.error(error);\n-            throw new ResourceHandlerException(error);\n-          }\n+          ret.put(controller, controllerPath);\n         } else {\n-          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n+          LOG.warn(\"Controller not mounted but automount disabled: \" +\n+              subsystemName);\n         }\n       }\n       return ret;\n     } catch (IOException e) {\n       LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n       throw new ResourceHandlerException(\n         \"Failed to initialize controller paths!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n    try {\n      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n      for (CGroupController controller : CGroupController.values()) {\n        String subsystemName \u003d controller.getName();\n        String controllerPath \u003d findControllerInMtab(subsystemName, parsedMtab);\n\n        if (controllerPath !\u003d null) {\n          ret.put(controller, controllerPath);\n        } else {\n          LOG.warn(\"Controller not mounted but automount disabled: \" +\n              subsystemName);\n        }\n      }\n      return ret;\n    } catch (IOException e) {\n      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n      throw new ResourceHandlerException(\n        \"Failed to initialize controller paths!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
      "extendedDetails": {}
    },
    "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
      "commitDate": "30/04/15 9:41 PM",
      "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,36 @@\n-  private void initializeControllerPathsFromMtab()\n-      throws ResourceHandlerException {\n+  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n+      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n     try {\n-      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab();\n-\n-      //we want to do a bulk update without the paths changing concurrently\n-      rwLock.writeLock().lock();\n+      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n+      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n       for (CGroupController controller : CGroupController.values()) {\n         String name \u003d controller.getName();\n         String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n \n         if (controllerPath !\u003d null) {\n-          File f \u003d new File(controllerPath + \"/\" + this.cGroupPrefix);\n+          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n \n           if (FileUtil.canWrite(f)) {\n-            controllerPaths.put(controller, controllerPath);\n+            ret.put(controller, controllerPath);\n           } else {\n             String error \u003d\n                 new StringBuffer(\"Mount point Based on mtab file: \")\n-                    .append(MTAB_FILE).append(\n-                    \". Controller mount point not writable for: \")\n-                    .append(name).toString();\n+                  .append(mtab)\n+                  .append(\". Controller mount point not writable for: \")\n+                  .append(name).toString();\n \n             LOG.error(error);\n             throw new ResourceHandlerException(error);\n           }\n         } else {\n-\n-            LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n+          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n         }\n       }\n+      return ret;\n     } catch (IOException e) {\n       LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n       throw new ResourceHandlerException(\n-          \"Failed to initialize controller paths!\");\n-    } finally {\n-      rwLock.writeLock().unlock();\n+        \"Failed to initialize controller paths!\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n    try {\n      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n      for (CGroupController controller : CGroupController.values()) {\n        String name \u003d controller.getName();\n        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n\n        if (controllerPath !\u003d null) {\n          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n\n          if (FileUtil.canWrite(f)) {\n            ret.put(controller, controllerPath);\n          } else {\n            String error \u003d\n                new StringBuffer(\"Mount point Based on mtab file: \")\n                  .append(mtab)\n                  .append(\". Controller mount point not writable for: \")\n                  .append(name).toString();\n\n            LOG.error(error);\n            throw new ResourceHandlerException(error);\n          }\n        } else {\n          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n        }\n      }\n      return ret;\n    } catch (IOException e) {\n      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n      throw new ResourceHandlerException(\n        \"Failed to initialize controller paths!\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[mtab-String, cGroupPrefix-String]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,36 @@\n-  private void initializeControllerPathsFromMtab()\n-      throws ResourceHandlerException {\n+  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n+      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n     try {\n-      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab();\n-\n-      //we want to do a bulk update without the paths changing concurrently\n-      rwLock.writeLock().lock();\n+      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n+      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n       for (CGroupController controller : CGroupController.values()) {\n         String name \u003d controller.getName();\n         String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n \n         if (controllerPath !\u003d null) {\n-          File f \u003d new File(controllerPath + \"/\" + this.cGroupPrefix);\n+          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n \n           if (FileUtil.canWrite(f)) {\n-            controllerPaths.put(controller, controllerPath);\n+            ret.put(controller, controllerPath);\n           } else {\n             String error \u003d\n                 new StringBuffer(\"Mount point Based on mtab file: \")\n-                    .append(MTAB_FILE).append(\n-                    \". Controller mount point not writable for: \")\n-                    .append(name).toString();\n+                  .append(mtab)\n+                  .append(\". Controller mount point not writable for: \")\n+                  .append(name).toString();\n \n             LOG.error(error);\n             throw new ResourceHandlerException(error);\n           }\n         } else {\n-\n-            LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n+          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n         }\n       }\n+      return ret;\n     } catch (IOException e) {\n       LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n       throw new ResourceHandlerException(\n-          \"Failed to initialize controller paths!\");\n-    } finally {\n-      rwLock.writeLock().unlock();\n+        \"Failed to initialize controller paths!\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n    try {\n      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n      for (CGroupController controller : CGroupController.values()) {\n        String name \u003d controller.getName();\n        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n\n        if (controllerPath !\u003d null) {\n          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n\n          if (FileUtil.canWrite(f)) {\n            ret.put(controller, controllerPath);\n          } else {\n            String error \u003d\n                new StringBuffer(\"Mount point Based on mtab file: \")\n                  .append(mtab)\n                  .append(\". Controller mount point not writable for: \")\n                  .append(name).toString();\n\n            LOG.error(error);\n            throw new ResourceHandlerException(error);\n          }\n        } else {\n          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n        }\n      }\n      return ret;\n    } catch (IOException e) {\n      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n      throw new ResourceHandlerException(\n        \"Failed to initialize controller paths!\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Map\u003cCGroupController,String\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,36 @@\n-  private void initializeControllerPathsFromMtab()\n-      throws ResourceHandlerException {\n+  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n+      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n     try {\n-      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab();\n-\n-      //we want to do a bulk update without the paths changing concurrently\n-      rwLock.writeLock().lock();\n+      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n+      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n       for (CGroupController controller : CGroupController.values()) {\n         String name \u003d controller.getName();\n         String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n \n         if (controllerPath !\u003d null) {\n-          File f \u003d new File(controllerPath + \"/\" + this.cGroupPrefix);\n+          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n \n           if (FileUtil.canWrite(f)) {\n-            controllerPaths.put(controller, controllerPath);\n+            ret.put(controller, controllerPath);\n           } else {\n             String error \u003d\n                 new StringBuffer(\"Mount point Based on mtab file: \")\n-                    .append(MTAB_FILE).append(\n-                    \". Controller mount point not writable for: \")\n-                    .append(name).toString();\n+                  .append(mtab)\n+                  .append(\". Controller mount point not writable for: \")\n+                  .append(name).toString();\n \n             LOG.error(error);\n             throw new ResourceHandlerException(error);\n           }\n         } else {\n-\n-            LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n+          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n         }\n       }\n+      return ret;\n     } catch (IOException e) {\n       LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n       throw new ResourceHandlerException(\n-          \"Failed to initialize controller paths!\");\n-    } finally {\n-      rwLock.writeLock().unlock();\n+        \"Failed to initialize controller paths!\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n    try {\n      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n      for (CGroupController controller : CGroupController.values()) {\n        String name \u003d controller.getName();\n        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n\n        if (controllerPath !\u003d null) {\n          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n\n          if (FileUtil.canWrite(f)) {\n            ret.put(controller, controllerPath);\n          } else {\n            String error \u003d\n                new StringBuffer(\"Mount point Based on mtab file: \")\n                  .append(mtab)\n                  .append(\". Controller mount point not writable for: \")\n                  .append(name).toString();\n\n            LOG.error(error);\n            throw new ResourceHandlerException(error);\n          }\n        } else {\n          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n        }\n      }\n      return ret;\n    } catch (IOException e) {\n      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n      throw new ResourceHandlerException(\n        \"Failed to initialize controller paths!\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2619. Added NodeManager support for disk io isolation through cgroups. Contributed by Varun Vasudev and Wei Yan.\n",
          "commitDate": "30/04/15 9:41 PM",
          "commitName": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "13/04/15 6:35 PM",
          "commitNameOld": "838b06ac87339494cea706d4a97e7f5383bdc442",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 17.13,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,36 @@\n-  private void initializeControllerPathsFromMtab()\n-      throws ResourceHandlerException {\n+  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n+      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n     try {\n-      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab();\n-\n-      //we want to do a bulk update without the paths changing concurrently\n-      rwLock.writeLock().lock();\n+      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n+      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n \n       for (CGroupController controller : CGroupController.values()) {\n         String name \u003d controller.getName();\n         String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n \n         if (controllerPath !\u003d null) {\n-          File f \u003d new File(controllerPath + \"/\" + this.cGroupPrefix);\n+          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n \n           if (FileUtil.canWrite(f)) {\n-            controllerPaths.put(controller, controllerPath);\n+            ret.put(controller, controllerPath);\n           } else {\n             String error \u003d\n                 new StringBuffer(\"Mount point Based on mtab file: \")\n-                    .append(MTAB_FILE).append(\n-                    \". Controller mount point not writable for: \")\n-                    .append(name).toString();\n+                  .append(mtab)\n+                  .append(\". Controller mount point not writable for: \")\n+                  .append(name).toString();\n \n             LOG.error(error);\n             throw new ResourceHandlerException(error);\n           }\n         } else {\n-\n-            LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n+          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n         }\n       }\n+      return ret;\n     } catch (IOException e) {\n       LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n       throw new ResourceHandlerException(\n-          \"Failed to initialize controller paths!\");\n-    } finally {\n-      rwLock.writeLock().unlock();\n+        \"Failed to initialize controller paths!\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static Map\u003cCGroupController, String\u003e initializeControllerPathsFromMtab(\n      String mtab, String cGroupPrefix) throws ResourceHandlerException {\n    try {\n      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab(mtab);\n      Map\u003cCGroupController, String\u003e ret \u003d new HashMap\u003c\u003e();\n\n      for (CGroupController controller : CGroupController.values()) {\n        String name \u003d controller.getName();\n        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n\n        if (controllerPath !\u003d null) {\n          File f \u003d new File(controllerPath + \"/\" + cGroupPrefix);\n\n          if (FileUtil.canWrite(f)) {\n            ret.put(controller, controllerPath);\n          } else {\n            String error \u003d\n                new StringBuffer(\"Mount point Based on mtab file: \")\n                  .append(mtab)\n                  .append(\". Controller mount point not writable for: \")\n                  .append(name).toString();\n\n            LOG.error(error);\n            throw new ResourceHandlerException(error);\n          }\n        } else {\n          LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n        }\n      }\n      return ret;\n    } catch (IOException e) {\n      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n      throw new ResourceHandlerException(\n        \"Failed to initialize controller paths!\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "838b06ac87339494cea706d4a97e7f5383bdc442": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3443. Create a \u0027ResourceHandler\u0027 subsystem to ease addition of support for new resource types on the NM. Contributed by Sidharta Seethana.\n",
      "commitDate": "13/04/15 6:35 PM",
      "commitName": "838b06ac87339494cea706d4a97e7f5383bdc442",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,40 @@\n+  private void initializeControllerPathsFromMtab()\n+      throws ResourceHandlerException {\n+    try {\n+      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab();\n+\n+      //we want to do a bulk update without the paths changing concurrently\n+      rwLock.writeLock().lock();\n+\n+      for (CGroupController controller : CGroupController.values()) {\n+        String name \u003d controller.getName();\n+        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n+\n+        if (controllerPath !\u003d null) {\n+          File f \u003d new File(controllerPath + \"/\" + this.cGroupPrefix);\n+\n+          if (FileUtil.canWrite(f)) {\n+            controllerPaths.put(controller, controllerPath);\n+          } else {\n+            String error \u003d\n+                new StringBuffer(\"Mount point Based on mtab file: \")\n+                    .append(MTAB_FILE).append(\n+                    \". Controller mount point not writable for: \")\n+                    .append(name).toString();\n+\n+            LOG.error(error);\n+            throw new ResourceHandlerException(error);\n+          }\n+        } else {\n+\n+            LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n+      throw new ResourceHandlerException(\n+          \"Failed to initialize controller paths!\");\n+    } finally {\n+      rwLock.writeLock().unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeControllerPathsFromMtab()\n      throws ResourceHandlerException {\n    try {\n      Map\u003cString, List\u003cString\u003e\u003e parsedMtab \u003d parseMtab();\n\n      //we want to do a bulk update without the paths changing concurrently\n      rwLock.writeLock().lock();\n\n      for (CGroupController controller : CGroupController.values()) {\n        String name \u003d controller.getName();\n        String controllerPath \u003d findControllerInMtab(name, parsedMtab);\n\n        if (controllerPath !\u003d null) {\n          File f \u003d new File(controllerPath + \"/\" + this.cGroupPrefix);\n\n          if (FileUtil.canWrite(f)) {\n            controllerPaths.put(controller, controllerPath);\n          } else {\n            String error \u003d\n                new StringBuffer(\"Mount point Based on mtab file: \")\n                    .append(MTAB_FILE).append(\n                    \". Controller mount point not writable for: \")\n                    .append(name).toString();\n\n            LOG.error(error);\n            throw new ResourceHandlerException(error);\n          }\n        } else {\n\n            LOG.warn(\"Controller not mounted but automount disabled: \" + name);\n        }\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Failed to initialize controller paths! Exception: \" + e);\n      throw new ResourceHandlerException(\n          \"Failed to initialize controller paths!\");\n    } finally {\n      rwLock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsHandlerImpl.java"
    }
  }
}