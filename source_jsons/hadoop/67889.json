{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistCpSync.java",
  "functionName": "preSyncCheck",
  "functionId": "preSyncCheck",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
  "functionStartLine": 82,
  "functionEndLine": 149,
  "numCommitsSeen": 15,
  "timeTaken": 4512,
  "changeHistory": [
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
    "959a28dd1216dfac78d05b438828e8503108d963",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
    "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
    "75cb1d42abec54ef5484636e020949ceebe189e9",
    "ed70fa142cabdbc1065e4dbbc95e99c8850c4751"
  ],
  "changeHistoryShort": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ybodychange",
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": "Ybodychange",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": "Ybodychange",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": "Ybodychange",
    "959a28dd1216dfac78d05b438828e8503108d963": "Ybodychange",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "4c097e473bb1f18d1510deb61bae2bcb8c156f18": "Ybodychange",
    "75cb1d42abec54ef5484636e020949ceebe189e9": "Ybodychange",
    "ed70fa142cabdbc1065e4dbbc95e99c8850c4751": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 136.34,
      "commitsBetweenForRepo": 740,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,68 @@\n   private boolean preSyncCheck() throws IOException {\n-    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    List\u003cPath\u003e sourcePaths \u003d context.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n-    final Path targetDir \u003d inputOptions.getTargetPath();\n+    final Path targetDir \u003d context.getTargetPath();\n \n     final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n     final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n     final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n \n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(srcFs instanceof DistributedFileSystem) ||\n         !(tgtFs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n \n     final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n-          inputOptions.getToSnapshot())));\n+      context.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n+          context.getToSnapshot())));\n       return false;\n     }\n \n-    final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n-    final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n+    final String from \u003d getSnapshotName(\n+        context.getFromSnapshot());\n+    final String to \u003d getSnapshotName(\n+        context.getToSnapshot());\n \n     try {\n       final FileStatus fromSnapshotStat \u003d\n           snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n \n       final FileStatus toSnapshotStat \u003d\n           snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n \n       if (isRdiff()) {\n         // If fromSnapshot isn\u0027t current dir then do a time check\n         if (!from.equals(\"\")\n             \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n             .getModificationTime()) {\n           throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n               + \" should be newer than \" + to);\n         }\n       } else {\n         // If toSnapshot isn\u0027t current dir then do a time check\n         if(!to.equals(\"\")\n             \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n             .getModificationTime()) {\n           throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n               + \" should be newer than \" + from);\n         }\n       }\n     } catch (FileNotFoundException nfe) {\n       throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d context.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d context.getTargetPath();\n\n    final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n    final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n    final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(srcFs instanceof DistributedFileSystem) ||\n        !(tgtFs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      context.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n          context.getToSnapshot())));\n      return false;\n    }\n\n    final String from \u003d getSnapshotName(\n        context.getFromSnapshot());\n    final String to \u003d getSnapshotName(\n        context.getToSnapshot());\n\n    try {\n      final FileStatus fromSnapshotStat \u003d\n          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n\n      final FileStatus toSnapshotStat \u003d\n          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n\n      if (isRdiff()) {\n        // If fromSnapshot isn\u0027t current dir then do a time check\n        if (!from.equals(\"\")\n            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n            .getModificationTime()) {\n          throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n              + \" should be newer than \" + to);\n        }\n      } else {\n        // If toSnapshot isn\u0027t current dir then do a time check\n        if(!to.equals(\"\")\n            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n            .getModificationTime()) {\n          throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n              + \" should be newer than \" + from);\n        }\n      }\n    } catch (FileNotFoundException nfe) {\n      throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n    }\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "19/10/16 5:37 PM",
      "commitName": "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/10/16 10:47 PM",
      "commitNameOld": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,66 @@\n   private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n-    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n-    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n+    final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n+    final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n+    final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n+    final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n+\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n-    if (!(sfs instanceof DistributedFileSystem) ||\n-        !(tfs instanceof DistributedFileSystem)) {\n+    if (!(srcFs instanceof DistributedFileSystem) ||\n+        !(tgtFs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n+\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n+      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n \n     final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n     final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n \n     try {\n       final FileStatus fromSnapshotStat \u003d\n-          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));\n+          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n \n       final FileStatus toSnapshotStat \u003d\n-          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));\n+          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n \n-      // If toSnapshot isn\u0027t current dir then do a time check\n-      if (!to.equals(\"\")\n-          \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n-              .getModificationTime()) {\n-        throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n-            + \" should be newer than \" + from);\n+      if (isRdiff()) {\n+        // If fromSnapshot isn\u0027t current dir then do a time check\n+        if (!from.equals(\"\")\n+            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n+            .getModificationTime()) {\n+          throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n+              + \" should be newer than \" + to);\n+        }\n+      } else {\n+        // If toSnapshot isn\u0027t current dir then do a time check\n+        if(!to.equals(\"\")\n+            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n+            .getModificationTime()) {\n+          throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n+              + \" should be newer than \" + from);\n+        }\n       }\n     } catch (FileNotFoundException nfe) {\n       throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n    final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n    final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(srcFs instanceof DistributedFileSystem) ||\n        !(tgtFs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n\n    final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n    final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n\n    try {\n      final FileStatus fromSnapshotStat \u003d\n          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n\n      final FileStatus toSnapshotStat \u003d\n          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n\n      if (isRdiff()) {\n        // If fromSnapshot isn\u0027t current dir then do a time check\n        if (!from.equals(\"\")\n            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n            .getModificationTime()) {\n          throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n              + \" should be newer than \" + to);\n        }\n      } else {\n        // If toSnapshot isn\u0027t current dir then do a time check\n        if(!to.equals(\"\")\n            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n            .getModificationTime()) {\n          throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n              + \" should be newer than \" + from);\n        }\n      }\n    } catch (FileNotFoundException nfe) {\n      throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n    }\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\"\n\nThis reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.\n",
      "commitDate": "17/10/16 10:47 PM",
      "commitName": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/10/16 11:04 AM",
      "commitNameOld": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,52 @@\n   private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n-    final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n-    final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n-    final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n-    final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n-\n+    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n+    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n-    if (!(srcFs instanceof DistributedFileSystem) ||\n-        !(tgtFs instanceof DistributedFileSystem)) {\n+    if (!(sfs instanceof DistributedFileSystem) ||\n+        !(tfs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-\n-    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n+      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n \n     final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n     final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n \n     try {\n       final FileStatus fromSnapshotStat \u003d\n-          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n+          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));\n \n       final FileStatus toSnapshotStat \u003d\n-          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n+          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));\n \n-      if (isRdiff()) {\n-        // If fromSnapshot isn\u0027t current dir then do a time check\n-        if (!from.equals(\"\")\n-            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n-            .getModificationTime()) {\n-          throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n-              + \" should be newer than \" + to);\n-        }\n-      } else {\n-        // If toSnapshot isn\u0027t current dir then do a time check\n-        if(!to.equals(\"\")\n-            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n-            .getModificationTime()) {\n-          throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n-              + \" should be newer than \" + from);\n-        }\n+      // If toSnapshot isn\u0027t current dir then do a time check\n+      if (!to.equals(\"\")\n+          \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n+              .getModificationTime()) {\n+        throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n+            + \" should be newer than \" + from);\n       }\n     } catch (FileNotFoundException nfe) {\n       throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n\n    final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n    final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n\n    try {\n      final FileStatus fromSnapshotStat \u003d\n          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));\n\n      final FileStatus toSnapshotStat \u003d\n          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));\n\n      // If toSnapshot isn\u0027t current dir then do a time check\n      if (!to.equals(\"\")\n          \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n              .getModificationTime()) {\n        throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n            + \" should be newer than \" + from);\n      }\n    } catch (FileNotFoundException nfe) {\n      throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n    }\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "17/10/16 11:04 AM",
      "commitName": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "26/04/16 4:08 PM",
      "commitNameOld": "959a28dd1216dfac78d05b438828e8503108d963",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 173.79,
      "commitsBetweenForRepo": 1276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,66 @@\n   private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n-    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n-    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n+    final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n+    final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n+    final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n+    final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n+\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n-    if (!(sfs instanceof DistributedFileSystem) ||\n-        !(tfs instanceof DistributedFileSystem)) {\n+    if (!(srcFs instanceof DistributedFileSystem) ||\n+        !(tgtFs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n+\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n+      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n \n     final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n     final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n \n     try {\n       final FileStatus fromSnapshotStat \u003d\n-          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));\n+          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n \n       final FileStatus toSnapshotStat \u003d\n-          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));\n+          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n \n-      // If toSnapshot isn\u0027t current dir then do a time check\n-      if (!to.equals(\"\")\n-          \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n-              .getModificationTime()) {\n-        throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n-            + \" should be newer than \" + from);\n+      if (isRdiff()) {\n+        // If fromSnapshot isn\u0027t current dir then do a time check\n+        if (!from.equals(\"\")\n+            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n+            .getModificationTime()) {\n+          throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n+              + \" should be newer than \" + to);\n+        }\n+      } else {\n+        // If toSnapshot isn\u0027t current dir then do a time check\n+        if(!to.equals(\"\")\n+            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n+            .getModificationTime()) {\n+          throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n+              + \" should be newer than \" + from);\n+        }\n       }\n     } catch (FileNotFoundException nfe) {\n       throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem srcFs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tgtFs \u003d targetDir.getFileSystem(conf);\n    final FileSystem snapshotDiffFs \u003d isRdiff() ? tgtFs : srcFs;\n    final Path snapshotDiffDir \u003d isRdiff() ? targetDir : sourceDir;\n\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(srcFs instanceof DistributedFileSystem) ||\n        !(tgtFs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tgtFs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n\n    final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n    final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n\n    try {\n      final FileStatus fromSnapshotStat \u003d\n          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, from));\n\n      final FileStatus toSnapshotStat \u003d\n          snapshotDiffFs.getFileStatus(getSnapshotPath(snapshotDiffDir, to));\n\n      if (isRdiff()) {\n        // If fromSnapshot isn\u0027t current dir then do a time check\n        if (!from.equals(\"\")\n            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003c toSnapshotStat\n            .getModificationTime()) {\n          throw new HadoopIllegalArgumentException(\"Snapshot \" + from\n              + \" should be newer than \" + to);\n        }\n      } else {\n        // If toSnapshot isn\u0027t current dir then do a time check\n        if(!to.equals(\"\")\n            \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n            .getModificationTime()) {\n          throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n              + \" should be newer than \" + from);\n        }\n      }\n    } catch (FileNotFoundException nfe) {\n      throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n    }\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "959a28dd1216dfac78d05b438828e8503108d963": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10313. Distcp need to enforce the order of snapshot names passed to -diff. (Lin Yiqun via Yongjun Zhang)\n",
      "commitDate": "26/04/16 4:08 PM",
      "commitName": "959a28dd1216dfac78d05b438828e8503108d963",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "13/10/15 3:24 PM",
      "commitNameOld": "da8441d0fe9149bb845dcf701fdc86e786b6afba",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 196.03,
      "commitsBetweenForRepo": 1290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,52 @@\n   private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n     final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n       inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n+\n+    final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n+    final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n+\n+    try {\n+      final FileStatus fromSnapshotStat \u003d\n+          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));\n+\n+      final FileStatus toSnapshotStat \u003d\n+          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));\n+\n+      // If toSnapshot isn\u0027t current dir then do a time check\n+      if (!to.equals(\"\")\n+          \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n+              .getModificationTime()) {\n+        throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n+            + \" should be newer than \" + from);\n+      }\n+    } catch (FileNotFoundException nfe) {\n+      throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n+    }\n+\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n\n    final String from \u003d getSnapshotName(inputOptions.getFromSnapshot());\n    final String to \u003d getSnapshotName(inputOptions.getToSnapshot());\n\n    try {\n      final FileStatus fromSnapshotStat \u003d\n          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, from));\n\n      final FileStatus toSnapshotStat \u003d\n          sfs.getFileStatus(getSourceSnapshotPath(sourceDir, to));\n\n      // If toSnapshot isn\u0027t current dir then do a time check\n      if (!to.equals(\"\")\n          \u0026\u0026 fromSnapshotStat.getModificationTime() \u003e toSnapshotStat\n              .getModificationTime()) {\n        throw new HadoopIllegalArgumentException(\"Snapshot \" + to\n            + \" should be newer than \" + from);\n      }\n    } catch (FileNotFoundException nfe) {\n      throw new InvalidInputException(\"Input snapshot is not found\", nfe);\n    }\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,30 @@\n-  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n-      throws IOException {\n+  private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n-    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n-    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n+    if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n       inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n-\n-    Path tmpDir \u003d null;\n-    try {\n-      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n-      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n-      if (diffs \u003d\u003d null) {\n-        return false;\n-      }\n-      // do the real sync work: deletion and rename\n-      syncDiff(diffs, targetFs, tmpDir);\n-      return true;\n-    } catch (Exception e) {\n-      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n-      return false;\n-    } finally {\n-      deleteTargetTmpDir(targetFs, tmpDir);\n-      // TODO: since we have tmp directory, we can support \"undo\" with failures\n-      // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n-          inputOptions.getToSnapshot())));\n-    }\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "sync",
            "newValue": "preSyncCheck"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,30 @@\n-  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n-      throws IOException {\n+  private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n-    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n-    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n+    if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n       inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n-\n-    Path tmpDir \u003d null;\n-    try {\n-      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n-      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n-      if (diffs \u003d\u003d null) {\n-        return false;\n-      }\n-      // do the real sync work: deletion and rename\n-      syncDiff(diffs, targetFs, tmpDir);\n-      return true;\n-    } catch (Exception e) {\n-      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n-      return false;\n-    } finally {\n-      deleteTargetTmpDir(targetFs, tmpDir);\n-      // TODO: since we have tmp directory, we can support \"undo\" with failures\n-      // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n-          inputOptions.getToSnapshot())));\n-    }\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "[inputOptions-DistCpOptions, conf-Configuration]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,30 @@\n-  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n-      throws IOException {\n+  private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n-    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n-    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n+    if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n       inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n-\n-    Path tmpDir \u003d null;\n-    try {\n-      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n-      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n-      if (diffs \u003d\u003d null) {\n-        return false;\n-      }\n-      // do the real sync work: deletion and rename\n-      syncDiff(diffs, targetFs, tmpDir);\n-      return true;\n-    } catch (Exception e) {\n-      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n-      return false;\n-    } finally {\n-      deleteTargetTmpDir(targetFs, tmpDir);\n-      // TODO: since we have tmp directory, we can support \"undo\" with failures\n-      // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n-          inputOptions.getToSnapshot())));\n-    }\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
          "commitDate": "20/08/15 8:02 AM",
          "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "15/04/15 12:37 PM",
          "commitNameOld": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 126.81,
          "commitsBetweenForRepo": 958,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,30 @@\n-  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n-      throws IOException {\n+  private boolean preSyncCheck() throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       throw new IllegalArgumentException(sourcePaths.size()\n           + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n       throw new IllegalArgumentException(\"The FileSystems needs to\" +\n           \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n-    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n-    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n+    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n-    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n+    if (!checkNoChange(targetFs, targetDir)) {\n       // set the source path using the snapshot path\n       inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n       return false;\n     }\n-\n-    Path tmpDir \u003d null;\n-    try {\n-      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n-      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n-      if (diffs \u003d\u003d null) {\n-        return false;\n-      }\n-      // do the real sync work: deletion and rename\n-      syncDiff(diffs, targetFs, tmpDir);\n-      return true;\n-    } catch (Exception e) {\n-      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n-      return false;\n-    } finally {\n-      deleteTargetTmpDir(targetFs, tmpDir);\n-      // TODO: since we have tmp directory, we can support \"undo\" with failures\n-      // set the source path using the snapshot path\n-      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n-          inputOptions.getToSnapshot())));\n-    }\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preSyncCheck() throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem targetFs \u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c097e473bb1f18d1510deb61bae2bcb8c156f18": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8151. Always use snapshot path as source when invalid snapshot names are used for diff based distcp. Contributed by Jing Zhao.\n",
      "commitDate": "15/04/15 12:37 PM",
      "commitName": "4c097e473bb1f18d1510deb61bae2bcb8c156f18",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "01/04/15 4:50 PM",
      "commitNameOld": "75cb1d42abec54ef5484636e020949ceebe189e9",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 13.82,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n   static boolean sync(DistCpOptions inputOptions, Configuration conf)\n       throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n-      DistCp.LOG.warn(sourcePaths.size() + \" source paths are provided\");\n-      return false;\n+      throw new IllegalArgumentException(sourcePaths.size()\n+          + \" source paths are provided\");\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n-      DistCp.LOG.warn(\"To use diff-based distcp, the FileSystems needs to\" +\n-          \" be DistributedFileSystem\");\n-      return false;\n+      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n+          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n     }\n     final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n     final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n+      // set the source path using the snapshot path\n+      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n+          inputOptions.getToSnapshot())));\n       return false;\n     }\n \n     Path tmpDir \u003d null;\n     try {\n       tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n       DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n       if (diffs \u003d\u003d null) {\n         return false;\n       }\n       // do the real sync work: deletion and rename\n       syncDiff(diffs, targetFs, tmpDir);\n       return true;\n     } catch (Exception e) {\n       DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n       return false;\n     } finally {\n       deleteTargetTmpDir(targetFs, tmpDir);\n       // TODO: since we have tmp directory, we can support \"undo\" with failures\n       // set the source path using the snapshot path\n       inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n           inputOptions.getToSnapshot())));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n      throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      throw new IllegalArgumentException(sourcePaths.size()\n          + \" source paths are provided\");\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      throw new IllegalArgumentException(\"The FileSystems needs to\" +\n          \" be DistributedFileSystem for using snapshot-diff-based distcp\");\n    }\n    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n      return false;\n    }\n\n    Path tmpDir \u003d null;\n    try {\n      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n      if (diffs \u003d\u003d null) {\n        return false;\n      }\n      // do the real sync work: deletion and rename\n      syncDiff(diffs, targetFs, tmpDir);\n      return true;\n    } catch (Exception e) {\n      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n      return false;\n    } finally {\n      deleteTargetTmpDir(targetFs, tmpDir);\n      // TODO: since we have tmp directory, we can support \"undo\" with failures\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "75cb1d42abec54ef5484636e020949ceebe189e9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8036. Use snapshot path as source when using snapshot diff report in DistCp. Contributed by Jing Zhao.\n",
      "commitDate": "01/04/15 4:50 PM",
      "commitName": "75cb1d42abec54ef5484636e020949ceebe189e9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "04/03/15 10:30 AM",
      "commitNameOld": "ed70fa142cabdbc1065e4dbbc95e99c8850c4751",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 28.22,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   static boolean sync(DistCpOptions inputOptions, Configuration conf)\n       throws IOException {\n     List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n     if (sourcePaths.size() !\u003d 1) {\n       // we only support one source dir which must be a snapshottable directory\n       DistCp.LOG.warn(sourcePaths.size() + \" source paths are provided\");\n       return false;\n     }\n     final Path sourceDir \u003d sourcePaths.get(0);\n     final Path targetDir \u003d inputOptions.getTargetPath();\n \n     final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n     final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n     // currently we require both the source and the target file system are\n     // DistributedFileSystem.\n     if (!(sfs instanceof DistributedFileSystem) ||\n         !(tfs instanceof DistributedFileSystem)) {\n       DistCp.LOG.warn(\"To use diff-based distcp, the FileSystems needs to\" +\n           \" be DistributedFileSystem\");\n       return false;\n     }\n     final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n     final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n \n     // make sure targetFS has no change between from and the current states\n     if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n       return false;\n     }\n \n     Path tmpDir \u003d null;\n     try {\n       tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n       DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n       if (diffs \u003d\u003d null) {\n         return false;\n       }\n       // do the real sync work: deletion and rename\n       syncDiff(diffs, targetFs, tmpDir);\n       return true;\n     } catch (Exception e) {\n       DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n       return false;\n     } finally {\n       deleteTargetTmpDir(targetFs, tmpDir);\n       // TODO: since we have tmp directory, we can support \"undo\" with failures\n+      // set the source path using the snapshot path\n+      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n+          inputOptions.getToSnapshot())));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n      throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      DistCp.LOG.warn(sourcePaths.size() + \" source paths are provided\");\n      return false;\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      DistCp.LOG.warn(\"To use diff-based distcp, the FileSystems needs to\" +\n          \" be DistributedFileSystem\");\n      return false;\n    }\n    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n      return false;\n    }\n\n    Path tmpDir \u003d null;\n    try {\n      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n      if (diffs \u003d\u003d null) {\n        return false;\n      }\n      // do the real sync work: deletion and rename\n      syncDiff(diffs, targetFs, tmpDir);\n      return true;\n    } catch (Exception e) {\n      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n      return false;\n    } finally {\n      deleteTargetTmpDir(targetFs, tmpDir);\n      // TODO: since we have tmp directory, we can support \"undo\" with failures\n      // set the source path using the snapshot path\n      inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,\n          inputOptions.getToSnapshot())));\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
      "extendedDetails": {}
    },
    "ed70fa142cabdbc1065e4dbbc95e99c8850c4751": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7535. Utilize Snapshot diff report for distcp. Contributed by Jing Zhao.\n",
      "commitDate": "04/03/15 10:30 AM",
      "commitName": "ed70fa142cabdbc1065e4dbbc95e99c8850c4751",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,47 @@\n+  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n+      throws IOException {\n+    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n+    if (sourcePaths.size() !\u003d 1) {\n+      // we only support one source dir which must be a snapshottable directory\n+      DistCp.LOG.warn(sourcePaths.size() + \" source paths are provided\");\n+      return false;\n+    }\n+    final Path sourceDir \u003d sourcePaths.get(0);\n+    final Path targetDir \u003d inputOptions.getTargetPath();\n+\n+    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n+    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n+    // currently we require both the source and the target file system are\n+    // DistributedFileSystem.\n+    if (!(sfs instanceof DistributedFileSystem) ||\n+        !(tfs instanceof DistributedFileSystem)) {\n+      DistCp.LOG.warn(\"To use diff-based distcp, the FileSystems needs to\" +\n+          \" be DistributedFileSystem\");\n+      return false;\n+    }\n+    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n+    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n+\n+    // make sure targetFS has no change between from and the current states\n+    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n+      return false;\n+    }\n+\n+    Path tmpDir \u003d null;\n+    try {\n+      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n+      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n+      if (diffs \u003d\u003d null) {\n+        return false;\n+      }\n+      // do the real sync work: deletion and rename\n+      syncDiff(diffs, targetFs, tmpDir);\n+      return true;\n+    } catch (Exception e) {\n+      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n+      return false;\n+    } finally {\n+      deleteTargetTmpDir(targetFs, tmpDir);\n+      // TODO: since we have tmp directory, we can support \"undo\" with failures\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean sync(DistCpOptions inputOptions, Configuration conf)\n      throws IOException {\n    List\u003cPath\u003e sourcePaths \u003d inputOptions.getSourcePaths();\n    if (sourcePaths.size() !\u003d 1) {\n      // we only support one source dir which must be a snapshottable directory\n      DistCp.LOG.warn(sourcePaths.size() + \" source paths are provided\");\n      return false;\n    }\n    final Path sourceDir \u003d sourcePaths.get(0);\n    final Path targetDir \u003d inputOptions.getTargetPath();\n\n    final FileSystem sfs \u003d sourceDir.getFileSystem(conf);\n    final FileSystem tfs \u003d targetDir.getFileSystem(conf);\n    // currently we require both the source and the target file system are\n    // DistributedFileSystem.\n    if (!(sfs instanceof DistributedFileSystem) ||\n        !(tfs instanceof DistributedFileSystem)) {\n      DistCp.LOG.warn(\"To use diff-based distcp, the FileSystems needs to\" +\n          \" be DistributedFileSystem\");\n      return false;\n    }\n    final DistributedFileSystem sourceFs \u003d (DistributedFileSystem) sfs;\n    final DistributedFileSystem targetFs\u003d (DistributedFileSystem) tfs;\n\n    // make sure targetFS has no change between from and the current states\n    if (!checkNoChange(inputOptions, targetFs, targetDir)) {\n      return false;\n    }\n\n    Path tmpDir \u003d null;\n    try {\n      tmpDir \u003d createTargetTmpDir(targetFs, targetDir);\n      DiffInfo[] diffs \u003d getDiffs(inputOptions, sourceFs, sourceDir, targetDir);\n      if (diffs \u003d\u003d null) {\n        return false;\n      }\n      // do the real sync work: deletion and rename\n      syncDiff(diffs, targetFs, tmpDir);\n      return true;\n    } catch (Exception e) {\n      DistCp.LOG.warn(\"Failed to use snapshot diff for distcp\", e);\n      return false;\n    } finally {\n      deleteTargetTmpDir(targetFs, tmpDir);\n      // TODO: since we have tmp directory, we can support \"undo\" with failures\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java"
    }
  }
}