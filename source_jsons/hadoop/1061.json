{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitCache.java",
  "functionName": "create",
  "functionId": "create___key-ExtendedBlockId__creator-ShortCircuitReplicaCreator__newWaitable-Waitable__ShortCircuitReplicaInfo__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
  "functionStartLine": 779,
  "functionEndLine": 817,
  "numCommitsSeen": 33,
  "timeTaken": 4390,
  "changeHistory": [
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "26d3b7e6ae867596bbced0bfddde22d3c0d976bb",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "f0d64a078da7e932b9509734f75170e3e525e68c",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036"
  ],
  "changeHistoryShort": {
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Yfilerename",
    "26d3b7e6ae867596bbced0bfddde22d3c0d976bb": "Ybodychange",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "f0d64a078da7e932b9509734f75170e3e525e68c": "Yparameterchange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Ymultichange(Ymovefromfile,Yreturntypechange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,39 @@\n   private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator,\n       Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n     // Handle loading a new replica.\n     ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      if (LOG.isTraceEnabled()) {\n-        LOG.trace(this + \": loading \" + key);\n-      }\n+      LOG.trace(\"{}: loading {}\", this, key);\n       info \u003d creator.createShortCircuitReplicaInfo();\n     } catch (RuntimeException e) {\n       LOG.warn(this + \": failed to load \" + key, e);\n     }\n     if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n     lock.lock();\n     try {\n       if (info.getReplica() !\u003d null) {\n         // On success, make sure the cache cleaner thread is running.\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n-        }\n+        LOG.trace(\"{}: successfully loaded {}\", this, info.getReplica());\n         startCacheCleanerThreadIfNeeded();\n         // Note: new ShortCircuitReplicas start with a refCount of 2,\n         // indicating that both this cache and whoever requested the \n         // creation of the replica hold a reference.  So we don\u0027t need\n         // to increment the reference count here.\n       } else {\n         // On failure, remove the waitable from the replicaInfoMap.\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n         if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n         if (info.getInvalidTokenException() !\u003d null) {\n           LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n               \"exception.\", info.getInvalidTokenException());\n         } else {\n           LOG.warn(this + \": failed to load \" + key);\n         }\n       }\n       newWaitable.provide(info);\n     } finally {\n       lock.unlock();\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      LOG.trace(\"{}: loading {}\", this, key);\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        LOG.trace(\"{}: successfully loaded {}\", this, info.getReplica());\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator,\n       Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n     // Handle loading a new replica.\n     ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      LOG.trace(\"{}: loading {}\", this, key);\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": loading \" + key);\n+      }\n       info \u003d creator.createShortCircuitReplicaInfo();\n     } catch (RuntimeException e) {\n       LOG.warn(this + \": failed to load \" + key, e);\n     }\n     if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n     lock.lock();\n     try {\n       if (info.getReplica() !\u003d null) {\n         // On success, make sure the cache cleaner thread is running.\n-        LOG.trace(\"{}: successfully loaded {}\", this, info.getReplica());\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n+        }\n         startCacheCleanerThreadIfNeeded();\n         // Note: new ShortCircuitReplicas start with a refCount of 2,\n         // indicating that both this cache and whoever requested the \n         // creation of the replica hold a reference.  So we don\u0027t need\n         // to increment the reference count here.\n       } else {\n         // On failure, remove the waitable from the replicaInfoMap.\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n         if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n         if (info.getInvalidTokenException() !\u003d null) {\n           LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n               \"exception.\", info.getInvalidTokenException());\n         } else {\n           LOG.warn(this + \": failed to load \" + key);\n         }\n       }\n       newWaitable.provide(info);\n     } finally {\n       lock.unlock();\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/08/15 2:02 PM",
      "commitNameOld": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 34.16,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,39 @@\n   private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator,\n       Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n     // Handle loading a new replica.\n     ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      if (LOG.isTraceEnabled()) {\n-        LOG.trace(this + \": loading \" + key);\n-      }\n+      LOG.trace(\"{}: loading {}\", this, key);\n       info \u003d creator.createShortCircuitReplicaInfo();\n     } catch (RuntimeException e) {\n       LOG.warn(this + \": failed to load \" + key, e);\n     }\n     if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n     lock.lock();\n     try {\n       if (info.getReplica() !\u003d null) {\n         // On success, make sure the cache cleaner thread is running.\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n-        }\n+        LOG.trace(\"{}: successfully loaded {}\", this, info.getReplica());\n         startCacheCleanerThreadIfNeeded();\n         // Note: new ShortCircuitReplicas start with a refCount of 2,\n         // indicating that both this cache and whoever requested the \n         // creation of the replica hold a reference.  So we don\u0027t need\n         // to increment the reference count here.\n       } else {\n         // On failure, remove the waitable from the replicaInfoMap.\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n         if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n         if (info.getInvalidTokenException() !\u003d null) {\n           LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n               \"exception.\", info.getInvalidTokenException());\n         } else {\n           LOG.warn(this + \": failed to load \" + key);\n         }\n       }\n       newWaitable.provide(info);\n     } finally {\n       lock.unlock();\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      LOG.trace(\"{}: loading {}\", this, key);\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        LOG.trace(\"{}: successfully loaded {}\", this, info.getReplica());\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/08/15 2:29 PM",
      "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "26d3b7e6ae867596bbced0bfddde22d3c0d976bb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7394. Log at INFO level, not WARN level, when InvalidToken is seen in ShortCircuitCache (Keith Pak via Colin P. McCabe)\n",
      "commitDate": "16/11/14 9:20 PM",
      "commitName": "26d3b7e6ae867596bbced0bfddde22d3c0d976bb",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/07/14 12:43 PM",
      "commitNameOld": "297e3c72fb7369d32b1d76482dbff43eb0316edd",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 137.4,
      "commitsBetweenForRepo": 1329,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator,\n       Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n     // Handle loading a new replica.\n     ShortCircuitReplicaInfo info \u003d null;\n     try {\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(this + \": loading \" + key);\n       }\n       info \u003d creator.createShortCircuitReplicaInfo();\n     } catch (RuntimeException e) {\n       LOG.warn(this + \": failed to load \" + key, e);\n     }\n     if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n     lock.lock();\n     try {\n       if (info.getReplica() !\u003d null) {\n         // On success, make sure the cache cleaner thread is running.\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(this + \": successfully loaded \" + info.getReplica());\n         }\n         startCacheCleanerThreadIfNeeded();\n         // Note: new ShortCircuitReplicas start with a refCount of 2,\n         // indicating that both this cache and whoever requested the \n         // creation of the replica hold a reference.  So we don\u0027t need\n         // to increment the reference count here.\n       } else {\n         // On failure, remove the waitable from the replicaInfoMap.\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n         if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n         if (info.getInvalidTokenException() !\u003d null) {\n-          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n+          LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n               \"exception.\", info.getInvalidTokenException());\n         } else {\n           LOG.warn(this + \": failed to load \" + key);\n         }\n       }\n       newWaitable.provide(info);\n     } finally {\n       lock.unlock();\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.info(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "f0d64a078da7e932b9509734f75170e3e525e68c": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5940.  Minor cleanups to ShortCircuitReplica, FsDatasetCache, and DomainSocketWatcher (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567835 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 7:10 PM",
      "commitName": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 11:08 AM",
      "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n-  private ShortCircuitReplicaInfo create(Key key,\n+  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n       ShortCircuitReplicaCreator creator,\n       Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n     // Handle loading a new replica.\n     ShortCircuitReplicaInfo info \u003d null;\n     try {\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(this + \": loading \" + key);\n       }\n       info \u003d creator.createShortCircuitReplicaInfo();\n     } catch (RuntimeException e) {\n       LOG.warn(this + \": failed to load \" + key, e);\n     }\n     if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n     lock.lock();\n     try {\n       if (info.getReplica() !\u003d null) {\n         // On success, make sure the cache cleaner thread is running.\n         if (LOG.isTraceEnabled()) {\n           LOG.trace(this + \": successfully loaded \" + info.getReplica());\n         }\n         startCacheCleanerThreadIfNeeded();\n         // Note: new ShortCircuitReplicas start with a refCount of 2,\n         // indicating that both this cache and whoever requested the \n         // creation of the replica hold a reference.  So we don\u0027t need\n         // to increment the reference count here.\n       } else {\n         // On failure, remove the waitable from the replicaInfoMap.\n         Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n         if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n         if (info.getInvalidTokenException() !\u003d null) {\n           LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n               \"exception.\", info.getInvalidTokenException());\n         } else {\n           LOG.warn(this + \": failed to load \" + key);\n         }\n       }\n       newWaitable.provide(info);\n     } finally {\n       lock.unlock();\n     }\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo create(ExtendedBlockId key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
      "extendedDetails": {
        "oldValue": "[key-Key, creator-ShortCircuitReplicaCreator, newWaitable-Waitable\u003cShortCircuitReplicaInfo\u003e]",
        "newValue": "[key-ExtendedBlockId, creator-ShortCircuitReplicaCreator, newWaitable-Waitable\u003cShortCircuitReplicaInfo\u003e]"
      }
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n-  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n-    if (mmaps.size() + 1 \u003e cacheSize) {\n-      if (!evictOne()) {\n-        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n-              \"nothing is evictable.  Ignoring request for mmap with \" +\n-              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n-        return null;\n-      }\n-    }\n-    // Create the condition variable that other threads may wait on.\n-    Waitable\u003cClientMmap\u003e waitable \u003d\n-        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n-    mmaps.put(key, waitable);\n-    // Load the entry\n-    boolean success \u003d false;\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo create(Key key,\n+      ShortCircuitReplicaCreator creator,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n+    // Handle loading a new replica.\n+    ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      try {\n-        lock.unlock();\n-        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n-      } finally {\n-        lock.lock();\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": loading \" + key);\n       }\n-      if (cacheCleaner \u003d\u003d null) {\n-        cacheCleaner \u003d new CacheCleaner(this);\n-        ScheduledFuture\u003c?\u003e future \u003d \n-            executor.scheduleAtFixedRate(cacheCleaner,\n-                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n-        cacheCleaner.setFuture(future);\n+      info \u003d creator.createShortCircuitReplicaInfo();\n+    } catch (RuntimeException e) {\n+      LOG.warn(this + \": failed to load \" + key, e);\n+    }\n+    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n+    lock.lock();\n+    try {\n+      if (info.getReplica() !\u003d null) {\n+        // On success, make sure the cache cleaner thread is running.\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n+        }\n+        startCacheCleanerThreadIfNeeded();\n+        // Note: new ShortCircuitReplicas start with a refCount of 2,\n+        // indicating that both this cache and whoever requested the \n+        // creation of the replica hold a reference.  So we don\u0027t need\n+        // to increment the reference count here.\n+      } else {\n+        // On failure, remove the waitable from the replicaInfoMap.\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n+        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n+        if (info.getInvalidTokenException() !\u003d null) {\n+          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n+              \"exception.\", info.getInvalidTokenException());\n+        } else {\n+          LOG.warn(this + \": failed to load \" + key);\n+        }\n       }\n-      success \u003d true;\n+      newWaitable.provide(info);\n     } finally {\n-      if (!success) {\n-        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n-                  \", \" + \"block\u003d\" + key.block);\n-        mmaps.remove(key);\n-      }\n-      waitable.provide(mmap);\n+      lock.unlock();\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.info(\"created a new ClientMmap for block \" + key.block +\n-          \" on datanode \" + key.datanode);\n-    }\n-    return mmap;\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo create(Key key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ClientMmapManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
            "oldMethodName": "create",
            "newMethodName": "create"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n-  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n-    if (mmaps.size() + 1 \u003e cacheSize) {\n-      if (!evictOne()) {\n-        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n-              \"nothing is evictable.  Ignoring request for mmap with \" +\n-              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n-        return null;\n-      }\n-    }\n-    // Create the condition variable that other threads may wait on.\n-    Waitable\u003cClientMmap\u003e waitable \u003d\n-        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n-    mmaps.put(key, waitable);\n-    // Load the entry\n-    boolean success \u003d false;\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo create(Key key,\n+      ShortCircuitReplicaCreator creator,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n+    // Handle loading a new replica.\n+    ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      try {\n-        lock.unlock();\n-        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n-      } finally {\n-        lock.lock();\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": loading \" + key);\n       }\n-      if (cacheCleaner \u003d\u003d null) {\n-        cacheCleaner \u003d new CacheCleaner(this);\n-        ScheduledFuture\u003c?\u003e future \u003d \n-            executor.scheduleAtFixedRate(cacheCleaner,\n-                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n-        cacheCleaner.setFuture(future);\n+      info \u003d creator.createShortCircuitReplicaInfo();\n+    } catch (RuntimeException e) {\n+      LOG.warn(this + \": failed to load \" + key, e);\n+    }\n+    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n+    lock.lock();\n+    try {\n+      if (info.getReplica() !\u003d null) {\n+        // On success, make sure the cache cleaner thread is running.\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n+        }\n+        startCacheCleanerThreadIfNeeded();\n+        // Note: new ShortCircuitReplicas start with a refCount of 2,\n+        // indicating that both this cache and whoever requested the \n+        // creation of the replica hold a reference.  So we don\u0027t need\n+        // to increment the reference count here.\n+      } else {\n+        // On failure, remove the waitable from the replicaInfoMap.\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n+        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n+        if (info.getInvalidTokenException() !\u003d null) {\n+          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n+              \"exception.\", info.getInvalidTokenException());\n+        } else {\n+          LOG.warn(this + \": failed to load \" + key);\n+        }\n       }\n-      success \u003d true;\n+      newWaitable.provide(info);\n     } finally {\n-      if (!success) {\n-        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n-                  \", \" + \"block\u003d\" + key.block);\n-        mmaps.remove(key);\n-      }\n-      waitable.provide(mmap);\n+      lock.unlock();\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.info(\"created a new ClientMmap for block \" + key.block +\n-          \" on datanode \" + key.datanode);\n-    }\n-    return mmap;\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo create(Key key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "ClientMmap",
            "newValue": "ShortCircuitReplicaInfo"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n-  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n-    if (mmaps.size() + 1 \u003e cacheSize) {\n-      if (!evictOne()) {\n-        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n-              \"nothing is evictable.  Ignoring request for mmap with \" +\n-              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n-        return null;\n-      }\n-    }\n-    // Create the condition variable that other threads may wait on.\n-    Waitable\u003cClientMmap\u003e waitable \u003d\n-        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n-    mmaps.put(key, waitable);\n-    // Load the entry\n-    boolean success \u003d false;\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo create(Key key,\n+      ShortCircuitReplicaCreator creator,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n+    // Handle loading a new replica.\n+    ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      try {\n-        lock.unlock();\n-        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n-      } finally {\n-        lock.lock();\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": loading \" + key);\n       }\n-      if (cacheCleaner \u003d\u003d null) {\n-        cacheCleaner \u003d new CacheCleaner(this);\n-        ScheduledFuture\u003c?\u003e future \u003d \n-            executor.scheduleAtFixedRate(cacheCleaner,\n-                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n-        cacheCleaner.setFuture(future);\n+      info \u003d creator.createShortCircuitReplicaInfo();\n+    } catch (RuntimeException e) {\n+      LOG.warn(this + \": failed to load \" + key, e);\n+    }\n+    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n+    lock.lock();\n+    try {\n+      if (info.getReplica() !\u003d null) {\n+        // On success, make sure the cache cleaner thread is running.\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n+        }\n+        startCacheCleanerThreadIfNeeded();\n+        // Note: new ShortCircuitReplicas start with a refCount of 2,\n+        // indicating that both this cache and whoever requested the \n+        // creation of the replica hold a reference.  So we don\u0027t need\n+        // to increment the reference count here.\n+      } else {\n+        // On failure, remove the waitable from the replicaInfoMap.\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n+        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n+        if (info.getInvalidTokenException() !\u003d null) {\n+          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n+              \"exception.\", info.getInvalidTokenException());\n+        } else {\n+          LOG.warn(this + \": failed to load \" + key);\n+        }\n       }\n-      success \u003d true;\n+      newWaitable.provide(info);\n     } finally {\n-      if (!success) {\n-        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n-                  \", \" + \"block\u003d\" + key.block);\n-        mmaps.remove(key);\n-      }\n-      waitable.provide(mmap);\n+      lock.unlock();\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.info(\"created a new ClientMmap for block \" + key.block +\n-          \" on datanode \" + key.datanode);\n-    }\n-    return mmap;\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo create(Key key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n-  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n-    if (mmaps.size() + 1 \u003e cacheSize) {\n-      if (!evictOne()) {\n-        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n-              \"nothing is evictable.  Ignoring request for mmap with \" +\n-              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n-        return null;\n-      }\n-    }\n-    // Create the condition variable that other threads may wait on.\n-    Waitable\u003cClientMmap\u003e waitable \u003d\n-        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n-    mmaps.put(key, waitable);\n-    // Load the entry\n-    boolean success \u003d false;\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo create(Key key,\n+      ShortCircuitReplicaCreator creator,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n+    // Handle loading a new replica.\n+    ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      try {\n-        lock.unlock();\n-        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n-      } finally {\n-        lock.lock();\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": loading \" + key);\n       }\n-      if (cacheCleaner \u003d\u003d null) {\n-        cacheCleaner \u003d new CacheCleaner(this);\n-        ScheduledFuture\u003c?\u003e future \u003d \n-            executor.scheduleAtFixedRate(cacheCleaner,\n-                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n-        cacheCleaner.setFuture(future);\n+      info \u003d creator.createShortCircuitReplicaInfo();\n+    } catch (RuntimeException e) {\n+      LOG.warn(this + \": failed to load \" + key, e);\n+    }\n+    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n+    lock.lock();\n+    try {\n+      if (info.getReplica() !\u003d null) {\n+        // On success, make sure the cache cleaner thread is running.\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n+        }\n+        startCacheCleanerThreadIfNeeded();\n+        // Note: new ShortCircuitReplicas start with a refCount of 2,\n+        // indicating that both this cache and whoever requested the \n+        // creation of the replica hold a reference.  So we don\u0027t need\n+        // to increment the reference count here.\n+      } else {\n+        // On failure, remove the waitable from the replicaInfoMap.\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n+        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n+        if (info.getInvalidTokenException() !\u003d null) {\n+          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n+              \"exception.\", info.getInvalidTokenException());\n+        } else {\n+          LOG.warn(this + \": failed to load \" + key);\n+        }\n       }\n-      success \u003d true;\n+      newWaitable.provide(info);\n     } finally {\n-      if (!success) {\n-        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n-                  \", \" + \"block\u003d\" + key.block);\n-        mmaps.remove(key);\n-      }\n-      waitable.provide(mmap);\n+      lock.unlock();\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.info(\"created a new ClientMmap for block \" + key.block +\n-          \" on datanode \" + key.datanode);\n-    }\n-    return mmap;\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo create(Key key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,43 @@\n-  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n-    if (mmaps.size() + 1 \u003e cacheSize) {\n-      if (!evictOne()) {\n-        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n-              \"nothing is evictable.  Ignoring request for mmap with \" +\n-              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n-        return null;\n-      }\n-    }\n-    // Create the condition variable that other threads may wait on.\n-    Waitable\u003cClientMmap\u003e waitable \u003d\n-        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n-    mmaps.put(key, waitable);\n-    // Load the entry\n-    boolean success \u003d false;\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo create(Key key,\n+      ShortCircuitReplicaCreator creator,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n+    // Handle loading a new replica.\n+    ShortCircuitReplicaInfo info \u003d null;\n     try {\n-      try {\n-        lock.unlock();\n-        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n-      } finally {\n-        lock.lock();\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": loading \" + key);\n       }\n-      if (cacheCleaner \u003d\u003d null) {\n-        cacheCleaner \u003d new CacheCleaner(this);\n-        ScheduledFuture\u003c?\u003e future \u003d \n-            executor.scheduleAtFixedRate(cacheCleaner,\n-                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n-        cacheCleaner.setFuture(future);\n+      info \u003d creator.createShortCircuitReplicaInfo();\n+    } catch (RuntimeException e) {\n+      LOG.warn(this + \": failed to load \" + key, e);\n+    }\n+    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n+    lock.lock();\n+    try {\n+      if (info.getReplica() !\u003d null) {\n+        // On success, make sure the cache cleaner thread is running.\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n+        }\n+        startCacheCleanerThreadIfNeeded();\n+        // Note: new ShortCircuitReplicas start with a refCount of 2,\n+        // indicating that both this cache and whoever requested the \n+        // creation of the replica hold a reference.  So we don\u0027t need\n+        // to increment the reference count here.\n+      } else {\n+        // On failure, remove the waitable from the replicaInfoMap.\n+        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n+        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n+        if (info.getInvalidTokenException() !\u003d null) {\n+          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n+              \"exception.\", info.getInvalidTokenException());\n+        } else {\n+          LOG.warn(this + \": failed to load \" + key);\n+        }\n       }\n-      success \u003d true;\n+      newWaitable.provide(info);\n     } finally {\n-      if (!success) {\n-        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n-                  \", \" + \"block\u003d\" + key.block);\n-        mmaps.remove(key);\n-      }\n-      waitable.provide(mmap);\n+      lock.unlock();\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.info(\"created a new ClientMmap for block \" + key.block +\n-          \" on datanode \" + key.datanode);\n-    }\n-    return mmap;\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo create(Key key,\n      ShortCircuitReplicaCreator creator,\n      Waitable\u003cShortCircuitReplicaInfo\u003e newWaitable) {\n    // Handle loading a new replica.\n    ShortCircuitReplicaInfo info \u003d null;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": loading \" + key);\n      }\n      info \u003d creator.createShortCircuitReplicaInfo();\n    } catch (RuntimeException e) {\n      LOG.warn(this + \": failed to load \" + key, e);\n    }\n    if (info \u003d\u003d null) info \u003d new ShortCircuitReplicaInfo();\n    lock.lock();\n    try {\n      if (info.getReplica() !\u003d null) {\n        // On success, make sure the cache cleaner thread is running.\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(this + \": successfully loaded \" + info.getReplica());\n        }\n        startCacheCleanerThreadIfNeeded();\n        // Note: new ShortCircuitReplicas start with a refCount of 2,\n        // indicating that both this cache and whoever requested the \n        // creation of the replica hold a reference.  So we don\u0027t need\n        // to increment the reference count here.\n      } else {\n        // On failure, remove the waitable from the replicaInfoMap.\n        Waitable\u003cShortCircuitReplicaInfo\u003e waitableInMap \u003d replicaInfoMap.get(key);\n        if (waitableInMap \u003d\u003d newWaitable) replicaInfoMap.remove(key);\n        if (info.getInvalidTokenException() !\u003d null) {\n          LOG.warn(this + \": could not load \" + key + \" due to InvalidToken \" +\n              \"exception.\", info.getInvalidTokenException());\n        } else {\n          LOG.warn(this + \": failed to load \" + key);\n        }\n      }\n      newWaitable.provide(info);\n    } finally {\n      lock.unlock();\n    }\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[key-Key, in-FileInputStream]",
            "newValue": "[key-Key, creator-ShortCircuitReplicaCreator, newWaitable-Waitable\u003cShortCircuitReplicaInfo\u003e]"
          }
        }
      ]
    },
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5260. Merge zero-copy memory-mapped HDFS client reads to trunk and branch-2. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 3:51 PM",
      "commitName": "eccdb9aa8bcdee750583d16a1253f1c5faabd036",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,45 @@\n+  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n+    if (mmaps.size() + 1 \u003e cacheSize) {\n+      if (!evictOne()) {\n+        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n+              \"nothing is evictable.  Ignoring request for mmap with \" +\n+              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n+        return null;\n+      }\n+    }\n+    // Create the condition variable that other threads may wait on.\n+    Waitable\u003cClientMmap\u003e waitable \u003d\n+        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n+    mmaps.put(key, waitable);\n+    // Load the entry\n+    boolean success \u003d false;\n+    ClientMmap mmap \u003d null;\n+    try {\n+      try {\n+        lock.unlock();\n+        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n+      } finally {\n+        lock.lock();\n+      }\n+      if (cacheCleaner \u003d\u003d null) {\n+        cacheCleaner \u003d new CacheCleaner(this);\n+        ScheduledFuture\u003c?\u003e future \u003d \n+            executor.scheduleAtFixedRate(cacheCleaner,\n+                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n+        cacheCleaner.setFuture(future);\n+      }\n+      success \u003d true;\n+    } finally {\n+      if (!success) {\n+        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n+                  \", \" + \"block\u003d\" + key.block);\n+        mmaps.remove(key);\n+      }\n+      waitable.provide(mmap);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.info(\"created a new ClientMmap for block \" + key.block +\n+          \" on datanode \" + key.datanode);\n+    }\n+    return mmap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ClientMmap create(Key key, FileInputStream in) throws IOException {\n    if (mmaps.size() + 1 \u003e cacheSize) {\n      if (!evictOne()) {\n        LOG.warn(\"mmap cache is full (with \" + cacheSize + \" elements) and \" +\n              \"nothing is evictable.  Ignoring request for mmap with \" +\n              \"datanodeID\u003d\" + key.datanode + \", \" + \"block\u003d\" + key.block);\n        return null;\n      }\n    }\n    // Create the condition variable that other threads may wait on.\n    Waitable\u003cClientMmap\u003e waitable \u003d\n        new Waitable\u003cClientMmap\u003e(lock.newCondition());\n    mmaps.put(key, waitable);\n    // Load the entry\n    boolean success \u003d false;\n    ClientMmap mmap \u003d null;\n    try {\n      try {\n        lock.unlock();\n        mmap \u003d ClientMmap.load(this, in, key.block, key.datanode);\n      } finally {\n        lock.lock();\n      }\n      if (cacheCleaner \u003d\u003d null) {\n        cacheCleaner \u003d new CacheCleaner(this);\n        ScheduledFuture\u003c?\u003e future \u003d \n            executor.scheduleAtFixedRate(cacheCleaner,\n                timeoutNs, timeoutNs / runsPerTimeout, TimeUnit.NANOSECONDS);\n        cacheCleaner.setFuture(future);\n      }\n      success \u003d true;\n    } finally {\n      if (!success) {\n        LOG.warn(\"failed to create mmap for datanodeID\u003d\" + key.datanode +\n                  \", \" + \"block\u003d\" + key.block);\n        mmaps.remove(key);\n      }\n      waitable.provide(mmap);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.info(\"created a new ClientMmap for block \" + key.block +\n          \" on datanode \" + key.datanode);\n    }\n    return mmap;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ClientMmapManager.java"
    }
  }
}