{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerUpdateContext.java",
  "functionName": "checkAndAddToOutstandingIncreases",
  "functionId": "checkAndAddToOutstandingIncreases___rmContainer-RMContainer__schedulerNode-SchedulerNode__updateRequest-UpdateContainerRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
  "functionStartLine": 104,
  "functionEndLine": 152,
  "numCommitsSeen": 7,
  "timeTaken": 3335,
  "changeHistory": [
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/12/17 9:20 AM",
      "commitNameOld": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 56.67,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public synchronized boolean checkAndAddToOutstandingIncreases(\n       RMContainer rmContainer, SchedulerNode schedulerNode,\n       UpdateContainerRequest updateRequest) {\n     Container container \u003d rmContainer.getContainer();\n     SchedulerRequestKey schedulerKey \u003d\n         SchedulerRequestKey.create(updateRequest,\n             rmContainer.getAllocatedSchedulerKey());\n     Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n         outstandingIncreases.get(schedulerKey);\n     if (resourceMap \u003d\u003d null) {\n       resourceMap \u003d new HashMap\u003c\u003e();\n       outstandingIncreases.put(schedulerKey, resourceMap);\n     } else {\n       // Updating Resource for and existing increase container\n       if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d\n           updateRequest.getContainerUpdateType()) {\n         cancelPreviousRequest(schedulerNode, schedulerKey);\n       } else {\n         return false;\n       }\n     }\n     Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n     Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n         resourceMap.get(resToIncrease);\n     if (locationMap \u003d\u003d null) {\n       locationMap \u003d new HashMap\u003c\u003e();\n       resourceMap.put(resToIncrease, locationMap);\n     }\n     Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n     if (containerIds \u003d\u003d null) {\n       containerIds \u003d new HashSet\u003c\u003e();\n       locationMap.put(container.getNodeId(), containerIds);\n     }\n     if (outstandingDecreases.containsKey(container.getId())) {\n       return false;\n     }\n \n     containerIds.add(container.getId());\n     if (!Resources.isNone(resToIncrease)) {\n       Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n           new HashMap\u003c\u003e();\n       Map\u003cString, ResourceRequest\u003e resMap \u003d\n           createResourceRequests(rmContainer, schedulerNode,\n               schedulerKey, resToIncrease);\n       updateResReqs.put(schedulerKey, resMap);\n-      appSchedulingInfo.addRequestToAppPlacement(false, updateResReqs);\n+      appSchedulingInfo.updateResourceRequests(updateResReqs, false);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean checkAndAddToOutstandingIncreases(\n      RMContainer rmContainer, SchedulerNode schedulerNode,\n      UpdateContainerRequest updateRequest) {\n    Container container \u003d rmContainer.getContainer();\n    SchedulerRequestKey schedulerKey \u003d\n        SchedulerRequestKey.create(updateRequest,\n            rmContainer.getAllocatedSchedulerKey());\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap \u003d\u003d null) {\n      resourceMap \u003d new HashMap\u003c\u003e();\n      outstandingIncreases.put(schedulerKey, resourceMap);\n    } else {\n      // Updating Resource for and existing increase container\n      if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d\n          updateRequest.getContainerUpdateType()) {\n        cancelPreviousRequest(schedulerNode, schedulerKey);\n      } else {\n        return false;\n      }\n    }\n    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n    Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n        resourceMap.get(resToIncrease);\n    if (locationMap \u003d\u003d null) {\n      locationMap \u003d new HashMap\u003c\u003e();\n      resourceMap.put(resToIncrease, locationMap);\n    }\n    Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n    if (containerIds \u003d\u003d null) {\n      containerIds \u003d new HashSet\u003c\u003e();\n      locationMap.put(container.getNodeId(), containerIds);\n    }\n    if (outstandingDecreases.containsKey(container.getId())) {\n      return false;\n    }\n\n    containerIds.add(container.getId());\n    if (!Resources.isNone(resToIncrease)) {\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n          new HashMap\u003c\u003e();\n      Map\u003cString, ResourceRequest\u003e resMap \u003d\n          createResourceRequests(rmContainer, schedulerNode,\n              schedulerKey, resToIncrease);\n      updateResReqs.put(schedulerKey, resMap);\n      appSchedulingInfo.updateResourceRequests(updateResReqs, false);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "28/02/17 10:35 AM",
      "commitNameOld": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 254.1,
      "commitsBetweenForRepo": 1781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public synchronized boolean checkAndAddToOutstandingIncreases(\n       RMContainer rmContainer, SchedulerNode schedulerNode,\n       UpdateContainerRequest updateRequest) {\n     Container container \u003d rmContainer.getContainer();\n     SchedulerRequestKey schedulerKey \u003d\n         SchedulerRequestKey.create(updateRequest,\n             rmContainer.getAllocatedSchedulerKey());\n     Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n         outstandingIncreases.get(schedulerKey);\n     if (resourceMap \u003d\u003d null) {\n       resourceMap \u003d new HashMap\u003c\u003e();\n       outstandingIncreases.put(schedulerKey, resourceMap);\n     } else {\n       // Updating Resource for and existing increase container\n       if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d\n           updateRequest.getContainerUpdateType()) {\n         cancelPreviousRequest(schedulerNode, schedulerKey);\n       } else {\n         return false;\n       }\n     }\n     Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n     Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n         resourceMap.get(resToIncrease);\n     if (locationMap \u003d\u003d null) {\n       locationMap \u003d new HashMap\u003c\u003e();\n       resourceMap.put(resToIncrease, locationMap);\n     }\n     Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n     if (containerIds \u003d\u003d null) {\n       containerIds \u003d new HashSet\u003c\u003e();\n       locationMap.put(container.getNodeId(), containerIds);\n     }\n     if (outstandingDecreases.containsKey(container.getId())) {\n       return false;\n     }\n \n     containerIds.add(container.getId());\n     if (!Resources.isNone(resToIncrease)) {\n       Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n           new HashMap\u003c\u003e();\n       Map\u003cString, ResourceRequest\u003e resMap \u003d\n           createResourceRequests(rmContainer, schedulerNode,\n               schedulerKey, resToIncrease);\n       updateResReqs.put(schedulerKey, resMap);\n-      appSchedulingInfo.addToPlacementSets(false, updateResReqs);\n+      appSchedulingInfo.addRequestToAppPlacement(false, updateResReqs);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean checkAndAddToOutstandingIncreases(\n      RMContainer rmContainer, SchedulerNode schedulerNode,\n      UpdateContainerRequest updateRequest) {\n    Container container \u003d rmContainer.getContainer();\n    SchedulerRequestKey schedulerKey \u003d\n        SchedulerRequestKey.create(updateRequest,\n            rmContainer.getAllocatedSchedulerKey());\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap \u003d\u003d null) {\n      resourceMap \u003d new HashMap\u003c\u003e();\n      outstandingIncreases.put(schedulerKey, resourceMap);\n    } else {\n      // Updating Resource for and existing increase container\n      if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d\n          updateRequest.getContainerUpdateType()) {\n        cancelPreviousRequest(schedulerNode, schedulerKey);\n      } else {\n        return false;\n      }\n    }\n    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n    Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n        resourceMap.get(resToIncrease);\n    if (locationMap \u003d\u003d null) {\n      locationMap \u003d new HashMap\u003c\u003e();\n      resourceMap.put(resToIncrease, locationMap);\n    }\n    Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n    if (containerIds \u003d\u003d null) {\n      containerIds \u003d new HashSet\u003c\u003e();\n      locationMap.put(container.getNodeId(), containerIds);\n    }\n    if (outstandingDecreases.containsKey(container.getId())) {\n      return false;\n    }\n\n    containerIds.add(container.getId());\n    if (!Resources.isNone(resToIncrease)) {\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n          new HashMap\u003c\u003e();\n      Map\u003cString, ResourceRequest\u003e resMap \u003d\n          createResourceRequests(rmContainer, schedulerNode,\n              schedulerKey, resToIncrease);\n      updateResReqs.put(schedulerKey, resMap);\n      appSchedulingInfo.addRequestToAppPlacement(false, updateResReqs);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 54.0,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,49 @@\n   public synchronized boolean checkAndAddToOutstandingIncreases(\n       RMContainer rmContainer, SchedulerNode schedulerNode,\n       UpdateContainerRequest updateRequest) {\n     Container container \u003d rmContainer.getContainer();\n     SchedulerRequestKey schedulerKey \u003d\n         SchedulerRequestKey.create(updateRequest,\n             rmContainer.getAllocatedSchedulerKey());\n     Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n         outstandingIncreases.get(schedulerKey);\n     if (resourceMap \u003d\u003d null) {\n       resourceMap \u003d new HashMap\u003c\u003e();\n       outstandingIncreases.put(schedulerKey, resourceMap);\n+    } else {\n+      // Updating Resource for and existing increase container\n+      if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d\n+          updateRequest.getContainerUpdateType()) {\n+        cancelPreviousRequest(schedulerNode, schedulerKey);\n+      } else {\n+        return false;\n+      }\n     }\n+    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n     Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n-        resourceMap.get(container.getResource());\n+        resourceMap.get(resToIncrease);\n     if (locationMap \u003d\u003d null) {\n       locationMap \u003d new HashMap\u003c\u003e();\n-      resourceMap.put(container.getResource(), locationMap);\n+      resourceMap.put(resToIncrease, locationMap);\n     }\n     Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n     if (containerIds \u003d\u003d null) {\n       containerIds \u003d new HashSet\u003c\u003e();\n       locationMap.put(container.getNodeId(), containerIds);\n     }\n-    if (containerIds.contains(container.getId())\n-        || outstandingDecreases.contains(container.getId())) {\n+    if (outstandingDecreases.containsKey(container.getId())) {\n       return false;\n     }\n-    containerIds.add(container.getId());\n \n-    Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n-        new HashMap\u003c\u003e();\n-    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n-    Map\u003cString, ResourceRequest\u003e resMap \u003d\n-        createResourceRequests(rmContainer, schedulerNode,\n-            schedulerKey, resToIncrease);\n-    updateResReqs.put(schedulerKey, resMap);\n-    appSchedulingInfo.addToPlacementSets(false, updateResReqs);\n+    containerIds.add(container.getId());\n+    if (!Resources.isNone(resToIncrease)) {\n+      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n+          new HashMap\u003c\u003e();\n+      Map\u003cString, ResourceRequest\u003e resMap \u003d\n+          createResourceRequests(rmContainer, schedulerNode,\n+              schedulerKey, resToIncrease);\n+      updateResReqs.put(schedulerKey, resMap);\n+      appSchedulingInfo.addToPlacementSets(false, updateResReqs);\n+    }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean checkAndAddToOutstandingIncreases(\n      RMContainer rmContainer, SchedulerNode schedulerNode,\n      UpdateContainerRequest updateRequest) {\n    Container container \u003d rmContainer.getContainer();\n    SchedulerRequestKey schedulerKey \u003d\n        SchedulerRequestKey.create(updateRequest,\n            rmContainer.getAllocatedSchedulerKey());\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap \u003d\u003d null) {\n      resourceMap \u003d new HashMap\u003c\u003e();\n      outstandingIncreases.put(schedulerKey, resourceMap);\n    } else {\n      // Updating Resource for and existing increase container\n      if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d\n          updateRequest.getContainerUpdateType()) {\n        cancelPreviousRequest(schedulerNode, schedulerKey);\n      } else {\n        return false;\n      }\n    }\n    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n    Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n        resourceMap.get(resToIncrease);\n    if (locationMap \u003d\u003d null) {\n      locationMap \u003d new HashMap\u003c\u003e();\n      resourceMap.put(resToIncrease, locationMap);\n    }\n    Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n    if (containerIds \u003d\u003d null) {\n      containerIds \u003d new HashSet\u003c\u003e();\n      locationMap.put(container.getNodeId(), containerIds);\n    }\n    if (outstandingDecreases.containsKey(container.getId())) {\n      return false;\n    }\n\n    containerIds.add(container.getId());\n    if (!Resources.isNone(resToIncrease)) {\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n          new HashMap\u003c\u003e();\n      Map\u003cString, ResourceRequest\u003e resMap \u003d\n          createResourceRequests(rmContainer, schedulerNode,\n              schedulerKey, resToIncrease);\n      updateResReqs.put(schedulerKey, resMap);\n      appSchedulingInfo.addToPlacementSets(false, updateResReqs);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,40 @@\n+  public synchronized boolean checkAndAddToOutstandingIncreases(\n+      RMContainer rmContainer, SchedulerNode schedulerNode,\n+      UpdateContainerRequest updateRequest) {\n+    Container container \u003d rmContainer.getContainer();\n+    SchedulerRequestKey schedulerKey \u003d\n+        SchedulerRequestKey.create(updateRequest,\n+            rmContainer.getAllocatedSchedulerKey());\n+    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n+        outstandingIncreases.get(schedulerKey);\n+    if (resourceMap \u003d\u003d null) {\n+      resourceMap \u003d new HashMap\u003c\u003e();\n+      outstandingIncreases.put(schedulerKey, resourceMap);\n+    }\n+    Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n+        resourceMap.get(container.getResource());\n+    if (locationMap \u003d\u003d null) {\n+      locationMap \u003d new HashMap\u003c\u003e();\n+      resourceMap.put(container.getResource(), locationMap);\n+    }\n+    Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n+    if (containerIds \u003d\u003d null) {\n+      containerIds \u003d new HashSet\u003c\u003e();\n+      locationMap.put(container.getNodeId(), containerIds);\n+    }\n+    if (containerIds.contains(container.getId())\n+        || outstandingDecreases.contains(container.getId())) {\n+      return false;\n+    }\n+    containerIds.add(container.getId());\n+\n+    Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n+        new HashMap\u003c\u003e();\n+    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n+    Map\u003cString, ResourceRequest\u003e resMap \u003d\n+        createResourceRequests(rmContainer, schedulerNode,\n+            schedulerKey, resToIncrease);\n+    updateResReqs.put(schedulerKey, resMap);\n+    appSchedulingInfo.addToPlacementSets(false, updateResReqs);\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean checkAndAddToOutstandingIncreases(\n      RMContainer rmContainer, SchedulerNode schedulerNode,\n      UpdateContainerRequest updateRequest) {\n    Container container \u003d rmContainer.getContainer();\n    SchedulerRequestKey schedulerKey \u003d\n        SchedulerRequestKey.create(updateRequest,\n            rmContainer.getAllocatedSchedulerKey());\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap \u003d\u003d null) {\n      resourceMap \u003d new HashMap\u003c\u003e();\n      outstandingIncreases.put(schedulerKey, resourceMap);\n    }\n    Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n        resourceMap.get(container.getResource());\n    if (locationMap \u003d\u003d null) {\n      locationMap \u003d new HashMap\u003c\u003e();\n      resourceMap.put(container.getResource(), locationMap);\n    }\n    Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n    if (containerIds \u003d\u003d null) {\n      containerIds \u003d new HashSet\u003c\u003e();\n      locationMap.put(container.getNodeId(), containerIds);\n    }\n    if (containerIds.contains(container.getId())\n        || outstandingDecreases.contains(container.getId())) {\n      return false;\n    }\n    containerIds.add(container.getId());\n\n    Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e updateResReqs \u003d\n        new HashMap\u003c\u003e();\n    Resource resToIncrease \u003d getResourceToIncrease(updateRequest, rmContainer);\n    Map\u003cString, ResourceRequest\u003e resMap \u003d\n        createResourceRequests(rmContainer, schedulerNode,\n            schedulerKey, resToIncrease);\n    updateResReqs.put(schedulerKey, resMap);\n    appSchedulingInfo.addToPlacementSets(false, updateResReqs);\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java"
    }
  }
}