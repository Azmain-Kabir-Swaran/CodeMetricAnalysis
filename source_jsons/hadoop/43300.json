{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderUtils.java",
  "functionName": "resolvePropsInConfigFileAndSaveOnHdfs",
  "functionId": "resolvePropsInConfigFileAndSaveOnHdfs___fs-SliderFileSystem__tokensForSubstitution-Map__String,String____instance-ComponentInstance__configFile-ConfigFile__fileName-String__remoteFile-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
  "functionStartLine": 383,
  "functionEndLine": 407,
  "numCommitsSeen": 34,
  "timeTaken": 4445,
  "changeHistory": [
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "845764da146e98927e8ea5b2209f19f4fc3feda5"
  ],
  "changeHistoryShort": {
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ymultichange(Yrename,Ybodychange)",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange,Yparameterchange)",
    "845764da146e98927e8ea5b2209f19f4fc3feda5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "b8a7ef1b64392094562e7782e0fd092934724ad2",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+  private static void resolvePropsInConfigFileAndSaveOnHdfs(SliderFileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ConfigFile configFile, String fileName, Path remoteFile)\n       throws IOException {\n     // substitute non-template configs\n-    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n+    substituteMapWithTokens(configFile.getProperties(), tokensForSubstitution);\n \n     // write configs onto hdfs\n     PublishedConfiguration publishedConfiguration \u003d\n         new PublishedConfiguration(fileName,\n-            configFile.getProps().entrySet());\n+            configFile.getProperties().entrySet());\n     if (!fs.getFileSystem().exists(remoteFile)) {\n       PublishedConfigurationOutputter configurationOutputter \u003d\n           PublishedConfigurationOutputter.createOutputter(\n               ConfigFormat.resolve(configFile.getType().toString()),\n               publishedConfiguration);\n       try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n         configurationOutputter.save(os);\n         os.flush();\n       }\n     } else {\n       log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n               + \", config file already exists: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolvePropsInConfigFileAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProperties(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProperties().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "resolveNonTemplateConfigsAndSaveOnHdfs",
            "newValue": "resolvePropsInConfigFileAndSaveOnHdfs"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "b8a7ef1b64392094562e7782e0fd092934724ad2",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+  private static void resolvePropsInConfigFileAndSaveOnHdfs(SliderFileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ConfigFile configFile, String fileName, Path remoteFile)\n       throws IOException {\n     // substitute non-template configs\n-    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n+    substituteMapWithTokens(configFile.getProperties(), tokensForSubstitution);\n \n     // write configs onto hdfs\n     PublishedConfiguration publishedConfiguration \u003d\n         new PublishedConfiguration(fileName,\n-            configFile.getProps().entrySet());\n+            configFile.getProperties().entrySet());\n     if (!fs.getFileSystem().exists(remoteFile)) {\n       PublishedConfigurationOutputter configurationOutputter \u003d\n           PublishedConfigurationOutputter.createOutputter(\n               ConfigFormat.resolve(configFile.getType().toString()),\n               publishedConfiguration);\n       try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n         configurationOutputter.save(os);\n         os.flush();\n       }\n     } else {\n       log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n               + \", config file already exists: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolvePropsInConfigFileAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProperties(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProperties().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProps().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ConfigFile configFile, String fileName, Path remoteFile)\n       throws IOException {\n     // substitute non-template configs\n     substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n \n     // write configs onto hdfs\n     PublishedConfiguration publishedConfiguration \u003d\n         new PublishedConfiguration(fileName,\n             configFile.getProps().entrySet());\n     if (!fs.getFileSystem().exists(remoteFile)) {\n       PublishedConfigurationOutputter configurationOutputter \u003d\n           PublishedConfigurationOutputter.createOutputter(\n               ConfigFormat.resolve(configFile.getType().toString()),\n               publishedConfiguration);\n       try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n         configurationOutputter.save(os);\n         os.flush();\n       }\n     } else {\n-      log.info(\"Component instance \u003d \" + roleInstance.getCompInstanceName()\n+      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n               + \", config file already exists: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProps().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ConfigFile configFile, String fileName, Path remoteFile)\n       throws IOException {\n     // substitute non-template configs\n     substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n \n     // write configs onto hdfs\n     PublishedConfiguration publishedConfiguration \u003d\n         new PublishedConfiguration(fileName,\n             configFile.getProps().entrySet());\n     if (!fs.getFileSystem().exists(remoteFile)) {\n       PublishedConfigurationOutputter configurationOutputter \u003d\n           PublishedConfigurationOutputter.createOutputter(\n               ConfigFormat.resolve(configFile.getType().toString()),\n               publishedConfiguration);\n       try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n         configurationOutputter.save(os);\n         os.flush();\n       }\n     } else {\n-      log.info(\"Component instance \u003d \" + roleInstance.getCompInstanceName()\n+      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n               + \", config file already exists: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProps().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ConfigFile configFile, String fileName, Path remoteFile)\n       throws IOException {\n     // substitute non-template configs\n     substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n \n     // write configs onto hdfs\n     PublishedConfiguration publishedConfiguration \u003d\n         new PublishedConfiguration(fileName,\n             configFile.getProps().entrySet());\n     if (!fs.getFileSystem().exists(remoteFile)) {\n       PublishedConfigurationOutputter configurationOutputter \u003d\n           PublishedConfigurationOutputter.createOutputter(\n               ConfigFormat.resolve(configFile.getType().toString()),\n               publishedConfiguration);\n       try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n         configurationOutputter.save(os);\n         os.flush();\n       }\n     } else {\n-      log.info(\"Component instance \u003d \" + roleInstance.getCompInstanceName()\n+      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n               + \", config file already exists: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProps().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ConfigFile configFile, String fileName, Path remoteFile)\n       throws IOException {\n     // substitute non-template configs\n     substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n \n     // write configs onto hdfs\n     PublishedConfiguration publishedConfiguration \u003d\n         new PublishedConfiguration(fileName,\n             configFile.getProps().entrySet());\n     if (!fs.getFileSystem().exists(remoteFile)) {\n       PublishedConfigurationOutputter configurationOutputter \u003d\n           PublishedConfigurationOutputter.createOutputter(\n               ConfigFormat.resolve(configFile.getType().toString()),\n               publishedConfiguration);\n       try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n         configurationOutputter.save(os);\n         os.flush();\n       }\n     } else {\n-      log.info(\"Component instance \u003d \" + roleInstance.getCompInstanceName()\n+      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n               + \", config file already exists: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProps().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + instance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[fs-SliderFileSystem, tokensForSubstitution-Map\u003cString,String\u003e, roleInstance-RoleInstance, configFile-ConfigFile, fileName-String, remoteFile-Path]",
            "newValue": "[fs-SliderFileSystem, tokensForSubstitution-Map\u003cString,String\u003e, instance-ComponentInstance, configFile-ConfigFile, fileName-String, remoteFile-Path]"
          }
        }
      ]
    },
    "845764da146e98927e8ea5b2209f19f4fc3feda5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,25 @@\n+  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n+      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+      ConfigFile configFile, String fileName, Path remoteFile)\n+      throws IOException {\n+    // substitute non-template configs\n+    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n+\n+    // write configs onto hdfs\n+    PublishedConfiguration publishedConfiguration \u003d\n+        new PublishedConfiguration(fileName,\n+            configFile.getProps().entrySet());\n+    if (!fs.getFileSystem().exists(remoteFile)) {\n+      PublishedConfigurationOutputter configurationOutputter \u003d\n+          PublishedConfigurationOutputter.createOutputter(\n+              ConfigFormat.resolve(configFile.getType().toString()),\n+              publishedConfiguration);\n+      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n+        configurationOutputter.save(os);\n+        os.flush();\n+      }\n+    } else {\n+      log.info(\"Component instance \u003d \" + roleInstance.getCompInstanceName()\n+              + \", config file already exists: \" + remoteFile);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resolveNonTemplateConfigsAndSaveOnHdfs(SliderFileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n      ConfigFile configFile, String fileName, Path remoteFile)\n      throws IOException {\n    // substitute non-template configs\n    substituteMapWithTokens(configFile.getProps(), tokensForSubstitution);\n\n    // write configs onto hdfs\n    PublishedConfiguration publishedConfiguration \u003d\n        new PublishedConfiguration(fileName,\n            configFile.getProps().entrySet());\n    if (!fs.getFileSystem().exists(remoteFile)) {\n      PublishedConfigurationOutputter configurationOutputter \u003d\n          PublishedConfigurationOutputter.createOutputter(\n              ConfigFormat.resolve(configFile.getType().toString()),\n              publishedConfiguration);\n      try (FSDataOutputStream os \u003d fs.getFileSystem().create(remoteFile)) {\n        configurationOutputter.save(os);\n        os.flush();\n      }\n    } else {\n      log.info(\"Component instance \u003d \" + roleInstance.getCompInstanceName()\n              + \", config file already exists: \" + remoteFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java"
    }
  }
}