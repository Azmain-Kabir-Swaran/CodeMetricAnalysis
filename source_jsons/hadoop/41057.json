{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSYarnSiteConverter.java",
  "functionName": "convertSiteProperties",
  "functionId": "convertSiteProperties___conf-Configuration__yarnSiteConfig-Configuration__drfUsed-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSYarnSiteConverter.java",
  "functionStartLine": 40,
  "functionEndLine": 134,
  "numCommitsSeen": 4,
  "timeTaken": 3944,
  "changeHistory": [
    "cb6399c1095af52112cbf4356572d99923d694ae",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "cb6399c1095af52112cbf4356572d99923d694ae": "Ybodychange",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": "Ymultichange(Yparameterchange,Ybodychange)",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cb6399c1095af52112cbf4356572d99923d694ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10257. FS-CS converter: skip increment properties for mem/vcores and fix DRF check. Contributed by Peter Bacsko\n",
      "commitDate": "05/05/20 7:00 AM",
      "commitName": "cb6399c1095af52112cbf4356572d99923d694ae",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "28/01/20 6:22 AM",
      "commitNameOld": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 97.98,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,95 @@\n   public void convertSiteProperties(Configuration conf,\n       Configuration yarnSiteConfig, boolean drfUsed) {\n     yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n         CapacityScheduler.class.getCanonicalName());\n \n-    // TODO: deprecated property, check if necessary\n     if (conf.getBoolean(\n         FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n         FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n       int interval \u003d conf.getInt(\n           FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n           FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n       yarnSiteConfig.setInt(PREFIX +\n           \"schedule-asynchronously.scheduling-interval-ms\", interval);\n     }\n \n-    String mbIncrementAllocation \u003d\n-        conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n-    if (mbIncrementAllocation !\u003d null) {\n-      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n-          mbIncrementAllocation);\n-    }\n-\n-    String vcoreIncrementAllocation \u003d\n-        conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n-    if (vcoreIncrementAllocation !\u003d null) {\n-      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n-          vcoreIncrementAllocation);\n-    }\n-\n     if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n         FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n       yarnSiteConfig.setBoolean(\n           YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n       preemptionEnabled \u003d true;\n \n       int waitTimeBeforeKill \u003d conf.getInt(\n           FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n           FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n       yarnSiteConfig.setInt(\n           CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n           waitTimeBeforeKill);\n \n       long waitBeforeNextStarvationCheck \u003d conf.getLong(\n           FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n           FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n       yarnSiteConfig.setLong(\n           CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n           waitBeforeNextStarvationCheck);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n         FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n     } else {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n     }\n \n     int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n         FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n     if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n       yarnSiteConfig.setInt(\n           CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n           maxAssign);\n     }\n \n     float localityThresholdNode \u003d conf.getFloat(\n         FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n     if (localityThresholdNode !\u003d\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n       yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n           localityThresholdNode);\n     }\n \n     float localityThresholdRack \u003d conf.getFloat(\n         FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n     if (localityThresholdRack !\u003d\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n       yarnSiteConfig.setFloat(\n           CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n           localityThresholdRack);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n         FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n       autoCreateChildQueues \u003d true;\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n         FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n       sizeBasedWeight \u003d true;\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n         FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n       userAsDefaultQueue \u003d true;\n     }\n \n     if (drfUsed) {\n       yarnSiteConfig.set(\n           CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n           DominantResourceCalculator.class.getCanonicalName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void convertSiteProperties(Configuration conf,\n      Configuration yarnSiteConfig, boolean drfUsed) {\n    yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n        CapacityScheduler.class.getCanonicalName());\n\n    if (conf.getBoolean(\n        FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n        FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n      int interval \u003d conf.getInt(\n          FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n          FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n      yarnSiteConfig.setInt(PREFIX +\n          \"schedule-asynchronously.scheduling-interval-ms\", interval);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n        FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n      yarnSiteConfig.setBoolean(\n          YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      preemptionEnabled \u003d true;\n\n      int waitTimeBeforeKill \u003d conf.getInt(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n          waitTimeBeforeKill);\n\n      long waitBeforeNextStarvationCheck \u003d conf.getLong(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n      yarnSiteConfig.setLong(\n          CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n          waitBeforeNextStarvationCheck);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n        FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n    } else {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n    }\n\n    int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n        FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n    if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n          maxAssign);\n    }\n\n    float localityThresholdNode \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n    if (localityThresholdNode !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n      yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n          localityThresholdNode);\n    }\n\n    float localityThresholdRack \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n    if (localityThresholdRack !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n      yarnSiteConfig.setFloat(\n          CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n          localityThresholdRack);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n        FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n      autoCreateChildQueues \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n        FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n      sizeBasedWeight \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n        FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n      userAsDefaultQueue \u003d true;\n    }\n\n    if (drfUsed) {\n      yarnSiteConfig.set(\n          CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n          DominantResourceCalculator.class.getCanonicalName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSYarnSiteConverter.java",
      "extendedDetails": {}
    },
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
      "commitDate": "28/01/20 6:22 AM",
      "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
          "commitDate": "28/01/20 6:22 AM",
          "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "14/10/19 8:19 AM",
          "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 105.96,
          "commitsBetweenForRepo": 374,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,104 +1,110 @@\n   public void convertSiteProperties(Configuration conf,\n-      Configuration yarnSiteConfig) {\n+      Configuration yarnSiteConfig, boolean drfUsed) {\n     yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n         CapacityScheduler.class.getCanonicalName());\n \n     // TODO: deprecated property, check if necessary\n     if (conf.getBoolean(\n         FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n         FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n       int interval \u003d conf.getInt(\n           FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n           FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n       yarnSiteConfig.setInt(PREFIX +\n           \"schedule-asynchronously.scheduling-interval-ms\", interval);\n     }\n \n     String mbIncrementAllocation \u003d\n         conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n     if (mbIncrementAllocation !\u003d null) {\n       yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n           mbIncrementAllocation);\n     }\n \n     String vcoreIncrementAllocation \u003d\n         conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n     if (vcoreIncrementAllocation !\u003d null) {\n       yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n           vcoreIncrementAllocation);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n         FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n       yarnSiteConfig.setBoolean(\n           YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n       preemptionEnabled \u003d true;\n \n       int waitTimeBeforeKill \u003d conf.getInt(\n           FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n           FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n       yarnSiteConfig.setInt(\n           CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n           waitTimeBeforeKill);\n \n       long waitBeforeNextStarvationCheck \u003d conf.getLong(\n           FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n           FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n       yarnSiteConfig.setLong(\n           CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n           waitBeforeNextStarvationCheck);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n         FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n     } else {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n     }\n \n     int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n         FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n     if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n       yarnSiteConfig.setInt(\n           CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n           maxAssign);\n     }\n \n     float localityThresholdNode \u003d conf.getFloat(\n         FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n     if (localityThresholdNode !\u003d\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n       yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n           localityThresholdNode);\n     }\n \n     float localityThresholdRack \u003d conf.getFloat(\n         FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n     if (localityThresholdRack !\u003d\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n       yarnSiteConfig.setFloat(\n           CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n           localityThresholdRack);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n         FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n       autoCreateChildQueues \u003d true;\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n         FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n       sizeBasedWeight \u003d true;\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n         FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n       userAsDefaultQueue \u003d true;\n     }\n+\n+    if (drfUsed) {\n+      yarnSiteConfig.set(\n+          CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n+          DominantResourceCalculator.class.getCanonicalName());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void convertSiteProperties(Configuration conf,\n      Configuration yarnSiteConfig, boolean drfUsed) {\n    yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n        CapacityScheduler.class.getCanonicalName());\n\n    // TODO: deprecated property, check if necessary\n    if (conf.getBoolean(\n        FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n        FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n      int interval \u003d conf.getInt(\n          FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n          FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n      yarnSiteConfig.setInt(PREFIX +\n          \"schedule-asynchronously.scheduling-interval-ms\", interval);\n    }\n\n    String mbIncrementAllocation \u003d\n        conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n    if (mbIncrementAllocation !\u003d null) {\n      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n          mbIncrementAllocation);\n    }\n\n    String vcoreIncrementAllocation \u003d\n        conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n    if (vcoreIncrementAllocation !\u003d null) {\n      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n          vcoreIncrementAllocation);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n        FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n      yarnSiteConfig.setBoolean(\n          YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      preemptionEnabled \u003d true;\n\n      int waitTimeBeforeKill \u003d conf.getInt(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n          waitTimeBeforeKill);\n\n      long waitBeforeNextStarvationCheck \u003d conf.getLong(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n      yarnSiteConfig.setLong(\n          CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n          waitBeforeNextStarvationCheck);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n        FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n    } else {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n    }\n\n    int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n        FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n    if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n          maxAssign);\n    }\n\n    float localityThresholdNode \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n    if (localityThresholdNode !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n      yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n          localityThresholdNode);\n    }\n\n    float localityThresholdRack \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n    if (localityThresholdRack !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n      yarnSiteConfig.setFloat(\n          CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n          localityThresholdRack);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n        FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n      autoCreateChildQueues \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n        FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n      sizeBasedWeight \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n        FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n      userAsDefaultQueue \u003d true;\n    }\n\n    if (drfUsed) {\n      yarnSiteConfig.set(\n          CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n          DominantResourceCalculator.class.getCanonicalName());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSYarnSiteConverter.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, yarnSiteConfig-Configuration]",
            "newValue": "[conf-Configuration, yarnSiteConfig-Configuration, drfUsed-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
          "commitDate": "28/01/20 6:22 AM",
          "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "14/10/19 8:19 AM",
          "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 105.96,
          "commitsBetweenForRepo": 374,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,104 +1,110 @@\n   public void convertSiteProperties(Configuration conf,\n-      Configuration yarnSiteConfig) {\n+      Configuration yarnSiteConfig, boolean drfUsed) {\n     yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n         CapacityScheduler.class.getCanonicalName());\n \n     // TODO: deprecated property, check if necessary\n     if (conf.getBoolean(\n         FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n         FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n       int interval \u003d conf.getInt(\n           FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n           FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n       yarnSiteConfig.setInt(PREFIX +\n           \"schedule-asynchronously.scheduling-interval-ms\", interval);\n     }\n \n     String mbIncrementAllocation \u003d\n         conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n     if (mbIncrementAllocation !\u003d null) {\n       yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n           mbIncrementAllocation);\n     }\n \n     String vcoreIncrementAllocation \u003d\n         conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n     if (vcoreIncrementAllocation !\u003d null) {\n       yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n           vcoreIncrementAllocation);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n         FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n       yarnSiteConfig.setBoolean(\n           YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n       preemptionEnabled \u003d true;\n \n       int waitTimeBeforeKill \u003d conf.getInt(\n           FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n           FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n       yarnSiteConfig.setInt(\n           CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n           waitTimeBeforeKill);\n \n       long waitBeforeNextStarvationCheck \u003d conf.getLong(\n           FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n           FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n       yarnSiteConfig.setLong(\n           CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n           waitBeforeNextStarvationCheck);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n         FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n     } else {\n       yarnSiteConfig.setBoolean(\n           CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n     }\n \n     int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n         FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n     if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n       yarnSiteConfig.setInt(\n           CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n           maxAssign);\n     }\n \n     float localityThresholdNode \u003d conf.getFloat(\n         FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n     if (localityThresholdNode !\u003d\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n       yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n           localityThresholdNode);\n     }\n \n     float localityThresholdRack \u003d conf.getFloat(\n         FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n     if (localityThresholdRack !\u003d\n         FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n       yarnSiteConfig.setFloat(\n           CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n           localityThresholdRack);\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n         FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n       autoCreateChildQueues \u003d true;\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n         FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n       sizeBasedWeight \u003d true;\n     }\n \n     if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n         FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n       userAsDefaultQueue \u003d true;\n     }\n+\n+    if (drfUsed) {\n+      yarnSiteConfig.set(\n+          CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n+          DominantResourceCalculator.class.getCanonicalName());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void convertSiteProperties(Configuration conf,\n      Configuration yarnSiteConfig, boolean drfUsed) {\n    yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n        CapacityScheduler.class.getCanonicalName());\n\n    // TODO: deprecated property, check if necessary\n    if (conf.getBoolean(\n        FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n        FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n      int interval \u003d conf.getInt(\n          FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n          FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n      yarnSiteConfig.setInt(PREFIX +\n          \"schedule-asynchronously.scheduling-interval-ms\", interval);\n    }\n\n    String mbIncrementAllocation \u003d\n        conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n    if (mbIncrementAllocation !\u003d null) {\n      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n          mbIncrementAllocation);\n    }\n\n    String vcoreIncrementAllocation \u003d\n        conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n    if (vcoreIncrementAllocation !\u003d null) {\n      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n          vcoreIncrementAllocation);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n        FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n      yarnSiteConfig.setBoolean(\n          YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      preemptionEnabled \u003d true;\n\n      int waitTimeBeforeKill \u003d conf.getInt(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n          waitTimeBeforeKill);\n\n      long waitBeforeNextStarvationCheck \u003d conf.getLong(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n      yarnSiteConfig.setLong(\n          CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n          waitBeforeNextStarvationCheck);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n        FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n    } else {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n    }\n\n    int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n        FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n    if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n          maxAssign);\n    }\n\n    float localityThresholdNode \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n    if (localityThresholdNode !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n      yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n          localityThresholdNode);\n    }\n\n    float localityThresholdRack \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n    if (localityThresholdRack !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n      yarnSiteConfig.setFloat(\n          CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n          localityThresholdRack);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n        FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n      autoCreateChildQueues \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n        FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n      sizeBasedWeight \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n        FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n      userAsDefaultQueue \u003d true;\n    }\n\n    if (drfUsed) {\n      yarnSiteConfig.set(\n          CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,\n          DominantResourceCalculator.class.getCanonicalName());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSYarnSiteConverter.java",
          "extendedDetails": {}
        }
      ]
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,104 @@\n+  public void convertSiteProperties(Configuration conf,\n+      Configuration yarnSiteConfig) {\n+    yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n+        CapacityScheduler.class.getCanonicalName());\n+\n+    // TODO: deprecated property, check if necessary\n+    if (conf.getBoolean(\n+        FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n+        FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n+      yarnSiteConfig.setBoolean(\n+          CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n+      int interval \u003d conf.getInt(\n+          FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n+          FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n+      yarnSiteConfig.setInt(PREFIX +\n+          \"schedule-asynchronously.scheduling-interval-ms\", interval);\n+    }\n+\n+    String mbIncrementAllocation \u003d\n+        conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n+    if (mbIncrementAllocation !\u003d null) {\n+      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n+          mbIncrementAllocation);\n+    }\n+\n+    String vcoreIncrementAllocation \u003d\n+        conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n+    if (vcoreIncrementAllocation !\u003d null) {\n+      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n+          vcoreIncrementAllocation);\n+    }\n+\n+    if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n+        FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n+      yarnSiteConfig.setBoolean(\n+          YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n+      preemptionEnabled \u003d true;\n+\n+      int waitTimeBeforeKill \u003d conf.getInt(\n+          FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n+          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n+      yarnSiteConfig.setInt(\n+          CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n+          waitTimeBeforeKill);\n+\n+      long waitBeforeNextStarvationCheck \u003d conf.getLong(\n+          FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n+          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n+      yarnSiteConfig.setLong(\n+          CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n+          waitBeforeNextStarvationCheck);\n+    }\n+\n+    if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n+        FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n+      yarnSiteConfig.setBoolean(\n+          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n+    } else {\n+      yarnSiteConfig.setBoolean(\n+          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n+    }\n+\n+    int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n+        FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n+    if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n+      yarnSiteConfig.setInt(\n+          CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n+          maxAssign);\n+    }\n+\n+    float localityThresholdNode \u003d conf.getFloat(\n+        FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n+        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n+    if (localityThresholdNode !\u003d\n+        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n+      yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n+          localityThresholdNode);\n+    }\n+\n+    float localityThresholdRack \u003d conf.getFloat(\n+        FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n+        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n+    if (localityThresholdRack !\u003d\n+        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n+      yarnSiteConfig.setFloat(\n+          CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n+          localityThresholdRack);\n+    }\n+\n+    if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n+        FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n+      autoCreateChildQueues \u003d true;\n+    }\n+\n+    if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n+        FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n+      sizeBasedWeight \u003d true;\n+    }\n+\n+    if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n+        FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n+      userAsDefaultQueue \u003d true;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void convertSiteProperties(Configuration conf,\n      Configuration yarnSiteConfig) {\n    yarnSiteConfig.set(YarnConfiguration.RM_SCHEDULER,\n        CapacityScheduler.class.getCanonicalName());\n\n    // TODO: deprecated property, check if necessary\n    if (conf.getBoolean(\n        FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,\n        FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_ENABLED)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE, true);\n      int interval \u003d conf.getInt(\n          FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_SLEEP_MS,\n          FairSchedulerConfiguration.DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS);\n      yarnSiteConfig.setInt(PREFIX +\n          \"schedule-asynchronously.scheduling-interval-ms\", interval);\n    }\n\n    String mbIncrementAllocation \u003d\n        conf.get(\"yarn.resource-types.memory-mb.increment-allocation\");\n    if (mbIncrementAllocation !\u003d null) {\n      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-mb\",\n          mbIncrementAllocation);\n    }\n\n    String vcoreIncrementAllocation \u003d\n        conf.get(\"yarn.resource-types.vcores.increment-allocation\");\n    if (vcoreIncrementAllocation !\u003d null) {\n      yarnSiteConfig.set(\"yarn.scheduler.minimum-allocation-vcores\",\n          vcoreIncrementAllocation);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.PREEMPTION,\n        FairSchedulerConfiguration.DEFAULT_PREEMPTION)) {\n      yarnSiteConfig.setBoolean(\n          YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS, true);\n      preemptionEnabled \u003d true;\n\n      int waitTimeBeforeKill \u003d conf.getInt(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_KILL);\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.PREEMPTION_WAIT_TIME_BEFORE_KILL,\n          waitTimeBeforeKill);\n\n      long waitBeforeNextStarvationCheck \u003d conf.getLong(\n          FairSchedulerConfiguration.WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS,\n          FairSchedulerConfiguration.DEFAULT_WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS);\n      yarnSiteConfig.setLong(\n          CapacitySchedulerConfiguration.PREEMPTION_MONITORING_INTERVAL,\n          waitBeforeNextStarvationCheck);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,\n        FairSchedulerConfiguration.DEFAULT_ASSIGN_MULTIPLE)) {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, true);\n    } else {\n      yarnSiteConfig.setBoolean(\n          CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED, false);\n    }\n\n    int maxAssign \u003d conf.getInt(FairSchedulerConfiguration.MAX_ASSIGN,\n        FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN);\n    if (maxAssign !\u003d FairSchedulerConfiguration.DEFAULT_MAX_ASSIGN) {\n      yarnSiteConfig.setInt(\n          CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,\n          maxAssign);\n    }\n\n    float localityThresholdNode \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_NODE,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE);\n    if (localityThresholdNode !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_NODE) {\n      yarnSiteConfig.setFloat(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,\n          localityThresholdNode);\n    }\n\n    float localityThresholdRack \u003d conf.getFloat(\n        FairSchedulerConfiguration.LOCALITY_THRESHOLD_RACK,\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK);\n    if (localityThresholdRack !\u003d\n        FairSchedulerConfiguration.DEFAULT_LOCALITY_THRESHOLD_RACK) {\n      yarnSiteConfig.setFloat(\n          CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,\n          localityThresholdRack);\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,\n        FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS)) {\n      autoCreateChildQueues \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.SIZE_BASED_WEIGHT,\n        FairSchedulerConfiguration.DEFAULT_SIZE_BASED_WEIGHT)) {\n      sizeBasedWeight \u003d true;\n    }\n\n    if (conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,\n        FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE)) {\n      userAsDefaultQueue \u003d true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSYarnSiteConverter.java"
    }
  }
}