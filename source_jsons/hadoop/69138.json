{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CompressionEmulationUtil.java",
  "functionName": "configureCompressionEmulation",
  "functionId": "configureCompressionEmulation___source-Configuration__target-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
  "functionStartLine": 530,
  "functionEndLine": 577,
  "numCommitsSeen": 9,
  "timeTaken": 4666,
  "changeHistory": [
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void configureCompressionEmulation(Configuration source, \n                                            Configuration target) {\n    // enable output compression\n    target.setBoolean(FileOutputFormat.COMPRESS, \n        source.getBoolean(FileOutputFormat.COMPRESS, false));\n\n    // set the job output compression codec\n    String jobOutputCompressionCodec \u003d \n      source.get(FileOutputFormat.COMPRESS_CODEC);\n    if (jobOutputCompressionCodec !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_CODEC, jobOutputCompressionCodec);\n    }\n\n    // set the job output compression type\n    String jobOutputCompressionType \u003d \n      source.get(FileOutputFormat.COMPRESS_TYPE);\n    if (jobOutputCompressionType !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_TYPE, jobOutputCompressionType);\n    }\n\n    // enable map output compression\n    target.setBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS,\n        source.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false));\n\n    // set the map output compression codecs\n    String mapOutputCompressionCodec \u003d \n      source.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n    if (mapOutputCompressionCodec !\u003d null) {\n      target.set(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC, \n                 mapOutputCompressionCodec);\n    }\n\n    // enable input decompression\n    //TODO replace with mapInputBytes and hdfsBytesRead\n    Path[] inputs \u003d \n      org.apache.hadoop.mapred.FileInputFormat\n         .getInputPaths(new JobConf(source));\n    boolean needsCompressedInput \u003d false;\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(source);\n    for (Path input : inputs) {\n      CompressionCodec codec \u003d compressionCodecs.getCodec(input);\n      if (codec !\u003d null) {\n        needsCompressedInput \u003d true;\n      }\n    }\n    setInputCompressionEmulationEnabled(target, needsCompressedInput);\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void configureCompressionEmulation(Configuration source, \n                                            Configuration target) {\n    // enable output compression\n    target.setBoolean(FileOutputFormat.COMPRESS, \n        source.getBoolean(FileOutputFormat.COMPRESS, false));\n\n    // set the job output compression codec\n    String jobOutputCompressionCodec \u003d \n      source.get(FileOutputFormat.COMPRESS_CODEC);\n    if (jobOutputCompressionCodec !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_CODEC, jobOutputCompressionCodec);\n    }\n\n    // set the job output compression type\n    String jobOutputCompressionType \u003d \n      source.get(FileOutputFormat.COMPRESS_TYPE);\n    if (jobOutputCompressionType !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_TYPE, jobOutputCompressionType);\n    }\n\n    // enable map output compression\n    target.setBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS,\n        source.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false));\n\n    // set the map output compression codecs\n    String mapOutputCompressionCodec \u003d \n      source.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n    if (mapOutputCompressionCodec !\u003d null) {\n      target.set(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC, \n                 mapOutputCompressionCodec);\n    }\n\n    // enable input decompression\n    //TODO replace with mapInputBytes and hdfsBytesRead\n    Path[] inputs \u003d \n      org.apache.hadoop.mapred.FileInputFormat\n         .getInputPaths(new JobConf(source));\n    boolean needsCompressedInput \u003d false;\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(source);\n    for (Path input : inputs) {\n      CompressionCodec codec \u003d compressionCodecs.getCodec(input);\n      if (codec !\u003d null) {\n        needsCompressedInput \u003d true;\n      }\n    }\n    setInputCompressionEmulationEnabled(target, needsCompressedInput);\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void configureCompressionEmulation(Configuration source, \n                                            Configuration target) {\n    // enable output compression\n    target.setBoolean(FileOutputFormat.COMPRESS, \n        source.getBoolean(FileOutputFormat.COMPRESS, false));\n\n    // set the job output compression codec\n    String jobOutputCompressionCodec \u003d \n      source.get(FileOutputFormat.COMPRESS_CODEC);\n    if (jobOutputCompressionCodec !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_CODEC, jobOutputCompressionCodec);\n    }\n\n    // set the job output compression type\n    String jobOutputCompressionType \u003d \n      source.get(FileOutputFormat.COMPRESS_TYPE);\n    if (jobOutputCompressionType !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_TYPE, jobOutputCompressionType);\n    }\n\n    // enable map output compression\n    target.setBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS,\n        source.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false));\n\n    // set the map output compression codecs\n    String mapOutputCompressionCodec \u003d \n      source.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n    if (mapOutputCompressionCodec !\u003d null) {\n      target.set(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC, \n                 mapOutputCompressionCodec);\n    }\n\n    // enable input decompression\n    //TODO replace with mapInputBytes and hdfsBytesRead\n    Path[] inputs \u003d \n      org.apache.hadoop.mapred.FileInputFormat\n         .getInputPaths(new JobConf(source));\n    boolean needsCompressedInput \u003d false;\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(source);\n    for (Path input : inputs) {\n      CompressionCodec codec \u003d compressionCodecs.getCodec(input);\n      if (codec !\u003d null) {\n        needsCompressedInput \u003d true;\n      }\n    }\n    setInputCompressionEmulationEnabled(target, needsCompressedInput);\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,48 @@\n+  static void configureCompressionEmulation(Configuration source, \n+                                            Configuration target) {\n+    // enable output compression\n+    target.setBoolean(FileOutputFormat.COMPRESS, \n+        source.getBoolean(FileOutputFormat.COMPRESS, false));\n+\n+    // set the job output compression codec\n+    String jobOutputCompressionCodec \u003d \n+      source.get(FileOutputFormat.COMPRESS_CODEC);\n+    if (jobOutputCompressionCodec !\u003d null) {\n+      target.set(FileOutputFormat.COMPRESS_CODEC, jobOutputCompressionCodec);\n+    }\n+\n+    // set the job output compression type\n+    String jobOutputCompressionType \u003d \n+      source.get(FileOutputFormat.COMPRESS_TYPE);\n+    if (jobOutputCompressionType !\u003d null) {\n+      target.set(FileOutputFormat.COMPRESS_TYPE, jobOutputCompressionType);\n+    }\n+\n+    // enable map output compression\n+    target.setBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS,\n+        source.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false));\n+\n+    // set the map output compression codecs\n+    String mapOutputCompressionCodec \u003d \n+      source.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n+    if (mapOutputCompressionCodec !\u003d null) {\n+      target.set(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC, \n+                 mapOutputCompressionCodec);\n+    }\n+\n+    // enable input decompression\n+    //TODO replace with mapInputBytes and hdfsBytesRead\n+    Path[] inputs \u003d \n+      org.apache.hadoop.mapred.FileInputFormat\n+         .getInputPaths(new JobConf(source));\n+    boolean needsCompressedInput \u003d false;\n+    CompressionCodecFactory compressionCodecs \u003d \n+      new CompressionCodecFactory(source);\n+    for (Path input : inputs) {\n+      CompressionCodec codec \u003d compressionCodecs.getCodec(input);\n+      if (codec !\u003d null) {\n+        needsCompressedInput \u003d true;\n+      }\n+    }\n+    setInputCompressionEmulationEnabled(target, needsCompressedInput);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void configureCompressionEmulation(Configuration source, \n                                            Configuration target) {\n    // enable output compression\n    target.setBoolean(FileOutputFormat.COMPRESS, \n        source.getBoolean(FileOutputFormat.COMPRESS, false));\n\n    // set the job output compression codec\n    String jobOutputCompressionCodec \u003d \n      source.get(FileOutputFormat.COMPRESS_CODEC);\n    if (jobOutputCompressionCodec !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_CODEC, jobOutputCompressionCodec);\n    }\n\n    // set the job output compression type\n    String jobOutputCompressionType \u003d \n      source.get(FileOutputFormat.COMPRESS_TYPE);\n    if (jobOutputCompressionType !\u003d null) {\n      target.set(FileOutputFormat.COMPRESS_TYPE, jobOutputCompressionType);\n    }\n\n    // enable map output compression\n    target.setBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS,\n        source.getBoolean(MRJobConfig.MAP_OUTPUT_COMPRESS, false));\n\n    // set the map output compression codecs\n    String mapOutputCompressionCodec \u003d \n      source.get(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC);\n    if (mapOutputCompressionCodec !\u003d null) {\n      target.set(MRJobConfig.MAP_OUTPUT_COMPRESS_CODEC, \n                 mapOutputCompressionCodec);\n    }\n\n    // enable input decompression\n    //TODO replace with mapInputBytes and hdfsBytesRead\n    Path[] inputs \u003d \n      org.apache.hadoop.mapred.FileInputFormat\n         .getInputPaths(new JobConf(source));\n    boolean needsCompressedInput \u003d false;\n    CompressionCodecFactory compressionCodecs \u003d \n      new CompressionCodecFactory(source);\n    for (Path input : inputs) {\n      CompressionCodec codec \u003d compressionCodecs.getCodec(input);\n      if (codec !\u003d null) {\n        needsCompressedInput \u003d true;\n      }\n    }\n    setInputCompressionEmulationEnabled(target, needsCompressedInput);\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/CompressionEmulationUtil.java"
    }
  }
}