{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapTask.java",
  "functionName": "write",
  "functionId": "write___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
  "functionStartLine": 1376,
  "functionEndLine": 1471,
  "numCommitsSeen": 36,
  "timeTaken": 9599,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public void write(byte b[], int off, int len)\n          throws IOException {\n        // must always verify the invariant that at least METASIZE bytes are\n        // available beyond kvindex, even when len \u003d\u003d 0\n        bufferRemaining -\u003d len;\n        if (bufferRemaining \u003c\u003d 0) {\n          // writing these bytes could exhaust available buffer space or fill\n          // the buffer to soft limit. check if spill or blocking are necessary\n          boolean blockwrite \u003d false;\n          spillLock.lock();\n          try {\n            do {\n              checkSpillException();\n\n              final int kvbidx \u003d 4 * kvindex;\n              final int kvbend \u003d 4 * kvend;\n              // ser distance to key index\n              final int distkvi \u003d distanceTo(bufindex, kvbidx);\n              // ser distance to spill end index\n              final int distkve \u003d distanceTo(bufindex, kvbend);\n\n              // if kvindex is closer than kvend, then a spill is neither in\n              // progress nor complete and reset since the lock was held. The\n              // write should block only if there is insufficient space to\n              // complete the current write, write the metadata for this record,\n              // and write the metadata for the next record. If kvend is closer,\n              // then the write should block if there is too little space for\n              // either the metadata or the current write. Note that collect\n              // ensures its metadata requirement with a zero-length write\n              blockwrite \u003d distkvi \u003c\u003d distkve\n                ? distkvi \u003c\u003d len + 2 * METASIZE\n                : distkve \u003c\u003d len || distanceTo(bufend, kvbidx) \u003c 2 * METASIZE;\n\n              if (!spillInProgress) {\n                if (blockwrite) {\n                  if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n                      equator - (equator % METASIZE)) {\n                    // spill finished, reclaim space\n                    // need to use meta exclusively; zero-len rec \u0026 100% spill\n                    // pcnt would fail\n                    resetSpill(); // resetSpill doesn\u0027t move bufindex, kvindex\n                    bufferRemaining \u003d Math.min(\n                        distkvi - 2 * METASIZE,\n                        softLimit - distanceTo(kvbidx, bufindex)) - len;\n                    continue;\n                  }\n                  // we have records we can spill; only spill if blocked\n                  if (kvindex !\u003d kvend) {\n                    startSpill();\n                    // Blocked on this write, waiting for the spill just\n                    // initiated to finish. Instead of repositioning the marker\n                    // and copying the partial record, we set the record start\n                    // to be the new equator\n                    setEquator(bufmark);\n                  } else {\n                    // We have no buffered records, and this record is too large\n                    // to write into kvbuffer. We must spill it directly from\n                    // collect\n                    final int size \u003d distanceTo(bufstart, bufindex) + len;\n                    setEquator(0);\n                    bufstart \u003d bufend \u003d bufindex \u003d equator;\n                    kvstart \u003d kvend \u003d kvindex;\n                    bufvoid \u003d kvbuffer.length;\n                    throw new MapBufferTooSmallException(size + \" bytes\");\n                  }\n                }\n              }\n\n              if (blockwrite) {\n                // wait for spill\n                try {\n                  while (spillInProgress) {\n                    reporter.progress();\n                    spillDone.await();\n                  }\n                } catch (InterruptedException e) {\n                    throw new IOException(\n                        \"Buffer interrupted while waiting for the writer\", e);\n                }\n              }\n            } while (blockwrite);\n          } finally {\n            spillLock.unlock();\n          }\n        }\n        // here, we know that we have sufficient space to write\n        if (bufindex + len \u003e bufvoid) {\n          final int gaplen \u003d bufvoid - bufindex;\n          System.arraycopy(b, off, kvbuffer, bufindex, gaplen);\n          len -\u003d gaplen;\n          off +\u003d gaplen;\n          bufindex \u003d 0;\n        }\n        System.arraycopy(b, off, kvbuffer, bufindex, len);\n        bufindex +\u003d len;\n      }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public void write(byte b[], int off, int len)\n          throws IOException {\n        // must always verify the invariant that at least METASIZE bytes are\n        // available beyond kvindex, even when len \u003d\u003d 0\n        bufferRemaining -\u003d len;\n        if (bufferRemaining \u003c\u003d 0) {\n          // writing these bytes could exhaust available buffer space or fill\n          // the buffer to soft limit. check if spill or blocking are necessary\n          boolean blockwrite \u003d false;\n          spillLock.lock();\n          try {\n            do {\n              checkSpillException();\n\n              final int kvbidx \u003d 4 * kvindex;\n              final int kvbend \u003d 4 * kvend;\n              // ser distance to key index\n              final int distkvi \u003d distanceTo(bufindex, kvbidx);\n              // ser distance to spill end index\n              final int distkve \u003d distanceTo(bufindex, kvbend);\n\n              // if kvindex is closer than kvend, then a spill is neither in\n              // progress nor complete and reset since the lock was held. The\n              // write should block only if there is insufficient space to\n              // complete the current write, write the metadata for this record,\n              // and write the metadata for the next record. If kvend is closer,\n              // then the write should block if there is too little space for\n              // either the metadata or the current write. Note that collect\n              // ensures its metadata requirement with a zero-length write\n              blockwrite \u003d distkvi \u003c\u003d distkve\n                ? distkvi \u003c\u003d len + 2 * METASIZE\n                : distkve \u003c\u003d len || distanceTo(bufend, kvbidx) \u003c 2 * METASIZE;\n\n              if (!spillInProgress) {\n                if (blockwrite) {\n                  if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n                      equator - (equator % METASIZE)) {\n                    // spill finished, reclaim space\n                    // need to use meta exclusively; zero-len rec \u0026 100% spill\n                    // pcnt would fail\n                    resetSpill(); // resetSpill doesn\u0027t move bufindex, kvindex\n                    bufferRemaining \u003d Math.min(\n                        distkvi - 2 * METASIZE,\n                        softLimit - distanceTo(kvbidx, bufindex)) - len;\n                    continue;\n                  }\n                  // we have records we can spill; only spill if blocked\n                  if (kvindex !\u003d kvend) {\n                    startSpill();\n                    // Blocked on this write, waiting for the spill just\n                    // initiated to finish. Instead of repositioning the marker\n                    // and copying the partial record, we set the record start\n                    // to be the new equator\n                    setEquator(bufmark);\n                  } else {\n                    // We have no buffered records, and this record is too large\n                    // to write into kvbuffer. We must spill it directly from\n                    // collect\n                    final int size \u003d distanceTo(bufstart, bufindex) + len;\n                    setEquator(0);\n                    bufstart \u003d bufend \u003d bufindex \u003d equator;\n                    kvstart \u003d kvend \u003d kvindex;\n                    bufvoid \u003d kvbuffer.length;\n                    throw new MapBufferTooSmallException(size + \" bytes\");\n                  }\n                }\n              }\n\n              if (blockwrite) {\n                // wait for spill\n                try {\n                  while (spillInProgress) {\n                    reporter.progress();\n                    spillDone.await();\n                  }\n                } catch (InterruptedException e) {\n                    throw new IOException(\n                        \"Buffer interrupted while waiting for the writer\", e);\n                }\n              }\n            } while (blockwrite);\n          } finally {\n            spillLock.unlock();\n          }\n        }\n        // here, we know that we have sufficient space to write\n        if (bufindex + len \u003e bufvoid) {\n          final int gaplen \u003d bufvoid - bufindex;\n          System.arraycopy(b, off, kvbuffer, bufindex, gaplen);\n          len -\u003d gaplen;\n          off +\u003d gaplen;\n          bufindex \u003d 0;\n        }\n        System.arraycopy(b, off, kvbuffer, bufindex, len);\n        bufindex +\u003d len;\n      }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
        "oldMethodName": "write",
        "newMethodName": "write"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,96 @@\n+      public void write(byte b[], int off, int len)\n+          throws IOException {\n+        // must always verify the invariant that at least METASIZE bytes are\n+        // available beyond kvindex, even when len \u003d\u003d 0\n+        bufferRemaining -\u003d len;\n+        if (bufferRemaining \u003c\u003d 0) {\n+          // writing these bytes could exhaust available buffer space or fill\n+          // the buffer to soft limit. check if spill or blocking are necessary\n+          boolean blockwrite \u003d false;\n+          spillLock.lock();\n+          try {\n+            do {\n+              checkSpillException();\n+\n+              final int kvbidx \u003d 4 * kvindex;\n+              final int kvbend \u003d 4 * kvend;\n+              // ser distance to key index\n+              final int distkvi \u003d distanceTo(bufindex, kvbidx);\n+              // ser distance to spill end index\n+              final int distkve \u003d distanceTo(bufindex, kvbend);\n+\n+              // if kvindex is closer than kvend, then a spill is neither in\n+              // progress nor complete and reset since the lock was held. The\n+              // write should block only if there is insufficient space to\n+              // complete the current write, write the metadata for this record,\n+              // and write the metadata for the next record. If kvend is closer,\n+              // then the write should block if there is too little space for\n+              // either the metadata or the current write. Note that collect\n+              // ensures its metadata requirement with a zero-length write\n+              blockwrite \u003d distkvi \u003c\u003d distkve\n+                ? distkvi \u003c\u003d len + 2 * METASIZE\n+                : distkve \u003c\u003d len || distanceTo(bufend, kvbidx) \u003c 2 * METASIZE;\n+\n+              if (!spillInProgress) {\n+                if (blockwrite) {\n+                  if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n+                      equator - (equator % METASIZE)) {\n+                    // spill finished, reclaim space\n+                    // need to use meta exclusively; zero-len rec \u0026 100% spill\n+                    // pcnt would fail\n+                    resetSpill(); // resetSpill doesn\u0027t move bufindex, kvindex\n+                    bufferRemaining \u003d Math.min(\n+                        distkvi - 2 * METASIZE,\n+                        softLimit - distanceTo(kvbidx, bufindex)) - len;\n+                    continue;\n+                  }\n+                  // we have records we can spill; only spill if blocked\n+                  if (kvindex !\u003d kvend) {\n+                    startSpill();\n+                    // Blocked on this write, waiting for the spill just\n+                    // initiated to finish. Instead of repositioning the marker\n+                    // and copying the partial record, we set the record start\n+                    // to be the new equator\n+                    setEquator(bufmark);\n+                  } else {\n+                    // We have no buffered records, and this record is too large\n+                    // to write into kvbuffer. We must spill it directly from\n+                    // collect\n+                    final int size \u003d distanceTo(bufstart, bufindex) + len;\n+                    setEquator(0);\n+                    bufstart \u003d bufend \u003d bufindex \u003d equator;\n+                    kvstart \u003d kvend \u003d kvindex;\n+                    bufvoid \u003d kvbuffer.length;\n+                    throw new MapBufferTooSmallException(size + \" bytes\");\n+                  }\n+                }\n+              }\n+\n+              if (blockwrite) {\n+                // wait for spill\n+                try {\n+                  while (spillInProgress) {\n+                    reporter.progress();\n+                    spillDone.await();\n+                  }\n+                } catch (InterruptedException e) {\n+                    throw new IOException(\n+                        \"Buffer interrupted while waiting for the writer\", e);\n+                }\n+              }\n+            } while (blockwrite);\n+          } finally {\n+            spillLock.unlock();\n+          }\n+        }\n+        // here, we know that we have sufficient space to write\n+        if (bufindex + len \u003e bufvoid) {\n+          final int gaplen \u003d bufvoid - bufindex;\n+          System.arraycopy(b, off, kvbuffer, bufindex, gaplen);\n+          len -\u003d gaplen;\n+          off +\u003d gaplen;\n+          bufindex \u003d 0;\n+        }\n+        System.arraycopy(b, off, kvbuffer, bufindex, len);\n+        bufindex +\u003d len;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public void write(byte b[], int off, int len)\n          throws IOException {\n        // must always verify the invariant that at least METASIZE bytes are\n        // available beyond kvindex, even when len \u003d\u003d 0\n        bufferRemaining -\u003d len;\n        if (bufferRemaining \u003c\u003d 0) {\n          // writing these bytes could exhaust available buffer space or fill\n          // the buffer to soft limit. check if spill or blocking are necessary\n          boolean blockwrite \u003d false;\n          spillLock.lock();\n          try {\n            do {\n              checkSpillException();\n\n              final int kvbidx \u003d 4 * kvindex;\n              final int kvbend \u003d 4 * kvend;\n              // ser distance to key index\n              final int distkvi \u003d distanceTo(bufindex, kvbidx);\n              // ser distance to spill end index\n              final int distkve \u003d distanceTo(bufindex, kvbend);\n\n              // if kvindex is closer than kvend, then a spill is neither in\n              // progress nor complete and reset since the lock was held. The\n              // write should block only if there is insufficient space to\n              // complete the current write, write the metadata for this record,\n              // and write the metadata for the next record. If kvend is closer,\n              // then the write should block if there is too little space for\n              // either the metadata or the current write. Note that collect\n              // ensures its metadata requirement with a zero-length write\n              blockwrite \u003d distkvi \u003c\u003d distkve\n                ? distkvi \u003c\u003d len + 2 * METASIZE\n                : distkve \u003c\u003d len || distanceTo(bufend, kvbidx) \u003c 2 * METASIZE;\n\n              if (!spillInProgress) {\n                if (blockwrite) {\n                  if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n                      equator - (equator % METASIZE)) {\n                    // spill finished, reclaim space\n                    // need to use meta exclusively; zero-len rec \u0026 100% spill\n                    // pcnt would fail\n                    resetSpill(); // resetSpill doesn\u0027t move bufindex, kvindex\n                    bufferRemaining \u003d Math.min(\n                        distkvi - 2 * METASIZE,\n                        softLimit - distanceTo(kvbidx, bufindex)) - len;\n                    continue;\n                  }\n                  // we have records we can spill; only spill if blocked\n                  if (kvindex !\u003d kvend) {\n                    startSpill();\n                    // Blocked on this write, waiting for the spill just\n                    // initiated to finish. Instead of repositioning the marker\n                    // and copying the partial record, we set the record start\n                    // to be the new equator\n                    setEquator(bufmark);\n                  } else {\n                    // We have no buffered records, and this record is too large\n                    // to write into kvbuffer. We must spill it directly from\n                    // collect\n                    final int size \u003d distanceTo(bufstart, bufindex) + len;\n                    setEquator(0);\n                    bufstart \u003d bufend \u003d bufindex \u003d equator;\n                    kvstart \u003d kvend \u003d kvindex;\n                    bufvoid \u003d kvbuffer.length;\n                    throw new MapBufferTooSmallException(size + \" bytes\");\n                  }\n                }\n              }\n\n              if (blockwrite) {\n                // wait for spill\n                try {\n                  while (spillInProgress) {\n                    reporter.progress();\n                    spillDone.await();\n                  }\n                } catch (InterruptedException e) {\n                    throw new IOException(\n                        \"Buffer interrupted while waiting for the writer\", e);\n                }\n              }\n            } while (blockwrite);\n          } finally {\n            spillLock.unlock();\n          }\n        }\n        // here, we know that we have sufficient space to write\n        if (bufindex + len \u003e bufvoid) {\n          final int gaplen \u003d bufvoid - bufindex;\n          System.arraycopy(b, off, kvbuffer, bufindex, gaplen);\n          len -\u003d gaplen;\n          off +\u003d gaplen;\n          bufindex \u003d 0;\n        }\n        System.arraycopy(b, off, kvbuffer, bufindex, len);\n        bufindex +\u003d len;\n      }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java"
    }
  }
}