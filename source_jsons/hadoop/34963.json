{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeResourceMonitorImpl.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeResourceMonitorImpl.java",
  "functionStartLine": 140,
  "functionEndLine": 172,
  "numCommitsSeen": 9,
  "timeTaken": 2475,
  "changeHistory": [
    "06f0eb2dce2a7a098f7844682ea6c232d0ddb0be",
    "89d1fd5dac4bccf42d82686e146b02eb60d14736",
    "def12933b38efd5e47c5144b729c1a1496f09229"
  ],
  "changeHistoryShort": {
    "06f0eb2dce2a7a098f7844682ea6c232d0ddb0be": "Ybodychange",
    "89d1fd5dac4bccf42d82686e146b02eb60d14736": "Ybodychange",
    "def12933b38efd5e47c5144b729c1a1496f09229": "Yintroduced"
  },
  "changeHistoryDetails": {
    "06f0eb2dce2a7a098f7844682ea6c232d0ddb0be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7625. Expose NM node/containers resource utilization in JVM metrics. Contributed by Weiwei Yang\n",
      "commitDate": "12/12/17 10:56 AM",
      "commitName": "06f0eb2dce2a7a098f7844682ea6c232d0ddb0be",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 112.45,
      "commitsBetweenForRepo": 945,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,33 @@\n     public void run() {\n       while (true) {\n         // Get node utilization and save it into the health status\n         long pmem \u003d resourceCalculatorPlugin.getPhysicalMemorySize() -\n             resourceCalculatorPlugin.getAvailablePhysicalMemorySize();\n         long vmem \u003d\n             resourceCalculatorPlugin.getVirtualMemorySize()\n                 - resourceCalculatorPlugin.getAvailableVirtualMemorySize();\n         float vcores \u003d resourceCalculatorPlugin.getNumVCoresUsed();\n         nodeUtilization \u003d\n             ResourceUtilization.newInstance(\n                 (int) (pmem \u003e\u003e 20), // B -\u003e MB\n                 (int) (vmem \u003e\u003e 20), // B -\u003e MB\n                 vcores); // Used Virtual Cores\n \n+        // Publish the node utilization metrics to node manager\n+        // metrics system.\n+        NodeManagerMetrics nmMetrics \u003d nmContext.getNodeManagerMetrics();\n+        if (nmMetrics !\u003d null) {\n+          nmMetrics.setNodeUsedMemGB(nodeUtilization.getPhysicalMemory());\n+          nmMetrics.setNodeUsedVMemGB(nodeUtilization.getVirtualMemory());\n+          nmMetrics.setNodeCpuUtilization(nodeUtilization.getCPU());\n+        }\n+\n         try {\n           Thread.sleep(monitoringInterval);\n         } catch (InterruptedException e) {\n           LOG.warn(NodeResourceMonitorImpl.class.getName()\n               + \" is interrupted. Exiting.\");\n           break;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (true) {\n        // Get node utilization and save it into the health status\n        long pmem \u003d resourceCalculatorPlugin.getPhysicalMemorySize() -\n            resourceCalculatorPlugin.getAvailablePhysicalMemorySize();\n        long vmem \u003d\n            resourceCalculatorPlugin.getVirtualMemorySize()\n                - resourceCalculatorPlugin.getAvailableVirtualMemorySize();\n        float vcores \u003d resourceCalculatorPlugin.getNumVCoresUsed();\n        nodeUtilization \u003d\n            ResourceUtilization.newInstance(\n                (int) (pmem \u003e\u003e 20), // B -\u003e MB\n                (int) (vmem \u003e\u003e 20), // B -\u003e MB\n                vcores); // Used Virtual Cores\n\n        // Publish the node utilization metrics to node manager\n        // metrics system.\n        NodeManagerMetrics nmMetrics \u003d nmContext.getNodeManagerMetrics();\n        if (nmMetrics !\u003d null) {\n          nmMetrics.setNodeUsedMemGB(nodeUtilization.getPhysicalMemory());\n          nmMetrics.setNodeUsedVMemGB(nodeUtilization.getVirtualMemory());\n          nmMetrics.setNodeCpuUtilization(nodeUtilization.getCPU());\n        }\n\n        try {\n          Thread.sleep(monitoringInterval);\n        } catch (InterruptedException e) {\n          LOG.warn(NodeResourceMonitorImpl.class.getName()\n              + \" is interrupted. Exiting.\");\n          break;\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeResourceMonitorImpl.java",
      "extendedDetails": {}
    },
    "89d1fd5dac4bccf42d82686e146b02eb60d14736": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12356. Fix computing CPU usage statistics on Windows. (Inigo Goiri via wangda)\n",
      "commitDate": "19/01/16 5:27 AM",
      "commitName": "89d1fd5dac4bccf42d82686e146b02eb60d14736",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/12/15 1:18 PM",
      "commitNameOld": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 33.67,
      "commitsBetweenForRepo": 190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void run() {\n       while (true) {\n         // Get node utilization and save it into the health status\n         long pmem \u003d resourceCalculatorPlugin.getPhysicalMemorySize() -\n             resourceCalculatorPlugin.getAvailablePhysicalMemorySize();\n         long vmem \u003d\n             resourceCalculatorPlugin.getVirtualMemorySize()\n                 - resourceCalculatorPlugin.getAvailableVirtualMemorySize();\n-        float cpu \u003d resourceCalculatorPlugin.getCpuUsage();\n+        float vcores \u003d resourceCalculatorPlugin.getNumVCoresUsed();\n         nodeUtilization \u003d\n             ResourceUtilization.newInstance(\n                 (int) (pmem \u003e\u003e 20), // B -\u003e MB\n                 (int) (vmem \u003e\u003e 20), // B -\u003e MB\n-                cpu); // 1 CPU at 100% is 1\n+                vcores); // Used Virtual Cores\n \n         try {\n           Thread.sleep(monitoringInterval);\n         } catch (InterruptedException e) {\n           LOG.warn(NodeResourceMonitorImpl.class.getName()\n               + \" is interrupted. Exiting.\");\n           break;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (true) {\n        // Get node utilization and save it into the health status\n        long pmem \u003d resourceCalculatorPlugin.getPhysicalMemorySize() -\n            resourceCalculatorPlugin.getAvailablePhysicalMemorySize();\n        long vmem \u003d\n            resourceCalculatorPlugin.getVirtualMemorySize()\n                - resourceCalculatorPlugin.getAvailableVirtualMemorySize();\n        float vcores \u003d resourceCalculatorPlugin.getNumVCoresUsed();\n        nodeUtilization \u003d\n            ResourceUtilization.newInstance(\n                (int) (pmem \u003e\u003e 20), // B -\u003e MB\n                (int) (vmem \u003e\u003e 20), // B -\u003e MB\n                vcores); // Used Virtual Cores\n\n        try {\n          Thread.sleep(monitoringInterval);\n        } catch (InterruptedException e) {\n          LOG.warn(NodeResourceMonitorImpl.class.getName()\n              + \" is interrupted. Exiting.\");\n          break;\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeResourceMonitorImpl.java",
      "extendedDetails": {}
    },
    "def12933b38efd5e47c5144b729c1a1496f09229": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3534. Collect memory/cpu usage on the node. (Inigo Goiri via kasha)\n",
      "commitDate": "16/08/15 6:24 AM",
      "commitName": "def12933b38efd5e47c5144b729c1a1496f09229",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,24 @@\n+    public void run() {\n+      while (true) {\n+        // Get node utilization and save it into the health status\n+        long pmem \u003d resourceCalculatorPlugin.getPhysicalMemorySize() -\n+            resourceCalculatorPlugin.getAvailablePhysicalMemorySize();\n+        long vmem \u003d\n+            resourceCalculatorPlugin.getVirtualMemorySize()\n+                - resourceCalculatorPlugin.getAvailableVirtualMemorySize();\n+        float cpu \u003d resourceCalculatorPlugin.getCpuUsage();\n+        nodeUtilization \u003d\n+            ResourceUtilization.newInstance(\n+                (int) (pmem \u003e\u003e 20), // B -\u003e MB\n+                (int) (vmem \u003e\u003e 20), // B -\u003e MB\n+                cpu); // 1 CPU at 100% is 1\n+\n+        try {\n+          Thread.sleep(monitoringInterval);\n+        } catch (InterruptedException e) {\n+          LOG.warn(NodeResourceMonitorImpl.class.getName()\n+              + \" is interrupted. Exiting.\");\n+          break;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (true) {\n        // Get node utilization and save it into the health status\n        long pmem \u003d resourceCalculatorPlugin.getPhysicalMemorySize() -\n            resourceCalculatorPlugin.getAvailablePhysicalMemorySize();\n        long vmem \u003d\n            resourceCalculatorPlugin.getVirtualMemorySize()\n                - resourceCalculatorPlugin.getAvailableVirtualMemorySize();\n        float cpu \u003d resourceCalculatorPlugin.getCpuUsage();\n        nodeUtilization \u003d\n            ResourceUtilization.newInstance(\n                (int) (pmem \u003e\u003e 20), // B -\u003e MB\n                (int) (vmem \u003e\u003e 20), // B -\u003e MB\n                cpu); // 1 CPU at 100% is 1\n\n        try {\n          Thread.sleep(monitoringInterval);\n        } catch (InterruptedException e) {\n          LOG.warn(NodeResourceMonitorImpl.class.getName()\n              + \" is interrupted. Exiting.\");\n          break;\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeResourceMonitorImpl.java"
    }
  }
}