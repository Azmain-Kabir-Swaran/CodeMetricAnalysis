{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ViewFs.java",
  "functionName": "listStatus",
  "functionId": "listStatus___f-Path(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
  "functionStartLine": 964,
  "functionEndLine": 998,
  "numCommitsSeen": 36,
  "timeTaken": 3449,
  "changeHistory": [
    "ce4ec7445345eb94c6741d416814a4eac319f0a6",
    "133d7ca76e3d4b60292d57429d4259e80bec650a",
    "ee3d437a33c2106ea416078e722ff6184106a0bc",
    "94225152399e6e89fa7b4cff6d17d33e544329a3",
    "62d28901d62986900385b3a021042f190f5e5575",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "f1c74df922058e88791ed6971bbb96b53f6770f1"
  ],
  "changeHistoryShort": {
    "ce4ec7445345eb94c6741d416814a4eac319f0a6": "Ybodychange",
    "133d7ca76e3d4b60292d57429d4259e80bec650a": "Ybodychange",
    "ee3d437a33c2106ea416078e722ff6184106a0bc": "Ybodychange",
    "94225152399e6e89fa7b4cff6d17d33e544329a3": "Ybodychange",
    "62d28901d62986900385b3a021042f190f5e5575": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "f1c74df922058e88791ed6971bbb96b53f6770f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce4ec7445345eb94c6741d416814a4eac319f0a6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-17024. ListStatus on ViewFS root (ls \"/\") should list the linkFallBack root (configured target root). Contributed by Abhishek Das.\n\n",
      "commitDate": "18/05/20 10:27 PM",
      "commitName": "ce4ec7445345eb94c6741d416814a4eac319f0a6",
      "commitAuthor": "Abhishek Das",
      "commitDateOld": "25/02/19 11:10 PM",
      "commitNameOld": "59ba3552d35fa10614b3b7aec42a0d81bd51b944",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 447.93,
      "commitsBetweenForRepo": 2548,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n     public FileStatus[] listStatus(final Path f) throws AccessControlException,\n         IOException {\n       checkPathIsSlash(f);\n+      FileStatus[] fallbackStatuses \u003d listStatusForFallbackLink();\n       FileStatus[] result \u003d new FileStatus[theInternalDir.getChildren().size()];\n       int i \u003d 0;\n       for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry :\n           theInternalDir.getChildren().entrySet()) {\n         INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n \n         \n         if (inode.isLink()) {\n           INodeLink\u003cAbstractFileSystem\u003e link \u003d \n             (INodeLink\u003cAbstractFileSystem\u003e) inode;\n \n           result[i++] \u003d new FileStatus(0, false, 0, 0,\n             creationTime, creationTime,\n             PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n             link.getTargetLink(),\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         } else {\n           result[i++] \u003d new FileStatus(0, true, 0, 0,\n             creationTime, creationTime,\n             PERMISSION_555, ugi.getShortUserName(), ugi.getGroupNames()[0],\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         }\n       }\n-      return result;\n+      if (fallbackStatuses.length \u003e 0) {\n+        return consolidateFileStatuses(fallbackStatuses, result);\n+      } else {\n+        return result;\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] fallbackStatuses \u003d listStatusForFallbackLink();\n      FileStatus[] result \u003d new FileStatus[theInternalDir.getChildren().size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry :\n          theInternalDir.getChildren().entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode.isLink()) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getShortUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      if (fallbackStatuses.length \u003e 0) {\n        return consolidateFileStatuses(fallbackStatuses, result);\n      } else {\n        return result;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {}
    },
    "133d7ca76e3d4b60292d57429d4259e80bec650a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13055. Implement linkMergeSlash and linkFallback for ViewFileSystem\n",
      "commitDate": "13/10/17 5:43 PM",
      "commitName": "133d7ca76e3d4b60292d57429d4259e80bec650a",
      "commitAuthor": "Manoj Govindassamy",
      "commitDateOld": "05/09/17 11:51 PM",
      "commitNameOld": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 37.74,
      "commitsBetweenForRepo": 361,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public FileStatus[] listStatus(final Path f) throws AccessControlException,\n         IOException {\n       checkPathIsSlash(f);\n-      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n+      FileStatus[] result \u003d new FileStatus[theInternalDir.getChildren().size()];\n       int i \u003d 0;\n-      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n-                                          theInternalDir.children.entrySet()) {\n+      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry :\n+          theInternalDir.getChildren().entrySet()) {\n         INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n \n         \n-        if (inode instanceof INodeLink ) {\n+        if (inode.isLink()) {\n           INodeLink\u003cAbstractFileSystem\u003e link \u003d \n             (INodeLink\u003cAbstractFileSystem\u003e) inode;\n \n           result[i++] \u003d new FileStatus(0, false, 0, 0,\n             creationTime, creationTime,\n             PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n             link.getTargetLink(),\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         } else {\n           result[i++] \u003d new FileStatus(0, true, 0, 0,\n             creationTime, creationTime,\n             PERMISSION_555, ugi.getShortUserName(), ugi.getGroupNames()[0],\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         }\n       }\n       return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.getChildren().size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry :\n          theInternalDir.getChildren().entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode.isLink()) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getShortUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {}
    },
    "ee3d437a33c2106ea416078e722ff6184106a0bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13820. Replace ugi.getUsername() with ugi.getShortUserName() in viewFS. Contributed By Brahma Reddy Battula.\n",
      "commitDate": "25/11/16 6:24 AM",
      "commitName": "ee3d437a33c2106ea416078e722ff6184106a0bc",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "27/10/16 7:16 AM",
      "commitNameOld": "0c837db8a874079dd5db83a7eef9c4d2b9d0e9ff",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 29.01,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public FileStatus[] listStatus(final Path f) throws AccessControlException,\n         IOException {\n       checkPathIsSlash(f);\n       FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n       int i \u003d 0;\n       for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                           theInternalDir.children.entrySet()) {\n         INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n \n         \n         if (inode instanceof INodeLink ) {\n           INodeLink\u003cAbstractFileSystem\u003e link \u003d \n             (INodeLink\u003cAbstractFileSystem\u003e) inode;\n \n           result[i++] \u003d new FileStatus(0, false, 0, 0,\n             creationTime, creationTime,\n-            PERMISSION_555, ugi.getUserName(), ugi.getPrimaryGroupName(),\n+            PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n             link.getTargetLink(),\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         } else {\n           result[i++] \u003d new FileStatus(0, true, 0, 0,\n             creationTime, creationTime,\n-            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n+            PERMISSION_555, ugi.getShortUserName(), ugi.getGroupNames()[0],\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         }\n       }\n       return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getShortUserName(), ugi.getPrimaryGroupName(),\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getShortUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {}
    },
    "94225152399e6e89fa7b4cff6d17d33e544329a3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13442. Optimize UGI group lookups. Contributed by Daryn Sharp.\n",
      "commitDate": "04/08/16 8:45 AM",
      "commitName": "94225152399e6e89fa7b4cff6d17d33e544329a3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "21/04/16 8:17 PM",
      "commitNameOld": "4a043b3fec702f3e91525a20f5f36657e9fbf8df",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 104.52,
      "commitsBetweenForRepo": 816,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public FileStatus[] listStatus(final Path f) throws AccessControlException,\n         IOException {\n       checkPathIsSlash(f);\n       FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n       int i \u003d 0;\n       for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                           theInternalDir.children.entrySet()) {\n         INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n \n         \n         if (inode instanceof INodeLink ) {\n           INodeLink\u003cAbstractFileSystem\u003e link \u003d \n             (INodeLink\u003cAbstractFileSystem\u003e) inode;\n \n           result[i++] \u003d new FileStatus(0, false, 0, 0,\n             creationTime, creationTime,\n-            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n+            PERMISSION_555, ugi.getUserName(), ugi.getPrimaryGroupName(),\n             link.getTargetLink(),\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         } else {\n           result[i++] \u003d new FileStatus(0, true, 0, 0,\n             creationTime, creationTime,\n             PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         }\n       }\n       return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getUserName(), ugi.getPrimaryGroupName(),\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {}
    },
    "62d28901d62986900385b3a021042f190f5e5575": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10191. Missing executable permission on viewfs internal dirs. Contributed by Gera Shegalov.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 10:04 PM",
      "commitName": "62d28901d62986900385b3a021042f190f5e5575",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "12/12/12 12:54 PM",
      "commitNameOld": "cd80628ec49d4d30a30c6041da7ec50e290a5087",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 464.34,
      "commitsBetweenForRepo": 2949,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public FileStatus[] listStatus(final Path f) throws AccessControlException,\n         IOException {\n       checkPathIsSlash(f);\n       FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n       int i \u003d 0;\n       for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                           theInternalDir.children.entrySet()) {\n         INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n \n         \n         if (inode instanceof INodeLink ) {\n           INodeLink\u003cAbstractFileSystem\u003e link \u003d \n             (INodeLink\u003cAbstractFileSystem\u003e) inode;\n \n           result[i++] \u003d new FileStatus(0, false, 0, 0,\n             creationTime, creationTime,\n-            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n+            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n             link.getTargetLink(),\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         } else {\n           result[i++] \u003d new FileStatus(0, true, 0, 0,\n             creationTime, creationTime,\n-            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n+            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n             new Path(inode.fullPath).makeQualified(\n                 myUri, null));\n         }\n       }\n       return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_555, ugi.getUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFs.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/viewfs/ViewFs.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFs.java"
      }
    },
    "f1c74df922058e88791ed6971bbb96b53f6770f1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7257 Client side mount tables (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100026 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/11 7:11 PM",
      "commitName": "f1c74df922058e88791ed6971bbb96b53f6770f1",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,30 @@\n+    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n+        IOException {\n+      checkPathIsSlash(f);\n+      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n+      int i \u003d 0;\n+      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n+                                          theInternalDir.children.entrySet()) {\n+        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n+\n+        \n+        if (inode instanceof INodeLink ) {\n+          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n+            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n+\n+          result[i++] \u003d new FileStatus(0, false, 0, 0,\n+            creationTime, creationTime,\n+            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n+            link.getTargetLink(),\n+            new Path(inode.fullPath).makeQualified(\n+                myUri, null));\n+        } else {\n+          result[i++] \u003d new FileStatus(0, true, 0, 0,\n+            creationTime, creationTime,\n+            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n+            new Path(inode.fullPath).makeQualified(\n+                myUri, null));\n+        }\n+      }\n+      return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public FileStatus[] listStatus(final Path f) throws AccessControlException,\n        IOException {\n      checkPathIsSlash(f);\n      FileStatus[] result \u003d new FileStatus[theInternalDir.children.size()];\n      int i \u003d 0;\n      for (Entry\u003cString, INode\u003cAbstractFileSystem\u003e\u003e iEntry : \n                                          theInternalDir.children.entrySet()) {\n        INode\u003cAbstractFileSystem\u003e inode \u003d iEntry.getValue();\n\n        \n        if (inode instanceof INodeLink ) {\n          INodeLink\u003cAbstractFileSystem\u003e link \u003d \n            (INodeLink\u003cAbstractFileSystem\u003e) inode;\n\n          result[i++] \u003d new FileStatus(0, false, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            link.getTargetLink(),\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        } else {\n          result[i++] \u003d new FileStatus(0, true, 0, 0,\n            creationTime, creationTime,\n            PERMISSION_RRR, ugi.getUserName(), ugi.getGroupNames()[0],\n            new Path(inode.fullPath).makeQualified(\n                myUri, null));\n        }\n      }\n      return result;\n    }",
      "path": "src/java/org/apache/hadoop/fs/viewfs/ViewFs.java"
    }
  }
}