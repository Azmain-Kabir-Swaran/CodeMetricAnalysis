{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobResourceUploader.java",
  "functionName": "uploadLibJars",
  "functionId": "uploadLibJars___job-Job__libjars-Collection__String____submitJobDir-Path__mapredSysPerms-FsPermission__submitReplication-short__fileSCUploadPolicies-Map__String,Boolean____statCache-Map__URI,FileStatus__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
  "functionStartLine": 282,
  "functionEndLine": 362,
  "numCommitsSeen": 34,
  "timeTaken": 3577,
  "changeHistory": [
    "e46d5bb962b0c942f993afc505b165b1cd96e51b",
    "fc0885da294490c3984c2231a4d35f89b3b520d4",
    "f80a7298325a4626638ee24467e2012442e480d4",
    "8f0d3d69d65a252439610e6f13d679808d768569"
  ],
  "changeHistoryShort": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": "Ymultichange(Yparameterchange,Ybodychange)",
    "fc0885da294490c3984c2231a4d35f89b3b520d4": "Ymultichange(Ymodifierchange,Ybodychange)",
    "f80a7298325a4626638ee24467e2012442e480d4": "Ymultichange(Yparameterchange,Ybodychange)",
    "8f0d3d69d65a252439610e6f13d679808d768569": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
      "commitDate": "12/10/17 10:59 AM",
      "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
      "commitAuthor": "Chris Trezzo",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
          "commitDate": "12/10/17 10:59 AM",
          "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "18/09/17 10:40 AM",
          "commitNameOld": "0adc0471d0c06f66a31060f270dcb50a7b4ffafa",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 24.01,
          "commitsBetweenForRepo": 206,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,81 @@\n-  void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n-      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n+  void uploadLibJars(Job job, Collection\u003cString\u003e libjars, Path submitJobDir,\n+      FsPermission mapredSysPerms, short submitReplication,\n+      Map\u003cString, Boolean\u003e fileSCUploadPolicies, Map\u003cURI, FileStatus\u003e statCache)\n       throws IOException {\n+    Configuration conf \u003d job.getConfiguration();\n     Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n     if (!libjars.isEmpty()) {\n       mkdirs(jtFs, libjarsDir, mapredSysPerms);\n       Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n       boolean foundFragment \u003d false;\n       for (String tmpjars : libjars) {\n         URI tmpURI \u003d null;\n         try {\n           tmpURI \u003d new URI(tmpjars);\n         } catch (URISyntaxException e) {\n           throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n               + \" Argument must be a valid URI: \" + tmpjars, e);\n         }\n         Path tmp \u003d new Path(tmpURI);\n-        Path newPath \u003d\n-            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n-        try {\n-          URI pathURI \u003d getPathURI(newPath, tmpURI.getFragment());\n-          if (!foundFragment) {\n-            foundFragment \u003d pathURI.getFragment() !\u003d null;\n+        URI newURI \u003d null;\n+        boolean uploadToSharedCache \u003d false;\n+        boolean fromSharedCache \u003d false;\n+        if (scConfig.isSharedCacheLibjarsEnabled()) {\n+          newURI \u003d useSharedCache(tmpURI, tmp.getName(), statCache, conf, true);\n+          if (newURI \u003d\u003d null) {\n+            uploadToSharedCache \u003d true;\n+          } else {\n+            fromSharedCache \u003d true;\n           }\n-          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,\n-              jtFs, false);\n-          libjarURIs.add(pathURI);\n-        } catch (URISyntaxException ue) {\n-          // should not throw a uri exception\n-          throw new IOException(\n-              \"Failed to create a URI (URISyntaxException) for the remote path \"\n-                  + newPath + \". This was based on the libjar parameter: \"\n-                  + tmpjars,\n-              ue);\n+        }\n+\n+        if (newURI \u003d\u003d null) {\n+          Path newPath \u003d\n+              copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n+          try {\n+            newURI \u003d getPathURI(newPath, tmpURI.getFragment());\n+          } catch (URISyntaxException ue) {\n+            // should not throw a uri exception\n+            throw new IOException(\n+                \"Failed to create a URI (URISyntaxException) for the\"\n+                    + \" remote path \" + newPath\n+                    + \". This was based on the libjar parameter: \" + tmpjars,\n+                ue);\n+          }\n+        }\n+\n+        if (!foundFragment) {\n+          // We do not count shared cache paths containing fragments as a\n+          // \"foundFragment.\" This is because these resources are not in the\n+          // staging directory and will be added to the distributed cache\n+          // separately.\n+          foundFragment \u003d (newURI.getFragment() !\u003d null) \u0026\u0026 !fromSharedCache;\n+        }\n+        DistributedCache.addFileToClassPath(new Path(newURI.getPath()), conf,\n+            jtFs, false);\n+        if (fromSharedCache) {\n+          // We simply add this URI to the distributed cache. It will not come\n+          // from the staging directory (it is in the shared cache), so we\n+          // must add it to the cache regardless of the wildcard feature.\n+          DistributedCache.addCacheFile(newURI, conf);\n+        } else {\n+          libjarURIs.add(newURI);\n+        }\n+\n+        if (scConfig.isSharedCacheLibjarsEnabled()) {\n+          fileSCUploadPolicies.put(newURI.toString(), uploadToSharedCache);\n         }\n       }\n \n       if (useWildcard \u0026\u0026 !foundFragment) {\n         // Add the whole directory to the cache using a wild card\n         Path libJarsDirWildcard \u003d\n             jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n         DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n       } else {\n         for (URI uri : libjarURIs) {\n           DistributedCache.addCacheFile(uri, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void uploadLibJars(Job job, Collection\u003cString\u003e libjars, Path submitJobDir,\n      FsPermission mapredSysPerms, short submitReplication,\n      Map\u003cString, Boolean\u003e fileSCUploadPolicies, Map\u003cURI, FileStatus\u003e statCache)\n      throws IOException {\n    Configuration conf \u003d job.getConfiguration();\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (!libjars.isEmpty()) {\n      mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n      boolean foundFragment \u003d false;\n      for (String tmpjars : libjars) {\n        URI tmpURI \u003d null;\n        try {\n          tmpURI \u003d new URI(tmpjars);\n        } catch (URISyntaxException e) {\n          throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n              + \" Argument must be a valid URI: \" + tmpjars, e);\n        }\n        Path tmp \u003d new Path(tmpURI);\n        URI newURI \u003d null;\n        boolean uploadToSharedCache \u003d false;\n        boolean fromSharedCache \u003d false;\n        if (scConfig.isSharedCacheLibjarsEnabled()) {\n          newURI \u003d useSharedCache(tmpURI, tmp.getName(), statCache, conf, true);\n          if (newURI \u003d\u003d null) {\n            uploadToSharedCache \u003d true;\n          } else {\n            fromSharedCache \u003d true;\n          }\n        }\n\n        if (newURI \u003d\u003d null) {\n          Path newPath \u003d\n              copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n          try {\n            newURI \u003d getPathURI(newPath, tmpURI.getFragment());\n          } catch (URISyntaxException ue) {\n            // should not throw a uri exception\n            throw new IOException(\n                \"Failed to create a URI (URISyntaxException) for the\"\n                    + \" remote path \" + newPath\n                    + \". This was based on the libjar parameter: \" + tmpjars,\n                ue);\n          }\n        }\n\n        if (!foundFragment) {\n          // We do not count shared cache paths containing fragments as a\n          // \"foundFragment.\" This is because these resources are not in the\n          // staging directory and will be added to the distributed cache\n          // separately.\n          foundFragment \u003d (newURI.getFragment() !\u003d null) \u0026\u0026 !fromSharedCache;\n        }\n        DistributedCache.addFileToClassPath(new Path(newURI.getPath()), conf,\n            jtFs, false);\n        if (fromSharedCache) {\n          // We simply add this URI to the distributed cache. It will not come\n          // from the staging directory (it is in the shared cache), so we\n          // must add it to the cache regardless of the wildcard feature.\n          DistributedCache.addCacheFile(newURI, conf);\n        } else {\n          libjarURIs.add(newURI);\n        }\n\n        if (scConfig.isSharedCacheLibjarsEnabled()) {\n          fileSCUploadPolicies.put(newURI.toString(), uploadToSharedCache);\n        }\n      }\n\n      if (useWildcard \u0026\u0026 !foundFragment) {\n        // Add the whole directory to the cache using a wild card\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      } else {\n        for (URI uri : libjarURIs) {\n          DistributedCache.addCacheFile(uri, conf);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, libjars-Collection\u003cString\u003e, submitJobDir-Path, mapredSysPerms-FsPermission, submitReplication-short]",
            "newValue": "[job-Job, libjars-Collection\u003cString\u003e, submitJobDir-Path, mapredSysPerms-FsPermission, submitReplication-short, fileSCUploadPolicies-Map\u003cString,Boolean\u003e, statCache-Map\u003cURI,FileStatus\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
          "commitDate": "12/10/17 10:59 AM",
          "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
          "commitAuthor": "Chris Trezzo",
          "commitDateOld": "18/09/17 10:40 AM",
          "commitNameOld": "0adc0471d0c06f66a31060f270dcb50a7b4ffafa",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 24.01,
          "commitsBetweenForRepo": 206,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,81 @@\n-  void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n-      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n+  void uploadLibJars(Job job, Collection\u003cString\u003e libjars, Path submitJobDir,\n+      FsPermission mapredSysPerms, short submitReplication,\n+      Map\u003cString, Boolean\u003e fileSCUploadPolicies, Map\u003cURI, FileStatus\u003e statCache)\n       throws IOException {\n+    Configuration conf \u003d job.getConfiguration();\n     Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n     if (!libjars.isEmpty()) {\n       mkdirs(jtFs, libjarsDir, mapredSysPerms);\n       Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n       boolean foundFragment \u003d false;\n       for (String tmpjars : libjars) {\n         URI tmpURI \u003d null;\n         try {\n           tmpURI \u003d new URI(tmpjars);\n         } catch (URISyntaxException e) {\n           throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n               + \" Argument must be a valid URI: \" + tmpjars, e);\n         }\n         Path tmp \u003d new Path(tmpURI);\n-        Path newPath \u003d\n-            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n-        try {\n-          URI pathURI \u003d getPathURI(newPath, tmpURI.getFragment());\n-          if (!foundFragment) {\n-            foundFragment \u003d pathURI.getFragment() !\u003d null;\n+        URI newURI \u003d null;\n+        boolean uploadToSharedCache \u003d false;\n+        boolean fromSharedCache \u003d false;\n+        if (scConfig.isSharedCacheLibjarsEnabled()) {\n+          newURI \u003d useSharedCache(tmpURI, tmp.getName(), statCache, conf, true);\n+          if (newURI \u003d\u003d null) {\n+            uploadToSharedCache \u003d true;\n+          } else {\n+            fromSharedCache \u003d true;\n           }\n-          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,\n-              jtFs, false);\n-          libjarURIs.add(pathURI);\n-        } catch (URISyntaxException ue) {\n-          // should not throw a uri exception\n-          throw new IOException(\n-              \"Failed to create a URI (URISyntaxException) for the remote path \"\n-                  + newPath + \". This was based on the libjar parameter: \"\n-                  + tmpjars,\n-              ue);\n+        }\n+\n+        if (newURI \u003d\u003d null) {\n+          Path newPath \u003d\n+              copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n+          try {\n+            newURI \u003d getPathURI(newPath, tmpURI.getFragment());\n+          } catch (URISyntaxException ue) {\n+            // should not throw a uri exception\n+            throw new IOException(\n+                \"Failed to create a URI (URISyntaxException) for the\"\n+                    + \" remote path \" + newPath\n+                    + \". This was based on the libjar parameter: \" + tmpjars,\n+                ue);\n+          }\n+        }\n+\n+        if (!foundFragment) {\n+          // We do not count shared cache paths containing fragments as a\n+          // \"foundFragment.\" This is because these resources are not in the\n+          // staging directory and will be added to the distributed cache\n+          // separately.\n+          foundFragment \u003d (newURI.getFragment() !\u003d null) \u0026\u0026 !fromSharedCache;\n+        }\n+        DistributedCache.addFileToClassPath(new Path(newURI.getPath()), conf,\n+            jtFs, false);\n+        if (fromSharedCache) {\n+          // We simply add this URI to the distributed cache. It will not come\n+          // from the staging directory (it is in the shared cache), so we\n+          // must add it to the cache regardless of the wildcard feature.\n+          DistributedCache.addCacheFile(newURI, conf);\n+        } else {\n+          libjarURIs.add(newURI);\n+        }\n+\n+        if (scConfig.isSharedCacheLibjarsEnabled()) {\n+          fileSCUploadPolicies.put(newURI.toString(), uploadToSharedCache);\n         }\n       }\n \n       if (useWildcard \u0026\u0026 !foundFragment) {\n         // Add the whole directory to the cache using a wild card\n         Path libJarsDirWildcard \u003d\n             jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n         DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n       } else {\n         for (URI uri : libjarURIs) {\n           DistributedCache.addCacheFile(uri, conf);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void uploadLibJars(Job job, Collection\u003cString\u003e libjars, Path submitJobDir,\n      FsPermission mapredSysPerms, short submitReplication,\n      Map\u003cString, Boolean\u003e fileSCUploadPolicies, Map\u003cURI, FileStatus\u003e statCache)\n      throws IOException {\n    Configuration conf \u003d job.getConfiguration();\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (!libjars.isEmpty()) {\n      mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n      boolean foundFragment \u003d false;\n      for (String tmpjars : libjars) {\n        URI tmpURI \u003d null;\n        try {\n          tmpURI \u003d new URI(tmpjars);\n        } catch (URISyntaxException e) {\n          throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n              + \" Argument must be a valid URI: \" + tmpjars, e);\n        }\n        Path tmp \u003d new Path(tmpURI);\n        URI newURI \u003d null;\n        boolean uploadToSharedCache \u003d false;\n        boolean fromSharedCache \u003d false;\n        if (scConfig.isSharedCacheLibjarsEnabled()) {\n          newURI \u003d useSharedCache(tmpURI, tmp.getName(), statCache, conf, true);\n          if (newURI \u003d\u003d null) {\n            uploadToSharedCache \u003d true;\n          } else {\n            fromSharedCache \u003d true;\n          }\n        }\n\n        if (newURI \u003d\u003d null) {\n          Path newPath \u003d\n              copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n          try {\n            newURI \u003d getPathURI(newPath, tmpURI.getFragment());\n          } catch (URISyntaxException ue) {\n            // should not throw a uri exception\n            throw new IOException(\n                \"Failed to create a URI (URISyntaxException) for the\"\n                    + \" remote path \" + newPath\n                    + \". This was based on the libjar parameter: \" + tmpjars,\n                ue);\n          }\n        }\n\n        if (!foundFragment) {\n          // We do not count shared cache paths containing fragments as a\n          // \"foundFragment.\" This is because these resources are not in the\n          // staging directory and will be added to the distributed cache\n          // separately.\n          foundFragment \u003d (newURI.getFragment() !\u003d null) \u0026\u0026 !fromSharedCache;\n        }\n        DistributedCache.addFileToClassPath(new Path(newURI.getPath()), conf,\n            jtFs, false);\n        if (fromSharedCache) {\n          // We simply add this URI to the distributed cache. It will not come\n          // from the staging directory (it is in the shared cache), so we\n          // must add it to the cache regardless of the wildcard feature.\n          DistributedCache.addCacheFile(newURI, conf);\n        } else {\n          libjarURIs.add(newURI);\n        }\n\n        if (scConfig.isSharedCacheLibjarsEnabled()) {\n          fileSCUploadPolicies.put(newURI.toString(), uploadToSharedCache);\n        }\n      }\n\n      if (useWildcard \u0026\u0026 !foundFragment) {\n        // Add the whole directory to the cache using a wild card\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      } else {\n        for (URI uri : libjarURIs) {\n          DistributedCache.addCacheFile(uri, conf);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "fc0885da294490c3984c2231a4d35f89b3b520d4": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
      "commitDate": "05/04/17 5:25 PM",
      "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
          "commitDate": "05/04/17 5:25 PM",
          "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "29/03/17 5:41 PM",
          "commitNameOld": "ceab00ac62f8057a07b4b936799e6f04271e6e41",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,49 @@\n-  private void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n+  void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n       Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n       throws IOException {\n     Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n     if (!libjars.isEmpty()) {\n-      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n+      mkdirs(jtFs, libjarsDir, mapredSysPerms);\n+      Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n+      boolean foundFragment \u003d false;\n       for (String tmpjars : libjars) {\n-        Path tmp \u003d new Path(tmpjars);\n+        URI tmpURI \u003d null;\n+        try {\n+          tmpURI \u003d new URI(tmpjars);\n+        } catch (URISyntaxException e) {\n+          throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n+              + \" Argument must be a valid URI: \" + tmpjars, e);\n+        }\n+        Path tmp \u003d new Path(tmpURI);\n         Path newPath \u003d\n             copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n-\n-        // Add each file to the classpath\n-        DistributedCache.addFileToClassPath(\n-            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n+        try {\n+          URI pathURI \u003d getPathURI(newPath, tmpURI.getFragment());\n+          if (!foundFragment) {\n+            foundFragment \u003d pathURI.getFragment() !\u003d null;\n+          }\n+          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,\n+              jtFs, false);\n+          libjarURIs.add(pathURI);\n+        } catch (URISyntaxException ue) {\n+          // should not throw a uri exception\n+          throw new IOException(\n+              \"Failed to create a URI (URISyntaxException) for the remote path \"\n+                  + newPath + \". This was based on the libjar parameter: \"\n+                  + tmpjars,\n+              ue);\n+        }\n       }\n \n-      if (useWildcard) {\n-        // Add the whole directory to the cache\n+      if (useWildcard \u0026\u0026 !foundFragment) {\n+        // Add the whole directory to the cache using a wild card\n         Path libJarsDirWildcard \u003d\n             jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n-\n         DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n+      } else {\n+        for (URI uri : libjarURIs) {\n+          DistributedCache.addCacheFile(uri, conf);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n      throws IOException {\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (!libjars.isEmpty()) {\n      mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n      boolean foundFragment \u003d false;\n      for (String tmpjars : libjars) {\n        URI tmpURI \u003d null;\n        try {\n          tmpURI \u003d new URI(tmpjars);\n        } catch (URISyntaxException e) {\n          throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n              + \" Argument must be a valid URI: \" + tmpjars, e);\n        }\n        Path tmp \u003d new Path(tmpURI);\n        Path newPath \u003d\n            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n        try {\n          URI pathURI \u003d getPathURI(newPath, tmpURI.getFragment());\n          if (!foundFragment) {\n            foundFragment \u003d pathURI.getFragment() !\u003d null;\n          }\n          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,\n              jtFs, false);\n          libjarURIs.add(pathURI);\n        } catch (URISyntaxException ue) {\n          // should not throw a uri exception\n          throw new IOException(\n              \"Failed to create a URI (URISyntaxException) for the remote path \"\n                  + newPath + \". This was based on the libjar parameter: \"\n                  + tmpjars,\n              ue);\n        }\n      }\n\n      if (useWildcard \u0026\u0026 !foundFragment) {\n        // Add the whole directory to the cache using a wild card\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      } else {\n        for (URI uri : libjarURIs) {\n          DistributedCache.addCacheFile(uri, conf);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
          "commitDate": "05/04/17 5:25 PM",
          "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "29/03/17 5:41 PM",
          "commitNameOld": "ceab00ac62f8057a07b4b936799e6f04271e6e41",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,49 @@\n-  private void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n+  void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n       Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n       throws IOException {\n     Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n     if (!libjars.isEmpty()) {\n-      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n+      mkdirs(jtFs, libjarsDir, mapredSysPerms);\n+      Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n+      boolean foundFragment \u003d false;\n       for (String tmpjars : libjars) {\n-        Path tmp \u003d new Path(tmpjars);\n+        URI tmpURI \u003d null;\n+        try {\n+          tmpURI \u003d new URI(tmpjars);\n+        } catch (URISyntaxException e) {\n+          throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n+              + \" Argument must be a valid URI: \" + tmpjars, e);\n+        }\n+        Path tmp \u003d new Path(tmpURI);\n         Path newPath \u003d\n             copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n-\n-        // Add each file to the classpath\n-        DistributedCache.addFileToClassPath(\n-            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n+        try {\n+          URI pathURI \u003d getPathURI(newPath, tmpURI.getFragment());\n+          if (!foundFragment) {\n+            foundFragment \u003d pathURI.getFragment() !\u003d null;\n+          }\n+          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,\n+              jtFs, false);\n+          libjarURIs.add(pathURI);\n+        } catch (URISyntaxException ue) {\n+          // should not throw a uri exception\n+          throw new IOException(\n+              \"Failed to create a URI (URISyntaxException) for the remote path \"\n+                  + newPath + \". This was based on the libjar parameter: \"\n+                  + tmpjars,\n+              ue);\n+        }\n       }\n \n-      if (useWildcard) {\n-        // Add the whole directory to the cache\n+      if (useWildcard \u0026\u0026 !foundFragment) {\n+        // Add the whole directory to the cache using a wild card\n         Path libJarsDirWildcard \u003d\n             jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n-\n         DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n+      } else {\n+        for (URI uri : libjarURIs) {\n+          DistributedCache.addCacheFile(uri, conf);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n      throws IOException {\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (!libjars.isEmpty()) {\n      mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      Collection\u003cURI\u003e libjarURIs \u003d new LinkedList\u003c\u003e();\n      boolean foundFragment \u003d false;\n      for (String tmpjars : libjars) {\n        URI tmpURI \u003d null;\n        try {\n          tmpURI \u003d new URI(tmpjars);\n        } catch (URISyntaxException e) {\n          throw new IllegalArgumentException(\"Error parsing libjars argument.\"\n              + \" Argument must be a valid URI: \" + tmpjars, e);\n        }\n        Path tmp \u003d new Path(tmpURI);\n        Path newPath \u003d\n            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n        try {\n          URI pathURI \u003d getPathURI(newPath, tmpURI.getFragment());\n          if (!foundFragment) {\n            foundFragment \u003d pathURI.getFragment() !\u003d null;\n          }\n          DistributedCache.addFileToClassPath(new Path(pathURI.getPath()), conf,\n              jtFs, false);\n          libjarURIs.add(pathURI);\n        } catch (URISyntaxException ue) {\n          // should not throw a uri exception\n          throw new IOException(\n              \"Failed to create a URI (URISyntaxException) for the remote path \"\n                  + newPath + \". This was based on the libjar parameter: \"\n                  + tmpjars,\n              ue);\n        }\n      }\n\n      if (useWildcard \u0026\u0026 !foundFragment) {\n        // Add the whole directory to the cache using a wild card\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      } else {\n        for (URI uri : libjarURIs) {\n          DistributedCache.addCacheFile(uri, conf);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "f80a7298325a4626638ee24467e2012442e480d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
      "commitDate": "17/08/16 9:22 AM",
      "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
          "commitDate": "17/08/16 9:22 AM",
          "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "19/07/16 8:15 PM",
          "commitNameOld": "8f0d3d69d65a252439610e6f13d679808d768569",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 28.55,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  private void uploadLibJars(Configuration conf, Path submitJobDir,\n-      FsPermission mapredSysPerms, short submitReplication) throws IOException {\n-    String libjars \u003d conf.get(\"tmpjars\");\n+  private void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n+      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n+      throws IOException {\n     Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n-    if (libjars !\u003d null) {\n+    if (!libjars.isEmpty()) {\n       FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n-      String[] libjarsArr \u003d libjars.split(\",\");\n-      for (String tmpjars : libjarsArr) {\n+      for (String tmpjars : libjars) {\n         Path tmp \u003d new Path(tmpjars);\n         Path newPath \u003d\n             copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n \n         // Add each file to the classpath\n         DistributedCache.addFileToClassPath(\n             new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n       }\n \n       if (useWildcard) {\n         // Add the whole directory to the cache\n         Path libJarsDirWildcard \u003d\n             jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n \n         DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n      throws IOException {\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (!libjars.isEmpty()) {\n      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      for (String tmpjars : libjars) {\n        Path tmp \u003d new Path(tmpjars);\n        Path newPath \u003d\n            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n\n        // Add each file to the classpath\n        DistributedCache.addFileToClassPath(\n            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n      }\n\n      if (useWildcard) {\n        // Add the whole directory to the cache\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, submitJobDir-Path, mapredSysPerms-FsPermission, submitReplication-short]",
            "newValue": "[conf-Configuration, libjars-Collection\u003cString\u003e, submitJobDir-Path, mapredSysPerms-FsPermission, submitReplication-short]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
          "commitDate": "17/08/16 9:22 AM",
          "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "19/07/16 8:15 PM",
          "commitNameOld": "8f0d3d69d65a252439610e6f13d679808d768569",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 28.55,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  private void uploadLibJars(Configuration conf, Path submitJobDir,\n-      FsPermission mapredSysPerms, short submitReplication) throws IOException {\n-    String libjars \u003d conf.get(\"tmpjars\");\n+  private void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n+      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n+      throws IOException {\n     Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n-    if (libjars !\u003d null) {\n+    if (!libjars.isEmpty()) {\n       FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n-      String[] libjarsArr \u003d libjars.split(\",\");\n-      for (String tmpjars : libjarsArr) {\n+      for (String tmpjars : libjars) {\n         Path tmp \u003d new Path(tmpjars);\n         Path newPath \u003d\n             copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n \n         // Add each file to the classpath\n         DistributedCache.addFileToClassPath(\n             new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n       }\n \n       if (useWildcard) {\n         // Add the whole directory to the cache\n         Path libJarsDirWildcard \u003d\n             jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n \n         DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void uploadLibJars(Configuration conf, Collection\u003cString\u003e libjars,\n      Path submitJobDir, FsPermission mapredSysPerms, short submitReplication)\n      throws IOException {\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (!libjars.isEmpty()) {\n      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      for (String tmpjars : libjars) {\n        Path tmp \u003d new Path(tmpjars);\n        Path newPath \u003d\n            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n\n        // Add each file to the classpath\n        DistributedCache.addFileToClassPath(\n            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n      }\n\n      if (useWildcard) {\n        // Add the whole directory to the cache\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "8f0d3d69d65a252439610e6f13d679808d768569": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6365. Refactor JobResourceUploader#uploadFilesInternal (Chris Trezzo via sjlee)\n",
      "commitDate": "19/07/16 8:15 PM",
      "commitName": "8f0d3d69d65a252439610e6f13d679808d768569",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,26 @@\n+  private void uploadLibJars(Configuration conf, Path submitJobDir,\n+      FsPermission mapredSysPerms, short submitReplication) throws IOException {\n+    String libjars \u003d conf.get(\"tmpjars\");\n+    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n+    if (libjars !\u003d null) {\n+      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n+      String[] libjarsArr \u003d libjars.split(\",\");\n+      for (String tmpjars : libjarsArr) {\n+        Path tmp \u003d new Path(tmpjars);\n+        Path newPath \u003d\n+            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n+\n+        // Add each file to the classpath\n+        DistributedCache.addFileToClassPath(\n+            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n+      }\n+\n+      if (useWildcard) {\n+        // Add the whole directory to the cache\n+        Path libJarsDirWildcard \u003d\n+            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n+\n+        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void uploadLibJars(Configuration conf, Path submitJobDir,\n      FsPermission mapredSysPerms, short submitReplication) throws IOException {\n    String libjars \u003d conf.get(\"tmpjars\");\n    Path libjarsDir \u003d JobSubmissionFiles.getJobDistCacheLibjars(submitJobDir);\n    if (libjars !\u003d null) {\n      FileSystem.mkdirs(jtFs, libjarsDir, mapredSysPerms);\n      String[] libjarsArr \u003d libjars.split(\",\");\n      for (String tmpjars : libjarsArr) {\n        Path tmp \u003d new Path(tmpjars);\n        Path newPath \u003d\n            copyRemoteFiles(libjarsDir, tmp, conf, submitReplication);\n\n        // Add each file to the classpath\n        DistributedCache.addFileToClassPath(\n            new Path(newPath.toUri().getPath()), conf, jtFs, !useWildcard);\n      }\n\n      if (useWildcard) {\n        // Add the whole directory to the cache\n        Path libJarsDirWildcard \u003d\n            jtFs.makeQualified(new Path(libjarsDir, DistributedCache.WILDCARD));\n\n        DistributedCache.addCacheFile(libJarsDirWildcard.toUri(), conf);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java"
    }
  }
}