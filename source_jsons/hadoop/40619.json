{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintProcessor.java",
  "functionName": "addToRetryList",
  "functionId": "addToRetryList___schedulerResponse-SchedulingResponse__placementAttempt-int__reqsToRetry-List__BatchedRequests__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
  "functionStartLine": 325,
  "functionEndLine": 348,
  "numCommitsSeen": 7,
  "timeTaken": 2656,
  "changeHistory": [
    "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
    "0b489e564ce5a50324a530e29c18aa8a75276c50",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9": "Ybodychange",
    "0b489e564ce5a50324a530e29c18aa8a75276c50": "Yfilerename",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": "Ybodychange",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7918. Fix TestAMRMClientPlacementConstraints. (Gergely Nov√°k via asuresh)\n",
      "commitDate": "17/02/18 3:24 AM",
      "commitName": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "15/02/18 2:23 PM",
      "commitNameOld": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 1.54,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private void addToRetryList(SchedulingResponse schedulerResponse,\n       int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n     boolean isAdded \u003d false;\n     for (BatchedRequests br : reqsToRetry) {\n       if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n         br.addToBatch(schedulerResponse.getSchedulingRequest());\n         br.addToBlacklist(\n             schedulerResponse.getSchedulingRequest().getAllocationTags(),\n             ((Response) schedulerResponse).attemptedNode);\n         isAdded \u003d true;\n         break;\n       }\n     }\n     if (!isAdded) {\n       BatchedRequests br \u003d new BatchedRequests(iteratorType,\n           schedulerResponse.getApplicationId(),\n-          Collections.singleton(schedulerResponse.getSchedulingRequest()),\n+          Lists.newArrayList(schedulerResponse.getSchedulingRequest()),\n           placementAttempt + 1);\n       reqsToRetry.add(br);\n       br.addToBlacklist(\n           schedulerResponse.getSchedulingRequest().getAllocationTags(),\n           ((Response) schedulerResponse).attemptedNode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToRetryList(SchedulingResponse schedulerResponse,\n      int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n    boolean isAdded \u003d false;\n    for (BatchedRequests br : reqsToRetry) {\n      if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n        br.addToBatch(schedulerResponse.getSchedulingRequest());\n        br.addToBlacklist(\n            schedulerResponse.getSchedulingRequest().getAllocationTags(),\n            ((Response) schedulerResponse).attemptedNode);\n        isAdded \u003d true;\n        break;\n      }\n    }\n    if (!isAdded) {\n      BatchedRequests br \u003d new BatchedRequests(iteratorType,\n          schedulerResponse.getApplicationId(),\n          Lists.newArrayList(schedulerResponse.getSchedulingRequest()),\n          placementAttempt + 1);\n      reqsToRetry.add(br);\n      br.addToBlacklist(\n          schedulerResponse.getSchedulingRequest().getAllocationTags(),\n          ((Response) schedulerResponse).attemptedNode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
      "extendedDetails": {}
    },
    "0b489e564ce5a50324a530e29c18aa8a75276c50": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 2:23 PM",
      "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void addToRetryList(SchedulingResponse schedulerResponse,\n      int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n    boolean isAdded \u003d false;\n    for (BatchedRequests br : reqsToRetry) {\n      if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n        br.addToBatch(schedulerResponse.getSchedulingRequest());\n        br.addToBlacklist(\n            schedulerResponse.getSchedulingRequest().getAllocationTags(),\n            ((Response) schedulerResponse).attemptedNode);\n        isAdded \u003d true;\n        break;\n      }\n    }\n    if (!isAdded) {\n      BatchedRequests br \u003d new BatchedRequests(iteratorType,\n          schedulerResponse.getApplicationId(),\n          Collections.singleton(schedulerResponse.getSchedulingRequest()),\n          placementAttempt + 1);\n      reqsToRetry.add(br);\n      br.addToBlacklist(\n          schedulerResponse.getSchedulingRequest().getAllocationTags(),\n          ((Response) schedulerResponse).attemptedNode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java"
      }
    },
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7613. Implement Basic algorithm for constraint based placement. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   private void addToRetryList(SchedulingResponse schedulerResponse,\n       int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n     boolean isAdded \u003d false;\n     for (BatchedRequests br : reqsToRetry) {\n       if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n         br.addToBatch(schedulerResponse.getSchedulingRequest());\n         br.addToBlacklist(\n             schedulerResponse.getSchedulingRequest().getAllocationTags(),\n             ((Response) schedulerResponse).attemptedNode);\n         isAdded \u003d true;\n         break;\n       }\n     }\n     if (!isAdded) {\n-      BatchedRequests br \u003d\n-          new BatchedRequests(schedulerResponse.getApplicationId(),\n-              Collections.singleton(\n-                  schedulerResponse.getSchedulingRequest()),\n-              placementAttempt + 1);\n+      BatchedRequests br \u003d new BatchedRequests(iteratorType,\n+          schedulerResponse.getApplicationId(),\n+          Collections.singleton(schedulerResponse.getSchedulingRequest()),\n+          placementAttempt + 1);\n       reqsToRetry.add(br);\n       br.addToBlacklist(\n           schedulerResponse.getSchedulingRequest().getAllocationTags(),\n           ((Response) schedulerResponse).attemptedNode);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToRetryList(SchedulingResponse schedulerResponse,\n      int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n    boolean isAdded \u003d false;\n    for (BatchedRequests br : reqsToRetry) {\n      if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n        br.addToBatch(schedulerResponse.getSchedulingRequest());\n        br.addToBlacklist(\n            schedulerResponse.getSchedulingRequest().getAllocationTags(),\n            ((Response) schedulerResponse).attemptedNode);\n        isAdded \u003d true;\n        break;\n      }\n    }\n    if (!isAdded) {\n      BatchedRequests br \u003d new BatchedRequests(iteratorType,\n          schedulerResponse.getApplicationId(),\n          Collections.singleton(schedulerResponse.getSchedulingRequest()),\n          placementAttempt + 1);\n      reqsToRetry.add(br);\n      br.addToBlacklist(\n          schedulerResponse.getSchedulingRequest().getAllocationTags(),\n          ((Response) schedulerResponse).attemptedNode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
      "extendedDetails": {}
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,25 @@\n+  private void addToRetryList(SchedulingResponse schedulerResponse,\n+      int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n+    boolean isAdded \u003d false;\n+    for (BatchedRequests br : reqsToRetry) {\n+      if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n+        br.addToBatch(schedulerResponse.getSchedulingRequest());\n+        br.addToBlacklist(\n+            schedulerResponse.getSchedulingRequest().getAllocationTags(),\n+            ((Response) schedulerResponse).attemptedNode);\n+        isAdded \u003d true;\n+        break;\n+      }\n+    }\n+    if (!isAdded) {\n+      BatchedRequests br \u003d\n+          new BatchedRequests(schedulerResponse.getApplicationId(),\n+              Collections.singleton(\n+                  schedulerResponse.getSchedulingRequest()),\n+              placementAttempt + 1);\n+      reqsToRetry.add(br);\n+      br.addToBlacklist(\n+          schedulerResponse.getSchedulingRequest().getAllocationTags(),\n+          ((Response) schedulerResponse).attemptedNode);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToRetryList(SchedulingResponse schedulerResponse,\n      int placementAttempt, List\u003cBatchedRequests\u003e reqsToRetry) {\n    boolean isAdded \u003d false;\n    for (BatchedRequests br : reqsToRetry) {\n      if (br.getPlacementAttempt() \u003d\u003d placementAttempt + 1) {\n        br.addToBatch(schedulerResponse.getSchedulingRequest());\n        br.addToBlacklist(\n            schedulerResponse.getSchedulingRequest().getAllocationTags(),\n            ((Response) schedulerResponse).attemptedNode);\n        isAdded \u003d true;\n        break;\n      }\n    }\n    if (!isAdded) {\n      BatchedRequests br \u003d\n          new BatchedRequests(schedulerResponse.getApplicationId(),\n              Collections.singleton(\n                  schedulerResponse.getSchedulingRequest()),\n              placementAttempt + 1);\n      reqsToRetry.add(br);\n      br.addToBlacklist(\n          schedulerResponse.getSchedulingRequest().getAllocationTags(),\n          ((Response) schedulerResponse).attemptedNode);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java"
    }
  }
}