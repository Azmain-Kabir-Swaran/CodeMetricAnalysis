{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReaderLocalLegacy.java",
  "functionName": "getBlockPathInfo",
  "functionId": "getBlockPathInfo___ugi-UserGroupInformation__blk-ExtendedBlock__node-DatanodeInfo__conf-Configuration__timeout-int__token-Token__BlockTokenIdentifier____connectToDnViaHostname-boolean__storageType-StorageType",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderLocalLegacy.java",
  "functionStartLine": 273,
  "functionEndLine": 302,
  "numCommitsSeen": 45,
  "timeTaken": 4274,
  "changeHistory": [
    "f308561f1d885491b88db73ac63003202056d661",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "463aec11718e47d4aabb86a7a539cb973460aae6",
    "bbb24fbf5d220fbe137d43651ba3802a9806b1a3",
    "694a6721316aea14c1244447974231abc8dff0cb"
  ],
  "changeHistoryShort": {
    "f308561f1d885491b88db73ac63003202056d661": "Yfilerename",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Yfilerename",
    "463aec11718e47d4aabb86a7a539cb973460aae6": "Ymultichange(Yparameterchange,Ybodychange)",
    "bbb24fbf5d220fbe137d43651ba3802a9806b1a3": "Ymultichange(Yparameterchange,Ybodychange)",
    "694a6721316aea14c1244447974231abc8dff0cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f308561f1d885491b88db73ac63003202056d661": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8057 Move BlockReader implementation to the client implementation package.  Contributed by Takanobu Asanuma\n",
      "commitDate": "25/04/16 12:01 PM",
      "commitName": "f308561f1d885491b88db73ac63003202056d661",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/04/16 9:38 AM",
      "commitNameOld": "10f0f7851a3255caab775777e8fb6c2781d97062",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d\n        getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We can\u0027t cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderLocalLegacy.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderLocalLegacy.java"
      }
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n       ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n       Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n       StorageType storageType) throws IOException {\n-    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n-    BlockLocalPathInfo pathinfo \u003d null;\n+    LocalDatanodeInfo localDatanodeInfo \u003d\n+        getLocalDatanodeInfo(node.getIpcPort());\n+    BlockLocalPathInfo pathinfo;\n     ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n-      // We cannot cache the path information for a replica on transient storage.\n+      // We can\u0027t cache the path information for a replica on transient storage.\n       // If the replica gets evicted, then it moves to a different path.  Then,\n       // our next attempt to read from the cached path would fail to find the\n       // file.  Additionally, the failure would cause us to disable legacy\n       // short-circuit read for all subsequent use in the ClientContext.  Unlike\n       // the newer short-circuit read implementation, we have no communication\n       // channel for the DataNode to notify the client that the path has been\n       // invalidated.  Therefore, our only option is to skip caching.\n       if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n         LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d\n        getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We can\u0027t cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n       ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n       Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n       StorageType storageType) throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n     ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n       // We cannot cache the path information for a replica on transient storage.\n       // If the replica gets evicted, then it moves to a different path.  Then,\n       // our next attempt to read from the cached path would fail to find the\n       // file.  Additionally, the failure would cause us to disable legacy\n       // short-circuit read for all subsequent use in the ClientContext.  Unlike\n       // the newer short-circuit read implementation, we have no communication\n       // channel for the DataNode to notify the client that the path has been\n       // invalidated.  Therefore, our only option is to skip caching.\n       if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n-        }\n+        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We cannot cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n       ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n       Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n       StorageType storageType) throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n     ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n       // We cannot cache the path information for a replica on transient storage.\n       // If the replica gets evicted, then it moves to a different path.  Then,\n       // our next attempt to read from the cached path would fail to find the\n       // file.  Additionally, the failure would cause us to disable legacy\n       // short-circuit read for all subsequent use in the ClientContext.  Unlike\n       // the newer short-circuit read implementation, we have no communication\n       // channel for the DataNode to notify the client that the path has been\n       // invalidated.  Therefore, our only option is to skip caching.\n       if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n-        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n+        }\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We cannot cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n       ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n       Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n       StorageType storageType) throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n     ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n       // We cannot cache the path information for a replica on transient storage.\n       // If the replica gets evicted, then it moves to a different path.  Then,\n       // our next attempt to read from the cached path would fail to find the\n       // file.  Additionally, the failure would cause us to disable legacy\n       // short-circuit read for all subsequent use in the ClientContext.  Unlike\n       // the newer short-circuit read implementation, we have no communication\n       // channel for the DataNode to notify the client that the path has been\n       // invalidated.  Therefore, our only option is to skip caching.\n       if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n-        }\n+        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We cannot cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        LOG.debug(\"Cached location of block {} as {}\", blk, pathinfo);\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
      "extendedDetails": {}
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:21 PM",
      "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We cannot cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java"
      }
    },
    "463aec11718e47d4aabb86a7a539cb973460aae6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
      "commitDate": "27/10/14 9:38 AM",
      "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
          "commitDate": "27/10/14 9:38 AM",
          "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
          "commitAuthor": "cnauroth",
          "commitDateOld": "03/10/14 1:35 PM",
          "commitNameOld": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 23.84,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,31 @@\n   private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n       ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n-      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n-      throws IOException {\n+      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n+      StorageType storageType) throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n     ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n-      if (pathinfo !\u003d null) {\n+      // We cannot cache the path information for a replica on transient storage.\n+      // If the replica gets evicted, then it moves to a different path.  Then,\n+      // our next attempt to read from the cached path would fail to find the\n+      // file.  Additionally, the failure would cause us to disable legacy\n+      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n+      // the newer short-circuit read implementation, we have no communication\n+      // channel for the DataNode to notify the client that the path has been\n+      // invalidated.  Therefore, our only option is to skip caching.\n+      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n         }\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We cannot cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation, blk-ExtendedBlock, node-DatanodeInfo, conf-Configuration, timeout-int, token-Token\u003cBlockTokenIdentifier\u003e, connectToDnViaHostname-boolean]",
            "newValue": "[ugi-UserGroupInformation, blk-ExtendedBlock, node-DatanodeInfo, conf-Configuration, timeout-int, token-Token\u003cBlockTokenIdentifier\u003e, connectToDnViaHostname-boolean, storageType-StorageType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
          "commitDate": "27/10/14 9:38 AM",
          "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
          "commitAuthor": "cnauroth",
          "commitDateOld": "03/10/14 1:35 PM",
          "commitNameOld": "7f6ed7fe365166e8075359f1d0ad035fa876c70f",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 23.84,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,31 @@\n   private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n       ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n-      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n-      throws IOException {\n+      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n+      StorageType storageType) throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n     ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n-      if (pathinfo !\u003d null) {\n+      // We cannot cache the path information for a replica on transient storage.\n+      // If the replica gets evicted, then it moves to a different path.  Then,\n+      // our next attempt to read from the cached path would fail to find the\n+      // file.  Additionally, the failure would cause us to disable legacy\n+      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n+      // the newer short-circuit read implementation, we have no communication\n+      // channel for the DataNode to notify the client that the path has been\n+      // invalidated.  Therefore, our only option is to skip caching.\n+      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n         }\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname,\n      StorageType storageType) throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      // We cannot cache the path information for a replica on transient storage.\n      // If the replica gets evicted, then it moves to a different path.  Then,\n      // our next attempt to read from the cached path would fail to find the\n      // file.  Additionally, the failure would cause us to disable legacy\n      // short-circuit read for all subsequent use in the ClientContext.  Unlike\n      // the newer short-circuit read implementation, we have no communication\n      // channel for the DataNode to notify the client that the path has been\n      // invalidated.  Therefore, our only option is to skip caching.\n      if (pathinfo !\u003d null \u0026\u0026 !storageType.isTransient()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
          "extendedDetails": {}
        }
      ]
    },
    "bbb24fbf5d220fbe137d43651ba3802a9806b1a3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Merge trunk into branch.\n\nConflicts resolved:\nC       hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestShortCircuitLocalRead.java\n!     C hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java\n\n(thanks to Colin for help resolving)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1462652 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/03/13 2:33 PM",
      "commitName": "bbb24fbf5d220fbe137d43651ba3802a9806b1a3",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Merge trunk into branch.\n\nConflicts resolved:\nC       hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestShortCircuitLocalRead.java\n!     C hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java\n\n(thanks to Colin for help resolving)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1462652 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/03/13 2:33 PM",
          "commitName": "bbb24fbf5d220fbe137d43651ba3802a9806b1a3",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "27/03/13 12:28 PM",
          "commitNameOld": "694a6721316aea14c1244447974231abc8dff0cb",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private static BlockLocalPathInfo getBlockPathInfo(ExtendedBlock blk,\n-      DatanodeInfo node, Configuration conf, int timeout,\n+  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n+      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n       Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n-          throws IOException {\n+      throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n-    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(node,\n+    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n       if (pathinfo !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n         }\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n      throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      if (pathinfo !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
          "extendedDetails": {
            "oldValue": "[blk-ExtendedBlock, node-DatanodeInfo, conf-Configuration, timeout-int, token-Token\u003cBlockTokenIdentifier\u003e, connectToDnViaHostname-boolean]",
            "newValue": "[ugi-UserGroupInformation, blk-ExtendedBlock, node-DatanodeInfo, conf-Configuration, timeout-int, token-Token\u003cBlockTokenIdentifier\u003e, connectToDnViaHostname-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Merge trunk into branch.\n\nConflicts resolved:\nC       hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestShortCircuitLocalRead.java\n!     C hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java\nC       hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocal.java\n\n(thanks to Colin for help resolving)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1462652 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/03/13 2:33 PM",
          "commitName": "bbb24fbf5d220fbe137d43651ba3802a9806b1a3",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "27/03/13 12:28 PM",
          "commitNameOld": "694a6721316aea14c1244447974231abc8dff0cb",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private static BlockLocalPathInfo getBlockPathInfo(ExtendedBlock blk,\n-      DatanodeInfo node, Configuration conf, int timeout,\n+  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n+      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n       Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n-          throws IOException {\n+      throws IOException {\n     LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n     BlockLocalPathInfo pathinfo \u003d null;\n-    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(node,\n+    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n         conf, timeout, connectToDnViaHostname);\n     try {\n       // make RPC to local datanode to find local pathnames of blocks\n       pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n       if (pathinfo !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n         }\n         localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n       }\n     } catch (IOException e) {\n       localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n       throw e;\n     }\n     return pathinfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(UserGroupInformation ugi,\n      ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n      throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(ugi, node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      if (pathinfo !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java",
          "extendedDetails": {}
        }
      ]
    },
    "694a6721316aea14c1244447974231abc8dff0cb": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4538. Allow use of legacy blockreader. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1461818 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/13 12:28 PM",
      "commitName": "694a6721316aea14c1244447974231abc8dff0cb",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,23 @@\n+  private static BlockLocalPathInfo getBlockPathInfo(ExtendedBlock blk,\n+      DatanodeInfo node, Configuration conf, int timeout,\n+      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n+          throws IOException {\n+    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n+    BlockLocalPathInfo pathinfo \u003d null;\n+    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(node,\n+        conf, timeout, connectToDnViaHostname);\n+    try {\n+      // make RPC to local datanode to find local pathnames of blocks\n+      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n+      if (pathinfo !\u003d null) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n+        }\n+        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n+      }\n+    } catch (IOException e) {\n+      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n+      throw e;\n+    }\n+    return pathinfo;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static BlockLocalPathInfo getBlockPathInfo(ExtendedBlock blk,\n      DatanodeInfo node, Configuration conf, int timeout,\n      Token\u003cBlockTokenIdentifier\u003e token, boolean connectToDnViaHostname)\n          throws IOException {\n    LocalDatanodeInfo localDatanodeInfo \u003d getLocalDatanodeInfo(node.getIpcPort());\n    BlockLocalPathInfo pathinfo \u003d null;\n    ClientDatanodeProtocol proxy \u003d localDatanodeInfo.getDatanodeProxy(node,\n        conf, timeout, connectToDnViaHostname);\n    try {\n      // make RPC to local datanode to find local pathnames of blocks\n      pathinfo \u003d proxy.getBlockLocalPathInfo(blk, token);\n      if (pathinfo !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Cached location of block \" + blk + \" as \" + pathinfo);\n        }\n        localDatanodeInfo.setBlockLocalPathInfo(blk, pathinfo);\n      }\n    } catch (IOException e) {\n      localDatanodeInfo.resetDatanodeProxy(); // Reset proxy on error\n      throw e;\n    }\n    return pathinfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderLocalLegacy.java"
    }
  }
}