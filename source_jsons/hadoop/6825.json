{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageSerialization.java",
  "functionName": "readCacheDirectiveInfo",
  "functionId": "readCacheDirectiveInfo___st-Stanza",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageSerialization.java",
  "functionStartLine": 571,
  "functionEndLine": 594,
  "numCommitsSeen": 62,
  "timeTaken": 2010,
  "changeHistory": [
    "991c453ca3ac141a3f286f74af8401f83c38b230"
  ],
  "changeHistoryShort": {
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Yintroduced"
  },
  "changeHistoryDetails": {
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,24 @@\n+  public static CacheDirectiveInfo readCacheDirectiveInfo(Stanza st)\n+      throws InvalidXmlException {\n+    CacheDirectiveInfo.Builder builder \u003d\n+        new CacheDirectiveInfo.Builder();\n+    builder.setId(Long.parseLong(st.getValue(\"ID\")));\n+    String path \u003d st.getValueOrNull(\"PATH\");\n+    if (path !\u003d null) {\n+      builder.setPath(new Path(path));\n+    }\n+    String replicationString \u003d st.getValueOrNull(\"REPLICATION\");\n+    if (replicationString !\u003d null) {\n+      builder.setReplication(Short.parseShort(replicationString));\n+    }\n+    String pool \u003d st.getValueOrNull(\"POOL\");\n+    if (pool !\u003d null) {\n+      builder.setPool(pool);\n+    }\n+    String expiryTime \u003d st.getValueOrNull(\"EXPIRATION\");\n+    if (expiryTime !\u003d null) {\n+      builder.setExpiration(CacheDirectiveInfo.Expiration.newAbsolute(\n+          Long.parseLong(expiryTime)));\n+    }\n+    return builder.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static CacheDirectiveInfo readCacheDirectiveInfo(Stanza st)\n      throws InvalidXmlException {\n    CacheDirectiveInfo.Builder builder \u003d\n        new CacheDirectiveInfo.Builder();\n    builder.setId(Long.parseLong(st.getValue(\"ID\")));\n    String path \u003d st.getValueOrNull(\"PATH\");\n    if (path !\u003d null) {\n      builder.setPath(new Path(path));\n    }\n    String replicationString \u003d st.getValueOrNull(\"REPLICATION\");\n    if (replicationString !\u003d null) {\n      builder.setReplication(Short.parseShort(replicationString));\n    }\n    String pool \u003d st.getValueOrNull(\"POOL\");\n    if (pool !\u003d null) {\n      builder.setPool(pool);\n    }\n    String expiryTime \u003d st.getValueOrNull(\"EXPIRATION\");\n    if (expiryTime !\u003d null) {\n      builder.setExpiration(CacheDirectiveInfo.Expiration.newAbsolute(\n          Long.parseLong(expiryTime)));\n    }\n    return builder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageSerialization.java"
    }
  }
}