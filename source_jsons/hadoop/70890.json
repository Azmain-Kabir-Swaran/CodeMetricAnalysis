{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystemStore.java",
  "functionName": "createLocatedFileStatusIterator",
  "functionId": "createLocatedFileStatusIterator___prefix-String(modifiers-final)__maxListingLength-int(modifiers-final)__fs-FileSystem__filter-PathFilter__acceptor-FileStatusAcceptor__delimiter-String",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
  "functionStartLine": 521,
  "functionEndLine": 595,
  "numCommitsSeen": 19,
  "timeTaken": 1662,
  "changeHistory": [
    "5ff0cf86a940fd83f1425794921cc075b19f1108",
    "18621af7ae8f8ed703245744f8f2a770d07bbfb9"
  ],
  "changeHistoryShort": {
    "5ff0cf86a940fd83f1425794921cc075b19f1108": "Ybodychange",
    "18621af7ae8f8ed703245744f8f2a770d07bbfb9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ff0cf86a940fd83f1425794921cc075b19f1108": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
      "commitDate": "22/11/18 9:56 PM",
      "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/11/18 10:00 PM",
      "commitNameOld": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n   public RemoteIterator\u003cLocatedFileStatus\u003e createLocatedFileStatusIterator(\n       final String prefix, final int maxListingLength, FileSystem fs,\n       PathFilter filter, FileStatusAcceptor acceptor, String delimiter) {\n     return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n       private String nextMarker \u003d null;\n       private boolean firstListing \u003d true;\n       private boolean meetEnd \u003d false;\n       private ListIterator\u003cFileStatus\u003e batchIterator;\n \n       @Override\n       public boolean hasNext() throws IOException {\n         if (firstListing) {\n           requestNextBatch();\n           firstListing \u003d false;\n         }\n         return batchIterator.hasNext() || requestNextBatch();\n       }\n \n       @Override\n       public LocatedFileStatus next() throws IOException {\n         if (hasNext()) {\n           FileStatus status \u003d batchIterator.next();\n           BlockLocation[] locations \u003d fs.getFileBlockLocations(status,\n               0, status.getLen());\n           return new LocatedFileStatus(\n               status, status.isFile() ? locations : null);\n         } else {\n           throw new NoSuchElementException();\n         }\n       }\n \n       private boolean requestNextBatch() {\n         if (meetEnd) {\n           return false;\n         }\n         ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n         listRequest.setPrefix(AliyunOSSUtils.maybeAddTrailingSlash(prefix));\n         listRequest.setMaxKeys(maxListingLength);\n         listRequest.setMarker(nextMarker);\n         listRequest.setDelimiter(delimiter);\n         ObjectListing listing \u003d ossClient.listObjects(listRequest);\n         List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n             listing.getObjectSummaries().size() +\n             listing.getCommonPrefixes().size());\n         for (OSSObjectSummary summary : listing.getObjectSummaries()) {\n           String key \u003d summary.getKey();\n           Path path \u003d fs.makeQualified(new Path(\"/\" + key));\n           if (filter.accept(path) \u0026\u0026 acceptor.accept(path, summary)) {\n-            FileStatus status \u003d new FileStatus(summary.getSize(),\n+            FileStatus status \u003d new OSSFileStatus(summary.getSize(),\n                 key.endsWith(\"/\"), 1, fs.getDefaultBlockSize(path),\n-                summary.getLastModified().getTime(), path);\n+                summary.getLastModified().getTime(), path, username);\n             stats.add(status);\n           }\n         }\n \n         for (String commonPrefix : listing.getCommonPrefixes()) {\n           Path path \u003d fs.makeQualified(new Path(\"/\" + commonPrefix));\n           if (filter.accept(path) \u0026\u0026 acceptor.accept(path, commonPrefix)) {\n-            FileStatus status \u003d new FileStatus(0, true, 1, 0, 0, path);\n+            FileStatus status \u003d new OSSFileStatus(0, true, 1, 0, 0,\n+                path, username);\n             stats.add(status);\n           }\n         }\n \n         batchIterator \u003d stats.listIterator();\n         if (listing.isTruncated()) {\n           nextMarker \u003d listing.getNextMarker();\n         } else {\n           meetEnd \u003d true;\n         }\n         statistics.incrementReadOps(1);\n         return batchIterator.hasNext();\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e createLocatedFileStatusIterator(\n      final String prefix, final int maxListingLength, FileSystem fs,\n      PathFilter filter, FileStatusAcceptor acceptor, String delimiter) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private String nextMarker \u003d null;\n      private boolean firstListing \u003d true;\n      private boolean meetEnd \u003d false;\n      private ListIterator\u003cFileStatus\u003e batchIterator;\n\n      @Override\n      public boolean hasNext() throws IOException {\n        if (firstListing) {\n          requestNextBatch();\n          firstListing \u003d false;\n        }\n        return batchIterator.hasNext() || requestNextBatch();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          FileStatus status \u003d batchIterator.next();\n          BlockLocation[] locations \u003d fs.getFileBlockLocations(status,\n              0, status.getLen());\n          return new LocatedFileStatus(\n              status, status.isFile() ? locations : null);\n        } else {\n          throw new NoSuchElementException();\n        }\n      }\n\n      private boolean requestNextBatch() {\n        if (meetEnd) {\n          return false;\n        }\n        ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n        listRequest.setPrefix(AliyunOSSUtils.maybeAddTrailingSlash(prefix));\n        listRequest.setMaxKeys(maxListingLength);\n        listRequest.setMarker(nextMarker);\n        listRequest.setDelimiter(delimiter);\n        ObjectListing listing \u003d ossClient.listObjects(listRequest);\n        List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n            listing.getObjectSummaries().size() +\n            listing.getCommonPrefixes().size());\n        for (OSSObjectSummary summary : listing.getObjectSummaries()) {\n          String key \u003d summary.getKey();\n          Path path \u003d fs.makeQualified(new Path(\"/\" + key));\n          if (filter.accept(path) \u0026\u0026 acceptor.accept(path, summary)) {\n            FileStatus status \u003d new OSSFileStatus(summary.getSize(),\n                key.endsWith(\"/\"), 1, fs.getDefaultBlockSize(path),\n                summary.getLastModified().getTime(), path, username);\n            stats.add(status);\n          }\n        }\n\n        for (String commonPrefix : listing.getCommonPrefixes()) {\n          Path path \u003d fs.makeQualified(new Path(\"/\" + commonPrefix));\n          if (filter.accept(path) \u0026\u0026 acceptor.accept(path, commonPrefix)) {\n            FileStatus status \u003d new OSSFileStatus(0, true, 1, 0, 0,\n                path, username);\n            stats.add(status);\n          }\n        }\n\n        batchIterator \u003d stats.listIterator();\n        if (listing.isTruncated()) {\n          nextMarker \u003d listing.getNextMarker();\n        } else {\n          meetEnd \u003d true;\n        }\n        statistics.incrementReadOps(1);\n        return batchIterator.hasNext();\n      }\n    };\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "18621af7ae8f8ed703245744f8f2a770d07bbfb9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14993. AliyunOSS: Override listFiles and listLocatedStatus. Contributed Genmao Yu\n",
      "commitDate": "14/11/17 1:58 AM",
      "commitName": "18621af7ae8f8ed703245744f8f2a770d07bbfb9",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,74 @@\n+  public RemoteIterator\u003cLocatedFileStatus\u003e createLocatedFileStatusIterator(\n+      final String prefix, final int maxListingLength, FileSystem fs,\n+      PathFilter filter, FileStatusAcceptor acceptor, String delimiter) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      private String nextMarker \u003d null;\n+      private boolean firstListing \u003d true;\n+      private boolean meetEnd \u003d false;\n+      private ListIterator\u003cFileStatus\u003e batchIterator;\n+\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        if (firstListing) {\n+          requestNextBatch();\n+          firstListing \u003d false;\n+        }\n+        return batchIterator.hasNext() || requestNextBatch();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        if (hasNext()) {\n+          FileStatus status \u003d batchIterator.next();\n+          BlockLocation[] locations \u003d fs.getFileBlockLocations(status,\n+            0, status.getLen());\n+          return new LocatedFileStatus(\n+              status, status.isFile() ? locations : null);\n+        } else {\n+          throw new NoSuchElementException();\n+        }\n+      }\n+\n+      private boolean requestNextBatch() {\n+        if (meetEnd) {\n+          return false;\n+        }\n+        ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n+        listRequest.setPrefix(AliyunOSSUtils.maybeAddTrailingSlash(prefix));\n+        listRequest.setMaxKeys(maxListingLength);\n+        listRequest.setMarker(nextMarker);\n+        listRequest.setDelimiter(delimiter);\n+        ObjectListing listing \u003d ossClient.listObjects(listRequest);\n+        List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n+            listing.getObjectSummaries().size() +\n+            listing.getCommonPrefixes().size());\n+        for(OSSObjectSummary summary: listing.getObjectSummaries()) {\n+          String key \u003d summary.getKey();\n+          Path path \u003d fs.makeQualified(new Path(\"/\" + key));\n+          if (filter.accept(path) \u0026\u0026 acceptor.accept(path, summary)) {\n+            FileStatus status \u003d new FileStatus(summary.getSize(),\n+                key.endsWith(\"/\"), 1, fs.getDefaultBlockSize(path),\n+                summary.getLastModified().getTime(), path);\n+            stats.add(status);\n+          }\n+        }\n+\n+        for(String commonPrefix: listing.getCommonPrefixes()) {\n+          Path path \u003d fs.makeQualified(new Path(\"/\" + commonPrefix));\n+          if (filter.accept(path) \u0026\u0026 acceptor.accept(path, commonPrefix)) {\n+            FileStatus status \u003d new FileStatus(0, true, 1, 0, 0, path);\n+            stats.add(status);\n+          }\n+        }\n+\n+        batchIterator \u003d stats.listIterator();\n+        if (listing.isTruncated()) {\n+          nextMarker \u003d listing.getNextMarker();\n+        } else {\n+          meetEnd \u003d true;\n+        }\n+        statistics.incrementReadOps(1);\n+        return batchIterator.hasNext();\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cLocatedFileStatus\u003e createLocatedFileStatusIterator(\n      final String prefix, final int maxListingLength, FileSystem fs,\n      PathFilter filter, FileStatusAcceptor acceptor, String delimiter) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      private String nextMarker \u003d null;\n      private boolean firstListing \u003d true;\n      private boolean meetEnd \u003d false;\n      private ListIterator\u003cFileStatus\u003e batchIterator;\n\n      @Override\n      public boolean hasNext() throws IOException {\n        if (firstListing) {\n          requestNextBatch();\n          firstListing \u003d false;\n        }\n        return batchIterator.hasNext() || requestNextBatch();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        if (hasNext()) {\n          FileStatus status \u003d batchIterator.next();\n          BlockLocation[] locations \u003d fs.getFileBlockLocations(status,\n            0, status.getLen());\n          return new LocatedFileStatus(\n              status, status.isFile() ? locations : null);\n        } else {\n          throw new NoSuchElementException();\n        }\n      }\n\n      private boolean requestNextBatch() {\n        if (meetEnd) {\n          return false;\n        }\n        ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n        listRequest.setPrefix(AliyunOSSUtils.maybeAddTrailingSlash(prefix));\n        listRequest.setMaxKeys(maxListingLength);\n        listRequest.setMarker(nextMarker);\n        listRequest.setDelimiter(delimiter);\n        ObjectListing listing \u003d ossClient.listObjects(listRequest);\n        List\u003cFileStatus\u003e stats \u003d new ArrayList\u003c\u003e(\n            listing.getObjectSummaries().size() +\n            listing.getCommonPrefixes().size());\n        for(OSSObjectSummary summary: listing.getObjectSummaries()) {\n          String key \u003d summary.getKey();\n          Path path \u003d fs.makeQualified(new Path(\"/\" + key));\n          if (filter.accept(path) \u0026\u0026 acceptor.accept(path, summary)) {\n            FileStatus status \u003d new FileStatus(summary.getSize(),\n                key.endsWith(\"/\"), 1, fs.getDefaultBlockSize(path),\n                summary.getLastModified().getTime(), path);\n            stats.add(status);\n          }\n        }\n\n        for(String commonPrefix: listing.getCommonPrefixes()) {\n          Path path \u003d fs.makeQualified(new Path(\"/\" + commonPrefix));\n          if (filter.accept(path) \u0026\u0026 acceptor.accept(path, commonPrefix)) {\n            FileStatus status \u003d new FileStatus(0, true, 1, 0, 0, path);\n            stats.add(status);\n          }\n        }\n\n        batchIterator \u003d stats.listIterator();\n        if (listing.isTruncated()) {\n          nextMarker \u003d listing.getNextMarker();\n        } else {\n          meetEnd \u003d true;\n        }\n        statistics.incrementReadOps(1);\n        return batchIterator.hasNext();\n      }\n    };\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java"
    }
  }
}