{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "resolveNetworkLocation",
  "functionId": "resolveNetworkLocation___node-DatanodeID",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 929,
  "functionEndLine": 948,
  "numCommitsSeen": 230,
  "timeTaken": 9042,
  "changeHistory": [
    "2ffd84273ac490724fe7e7825664bb6d09ef0e99",
    "ed841dd9a96e54cb84d9cae5507e47ff1c8cdf6e",
    "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
    "e505b7e704ff83893a40190695977ce1393f6248",
    "be7dd8333a7e56e732171db0781786987de03195",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "2ffd84273ac490724fe7e7825664bb6d09ef0e99": "Ybodychange",
    "ed841dd9a96e54cb84d9cae5507e47ff1c8cdf6e": "Ybodychange",
    "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f": "Ymultichange(Yexceptionschange,Ybodychange)",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "e505b7e704ff83893a40190695977ce1393f6248": "Ybodychange",
    "be7dd8333a7e56e732171db0781786987de03195": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "233a7aa34f37350bf7bcdd9c84b97d613e7344c9": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ffd84273ac490724fe7e7825664bb6d09ef0e99": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8653. Code cleanup for DatanodeManager, DatanodeDescriptor and DatanodeStorageInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "29/06/15 12:12 PM",
      "commitName": "2ffd84273ac490724fe7e7825664bb6d09ef0e99",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:38 AM",
      "commitNameOld": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 17.02,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private String resolveNetworkLocation (DatanodeID node) \n       throws UnresolvedTopologyException {\n-    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n+    List\u003cString\u003e names \u003d new ArrayList\u003c\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n     List\u003cString\u003e rName \u003d resolveNetworkLocation(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null!\");\n         throw new UnresolvedTopologyException(\n             \"Unresolved topology mapping for host \" + node.getHostName());\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     return networkLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String resolveNetworkLocation (DatanodeID node) \n      throws UnresolvedTopologyException {\n    List\u003cString\u003e names \u003d new ArrayList\u003c\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    List\u003cString\u003e rName \u003d resolveNetworkLocation(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null!\");\n        throw new UnresolvedTopologyException(\n            \"Unresolved topology mapping for host \" + node.getHostName());\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "ed841dd9a96e54cb84d9cae5507e47ff1c8cdf6e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6995. Block should be placed in the client\u0027s \u0027rack-local\u0027 node if \u0027client-local\u0027 node is not available (vinayakumarb)\n",
      "commitDate": "06/10/14 2:01 AM",
      "commitName": "ed841dd9a96e54cb84d9cae5507e47ff1c8cdf6e",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "18/09/14 5:49 PM",
      "commitNameOld": "8e73084491c9f317bc8cc3590f93ca67a63687a8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 17.34,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n   private String resolveNetworkLocation (DatanodeID node) \n       throws UnresolvedTopologyException {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n-    // resolve its network location\n-    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n+    List\u003cString\u003e rName \u003d resolveNetworkLocation(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null!\");\n         throw new UnresolvedTopologyException(\n             \"Unresolved topology mapping for host \" + node.getHostName());\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     return networkLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String resolveNetworkLocation (DatanodeID node) \n      throws UnresolvedTopologyException {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    List\u003cString\u003e rName \u003d resolveNetworkLocation(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null!\");\n        throw new UnresolvedTopologyException(\n            \"Unresolved topology mapping for host \" + node.getHostName());\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-5846. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 3:16 PM",
      "commitName": "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-5846. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581091 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/14 3:16 PM",
          "commitName": "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "24/03/14 8:39 AM",
          "commitNameOld": "7a18c4a1992aefc6f5cac4e0fb6931e0e3efdd1c",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private String resolveNetworkLocation (DatanodeID node) {\n+  private String resolveNetworkLocation (DatanodeID node) \n+      throws UnresolvedTopologyException {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n-      LOG.error(\"The resolve call returned null! Using \" + \n-          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n-      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n+      LOG.error(\"The resolve call returned null!\");\n+        throw new UnresolvedTopologyException(\n+            \"Unresolved topology mapping for host \" + node.getHostName());\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     return networkLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveNetworkLocation (DatanodeID node) \n      throws UnresolvedTopologyException {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null!\");\n        throw new UnresolvedTopologyException(\n            \"Unresolved topology mapping for host \" + node.getHostName());\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[UnresolvedTopologyException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5846. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581091 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/14 3:16 PM",
          "commitName": "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "24/03/14 8:39 AM",
          "commitNameOld": "7a18c4a1992aefc6f5cac4e0fb6931e0e3efdd1c",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private String resolveNetworkLocation (DatanodeID node) {\n+  private String resolveNetworkLocation (DatanodeID node) \n+      throws UnresolvedTopologyException {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n-      LOG.error(\"The resolve call returned null! Using \" + \n-          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n-      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n+      LOG.error(\"The resolve call returned null!\");\n+        throw new UnresolvedTopologyException(\n+            \"Unresolved topology mapping for host \" + node.getHostName());\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     return networkLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveNetworkLocation (DatanodeID node) \n      throws UnresolvedTopologyException {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null!\");\n        throw new UnresolvedTopologyException(\n            \"Unresolved topology mapping for host \" + node.getHostName());\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 1:39 PM",
      "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
      "commitAuthor": "Devaraj Das",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/04/13 1:39 PM",
          "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "18/03/13 10:20 AM",
          "commitNameOld": "64741f46352f25743bfb77f804a06970d355a177",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 39.14,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  private void resolveNetworkLocation (DatanodeDescriptor node) {\n+  private String resolveNetworkLocation (DatanodeID node) {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n-    node.setNetworkLocation(networkLocation);\n+    return networkLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveNetworkLocation (DatanodeID node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {
            "oldValue": "[node-DatanodeDescriptor]",
            "newValue": "[node-DatanodeID]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/04/13 1:39 PM",
          "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "18/03/13 10:20 AM",
          "commitNameOld": "64741f46352f25743bfb77f804a06970d355a177",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 39.14,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  private void resolveNetworkLocation (DatanodeDescriptor node) {\n+  private String resolveNetworkLocation (DatanodeID node) {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n-    node.setNetworkLocation(networkLocation);\n+    return networkLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveNetworkLocation (DatanodeID node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/04/13 1:39 PM",
          "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "18/03/13 10:20 AM",
          "commitNameOld": "64741f46352f25743bfb77f804a06970d355a177",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 39.14,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  private void resolveNetworkLocation (DatanodeDescriptor node) {\n+  private String resolveNetworkLocation (DatanodeID node) {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       names.add(node.getIpAddr());\n     } else {\n       names.add(node.getHostName());\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n-    node.setNetworkLocation(networkLocation);\n+    return networkLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveNetworkLocation (DatanodeID node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    return networkLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e505b7e704ff83893a40190695977ce1393f6248": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3208. Bogus entries in hosts files are incorrectly displayed in the report. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1310138 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/12 5:20 PM",
      "commitName": "e505b7e704ff83893a40190695977ce1393f6248",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "01/04/12 3:12 PM",
      "commitNameOld": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,20 @@\n   private void resolveNetworkLocation (DatanodeDescriptor node) {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n-      // get the node\u0027s IP address\n       names.add(node.getIpAddr());\n     } else {\n-      // get the node\u0027s host name\n-      String hostName \u003d node.getHostName();\n-      int colon \u003d hostName.indexOf(\":\");\n-      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n-      names.add(hostName);\n+      names.add(node.getHostName());\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     node.setNetworkLocation(networkLocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      names.add(node.getIpAddr());\n    } else {\n      names.add(node.getHostName());\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "be7dd8333a7e56e732171db0781786987de03195": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3144. Refactor DatanodeID#getName by use. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/12 3:12 PM",
      "commitName": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "31/03/12 8:41 PM",
      "commitNameOld": "0663dbaac0a19719ddf9cd4290ba893bfca69da2",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void resolveNetworkLocation (DatanodeDescriptor node) {\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       // get the node\u0027s IP address\n-      names.add(node.getHost());\n+      names.add(node.getIpAddr());\n     } else {\n       // get the node\u0027s host name\n       String hostName \u003d node.getHostName();\n       int colon \u003d hostName.indexOf(\":\");\n       hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n       names.add(hostName);\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     node.setNetworkLocation(networkLocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      // get the node\u0027s IP address\n      names.add(node.getIpAddr());\n    } else {\n      // get the node\u0027s host name\n      String hostName \u003d node.getHostName();\n      int colon \u003d hostName.indexOf(\":\");\n      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n      names.add(hostName);\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      // get the node\u0027s IP address\n      names.add(node.getHost());\n    } else {\n      // get the node\u0027s host name\n      String hostName \u003d node.getHostName();\n      int colon \u003d hostName.indexOf(\":\");\n      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n      names.add(hostName);\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      // get the node\u0027s IP address\n      names.add(node.getHost());\n    } else {\n      // get the node\u0027s host name\n      String hostName \u003d node.getHostName();\n      int colon \u003d hostName.indexOf(\":\");\n      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n      names.add(hostName);\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
      }
    },
    "233a7aa34f37350bf7bcdd9c84b97d613e7344c9": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-2167.  Move dnsToSwitchMapping and hostsReader from FSNamesystem to DatanodeManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149455 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/11 9:20 PM",
      "commitName": "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2167.  Move dnsToSwitchMapping and hostsReader from FSNamesystem to DatanodeManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149455 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/07/11 9:20 PM",
          "commitName": "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/07/11 12:16 PM",
          "commitNameOld": "c187bdc0a28e4f3b9378e2b1daa964c23b599383",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n   private void resolveNetworkLocation (DatanodeDescriptor node) {\n-    assert hasWriteLock();\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       // get the node\u0027s IP address\n       names.add(node.getHost());\n     } else {\n       // get the node\u0027s host name\n       String hostName \u003d node.getHostName();\n       int colon \u003d hostName.indexOf(\":\");\n       hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n       names.add(hostName);\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     node.setNetworkLocation(networkLocation);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      // get the node\u0027s IP address\n      names.add(node.getHost());\n    } else {\n      // get the node\u0027s host name\n      String hostName \u003d node.getHostName();\n      int colon \u003d hostName.indexOf(\":\");\n      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n      names.add(hostName);\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
            "oldMethodName": "resolveNetworkLocation",
            "newMethodName": "resolveNetworkLocation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2167.  Move dnsToSwitchMapping and hostsReader from FSNamesystem to DatanodeManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149455 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/07/11 9:20 PM",
          "commitName": "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/07/11 12:16 PM",
          "commitNameOld": "c187bdc0a28e4f3b9378e2b1daa964c23b599383",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n   private void resolveNetworkLocation (DatanodeDescriptor node) {\n-    assert hasWriteLock();\n     List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n     if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n       // get the node\u0027s IP address\n       names.add(node.getHost());\n     } else {\n       // get the node\u0027s host name\n       String hostName \u003d node.getHostName();\n       int colon \u003d hostName.indexOf(\":\");\n       hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n       names.add(hostName);\n     }\n     \n     // resolve its network location\n     List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n     String networkLocation;\n     if (rName \u003d\u003d null) {\n       LOG.error(\"The resolve call returned null! Using \" + \n           NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n       networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n     } else {\n       networkLocation \u003d rName.get(0);\n     }\n     node.setNetworkLocation(networkLocation);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      // get the node\u0027s IP address\n      names.add(node.getHost());\n    } else {\n      // get the node\u0027s host name\n      String hostName \u003d node.getHostName();\n      int colon \u003d hostName.indexOf(\":\");\n      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n      names.add(hostName);\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+  private void resolveNetworkLocation (DatanodeDescriptor node) {\n+    assert hasWriteLock();\n+    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n+    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n+      // get the node\u0027s IP address\n+      names.add(node.getHost());\n+    } else {\n+      // get the node\u0027s host name\n+      String hostName \u003d node.getHostName();\n+      int colon \u003d hostName.indexOf(\":\");\n+      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n+      names.add(hostName);\n+    }\n+    \n+    // resolve its network location\n+    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n+    String networkLocation;\n+    if (rName \u003d\u003d null) {\n+      LOG.error(\"The resolve call returned null! Using \" + \n+          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n+      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n+    } else {\n+      networkLocation \u003d rName.get(0);\n+    }\n+    node.setNetworkLocation(networkLocation);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resolveNetworkLocation (DatanodeDescriptor node) {\n    assert hasWriteLock();\n    List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e(1);\n    if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {\n      // get the node\u0027s IP address\n      names.add(node.getHost());\n    } else {\n      // get the node\u0027s host name\n      String hostName \u003d node.getHostName();\n      int colon \u003d hostName.indexOf(\":\");\n      hostName \u003d (colon\u003d\u003d-1)?hostName:hostName.substring(0,colon);\n      names.add(hostName);\n    }\n    \n    // resolve its network location\n    List\u003cString\u003e rName \u003d dnsToSwitchMapping.resolve(names);\n    String networkLocation;\n    if (rName \u003d\u003d null) {\n      LOG.error(\"The resolve call returned null! Using \" + \n          NetworkTopology.DEFAULT_RACK + \" for host \" + names);\n      networkLocation \u003d NetworkTopology.DEFAULT_RACK;\n    } else {\n      networkLocation \u003d rName.get(0);\n    }\n    node.setNetworkLocation(networkLocation);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}