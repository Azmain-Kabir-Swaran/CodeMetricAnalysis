{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultResourceCalculator.java",
  "functionName": "normalize",
  "functionId": "normalize___r-Resource__minimumResource-Resource__maximumResource-Resource__stepFactor-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DefaultResourceCalculator.java",
  "functionStartLine": 83,
  "functionEndLine": 98,
  "numCommitsSeen": 16,
  "timeTaken": 2097,
  "changeHistory": [
    "25f9872be63423ada6a18481eaad2888e731fdac",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0"
  ],
  "changeHistoryShort": {
    "25f9872be63423ada6a18481eaad2888e731fdac": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25f9872be63423ada6a18481eaad2888e731fdac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 9:40 AM",
      "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 140.5,
      "commitsBetweenForRepo": 1014,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,16 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n+    if (stepFactor.getMemorySize() \u003d\u003d 0) {\n+      LOG.error(\"Memory cannot be allocated in increments of zero. Assuming \" +\n+          minimumResource.getMemorySize() + \"MB increment size. \"\n+          + \"Please ensure the scheduler configuration is correct.\");\n+      stepFactor \u003d minimumResource;\n+    }\n+\n     long normalizedMemory \u003d Math.min(\n         roundUp(\n             Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n             stepFactor.getMemorySize()),\n             maximumResource.getMemorySize());\n     return Resources.createResource(normalizedMemory);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    if (stepFactor.getMemorySize() \u003d\u003d 0) {\n      LOG.error(\"Memory cannot be allocated in increments of zero. Assuming \" +\n          minimumResource.getMemorySize() + \"MB increment size. \"\n          + \"Please ensure the scheduler configuration is correct.\");\n      stepFactor \u003d minimumResource;\n    }\n\n    long normalizedMemory \u003d Math.min(\n        roundUp(\n            Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n            stepFactor.getMemorySize()),\n            maximumResource.getMemorySize());\n    return Resources.createResource(normalizedMemory);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DefaultResourceCalculator.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 248.81,
      "commitsBetweenForRepo": 1666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   public Resource normalize(Resource r, Resource minimumResource,\n       Resource maximumResource, Resource stepFactor) {\n-    int normalizedMemory \u003d Math.min(\n+    long normalizedMemory \u003d Math.min(\n         roundUp(\n-            Math.max(r.getMemory(), minimumResource.getMemory()),\n-            stepFactor.getMemory()),\n-            maximumResource.getMemory());\n+            Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n+            stepFactor.getMemorySize()),\n+            maximumResource.getMemorySize());\n     return Resources.createResource(normalizedMemory);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    long normalizedMemory \u003d Math.min(\n        roundUp(\n            Math.max(r.getMemorySize(), minimumResource.getMemorySize()),\n            stepFactor.getMemorySize()),\n            maximumResource.getMemorySize());\n    return Resources.createResource(normalizedMemory);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DefaultResourceCalculator.java",
      "extendedDetails": {}
    },
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-827. Need to make Resource arithmetic methods accessible^CJian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495533 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 11:28 AM",
      "commitName": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,9 @@\n+  public Resource normalize(Resource r, Resource minimumResource,\n+      Resource maximumResource, Resource stepFactor) {\n+    int normalizedMemory \u003d Math.min(\n+        roundUp(\n+            Math.max(r.getMemory(), minimumResource.getMemory()),\n+            stepFactor.getMemory()),\n+            maximumResource.getMemory());\n+    return Resources.createResource(normalizedMemory);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource normalize(Resource r, Resource minimumResource,\n      Resource maximumResource, Resource stepFactor) {\n    int normalizedMemory \u003d Math.min(\n        roundUp(\n            Math.max(r.getMemory(), minimumResource.getMemory()),\n            stepFactor.getMemory()),\n            maximumResource.getMemory());\n    return Resources.createResource(normalizedMemory);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DefaultResourceCalculator.java"
    }
  }
}