{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SharedKeyCredentials.java",
  "functionName": "getCanonicalizedResource",
  "functionId": "getCanonicalizedResource___address-URL(modifiers-final)__accountName-String(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SharedKeyCredentials.java",
  "functionStartLine": 259,
  "functionEndLine": 314,
  "numCommitsSeen": 5,
  "timeTaken": 1585,
  "changeHistory": [
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ymultichange(Yparameterchange,Ybodychange)",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,56 @@\n-  private static String getCanonicalizedResource(final java.net.URL address, final String accountName) throws UnsupportedEncodingException {\n+  private static String getCanonicalizedResource(final URL address,\n+      final String accountName) throws UnsupportedEncodingException {\n     // Resource path\n     final StringBuilder resourcepath \u003d new StringBuilder(AbfsHttpConstants.FORWARD_SLASH);\n     resourcepath.append(accountName);\n \n     // Note that AbsolutePath starts with a \u0027/\u0027.\n     resourcepath.append(address.getPath());\n     final StringBuilder canonicalizedResource \u003d new StringBuilder(resourcepath.toString());\n \n     // query parameters\n     if (address.getQuery() \u003d\u003d null || !address.getQuery().contains(AbfsHttpConstants.EQUAL)) {\n       //no query params.\n       return canonicalizedResource.toString();\n     }\n \n     final Map\u003cString, String[]\u003e queryVariables \u003d parseQueryString(address.getQuery());\n \n-    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003cString, String\u003e();\n+    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003c\u003e();\n \n     for (final Entry\u003cString, String[]\u003e entry : queryVariables.entrySet()) {\n       // sort the value and organize it as comma separated values\n       final List\u003cString\u003e sortedValues \u003d Arrays.asList(entry.getValue());\n       Collections.sort(sortedValues);\n \n       final StringBuilder stringValue \u003d new StringBuilder();\n \n       for (final String value : sortedValues) {\n         if (stringValue.length() \u003e 0) {\n           stringValue.append(AbfsHttpConstants.COMMA);\n         }\n \n         stringValue.append(value);\n       }\n \n       // key turns out to be null for ?a\u0026b\u0026c\u0026d\n       lowercasedKeyNameValue.put((entry.getKey()) \u003d\u003d null ? null\n           : entry.getKey().toLowerCase(Locale.ROOT), stringValue.toString());\n     }\n \n     final ArrayList\u003cString\u003e sortedKeys \u003d new ArrayList\u003cString\u003e(lowercasedKeyNameValue.keySet());\n \n     Collections.sort(sortedKeys);\n \n     for (final String key : sortedKeys) {\n       final StringBuilder queryParamString \u003d new StringBuilder();\n \n       queryParamString.append(key);\n       queryParamString.append(\":\");\n       queryParamString.append(lowercasedKeyNameValue.get(key));\n \n       appendCanonicalizedElement(canonicalizedResource, queryParamString.toString());\n     }\n \n     return canonicalizedResource.toString();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static String getCanonicalizedResource(final URL address,\n      final String accountName) throws UnsupportedEncodingException {\n    // Resource path\n    final StringBuilder resourcepath \u003d new StringBuilder(AbfsHttpConstants.FORWARD_SLASH);\n    resourcepath.append(accountName);\n\n    // Note that AbsolutePath starts with a \u0027/\u0027.\n    resourcepath.append(address.getPath());\n    final StringBuilder canonicalizedResource \u003d new StringBuilder(resourcepath.toString());\n\n    // query parameters\n    if (address.getQuery() \u003d\u003d null || !address.getQuery().contains(AbfsHttpConstants.EQUAL)) {\n      //no query params.\n      return canonicalizedResource.toString();\n    }\n\n    final Map\u003cString, String[]\u003e queryVariables \u003d parseQueryString(address.getQuery());\n\n    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003c\u003e();\n\n    for (final Entry\u003cString, String[]\u003e entry : queryVariables.entrySet()) {\n      // sort the value and organize it as comma separated values\n      final List\u003cString\u003e sortedValues \u003d Arrays.asList(entry.getValue());\n      Collections.sort(sortedValues);\n\n      final StringBuilder stringValue \u003d new StringBuilder();\n\n      for (final String value : sortedValues) {\n        if (stringValue.length() \u003e 0) {\n          stringValue.append(AbfsHttpConstants.COMMA);\n        }\n\n        stringValue.append(value);\n      }\n\n      // key turns out to be null for ?a\u0026b\u0026c\u0026d\n      lowercasedKeyNameValue.put((entry.getKey()) \u003d\u003d null ? null\n          : entry.getKey().toLowerCase(Locale.ROOT), stringValue.toString());\n    }\n\n    final ArrayList\u003cString\u003e sortedKeys \u003d new ArrayList\u003cString\u003e(lowercasedKeyNameValue.keySet());\n\n    Collections.sort(sortedKeys);\n\n    for (final String key : sortedKeys) {\n      final StringBuilder queryParamString \u003d new StringBuilder();\n\n      queryParamString.append(key);\n      queryParamString.append(\":\");\n      queryParamString.append(lowercasedKeyNameValue.get(key));\n\n      appendCanonicalizedElement(canonicalizedResource, queryParamString.toString());\n    }\n\n    return canonicalizedResource.toString();\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SharedKeyCredentials.java",
          "extendedDetails": {
            "oldValue": "[address-java.net.URL(modifiers-final), accountName-String(modifiers-final)]",
            "newValue": "[address-URL(modifiers-final), accountName-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,56 @@\n-  private static String getCanonicalizedResource(final java.net.URL address, final String accountName) throws UnsupportedEncodingException {\n+  private static String getCanonicalizedResource(final URL address,\n+      final String accountName) throws UnsupportedEncodingException {\n     // Resource path\n     final StringBuilder resourcepath \u003d new StringBuilder(AbfsHttpConstants.FORWARD_SLASH);\n     resourcepath.append(accountName);\n \n     // Note that AbsolutePath starts with a \u0027/\u0027.\n     resourcepath.append(address.getPath());\n     final StringBuilder canonicalizedResource \u003d new StringBuilder(resourcepath.toString());\n \n     // query parameters\n     if (address.getQuery() \u003d\u003d null || !address.getQuery().contains(AbfsHttpConstants.EQUAL)) {\n       //no query params.\n       return canonicalizedResource.toString();\n     }\n \n     final Map\u003cString, String[]\u003e queryVariables \u003d parseQueryString(address.getQuery());\n \n-    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003cString, String\u003e();\n+    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003c\u003e();\n \n     for (final Entry\u003cString, String[]\u003e entry : queryVariables.entrySet()) {\n       // sort the value and organize it as comma separated values\n       final List\u003cString\u003e sortedValues \u003d Arrays.asList(entry.getValue());\n       Collections.sort(sortedValues);\n \n       final StringBuilder stringValue \u003d new StringBuilder();\n \n       for (final String value : sortedValues) {\n         if (stringValue.length() \u003e 0) {\n           stringValue.append(AbfsHttpConstants.COMMA);\n         }\n \n         stringValue.append(value);\n       }\n \n       // key turns out to be null for ?a\u0026b\u0026c\u0026d\n       lowercasedKeyNameValue.put((entry.getKey()) \u003d\u003d null ? null\n           : entry.getKey().toLowerCase(Locale.ROOT), stringValue.toString());\n     }\n \n     final ArrayList\u003cString\u003e sortedKeys \u003d new ArrayList\u003cString\u003e(lowercasedKeyNameValue.keySet());\n \n     Collections.sort(sortedKeys);\n \n     for (final String key : sortedKeys) {\n       final StringBuilder queryParamString \u003d new StringBuilder();\n \n       queryParamString.append(key);\n       queryParamString.append(\":\");\n       queryParamString.append(lowercasedKeyNameValue.get(key));\n \n       appendCanonicalizedElement(canonicalizedResource, queryParamString.toString());\n     }\n \n     return canonicalizedResource.toString();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static String getCanonicalizedResource(final URL address,\n      final String accountName) throws UnsupportedEncodingException {\n    // Resource path\n    final StringBuilder resourcepath \u003d new StringBuilder(AbfsHttpConstants.FORWARD_SLASH);\n    resourcepath.append(accountName);\n\n    // Note that AbsolutePath starts with a \u0027/\u0027.\n    resourcepath.append(address.getPath());\n    final StringBuilder canonicalizedResource \u003d new StringBuilder(resourcepath.toString());\n\n    // query parameters\n    if (address.getQuery() \u003d\u003d null || !address.getQuery().contains(AbfsHttpConstants.EQUAL)) {\n      //no query params.\n      return canonicalizedResource.toString();\n    }\n\n    final Map\u003cString, String[]\u003e queryVariables \u003d parseQueryString(address.getQuery());\n\n    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003c\u003e();\n\n    for (final Entry\u003cString, String[]\u003e entry : queryVariables.entrySet()) {\n      // sort the value and organize it as comma separated values\n      final List\u003cString\u003e sortedValues \u003d Arrays.asList(entry.getValue());\n      Collections.sort(sortedValues);\n\n      final StringBuilder stringValue \u003d new StringBuilder();\n\n      for (final String value : sortedValues) {\n        if (stringValue.length() \u003e 0) {\n          stringValue.append(AbfsHttpConstants.COMMA);\n        }\n\n        stringValue.append(value);\n      }\n\n      // key turns out to be null for ?a\u0026b\u0026c\u0026d\n      lowercasedKeyNameValue.put((entry.getKey()) \u003d\u003d null ? null\n          : entry.getKey().toLowerCase(Locale.ROOT), stringValue.toString());\n    }\n\n    final ArrayList\u003cString\u003e sortedKeys \u003d new ArrayList\u003cString\u003e(lowercasedKeyNameValue.keySet());\n\n    Collections.sort(sortedKeys);\n\n    for (final String key : sortedKeys) {\n      final StringBuilder queryParamString \u003d new StringBuilder();\n\n      queryParamString.append(key);\n      queryParamString.append(\":\");\n      queryParamString.append(lowercasedKeyNameValue.get(key));\n\n      appendCanonicalizedElement(canonicalizedResource, queryParamString.toString());\n    }\n\n    return canonicalizedResource.toString();\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SharedKeyCredentials.java",
          "extendedDetails": {}
        }
      ]
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,55 @@\n+  private static String getCanonicalizedResource(final java.net.URL address, final String accountName) throws UnsupportedEncodingException {\n+    // Resource path\n+    final StringBuilder resourcepath \u003d new StringBuilder(AbfsHttpConstants.FORWARD_SLASH);\n+    resourcepath.append(accountName);\n+\n+    // Note that AbsolutePath starts with a \u0027/\u0027.\n+    resourcepath.append(address.getPath());\n+    final StringBuilder canonicalizedResource \u003d new StringBuilder(resourcepath.toString());\n+\n+    // query parameters\n+    if (address.getQuery() \u003d\u003d null || !address.getQuery().contains(AbfsHttpConstants.EQUAL)) {\n+      //no query params.\n+      return canonicalizedResource.toString();\n+    }\n+\n+    final Map\u003cString, String[]\u003e queryVariables \u003d parseQueryString(address.getQuery());\n+\n+    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003cString, String\u003e();\n+\n+    for (final Entry\u003cString, String[]\u003e entry : queryVariables.entrySet()) {\n+      // sort the value and organize it as comma separated values\n+      final List\u003cString\u003e sortedValues \u003d Arrays.asList(entry.getValue());\n+      Collections.sort(sortedValues);\n+\n+      final StringBuilder stringValue \u003d new StringBuilder();\n+\n+      for (final String value : sortedValues) {\n+        if (stringValue.length() \u003e 0) {\n+          stringValue.append(AbfsHttpConstants.COMMA);\n+        }\n+\n+        stringValue.append(value);\n+      }\n+\n+      // key turns out to be null for ?a\u0026b\u0026c\u0026d\n+      lowercasedKeyNameValue.put((entry.getKey()) \u003d\u003d null ? null\n+          : entry.getKey().toLowerCase(Locale.ROOT), stringValue.toString());\n+    }\n+\n+    final ArrayList\u003cString\u003e sortedKeys \u003d new ArrayList\u003cString\u003e(lowercasedKeyNameValue.keySet());\n+\n+    Collections.sort(sortedKeys);\n+\n+    for (final String key : sortedKeys) {\n+      final StringBuilder queryParamString \u003d new StringBuilder();\n+\n+      queryParamString.append(key);\n+      queryParamString.append(\":\");\n+      queryParamString.append(lowercasedKeyNameValue.get(key));\n+\n+      appendCanonicalizedElement(canonicalizedResource, queryParamString.toString());\n+    }\n+\n+    return canonicalizedResource.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static String getCanonicalizedResource(final java.net.URL address, final String accountName) throws UnsupportedEncodingException {\n    // Resource path\n    final StringBuilder resourcepath \u003d new StringBuilder(AbfsHttpConstants.FORWARD_SLASH);\n    resourcepath.append(accountName);\n\n    // Note that AbsolutePath starts with a \u0027/\u0027.\n    resourcepath.append(address.getPath());\n    final StringBuilder canonicalizedResource \u003d new StringBuilder(resourcepath.toString());\n\n    // query parameters\n    if (address.getQuery() \u003d\u003d null || !address.getQuery().contains(AbfsHttpConstants.EQUAL)) {\n      //no query params.\n      return canonicalizedResource.toString();\n    }\n\n    final Map\u003cString, String[]\u003e queryVariables \u003d parseQueryString(address.getQuery());\n\n    final Map\u003cString, String\u003e lowercasedKeyNameValue \u003d new HashMap\u003cString, String\u003e();\n\n    for (final Entry\u003cString, String[]\u003e entry : queryVariables.entrySet()) {\n      // sort the value and organize it as comma separated values\n      final List\u003cString\u003e sortedValues \u003d Arrays.asList(entry.getValue());\n      Collections.sort(sortedValues);\n\n      final StringBuilder stringValue \u003d new StringBuilder();\n\n      for (final String value : sortedValues) {\n        if (stringValue.length() \u003e 0) {\n          stringValue.append(AbfsHttpConstants.COMMA);\n        }\n\n        stringValue.append(value);\n      }\n\n      // key turns out to be null for ?a\u0026b\u0026c\u0026d\n      lowercasedKeyNameValue.put((entry.getKey()) \u003d\u003d null ? null\n          : entry.getKey().toLowerCase(Locale.ROOT), stringValue.toString());\n    }\n\n    final ArrayList\u003cString\u003e sortedKeys \u003d new ArrayList\u003cString\u003e(lowercasedKeyNameValue.keySet());\n\n    Collections.sort(sortedKeys);\n\n    for (final String key : sortedKeys) {\n      final StringBuilder queryParamString \u003d new StringBuilder();\n\n      queryParamString.append(key);\n      queryParamString.append(\":\");\n      queryParamString.append(lowercasedKeyNameValue.get(key));\n\n      appendCanonicalizedElement(canonicalizedResource, queryParamString.toString());\n    }\n\n    return canonicalizedResource.toString();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SharedKeyCredentials.java"
    }
  }
}