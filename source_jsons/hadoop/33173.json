{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IntelFpgaOpenclPlugin.java",
  "functionName": "initPlugin",
  "functionId": "initPlugin___config-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
  "functionStartLine": 87,
  "functionEndLine": 136,
  "numCommitsSeen": 13,
  "timeTaken": 2822,
  "changeHistory": [
    "8e1539eca8175f58f836daa5b0ad598c890cbb02",
    "a457a8951a1b35f06811c40443ca44bb9c698c30",
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "8e1539eca8175f58f836daa5b0ad598c890cbb02": "Ymultichange(Yparameterchange,Ybodychange)",
    "a457a8951a1b35f06811c40443ca44bb9c698c30": "Ybodychange",
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e1539eca8175f58f836daa5b0ad598c890cbb02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
      "commitDate": "12/03/19 2:15 PM",
      "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/03/19 4:09 AM",
          "commitNameOld": "de15a66d782094632abd09222b87a01bab8e0f5e",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 4.38,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  public boolean initPlugin(Configuration conf) {\n-    this.aliasMap \u003d new HashMap\u003c\u003e();\n-    if (this.initialized) {\n+  public boolean initPlugin(Configuration config) {\n+    if (initialized) {\n       return true;\n     }\n \n     // Find the proper toolchain, mainly aocl\n-    String pluginDefaultBinaryName \u003d getDefaultBinaryName();\n-    String pathToExecutable \u003d conf.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n-        \"\");\n-    if (pathToExecutable.isEmpty()) {\n-      pathToExecutable \u003d pluginDefaultBinaryName;\n-    }\n+    String pluginDefaultBinaryName \u003d DEFAULT_BINARY_NAME;\n+    String executable \u003d config.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n+        pluginDefaultBinaryName);\n+\n     // Validate file existence\n-    File binaryPath \u003d new File(pathToExecutable);\n+    File binaryPath \u003d new File(executable);\n     if (!binaryPath.exists()) {\n       // When binary not exist, fail\n       LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n           YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n           \", please check! Try default path\");\n-      pathToExecutable \u003d pluginDefaultBinaryName;\n+      executable \u003d pluginDefaultBinaryName;\n       // Try to find in plugin\u0027s preferred path\n       String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n       if (null \u003d\u003d pluginDefaultPreferredPath) {\n-        LOG.warn(\"Failed to find FPGA discoverer executable from system environment \" +\n-            getDefaultPathEnvName()+\n+        LOG.warn(\"Failed to find FPGA discoverer executable from system \"\n+            + \" environment \" + ALTERAOCLSDKROOT_NAME +\n             \", please check your environment!\");\n       } else {\n-        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\n+        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\",\n+            pluginDefaultBinaryName);\n         if (binaryPath.exists()) {\n-          pathToExecutable \u003d binaryPath.getAbsolutePath();\n+          executable \u003d binaryPath.getAbsolutePath();\n           LOG.info(\"Succeed in finding FPGA discoverer executable: \" +\n-              pathToExecutable);\n+              executable);\n         } else {\n-          pathToExecutable \u003d pluginDefaultBinaryName;\n+          executable \u003d pluginDefaultBinaryName;\n           LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n-              pluginDefaultPreferredPath + \", file doesn\u0027t exists! Use default binary\" + pathToExecutable);\n+              pluginDefaultPreferredPath +\n+              \", file doesn\u0027t exists! Use default binary\" + executable);\n         }\n       }\n     }\n-    setPathToExecutable(pathToExecutable);\n+\n+    pathToExecutable \u003d executable;\n+\n     if (!diagnose(10*1000)) {\n       LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n-      this.initialized \u003d false;\n+      initialized \u003d false;\n     } else {\n-      this.initialized \u003d true;\n+      initialized \u003d true;\n     }\n-    return this.initialized;\n+    return initialized;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean initPlugin(Configuration config) {\n    if (initialized) {\n      return true;\n    }\n\n    // Find the proper toolchain, mainly aocl\n    String pluginDefaultBinaryName \u003d DEFAULT_BINARY_NAME;\n    String executable \u003d config.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n        pluginDefaultBinaryName);\n\n    // Validate file existence\n    File binaryPath \u003d new File(executable);\n    if (!binaryPath.exists()) {\n      // When binary not exist, fail\n      LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n          YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n          \", please check! Try default path\");\n      executable \u003d pluginDefaultBinaryName;\n      // Try to find in plugin\u0027s preferred path\n      String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n      if (null \u003d\u003d pluginDefaultPreferredPath) {\n        LOG.warn(\"Failed to find FPGA discoverer executable from system \"\n            + \" environment \" + ALTERAOCLSDKROOT_NAME +\n            \", please check your environment!\");\n      } else {\n        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\",\n            pluginDefaultBinaryName);\n        if (binaryPath.exists()) {\n          executable \u003d binaryPath.getAbsolutePath();\n          LOG.info(\"Succeed in finding FPGA discoverer executable: \" +\n              executable);\n        } else {\n          executable \u003d pluginDefaultBinaryName;\n          LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n              pluginDefaultPreferredPath +\n              \", file doesn\u0027t exists! Use default binary\" + executable);\n        }\n      }\n    }\n\n    pathToExecutable \u003d executable;\n\n    if (!diagnose(10*1000)) {\n      LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n      initialized \u003d false;\n    } else {\n      initialized \u003d true;\n    }\n    return initialized;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[config-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/03/19 4:09 AM",
          "commitNameOld": "de15a66d782094632abd09222b87a01bab8e0f5e",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 4.38,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  public boolean initPlugin(Configuration conf) {\n-    this.aliasMap \u003d new HashMap\u003c\u003e();\n-    if (this.initialized) {\n+  public boolean initPlugin(Configuration config) {\n+    if (initialized) {\n       return true;\n     }\n \n     // Find the proper toolchain, mainly aocl\n-    String pluginDefaultBinaryName \u003d getDefaultBinaryName();\n-    String pathToExecutable \u003d conf.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n-        \"\");\n-    if (pathToExecutable.isEmpty()) {\n-      pathToExecutable \u003d pluginDefaultBinaryName;\n-    }\n+    String pluginDefaultBinaryName \u003d DEFAULT_BINARY_NAME;\n+    String executable \u003d config.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n+        pluginDefaultBinaryName);\n+\n     // Validate file existence\n-    File binaryPath \u003d new File(pathToExecutable);\n+    File binaryPath \u003d new File(executable);\n     if (!binaryPath.exists()) {\n       // When binary not exist, fail\n       LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n           YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n           \", please check! Try default path\");\n-      pathToExecutable \u003d pluginDefaultBinaryName;\n+      executable \u003d pluginDefaultBinaryName;\n       // Try to find in plugin\u0027s preferred path\n       String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n       if (null \u003d\u003d pluginDefaultPreferredPath) {\n-        LOG.warn(\"Failed to find FPGA discoverer executable from system environment \" +\n-            getDefaultPathEnvName()+\n+        LOG.warn(\"Failed to find FPGA discoverer executable from system \"\n+            + \" environment \" + ALTERAOCLSDKROOT_NAME +\n             \", please check your environment!\");\n       } else {\n-        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\n+        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\",\n+            pluginDefaultBinaryName);\n         if (binaryPath.exists()) {\n-          pathToExecutable \u003d binaryPath.getAbsolutePath();\n+          executable \u003d binaryPath.getAbsolutePath();\n           LOG.info(\"Succeed in finding FPGA discoverer executable: \" +\n-              pathToExecutable);\n+              executable);\n         } else {\n-          pathToExecutable \u003d pluginDefaultBinaryName;\n+          executable \u003d pluginDefaultBinaryName;\n           LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n-              pluginDefaultPreferredPath + \", file doesn\u0027t exists! Use default binary\" + pathToExecutable);\n+              pluginDefaultPreferredPath +\n+              \", file doesn\u0027t exists! Use default binary\" + executable);\n         }\n       }\n     }\n-    setPathToExecutable(pathToExecutable);\n+\n+    pathToExecutable \u003d executable;\n+\n     if (!diagnose(10*1000)) {\n       LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n-      this.initialized \u003d false;\n+      initialized \u003d false;\n     } else {\n-      this.initialized \u003d true;\n+      initialized \u003d true;\n     }\n-    return this.initialized;\n+    return initialized;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean initPlugin(Configuration config) {\n    if (initialized) {\n      return true;\n    }\n\n    // Find the proper toolchain, mainly aocl\n    String pluginDefaultBinaryName \u003d DEFAULT_BINARY_NAME;\n    String executable \u003d config.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n        pluginDefaultBinaryName);\n\n    // Validate file existence\n    File binaryPath \u003d new File(executable);\n    if (!binaryPath.exists()) {\n      // When binary not exist, fail\n      LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n          YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n          \", please check! Try default path\");\n      executable \u003d pluginDefaultBinaryName;\n      // Try to find in plugin\u0027s preferred path\n      String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n      if (null \u003d\u003d pluginDefaultPreferredPath) {\n        LOG.warn(\"Failed to find FPGA discoverer executable from system \"\n            + \" environment \" + ALTERAOCLSDKROOT_NAME +\n            \", please check your environment!\");\n      } else {\n        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\",\n            pluginDefaultBinaryName);\n        if (binaryPath.exists()) {\n          executable \u003d binaryPath.getAbsolutePath();\n          LOG.info(\"Succeed in finding FPGA discoverer executable: \" +\n              executable);\n        } else {\n          executable \u003d pluginDefaultBinaryName;\n          LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n              pluginDefaultPreferredPath +\n              \", file doesn\u0027t exists! Use default binary\" + executable);\n        }\n      }\n    }\n\n    pathToExecutable \u003d executable;\n\n    if (!diagnose(10*1000)) {\n      LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n      initialized \u003d false;\n    } else {\n      initialized \u003d true;\n    }\n    return initialized;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
          "extendedDetails": {}
        }
      ]
    },
    "a457a8951a1b35f06811c40443ca44bb9c698c30": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8456. Fix a configuration handling bug when user leave FPGA discover executable path configuration default but set OpenCL SDK path environment variable. (Zhankun Tang via wangda)\n\nChange-Id: Iff150ea98ba0c60d448474fd940eb121afce6965\n",
      "commitDate": "18/10/18 10:57 AM",
      "commitName": "a457a8951a1b35f06811c40443ca44bb9c698c30",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/12/17 5:24 AM",
      "commitNameOld": "001008958d8da008ed2e3be370ea4431fd023c97",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 304.19,
      "commitsBetweenForRepo": 2846,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   public boolean initPlugin(Configuration conf) {\n     this.aliasMap \u003d new HashMap\u003c\u003e();\n     if (this.initialized) {\n       return true;\n     }\n     // Find the proper toolchain, mainly aocl\n     String pluginDefaultBinaryName \u003d getDefaultBinaryName();\n     String pathToExecutable \u003d conf.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n         \"\");\n     if (pathToExecutable.isEmpty()) {\n       pathToExecutable \u003d pluginDefaultBinaryName;\n     }\n     // Validate file existence\n     File binaryPath \u003d new File(pathToExecutable);\n     if (!binaryPath.exists()) {\n       // When binary not exist, fail\n       LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n           YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n           \", please check! Try default path\");\n       pathToExecutable \u003d pluginDefaultBinaryName;\n       // Try to find in plugin\u0027s preferred path\n       String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n       if (null \u003d\u003d pluginDefaultPreferredPath) {\n         LOG.warn(\"Failed to find FPGA discoverer executable from system environment \" +\n             getDefaultPathEnvName()+\n             \", please check your environment!\");\n       } else {\n         binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\n         if (binaryPath.exists()) {\n-          pathToExecutable \u003d pluginDefaultPreferredPath;\n+          pathToExecutable \u003d binaryPath.getAbsolutePath();\n+          LOG.info(\"Succeed in finding FPGA discoverer executable: \" +\n+              pathToExecutable);\n         } else {\n           pathToExecutable \u003d pluginDefaultBinaryName;\n           LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n               pluginDefaultPreferredPath + \", file doesn\u0027t exists! Use default binary\" + pathToExecutable);\n         }\n       }\n     }\n     setPathToExecutable(pathToExecutable);\n     if (!diagnose(10*1000)) {\n       LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n       this.initialized \u003d false;\n     } else {\n       this.initialized \u003d true;\n     }\n     return this.initialized;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean initPlugin(Configuration conf) {\n    this.aliasMap \u003d new HashMap\u003c\u003e();\n    if (this.initialized) {\n      return true;\n    }\n    // Find the proper toolchain, mainly aocl\n    String pluginDefaultBinaryName \u003d getDefaultBinaryName();\n    String pathToExecutable \u003d conf.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n        \"\");\n    if (pathToExecutable.isEmpty()) {\n      pathToExecutable \u003d pluginDefaultBinaryName;\n    }\n    // Validate file existence\n    File binaryPath \u003d new File(pathToExecutable);\n    if (!binaryPath.exists()) {\n      // When binary not exist, fail\n      LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n          YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n          \", please check! Try default path\");\n      pathToExecutable \u003d pluginDefaultBinaryName;\n      // Try to find in plugin\u0027s preferred path\n      String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n      if (null \u003d\u003d pluginDefaultPreferredPath) {\n        LOG.warn(\"Failed to find FPGA discoverer executable from system environment \" +\n            getDefaultPathEnvName()+\n            \", please check your environment!\");\n      } else {\n        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\n        if (binaryPath.exists()) {\n          pathToExecutable \u003d binaryPath.getAbsolutePath();\n          LOG.info(\"Succeed in finding FPGA discoverer executable: \" +\n              pathToExecutable);\n        } else {\n          pathToExecutable \u003d pluginDefaultBinaryName;\n          LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n              pluginDefaultPreferredPath + \", file doesn\u0027t exists! Use default binary\" + pathToExecutable);\n        }\n      }\n    }\n    setPathToExecutable(pathToExecutable);\n    if (!diagnose(10*1000)) {\n      LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n      this.initialized \u003d false;\n    } else {\n      this.initialized \u003d true;\n    }\n    return this.initialized;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
      "extendedDetails": {}
    },
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,46 @@\n+  public boolean initPlugin(Configuration conf) {\n+    this.aliasMap \u003d new HashMap\u003c\u003e();\n+    if (this.initialized) {\n+      return true;\n+    }\n+    // Find the proper toolchain, mainly aocl\n+    String pluginDefaultBinaryName \u003d getDefaultBinaryName();\n+    String pathToExecutable \u003d conf.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n+        \"\");\n+    if (pathToExecutable.isEmpty()) {\n+      pathToExecutable \u003d pluginDefaultBinaryName;\n+    }\n+    // Validate file existence\n+    File binaryPath \u003d new File(pathToExecutable);\n+    if (!binaryPath.exists()) {\n+      // When binary not exist, fail\n+      LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n+          YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n+          \", please check! Try default path\");\n+      pathToExecutable \u003d pluginDefaultBinaryName;\n+      // Try to find in plugin\u0027s preferred path\n+      String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n+      if (null \u003d\u003d pluginDefaultPreferredPath) {\n+        LOG.warn(\"Failed to find FPGA discoverer executable from system environment \" +\n+            getDefaultPathEnvName()+\n+            \", please check your environment!\");\n+      } else {\n+        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\n+        if (binaryPath.exists()) {\n+          pathToExecutable \u003d pluginDefaultPreferredPath;\n+        } else {\n+          pathToExecutable \u003d pluginDefaultBinaryName;\n+          LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n+              pluginDefaultPreferredPath + \", file doesn\u0027t exists! Use default binary\" + pathToExecutable);\n+        }\n+      }\n+    }\n+    setPathToExecutable(pathToExecutable);\n+    if (!diagnose(10*1000)) {\n+      LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n+      this.initialized \u003d false;\n+    } else {\n+      this.initialized \u003d true;\n+    }\n+    return this.initialized;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean initPlugin(Configuration conf) {\n    this.aliasMap \u003d new HashMap\u003c\u003e();\n    if (this.initialized) {\n      return true;\n    }\n    // Find the proper toolchain, mainly aocl\n    String pluginDefaultBinaryName \u003d getDefaultBinaryName();\n    String pathToExecutable \u003d conf.get(YarnConfiguration.NM_FPGA_PATH_TO_EXEC,\n        \"\");\n    if (pathToExecutable.isEmpty()) {\n      pathToExecutable \u003d pluginDefaultBinaryName;\n    }\n    // Validate file existence\n    File binaryPath \u003d new File(pathToExecutable);\n    if (!binaryPath.exists()) {\n      // When binary not exist, fail\n      LOG.warn(\"Failed to find FPGA discoverer executable configured in \" +\n          YarnConfiguration.NM_FPGA_PATH_TO_EXEC +\n          \", please check! Try default path\");\n      pathToExecutable \u003d pluginDefaultBinaryName;\n      // Try to find in plugin\u0027s preferred path\n      String pluginDefaultPreferredPath \u003d getDefaultPathToExecutable();\n      if (null \u003d\u003d pluginDefaultPreferredPath) {\n        LOG.warn(\"Failed to find FPGA discoverer executable from system environment \" +\n            getDefaultPathEnvName()+\n            \", please check your environment!\");\n      } else {\n        binaryPath \u003d new File(pluginDefaultPreferredPath + \"/bin\", pluginDefaultBinaryName);\n        if (binaryPath.exists()) {\n          pathToExecutable \u003d pluginDefaultPreferredPath;\n        } else {\n          pathToExecutable \u003d pluginDefaultBinaryName;\n          LOG.warn(\"Failed to find FPGA discoverer executable in \" +\n              pluginDefaultPreferredPath + \", file doesn\u0027t exists! Use default binary\" + pathToExecutable);\n        }\n      }\n    }\n    setPathToExecutable(pathToExecutable);\n    if (!diagnose(10*1000)) {\n      LOG.warn(\"Intel FPGA for OpenCL diagnose failed!\");\n      this.initialized \u003d false;\n    } else {\n      this.initialized \u003d true;\n    }\n    return this.initialized;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java"
    }
  }
}