{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionDestroy",
  "functionId": "actionDestroy___serviceName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 795,
  "functionEndLine": 858,
  "numCommitsSeen": 56,
  "timeTaken": 5962,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "d553799030a5a64df328319aceb35734d0b2de20",
    "37f4696a9cc9284b242215f56a10990e1028d40c",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
    "541b64c7985db425c5ce8bd5f71a2d5980809708",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ybodychange",
    "d553799030a5a64df328319aceb35734d0b2de20": "Ybodychange",
    "37f4696a9cc9284b242215f56a10990e1028d40c": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": "Ymultichange(Yexceptionschange,Ybodychange)",
    "541b64c7985db425c5ce8bd5f71a2d5980809708": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/09/19 12:49 PM",
      "commitNameOld": "2e2e5401f297545181323b126a69eaa2239afb02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,64 @@\n   public int actionDestroy(String serviceName) throws YarnException,\n       IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     verifyNoLiveAppInRM(serviceName, \"destroy\");\n \n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppInfo.remove(serviceName);\n     int ret \u003d EXIT_SUCCESS;\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     } else {\n       LOG.info(\"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at hdfs path: \"\n           + appDir);\n       ret \u003d EXIT_NOT_FOUND;\n     }\n+\n+    // Delete Public Resource Dir\n+    Path publicResourceDir \u003d new Path(fs.getBasePath(), serviceName);\n+    if (fileSystem.exists(publicResourceDir)) {\n+      if (fileSystem.delete(publicResourceDir, true)) {\n+        LOG.info(\"Successfully deleted public resource dir for \"\n+            + serviceName + \": \" + publicResourceDir);\n+      } else {\n+        String message \u003d \"Failed to delete public resource dir for service \"\n+            + serviceName + \" at:  \" + publicResourceDir;\n+        LOG.info(message);\n+        throw new YarnException(message);\n+      }\n+    }\n+\n     try {\n       deleteZKNode(serviceName);\n       // don\u0027t set destroySucceed to false if no ZK node exists because not\n       // all services use a ZK node\n     } catch (Exception e) {\n       throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n     }\n     if (!cleanUpRegistry(serviceName)) {\n       if (ret \u003d\u003d EXIT_SUCCESS) {\n         ret \u003d EXIT_OTHER_FAILURE;\n       }\n     }\n     if (ret \u003d\u003d EXIT_SUCCESS) {\n       LOG.info(\"Successfully destroyed service {}\", serviceName);\n       return ret;\n     } else if (ret \u003d\u003d EXIT_NOT_FOUND) {\n       LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: not found.\");\n       return ret;\n     } else {\n       LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: error cleaning up \" +\n           \"registry.\");\n       return ret;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String serviceName) throws YarnException,\n      IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppInfo.remove(serviceName);\n    int ret \u003d EXIT_SUCCESS;\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    } else {\n      LOG.info(\"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at hdfs path: \"\n          + appDir);\n      ret \u003d EXIT_NOT_FOUND;\n    }\n\n    // Delete Public Resource Dir\n    Path publicResourceDir \u003d new Path(fs.getBasePath(), serviceName);\n    if (fileSystem.exists(publicResourceDir)) {\n      if (fileSystem.delete(publicResourceDir, true)) {\n        LOG.info(\"Successfully deleted public resource dir for \"\n            + serviceName + \": \" + publicResourceDir);\n      } else {\n        String message \u003d \"Failed to delete public resource dir for service \"\n            + serviceName + \" at:  \" + publicResourceDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n\n    try {\n      deleteZKNode(serviceName);\n      // don\u0027t set destroySucceed to false if no ZK node exists because not\n      // all services use a ZK node\n    } catch (Exception e) {\n      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n    }\n    if (!cleanUpRegistry(serviceName)) {\n      if (ret \u003d\u003d EXIT_SUCCESS) {\n        ret \u003d EXIT_OTHER_FAILURE;\n      }\n    }\n    if (ret \u003d\u003d EXIT_SUCCESS) {\n      LOG.info(\"Successfully destroyed service {}\", serviceName);\n      return ret;\n    } else if (ret \u003d\u003d EXIT_NOT_FOUND) {\n      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: not found.\");\n      return ret;\n    } else {\n      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: error cleaning up \" +\n          \"registry.\");\n      return ret;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d553799030a5a64df328319aceb35734d0b2de20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "10/04/18 2:40 PM",
      "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,49 @@\n   public int actionDestroy(String serviceName) throws YarnException,\n       IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     verifyNoLiveAppInRM(serviceName, \"destroy\");\n \n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppInfo.remove(serviceName);\n-    boolean destroySucceed \u003d true;\n+    int ret \u003d EXIT_SUCCESS;\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     } else {\n       LOG.info(\"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at hdfs path: \"\n           + appDir);\n-      destroySucceed \u003d false;\n+      ret \u003d EXIT_NOT_FOUND;\n     }\n     try {\n       deleteZKNode(serviceName);\n+      // don\u0027t set destroySucceed to false if no ZK node exists because not\n+      // all services use a ZK node\n     } catch (Exception e) {\n       throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n     }\n-    String registryPath \u003d\n-        ServiceRegistryUtils.registryPathForInstance(serviceName);\n-    try {\n-      if (getRegistryClient().exists(registryPath)) {\n-        getRegistryClient().delete(registryPath, true);\n-      } else {\n-        LOG.info(\n-            \"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at ZK registry path: \"\n-                + registryPath);\n-        destroySucceed \u003d false;\n+    if (!cleanUpRegistry(serviceName)) {\n+      if (ret \u003d\u003d EXIT_SUCCESS) {\n+        ret \u003d EXIT_OTHER_FAILURE;\n       }\n-    } catch (IOException e) {\n-      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n-    if (destroySucceed) {\n+    if (ret \u003d\u003d EXIT_SUCCESS) {\n       LOG.info(\"Successfully destroyed service {}\", serviceName);\n-      return EXIT_SUCCESS;\n-    } else {\n+      return ret;\n+    } else if (ret \u003d\u003d EXIT_NOT_FOUND) {\n       LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: not found.\");\n-      return -1;\n+      return ret;\n+    } else {\n+      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: error cleaning up \" +\n+          \"registry.\");\n+      return ret;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String serviceName) throws YarnException,\n      IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppInfo.remove(serviceName);\n    int ret \u003d EXIT_SUCCESS;\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    } else {\n      LOG.info(\"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at hdfs path: \"\n          + appDir);\n      ret \u003d EXIT_NOT_FOUND;\n    }\n    try {\n      deleteZKNode(serviceName);\n      // don\u0027t set destroySucceed to false if no ZK node exists because not\n      // all services use a ZK node\n    } catch (Exception e) {\n      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n    }\n    if (!cleanUpRegistry(serviceName)) {\n      if (ret \u003d\u003d EXIT_SUCCESS) {\n        ret \u003d EXIT_OTHER_FAILURE;\n      }\n    }\n    if (ret \u003d\u003d EXIT_SUCCESS) {\n      LOG.info(\"Successfully destroyed service {}\", serviceName);\n      return ret;\n    } else if (ret \u003d\u003d EXIT_NOT_FOUND) {\n      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: not found.\");\n      return ret;\n    } else {\n      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: error cleaning up \" +\n          \"registry.\");\n      return ret;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "37f4696a9cc9284b242215f56a10990e1028d40c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7740. Fix logging for destroy yarn service cli when app does not exist and some minor bugs. Contributed by Jian He\n",
      "commitDate": "18/01/18 12:11 PM",
      "commitName": "37f4696a9cc9284b242215f56a10990e1028d40c",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "12/01/18 3:33 PM",
      "commitNameOld": "53f2768926700d2a27ce6223f1ccbfd3be49fc29",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 5.86,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,52 @@\n   public int actionDestroy(String serviceName) throws YarnException,\n       IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     verifyNoLiveAppInRM(serviceName, \"destroy\");\n \n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppInfo.remove(serviceName);\n+    boolean destroySucceed \u003d true;\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n+    } else {\n+      LOG.info(\"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at hdfs path: \"\n+          + appDir);\n+      destroySucceed \u003d false;\n     }\n     try {\n       deleteZKNode(serviceName);\n     } catch (Exception e) {\n       throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n     }\n-    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n+    String registryPath \u003d\n+        ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n-      getRegistryClient().delete(registryPath, true);\n+      if (getRegistryClient().exists(registryPath)) {\n+        getRegistryClient().delete(registryPath, true);\n+      } else {\n+        LOG.info(\n+            \"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at ZK registry path: \"\n+                + registryPath);\n+        destroySucceed \u003d false;\n+      }\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n-    LOG.info(\"Destroyed cluster {}\", serviceName);\n-    return EXIT_SUCCESS;\n+    if (destroySucceed) {\n+      LOG.info(\"Successfully destroyed service {}\", serviceName);\n+      return EXIT_SUCCESS;\n+    } else {\n+      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: not found.\");\n+      return -1;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String serviceName) throws YarnException,\n      IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppInfo.remove(serviceName);\n    boolean destroySucceed \u003d true;\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    } else {\n      LOG.info(\"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at hdfs path: \"\n          + appDir);\n      destroySucceed \u003d false;\n    }\n    try {\n      deleteZKNode(serviceName);\n    } catch (Exception e) {\n      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n    }\n    String registryPath \u003d\n        ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      if (getRegistryClient().exists(registryPath)) {\n        getRegistryClient().delete(registryPath, true);\n      } else {\n        LOG.info(\n            \"Service \u0027\" + serviceName + \"\u0027 doesn\u0027t exist at ZK registry path: \"\n                + registryPath);\n        destroySucceed \u003d false;\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    if (destroySucceed) {\n      LOG.info(\"Successfully destroyed service {}\", serviceName);\n      return EXIT_SUCCESS;\n    } else {\n      LOG.error(\"Error on destroy \u0027\" + serviceName + \"\u0027: not found.\");\n      return -1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public int actionDestroy(String serviceName) throws YarnException,\n       IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     verifyNoLiveAppInRM(serviceName, \"destroy\");\n \n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n-    cachedAppIds.remove(serviceName);\n+    cachedAppInfo.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n     try {\n       deleteZKNode(serviceName);\n     } catch (Exception e) {\n       throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n     }\n     String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n     LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String serviceName) throws YarnException,\n      IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppInfo.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    try {\n      deleteZKNode(serviceName);\n    } catch (Exception e) {\n      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n    }\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  public int actionDestroy(String serviceName) throws Exception {\n+  public int actionDestroy(String serviceName) throws YarnException,\n+      IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     verifyNoLiveAppInRM(serviceName, \"destroy\");\n \n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppIds.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n-    deleteZKNode(serviceName);\n+    try {\n+      deleteZKNode(serviceName);\n+    } catch (Exception e) {\n+      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n+    }\n     String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n     LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDestroy(String serviceName) throws YarnException,\n      IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    try {\n      deleteZKNode(serviceName);\n    } catch (Exception e) {\n      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n    }\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[Exception]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  public int actionDestroy(String serviceName) throws Exception {\n+  public int actionDestroy(String serviceName) throws YarnException,\n+      IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     verifyNoLiveAppInRM(serviceName, \"destroy\");\n \n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppIds.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n-    deleteZKNode(serviceName);\n+    try {\n+      deleteZKNode(serviceName);\n+    } catch (Exception e) {\n+      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n+    }\n     String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n     LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDestroy(String serviceName) throws YarnException,\n      IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    try {\n      deleteZKNode(serviceName);\n    } catch (Exception e) {\n      throw new IOException(\"Could not delete zk node for \" + serviceName, e);\n    }\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "541b64c7985db425c5ce8bd5f71a2d5980809708": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7165. Miscellaneous fixes in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthor": "Gour Saha",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public int actionDestroy(String serviceName) throws Exception {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n-    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n+    verifyNoLiveAppInRM(serviceName, \"destroy\");\n+\n     Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppIds.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n     deleteZKNode(serviceName);\n     String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n     LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String serviceName) throws Exception {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\n\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    deleteZKNode(serviceName);\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  public int actionDestroy(String appName) throws Exception {\n-    validateClusterName(appName);\n-    verifyNoLiveAppInRM(appName, \"Destroy\");\n-    Path appDir \u003d fs.buildClusterDirPath(appName);\n+  public int actionDestroy(String serviceName) throws Exception {\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n+    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n-    cachedAppIds.remove(appName);\n-    cachedAMProxies.remove(appName);\n+    cachedAppIds.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n-        LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n+        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n-            \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n+            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n-    deleteZKNode(appName);\n-    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(appName);\n+    deleteZKNode(serviceName);\n+    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n-    LOG.info(\"Destroyed cluster {}\", appName);\n+    LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDestroy(String serviceName) throws Exception {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    deleteZKNode(serviceName);\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  public int actionDestroy(String appName) throws Exception {\n-    validateClusterName(appName);\n-    verifyNoLiveAppInRM(appName, \"Destroy\");\n-    Path appDir \u003d fs.buildClusterDirPath(appName);\n+  public int actionDestroy(String serviceName) throws Exception {\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n+    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n-    cachedAppIds.remove(appName);\n-    cachedAMProxies.remove(appName);\n+    cachedAppIds.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n-        LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n+        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n-            \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n+            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n-    deleteZKNode(appName);\n-    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(appName);\n+    deleteZKNode(serviceName);\n+    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n-    LOG.info(\"Destroyed cluster {}\", appName);\n+    LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDestroy(String serviceName) throws Exception {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    deleteZKNode(serviceName);\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  public int actionDestroy(String appName) throws Exception {\n-    validateClusterName(appName);\n-    verifyNoLiveAppInRM(appName, \"Destroy\");\n-    Path appDir \u003d fs.buildClusterDirPath(appName);\n+  public int actionDestroy(String serviceName) throws Exception {\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n+    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n-    cachedAppIds.remove(appName);\n-    cachedAMProxies.remove(appName);\n+    cachedAppIds.remove(serviceName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n-        LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n+        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n-            \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n+            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n-    deleteZKNode(appName);\n-    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(appName);\n+    deleteZKNode(serviceName);\n+    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n-    LOG.info(\"Destroyed cluster {}\", appName);\n+    LOG.info(\"Destroyed cluster {}\", serviceName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDestroy(String serviceName) throws Exception {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    verifyNoLiveAppInRM(serviceName, \"Destroy\");\n    Path appDir \u003d fs.buildClusterDirPath(serviceName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(serviceName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    deleteZKNode(serviceName);\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(serviceName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", serviceName);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String]",
            "newValue": "[serviceName-String]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public int actionDestroy(String appName) throws Exception {\n     validateClusterName(appName);\n     verifyNoLiveAppInRM(appName, \"Destroy\");\n     Path appDir \u003d fs.buildClusterDirPath(appName);\n     FileSystem fileSystem \u003d fs.getFileSystem();\n     // remove from the appId cache\n     cachedAppIds.remove(appName);\n+    cachedAMProxies.remove(appName);\n     if (fileSystem.exists(appDir)) {\n       if (fileSystem.delete(appDir, true)) {\n         LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n             + appDir);\n       } else {\n         String message \u003d\n             \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n         LOG.info(message);\n         throw new YarnException(message);\n       }\n     }\n     deleteZKNode(appName);\n-    String registryPath \u003d SliderRegistryUtils.registryPathForInstance(appName);\n+    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(appName);\n     try {\n       getRegistryClient().delete(registryPath, true);\n     } catch (IOException e) {\n       LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n     }\n     LOG.info(\"Destroyed cluster {}\", appName);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String appName) throws Exception {\n    validateClusterName(appName);\n    verifyNoLiveAppInRM(appName, \"Destroy\");\n    Path appDir \u003d fs.buildClusterDirPath(appName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(appName);\n    cachedAMProxies.remove(appName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    deleteZKNode(appName);\n    String registryPath \u003d ServiceRegistryUtils.registryPathForInstance(appName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", appName);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,28 @@\n+  public int actionDestroy(String appName) throws Exception {\n+    validateClusterName(appName);\n+    verifyNoLiveAppInRM(appName, \"Destroy\");\n+    Path appDir \u003d fs.buildClusterDirPath(appName);\n+    FileSystem fileSystem \u003d fs.getFileSystem();\n+    // remove from the appId cache\n+    cachedAppIds.remove(appName);\n+    if (fileSystem.exists(appDir)) {\n+      if (fileSystem.delete(appDir, true)) {\n+        LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n+            + appDir);\n+      } else {\n+        String message \u003d\n+            \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n+        LOG.info(message);\n+        throw new YarnException(message);\n+      }\n+    }\n+    deleteZKNode(appName);\n+    String registryPath \u003d SliderRegistryUtils.registryPathForInstance(appName);\n+    try {\n+      getRegistryClient().delete(registryPath, true);\n+    } catch (IOException e) {\n+      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n+    }\n+    LOG.info(\"Destroyed cluster {}\", appName);\n+    return EXIT_SUCCESS;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDestroy(String appName) throws Exception {\n    validateClusterName(appName);\n    verifyNoLiveAppInRM(appName, \"Destroy\");\n    Path appDir \u003d fs.buildClusterDirPath(appName);\n    FileSystem fileSystem \u003d fs.getFileSystem();\n    // remove from the appId cache\n    cachedAppIds.remove(appName);\n    if (fileSystem.exists(appDir)) {\n      if (fileSystem.delete(appDir, true)) {\n        LOG.info(\"Successfully deleted application dir for \" + appName + \": \"\n            + appDir);\n      } else {\n        String message \u003d\n            \"Failed to delete application + \" + appName + \" at:  \" + appDir;\n        LOG.info(message);\n        throw new YarnException(message);\n      }\n    }\n    deleteZKNode(appName);\n    String registryPath \u003d SliderRegistryUtils.registryPathForInstance(appName);\n    try {\n      getRegistryClient().delete(registryPath, true);\n    } catch (IOException e) {\n      LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\n    }\n    LOG.info(\"Destroyed cluster {}\", appName);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}