{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystem.java",
  "functionName": "create",
  "functionId": "create___path-Path__permission-FsPermission__overwrite-boolean__bufferSize-int__replication-short__blockSize-long__progress-Progressable",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
  "functionStartLine": 109,
  "functionEndLine": 142,
  "numCommitsSeen": 22,
  "timeTaken": 1967,
  "changeHistory": [
    "be0708c6eb3c759e43639e0f8df7c9910308fb97",
    "6542d17ea460ec222137c4b275b13daf15d3fca3",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "bd2d97adeea55bf2c7e4ab475bcc90f3a14e751a",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "be0708c6eb3c759e43639e0f8df7c9910308fb97": "Ybodychange",
    "6542d17ea460ec222137c4b275b13daf15d3fca3": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ybodychange",
    "bd2d97adeea55bf2c7e4ab475bcc90f3a14e751a": "Ybodychange",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "be0708c6eb3c759e43639e0f8df7c9910308fb97": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15919. AliyunOSS: Enable Yarn to use OSS. Contributed by wujinhu.\n",
      "commitDate": "18/11/18 10:00 PM",
      "commitName": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "13/11/18 8:58 PM",
      "commitNameOld": "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 5.04,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public FSDataOutputStream create(Path path, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     String key \u003d pathToKey(path);\n     FileStatus status \u003d null;\n \n     try {\n       // get the status or throw a FNFE\n       status \u003d getFileStatus(path);\n \n       // if the thread reaches here, there is something at the path\n       if (status.isDirectory()) {\n         // path references a directory\n         throw new FileAlreadyExistsException(path + \" is a directory\");\n       }\n       if (!overwrite) {\n         // path references a file and overwrite is disabled\n         throw new FileAlreadyExistsException(path + \" already exists\");\n       }\n       LOG.debug(\"Overwriting file {}\", path);\n     } catch (FileNotFoundException e) {\n       // this means the file is not found\n     }\n \n     long uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(getConf(),\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n     return new FSDataOutputStream(\n         new AliyunOSSBlockOutputStream(getConf(),\n             store,\n             key,\n             uploadPartSize,\n             new SemaphoredDelegatingExecutor(boundedThreadPool,\n-                blockOutputActiveBlocks, true)), (Statistics)(null));\n+                blockOutputActiveBlocks, true)), statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    String key \u003d pathToKey(path);\n    FileStatus status \u003d null;\n\n    try {\n      // get the status or throw a FNFE\n      status \u003d getFileStatus(path);\n\n      // if the thread reaches here, there is something at the path\n      if (status.isDirectory()) {\n        // path references a directory\n        throw new FileAlreadyExistsException(path + \" is a directory\");\n      }\n      if (!overwrite) {\n        // path references a file and overwrite is disabled\n        throw new FileAlreadyExistsException(path + \" already exists\");\n      }\n      LOG.debug(\"Overwriting file {}\", path);\n    } catch (FileNotFoundException e) {\n      // this means the file is not found\n    }\n\n    long uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(getConf(),\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    return new FSDataOutputStream(\n        new AliyunOSSBlockOutputStream(getConf(),\n            store,\n            key,\n            uploadPartSize,\n            new SemaphoredDelegatingExecutor(boundedThreadPool,\n                blockOutputActiveBlocks, true)), statistics);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "6542d17ea460ec222137c4b275b13daf15d3fca3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14999. AliyunOSS: provide one asynchronous multi-part based uploading mechanism. Contributed by Genmao Yu.\n",
      "commitDate": "30/03/18 5:23 AM",
      "commitName": "6542d17ea460ec222137c4b275b13daf15d3fca3",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "19/03/18 12:02 AM",
      "commitNameOld": "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 11.22,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,34 @@\n   public FSDataOutputStream create(Path path, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     String key \u003d pathToKey(path);\n     FileStatus status \u003d null;\n \n     try {\n       // get the status or throw a FNFE\n       status \u003d getFileStatus(path);\n \n       // if the thread reaches here, there is something at the path\n       if (status.isDirectory()) {\n         // path references a directory\n         throw new FileAlreadyExistsException(path + \" is a directory\");\n       }\n       if (!overwrite) {\n         // path references a file and overwrite is disabled\n         throw new FileAlreadyExistsException(path + \" already exists\");\n       }\n       LOG.debug(\"Overwriting file {}\", path);\n     } catch (FileNotFoundException e) {\n       // this means the file is not found\n     }\n \n-    return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n-        store, key, progress, statistics), (Statistics)(null));\n+    long uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(getConf(),\n+        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n+    return new FSDataOutputStream(\n+        new AliyunOSSBlockOutputStream(getConf(),\n+            store,\n+            key,\n+            uploadPartSize,\n+            new SemaphoredDelegatingExecutor(boundedThreadPool,\n+                blockOutputActiveBlocks, true)), (Statistics)(null));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    String key \u003d pathToKey(path);\n    FileStatus status \u003d null;\n\n    try {\n      // get the status or throw a FNFE\n      status \u003d getFileStatus(path);\n\n      // if the thread reaches here, there is something at the path\n      if (status.isDirectory()) {\n        // path references a directory\n        throw new FileAlreadyExistsException(path + \" is a directory\");\n      }\n      if (!overwrite) {\n        // path references a file and overwrite is disabled\n        throw new FileAlreadyExistsException(path + \" already exists\");\n      }\n      LOG.debug(\"Overwriting file {}\", path);\n    } catch (FileNotFoundException e) {\n      // this means the file is not found\n    }\n\n    long uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(getConf(),\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    return new FSDataOutputStream(\n        new AliyunOSSBlockOutputStream(getConf(),\n            store,\n            key,\n            uploadPartSize,\n            new SemaphoredDelegatingExecutor(boundedThreadPool,\n                blockOutputActiveBlocks, true)), (Statistics)(null));\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public FSDataOutputStream create(Path path, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     String key \u003d pathToKey(path);\n     FileStatus status \u003d null;\n \n     try {\n       // get the status or throw a FNFE\n       status \u003d getFileStatus(path);\n \n       // if the thread reaches here, there is something at the path\n       if (status.isDirectory()) {\n         // path references a directory\n         throw new FileAlreadyExistsException(path + \" is a directory\");\n       }\n       if (!overwrite) {\n         // path references a file and overwrite is disabled\n         throw new FileAlreadyExistsException(path + \" already exists\");\n       }\n       LOG.debug(\"Overwriting file {}\", path);\n     } catch (FileNotFoundException e) {\n       // this means the file is not found\n     }\n \n     return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n-        ossClient, bucketName, key, progress, statistics,\n-        serverSideEncryptionAlgorithm), (Statistics)(null));\n+        store, key, progress, statistics), (Statistics)(null));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    String key \u003d pathToKey(path);\n    FileStatus status \u003d null;\n\n    try {\n      // get the status or throw a FNFE\n      status \u003d getFileStatus(path);\n\n      // if the thread reaches here, there is something at the path\n      if (status.isDirectory()) {\n        // path references a directory\n        throw new FileAlreadyExistsException(path + \" is a directory\");\n      }\n      if (!overwrite) {\n        // path references a file and overwrite is disabled\n        throw new FileAlreadyExistsException(path + \" already exists\");\n      }\n      LOG.debug(\"Overwriting file {}\", path);\n    } catch (FileNotFoundException e) {\n      // this means the file is not found\n    }\n\n    return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n        store, key, progress, statistics), (Statistics)(null));\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "bd2d97adeea55bf2c7e4ab475bcc90f3a14e751a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13483. File create should throw error rather than overwrite directories. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "bd2d97adeea55bf2c7e4ab475bcc90f3a14e751a",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "4d84c814fcaf074022593c057d8f8dec4cd461fa",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,28 @@\n   public FSDataOutputStream create(Path path, FsPermission permission,\n       boolean overwrite, int bufferSize, short replication, long blockSize,\n       Progressable progress) throws IOException {\n     String key \u003d pathToKey(path);\n+    FileStatus status \u003d null;\n \n-    if (!overwrite \u0026\u0026 exists(path)) {\n-      throw new FileAlreadyExistsException(path + \" already exists\");\n+    try {\n+      // get the status or throw a FNFE\n+      status \u003d getFileStatus(path);\n+\n+      // if the thread reaches here, there is something at the path\n+      if (status.isDirectory()) {\n+        // path references a directory\n+        throw new FileAlreadyExistsException(path + \" is a directory\");\n+      }\n+      if (!overwrite) {\n+        // path references a file and overwrite is disabled\n+        throw new FileAlreadyExistsException(path + \" already exists\");\n+      }\n+      LOG.debug(\"Overwriting file {}\", path);\n+    } catch (FileNotFoundException e) {\n+      // this means the file is not found\n     }\n \n     return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n         ossClient, bucketName, key, progress, statistics,\n         serverSideEncryptionAlgorithm), (Statistics)(null));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    String key \u003d pathToKey(path);\n    FileStatus status \u003d null;\n\n    try {\n      // get the status or throw a FNFE\n      status \u003d getFileStatus(path);\n\n      // if the thread reaches here, there is something at the path\n      if (status.isDirectory()) {\n        // path references a directory\n        throw new FileAlreadyExistsException(path + \" is a directory\");\n      }\n      if (!overwrite) {\n        // path references a file and overwrite is disabled\n        throw new FileAlreadyExistsException(path + \" already exists\");\n      }\n      LOG.debug(\"Overwriting file {}\", path);\n    } catch (FileNotFoundException e) {\n      // this means the file is not found\n    }\n\n    return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n        ossClient, bucketName, key, progress, statistics,\n        serverSideEncryptionAlgorithm), (Statistics)(null));\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,13 @@\n+  public FSDataOutputStream create(Path path, FsPermission permission,\n+      boolean overwrite, int bufferSize, short replication, long blockSize,\n+      Progressable progress) throws IOException {\n+    String key \u003d pathToKey(path);\n+\n+    if (!overwrite \u0026\u0026 exists(path)) {\n+      throw new FileAlreadyExistsException(path + \" already exists\");\n+    }\n+\n+    return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n+        ossClient, bucketName, key, progress, statistics,\n+        serverSideEncryptionAlgorithm), (Statistics)(null));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path path, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress) throws IOException {\n    String key \u003d pathToKey(path);\n\n    if (!overwrite \u0026\u0026 exists(path)) {\n      throw new FileAlreadyExistsException(path + \" already exists\");\n    }\n\n    return new FSDataOutputStream(new AliyunOSSOutputStream(getConf(),\n        ossClient, bucketName, key, progress, statistics,\n        serverSideEncryptionAlgorithm), (Statistics)(null));\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}