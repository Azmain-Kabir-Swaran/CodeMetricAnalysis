{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppLogAggregatorImpl.java",
  "functionName": "sendLogAggregationReport",
  "functionId": "sendLogAggregationReport___logAggregationSucceedInThisCycle-boolean__diagnosticMessage-String__appFinished-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
  "functionStartLine": 427,
  "functionEndLine": 446,
  "numCommitsSeen": 91,
  "timeTaken": 3668,
  "changeHistory": [
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
    "e718ac597f2225cb4946e1ac4b3986c336645643",
    "4d53ef7eefb14661d824924e503a910de1ae997f",
    "1b081ca27e05e97d8b7d284ca24200d43763e481",
    "7f3139e54da2c496327446a5eac43f8421fc8839"
  ],
  "changeHistoryShort": {
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": "Ybodychange",
    "e718ac597f2225cb4946e1ac4b3986c336645643": "Ybodychange",
    "4d53ef7eefb14661d824924e503a910de1ae997f": "Ybodychange",
    "1b081ca27e05e97d8b7d284ca24200d43763e481": "Ymultichange(Yparameterchange,Ybodychange)",
    "7f3139e54da2c496327446a5eac43f8421fc8839": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7952. RM should be able to recover log aggregation status after restart/fail-over. (Xuan Gong via wangda)\n\nChange-Id: I725c9afe64831eda0aa6b0bebdbc79d2dd165707\n",
      "commitDate": "15/03/18 1:26 PM",
      "commitName": "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 3:46 PM",
      "commitNameOld": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.86,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private void sendLogAggregationReport(\n       boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n       boolean appFinished) {\n     LogAggregationStatus logAggregationStatus \u003d\n         logAggregationSucceedInThisCycle\n             ? LogAggregationStatus.RUNNING\n             : LogAggregationStatus.RUNNING_WITH_FAILURE;\n-    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n+    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage,\n+        false);\n     if (appFinished) {\n       // If the app is finished, one extra final report with log aggregation\n       // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n       // that the log aggregation in this NM is completed.\n       LogAggregationStatus finalLogAggregationStatus \u003d\n           renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n               ? LogAggregationStatus.FAILED\n               : LogAggregationStatus.SUCCEEDED;\n-      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n+      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\", true);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void sendLogAggregationReport(\n      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n      boolean appFinished) {\n    LogAggregationStatus logAggregationStatus \u003d\n        logAggregationSucceedInThisCycle\n            ? LogAggregationStatus.RUNNING\n            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage,\n        false);\n    if (appFinished) {\n      // If the app is finished, one extra final report with log aggregation\n      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n      // that the log aggregation in this NM is completed.\n      LogAggregationStatus finalLogAggregationStatus \u003d\n          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n              ? LogAggregationStatus.FAILED\n              : LogAggregationStatus.SUCCEEDED;\n      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\", true);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
      "extendedDetails": {}
    },
    "e718ac597f2225cb4946e1ac4b3986c336645643": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\"\n\nThis reverts commit 4d53ef7eefb14661d824924e503a910de1ae997f.\n",
      "commitDate": "07/03/18 3:46 PM",
      "commitName": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 11:30 AM",
      "commitNameOld": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n   private void sendLogAggregationReport(\n       boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n       boolean appFinished) {\n     LogAggregationStatus logAggregationStatus \u003d\n         logAggregationSucceedInThisCycle\n             ? LogAggregationStatus.RUNNING\n             : LogAggregationStatus.RUNNING_WITH_FAILURE;\n-    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage,\n-        false);\n+    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n     if (appFinished) {\n       // If the app is finished, one extra final report with log aggregation\n       // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n       // that the log aggregation in this NM is completed.\n       LogAggregationStatus finalLogAggregationStatus \u003d\n           renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n               ? LogAggregationStatus.FAILED\n               : LogAggregationStatus.SUCCEEDED;\n-      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\", true);\n+      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void sendLogAggregationReport(\n      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n      boolean appFinished) {\n    LogAggregationStatus logAggregationStatus \u003d\n        logAggregationSucceedInThisCycle\n            ? LogAggregationStatus.RUNNING\n            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n    if (appFinished) {\n      // If the app is finished, one extra final report with log aggregation\n      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n      // that the log aggregation in this NM is completed.\n      LogAggregationStatus finalLogAggregationStatus \u003d\n          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n              ? LogAggregationStatus.FAILED\n              : LogAggregationStatus.SUCCEEDED;\n      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
      "extendedDetails": {}
    },
    "4d53ef7eefb14661d824924e503a910de1ae997f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\n\nChange-Id: Ie16e34039d57df50128c73b37516ad0bc7c9590e\n",
      "commitDate": "07/03/18 11:30 AM",
      "commitName": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/08/17 4:41 PM",
      "commitNameOld": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 187.83,
      "commitsBetweenForRepo": 1339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private void sendLogAggregationReport(\n       boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n       boolean appFinished) {\n     LogAggregationStatus logAggregationStatus \u003d\n         logAggregationSucceedInThisCycle\n             ? LogAggregationStatus.RUNNING\n             : LogAggregationStatus.RUNNING_WITH_FAILURE;\n-    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n+    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage,\n+        false);\n     if (appFinished) {\n       // If the app is finished, one extra final report with log aggregation\n       // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n       // that the log aggregation in this NM is completed.\n       LogAggregationStatus finalLogAggregationStatus \u003d\n           renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n               ? LogAggregationStatus.FAILED\n               : LogAggregationStatus.SUCCEEDED;\n-      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n+      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\", true);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void sendLogAggregationReport(\n      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n      boolean appFinished) {\n    LogAggregationStatus logAggregationStatus \u003d\n        logAggregationSucceedInThisCycle\n            ? LogAggregationStatus.RUNNING\n            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage,\n        false);\n    if (appFinished) {\n      // If the app is finished, one extra final report with log aggregation\n      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n      // that the log aggregation in this NM is completed.\n      LogAggregationStatus finalLogAggregationStatus \u003d\n          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n              ? LogAggregationStatus.FAILED\n              : LogAggregationStatus.SUCCEEDED;\n      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\", true);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
      "extendedDetails": {}
    },
    "1b081ca27e05e97d8b7d284ca24200d43763e481": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6288. Exceptions during aggregated log writes are mishandled. Contributed by Akira Ajisaka\n",
      "commitDate": "06/04/17 2:24 PM",
      "commitName": "1b081ca27e05e97d8b7d284ca24200d43763e481",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6288. Exceptions during aggregated log writes are mishandled. Contributed by Akira Ajisaka\n",
          "commitDate": "06/04/17 2:24 PM",
          "commitName": "1b081ca27e05e97d8b7d284ca24200d43763e481",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "28/03/17 6:36 PM",
          "commitNameOld": "82fb9ce8df7a534a4cbcec624d7b6c0b33e79123",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 8.83,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,19 @@\n   private void sendLogAggregationReport(\n-      LogAggregationStatus logAggregationStatus, String diagnosticMessage) {\n-    LogAggregationReport report \u003d\n-        Records.newRecord(LogAggregationReport.class);\n-    report.setApplicationId(appId);\n-    report.setDiagnosticMessage(diagnosticMessage);\n-    report.setLogAggregationStatus(logAggregationStatus);\n-    this.context.getLogAggregationStatusForApps().add(report);\n+      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n+      boolean appFinished) {\n+    LogAggregationStatus logAggregationStatus \u003d\n+        logAggregationSucceedInThisCycle\n+            ? LogAggregationStatus.RUNNING\n+            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n+    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n+    if (appFinished) {\n+      // If the app is finished, one extra final report with log aggregation\n+      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n+      // that the log aggregation in this NM is completed.\n+      LogAggregationStatus finalLogAggregationStatus \u003d\n+          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n+              ? LogAggregationStatus.FAILED\n+              : LogAggregationStatus.SUCCEEDED;\n+      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void sendLogAggregationReport(\n      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n      boolean appFinished) {\n    LogAggregationStatus logAggregationStatus \u003d\n        logAggregationSucceedInThisCycle\n            ? LogAggregationStatus.RUNNING\n            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n    if (appFinished) {\n      // If the app is finished, one extra final report with log aggregation\n      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n      // that the log aggregation in this NM is completed.\n      LogAggregationStatus finalLogAggregationStatus \u003d\n          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n              ? LogAggregationStatus.FAILED\n              : LogAggregationStatus.SUCCEEDED;\n      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
          "extendedDetails": {
            "oldValue": "[logAggregationStatus-LogAggregationStatus, diagnosticMessage-String]",
            "newValue": "[logAggregationSucceedInThisCycle-boolean, diagnosticMessage-String, appFinished-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6288. Exceptions during aggregated log writes are mishandled. Contributed by Akira Ajisaka\n",
          "commitDate": "06/04/17 2:24 PM",
          "commitName": "1b081ca27e05e97d8b7d284ca24200d43763e481",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "28/03/17 6:36 PM",
          "commitNameOld": "82fb9ce8df7a534a4cbcec624d7b6c0b33e79123",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 8.83,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,19 @@\n   private void sendLogAggregationReport(\n-      LogAggregationStatus logAggregationStatus, String diagnosticMessage) {\n-    LogAggregationReport report \u003d\n-        Records.newRecord(LogAggregationReport.class);\n-    report.setApplicationId(appId);\n-    report.setDiagnosticMessage(diagnosticMessage);\n-    report.setLogAggregationStatus(logAggregationStatus);\n-    this.context.getLogAggregationStatusForApps().add(report);\n+      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n+      boolean appFinished) {\n+    LogAggregationStatus logAggregationStatus \u003d\n+        logAggregationSucceedInThisCycle\n+            ? LogAggregationStatus.RUNNING\n+            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n+    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n+    if (appFinished) {\n+      // If the app is finished, one extra final report with log aggregation\n+      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n+      // that the log aggregation in this NM is completed.\n+      LogAggregationStatus finalLogAggregationStatus \u003d\n+          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n+              ? LogAggregationStatus.FAILED\n+              : LogAggregationStatus.SUCCEEDED;\n+      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void sendLogAggregationReport(\n      boolean logAggregationSucceedInThisCycle, String diagnosticMessage,\n      boolean appFinished) {\n    LogAggregationStatus logAggregationStatus \u003d\n        logAggregationSucceedInThisCycle\n            ? LogAggregationStatus.RUNNING\n            : LogAggregationStatus.RUNNING_WITH_FAILURE;\n    sendLogAggregationReportInternal(logAggregationStatus, diagnosticMessage);\n    if (appFinished) {\n      // If the app is finished, one extra final report with log aggregation\n      // status SUCCEEDED/FAILED will be sent to RM to inform the RM\n      // that the log aggregation in this NM is completed.\n      LogAggregationStatus finalLogAggregationStatus \u003d\n          renameTemporaryLogFileFailed || !logAggregationSucceedInThisCycle\n              ? LogAggregationStatus.FAILED\n              : LogAggregationStatus.SUCCEEDED;\n      sendLogAggregationReportInternal(finalLogAggregationStatus, \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7f3139e54da2c496327446a5eac43f8421fc8839": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4720. Skip unnecessary NN operations in log aggregation. (Jun Gong via mingma)\n",
      "commitDate": "26/02/16 8:40 AM",
      "commitName": "7f3139e54da2c496327446a5eac43f8421fc8839",
      "commitAuthor": "Ming Ma",
      "diff": "@@ -0,0 +1,9 @@\n+  private void sendLogAggregationReport(\n+      LogAggregationStatus logAggregationStatus, String diagnosticMessage) {\n+    LogAggregationReport report \u003d\n+        Records.newRecord(LogAggregationReport.class);\n+    report.setApplicationId(appId);\n+    report.setDiagnosticMessage(diagnosticMessage);\n+    report.setLogAggregationStatus(logAggregationStatus);\n+    this.context.getLogAggregationStatusForApps().add(report);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void sendLogAggregationReport(\n      LogAggregationStatus logAggregationStatus, String diagnosticMessage) {\n    LogAggregationReport report \u003d\n        Records.newRecord(LogAggregationReport.class);\n    report.setApplicationId(appId);\n    report.setDiagnosticMessage(diagnosticMessage);\n    report.setLogAggregationStatus(logAggregationStatus);\n    this.context.getLogAggregationStatusForApps().add(report);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/AppLogAggregatorImpl.java"
    }
  }
}