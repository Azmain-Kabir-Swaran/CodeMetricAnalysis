{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosmosDBDocumentStoreReader.java",
  "functionName": "addPredicates",
  "functionId": "addPredicates___context-TimelineReaderContext__collectionName-String__queryStrBuilder-StringBuilder",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java",
  "functionStartLine": 184,
  "functionEndLine": 235,
  "numCommitsSeen": 3,
  "timeTaken": 1458,
  "changeHistory": [
    "ccaa99c9235e0c6922e56f93254583eca49a12e1",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": "Ymultichange(Ymodifierchange,Ybodychange)",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
      "commitDate": "10/07/19 9:49 PM",
      "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
          "commitDate": "10/07/19 9:49 PM",
          "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "12/04/19 6:28 PM",
          "commitNameOld": "1943db557124439f9f41c18a618455ccf4c3e6cc",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 89.14,
          "commitsBetweenForRepo": 592,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-  private String addPredicates(TimelineReaderContext context,\n+  String addPredicates(TimelineReaderContext context,\n       String collectionName, StringBuilder queryStrBuilder) {\n     boolean hasPredicate \u003d false;\n \n     queryStrBuilder.append(WHERE_CLAUSE);\n \n-    if (context.getClusterId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getClusterId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID,\n           context.getClusterId()));\n     }\n-    if (context.getUserId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getUserId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\n     }\n-    if (context.getFlowName() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getFlowName())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\n     }\n-    if (context.getAppId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getAppId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\n     }\n-    if (context.getEntityId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\n     }\n     if (context.getFlowRunId() !\u003d null) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\n     }\n-    if (context.getEntityType() !\u003d null){\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityType())){\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_TYPE,\n               context.getEntityType()));\n     }\n \n     if (hasPredicate) {\n       queryStrBuilder.append(ORDER_BY_CLAUSE);\n       LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\n       return queryStrBuilder.toString();\n     }\n     throw new IllegalArgumentException(\"The TimelineReaderContext does not \" +\n         \"have enough information to query documents for Collection : \" +\n         collectionName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String addPredicates(TimelineReaderContext context,\n      String collectionName, StringBuilder queryStrBuilder) {\n    boolean hasPredicate \u003d false;\n\n    queryStrBuilder.append(WHERE_CLAUSE);\n\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getClusterId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID,\n          context.getClusterId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getUserId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getFlowName())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getAppId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\n    }\n    if (context.getFlowRunId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityType())){\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_TYPE,\n              context.getEntityType()));\n    }\n\n    if (hasPredicate) {\n      queryStrBuilder.append(ORDER_BY_CLAUSE);\n      LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\n      return queryStrBuilder.toString();\n    }\n    throw new IllegalArgumentException(\"The TimelineReaderContext does not \" +\n        \"have enough information to query documents for Collection : \" +\n        collectionName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
          "commitDate": "10/07/19 9:49 PM",
          "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "12/04/19 6:28 PM",
          "commitNameOld": "1943db557124439f9f41c18a618455ccf4c3e6cc",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 89.14,
          "commitsBetweenForRepo": 592,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-  private String addPredicates(TimelineReaderContext context,\n+  String addPredicates(TimelineReaderContext context,\n       String collectionName, StringBuilder queryStrBuilder) {\n     boolean hasPredicate \u003d false;\n \n     queryStrBuilder.append(WHERE_CLAUSE);\n \n-    if (context.getClusterId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getClusterId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID,\n           context.getClusterId()));\n     }\n-    if (context.getUserId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getUserId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\n     }\n-    if (context.getFlowName() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getFlowName())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\n     }\n-    if (context.getAppId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getAppId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\n     }\n-    if (context.getEntityId() !\u003d null) {\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityId())) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\n     }\n     if (context.getFlowRunId() !\u003d null) {\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\n     }\n-    if (context.getEntityType() !\u003d null){\n+    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityType())){\n       hasPredicate \u003d true;\n       queryStrBuilder.append(AND_OPERATOR)\n           .append(String.format(CONTAINS_FUNC_FOR_TYPE,\n               context.getEntityType()));\n     }\n \n     if (hasPredicate) {\n       queryStrBuilder.append(ORDER_BY_CLAUSE);\n       LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\n       return queryStrBuilder.toString();\n     }\n     throw new IllegalArgumentException(\"The TimelineReaderContext does not \" +\n         \"have enough information to query documents for Collection : \" +\n         collectionName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String addPredicates(TimelineReaderContext context,\n      String collectionName, StringBuilder queryStrBuilder) {\n    boolean hasPredicate \u003d false;\n\n    queryStrBuilder.append(WHERE_CLAUSE);\n\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getClusterId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID,\n          context.getClusterId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getUserId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getFlowName())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getAppId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityId())) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\n    }\n    if (context.getFlowRunId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\n    }\n    if (!DocumentStoreUtils.isNullOrEmpty(context.getEntityType())){\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_TYPE,\n              context.getEntityType()));\n    }\n\n    if (hasPredicate) {\n      queryStrBuilder.append(ORDER_BY_CLAUSE);\n      LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\n      return queryStrBuilder.toString();\n    }\n    throw new IllegalArgumentException(\"The TimelineReaderContext does not \" +\n        \"have enough information to query documents for Collection : \" +\n        collectionName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,52 @@\n+  private String addPredicates(TimelineReaderContext context,\n+      String collectionName, StringBuilder queryStrBuilder) {\n+    boolean hasPredicate \u003d false;\n+\n+    queryStrBuilder.append(WHERE_CLAUSE);\n+\n+    if (context.getClusterId() !\u003d null) {\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID,\n+          context.getClusterId()));\n+    }\n+    if (context.getUserId() !\u003d null) {\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(AND_OPERATOR)\n+          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\n+    }\n+    if (context.getFlowName() !\u003d null) {\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(AND_OPERATOR)\n+          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\n+    }\n+    if (context.getAppId() !\u003d null) {\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(AND_OPERATOR)\n+          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\n+    }\n+    if (context.getEntityId() !\u003d null) {\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(AND_OPERATOR)\n+          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\n+    }\n+    if (context.getFlowRunId() !\u003d null) {\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(AND_OPERATOR)\n+          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\n+    }\n+    if (context.getEntityType() !\u003d null){\n+      hasPredicate \u003d true;\n+      queryStrBuilder.append(AND_OPERATOR)\n+          .append(String.format(CONTAINS_FUNC_FOR_TYPE,\n+              context.getEntityType()));\n+    }\n+\n+    if (hasPredicate) {\n+      queryStrBuilder.append(ORDER_BY_CLAUSE);\n+      LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\n+      return queryStrBuilder.toString();\n+    }\n+    throw new IllegalArgumentException(\"The TimelineReaderContext does not \" +\n+        \"have enough information to query documents for Collection : \" +\n+        collectionName);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String addPredicates(TimelineReaderContext context,\n      String collectionName, StringBuilder queryStrBuilder) {\n    boolean hasPredicate \u003d false;\n\n    queryStrBuilder.append(WHERE_CLAUSE);\n\n    if (context.getClusterId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(String.format(CONTAINS_FUNC_FOR_ID,\n          context.getClusterId()));\n    }\n    if (context.getUserId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getUserId()));\n    }\n    if (context.getFlowName() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowName()));\n    }\n    if (context.getAppId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getAppId()));\n    }\n    if (context.getEntityId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getEntityId()));\n    }\n    if (context.getFlowRunId() !\u003d null) {\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_ID, context.getFlowRunId()));\n    }\n    if (context.getEntityType() !\u003d null){\n      hasPredicate \u003d true;\n      queryStrBuilder.append(AND_OPERATOR)\n          .append(String.format(CONTAINS_FUNC_FOR_TYPE,\n              context.getEntityType()));\n    }\n\n    if (hasPredicate) {\n      queryStrBuilder.append(ORDER_BY_CLAUSE);\n      LOG.debug(\"CosmosDB Sql Query with predicates : {}\", queryStrBuilder);\n      return queryStrBuilder.toString();\n    }\n    throw new IllegalArgumentException(\"The TimelineReaderContext does not \" +\n        \"have enough information to query documents for Collection : \" +\n        collectionName);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/cosmosdb/CosmosDBDocumentStoreReader.java"
    }
  }
}