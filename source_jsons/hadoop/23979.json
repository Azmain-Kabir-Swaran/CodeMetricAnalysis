{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "startStore",
  "functionId": "startStore___recoveryRoot-Path",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 640,
  "functionEndLine": 663,
  "numCommitsSeen": 59,
  "timeTaken": 1996,
  "changeHistory": [
    "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7",
    "60b1e835e0fc5c4c90eaf588c6722f69061f7f36",
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4"
  ],
  "changeHistoryShort": {
    "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7": "Ybodychange",
    "60b1e835e0fc5c4c90eaf588c6722f69061f7f36": "Ybodychange",
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8120. JVM can crash with SIGSEGV when exiting due to custom leveldb logger. Contributed by Jason Lowe.\n",
      "commitDate": "12/04/18 9:04 AM",
      "commitName": "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7",
      "commitAuthor": "Eric E Payne",
      "commitDateOld": "08/11/17 2:28 AM",
      "commitNameOld": "e4c220ee4fdc4550275bda0fa9468d7d87d143c3",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 155.23,
      "commitsBetweenForRepo": 1064,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   private void startStore(Path recoveryRoot) throws IOException {\n     Options options \u003d new Options();\n     options.createIfMissing(false);\n-    options.logger(new LevelDBLogger());\n     Path dbPath \u003d new Path(recoveryRoot, STATE_DB_NAME);\n     LOG.info(\"Using state database at \" + dbPath + \" for recovery\");\n     File dbfile \u003d new File(dbPath.toString());\n     try {\n       stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         LOG.info(\"Creating state database at \" + dbfile);\n         options.createIfMissing(true);\n         try {\n           stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n           storeVersion();\n         } catch (DBException dbExc) {\n           throw new IOException(\"Unable to create state store\", dbExc);\n         }\n       } else {\n         throw e;\n       }\n     }\n     checkVersion();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startStore(Path recoveryRoot) throws IOException {\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    Path dbPath \u003d new Path(recoveryRoot, STATE_DB_NAME);\n    LOG.info(\"Using state database at \" + dbPath + \" for recovery\");\n    File dbfile \u003d new File(dbPath.toString());\n    try {\n      stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n          storeVersion();\n        } catch (DBException dbExc) {\n          throw new IOException(\"Unable to create state store\", dbExc);\n        }\n      } else {\n        throw e;\n      }\n    }\n    checkVersion();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "60b1e835e0fc5c4c90eaf588c6722f69061f7f36": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5963. ShuffleHandler DB schema should be versioned with compatible/incompatible changes. Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612652 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 12:22 PM",
      "commitName": "60b1e835e0fc5c4c90eaf588c6722f69061f7f36",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "13/05/14 12:10 PM",
      "commitNameOld": "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 70.01,
      "commitsBetweenForRepo": 449,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,25 @@\n   private void startStore(Path recoveryRoot) throws IOException {\n     Options options \u003d new Options();\n     options.createIfMissing(false);\n     options.logger(new LevelDBLogger());\n     Path dbPath \u003d new Path(recoveryRoot, STATE_DB_NAME);\n     LOG.info(\"Using state database at \" + dbPath + \" for recovery\");\n     File dbfile \u003d new File(dbPath.toString());\n-    byte[] schemaVersionData;\n     try {\n       stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n-      schemaVersionData \u003d stateDb.get(bytes(STATE_DB_SCHEMA_VERSION_KEY));\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         LOG.info(\"Creating state database at \" + dbfile);\n         options.createIfMissing(true);\n         try {\n           stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n-          schemaVersionData \u003d bytes(STATE_DB_SCHEMA_VERSION);\n-          stateDb.put(bytes(STATE_DB_SCHEMA_VERSION_KEY), schemaVersionData);\n+          storeVersion();\n         } catch (DBException dbExc) {\n           throw new IOException(\"Unable to create state store\", dbExc);\n         }\n       } else {\n         throw e;\n       }\n     }\n-    if (schemaVersionData !\u003d null) {\n-      String schemaVersion \u003d asString(schemaVersionData);\n-      // only support exact schema matches for now\n-      if (!STATE_DB_SCHEMA_VERSION.equals(schemaVersion)) {\n-        throw new IOException(\"Incompatible state database schema, found \"\n-            + schemaVersion + \" expected \" + STATE_DB_SCHEMA_VERSION);\n-      }\n-    } else {\n-      throw new IOException(\"State database schema version not found\");\n-    }\n+    checkVersion();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startStore(Path recoveryRoot) throws IOException {\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    options.logger(new LevelDBLogger());\n    Path dbPath \u003d new Path(recoveryRoot, STATE_DB_NAME);\n    LOG.info(\"Using state database at \" + dbPath + \" for recovery\");\n    File dbfile \u003d new File(dbPath.toString());\n    try {\n      stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n          storeVersion();\n        } catch (DBException dbExc) {\n          throw new IOException(\"Unable to create state store\", dbExc);\n        }\n      } else {\n        throw e;\n      }\n    }\n    checkVersion();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5652. NM Recovery. ShuffleHandler should handle NM restarts. (Jason Lowe via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 12:10 PM",
      "commitName": "f3c3d9e0c6eae02dd21f875097ef76d85025ffe4",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,37 @@\n+  private void startStore(Path recoveryRoot) throws IOException {\n+    Options options \u003d new Options();\n+    options.createIfMissing(false);\n+    options.logger(new LevelDBLogger());\n+    Path dbPath \u003d new Path(recoveryRoot, STATE_DB_NAME);\n+    LOG.info(\"Using state database at \" + dbPath + \" for recovery\");\n+    File dbfile \u003d new File(dbPath.toString());\n+    byte[] schemaVersionData;\n+    try {\n+      stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n+      schemaVersionData \u003d stateDb.get(bytes(STATE_DB_SCHEMA_VERSION_KEY));\n+    } catch (NativeDB.DBException e) {\n+      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n+        LOG.info(\"Creating state database at \" + dbfile);\n+        options.createIfMissing(true);\n+        try {\n+          stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n+          schemaVersionData \u003d bytes(STATE_DB_SCHEMA_VERSION);\n+          stateDb.put(bytes(STATE_DB_SCHEMA_VERSION_KEY), schemaVersionData);\n+        } catch (DBException dbExc) {\n+          throw new IOException(\"Unable to create state store\", dbExc);\n+        }\n+      } else {\n+        throw e;\n+      }\n+    }\n+    if (schemaVersionData !\u003d null) {\n+      String schemaVersion \u003d asString(schemaVersionData);\n+      // only support exact schema matches for now\n+      if (!STATE_DB_SCHEMA_VERSION.equals(schemaVersion)) {\n+        throw new IOException(\"Incompatible state database schema, found \"\n+            + schemaVersion + \" expected \" + STATE_DB_SCHEMA_VERSION);\n+      }\n+    } else {\n+      throw new IOException(\"State database schema version not found\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startStore(Path recoveryRoot) throws IOException {\n    Options options \u003d new Options();\n    options.createIfMissing(false);\n    options.logger(new LevelDBLogger());\n    Path dbPath \u003d new Path(recoveryRoot, STATE_DB_NAME);\n    LOG.info(\"Using state database at \" + dbPath + \" for recovery\");\n    File dbfile \u003d new File(dbPath.toString());\n    byte[] schemaVersionData;\n    try {\n      stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n      schemaVersionData \u003d stateDb.get(bytes(STATE_DB_SCHEMA_VERSION_KEY));\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        LOG.info(\"Creating state database at \" + dbfile);\n        options.createIfMissing(true);\n        try {\n          stateDb \u003d JniDBFactory.factory.open(dbfile, options);\n          schemaVersionData \u003d bytes(STATE_DB_SCHEMA_VERSION);\n          stateDb.put(bytes(STATE_DB_SCHEMA_VERSION_KEY), schemaVersionData);\n        } catch (DBException dbExc) {\n          throw new IOException(\"Unable to create state store\", dbExc);\n        }\n      } else {\n        throw e;\n      }\n    }\n    if (schemaVersionData !\u003d null) {\n      String schemaVersion \u003d asString(schemaVersionData);\n      // only support exact schema matches for now\n      if (!STATE_DB_SCHEMA_VERSION.equals(schemaVersion)) {\n        throw new IOException(\"Incompatible state database schema, found \"\n            + schemaVersion + \" expected \" + STATE_DB_SCHEMA_VERSION);\n      }\n    } else {\n      throw new IOException(\"State database schema version not found\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
    }
  }
}