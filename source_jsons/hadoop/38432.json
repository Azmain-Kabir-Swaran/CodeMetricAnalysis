{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeAttributesManagerImpl.java",
  "functionName": "internalUpdateAttributesOnNodes",
  "functionId": "internalUpdateAttributesOnNodes___nodeAttributeMapping-Map__String,Map__NodeAttribute,AttributeValue______op-AttributeMappingOperationType__newAttributesToBeAdded-Map__NodeAttributeKey,RMNodeAttribute____attributePrefix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
  "functionStartLine": 156,
  "functionEndLine": 228,
  "numCommitsSeen": 26,
  "timeTaken": 8760,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e40e2d6ad5cbe782c3a067229270738b501ed27e",
    "95372657fc25c02399b01793833021ccf88dada2",
    "f659485ee83f3f34e3717631983adfc8fa1e53dc",
    "e1bbf7dcdfc30a61a2b10bef09c59ff17d290488",
    "5e64e62deeb467ac2969bc357a24810db855cffa",
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
    "76183428b76524818fc250ae97bbf973dc910e1c",
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
    "b9890d1f6604d572cd9f1cb719e2a4da08b31eff",
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
    "86d024ef2a5844ac723c7b597689afa4b598ee27",
    "2f7712be09d5b68978547f95b1be2352cdd46266"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": "Ybodychange",
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": "Ybodychange",
    "e1bbf7dcdfc30a61a2b10bef09c59ff17d290488": "Ybodychange",
    "5e64e62deeb467ac2969bc357a24810db855cffa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": "Ybodychange",
    "76183428b76524818fc250ae97bbf973dc910e1c": "Ybodychange",
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": "Yparameterchange",
    "b9890d1f6604d572cd9f1cb719e2a4da08b31eff": "Ybodychange",
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a": "Ymultichange(Yparameterchange,Ybodychange)",
    "86d024ef2a5844ac723c7b597689afa4b598ee27": "Ybodychange",
    "2f7712be09d5b68978547f95b1be2352cdd46266": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,73 @@\n   protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n-\n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \")\n             .append(entry.getKey())\n             .append(\", attributes\u003d[ \")\n             .append(StringUtils.join(entry.getValue().keySet(), \",\"))\n             .append(\"] ,\");\n       }\n       LOG.debug(\"{}\", logMsg);\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n         LOG.info(\"Updated NodeAttribute event to RM:\"\n             + newNodeToAttributesMap);\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    writeLock.lock();\n    try {\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \")\n            .append(entry.getKey())\n            .append(\", attributes\u003d[ \")\n            .append(StringUtils.join(entry.getValue().keySet(), \",\"))\n            .append(\"] ,\");\n      }\n      LOG.debug(\"{}\", logMsg);\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\"\n            + newNodeToAttributesMap);\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7243. Moving logging APIs over to slf4j in hadoop-yarn-server-resourcemanager.\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "04/03/19 9:10 PM",
      "commitName": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "25/02/19 11:45 AM",
      "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 7.39,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,74 @@\n   protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \")\n             .append(entry.getKey())\n             .append(\", attributes\u003d[ \")\n             .append(StringUtils.join(entry.getValue().keySet(), \",\"))\n             .append(\"] ,\");\n       }\n-\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(logMsg);\n-      }\n+      LOG.debug(\"{}\", logMsg);\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n         LOG.info(\"Updated NodeAttribute event to RM:\"\n             + newNodeToAttributesMap);\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \")\n            .append(entry.getKey())\n            .append(\", attributes\u003d[ \")\n            .append(StringUtils.join(entry.getValue().keySet(), \",\"))\n            .append(\"] ,\");\n      }\n      LOG.debug(\"{}\", logMsg);\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\"\n            + newNodeToAttributesMap);\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/12/18 6:56 PM",
      "commitNameOld": "f659485ee83f3f34e3717631983adfc8fa1e53dc",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 66.7,
      "commitsBetweenForRepo": 478,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n-        logMsg.append(\" NM \u003d \");\n-        logMsg.append(entry.getKey());\n-        logMsg.append(\", attributes\u003d[ \");\n-        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n-        logMsg.append(\"] ,\");\n+        logMsg.append(\" NM \u003d \")\n+            .append(entry.getKey())\n+            .append(\", attributes\u003d[ \")\n+            .append(StringUtils.join(entry.getValue().keySet(), \",\"))\n+            .append(\"] ,\");\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(logMsg);\n       }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n         LOG.info(\"Updated NodeAttribute event to RM:\"\n             + newNodeToAttributesMap);\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \")\n            .append(entry.getKey())\n            .append(\", attributes\u003d[ \")\n            .append(StringUtils.join(entry.getValue().keySet(), \",\"))\n            .append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\"\n            + newNodeToAttributesMap);\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8925. Updating distributed node attributes only when necessary. Contributed by Tao Yang.\n",
      "commitDate": "20/12/18 6:56 PM",
      "commitName": "f659485ee83f3f34e3717631983adfc8fa1e53dc",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "08/11/18 1:47 AM",
      "commitNameOld": "e1bbf7dcdfc30a61a2b10bef09c59ff17d290488",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 42.71,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,77 @@\n   protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(logMsg);\n       }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Updated NodeAttribute event to RM:\"\n-              + newNodeToAttributesMap.values());\n-        }\n+        LOG.info(\"Updated NodeAttribute event to RM:\"\n+            + newNodeToAttributesMap);\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\"\n            + newNodeToAttributesMap);\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "e1bbf7dcdfc30a61a2b10bef09c59ff17d290488": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8988. Reduce the verbose log on RM heartbeat path when distributed node-attributes is enabled. Contributed by Tao Yang.\n",
      "commitDate": "08/11/18 1:47 AM",
      "commitName": "e1bbf7dcdfc30a61a2b10bef09c59ff17d290488",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/09/18 2:12 PM",
      "commitNameOld": "8e9afbfb6666edcddcdd946e7dad0aac6e09265b",
      "commitAuthorOld": "Shane Kumpf",
      "daysBetweenCommits": 56.52,
      "commitsBetweenForRepo": 555,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,79 @@\n   protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(logMsg);\n       }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n-        LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n-            .values());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Updated NodeAttribute event to RM:\"\n+              + newNodeToAttributesMap.values());\n+        }\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Updated NodeAttribute event to RM:\"\n              + newNodeToAttributesMap.values());\n        }\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "5e64e62deeb467ac2969bc357a24810db855cffa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8740. Clear node attribute path after each test run. Contributed by Bibin A Chundatt.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "5e64e62deeb467ac2969bc357a24810db855cffa",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8740. Clear node attribute path after each test run. Contributed by Bibin A Chundatt.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "5e64e62deeb467ac2969bc357a24810db855cffa",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "c44088ac190e515b099183aeed4f9d6f8bee7da6",
          "commitAuthorOld": "bibinchundatt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,77 @@\n-  private void internalUpdateAttributesOnNodes(\n+  protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n-        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n+        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(logMsg);\n       }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n         LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n             .values());\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n            .values());\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8740. Clear node attribute path after each test run. Contributed by Bibin A Chundatt.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "5e64e62deeb467ac2969bc357a24810db855cffa",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "c44088ac190e515b099183aeed4f9d6f8bee7da6",
          "commitAuthorOld": "bibinchundatt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,77 @@\n-  private void internalUpdateAttributesOnNodes(\n+  protected void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n           nodeAttributeMapping.entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n-        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n+        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(logMsg);\n       }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n       // Map used to notify RM\n       Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n           new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n       nodeAttributeMapping.forEach((k, v) -\u003e {\n         Host node \u003d nodeCollections.get(k);\n         newNodeToAttributesMap.put(k, node.attributes.keySet());\n       });\n \n       // Notify RM\n       if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n         LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n             .values());\n         rmContext.getDispatcher().getEventHandler().handle(\n             new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry :\n          nodeAttributeMapping.entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().keySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n            .values());\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "76183428b76524818fc250ae97bbf973dc910e1c",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,77 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(logMsg);\n       }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n+      // Map used to notify RM\n+      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n+          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n+      nodeAttributeMapping.forEach((k, v) -\u003e {\n+        Host node \u003d nodeCollections.get(k);\n+        newNodeToAttributesMap.put(k, node.attributes.keySet());\n+      });\n+\n+      // Notify RM\n+      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n+        LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n+            .values());\n+        rmContext.getDispatcher().getEventHandler().handle(\n+            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n+      }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n      // Map used to notify RM\n      Map\u003cString, Set\u003cNodeAttribute\u003e\u003e newNodeToAttributesMap \u003d\n          new HashMap\u003cString, Set\u003cNodeAttribute\u003e\u003e();\n      nodeAttributeMapping.forEach((k, v) -\u003e {\n        Host node \u003d nodeCollections.get(k);\n        newNodeToAttributesMap.put(k, node.attributes.keySet());\n      });\n\n      // Notify RM\n      if (rmContext !\u003d null \u0026\u0026 rmContext.getDispatcher() !\u003d null) {\n        LOG.info(\"Updated NodeAttribute event to RM:\" + newNodeToAttributesMap\n            .values());\n        rmContext.getDispatcher().getEventHandler().handle(\n            new NodeAttributesUpdateSchedulerEvent(newNodeToAttributesMap));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "76183428b76524818fc250ae97bbf973dc910e1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8351. Node attribute manager logs are flooding RM logs. Contributed by Weiwei Yang.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "76183428b76524818fc250ae97bbf973dc910e1c",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,62 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n-      LOG.info(logMsg);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(logMsg);\n+      }\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(logMsg);\n      }\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "8cf6a9a2bde9d4ccad95a514885634792889ec7f": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-7892. Revisit NodeAttribute class structure. Contributed by  Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n+      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       LOG.info(logMsg);\n \n       if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n           .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttributeKey, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      LOG.info(logMsg);\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {
        "oldValue": "[nodeAttributeMapping-Map\u003cString,Map\u003cNodeAttribute,AttributeValue\u003e\u003e, op-AttributeMappingOperationType, newAttributesToBeAdded-Map\u003cNodeAttribute,RMNodeAttribute\u003e, attributePrefix-String]",
        "newValue": "[nodeAttributeMapping-Map\u003cString,Map\u003cNodeAttribute,AttributeValue\u003e\u003e, op-AttributeMappingOperationType, newAttributesToBeAdded-Map\u003cNodeAttributeKey,RMNodeAttribute\u003e, attributePrefix-String]"
      }
    },
    "b9890d1f6604d572cd9f1cb719e2a4da08b31eff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7875. Node Attribute store for storing and recovering attributes. Contributed by Bibin A Chundatt.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "b9890d1f6604d572cd9f1cb719e2a4da08b31eff",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n       String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, attributePrefix,\n               node.getAttributes(), attributes);\n           node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       LOG.info(logMsg);\n \n-      if (null !\u003d dispatcher) {\n+      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n+          .equals(attributePrefix)) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      LOG.info(logMsg);\n\n      if (null !\u003d dispatcher \u0026\u0026 NodeAttribute.PREFIX_CENTRALIZED\n          .equals(attributePrefix)) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7871. Node attributes reporting from NM to RM. Contributed by Weiwei Yang.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
      "commitAuthor": "Naganarasimha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7871. Node attributes reporting from NM to RM. Contributed by Weiwei Yang.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "86d024ef2a5844ac723c7b597689afa4b598ee27",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,59 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded) {\n+      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n+      String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n-          replaceNodeToAttribute(nodeHost, node.getAttributes(), attributes);\n-          node.replaceAttributes(attributes);\n+          replaceNodeToAttribute(nodeHost, attributePrefix,\n+              node.getAttributes(), attributes);\n+          node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       LOG.info(logMsg);\n \n       if (null !\u003d dispatcher) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      LOG.info(logMsg);\n\n      if (null !\u003d dispatcher) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[nodeAttributeMapping-Map\u003cString,Map\u003cNodeAttribute,AttributeValue\u003e\u003e, op-AttributeMappingOperationType, newAttributesToBeAdded-Map\u003cNodeAttribute,RMNodeAttribute\u003e]",
            "newValue": "[nodeAttributeMapping-Map\u003cString,Map\u003cNodeAttribute,AttributeValue\u003e\u003e, op-AttributeMappingOperationType, newAttributesToBeAdded-Map\u003cNodeAttribute,RMNodeAttribute\u003e, attributePrefix-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7871. Node attributes reporting from NM to RM. Contributed by Weiwei Yang.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "86d024ef2a5844ac723c7b597689afa4b598ee27",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,59 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n-      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded) {\n+      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n+      String attributePrefix) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n           nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n-          replaceNodeToAttribute(nodeHost, node.getAttributes(), attributes);\n-          node.replaceAttributes(attributes);\n+          replaceNodeToAttribute(nodeHost, attributePrefix,\n+              node.getAttributes(), attributes);\n+          node.replaceAttributes(attributes, attributePrefix);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       LOG.info(logMsg);\n \n       if (null !\u003d dispatcher) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded,\n      String attributePrefix) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, attributePrefix,\n              node.getAttributes(), attributes);\n          node.replaceAttributes(attributes, attributePrefix);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      LOG.info(logMsg);\n\n      if (null !\u003d dispatcher) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "86d024ef2a5844ac723c7b597689afa4b598ee27": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7965. NodeAttributeManager add/get API is not working properly. Contributed by Weiwei Yang.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "86d024ef2a5844ac723c7b597689afa4b598ee27",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   private void internalUpdateAttributesOnNodes(\n       Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n       AttributeMappingOperationType op,\n       Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded) {\n     try {\n       writeLock.lock();\n \n       // shows node-\u003eattributes Mapped as part of this operation.\n       StringBuilder logMsg \u003d new StringBuilder(op.name());\n       logMsg.append(\" attributes on nodes:\");\n       // do update labels from nodes\n       for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n           .entrySet()) {\n         String nodeHost \u003d entry.getKey();\n         Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n \n         Host node \u003d nodeCollections.get(nodeHost);\n         if (node \u003d\u003d null) {\n           node \u003d new Host(nodeHost);\n+          nodeCollections.put(nodeHost, node);\n         }\n         switch (op) {\n         case REMOVE:\n           removeNodeFromAttributes(nodeHost, attributes.keySet());\n           node.removeAttributes(attributes);\n           break;\n         case ADD:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           addNodeToAttribute(nodeHost, attributes);\n           node.addAttributes(attributes);\n           break;\n         case REPLACE:\n           clusterAttributes.putAll(newAttributesToBeAdded);\n           replaceNodeToAttribute(nodeHost, node.getAttributes(), attributes);\n           node.replaceAttributes(attributes);\n           break;\n         default:\n           break;\n         }\n         logMsg.append(\" NM \u003d \");\n         logMsg.append(entry.getKey());\n         logMsg.append(\", attributes\u003d[ \");\n         logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n         logMsg.append(\"] ,\");\n       }\n \n       LOG.info(logMsg);\n \n       if (null !\u003d dispatcher) {\n         dispatcher.getEventHandler()\n             .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n       }\n \n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n          nodeCollections.put(nodeHost, node);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, node.getAttributes(), attributes);\n          node.replaceAttributes(attributes);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      LOG.info(logMsg);\n\n      if (null !\u003d dispatcher) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java",
      "extendedDetails": {}
    },
    "2f7712be09d5b68978547f95b1be2352cdd46266": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6858. Attribute Manager to store and provide node attributes in RM. Contributed by Naganarasimha G R.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,56 @@\n+  private void internalUpdateAttributesOnNodes(\n+      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n+      AttributeMappingOperationType op,\n+      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded) {\n+    try {\n+      writeLock.lock();\n+\n+      // shows node-\u003eattributes Mapped as part of this operation.\n+      StringBuilder logMsg \u003d new StringBuilder(op.name());\n+      logMsg.append(\" attributes on nodes:\");\n+      // do update labels from nodes\n+      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n+          .entrySet()) {\n+        String nodeHost \u003d entry.getKey();\n+        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n+\n+        Host node \u003d nodeCollections.get(nodeHost);\n+        if (node \u003d\u003d null) {\n+          node \u003d new Host(nodeHost);\n+        }\n+        switch (op) {\n+        case REMOVE:\n+          removeNodeFromAttributes(nodeHost, attributes.keySet());\n+          node.removeAttributes(attributes);\n+          break;\n+        case ADD:\n+          clusterAttributes.putAll(newAttributesToBeAdded);\n+          addNodeToAttribute(nodeHost, attributes);\n+          node.addAttributes(attributes);\n+          break;\n+        case REPLACE:\n+          clusterAttributes.putAll(newAttributesToBeAdded);\n+          replaceNodeToAttribute(nodeHost, node.getAttributes(), attributes);\n+          node.replaceAttributes(attributes);\n+          break;\n+        default:\n+          break;\n+        }\n+        logMsg.append(\" NM \u003d \");\n+        logMsg.append(entry.getKey());\n+        logMsg.append(\", attributes\u003d[ \");\n+        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n+        logMsg.append(\"] ,\");\n+      }\n+\n+      LOG.info(logMsg);\n+\n+      if (null !\u003d dispatcher) {\n+        dispatcher.getEventHandler()\n+            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n+      }\n+\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalUpdateAttributesOnNodes(\n      Map\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e nodeAttributeMapping,\n      AttributeMappingOperationType op,\n      Map\u003cNodeAttribute, RMNodeAttribute\u003e newAttributesToBeAdded) {\n    try {\n      writeLock.lock();\n\n      // shows node-\u003eattributes Mapped as part of this operation.\n      StringBuilder logMsg \u003d new StringBuilder(op.name());\n      logMsg.append(\" attributes on nodes:\");\n      // do update labels from nodes\n      for (Entry\u003cString, Map\u003cNodeAttribute, AttributeValue\u003e\u003e entry : nodeAttributeMapping\n          .entrySet()) {\n        String nodeHost \u003d entry.getKey();\n        Map\u003cNodeAttribute, AttributeValue\u003e attributes \u003d entry.getValue();\n\n        Host node \u003d nodeCollections.get(nodeHost);\n        if (node \u003d\u003d null) {\n          node \u003d new Host(nodeHost);\n        }\n        switch (op) {\n        case REMOVE:\n          removeNodeFromAttributes(nodeHost, attributes.keySet());\n          node.removeAttributes(attributes);\n          break;\n        case ADD:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          addNodeToAttribute(nodeHost, attributes);\n          node.addAttributes(attributes);\n          break;\n        case REPLACE:\n          clusterAttributes.putAll(newAttributesToBeAdded);\n          replaceNodeToAttribute(nodeHost, node.getAttributes(), attributes);\n          node.replaceAttributes(attributes);\n          break;\n        default:\n          break;\n        }\n        logMsg.append(\" NM \u003d \");\n        logMsg.append(entry.getKey());\n        logMsg.append(\", attributes\u003d[ \");\n        logMsg.append(StringUtils.join(entry.getValue().entrySet(), \",\"));\n        logMsg.append(\"] ,\");\n      }\n\n      LOG.info(logMsg);\n\n      if (null !\u003d dispatcher) {\n        dispatcher.getEventHandler()\n            .handle(new NodeAttributesStoreEvent(nodeAttributeMapping, op));\n      }\n\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/NodeAttributesManagerImpl.java"
    }
  }
}