{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "startContainers",
  "functionId": "startContainers___containersToBeStarted-Collection__Container____force-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 396,
  "functionEndLine": 409,
  "numCommitsSeen": 42,
  "timeTaken": 5169,
  "changeHistory": [
    "2ae72692fc370267141a1ee55ef372ff62302b54",
    "5b007921cdf01ecc8ed97c164b7d327b8304c529",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d"
  ],
  "changeHistoryShort": {
    "2ae72692fc370267141a1ee55ef372ff62302b54": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "5b007921cdf01ecc8ed97c164b7d327b8304c529": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ae72692fc370267141a1ee55ef372ff62302b54": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
      "commitDate": "12/09/17 4:10 PM",
      "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
          "commitDate": "12/09/17 4:10 PM",
          "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "20/08/17 7:54 AM",
          "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 23.34,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private boolean startContainersFromQueue(\n-      Collection\u003cContainer\u003e queuedContainers) {\n-    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n+  private boolean startContainers(\n+      Collection\u003cContainer\u003e containersToBeStarted, boolean force) {\n+    Iterator\u003cContainer\u003e cIter \u003d containersToBeStarted.iterator();\n     boolean resourcesAvailable \u003d true;\n     while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n       Container container \u003d cIter.next();\n-      if (tryStartContainer(container)) {\n+      if (tryStartContainer(container, force)) {\n         cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean startContainers(\n      Collection\u003cContainer\u003e containersToBeStarted, boolean force) {\n    Iterator\u003cContainer\u003e cIter \u003d containersToBeStarted.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (tryStartContainer(container, force)) {\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldValue": "startContainersFromQueue",
            "newValue": "startContainers"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
          "commitDate": "12/09/17 4:10 PM",
          "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "20/08/17 7:54 AM",
          "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 23.34,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private boolean startContainersFromQueue(\n-      Collection\u003cContainer\u003e queuedContainers) {\n-    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n+  private boolean startContainers(\n+      Collection\u003cContainer\u003e containersToBeStarted, boolean force) {\n+    Iterator\u003cContainer\u003e cIter \u003d containersToBeStarted.iterator();\n     boolean resourcesAvailable \u003d true;\n     while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n       Container container \u003d cIter.next();\n-      if (tryStartContainer(container)) {\n+      if (tryStartContainer(container, force)) {\n         cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean startContainers(\n      Collection\u003cContainer\u003e containersToBeStarted, boolean force) {\n    Iterator\u003cContainer\u003e cIter \u003d containersToBeStarted.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (tryStartContainer(container, force)) {\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldValue": "[queuedContainers-Collection\u003cContainer\u003e]",
            "newValue": "[containersToBeStarted-Collection\u003cContainer\u003e, force-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7185. ContainerScheduler should only look at availableResource for GUARANTEED containers when OPPORTUNISTIC container queuing is enabled. (Wangda Tan via asuresh)\n",
          "commitDate": "12/09/17 4:10 PM",
          "commitName": "2ae72692fc370267141a1ee55ef372ff62302b54",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "20/08/17 7:54 AM",
          "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 23.34,
          "commitsBetweenForRepo": 250,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private boolean startContainersFromQueue(\n-      Collection\u003cContainer\u003e queuedContainers) {\n-    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n+  private boolean startContainers(\n+      Collection\u003cContainer\u003e containersToBeStarted, boolean force) {\n+    Iterator\u003cContainer\u003e cIter \u003d containersToBeStarted.iterator();\n     boolean resourcesAvailable \u003d true;\n     while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n       Container container \u003d cIter.next();\n-      if (tryStartContainer(container)) {\n+      if (tryStartContainer(container, force)) {\n         cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean startContainers(\n      Collection\u003cContainer\u003e containersToBeStarted, boolean force) {\n    Iterator\u003cContainer\u003e cIter \u003d containersToBeStarted.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (tryStartContainer(container, force)) {\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "5b007921cdf01ecc8ed97c164b7d327b8304c529": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6706. Refactor ContainerScheduler to make oversubscription change easier. (Haibo Chen via asuresh)\n",
      "commitDate": "17/07/17 2:11 PM",
      "commitName": "5b007921cdf01ecc8ed97c164b7d327b8304c529",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "16/12/16 8:14 AM",
      "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 213.21,
      "commitsBetweenForRepo": 1093,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n   private boolean startContainersFromQueue(\n       Collection\u003cContainer\u003e queuedContainers) {\n     Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n     boolean resourcesAvailable \u003d true;\n     while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n       Container container \u003d cIter.next();\n-      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n-        startAllocatedContainer(container);\n+      if (tryStartContainer(container)) {\n         cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean startContainersFromQueue(\n      Collection\u003cContainer\u003e queuedContainers) {\n    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (tryStartContainer(container)) {\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,15 @@\n   private boolean startContainersFromQueue(\n-      Queue\u003cAllocatedContainerInfo\u003e queuedContainers) {\n-    Iterator\u003cAllocatedContainerInfo\u003e guarIter \u003d queuedContainers.iterator();\n+      Collection\u003cContainer\u003e queuedContainers) {\n+    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n     boolean resourcesAvailable \u003d true;\n-\n-    while (guarIter.hasNext() \u0026\u0026 resourcesAvailable) {\n-      AllocatedContainerInfo allocatedContInfo \u003d guarIter.next();\n-\n-      if (getContainersMonitor().hasResourcesAvailable(\n-          allocatedContInfo.getPti())) {\n-        startAllocatedContainer(allocatedContInfo);\n-        guarIter.remove();\n+    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n+      Container container \u003d cIter.next();\n+      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n+        startAllocatedContainer(container);\n+        cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean startContainersFromQueue(\n      Collection\u003cContainer\u003e queuedContainers) {\n    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n        startAllocatedContainer(container);\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
            "oldMethodName": "startContainersFromQueue",
            "newMethodName": "startContainersFromQueue"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,15 @@\n   private boolean startContainersFromQueue(\n-      Queue\u003cAllocatedContainerInfo\u003e queuedContainers) {\n-    Iterator\u003cAllocatedContainerInfo\u003e guarIter \u003d queuedContainers.iterator();\n+      Collection\u003cContainer\u003e queuedContainers) {\n+    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n     boolean resourcesAvailable \u003d true;\n-\n-    while (guarIter.hasNext() \u0026\u0026 resourcesAvailable) {\n-      AllocatedContainerInfo allocatedContInfo \u003d guarIter.next();\n-\n-      if (getContainersMonitor().hasResourcesAvailable(\n-          allocatedContInfo.getPti())) {\n-        startAllocatedContainer(allocatedContInfo);\n-        guarIter.remove();\n+    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n+      Container container \u003d cIter.next();\n+      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n+        startAllocatedContainer(container);\n+        cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean startContainersFromQueue(\n      Collection\u003cContainer\u003e queuedContainers) {\n    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n        startAllocatedContainer(container);\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,15 @@\n   private boolean startContainersFromQueue(\n-      Queue\u003cAllocatedContainerInfo\u003e queuedContainers) {\n-    Iterator\u003cAllocatedContainerInfo\u003e guarIter \u003d queuedContainers.iterator();\n+      Collection\u003cContainer\u003e queuedContainers) {\n+    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n     boolean resourcesAvailable \u003d true;\n-\n-    while (guarIter.hasNext() \u0026\u0026 resourcesAvailable) {\n-      AllocatedContainerInfo allocatedContInfo \u003d guarIter.next();\n-\n-      if (getContainersMonitor().hasResourcesAvailable(\n-          allocatedContInfo.getPti())) {\n-        startAllocatedContainer(allocatedContInfo);\n-        guarIter.remove();\n+    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n+      Container container \u003d cIter.next();\n+      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n+        startAllocatedContainer(container);\n+        cIter.remove();\n       } else {\n         resourcesAvailable \u003d false;\n       }\n     }\n     return resourcesAvailable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean startContainersFromQueue(\n      Collection\u003cContainer\u003e queuedContainers) {\n    Iterator\u003cContainer\u003e cIter \u003d queuedContainers.iterator();\n    boolean resourcesAvailable \u003d true;\n    while (cIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      Container container \u003d cIter.next();\n      if (this.utilizationTracker.hasResourcesAvailable(container)) {\n        startAllocatedContainer(container);\n        cIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldValue": "[queuedContainers-Queue\u003cAllocatedContainerInfo\u003e]",
            "newValue": "[queuedContainers-Collection\u003cContainer\u003e]"
          }
        }
      ]
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,18 @@\n+  private boolean startContainersFromQueue(\n+      Queue\u003cAllocatedContainerInfo\u003e queuedContainers) {\n+    Iterator\u003cAllocatedContainerInfo\u003e guarIter \u003d queuedContainers.iterator();\n+    boolean resourcesAvailable \u003d true;\n+\n+    while (guarIter.hasNext() \u0026\u0026 resourcesAvailable) {\n+      AllocatedContainerInfo allocatedContInfo \u003d guarIter.next();\n+\n+      if (getContainersMonitor().hasResourcesAvailable(\n+          allocatedContInfo.getPti())) {\n+        startAllocatedContainer(allocatedContInfo);\n+        guarIter.remove();\n+      } else {\n+        resourcesAvailable \u003d false;\n+      }\n+    }\n+    return resourcesAvailable;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean startContainersFromQueue(\n      Queue\u003cAllocatedContainerInfo\u003e queuedContainers) {\n    Iterator\u003cAllocatedContainerInfo\u003e guarIter \u003d queuedContainers.iterator();\n    boolean resourcesAvailable \u003d true;\n\n    while (guarIter.hasNext() \u0026\u0026 resourcesAvailable) {\n      AllocatedContainerInfo allocatedContInfo \u003d guarIter.next();\n\n      if (getContainersMonitor().hasResourcesAvailable(\n          allocatedContInfo.getPti())) {\n        startAllocatedContainer(allocatedContInfo);\n        guarIter.remove();\n      } else {\n        resourcesAvailable \u003d false;\n      }\n    }\n    return resourcesAvailable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java"
    }
  }
}