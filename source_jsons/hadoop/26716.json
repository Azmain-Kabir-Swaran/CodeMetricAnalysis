{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskImpl.java",
  "functionName": "getReport",
  "functionId": "getReport",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java",
  "functionStartLine": 388,
  "functionEndLine": 428,
  "numCommitsSeen": 45,
  "timeTaken": 7852,
  "changeHistory": [
    "04dac636953532c9c4ab6692e193e3ffe292edb2",
    "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "04dac636953532c9c4ab6692e193e3ffe292edb2": "Ybodychange",
    "e8645636ce1721aa6dc3674fbc553a7bb3522fbe": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "04dac636953532c9c4ab6692e193e3ffe292edb2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5550. Task Status message (reporter.setStatus) not shown in UI with Hadoop 2.0 (Gera Shegalov via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/13 1:00 PM",
      "commitName": "04dac636953532c9c4ab6692e193e3ffe292edb2",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "20/12/13 11:53 AM",
      "commitNameOld": "1b9b95692412f3866fe716e56bbcf756a15b70e4",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,41 @@\n   public TaskReport getReport() {\n     TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n     readLock.lock();\n     try {\n+      TaskAttempt bestAttempt \u003d selectBestAttempt();\n       report.setTaskId(taskId);\n       report.setStartTime(getLaunchTime());\n       report.setFinishTime(getFinishTime());\n       report.setTaskState(getState());\n-      report.setProgress(getProgress());\n+      report.setProgress(bestAttempt \u003d\u003d null ? 0f : bestAttempt.getProgress());\n+      report.setStatus(bestAttempt \u003d\u003d null\n+          ? \"\"\n+          : bestAttempt.getReport().getStateString());\n \n       for (TaskAttempt attempt : attempts.values()) {\n         if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n           report.addRunningAttempt(attempt.getID());\n         }\n       }\n \n       report.setSuccessfulAttempt(successfulAttempt);\n       \n       for (TaskAttempt att : attempts.values()) {\n         String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n         for (CharSequence cs : att.getDiagnostics()) {\n           report.addDiagnostics(prefix + cs);\n           \n         }\n       }\n \n       // Add a copy of counters as the last step so that their lifetime on heap\n       // is as small as possible.\n-      report.setCounters(TypeConverter.toYarn(getCounters()));\n+      report.setCounters(TypeConverter.toYarn(bestAttempt \u003d\u003d null\n+          ? TaskAttemptImpl.EMPTY_COUNTERS\n+          : bestAttempt.getCounters()));\n \n       return report;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TaskReport getReport() {\n    TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n    readLock.lock();\n    try {\n      TaskAttempt bestAttempt \u003d selectBestAttempt();\n      report.setTaskId(taskId);\n      report.setStartTime(getLaunchTime());\n      report.setFinishTime(getFinishTime());\n      report.setTaskState(getState());\n      report.setProgress(bestAttempt \u003d\u003d null ? 0f : bestAttempt.getProgress());\n      report.setStatus(bestAttempt \u003d\u003d null\n          ? \"\"\n          : bestAttempt.getReport().getStateString());\n\n      for (TaskAttempt attempt : attempts.values()) {\n        if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n          report.addRunningAttempt(attempt.getID());\n        }\n      }\n\n      report.setSuccessfulAttempt(successfulAttempt);\n      \n      for (TaskAttempt att : attempts.values()) {\n        String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n        for (CharSequence cs : att.getDiagnostics()) {\n          report.addDiagnostics(prefix + cs);\n          \n        }\n      }\n\n      // Add a copy of counters as the last step so that their lifetime on heap\n      // is as small as possible.\n      report.setCounters(TypeConverter.toYarn(bestAttempt \u003d\u003d null\n          ? TaskAttemptImpl.EMPTY_COUNTERS\n          : bestAttempt.getCounters()));\n\n      return report;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java",
      "extendedDetails": {}
    },
    "e8645636ce1721aa6dc3674fbc553a7bb3522fbe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3511. Removed a multitude of cloned/duplicate counters in the AM thereby reducing the AM heap size and preventing full GCs. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229347 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/12 1:04 PM",
      "commitName": "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/12/11 11:54 AM",
      "commitNameOld": "fcbad14a3da7fadbb601bf245552ecca2fbc5026",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   public TaskReport getReport() {\n     TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n     readLock.lock();\n     try {\n       report.setTaskId(taskId);\n       report.setStartTime(getLaunchTime());\n       report.setFinishTime(getFinishTime());\n       report.setTaskState(getState());\n       report.setProgress(getProgress());\n-      report.setCounters(getCounters());\n \n       for (TaskAttempt attempt : attempts.values()) {\n         if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n           report.addRunningAttempt(attempt.getID());\n         }\n       }\n \n       report.setSuccessfulAttempt(successfulAttempt);\n       \n       for (TaskAttempt att : attempts.values()) {\n         String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n         for (CharSequence cs : att.getDiagnostics()) {\n           report.addDiagnostics(prefix + cs);\n           \n         }\n       }\n+\n+      // Add a copy of counters as the last step so that their lifetime on heap\n+      // is as small as possible.\n+      report.setCounters(TypeConverter.toYarn(getCounters()));\n+\n       return report;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TaskReport getReport() {\n    TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n    readLock.lock();\n    try {\n      report.setTaskId(taskId);\n      report.setStartTime(getLaunchTime());\n      report.setFinishTime(getFinishTime());\n      report.setTaskState(getState());\n      report.setProgress(getProgress());\n\n      for (TaskAttempt attempt : attempts.values()) {\n        if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n          report.addRunningAttempt(attempt.getID());\n        }\n      }\n\n      report.setSuccessfulAttempt(successfulAttempt);\n      \n      for (TaskAttempt att : attempts.values()) {\n        String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n        for (CharSequence cs : att.getDiagnostics()) {\n          report.addDiagnostics(prefix + cs);\n          \n        }\n      }\n\n      // Add a copy of counters as the last step so that their lifetime on heap\n      // is as small as possible.\n      report.setCounters(TypeConverter.toYarn(getCounters()));\n\n      return report;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TaskReport getReport() {\n    TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n    readLock.lock();\n    try {\n      report.setTaskId(taskId);\n      report.setStartTime(getLaunchTime());\n      report.setFinishTime(getFinishTime());\n      report.setTaskState(getState());\n      report.setProgress(getProgress());\n      report.setCounters(getCounters());\n\n      for (TaskAttempt attempt : attempts.values()) {\n        if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n          report.addRunningAttempt(attempt.getID());\n        }\n      }\n\n      report.setSuccessfulAttempt(successfulAttempt);\n      \n      for (TaskAttempt att : attempts.values()) {\n        String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n        for (CharSequence cs : att.getDiagnostics()) {\n          report.addDiagnostics(prefix + cs);\n          \n        }\n      }\n      return report;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,31 @@\n+  public TaskReport getReport() {\n+    TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n+    readLock.lock();\n+    try {\n+      report.setTaskId(taskId);\n+      report.setStartTime(getLaunchTime());\n+      report.setFinishTime(getFinishTime());\n+      report.setTaskState(getState());\n+      report.setProgress(getProgress());\n+      report.setCounters(getCounters());\n+\n+      for (TaskAttempt attempt : attempts.values()) {\n+        if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n+          report.addRunningAttempt(attempt.getID());\n+        }\n+      }\n+\n+      report.setSuccessfulAttempt(successfulAttempt);\n+      \n+      for (TaskAttempt att : attempts.values()) {\n+        String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n+        for (CharSequence cs : att.getDiagnostics()) {\n+          report.addDiagnostics(prefix + cs);\n+          \n+        }\n+      }\n+      return report;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TaskReport getReport() {\n    TaskReport report \u003d recordFactory.newRecordInstance(TaskReport.class);\n    readLock.lock();\n    try {\n      report.setTaskId(taskId);\n      report.setStartTime(getLaunchTime());\n      report.setFinishTime(getFinishTime());\n      report.setTaskState(getState());\n      report.setProgress(getProgress());\n      report.setCounters(getCounters());\n\n      for (TaskAttempt attempt : attempts.values()) {\n        if (TaskAttemptState.RUNNING.equals(attempt.getState())) {\n          report.addRunningAttempt(attempt.getID());\n        }\n      }\n\n      report.setSuccessfulAttempt(successfulAttempt);\n      \n      for (TaskAttempt att : attempts.values()) {\n        String prefix \u003d \"AttemptID:\" + att.getID() + \" Info:\";\n        for (CharSequence cs : att.getDiagnostics()) {\n          report.addDiagnostics(prefix + cs);\n          \n        }\n      }\n      return report;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskImpl.java"
    }
  }
}