{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAdminCLI.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
  "functionStartLine": 703,
  "functionEndLine": 814,
  "numCommitsSeen": 70,
  "timeTaken": 13309,
  "changeHistory": [
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
    "dc66de744826e0501040f8c2ca9e1edc076a80cf",
    "aacf214a274fb5149437f287c542339966c03ea5",
    "6e130c308cf1b97e8386b6a43c26d72d2850119c",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421",
    "95f2b9859718eca12fb3167775cdd2dad25dde25",
    "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc",
    "a9c8ea71aa427ff5f25caec98be15bc880e578a7",
    "cab7674e54c4fe56838668462de99a6787841309",
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501",
    "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab",
    "e0233c16ebd06bb3aabeb523cd17259008e243ef",
    "82567664988b673f1b819a42a4baf31cb0dcb331",
    "d963b3cd525dd3d948574f5b02aa50d8e23df968",
    "03510d00f48137fe4273c3e694e87fc0e660a706",
    "ac0bbb750f3cc9baa1145c250e083006bf83cd87",
    "494e21052156a7c5abedbbee824578837ad8cc11",
    "d52494228998db61683e486d19899e223cd85fa2",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76": "Ybodychange",
    "dc66de744826e0501040f8c2ca9e1edc076a80cf": "Ybodychange",
    "aacf214a274fb5149437f287c542339966c03ea5": "Ybodychange",
    "6e130c308cf1b97e8386b6a43c26d72d2850119c": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Ybodychange",
    "95f2b9859718eca12fb3167775cdd2dad25dde25": "Ybodychange",
    "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc": "Ybodychange",
    "a9c8ea71aa427ff5f25caec98be15bc880e578a7": "Ybodychange",
    "cab7674e54c4fe56838668462de99a6787841309": "Ybodychange",
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501": "Ybodychange",
    "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab": "Ybodychange",
    "e0233c16ebd06bb3aabeb523cd17259008e243ef": "Ybodychange",
    "82567664988b673f1b819a42a4baf31cb0dcb331": "Ybodychange",
    "d963b3cd525dd3d948574f5b02aa50d8e23df968": "Ybodychange",
    "03510d00f48137fe4273c3e694e87fc0e660a706": "Ybodychange",
    "ac0bbb750f3cc9baa1145c250e083006bf83cd87": "Yfilerename",
    "494e21052156a7c5abedbbee824578837ad8cc11": "Yfilerename",
    "d52494228998db61683e486d19899e223cd85fa2": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Yreturntypechange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1defe3a65af5faf5117978f4f2cf6a24d17a2e76": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16753. Refactor HAAdmin. Contributed by Xieming Li.\n",
      "commitDate": "20/01/20 5:58 PM",
      "commitName": "1defe3a65af5faf5117978f4f2cf6a24d17a2e76",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/12/19 1:37 AM",
      "commitNameOld": "dc66de744826e0501040f8c2ca9e1edc076a80cf",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 42.68,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,112 @@\n   public int run(String[] args) throws Exception {\n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n-    if (USAGE.containsKey(cmd) \u0026\u0026 !cmd.equals(\"-failover\")\n-        \u0026\u0026 !cmd.equals(\"-transitionToObserver\")) {\n+    if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n       } else if (\"-refreshNodesResources\".equals(cmd)) {\n         exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-updateNodeResource\".equals(cmd)) {\n         exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         exitCode \u003d handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         exitCode \u003d handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         exitCode \u003d handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        exitCode \u003d handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "dc66de744826e0501040f8c2ca9e1edc076a80cf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9985. Unsupported transitionToObserver option displaying for rmadmin command. Contributed by Ayush Saxena.\n",
      "commitDate": "09/12/19 1:37 AM",
      "commitName": "dc66de744826e0501040f8c2ca9e1edc076a80cf",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/02/19 11:45 AM",
      "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 286.58,
      "commitsBetweenForRepo": 2017,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,112 +1,113 @@\n   public int run(String[] args) throws Exception {\n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n-    if (USAGE.containsKey(cmd)) {\n+    if (USAGE.containsKey(cmd) \u0026\u0026 !cmd.equals(\"-failover\")\n+        \u0026\u0026 !cmd.equals(\"-transitionToObserver\")) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n       } else if (\"-refreshNodesResources\".equals(cmd)) {\n         exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-updateNodeResource\".equals(cmd)) {\n         exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         exitCode \u003d handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         exitCode \u003d handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         exitCode \u003d handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd) \u0026\u0026 !cmd.equals(\"-failover\")\n        \u0026\u0026 !cmd.equals(\"-transitionToObserver\")) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        exitCode \u003d handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "aacf214a274fb5149437f287c542339966c03ea5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5697. Use CliParser to parse options in RMAdminCLI. Contributed by Tao jie\n",
      "commitDate": "01/11/16 4:14 PM",
      "commitName": "aacf214a274fb5149437f287c542339966c03ea5",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "02/10/16 11:02 PM",
      "commitNameOld": "6e130c308cf1b97e8386b6a43c26d72d2850119c",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 29.72,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,150 +1,112 @@\n   public int run(String[] args) throws Exception {\n-    // -directlyAccessNodeLabelStore is a additional option for node label\n-    // access, so just search if we have specified this option, and remove it\n-    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n-    for (int i \u003d 0; i \u003c args.length; i++) {\n-      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n-        directlyAccessNodeLabelStore \u003d true;\n-      } else {\n-        argsList.add(args[i]);\n-      }\n-    }\n-    args \u003d argsList.toArray(new String[0]);\n-    \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n       } else if (\"-refreshNodesResources\".equals(cmd)) {\n         exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-updateNodeResource\".equals(cmd)) {\n         exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n-        if (i \u003e\u003d args.length) {\n-          System.err.println(NO_LABEL_ERR_MSG);\n-          printUsage(\"\", isHAEnabled);\n-          exitCode \u003d -1;\n-        } else {\n-          exitCode \u003d addToClusterNodeLabels(args[i]);\n-        }\n+        exitCode \u003d handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n-        if (i \u003e\u003d args.length) {\n-          System.err.println(NO_LABEL_ERR_MSG);\n-          printUsage(\"\", isHAEnabled);\n-          exitCode \u003d -1;\n-        } else {\n-          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n-        }\n+        exitCode \u003d handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n-        if (i \u003e\u003d args.length) {\n-          System.err.println(NO_MAPPING_ERR_MSG);\n-          printUsage(\"\", isHAEnabled);\n-          exitCode \u003d -1;\n-        } else if (\"-failOnUnknownNodes\".equals(args[i])) {\n-          if (i + 1 \u003e\u003d args.length) {\n-            System.err.println(NO_MAPPING_ERR_MSG);\n-            printUsage(\"\", isHAEnabled);\n-            exitCode \u003d -1;\n-          } else {\n-            exitCode \u003d replaceLabelsOnNodes(args[i + 1], true);\n-          }\n-        } else {\n-          exitCode \u003d replaceLabelsOnNodes(args[i], false);\n-        }\n+        exitCode \u003d handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        exitCode \u003d handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "6e130c308cf1b97e8386b6a43c26d72d2850119c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4855. Should check if node exists when replace nodelabels. Contributeed by Tao Jie\n",
      "commitDate": "02/10/16 11:02 PM",
      "commitName": "6e130c308cf1b97e8386b6a43c26d72d2850119c",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "13/09/16 2:53 AM",
      "commitNameOld": "729de3e6b6ae1fcfe1c6bec7102d758ad489df47",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 19.84,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,142 +1,150 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n       } else if (\"-refreshNodesResources\".equals(cmd)) {\n         exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-updateNodeResource\".equals(cmd)) {\n         exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n+        } else if (\"-failOnUnknownNodes\".equals(args[i])) {\n+          if (i + 1 \u003e\u003d args.length) {\n+            System.err.println(NO_MAPPING_ERR_MSG);\n+            printUsage(\"\", isHAEnabled);\n+            exitCode \u003d -1;\n+          } else {\n+            exitCode \u003d replaceLabelsOnNodes(args[i + 1], true);\n+          }\n         } else {\n-          exitCode \u003d replaceLabelsOnNodes(args[i]);\n+          exitCode \u003d replaceLabelsOnNodes(args[i], false);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else if (\"-failOnUnknownNodes\".equals(args[i])) {\n          if (i + 1 \u003e\u003d args.length) {\n            System.err.println(NO_MAPPING_ERR_MSG);\n            printUsage(\"\", isHAEnabled);\n            exitCode \u003d -1;\n          } else {\n            exitCode \u003d replaceLabelsOnNodes(args[i + 1], true);\n          }\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i], false);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "commitDateOld": "29/07/16 10:26 AM",
      "commitNameOld": "95f2b9859718eca12fb3167775cdd2dad25dde25",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 19.88,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,178 +1,142 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n-    \n+\n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n-        if (args.length \u003d\u003d 1) {\n-          exitCode \u003d refreshNodes();\n-        } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n-          // if the graceful timeout specified\n-          if (\"-g\".equals(args[1])) {\n-            long timeout \u003d -1;\n-            String trackingMode;\n-            if (args.length \u003d\u003d 4) {\n-              timeout \u003d validateTimeout(args[2]);\n-              trackingMode \u003d validateTrackingMode(args[3]);\n-            } else {\n-              trackingMode \u003d validateTrackingMode(args[2]);\n-            }\n-            exitCode \u003d refreshNodes(timeout, trackingMode);\n-          } else {\n-            printUsage(cmd, isHAEnabled);\n-            return -1;\n-          }\n-        } else {\n-          printUsage(cmd, isHAEnabled);\n-          return -1;\n-        }\n+        exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n       } else if (\"-refreshNodesResources\".equals(cmd)) {\n         exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-updateNodeResource\".equals(cmd)) {\n-        if (args.length \u003c 4 || args.length \u003e 5) {\n-          System.err.println(\"Number of parameters specified for \" +\n-              \"updateNodeResource is wrong.\");\n-          printUsage(cmd, isHAEnabled);\n-          exitCode \u003d -1;\n-        } else {\n-          String nodeID \u003d args[i++];\n-          String memSize \u003d args[i++];\n-          String cores \u003d args[i++];\n-          int overCommitTimeout \u003d ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT;\n-          if (i \u003d\u003d args.length - 1) {\n-            overCommitTimeout \u003d Integer.parseInt(args[i]);\n-          }\n-          exitCode \u003d updateNodeResource(nodeID, Integer.parseInt(memSize),\n-              Integer.parseInt(cores), overCommitTimeout);\n-        }\n+        exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d handleRefreshNodes(args, cmd, isHAEnabled);\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        exitCode \u003d handleUpdateNodeResource(args, cmd, isHAEnabled);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "95f2b9859718eca12fb3167775cdd2dad25dde25": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5434. Add -client|server argument for graceful decommmission. Contributed by Robert Kanter.\n",
      "commitDate": "29/07/16 10:26 AM",
      "commitName": "95f2b9859718eca12fb3167775cdd2dad25dde25",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 44.81,
      "commitsBetweenForRepo": 428,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,171 +1,178 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         if (args.length \u003d\u003d 1) {\n           exitCode \u003d refreshNodes();\n-        } else if (args.length \u003d\u003d 3) {\n+        } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n           // if the graceful timeout specified\n           if (\"-g\".equals(args[1])) {\n-            long timeout \u003d validateTimeout(args[2]);\n-            exitCode \u003d refreshNodes(timeout);\n+            long timeout \u003d -1;\n+            String trackingMode;\n+            if (args.length \u003d\u003d 4) {\n+              timeout \u003d validateTimeout(args[2]);\n+              trackingMode \u003d validateTrackingMode(args[3]);\n+            } else {\n+              trackingMode \u003d validateTrackingMode(args[2]);\n+            }\n+            exitCode \u003d refreshNodes(timeout, trackingMode);\n           } else {\n             printUsage(cmd, isHAEnabled);\n             return -1;\n           }\n         } else {\n           printUsage(cmd, isHAEnabled);\n           return -1;\n         }\n       } else if (\"-refreshNodesResources\".equals(cmd)) {\n         exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-updateNodeResource\".equals(cmd)) {\n         if (args.length \u003c 4 || args.length \u003e 5) {\n           System.err.println(\"Number of parameters specified for \" +\n               \"updateNodeResource is wrong.\");\n           printUsage(cmd, isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           String nodeID \u003d args[i++];\n           String memSize \u003d args[i++];\n           String cores \u003d args[i++];\n           int overCommitTimeout \u003d ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT;\n           if (i \u003d\u003d args.length - 1) {\n             overCommitTimeout \u003d Integer.parseInt(args[i]);\n           }\n           exitCode \u003d updateNodeResource(nodeID, Integer.parseInt(memSize),\n               Integer.parseInt(cores), overCommitTimeout);\n         }\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        if (args.length \u003d\u003d 1) {\n          exitCode \u003d refreshNodes();\n        } else if (args.length \u003d\u003d 3 || args.length \u003d\u003d 4) {\n          // if the graceful timeout specified\n          if (\"-g\".equals(args[1])) {\n            long timeout \u003d -1;\n            String trackingMode;\n            if (args.length \u003d\u003d 4) {\n              timeout \u003d validateTimeout(args[2]);\n              trackingMode \u003d validateTrackingMode(args[3]);\n            } else {\n              trackingMode \u003d validateTrackingMode(args[2]);\n            }\n            exitCode \u003d refreshNodes(timeout, trackingMode);\n          } else {\n            printUsage(cmd, isHAEnabled);\n            return -1;\n          }\n        } else {\n          printUsage(cmd, isHAEnabled);\n          return -1;\n        }\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        if (args.length \u003c 4 || args.length \u003e 5) {\n          System.err.println(\"Number of parameters specified for \" +\n              \"updateNodeResource is wrong.\");\n          printUsage(cmd, isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          String nodeID \u003d args[i++];\n          String memSize \u003d args[i++];\n          String cores \u003d args[i++];\n          int overCommitTimeout \u003d ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT;\n          if (i \u003d\u003d args.length - 1) {\n            overCommitTimeout \u003d Integer.parseInt(args[i]);\n          }\n          exitCode \u003d updateNodeResource(nodeID, Integer.parseInt(memSize),\n              Integer.parseInt(cores), overCommitTimeout);\n        }\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-313. Add Admin API for supporting node resource configuration in command line. (Contributed by Inigo Goiri, Kenji Kikushima and Junping Du)\n",
      "commitDate": "15/09/15 7:56 AM",
      "commitName": "73e3a49eb0d58f08549dc6b7054eb5c1f62819dc",
      "commitAuthor": "Junping Du",
      "commitDateOld": "27/08/15 1:25 PM",
      "commitNameOld": "a9c8ea71aa427ff5f25caec98be15bc880e578a7",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.77,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,151 +1,171 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n+        \"-refreshNodesResources\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         if (args.length \u003d\u003d 1) {\n           exitCode \u003d refreshNodes();\n         } else if (args.length \u003d\u003d 3) {\n           // if the graceful timeout specified\n           if (\"-g\".equals(args[1])) {\n             long timeout \u003d validateTimeout(args[2]);\n             exitCode \u003d refreshNodes(timeout);\n           } else {\n             printUsage(cmd, isHAEnabled);\n             return -1;\n           }\n         } else {\n           printUsage(cmd, isHAEnabled);\n           return -1;\n         }\n+      } else if (\"-refreshNodesResources\".equals(cmd)) {\n+        exitCode \u003d refreshNodesResources();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n         exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n+      } else if (\"-updateNodeResource\".equals(cmd)) {\n+        if (args.length \u003c 4 || args.length \u003e 5) {\n+          System.err.println(\"Number of parameters specified for \" +\n+              \"updateNodeResource is wrong.\");\n+          printUsage(cmd, isHAEnabled);\n+          exitCode \u003d -1;\n+        } else {\n+          String nodeID \u003d args[i++];\n+          String memSize \u003d args[i++];\n+          String cores \u003d args[i++];\n+          int overCommitTimeout \u003d ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT;\n+          if (i \u003d\u003d args.length - 1) {\n+            overCommitTimeout \u003d Integer.parseInt(args[i]);\n+          }\n+          exitCode \u003d updateNodeResource(nodeID, Integer.parseInt(memSize),\n+              Integer.parseInt(cores), overCommitTimeout);\n+        }\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodesResources\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        if (args.length \u003d\u003d 1) {\n          exitCode \u003d refreshNodes();\n        } else if (args.length \u003d\u003d 3) {\n          // if the graceful timeout specified\n          if (\"-g\".equals(args[1])) {\n            long timeout \u003d validateTimeout(args[2]);\n            exitCode \u003d refreshNodes(timeout);\n          } else {\n            printUsage(cmd, isHAEnabled);\n            return -1;\n          }\n        } else {\n          printUsage(cmd, isHAEnabled);\n          return -1;\n        }\n      } else if (\"-refreshNodesResources\".equals(cmd)) {\n        exitCode \u003d refreshNodesResources();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-updateNodeResource\".equals(cmd)) {\n        if (args.length \u003c 4 || args.length \u003e 5) {\n          System.err.println(\"Number of parameters specified for \" +\n              \"updateNodeResource is wrong.\");\n          printUsage(cmd, isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          String nodeID \u003d args[i++];\n          String memSize \u003d args[i++];\n          String cores \u003d args[i++];\n          int overCommitTimeout \u003d ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT;\n          if (i \u003d\u003d args.length - 1) {\n            overCommitTimeout \u003d Integer.parseInt(args[i]);\n          }\n          exitCode \u003d updateNodeResource(nodeID, Integer.parseInt(memSize),\n              Integer.parseInt(cores), overCommitTimeout);\n        }\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "a9c8ea71aa427ff5f25caec98be15bc880e578a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3250. Support admin cli interface in for Application Priority. Contributed by Rohith Sharma K S\n",
      "commitDate": "27/08/15 1:25 PM",
      "commitName": "a9c8ea71aa427ff5f25caec98be15bc880e578a7",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/06/15 10:26 PM",
      "commitNameOld": "a95d39f9d08b3b215a1b33e77e9ab8a2ee59b3a9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 59.62,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,149 +1,151 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         if (args.length \u003d\u003d 1) {\n           exitCode \u003d refreshNodes();\n         } else if (args.length \u003d\u003d 3) {\n           // if the graceful timeout specified\n           if (\"-g\".equals(args[1])) {\n             long timeout \u003d validateTimeout(args[2]);\n             exitCode \u003d refreshNodes(timeout);\n           } else {\n             printUsage(cmd, isHAEnabled);\n             return -1;\n           }\n         } else {\n           printUsage(cmd, isHAEnabled);\n           return -1;\n         }\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n+      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n+        exitCode \u003d refreshClusterMaxPriority();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n           printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        if (args.length \u003d\u003d 1) {\n          exitCode \u003d refreshNodes();\n        } else if (args.length \u003d\u003d 3) {\n          // if the graceful timeout specified\n          if (\"-g\".equals(args[1])) {\n            long timeout \u003d validateTimeout(args[2]);\n            exitCode \u003d refreshNodes(timeout);\n          } else {\n            printUsage(cmd, isHAEnabled);\n            return -1;\n          }\n        } else {\n          printUsage(cmd, isHAEnabled);\n          return -1;\n        }\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\n        exitCode \u003d refreshClusterMaxPriority();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "cab7674e54c4fe56838668462de99a6787841309": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3581. Deprecate -directlyAccessNodeLabelStore in RMAdminCLI. (Naganarasimha G R via wangda)\n",
      "commitDate": "27/05/15 3:34 PM",
      "commitName": "cab7674e54c4fe56838668462de99a6787841309",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/04/15 11:19 AM",
      "commitNameOld": "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 34.18,
      "commitsBetweenForRepo": 359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,146 +1,149 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         if (args.length \u003d\u003d 1) {\n           exitCode \u003d refreshNodes();\n         } else if (args.length \u003d\u003d 3) {\n           // if the graceful timeout specified\n           if (\"-g\".equals(args[1])) {\n             long timeout \u003d validateTimeout(args[2]);\n             exitCode \u003d refreshNodes(timeout);\n           } else {\n             printUsage(cmd, isHAEnabled);\n             return -1;\n           }\n         } else {\n           printUsage(cmd, isHAEnabled);\n           return -1;\n         }\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n+          printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n+          printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n+          printUsage(\"\", isHAEnabled);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        if (args.length \u003d\u003d 1) {\n          exitCode \u003d refreshNodes();\n        } else if (args.length \u003d\u003d 3) {\n          // if the graceful timeout specified\n          if (\"-g\".equals(args[1])) {\n            long timeout \u003d validateTimeout(args[2]);\n            exitCode \u003d refreshNodes(timeout);\n          } else {\n            printUsage(cmd, isHAEnabled);\n            return -1;\n          }\n        } else {\n          printUsage(cmd, isHAEnabled);\n          return -1;\n        }\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          printUsage(\"\", isHAEnabled);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501": {
      "type": "Ybodychange",
      "commitMessage": "New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K\n",
      "commitDate": "22/04/15 10:07 AM",
      "commitName": "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501",
      "commitAuthor": "Junping Du",
      "commitDateOld": "25/03/15 7:42 AM",
      "commitNameOld": "c906a1de7280dabd9d9d8b6aeaa060898e6d17b6",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 28.1,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,132 +1,146 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n-        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n+        \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n-        exitCode \u003d refreshNodes();\n+        if (args.length \u003d\u003d 1) {\n+          exitCode \u003d refreshNodes();\n+        } else if (args.length \u003d\u003d 3) {\n+          // if the graceful timeout specified\n+          if (\"-g\".equals(args[1])) {\n+            long timeout \u003d validateTimeout(args[2]);\n+            exitCode \u003d refreshNodes(timeout);\n+          } else {\n+            printUsage(cmd, isHAEnabled);\n+            return -1;\n+          }\n+        } else {\n+          printUsage(cmd, isHAEnabled);\n+          return -1;\n+        }\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_LABEL_ERR_MSG);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(NO_MAPPING_ERR_MSG);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n-      // out the first line of the error mesage, ignore the stack trace.\n+      // out the first line of the error message, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        if (args.length \u003d\u003d 1) {\n          exitCode \u003d refreshNodes();\n        } else if (args.length \u003d\u003d 3) {\n          // if the graceful timeout specified\n          if (\"-g\".equals(args[1])) {\n            long timeout \u003d validateTimeout(args[2]);\n            exitCode \u003d refreshNodes(timeout);\n          } else {\n            printUsage(cmd, isHAEnabled);\n            return -1;\n          }\n        } else {\n          printUsage(cmd, isHAEnabled);\n          return -1;\n        }\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error message, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2762. Fixed RMAdminCLI to trim and check node-label related arguments before sending to RM. Contributed by Rohith Sharmaks\n",
      "commitDate": "16/12/14 11:00 AM",
      "commitName": "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/12/14 5:56 PM",
      "commitNameOld": "437322afcaa4b1b260501af160283c97eb589419",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 6.71,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,132 +1,132 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n-          System.err.println(\"No cluster node-labels are specified\");\n+          System.err.println(NO_LABEL_ERR_MSG);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n-          System.err.println(\"No cluster node-labels are specified\");\n+          System.err.println(NO_LABEL_ERR_MSG);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n-          System.err.println(\"No cluster node-labels are specified\");\n+          System.err.println(NO_MAPPING_ERR_MSG);\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_LABEL_ERR_MSG);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(NO_MAPPING_ERR_MSG);\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "e0233c16ebd06bb3aabeb523cd17259008e243ef": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2698. Moved some node label APIs to be correctly placed in client protocol. Contributed by Wangda Tan.\n",
      "commitDate": "30/10/14 10:59 PM",
      "commitName": "e0233c16ebd06bb3aabeb523cd17259008e243ef",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/10/14 12:45 PM",
      "commitNameOld": "65d95b1a520d4ffdf024dbdfcf11d855a3948056",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,136 +1,132 @@\n   public int run(String[] args) throws Exception {\n     // -directlyAccessNodeLabelStore is a additional option for node label\n     // access, so just search if we have specified this option, and remove it\n     List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n         directlyAccessNodeLabelStore \u003d true;\n       } else {\n         argsList.add(args[i]);\n       }\n     }\n     args \u003d argsList.toArray(new String[0]);\n     \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(\"No cluster node-labels are specified\");\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d addToClusterNodeLabels(args[i]);\n         }\n       } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(\"No cluster node-labels are specified\");\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d removeFromClusterNodeLabels(args[i]);\n         }\n       } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n         if (i \u003e\u003d args.length) {\n           System.err.println(\"No cluster node-labels are specified\");\n           exitCode \u003d -1;\n         } else {\n           exitCode \u003d replaceLabelsOnNodes(args[i]);\n         }\n-      } else if (\"-getNodeToLabels\".equals(cmd)) {\n-        exitCode \u003d getNodeToLabels();\n-      } else if (\"-getClusterNodeLabels\".equals(cmd)) {\n-        exitCode \u003d getClusterNodeLabels();\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     if (null !\u003d localNodeLabelsManager) {\n       localNodeLabelsManager.stop();\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(\"No cluster node-labels are specified\");\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(\"No cluster node-labels are specified\");\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(\"No cluster node-labels are specified\");\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "82567664988b673f1b819a42a4baf31cb0dcb331": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2504. Enhanced RM Admin CLI to support management of node-labels. Contribyted by Wangda Tan.\n",
      "commitDate": "18/10/14 12:07 PM",
      "commitName": "82567664988b673f1b819a42a4baf31cb0dcb331",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/03/14 1:07 PM",
      "commitNameOld": "d963b3cd525dd3d948574f5b02aa50d8e23df968",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 226.92,
      "commitsBetweenForRepo": 1815,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,136 @@\n   public int run(String[] args) throws Exception {\n+    // -directlyAccessNodeLabelStore is a additional option for node label\n+    // access, so just search if we have specified this option, and remove it\n+    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n+    for (int i \u003d 0; i \u003c args.length; i++) {\n+      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n+        directlyAccessNodeLabelStore \u003d true;\n+      } else {\n+        argsList.add(args[i]);\n+      }\n+    }\n+    args \u003d argsList.toArray(new String[0]);\n+    \n     YarnConfiguration yarnConf \u003d\n         getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n             getConf());\n     boolean isHAEnabled \u003d\n         yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n             YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n \n     if (args.length \u003c 1) {\n       printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n         printUsage(args[i], isHAEnabled);\n       } else {\n         printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n       if (isHAEnabled) {\n         return super.run(args);\n       }\n       System.out.println(\"Cannot run \" + cmd\n           + \" when ResourceManager HA is not enabled\");\n       return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n+      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n+        if (i \u003e\u003d args.length) {\n+          System.err.println(\"No cluster node-labels are specified\");\n+          exitCode \u003d -1;\n+        } else {\n+          exitCode \u003d addToClusterNodeLabels(args[i]);\n+        }\n+      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n+        if (i \u003e\u003d args.length) {\n+          System.err.println(\"No cluster node-labels are specified\");\n+          exitCode \u003d -1;\n+        } else {\n+          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n+        }\n+      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n+        if (i \u003e\u003d args.length) {\n+          System.err.println(\"No cluster node-labels are specified\");\n+          exitCode \u003d -1;\n+        } else {\n+          exitCode \u003d replaceLabelsOnNodes(args[i]);\n+        }\n+      } else if (\"-getNodeToLabels\".equals(cmd)) {\n+        exitCode \u003d getNodeToLabels();\n+      } else if (\"-getClusterNodeLabels\".equals(cmd)) {\n+        exitCode \u003d getClusterNodeLabels();\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n+    if (null !\u003d localNodeLabelsManager) {\n+      localNodeLabelsManager.stop();\n+    }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    // -directlyAccessNodeLabelStore is a additional option for node label\n    // access, so just search if we have specified this option, and remove it\n    List\u003cString\u003e argsList \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (args[i].equals(\"-directlyAccessNodeLabelStore\")) {\n        directlyAccessNodeLabelStore \u003d true;\n      } else {\n        argsList.add(args[i]);\n      }\n    }\n    args \u003d argsList.toArray(new String[0]);\n    \n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(\"No cluster node-labels are specified\");\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d addToClusterNodeLabels(args[i]);\n        }\n      } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(\"No cluster node-labels are specified\");\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d removeFromClusterNodeLabels(args[i]);\n        }\n      } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\n        if (i \u003e\u003d args.length) {\n          System.err.println(\"No cluster node-labels are specified\");\n          exitCode \u003d -1;\n        } else {\n          exitCode \u003d replaceLabelsOnNodes(args[i]);\n        }\n      } else if (\"-getNodeToLabels\".equals(cmd)) {\n        exitCode \u003d getNodeToLabels();\n      } else if (\"-getClusterNodeLabels\".equals(cmd)) {\n        exitCode \u003d getClusterNodeLabels();\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    if (null !\u003d localNodeLabelsManager) {\n      localNodeLabelsManager.stop();\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "d963b3cd525dd3d948574f5b02aa50d8e23df968": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1761. Modified RMAdmin CLI to check whether HA is enabled or not before it executes any of the HA admin related commands. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574661 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/14 1:07 PM",
      "commitName": "d963b3cd525dd3d948574f5b02aa50d8e23df968",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/01/14 4:57 PM",
      "commitNameOld": "d13c2eeca685d24130444ba32e3454362224ba6c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 49.84,
      "commitsBetweenForRepo": 443,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,96 @@\n   public int run(String[] args) throws Exception {\n+    YarnConfiguration yarnConf \u003d\n+        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n+            getConf());\n+    boolean isHAEnabled \u003d\n+        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n+            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n+\n     if (args.length \u003c 1) {\n-      printUsage(\"\");\n+      printUsage(\"\", isHAEnabled);\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n \n     exitCode \u003d 0;\n     if (\"-help\".equals(cmd)) {\n       if (i \u003c args.length) {\n-        printUsage(args[i]);\n+        printUsage(args[i], isHAEnabled);\n       } else {\n-        printHelp(\"\");\n+        printHelp(\"\", isHAEnabled);\n       }\n       return exitCode;\n     }\n \n     if (USAGE.containsKey(cmd)) {\n-      return super.run(args);\n+      if (isHAEnabled) {\n+        return super.run(args);\n+      }\n+      System.out.println(\"Cannot run \" + cmd\n+          + \" when ResourceManager HA is not enabled\");\n+      return -1;\n     }\n \n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n-        printUsage(cmd);\n+        printUsage(cmd, isHAEnabled);\n         return exitCode;\n       }\n     }\n     \n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n-        printUsage(\"\");\n-        printUsage(\"\");\n+        printUsage(\"\", isHAEnabled);\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n-      printUsage(cmd);\n+      printUsage(cmd, isHAEnabled);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    YarnConfiguration yarnConf \u003d\n        getConf() \u003d\u003d null ? new YarnConfiguration() : new YarnConfiguration(\n            getConf());\n    boolean isHAEnabled \u003d\n        yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,\n            YarnConfiguration.DEFAULT_RM_HA_ENABLED);\n\n    if (args.length \u003c 1) {\n      printUsage(\"\", isHAEnabled);\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i], isHAEnabled);\n      } else {\n        printHelp(\"\", isHAEnabled);\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      if (isHAEnabled) {\n        return super.run(args);\n      }\n      System.out.println(\"Cannot run \" + cmd\n          + \" when ResourceManager HA is not enabled\");\n      return -1;\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd, isHAEnabled);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\", isHAEnabled);\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd, isHAEnabled);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "03510d00f48137fe4273c3e694e87fc0e660a706": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1068. Add admin support for HA operations (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1536888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/13 2:03 PM",
      "commitName": "03510d00f48137fe4273c3e694e87fc0e660a706",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "22/10/13 9:10 PM",
      "commitNameOld": "776deafb4c7b623f02ae1e31d5ba80e14726d665",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,85 @@\n   public int run(String[] args) throws Exception {\n     if (args.length \u003c 1) {\n       printUsage(\"\");\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n+\n+    exitCode \u003d 0;\n+    if (\"-help\".equals(cmd)) {\n+      if (i \u003c args.length) {\n+        printUsage(args[i]);\n+      } else {\n+        printHelp(\"\");\n+      }\n+      return exitCode;\n+    }\n+\n+    if (USAGE.containsKey(cmd)) {\n+      return super.run(args);\n+    }\n+\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n     \n-    exitCode \u003d 0;\n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n       } else if (\"-getGroups\".equals(cmd)) {\n         String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n         exitCode \u003d getGroups(usernames);\n-      } else if (\"-help\".equals(cmd)) {\n-        if (i \u003c args.length) {\n-          printUsage(args[i]);\n-        } else {\n-          printHelp(\"\");\n-        }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n         printUsage(\"\");\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n\n    exitCode \u003d 0;\n    if (\"-help\".equals(cmd)) {\n      if (i \u003c args.length) {\n        printUsage(args[i]);\n      } else {\n        printHelp(\"\");\n      }\n      return exitCode;\n    }\n\n    if (USAGE.containsKey(cmd)) {\n      return super.run(args);\n    }\n\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    \n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "ac0bbb750f3cc9baa1145c250e083006bf83cd87": {
      "type": "Yfilerename",
      "commitMessage": "YARN-823. Moved RMAdmin from yarn.client to yarn.client.cli and renamed it to be RMAdminCLI. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 2:42 PM",
      "commitName": "ac0bbb750f3cc9baa1145c250e083006bf83cd87",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 2:34 PM",
      "commitNameOld": "4aa7503342272556c83f924fb82df61b332b96c3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    \n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/RMAdmin.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java"
      }
    },
    "494e21052156a7c5abedbbee824578837ad8cc11": {
      "type": "Yfilerename",
      "commitMessage": "YARN-127. Move RMAdmin tool to its correct location - the client module. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1395781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 2:21 PM",
      "commitName": "494e21052156a7c5abedbbee824578837ad8cc11",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/10/12 1:50 PM",
      "commitNameOld": "49b20c2ed1be55c90a057acea71b55a28a3f69fb",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    \n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/RMAdmin.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/RMAdmin.java"
      }
    },
    "d52494228998db61683e486d19899e223cd85fa2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-53. Added the missing getGroups API to ResourceManager. Contributed by Bo Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1389176 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/12 5:51 PM",
      "commitName": "d52494228998db61683e486d19899e223cd85fa2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 46.81,
      "commitsBetweenForRepo": 262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,77 @@\n   public int run(String[] args) throws Exception {\n     if (args.length \u003c 1) {\n       printUsage(\"\");\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n         \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n-\n+    \n     exitCode \u003d 0;\n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n       } else if (\"-refreshServiceAcl\".equals(cmd)) {\n         exitCode \u003d refreshServiceAcls();\n+      } else if (\"-getGroups\".equals(cmd)) {\n+        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n+        exitCode \u003d getGroups(usernames);\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c args.length) {\n           printUsage(args[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n         printUsage(\"\");\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n    \n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-getGroups\".equals(cmd)) {\n        String[] usernames \u003d Arrays.copyOfRange(args, i, args.length);\n        exitCode \u003d getGroups(usernames);\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java"
      }
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,74 @@\n   public int run(String[] args) throws Exception {\n     if (args.length \u003c 1) {\n       printUsage(\"\");\n       return -1;\n     }\n \n     int exitCode \u003d -1;\n     int i \u003d 0;\n     String cmd \u003d args[i++];\n     //\n     // verify that we have enough command line parameters\n     //\n     if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n-        \"-refreshNodes\".equals(cmd) ||\n+        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n         \"-refreshUserToGroupsMappings\".equals(cmd) ||\n         \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n       if (args.length !\u003d 1) {\n         printUsage(cmd);\n         return exitCode;\n       }\n     }\n \n     exitCode \u003d 0;\n     try {\n       if (\"-refreshQueues\".equals(cmd)) {\n         exitCode \u003d refreshQueues();\n       } else if (\"-refreshNodes\".equals(cmd)) {\n         exitCode \u003d refreshNodes();\n       } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n         exitCode \u003d refreshUserToGroupsMappings();\n       } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n         exitCode \u003d refreshSuperUserGroupsConfiguration();\n       } else if (\"-refreshAdminAcls\".equals(cmd)) {\n         exitCode \u003d refreshAdminAcls();\n+      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n+        exitCode \u003d refreshServiceAcls();\n       } else if (\"-help\".equals(cmd)) {\n         if (i \u003c args.length) {\n           printUsage(args[i]);\n         } else {\n           printHelp(\"\");\n         }\n       } else {\n         exitCode \u003d -1;\n         System.err.println(cmd.substring(1) + \": Unknown command\");\n         printUsage(\"\");\n         printUsage(\"\");\n       }\n \n     } catch (IllegalArgumentException arge) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n       printUsage(cmd);\n     } catch (RemoteException e) {\n       //\n       // This is a error returned by hadoop server. Print\n       // out the first line of the error mesage, ignore the stack trace.\n       exitCode \u003d -1;\n       try {\n         String[] content;\n         content \u003d e.getLocalizedMessage().split(\"\\n\");\n         System.err.println(cmd.substring(1) + \": \"\n                            + content[0]);\n       } catch (Exception ex) {\n         System.err.println(cmd.substring(1) + \": \"\n                            + ex.getLocalizedMessage());\n       }\n     } catch (Exception e) {\n       exitCode \u003d -1;\n       System.err.println(cmd.substring(1) + \": \"\n                          + e.getLocalizedMessage());\n     }\n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-refreshServiceAcl\".equals(cmd)) {\n        exitCode \u003d refreshServiceAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,72 @@\n-    public void run() {\n-      final int MAX_RETRIES \u003d 3;\n-      int remainingRetries \u003d MAX_RETRIES;\n-      // get current flag value and reset it as well\n-      boolean sendProgress \u003d resetProgressFlag();\n-      while (!taskDone.get()) {\n-        try {\n-          boolean taskFound \u003d true; // whether TT knows about this task\n-          // sleep for a bit\n-          try {\n-            Thread.sleep(PROGRESS_INTERVAL);\n-          } \n-          catch (InterruptedException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n-                        \"since it got interrupted\");\n-            }\n-            break;\n-          }\n+  public int run(String[] args) throws Exception {\n+    if (args.length \u003c 1) {\n+      printUsage(\"\");\n+      return -1;\n+    }\n \n-          if (sendProgress) {\n-            // we need to send progress update\n-            updateCounters();\n-            taskStatus.statusUpdate(taskProgress.get(),\n-                                    taskProgress.toString(), \n-                                    counters);\n-            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n-            taskStatus.clearStatus();\n-          }\n-          else {\n-            // send ping \n-            taskFound \u003d umbilical.ping(taskId);\n-          }\n-\n-          // if Task Tracker is not aware of our task ID (probably because it died and \n-          // came back up), kill ourselves\n-          if (!taskFound) {\n-            LOG.warn(\"Parent died.  Exiting \"+taskId);\n-            System.exit(66);\n-          }\n-\n-          sendProgress \u003d resetProgressFlag(); \n-          remainingRetries \u003d MAX_RETRIES;\n-        } \n-        catch (Throwable t) {\n-          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n-          remainingRetries -\u003d1;\n-          if (remainingRetries \u003d\u003d 0) {\n-            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n-            LOG.warn(\"Last retry, killing \"+taskId);\n-            System.exit(65);\n-          }\n-        }\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d args[i++];\n+    //\n+    // verify that we have enough command line parameters\n+    //\n+    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n+        \"-refreshNodes\".equals(cmd) ||\n+        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n+        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+      if (args.length !\u003d 1) {\n+        printUsage(cmd);\n+        return exitCode;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+\n+    exitCode \u003d 0;\n+    try {\n+      if (\"-refreshQueues\".equals(cmd)) {\n+        exitCode \u003d refreshQueues();\n+      } else if (\"-refreshNodes\".equals(cmd)) {\n+        exitCode \u003d refreshNodes();\n+      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n+        exitCode \u003d refreshUserToGroupsMappings();\n+      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+        exitCode \u003d refreshSuperUserGroupsConfiguration();\n+      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n+        exitCode \u003d refreshAdminAcls();\n+      } else if (\"-help\".equals(cmd)) {\n+        if (i \u003c args.length) {\n+          printUsage(args[i]);\n+        } else {\n+          printHelp(\"\");\n+        }\n+      } else {\n+        exitCode \u003d -1;\n+        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage(\"\");\n+        printUsage(\"\");\n+      }\n+\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error mesage, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + content[0]);\n+      } catch (Exception ex) {\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + ex.getLocalizedMessage());\n+      }\n+    } catch (Exception e) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \"\n+                         + e.getLocalizedMessage());\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,72 @@\n-    public void run() {\n-      final int MAX_RETRIES \u003d 3;\n-      int remainingRetries \u003d MAX_RETRIES;\n-      // get current flag value and reset it as well\n-      boolean sendProgress \u003d resetProgressFlag();\n-      while (!taskDone.get()) {\n-        try {\n-          boolean taskFound \u003d true; // whether TT knows about this task\n-          // sleep for a bit\n-          try {\n-            Thread.sleep(PROGRESS_INTERVAL);\n-          } \n-          catch (InterruptedException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n-                        \"since it got interrupted\");\n-            }\n-            break;\n-          }\n+  public int run(String[] args) throws Exception {\n+    if (args.length \u003c 1) {\n+      printUsage(\"\");\n+      return -1;\n+    }\n \n-          if (sendProgress) {\n-            // we need to send progress update\n-            updateCounters();\n-            taskStatus.statusUpdate(taskProgress.get(),\n-                                    taskProgress.toString(), \n-                                    counters);\n-            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n-            taskStatus.clearStatus();\n-          }\n-          else {\n-            // send ping \n-            taskFound \u003d umbilical.ping(taskId);\n-          }\n-\n-          // if Task Tracker is not aware of our task ID (probably because it died and \n-          // came back up), kill ourselves\n-          if (!taskFound) {\n-            LOG.warn(\"Parent died.  Exiting \"+taskId);\n-            System.exit(66);\n-          }\n-\n-          sendProgress \u003d resetProgressFlag(); \n-          remainingRetries \u003d MAX_RETRIES;\n-        } \n-        catch (Throwable t) {\n-          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n-          remainingRetries -\u003d1;\n-          if (remainingRetries \u003d\u003d 0) {\n-            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n-            LOG.warn(\"Last retry, killing \"+taskId);\n-            System.exit(65);\n-          }\n-        }\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d args[i++];\n+    //\n+    // verify that we have enough command line parameters\n+    //\n+    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n+        \"-refreshNodes\".equals(cmd) ||\n+        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n+        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+      if (args.length !\u003d 1) {\n+        printUsage(cmd);\n+        return exitCode;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+\n+    exitCode \u003d 0;\n+    try {\n+      if (\"-refreshQueues\".equals(cmd)) {\n+        exitCode \u003d refreshQueues();\n+      } else if (\"-refreshNodes\".equals(cmd)) {\n+        exitCode \u003d refreshNodes();\n+      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n+        exitCode \u003d refreshUserToGroupsMappings();\n+      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+        exitCode \u003d refreshSuperUserGroupsConfiguration();\n+      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n+        exitCode \u003d refreshAdminAcls();\n+      } else if (\"-help\".equals(cmd)) {\n+        if (i \u003c args.length) {\n+          printUsage(args[i]);\n+        } else {\n+          printHelp(\"\");\n+        }\n+      } else {\n+        exitCode \u003d -1;\n+        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage(\"\");\n+        printUsage(\"\");\n+      }\n+\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error mesage, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + content[0]);\n+      } catch (Exception ex) {\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + ex.getLocalizedMessage());\n+      }\n+    } catch (Exception e) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \"\n+                         + e.getLocalizedMessage());\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,72 @@\n-    public void run() {\n-      final int MAX_RETRIES \u003d 3;\n-      int remainingRetries \u003d MAX_RETRIES;\n-      // get current flag value and reset it as well\n-      boolean sendProgress \u003d resetProgressFlag();\n-      while (!taskDone.get()) {\n-        try {\n-          boolean taskFound \u003d true; // whether TT knows about this task\n-          // sleep for a bit\n-          try {\n-            Thread.sleep(PROGRESS_INTERVAL);\n-          } \n-          catch (InterruptedException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n-                        \"since it got interrupted\");\n-            }\n-            break;\n-          }\n+  public int run(String[] args) throws Exception {\n+    if (args.length \u003c 1) {\n+      printUsage(\"\");\n+      return -1;\n+    }\n \n-          if (sendProgress) {\n-            // we need to send progress update\n-            updateCounters();\n-            taskStatus.statusUpdate(taskProgress.get(),\n-                                    taskProgress.toString(), \n-                                    counters);\n-            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n-            taskStatus.clearStatus();\n-          }\n-          else {\n-            // send ping \n-            taskFound \u003d umbilical.ping(taskId);\n-          }\n-\n-          // if Task Tracker is not aware of our task ID (probably because it died and \n-          // came back up), kill ourselves\n-          if (!taskFound) {\n-            LOG.warn(\"Parent died.  Exiting \"+taskId);\n-            System.exit(66);\n-          }\n-\n-          sendProgress \u003d resetProgressFlag(); \n-          remainingRetries \u003d MAX_RETRIES;\n-        } \n-        catch (Throwable t) {\n-          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n-          remainingRetries -\u003d1;\n-          if (remainingRetries \u003d\u003d 0) {\n-            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n-            LOG.warn(\"Last retry, killing \"+taskId);\n-            System.exit(65);\n-          }\n-        }\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d args[i++];\n+    //\n+    // verify that we have enough command line parameters\n+    //\n+    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n+        \"-refreshNodes\".equals(cmd) ||\n+        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n+        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+      if (args.length !\u003d 1) {\n+        printUsage(cmd);\n+        return exitCode;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+\n+    exitCode \u003d 0;\n+    try {\n+      if (\"-refreshQueues\".equals(cmd)) {\n+        exitCode \u003d refreshQueues();\n+      } else if (\"-refreshNodes\".equals(cmd)) {\n+        exitCode \u003d refreshNodes();\n+      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n+        exitCode \u003d refreshUserToGroupsMappings();\n+      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+        exitCode \u003d refreshSuperUserGroupsConfiguration();\n+      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n+        exitCode \u003d refreshAdminAcls();\n+      } else if (\"-help\".equals(cmd)) {\n+        if (i \u003c args.length) {\n+          printUsage(args[i]);\n+        } else {\n+          printHelp(\"\");\n+        }\n+      } else {\n+        exitCode \u003d -1;\n+        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage(\"\");\n+        printUsage(\"\");\n+      }\n+\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error mesage, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + content[0]);\n+      } catch (Exception ex) {\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + ex.getLocalizedMessage());\n+      }\n+    } catch (Exception e) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \"\n+                         + e.getLocalizedMessage());\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,72 @@\n-    public void run() {\n-      final int MAX_RETRIES \u003d 3;\n-      int remainingRetries \u003d MAX_RETRIES;\n-      // get current flag value and reset it as well\n-      boolean sendProgress \u003d resetProgressFlag();\n-      while (!taskDone.get()) {\n-        try {\n-          boolean taskFound \u003d true; // whether TT knows about this task\n-          // sleep for a bit\n-          try {\n-            Thread.sleep(PROGRESS_INTERVAL);\n-          } \n-          catch (InterruptedException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n-                        \"since it got interrupted\");\n-            }\n-            break;\n-          }\n+  public int run(String[] args) throws Exception {\n+    if (args.length \u003c 1) {\n+      printUsage(\"\");\n+      return -1;\n+    }\n \n-          if (sendProgress) {\n-            // we need to send progress update\n-            updateCounters();\n-            taskStatus.statusUpdate(taskProgress.get(),\n-                                    taskProgress.toString(), \n-                                    counters);\n-            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n-            taskStatus.clearStatus();\n-          }\n-          else {\n-            // send ping \n-            taskFound \u003d umbilical.ping(taskId);\n-          }\n-\n-          // if Task Tracker is not aware of our task ID (probably because it died and \n-          // came back up), kill ourselves\n-          if (!taskFound) {\n-            LOG.warn(\"Parent died.  Exiting \"+taskId);\n-            System.exit(66);\n-          }\n-\n-          sendProgress \u003d resetProgressFlag(); \n-          remainingRetries \u003d MAX_RETRIES;\n-        } \n-        catch (Throwable t) {\n-          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n-          remainingRetries -\u003d1;\n-          if (remainingRetries \u003d\u003d 0) {\n-            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n-            LOG.warn(\"Last retry, killing \"+taskId);\n-            System.exit(65);\n-          }\n-        }\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d args[i++];\n+    //\n+    // verify that we have enough command line parameters\n+    //\n+    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n+        \"-refreshNodes\".equals(cmd) ||\n+        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n+        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+      if (args.length !\u003d 1) {\n+        printUsage(cmd);\n+        return exitCode;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+\n+    exitCode \u003d 0;\n+    try {\n+      if (\"-refreshQueues\".equals(cmd)) {\n+        exitCode \u003d refreshQueues();\n+      } else if (\"-refreshNodes\".equals(cmd)) {\n+        exitCode \u003d refreshNodes();\n+      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n+        exitCode \u003d refreshUserToGroupsMappings();\n+      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+        exitCode \u003d refreshSuperUserGroupsConfiguration();\n+      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n+        exitCode \u003d refreshAdminAcls();\n+      } else if (\"-help\".equals(cmd)) {\n+        if (i \u003c args.length) {\n+          printUsage(args[i]);\n+        } else {\n+          printHelp(\"\");\n+        }\n+      } else {\n+        exitCode \u003d -1;\n+        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage(\"\");\n+        printUsage(\"\");\n+      }\n+\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error mesage, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + content[0]);\n+      } catch (Exception ex) {\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + ex.getLocalizedMessage());\n+      }\n+    } catch (Exception e) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \"\n+                         + e.getLocalizedMessage());\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,72 @@\n-    public void run() {\n-      final int MAX_RETRIES \u003d 3;\n-      int remainingRetries \u003d MAX_RETRIES;\n-      // get current flag value and reset it as well\n-      boolean sendProgress \u003d resetProgressFlag();\n-      while (!taskDone.get()) {\n-        try {\n-          boolean taskFound \u003d true; // whether TT knows about this task\n-          // sleep for a bit\n-          try {\n-            Thread.sleep(PROGRESS_INTERVAL);\n-          } \n-          catch (InterruptedException e) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n-                        \"since it got interrupted\");\n-            }\n-            break;\n-          }\n+  public int run(String[] args) throws Exception {\n+    if (args.length \u003c 1) {\n+      printUsage(\"\");\n+      return -1;\n+    }\n \n-          if (sendProgress) {\n-            // we need to send progress update\n-            updateCounters();\n-            taskStatus.statusUpdate(taskProgress.get(),\n-                                    taskProgress.toString(), \n-                                    counters);\n-            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n-            taskStatus.clearStatus();\n-          }\n-          else {\n-            // send ping \n-            taskFound \u003d umbilical.ping(taskId);\n-          }\n-\n-          // if Task Tracker is not aware of our task ID (probably because it died and \n-          // came back up), kill ourselves\n-          if (!taskFound) {\n-            LOG.warn(\"Parent died.  Exiting \"+taskId);\n-            System.exit(66);\n-          }\n-\n-          sendProgress \u003d resetProgressFlag(); \n-          remainingRetries \u003d MAX_RETRIES;\n-        } \n-        catch (Throwable t) {\n-          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n-          remainingRetries -\u003d1;\n-          if (remainingRetries \u003d\u003d 0) {\n-            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n-            LOG.warn(\"Last retry, killing \"+taskId);\n-            System.exit(65);\n-          }\n-        }\n+    int exitCode \u003d -1;\n+    int i \u003d 0;\n+    String cmd \u003d args[i++];\n+    //\n+    // verify that we have enough command line parameters\n+    //\n+    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n+        \"-refreshNodes\".equals(cmd) ||\n+        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n+        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+      if (args.length !\u003d 1) {\n+        printUsage(cmd);\n+        return exitCode;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+\n+    exitCode \u003d 0;\n+    try {\n+      if (\"-refreshQueues\".equals(cmd)) {\n+        exitCode \u003d refreshQueues();\n+      } else if (\"-refreshNodes\".equals(cmd)) {\n+        exitCode \u003d refreshNodes();\n+      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n+        exitCode \u003d refreshUserToGroupsMappings();\n+      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n+        exitCode \u003d refreshSuperUserGroupsConfiguration();\n+      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n+        exitCode \u003d refreshAdminAcls();\n+      } else if (\"-help\".equals(cmd)) {\n+        if (i \u003c args.length) {\n+          printUsage(args[i]);\n+        } else {\n+          printHelp(\"\");\n+        }\n+      } else {\n+        exitCode \u003d -1;\n+        System.err.println(cmd.substring(1) + \": Unknown command\");\n+        printUsage(\"\");\n+        printUsage(\"\");\n+      }\n+\n+    } catch (IllegalArgumentException arge) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n+      printUsage(cmd);\n+    } catch (RemoteException e) {\n+      //\n+      // This is a error returned by hadoop server. Print\n+      // out the first line of the error mesage, ignore the stack trace.\n+      exitCode \u003d -1;\n+      try {\n+        String[] content;\n+        content \u003d e.getLocalizedMessage().split(\"\\n\");\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + content[0]);\n+      } catch (Exception ex) {\n+        System.err.println(cmd.substring(1) + \": \"\n+                           + ex.getLocalizedMessage());\n+      }\n+    } catch (Exception e) {\n+      exitCode \u003d -1;\n+      System.err.println(cmd.substring(1) + \": \"\n+                         + e.getLocalizedMessage());\n+    }\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws Exception {\n    if (args.length \u003c 1) {\n      printUsage(\"\");\n      return -1;\n    }\n\n    int exitCode \u003d -1;\n    int i \u003d 0;\n    String cmd \u003d args[i++];\n    //\n    // verify that we have enough command line parameters\n    //\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) ||\n        \"-refreshNodes\".equals(cmd) ||\n        \"-refreshUserToGroupsMappings\".equals(cmd) ||\n        \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n      if (args.length !\u003d 1) {\n        printUsage(cmd);\n        return exitCode;\n      }\n    }\n\n    exitCode \u003d 0;\n    try {\n      if (\"-refreshQueues\".equals(cmd)) {\n        exitCode \u003d refreshQueues();\n      } else if (\"-refreshNodes\".equals(cmd)) {\n        exitCode \u003d refreshNodes();\n      } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\n        exitCode \u003d refreshUserToGroupsMappings();\n      } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\n        exitCode \u003d refreshSuperUserGroupsConfiguration();\n      } else if (\"-refreshAdminAcls\".equals(cmd)) {\n        exitCode \u003d refreshAdminAcls();\n      } else if (\"-help\".equals(cmd)) {\n        if (i \u003c args.length) {\n          printUsage(args[i]);\n        } else {\n          printHelp(\"\");\n        }\n      } else {\n        exitCode \u003d -1;\n        System.err.println(cmd.substring(1) + \": Unknown command\");\n        printUsage(\"\");\n        printUsage(\"\");\n      }\n\n    } catch (IllegalArgumentException arge) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\n      printUsage(cmd);\n    } catch (RemoteException e) {\n      //\n      // This is a error returned by hadoop server. Print\n      // out the first line of the error mesage, ignore the stack trace.\n      exitCode \u003d -1;\n      try {\n        String[] content;\n        content \u003d e.getLocalizedMessage().split(\"\\n\");\n        System.err.println(cmd.substring(1) + \": \"\n                           + content[0]);\n      } catch (Exception ex) {\n        System.err.println(cmd.substring(1) + \": \"\n                           + ex.getLocalizedMessage());\n      }\n    } catch (Exception e) {\n      exitCode \u003d -1;\n      System.err.println(cmd.substring(1) + \": \"\n                         + e.getLocalizedMessage());\n    }\n    return exitCode;\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/tools/RMAdmin.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[args-String[]]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,55 @@\n+    public void run() {\n+      final int MAX_RETRIES \u003d 3;\n+      int remainingRetries \u003d MAX_RETRIES;\n+      // get current flag value and reset it as well\n+      boolean sendProgress \u003d resetProgressFlag();\n+      while (!taskDone.get()) {\n+        try {\n+          boolean taskFound \u003d true; // whether TT knows about this task\n+          // sleep for a bit\n+          try {\n+            Thread.sleep(PROGRESS_INTERVAL);\n+          } \n+          catch (InterruptedException e) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n+                        \"since it got interrupted\");\n+            }\n+            break;\n+          }\n+\n+          if (sendProgress) {\n+            // we need to send progress update\n+            updateCounters();\n+            taskStatus.statusUpdate(taskProgress.get(),\n+                                    taskProgress.toString(), \n+                                    counters);\n+            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n+            taskStatus.clearStatus();\n+          }\n+          else {\n+            // send ping \n+            taskFound \u003d umbilical.ping(taskId);\n+          }\n+\n+          // if Task Tracker is not aware of our task ID (probably because it died and \n+          // came back up), kill ourselves\n+          if (!taskFound) {\n+            LOG.warn(\"Parent died.  Exiting \"+taskId);\n+            System.exit(66);\n+          }\n+\n+          sendProgress \u003d resetProgressFlag(); \n+          remainingRetries \u003d MAX_RETRIES;\n+        } \n+        catch (Throwable t) {\n+          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n+          remainingRetries -\u003d1;\n+          if (remainingRetries \u003d\u003d 0) {\n+            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n+            LOG.warn(\"Last retry, killing \"+taskId);\n+            System.exit(65);\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      final int MAX_RETRIES \u003d 3;\n      int remainingRetries \u003d MAX_RETRIES;\n      // get current flag value and reset it as well\n      boolean sendProgress \u003d resetProgressFlag();\n      while (!taskDone.get()) {\n        try {\n          boolean taskFound \u003d true; // whether TT knows about this task\n          // sleep for a bit\n          try {\n            Thread.sleep(PROGRESS_INTERVAL);\n          } \n          catch (InterruptedException e) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getTaskID() + \" Progress/ping thread exiting \" +\n                        \"since it got interrupted\");\n            }\n            break;\n          }\n\n          if (sendProgress) {\n            // we need to send progress update\n            updateCounters();\n            taskStatus.statusUpdate(taskProgress.get(),\n                                    taskProgress.toString(), \n                                    counters);\n            taskFound \u003d umbilical.statusUpdate(taskId, taskStatus);\n            taskStatus.clearStatus();\n          }\n          else {\n            // send ping \n            taskFound \u003d umbilical.ping(taskId);\n          }\n\n          // if Task Tracker is not aware of our task ID (probably because it died and \n          // came back up), kill ourselves\n          if (!taskFound) {\n            LOG.warn(\"Parent died.  Exiting \"+taskId);\n            System.exit(66);\n          }\n\n          sendProgress \u003d resetProgressFlag(); \n          remainingRetries \u003d MAX_RETRIES;\n        } \n        catch (Throwable t) {\n          LOG.info(\"Communication exception: \" + StringUtils.stringifyException(t));\n          remainingRetries -\u003d1;\n          if (remainingRetries \u003d\u003d 0) {\n            ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);\n            LOG.warn(\"Last retry, killing \"+taskId);\n            System.exit(65);\n          }\n        }\n      }\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java"
    }
  }
}