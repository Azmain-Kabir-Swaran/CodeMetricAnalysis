{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemRMStateStore.java",
  "functionName": "startInternal",
  "functionId": "startInternal",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
  "functionStartLine": 146,
  "functionEndLine": 167,
  "numCommitsSeen": 57,
  "timeTaken": 4198,
  "changeHistory": [
    "285d2c07531a92067368ac4bdd21d309e6e81bc4",
    "b733a6f86262522e535cebc972baecbe6a6eab50",
    "f271d377357ad680924d19f07e6c8315e7c89bae",
    "9acd24fec408c182683968ae2c75ca2c38866a60",
    "9a2a9553eee454ecd18120535d3e845f86fc3584",
    "3bc72cc16d8c7b8addd8f565523001dfcc32b891",
    "01a1621930df17a745dd37892996c68fca3447d1",
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
    "9c95015bb47f362e592393f0cec899fd8fdd3b04",
    "487ce6c7bc87819659602a4d930bc50d31f5d022",
    "ad0011a3405fee6c6e45996d39557e0f8d420633"
  ],
  "changeHistoryShort": {
    "285d2c07531a92067368ac4bdd21d309e6e81bc4": "Ybodychange",
    "b733a6f86262522e535cebc972baecbe6a6eab50": "Ybodychange",
    "f271d377357ad680924d19f07e6c8315e7c89bae": "Ybodychange",
    "9acd24fec408c182683968ae2c75ca2c38866a60": "Ybodychange",
    "9a2a9553eee454ecd18120535d3e845f86fc3584": "Ybodychange",
    "3bc72cc16d8c7b8addd8f565523001dfcc32b891": "Ybodychange",
    "01a1621930df17a745dd37892996c68fca3447d1": "Ybodychange",
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe": "Ybodychange",
    "9c95015bb47f362e592393f0cec899fd8fdd3b04": "Ybodychange",
    "487ce6c7bc87819659602a4d930bc50d31f5d022": "Ymodifierchange",
    "ad0011a3405fee6c6e45996d39557e0f8d420633": "Yintroduced"
  },
  "changeHistoryDetails": {
    "285d2c07531a92067368ac4bdd21d309e6e81bc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8449. RM HA for AM web server HTTPS Support. (Contributed by Robert Kanter)\n",
      "commitDate": "18/10/18 9:24 PM",
      "commitName": "285d2c07531a92067368ac4bdd21d309e6e81bc4",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "02/05/18 5:23 PM",
      "commitNameOld": "e6a80e476d4348a4373e6dd5792d70edff16516f",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 169.17,
      "commitsBetweenForRepo": 1401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     fsConf \u003d new Configuration(getConfig());\n \n     String scheme \u003d fsWorkingPath.toUri().getScheme();\n     if (scheme \u003d\u003d null) {\n       scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n     }\n     if (scheme !\u003d null) {\n       String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n       fsConf.setBoolean(disableCacheName, true);\n     }\n \n     fs \u003d fsWorkingPath.getFileSystem(fsConf);\n     mkdirsWithRetries(rmDTSecretManagerRoot);\n     mkdirsWithRetries(rmAppRoot);\n     mkdirsWithRetries(amrmTokenSecretManagerRoot);\n     mkdirsWithRetries(reservationRoot);\n+    mkdirsWithRetries(proxyCARoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fsConf \u003d new Configuration(getConfig());\n\n    String scheme \u003d fsWorkingPath.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n      fsConf.setBoolean(disableCacheName, true);\n    }\n\n    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n    mkdirsWithRetries(reservationRoot);\n    mkdirsWithRetries(proxyCARoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "b733a6f86262522e535cebc972baecbe6a6eab50": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5718. TimelineClient (and other places in YARN) shouldn\u0027t over-write HDFS client retry settings which could cause unexpected behavior. Contributed by Junping Du.\n",
      "commitDate": "18/10/16 11:06 AM",
      "commitName": "b733a6f86262522e535cebc972baecbe6a6eab50",
      "commitAuthor": "Xuan",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 259.66,
      "commitsBetweenForRepo": 1825,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,21 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     fsConf \u003d new Configuration(getConfig());\n-    fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n-    String retryPolicy \u003d\n-        fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n-          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n-    fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n     String scheme \u003d fsWorkingPath.toUri().getScheme();\n     if (scheme \u003d\u003d null) {\n       scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n     }\n     if (scheme !\u003d null) {\n       String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n       fsConf.setBoolean(disableCacheName, true);\n     }\n \n     fs \u003d fsWorkingPath.getFileSystem(fsConf);\n     mkdirsWithRetries(rmDTSecretManagerRoot);\n     mkdirsWithRetries(rmAppRoot);\n     mkdirsWithRetries(amrmTokenSecretManagerRoot);\n     mkdirsWithRetries(reservationRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fsConf \u003d new Configuration(getConfig());\n\n    String scheme \u003d fsWorkingPath.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n      fsConf.setBoolean(disableCacheName, true);\n    }\n\n    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n    mkdirsWithRetries(reservationRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "f271d377357ad680924d19f07e6c8315e7c89bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)\n",
      "commitDate": "05/08/15 12:57 PM",
      "commitName": "f271d377357ad680924d19f07e6c8315e7c89bae",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "28/05/15 3:25 PM",
      "commitNameOld": "9acd24fec408c182683968ae2c75ca2c38866a60",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 68.9,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     fsConf \u003d new Configuration(getConfig());\n     fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n     String retryPolicy \u003d\n         fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n           YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n     fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n     String scheme \u003d fsWorkingPath.toUri().getScheme();\n     if (scheme \u003d\u003d null) {\n       scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n     }\n     if (scheme !\u003d null) {\n       String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n       fsConf.setBoolean(disableCacheName, true);\n     }\n \n     fs \u003d fsWorkingPath.getFileSystem(fsConf);\n     mkdirsWithRetries(rmDTSecretManagerRoot);\n     mkdirsWithRetries(rmAppRoot);\n     mkdirsWithRetries(amrmTokenSecretManagerRoot);\n+    mkdirsWithRetries(reservationRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fsConf \u003d new Configuration(getConfig());\n    fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    String scheme \u003d fsWorkingPath.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n      fsConf.setBoolean(disableCacheName, true);\n    }\n\n    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n    mkdirsWithRetries(reservationRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9acd24fec408c182683968ae2c75ca2c38866a60": {
      "type": "Ybodychange",
      "commitMessage": "Fixed more FilesSystemRMStateStore issues. Contributed by Vinod Kumar Vavilapalli.\n",
      "commitDate": "28/05/15 3:25 PM",
      "commitName": "9acd24fec408c182683968ae2c75ca2c38866a60",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/05/15 4:59 PM",
      "commitNameOld": "7401e5b5e8060b6b027d714b5ceb641fcfe5b598",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 8.94,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     fsConf \u003d new Configuration(getConfig());\n     fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n     String retryPolicy \u003d\n         fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n           YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n     fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n     String scheme \u003d fsWorkingPath.toUri().getScheme();\n     if (scheme \u003d\u003d null) {\n       scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n     }\n     if (scheme !\u003d null) {\n       String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n       fsConf.setBoolean(disableCacheName, true);\n     }\n \n     fs \u003d fsWorkingPath.getFileSystem(fsConf);\n-    isHDFS \u003d fs.getScheme().toLowerCase().contains(\"hdfs\");\n     mkdirsWithRetries(rmDTSecretManagerRoot);\n     mkdirsWithRetries(rmAppRoot);\n     mkdirsWithRetries(amrmTokenSecretManagerRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fsConf \u003d new Configuration(getConfig());\n    fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    String scheme \u003d fsWorkingPath.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n      fsConf.setBoolean(disableCacheName, true);\n    }\n\n    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9a2a9553eee454ecd18120535d3e845f86fc3584": {
      "type": "Ybodychange",
      "commitMessage": "Fixing HDFS state-store. Contributed by Arun Suresh.\n",
      "commitDate": "14/05/15 4:13 PM",
      "commitName": "9a2a9553eee454ecd18120535d3e845f86fc3584",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/04/15 5:51 PM",
      "commitNameOld": "e71d0d87d9b388f211a8eb3d2cd9af347abf9bda",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 22.93,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     fsConf \u003d new Configuration(getConfig());\n     fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n     String retryPolicy \u003d\n         fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n           YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n     fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n     String scheme \u003d fsWorkingPath.toUri().getScheme();\n     if (scheme \u003d\u003d null) {\n       scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n     }\n     if (scheme !\u003d null) {\n       String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n       fsConf.setBoolean(disableCacheName, true);\n     }\n \n     fs \u003d fsWorkingPath.getFileSystem(fsConf);\n+    isHDFS \u003d fs.getScheme().toLowerCase().contains(\"hdfs\");\n     mkdirsWithRetries(rmDTSecretManagerRoot);\n     mkdirsWithRetries(rmAppRoot);\n     mkdirsWithRetries(amrmTokenSecretManagerRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fsConf \u003d new Configuration(getConfig());\n    fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    String scheme \u003d fsWorkingPath.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n      fsConf.setBoolean(disableCacheName, true);\n    }\n\n    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n    isHDFS \u003d fs.getScheme().toLowerCase().contains(\"hdfs\");\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "3bc72cc16d8c7b8addd8f565523001dfcc32b891": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3205. FileSystemRMStateStore should disable FileSystem Cache to avoid get a Filesystem with an old configuration. Contributed by Zhihai Xu.\n",
      "commitDate": "17/03/15 7:53 PM",
      "commitName": "3bc72cc16d8c7b8addd8f565523001dfcc32b891",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "27/02/15 7:56 AM",
      "commitNameOld": "01a1621930df17a745dd37892996c68fca3447d1",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 18.46,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,25 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n-    Configuration conf \u003d new Configuration(getConfig());\n-    conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n+    fsConf \u003d new Configuration(getConfig());\n+    fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n     String retryPolicy \u003d\n-        conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n+        fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n           YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n-    conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n+    fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n-    fs \u003d fsWorkingPath.getFileSystem(conf);\n+    String scheme \u003d fsWorkingPath.toUri().getScheme();\n+    if (scheme \u003d\u003d null) {\n+      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n+    }\n+    if (scheme !\u003d null) {\n+      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n+      fsConf.setBoolean(disableCacheName, true);\n+    }\n+\n+    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n     mkdirsWithRetries(rmDTSecretManagerRoot);\n     mkdirsWithRetries(rmAppRoot);\n     mkdirsWithRetries(amrmTokenSecretManagerRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fsConf \u003d new Configuration(getConfig());\n    fsConf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        fsConf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    fsConf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    String scheme \u003d fsWorkingPath.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(fsConf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\", scheme);\n      fsConf.setBoolean(disableCacheName, true);\n    }\n\n    fs \u003d fsWorkingPath.getFileSystem(fsConf);\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "01a1621930df17a745dd37892996c68fca3447d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2820. Retry in FileSystemRMStateStore when FS\u0027s operations fail due to IOException. Contributed by Zhihai Xu.\n",
      "commitDate": "27/02/15 7:56 AM",
      "commitName": "01a1621930df17a745dd37892996c68fca3447d1",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "08/01/15 9:47 AM",
      "commitNameOld": "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 49.92,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     Configuration conf \u003d new Configuration(getConfig());\n     conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n     String retryPolicy \u003d\n         conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n           YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n     conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n     fs \u003d fsWorkingPath.getFileSystem(conf);\n-    fs.mkdirs(rmDTSecretManagerRoot);\n-    fs.mkdirs(rmAppRoot);\n-    fs.mkdirs(amrmTokenSecretManagerRoot);\n+    mkdirsWithRetries(rmDTSecretManagerRoot);\n+    mkdirsWithRetries(rmAppRoot);\n+    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    Configuration conf \u003d new Configuration(getConfig());\n    conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    fs \u003d fsWorkingPath.getFileSystem(conf);\n    mkdirsWithRetries(rmDTSecretManagerRoot);\n    mkdirsWithRetries(rmAppRoot);\n    mkdirsWithRetries(amrmTokenSecretManagerRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "d4fec3493351c619a0278929ae2d5c8cd67cbfbe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2211. Persist AMRMToken master key in RMStateStore for RM recovery. Contributed by Xuan Gong\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 1:42 PM",
      "commitName": "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/07/14 12:58 PM",
      "commitNameOld": "8fbca62a9008306249779367af1d3c329f875552",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     Configuration conf \u003d new Configuration(getConfig());\n     conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n     String retryPolicy \u003d\n         conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n           YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n     conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n \n     fs \u003d fsWorkingPath.getFileSystem(conf);\n     fs.mkdirs(rmDTSecretManagerRoot);\n     fs.mkdirs(rmAppRoot);\n+    fs.mkdirs(amrmTokenSecretManagerRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    Configuration conf \u003d new Configuration(getConfig());\n    conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    fs \u003d fsWorkingPath.getFileSystem(conf);\n    fs.mkdirs(rmDTSecretManagerRoot);\n    fs.mkdirs(rmAppRoot);\n    fs.mkdirs(amrmTokenSecretManagerRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9c95015bb47f362e592393f0cec899fd8fdd3b04": {
      "type": "Ybodychange",
      "commitMessage": "YARN-895. Changed RM state-store to not crash immediately if RM restarts while the state-store is down. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547538 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/13 11:28 AM",
      "commitName": "9c95015bb47f362e592393f0cec899fd8fdd3b04",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/11/13 3:22 PM",
      "commitNameOld": "6369c8d81972a9a0b6ef41f4508fcb60d34e3d78",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.84,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,15 @@\n   protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n-    fs \u003d fsWorkingPath.getFileSystem(getConfig());\n+    Configuration conf \u003d new Configuration(getConfig());\n+    conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n+    String retryPolicy \u003d\n+        conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n+          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n+    conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n+\n+    fs \u003d fsWorkingPath.getFileSystem(conf);\n     fs.mkdirs(rmDTSecretManagerRoot);\n     fs.mkdirs(rmAppRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    Configuration conf \u003d new Configuration(getConfig());\n    conf.setBoolean(\"dfs.client.retry.policy.enabled\", true);\n    String retryPolicy \u003d\n        conf.get(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,\n          YarnConfiguration.DEFAULT_FS_RM_STATE_STORE_RETRY_POLICY_SPEC);\n    conf.set(\"dfs.client.retry.policy.spec\", retryPolicy);\n\n    fs \u003d fsWorkingPath.getFileSystem(conf);\n    fs.mkdirs(rmDTSecretManagerRoot);\n    fs.mkdirs(rmAppRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "487ce6c7bc87819659602a4d930bc50d31f5d022": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1082. Addendum patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516352 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 6:19 PM",
      "commitName": "487ce6c7bc87819659602a4d930bc50d31f5d022",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "21/08/13 4:55 PM",
      "commitNameOld": "ad0011a3405fee6c6e45996d39557e0f8d420633",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n-  protected void startInternal() throws Exception {\n+  protected synchronized void startInternal() throws Exception {\n     // create filesystem only now, as part of service-start. By this time, RM is\n     // authenticated with kerberos so we are good to create a file-system\n     // handle.\n     fs \u003d fsWorkingPath.getFileSystem(getConfig());\n     fs.mkdirs(rmDTSecretManagerRoot);\n     fs.mkdirs(rmAppRoot);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fs \u003d fsWorkingPath.getFileSystem(getConfig());\n    fs.mkdirs(rmDTSecretManagerRoot);\n    fs.mkdirs(rmAppRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[protected, synchronized]"
      }
    },
    "ad0011a3405fee6c6e45996d39557e0f8d420633": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1082. Create base directories on HDFS after RM login to ensure RM recovery doesn\u0027t fail in secure mode. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516337 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 4:55 PM",
      "commitName": "ad0011a3405fee6c6e45996d39557e0f8d420633",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,8 @@\n+  protected void startInternal() throws Exception {\n+    // create filesystem only now, as part of service-start. By this time, RM is\n+    // authenticated with kerberos so we are good to create a file-system\n+    // handle.\n+    fs \u003d fsWorkingPath.getFileSystem(getConfig());\n+    fs.mkdirs(rmDTSecretManagerRoot);\n+    fs.mkdirs(rmAppRoot);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startInternal() throws Exception {\n    // create filesystem only now, as part of service-start. By this time, RM is\n    // authenticated with kerberos so we are good to create a file-system\n    // handle.\n    fs \u003d fsWorkingPath.getFileSystem(getConfig());\n    fs.mkdirs(rmDTSecretManagerRoot);\n    fs.mkdirs(rmAppRoot);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java"
    }
  }
}