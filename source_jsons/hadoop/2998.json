{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtilClient.java",
  "functionName": "connectToDN",
  "functionId": "connectToDN___dn-DatanodeInfo__timeout-int__conf-Configuration__saslClient-SaslDataTransferClient__socketFactory-SocketFactory__connectToDnViaHostname-boolean__dekFactory-DataEncryptionKeyFactory__blockToken-Token__BlockTokenIdentifier__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
  "functionStartLine": 869,
  "functionEndLine": 906,
  "numCommitsSeen": 44,
  "timeTaken": 1595,
  "changeHistory": [
    "e4a25456202feeee9880d822a8e6f9c19cbcf24a",
    "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6"
  ],
  "changeHistoryShort": {
    "e4a25456202feeee9880d822a8e6f9c19cbcf24a": "Ybodychange",
    "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4a25456202feeee9880d822a8e6f9c19cbcf24a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9805. Add server-side configuration for enabling TCP_NODELAY for DataTransferProtocol and default it to true (Gary Helmling via cmccabe)\n",
      "commitDate": "29/06/16 12:41 PM",
      "commitName": "e4a25456202feeee9880d822a8e6f9c19cbcf24a",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "03/06/16 4:48 PM",
      "commitNameOld": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 25.83,
      "commitsBetweenForRepo": 205,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public static IOStreamPair connectToDN(DatanodeInfo dn, int timeout,\n                                          Configuration conf,\n                                          SaslDataTransferClient saslClient,\n                                          SocketFactory socketFactory,\n                                          boolean connectToDnViaHostname,\n                                          DataEncryptionKeyFactory dekFactory,\n                                          Token\u003cBlockTokenIdentifier\u003e blockToken)\n       throws IOException {\n \n     boolean success \u003d false;\n     Socket sock \u003d null;\n     try {\n       sock \u003d socketFactory.createSocket();\n       String dnAddr \u003d dn.getXferAddr(connectToDnViaHostname);\n       LOG.debug(\"Connecting to datanode {}\", dnAddr);\n       NetUtils.connect(sock, NetUtils.createSocketAddr(dnAddr), timeout);\n+      sock.setTcpNoDelay(getClientDataTransferTcpNoDelay(conf));\n       sock.setSoTimeout(timeout);\n \n       OutputStream unbufOut \u003d NetUtils.getOutputStream(sock);\n       InputStream unbufIn \u003d NetUtils.getInputStream(sock);\n       IOStreamPair pair \u003d saslClient.newSocketSend(sock, unbufOut,\n           unbufIn, dekFactory, blockToken, dn);\n \n       IOStreamPair result \u003d new IOStreamPair(\n           new DataInputStream(pair.in),\n           new DataOutputStream(new BufferedOutputStream(pair.out,\n               DFSUtilClient.getSmallBufferSize(conf)))\n       );\n \n       success \u003d true;\n       return result;\n     } finally {\n       if (!success) {\n         IOUtils.closeSocket(sock);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOStreamPair connectToDN(DatanodeInfo dn, int timeout,\n                                         Configuration conf,\n                                         SaslDataTransferClient saslClient,\n                                         SocketFactory socketFactory,\n                                         boolean connectToDnViaHostname,\n                                         DataEncryptionKeyFactory dekFactory,\n                                         Token\u003cBlockTokenIdentifier\u003e blockToken)\n      throws IOException {\n\n    boolean success \u003d false;\n    Socket sock \u003d null;\n    try {\n      sock \u003d socketFactory.createSocket();\n      String dnAddr \u003d dn.getXferAddr(connectToDnViaHostname);\n      LOG.debug(\"Connecting to datanode {}\", dnAddr);\n      NetUtils.connect(sock, NetUtils.createSocketAddr(dnAddr), timeout);\n      sock.setTcpNoDelay(getClientDataTransferTcpNoDelay(conf));\n      sock.setSoTimeout(timeout);\n\n      OutputStream unbufOut \u003d NetUtils.getOutputStream(sock);\n      InputStream unbufIn \u003d NetUtils.getInputStream(sock);\n      IOStreamPair pair \u003d saslClient.newSocketSend(sock, unbufOut,\n          unbufIn, dekFactory, blockToken, dn);\n\n      IOStreamPair result \u003d new IOStreamPair(\n          new DataInputStream(pair.in),\n          new DataOutputStream(new BufferedOutputStream(pair.out,\n              DFSUtilClient.getSmallBufferSize(conf)))\n      );\n\n      success \u003d true;\n      return result;\n    } finally {\n      if (!success) {\n        IOUtils.closeSocket(sock);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {}
    },
    "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9733. Refactor DFSClient#getFileChecksum and DataXceiver#blockChecksum. Contributed by Kai Zheng\n",
      "commitDate": "29/02/16 9:52 PM",
      "commitName": "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,37 @@\n+  public static IOStreamPair connectToDN(DatanodeInfo dn, int timeout,\n+                                         Configuration conf,\n+                                         SaslDataTransferClient saslClient,\n+                                         SocketFactory socketFactory,\n+                                         boolean connectToDnViaHostname,\n+                                         DataEncryptionKeyFactory dekFactory,\n+                                         Token\u003cBlockTokenIdentifier\u003e blockToken)\n+      throws IOException {\n+\n+    boolean success \u003d false;\n+    Socket sock \u003d null;\n+    try {\n+      sock \u003d socketFactory.createSocket();\n+      String dnAddr \u003d dn.getXferAddr(connectToDnViaHostname);\n+      LOG.debug(\"Connecting to datanode {}\", dnAddr);\n+      NetUtils.connect(sock, NetUtils.createSocketAddr(dnAddr), timeout);\n+      sock.setSoTimeout(timeout);\n+\n+      OutputStream unbufOut \u003d NetUtils.getOutputStream(sock);\n+      InputStream unbufIn \u003d NetUtils.getInputStream(sock);\n+      IOStreamPair pair \u003d saslClient.newSocketSend(sock, unbufOut,\n+          unbufIn, dekFactory, blockToken, dn);\n+\n+      IOStreamPair result \u003d new IOStreamPair(\n+          new DataInputStream(pair.in),\n+          new DataOutputStream(new BufferedOutputStream(pair.out,\n+              DFSUtilClient.getSmallBufferSize(conf)))\n+      );\n+\n+      success \u003d true;\n+      return result;\n+    } finally {\n+      if (!success) {\n+        IOUtils.closeSocket(sock);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOStreamPair connectToDN(DatanodeInfo dn, int timeout,\n                                         Configuration conf,\n                                         SaslDataTransferClient saslClient,\n                                         SocketFactory socketFactory,\n                                         boolean connectToDnViaHostname,\n                                         DataEncryptionKeyFactory dekFactory,\n                                         Token\u003cBlockTokenIdentifier\u003e blockToken)\n      throws IOException {\n\n    boolean success \u003d false;\n    Socket sock \u003d null;\n    try {\n      sock \u003d socketFactory.createSocket();\n      String dnAddr \u003d dn.getXferAddr(connectToDnViaHostname);\n      LOG.debug(\"Connecting to datanode {}\", dnAddr);\n      NetUtils.connect(sock, NetUtils.createSocketAddr(dnAddr), timeout);\n      sock.setSoTimeout(timeout);\n\n      OutputStream unbufOut \u003d NetUtils.getOutputStream(sock);\n      InputStream unbufIn \u003d NetUtils.getInputStream(sock);\n      IOStreamPair pair \u003d saslClient.newSocketSend(sock, unbufOut,\n          unbufIn, dekFactory, blockToken, dn);\n\n      IOStreamPair result \u003d new IOStreamPair(\n          new DataInputStream(pair.in),\n          new DataOutputStream(new BufferedOutputStream(pair.out,\n              DFSUtilClient.getSmallBufferSize(conf)))\n      );\n\n      success \u003d true;\n      return result;\n    } finally {\n      if (!success) {\n        IOUtils.closeSocket(sock);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java"
    }
  }
}