{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DateSplitter.java",
  "functionName": "split",
  "functionId": "split___conf-Configuration__results-ResultSet__colName-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java",
  "functionStartLine": 50,
  "functionEndLine": 127,
  "numCommitsSeen": 4,
  "timeTaken": 4370,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n      throws SQLException {\n\n    long minVal;\n    long maxVal;\n\n    int sqlDataType \u003d results.getMetaData().getColumnType(1);\n    minVal \u003d resultSetColToLong(results, 1, sqlDataType);\n    maxVal \u003d resultSetColToLong(results, 2, sqlDataType);\n\n    String lowClausePrefix \u003d colName + \" \u003e\u003d \";\n    String highClausePrefix \u003d colName + \" \u003c \";\n\n    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n    if (numSplits \u003c 1) {\n      numSplits \u003d 1;\n    }\n\n    if (minVal \u003d\u003d Long.MIN_VALUE \u0026\u0026 maxVal \u003d\u003d Long.MIN_VALUE) {\n      // The range of acceptable dates is NULL to NULL. Just create a single split.\n      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n      return splits;\n    }\n\n    // Gather the split point integers\n    List\u003cLong\u003e splitPoints \u003d split(numSplits, minVal, maxVal);\n    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n\n    // Turn the split points into a set of intervals.\n    long start \u003d splitPoints.get(0);\n    Date startDate \u003d longToDate(start, sqlDataType);\n    if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n      // The lower bound\u0027s nanos value needs to match the actual lower-bound nanos.\n      try {\n        ((java.sql.Timestamp) startDate).setNanos(results.getTimestamp(1).getNanos());\n      } catch (NullPointerException npe) {\n        // If the lower bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n      }\n    }\n\n    for (int i \u003d 1; i \u003c splitPoints.size(); i++) {\n      long end \u003d splitPoints.get(i);\n      Date endDate \u003d longToDate(end, sqlDataType);\n\n      if (i \u003d\u003d splitPoints.size() - 1) {\n        if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n          // The upper bound\u0027s nanos value needs to match the actual upper-bound nanos.\n          try {\n            ((java.sql.Timestamp) endDate).setNanos(results.getTimestamp(2).getNanos());\n          } catch (NullPointerException npe) {\n            // If the upper bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n          }\n        }\n        // This is the last one; use a closed interval.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + dateToString(startDate),\n            colName + \" \u003c\u003d \" + dateToString(endDate)));\n      } else {\n        // Normal open-interval case.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + dateToString(startDate),\n            highClausePrefix + dateToString(endDate)));\n      }\n\n      start \u003d end;\n      startDate \u003d endDate;\n    }\n\n    if (minVal \u003d\u003d Long.MIN_VALUE || maxVal \u003d\u003d Long.MIN_VALUE) {\n      // Add an extra split to handle the null case that we saw.\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n    }\n\n    return splits;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n      throws SQLException {\n\n    long minVal;\n    long maxVal;\n\n    int sqlDataType \u003d results.getMetaData().getColumnType(1);\n    minVal \u003d resultSetColToLong(results, 1, sqlDataType);\n    maxVal \u003d resultSetColToLong(results, 2, sqlDataType);\n\n    String lowClausePrefix \u003d colName + \" \u003e\u003d \";\n    String highClausePrefix \u003d colName + \" \u003c \";\n\n    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n    if (numSplits \u003c 1) {\n      numSplits \u003d 1;\n    }\n\n    if (minVal \u003d\u003d Long.MIN_VALUE \u0026\u0026 maxVal \u003d\u003d Long.MIN_VALUE) {\n      // The range of acceptable dates is NULL to NULL. Just create a single split.\n      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n      return splits;\n    }\n\n    // Gather the split point integers\n    List\u003cLong\u003e splitPoints \u003d split(numSplits, minVal, maxVal);\n    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n\n    // Turn the split points into a set of intervals.\n    long start \u003d splitPoints.get(0);\n    Date startDate \u003d longToDate(start, sqlDataType);\n    if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n      // The lower bound\u0027s nanos value needs to match the actual lower-bound nanos.\n      try {\n        ((java.sql.Timestamp) startDate).setNanos(results.getTimestamp(1).getNanos());\n      } catch (NullPointerException npe) {\n        // If the lower bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n      }\n    }\n\n    for (int i \u003d 1; i \u003c splitPoints.size(); i++) {\n      long end \u003d splitPoints.get(i);\n      Date endDate \u003d longToDate(end, sqlDataType);\n\n      if (i \u003d\u003d splitPoints.size() - 1) {\n        if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n          // The upper bound\u0027s nanos value needs to match the actual upper-bound nanos.\n          try {\n            ((java.sql.Timestamp) endDate).setNanos(results.getTimestamp(2).getNanos());\n          } catch (NullPointerException npe) {\n            // If the upper bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n          }\n        }\n        // This is the last one; use a closed interval.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + dateToString(startDate),\n            colName + \" \u003c\u003d \" + dateToString(endDate)));\n      } else {\n        // Normal open-interval case.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + dateToString(startDate),\n            highClausePrefix + dateToString(endDate)));\n      }\n\n      start \u003d end;\n      startDate \u003d endDate;\n    }\n\n    if (minVal \u003d\u003d Long.MIN_VALUE || maxVal \u003d\u003d Long.MIN_VALUE) {\n      // Add an extra split to handle the null case that we saw.\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n    }\n\n    return splits;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,78 @@\n+  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n+      throws SQLException {\n+\n+    long minVal;\n+    long maxVal;\n+\n+    int sqlDataType \u003d results.getMetaData().getColumnType(1);\n+    minVal \u003d resultSetColToLong(results, 1, sqlDataType);\n+    maxVal \u003d resultSetColToLong(results, 2, sqlDataType);\n+\n+    String lowClausePrefix \u003d colName + \" \u003e\u003d \";\n+    String highClausePrefix \u003d colName + \" \u003c \";\n+\n+    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n+    if (numSplits \u003c 1) {\n+      numSplits \u003d 1;\n+    }\n+\n+    if (minVal \u003d\u003d Long.MIN_VALUE \u0026\u0026 maxVal \u003d\u003d Long.MIN_VALUE) {\n+      // The range of acceptable dates is NULL to NULL. Just create a single split.\n+      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n+      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+          colName + \" IS NULL\", colName + \" IS NULL\"));\n+      return splits;\n+    }\n+\n+    // Gather the split point integers\n+    List\u003cLong\u003e splitPoints \u003d split(numSplits, minVal, maxVal);\n+    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n+\n+    // Turn the split points into a set of intervals.\n+    long start \u003d splitPoints.get(0);\n+    Date startDate \u003d longToDate(start, sqlDataType);\n+    if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n+      // The lower bound\u0027s nanos value needs to match the actual lower-bound nanos.\n+      try {\n+        ((java.sql.Timestamp) startDate).setNanos(results.getTimestamp(1).getNanos());\n+      } catch (NullPointerException npe) {\n+        // If the lower bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n+      }\n+    }\n+\n+    for (int i \u003d 1; i \u003c splitPoints.size(); i++) {\n+      long end \u003d splitPoints.get(i);\n+      Date endDate \u003d longToDate(end, sqlDataType);\n+\n+      if (i \u003d\u003d splitPoints.size() - 1) {\n+        if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n+          // The upper bound\u0027s nanos value needs to match the actual upper-bound nanos.\n+          try {\n+            ((java.sql.Timestamp) endDate).setNanos(results.getTimestamp(2).getNanos());\n+          } catch (NullPointerException npe) {\n+            // If the upper bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n+          }\n+        }\n+        // This is the last one; use a closed interval.\n+        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+            lowClausePrefix + dateToString(startDate),\n+            colName + \" \u003c\u003d \" + dateToString(endDate)));\n+      } else {\n+        // Normal open-interval case.\n+        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+            lowClausePrefix + dateToString(startDate),\n+            highClausePrefix + dateToString(endDate)));\n+      }\n+\n+      start \u003d end;\n+      startDate \u003d endDate;\n+    }\n+\n+    if (minVal \u003d\u003d Long.MIN_VALUE || maxVal \u003d\u003d Long.MIN_VALUE) {\n+      // Add an extra split to handle the null case that we saw.\n+      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+          colName + \" IS NULL\", colName + \" IS NULL\"));\n+    }\n+\n+    return splits;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n      throws SQLException {\n\n    long minVal;\n    long maxVal;\n\n    int sqlDataType \u003d results.getMetaData().getColumnType(1);\n    minVal \u003d resultSetColToLong(results, 1, sqlDataType);\n    maxVal \u003d resultSetColToLong(results, 2, sqlDataType);\n\n    String lowClausePrefix \u003d colName + \" \u003e\u003d \";\n    String highClausePrefix \u003d colName + \" \u003c \";\n\n    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n    if (numSplits \u003c 1) {\n      numSplits \u003d 1;\n    }\n\n    if (minVal \u003d\u003d Long.MIN_VALUE \u0026\u0026 maxVal \u003d\u003d Long.MIN_VALUE) {\n      // The range of acceptable dates is NULL to NULL. Just create a single split.\n      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n      return splits;\n    }\n\n    // Gather the split point integers\n    List\u003cLong\u003e splitPoints \u003d split(numSplits, minVal, maxVal);\n    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n\n    // Turn the split points into a set of intervals.\n    long start \u003d splitPoints.get(0);\n    Date startDate \u003d longToDate(start, sqlDataType);\n    if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n      // The lower bound\u0027s nanos value needs to match the actual lower-bound nanos.\n      try {\n        ((java.sql.Timestamp) startDate).setNanos(results.getTimestamp(1).getNanos());\n      } catch (NullPointerException npe) {\n        // If the lower bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n      }\n    }\n\n    for (int i \u003d 1; i \u003c splitPoints.size(); i++) {\n      long end \u003d splitPoints.get(i);\n      Date endDate \u003d longToDate(end, sqlDataType);\n\n      if (i \u003d\u003d splitPoints.size() - 1) {\n        if (sqlDataType \u003d\u003d Types.TIMESTAMP) {\n          // The upper bound\u0027s nanos value needs to match the actual upper-bound nanos.\n          try {\n            ((java.sql.Timestamp) endDate).setNanos(results.getTimestamp(2).getNanos());\n          } catch (NullPointerException npe) {\n            // If the upper bound was NULL, we\u0027ll get an NPE; just ignore it and don\u0027t set nanos.\n          }\n        }\n        // This is the last one; use a closed interval.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + dateToString(startDate),\n            colName + \" \u003c\u003d \" + dateToString(endDate)));\n      } else {\n        // Normal open-interval case.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + dateToString(startDate),\n            highClausePrefix + dateToString(endDate)));\n      }\n\n      start \u003d end;\n      startDate \u003d endDate;\n    }\n\n    if (minVal \u003d\u003d Long.MIN_VALUE || maxVal \u003d\u003d Long.MIN_VALUE) {\n      // Add an extra split to handle the null case that we saw.\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n    }\n\n    return splits;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/DateSplitter.java"
    }
  }
}