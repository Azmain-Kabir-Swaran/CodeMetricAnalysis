{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaKeyStoreProvider.java",
  "functionName": "deleteKey",
  "functionId": "deleteKey___name-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
  "functionStartLine": 463,
  "functionEndLine": 493,
  "numCommitsSeen": 26,
  "timeTaken": 996,
  "changeHistory": [
    "98a98ea0c57d01b875b820f53d43dbf885d07711",
    "77306291643838ed7b57b99d6497553314a525f2"
  ],
  "changeHistoryShort": {
    "98a98ea0c57d01b875b820f53d43dbf885d07711": "Ybodychange",
    "77306291643838ed7b57b99d6497553314a525f2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "98a98ea0c57d01b875b820f53d43dbf885d07711": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10427. KeyProvider implementations should be thread safe. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/14 12:43 PM",
      "commitName": "98a98ea0c57d01b875b820f53d43dbf885d07711",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/03/14 8:57 AM",
      "commitNameOld": "92b9c6ff60bcfb270fc4d8631dcba2a3762212c2",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 12.16,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   public void deleteKey(String name) throws IOException {\n-    Metadata meta \u003d getMetadata(name);\n-    if (meta \u003d\u003d null) {\n-      throw new IOException(\"Key \" + name + \" does not exist in \" + this);\n-    }\n-    for(int v\u003d0; v \u003c meta.getVersions(); ++v) {\n-      String versionName \u003d buildVersionName(name, v);\n+    writeLock.lock();\n+    try {\n+      Metadata meta \u003d getMetadata(name);\n+      if (meta \u003d\u003d null) {\n+        throw new IOException(\"Key \" + name + \" does not exist in \" + this);\n+      }\n+      for(int v\u003d0; v \u003c meta.getVersions(); ++v) {\n+        String versionName \u003d buildVersionName(name, v);\n+        try {\n+          if (keyStore.containsAlias(versionName)) {\n+            keyStore.deleteEntry(versionName);\n+          }\n+        } catch (KeyStoreException e) {\n+          throw new IOException(\"Problem removing \" + versionName + \" from \" +\n+              this, e);\n+        }\n+      }\n       try {\n-        if (keyStore.containsAlias(versionName)) {\n-          keyStore.deleteEntry(versionName);\n+        if (keyStore.containsAlias(name)) {\n+          keyStore.deleteEntry(name);\n         }\n       } catch (KeyStoreException e) {\n-        throw new IOException(\"Problem removing \" + versionName + \" from \" +\n-            this, e);\n+        throw new IOException(\"Problem removing \" + name + \" from \" + this, e);\n       }\n+      cache.remove(name);\n+      changed \u003d true;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    try {\n-      if (keyStore.containsAlias(name)) {\n-        keyStore.deleteEntry(name);\n-      }\n-    } catch (KeyStoreException e) {\n-      throw new IOException(\"Problem removing \" + name + \" from \" + this, e);\n-    }\n-    cache.remove(name);\n-    changed \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteKey(String name) throws IOException {\n    writeLock.lock();\n    try {\n      Metadata meta \u003d getMetadata(name);\n      if (meta \u003d\u003d null) {\n        throw new IOException(\"Key \" + name + \" does not exist in \" + this);\n      }\n      for(int v\u003d0; v \u003c meta.getVersions(); ++v) {\n        String versionName \u003d buildVersionName(name, v);\n        try {\n          if (keyStore.containsAlias(versionName)) {\n            keyStore.deleteEntry(versionName);\n          }\n        } catch (KeyStoreException e) {\n          throw new IOException(\"Problem removing \" + versionName + \" from \" +\n              this, e);\n        }\n      }\n      try {\n        if (keyStore.containsAlias(name)) {\n          keyStore.deleteEntry(name);\n        }\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Problem removing \" + name + \" from \" + this, e);\n      }\n      cache.remove(name);\n      changed \u003d true;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "77306291643838ed7b57b99d6497553314a525f2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10141. Create KeyProvider API to separate encryption key storage\nfrom the applications. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552462 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/13 4:25 PM",
      "commitName": "77306291643838ed7b57b99d6497553314a525f2",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,26 @@\n+  public void deleteKey(String name) throws IOException {\n+    Metadata meta \u003d getMetadata(name);\n+    if (meta \u003d\u003d null) {\n+      throw new IOException(\"Key \" + name + \" does not exist in \" + this);\n+    }\n+    for(int v\u003d0; v \u003c meta.getVersions(); ++v) {\n+      String versionName \u003d buildVersionName(name, v);\n+      try {\n+        if (keyStore.containsAlias(versionName)) {\n+          keyStore.deleteEntry(versionName);\n+        }\n+      } catch (KeyStoreException e) {\n+        throw new IOException(\"Problem removing \" + versionName + \" from \" +\n+            this, e);\n+      }\n+    }\n+    try {\n+      if (keyStore.containsAlias(name)) {\n+        keyStore.deleteEntry(name);\n+      }\n+    } catch (KeyStoreException e) {\n+      throw new IOException(\"Problem removing \" + name + \" from \" + this, e);\n+    }\n+    cache.remove(name);\n+    changed \u003d true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void deleteKey(String name) throws IOException {\n    Metadata meta \u003d getMetadata(name);\n    if (meta \u003d\u003d null) {\n      throw new IOException(\"Key \" + name + \" does not exist in \" + this);\n    }\n    for(int v\u003d0; v \u003c meta.getVersions(); ++v) {\n      String versionName \u003d buildVersionName(name, v);\n      try {\n        if (keyStore.containsAlias(versionName)) {\n          keyStore.deleteEntry(versionName);\n        }\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Problem removing \" + versionName + \" from \" +\n            this, e);\n      }\n    }\n    try {\n      if (keyStore.containsAlias(name)) {\n        keyStore.deleteEntry(name);\n      }\n    } catch (KeyStoreException e) {\n      throw new IOException(\"Problem removing \" + name + \" from \" + this, e);\n    }\n    cache.remove(name);\n    changed \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java"
    }
  }
}