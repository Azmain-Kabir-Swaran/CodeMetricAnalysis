{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDownload.java",
  "functionName": "unpack",
  "functionId": "unpack___source-Path__destination-Path__sourceFileSystem-FileSystem__destinationFileSystem-FileSystem",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
  "functionStartLine": 328,
  "functionEndLine": 390,
  "numCommitsSeen": 104,
  "timeTaken": 14255,
  "changeHistory": [
    "7288b08330001102f944124d18e02bf0585d3e96",
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "7acce7d3648d6f1e45ce280e2147e7dedf5693fc",
    "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
    "c02dd9aa4b7e6dce4549f124ee636a99ff96ea67",
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "7288b08330001102f944124d18e02bf0585d3e96": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "7acce7d3648d6f1e45ce280e2147e7dedf5693fc": "Ybodychange",
    "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15": "Ymultichange(Yparameterchange,Ybodychange)",
    "c02dd9aa4b7e6dce4549f124ee636a99ff96ea67": "Ybodychange",
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7288b08330001102f944124d18e02bf0585d3e96": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "31/01/18 7:39 AM",
      "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "31/01/18 7:39 AM",
          "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "30/01/18 6:34 AM",
          "commitNameOld": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[localrsrc-File, dst-File]",
            "newValue": "[source-Path, destination-Path, sourceFileSystem-FileSystem, destinationFileSystem-FileSystem]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "31/01/18 7:39 AM",
          "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "30/01/18 6:34 AM",
          "commitNameOld": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "long",
            "newValue": "void"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "31/01/18 7:39 AM",
          "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "30/01/18 6:34 AM",
          "commitNameOld": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, InterruptedException, ExecutionException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "31/01/18 7:39 AM",
          "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "30/01/18 6:34 AM",
          "commitNameOld": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 1.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {}
        }
      ]
    },
    "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
      "commitDate": "30/01/18 6:34 AM",
      "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
          "commitDate": "30/01/18 6:34 AM",
          "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "26/01/18 11:25 AM",
          "commitNameOld": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 3.8,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,72 @@\n-  private void unpack(Path source, Path destination,\n-                      FileSystem sourceFileSystem,\n-                      FileSystem destinationFileSystem)\n-      throws IOException, InterruptedException, ExecutionException {\n-    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n-      File dst \u003d new File(destination.toUri());\n+  private long unpack(File localrsrc, File dst) throws IOException {\n+    switch (resource.getType()) {\n+    case ARCHIVE: {\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      switch (resource.getType()) {\n-      case ARCHIVE:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+            throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n         }\n-        break;\n-      case PATTERN:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          String p \u003d resource.getPattern();\n-          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n-          }\n-          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n-              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n-        }\n-        break;\n-      case FILE:\n-      default:\n-        try (OutputStream outputStream \u003d\n-                 destinationFileSystem.create(destination, true)) {\n-          IOUtils.copy(inputStream, outputStream);\n-        }\n-        break;\n       }\n-      // TODO Should calculate here before returning\n-      //return FileUtil.getDU(destDir);\n     }\n+    break;\n+    case PATTERN: {\n+      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n+      if (lowerDst.endsWith(\".jar\")) {\n+        String p \u003d resource.getPattern();\n+        RunJar.unJar(localrsrc, dst,\n+            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        File newDst \u003d new File(dst, dst.getName());\n+        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        }\n+        if (!localrsrc.renameTo(newDst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + newDst + \"]\");\n+        }\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \t\t\"was specified as PATTERN\");\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \"was specified as PATTERN\");\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+    }\n+    break;\n+    case FILE:\n+    default:\n+      if (!localrsrc.renameTo(dst)) {\n+        throw new IOException(\"Unable to rename file: [\" + localrsrc\n+          + \"] to [\" + dst + \"]\");\n+      }\n+      break;\n+    }\n+    if(localrsrc.isFile()){\n+      try {\n+        files.delete(new Path(localrsrc.toString()), false);\n+      } catch (IOException ignore) {\n+      }\n+    }\n+    return 0;\n+    // TODO Should calculate here before returning\n+    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[source-Path, destination-Path, sourceFileSystem-FileSystem, destinationFileSystem-FileSystem]",
            "newValue": "[localrsrc-File, dst-File]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
          "commitDate": "30/01/18 6:34 AM",
          "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "26/01/18 11:25 AM",
          "commitNameOld": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 3.8,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,72 @@\n-  private void unpack(Path source, Path destination,\n-                      FileSystem sourceFileSystem,\n-                      FileSystem destinationFileSystem)\n-      throws IOException, InterruptedException, ExecutionException {\n-    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n-      File dst \u003d new File(destination.toUri());\n+  private long unpack(File localrsrc, File dst) throws IOException {\n+    switch (resource.getType()) {\n+    case ARCHIVE: {\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      switch (resource.getType()) {\n-      case ARCHIVE:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+            throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n         }\n-        break;\n-      case PATTERN:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          String p \u003d resource.getPattern();\n-          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n-          }\n-          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n-              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n-        }\n-        break;\n-      case FILE:\n-      default:\n-        try (OutputStream outputStream \u003d\n-                 destinationFileSystem.create(destination, true)) {\n-          IOUtils.copy(inputStream, outputStream);\n-        }\n-        break;\n       }\n-      // TODO Should calculate here before returning\n-      //return FileUtil.getDU(destDir);\n     }\n+    break;\n+    case PATTERN: {\n+      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n+      if (lowerDst.endsWith(\".jar\")) {\n+        String p \u003d resource.getPattern();\n+        RunJar.unJar(localrsrc, dst,\n+            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        File newDst \u003d new File(dst, dst.getName());\n+        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        }\n+        if (!localrsrc.renameTo(newDst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + newDst + \"]\");\n+        }\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \t\t\"was specified as PATTERN\");\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \"was specified as PATTERN\");\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+    }\n+    break;\n+    case FILE:\n+    default:\n+      if (!localrsrc.renameTo(dst)) {\n+        throw new IOException(\"Unable to rename file: [\" + localrsrc\n+          + \"] to [\" + dst + \"]\");\n+      }\n+      break;\n+    }\n+    if(localrsrc.isFile()){\n+      try {\n+        files.delete(new Path(localrsrc.toString()), false);\n+      } catch (IOException ignore) {\n+      }\n+    }\n+    return 0;\n+    // TODO Should calculate here before returning\n+    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "long"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
          "commitDate": "30/01/18 6:34 AM",
          "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "26/01/18 11:25 AM",
          "commitNameOld": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 3.8,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,72 @@\n-  private void unpack(Path source, Path destination,\n-                      FileSystem sourceFileSystem,\n-                      FileSystem destinationFileSystem)\n-      throws IOException, InterruptedException, ExecutionException {\n-    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n-      File dst \u003d new File(destination.toUri());\n+  private long unpack(File localrsrc, File dst) throws IOException {\n+    switch (resource.getType()) {\n+    case ARCHIVE: {\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      switch (resource.getType()) {\n-      case ARCHIVE:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+            throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n         }\n-        break;\n-      case PATTERN:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          String p \u003d resource.getPattern();\n-          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n-          }\n-          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n-              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n-        }\n-        break;\n-      case FILE:\n-      default:\n-        try (OutputStream outputStream \u003d\n-                 destinationFileSystem.create(destination, true)) {\n-          IOUtils.copy(inputStream, outputStream);\n-        }\n-        break;\n       }\n-      // TODO Should calculate here before returning\n-      //return FileUtil.getDU(destDir);\n     }\n+    break;\n+    case PATTERN: {\n+      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n+      if (lowerDst.endsWith(\".jar\")) {\n+        String p \u003d resource.getPattern();\n+        RunJar.unJar(localrsrc, dst,\n+            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        File newDst \u003d new File(dst, dst.getName());\n+        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        }\n+        if (!localrsrc.renameTo(newDst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + newDst + \"]\");\n+        }\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \t\t\"was specified as PATTERN\");\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \"was specified as PATTERN\");\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+    }\n+    break;\n+    case FILE:\n+    default:\n+      if (!localrsrc.renameTo(dst)) {\n+        throw new IOException(\"Unable to rename file: [\" + localrsrc\n+          + \"] to [\" + dst + \"]\");\n+      }\n+      break;\n+    }\n+    if(localrsrc.isFile()){\n+      try {\n+        files.delete(new Path(localrsrc.toString()), false);\n+      } catch (IOException ignore) {\n+      }\n+    }\n+    return 0;\n+    // TODO Should calculate here before returning\n+    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[IOException, InterruptedException, ExecutionException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\"\n\nThis reverts commit 1b0f265db1a5bfccf1d870912237ea9618bd9c34.\n",
          "commitDate": "30/01/18 6:34 AM",
          "commitName": "901d15a30b9fc6c7015f4e2e2c06e6ee42a39662",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "26/01/18 11:25 AM",
          "commitNameOld": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 3.8,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,72 @@\n-  private void unpack(Path source, Path destination,\n-                      FileSystem sourceFileSystem,\n-                      FileSystem destinationFileSystem)\n-      throws IOException, InterruptedException, ExecutionException {\n-    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n-      File dst \u003d new File(destination.toUri());\n+  private long unpack(File localrsrc, File dst) throws IOException {\n+    switch (resource.getType()) {\n+    case ARCHIVE: {\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      switch (resource.getType()) {\n-      case ARCHIVE:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+            throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n         }\n-        break;\n-      case PATTERN:\n-        if (lowerDst.endsWith(\".jar\")) {\n-          String p \u003d resource.getPattern();\n-          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n-          }\n-          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n-              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        } else if (lowerDst.endsWith(\".zip\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unZip(inputStream, dst);\n-        } else if (lowerDst.endsWith(\".tar.gz\") ||\n-            lowerDst.endsWith(\".tgz\") ||\n-            lowerDst.endsWith(\".tar\")) {\n-          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n-              \"was specified as PATTERN\");\n-          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n-        } else {\n-          LOG.warn(\"Cannot unpack \" + source);\n-          try (OutputStream outputStream \u003d\n-                   destinationFileSystem.create(destination, true)) {\n-            IOUtils.copy(inputStream, outputStream);\n-          }\n-        }\n-        break;\n-      case FILE:\n-      default:\n-        try (OutputStream outputStream \u003d\n-                 destinationFileSystem.create(destination, true)) {\n-          IOUtils.copy(inputStream, outputStream);\n-        }\n-        break;\n       }\n-      // TODO Should calculate here before returning\n-      //return FileUtil.getDU(destDir);\n     }\n+    break;\n+    case PATTERN: {\n+      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n+      if (lowerDst.endsWith(\".jar\")) {\n+        String p \u003d resource.getPattern();\n+        RunJar.unJar(localrsrc, dst,\n+            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        File newDst \u003d new File(dst, dst.getName());\n+        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        }\n+        if (!localrsrc.renameTo(newDst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + newDst + \"]\");\n+        }\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \t\t\"was specified as PATTERN\");\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \"was specified as PATTERN\");\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+    }\n+    break;\n+    case FILE:\n+    default:\n+      if (!localrsrc.renameTo(dst)) {\n+        throw new IOException(\"Unable to rename file: [\" + localrsrc\n+          + \"] to [\" + dst + \"]\");\n+      }\n+      break;\n+    }\n+    if(localrsrc.isFile()){\n+      try {\n+        files.delete(new Path(localrsrc.toString()), false);\n+      } catch (IOException ignore) {\n+      }\n+    }\n+    return 0;\n+    // TODO Should calculate here before returning\n+    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {}
        }
      ]
    },
    "1b0f265db1a5bfccf1d870912237ea9618bd9c34": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "26/01/18 11:25 AM",
      "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "26/01/18 11:25 AM",
          "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "20/10/17 10:00 AM",
          "commitNameOld": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 98.1,
          "commitsBetweenForRepo": 645,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[localrsrc-File, dst-File]",
            "newValue": "[source-Path, destination-Path, sourceFileSystem-FileSystem, destinationFileSystem-FileSystem]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "26/01/18 11:25 AM",
          "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "20/10/17 10:00 AM",
          "commitNameOld": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 98.1,
          "commitsBetweenForRepo": 645,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "long",
            "newValue": "void"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "26/01/18 11:25 AM",
          "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "20/10/17 10:00 AM",
          "commitNameOld": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 98.1,
          "commitsBetweenForRepo": 645,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, InterruptedException, ExecutionException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
          "commitDate": "26/01/18 11:25 AM",
          "commitName": "1b0f265db1a5bfccf1d870912237ea9618bd9c34",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "20/10/17 10:00 AM",
          "commitNameOld": "0799fde35e7f3b9e8a85284ac0b30f6bdcbffad1",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 98.1,
          "commitsBetweenForRepo": 645,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,63 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n-    switch (resource.getType()) {\n-    case ARCHIVE: {\n+  private void unpack(Path source, Path destination,\n+                      FileSystem sourceFileSystem,\n+                      FileSystem destinationFileSystem)\n+      throws IOException, InterruptedException, ExecutionException {\n+    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n+      File dst \u003d new File(destination.toUri());\n       String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-            throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n+      switch (resource.getType()) {\n+      case ARCHIVE:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-      }\n-    }\n-    break;\n-    case PATTERN: {\n-      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n-      if (lowerDst.endsWith(\".jar\")) {\n-        String p \u003d resource.getPattern();\n-        RunJar.unJar(localrsrc, dst,\n-            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n-        File newDst \u003d new File(dst, dst.getName());\n-        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n-          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        break;\n+      case PATTERN:\n+        if (lowerDst.endsWith(\".jar\")) {\n+          String p \u003d resource.getPattern();\n+          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+          }\n+          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n+              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n+        } else if (lowerDst.endsWith(\".zip\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unZip(inputStream, dst);\n+        } else if (lowerDst.endsWith(\".tar.gz\") ||\n+            lowerDst.endsWith(\".tgz\") ||\n+            lowerDst.endsWith(\".tar\")) {\n+          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n+              \"was specified as PATTERN\");\n+          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n+        } else {\n+          LOG.warn(\"Cannot unpack \" + source);\n+          try (OutputStream outputStream \u003d\n+                   destinationFileSystem.create(destination, true)) {\n+            IOUtils.copy(inputStream, outputStream);\n+          }\n         }\n-        if (!localrsrc.renameTo(newDst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + newDst + \"]\");\n+        break;\n+      case FILE:\n+      default:\n+        try (OutputStream outputStream \u003d\n+                 destinationFileSystem.create(destination, true)) {\n+          IOUtils.copy(inputStream, outputStream);\n         }\n-      } else if (lowerDst.endsWith(\".zip\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \t\t\"was specified as PATTERN\");\n-        FileUtil.unZip(localrsrc, dst);\n-      } else if (lowerDst.endsWith(\".tar.gz\") ||\n-                 lowerDst.endsWith(\".tgz\") ||\n-                 lowerDst.endsWith(\".tar\")) {\n-        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n-        \"was specified as PATTERN\");\n-        FileUtil.unTar(localrsrc, dst);\n-      } else {\n-        LOG.warn(\"Cannot unpack \" + localrsrc);\n-        if (!localrsrc.renameTo(dst)) {\n-          throw new IOException(\"Unable to rename file: [\" + localrsrc\n-              + \"] to [\" + dst + \"]\");\n-        }\n+        break;\n       }\n+      // TODO Should calculate here before returning\n+      //return FileUtil.getDU(destDir);\n     }\n-    break;\n-    case FILE:\n-    default:\n-      if (!localrsrc.renameTo(dst)) {\n-        throw new IOException(\"Unable to rename file: [\" + localrsrc\n-          + \"] to [\" + dst + \"]\");\n-      }\n-      break;\n-    }\n-    if(localrsrc.isFile()){\n-      try {\n-        files.delete(new Path(localrsrc.toString()), false);\n-      } catch (IOException ignore) {\n-      }\n-    }\n-    return 0;\n-    // TODO Should calculate here before returning\n-    //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unpack(Path source, Path destination,\n                      FileSystem sourceFileSystem,\n                      FileSystem destinationFileSystem)\n      throws IOException, InterruptedException, ExecutionException {\n    try (InputStream inputStream \u003d sourceFileSystem.open(source)) {\n      File dst \u003d new File(destination.toUri());\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      switch (resource.getType()) {\n      case ARCHIVE:\n        if (lowerDst.endsWith(\".jar\")) {\n          RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\n        } else if (lowerDst.endsWith(\".zip\")) {\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case PATTERN:\n        if (lowerDst.endsWith(\".jar\")) {\n          String p \u003d resource.getPattern();\n          if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n            throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n          }\n          RunJar.unJarAndSave(inputStream, dst, source.getName(),\n              p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        } else if (lowerDst.endsWith(\".zip\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unZip(inputStream, dst);\n        } else if (lowerDst.endsWith(\".tar.gz\") ||\n            lowerDst.endsWith(\".tgz\") ||\n            lowerDst.endsWith(\".tar\")) {\n          LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" +\n              \"was specified as PATTERN\");\n          FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\n        } else {\n          LOG.warn(\"Cannot unpack \" + source);\n          try (OutputStream outputStream \u003d\n                   destinationFileSystem.create(destination, true)) {\n            IOUtils.copy(inputStream, outputStream);\n          }\n        }\n        break;\n      case FILE:\n      default:\n        try (OutputStream outputStream \u003d\n                 destinationFileSystem.create(destination, true)) {\n          IOUtils.copy(inputStream, outputStream);\n        }\n        break;\n      }\n      // TODO Should calculate here before returning\n      //return FileUtil.getDU(destDir);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "29/01/15 11:42 AM",
      "commitNameOld": "7acce7d3648d6f1e45ce280e2147e7dedf5693fc",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 32.4,
      "commitsBetweenForRepo": 325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   private long unpack(File localrsrc, File dst) throws IOException {\n     switch (resource.getType()) {\n     case ARCHIVE: {\n-      String lowerDst \u003d dst.getName().toLowerCase(Locale.ENGLISH);\n+      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case PATTERN: {\n-      String lowerDst \u003d dst.getName().toLowerCase(Locale.ENGLISH);\n+      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n       if (lowerDst.endsWith(\".jar\")) {\n         String p \u003d resource.getPattern();\n         RunJar.unJar(localrsrc, dst,\n             p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n         File newDst \u003d new File(dst, dst.getName());\n         if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n           throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n         }\n         if (!localrsrc.renameTo(newDst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + newDst + \"]\");\n         }\n       } else if (lowerDst.endsWith(\".zip\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \t\t\"was specified as PATTERN\");\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \"was specified as PATTERN\");\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n     if(localrsrc.isFile()){\n       try {\n         files.delete(new Path(localrsrc.toString()), false);\n       } catch (IOException ignore) {\n       }\n     }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d StringUtils.toLowerCase(dst.getName());\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "7acce7d3648d6f1e45ce280e2147e7dedf5693fc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3029. FSDownload.unpack() uses local locale for FS case conversion, may not work everywhere. Contributed by Varun Saxena.\n",
      "commitDate": "29/01/15 11:42 AM",
      "commitName": "7acce7d3648d6f1e45ce280e2147e7dedf5693fc",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "12/11/14 9:31 AM",
      "commitNameOld": "a04143039e7fe310d807f40584633096181cfada",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 78.09,
      "commitsBetweenForRepo": 495,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   private long unpack(File localrsrc, File dst) throws IOException {\n     switch (resource.getType()) {\n     case ARCHIVE: {\n-      String lowerDst \u003d dst.getName().toLowerCase();\n+      String lowerDst \u003d dst.getName().toLowerCase(Locale.ENGLISH);\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case PATTERN: {\n-      String lowerDst \u003d dst.getName().toLowerCase();\n+      String lowerDst \u003d dst.getName().toLowerCase(Locale.ENGLISH);\n       if (lowerDst.endsWith(\".jar\")) {\n         String p \u003d resource.getPattern();\n         RunJar.unJar(localrsrc, dst,\n             p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n         File newDst \u003d new File(dst, dst.getName());\n         if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n           throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n         }\n         if (!localrsrc.renameTo(newDst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + newDst + \"]\");\n         }\n       } else if (lowerDst.endsWith(\".zip\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \t\t\"was specified as PATTERN\");\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \"was specified as PATTERN\");\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n     if(localrsrc.isFile()){\n       try {\n         files.delete(new Path(localrsrc.toString()), false);\n       } catch (IOException ignore) {\n       }\n     }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d dst.getName().toLowerCase(Locale.ENGLISH);\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d dst.getName().toLowerCase(Locale.ENGLISH);\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2707. Potential null dereference in FSDownload. Contributed by Gera Shegalov\n",
      "commitDate": "31/10/14 3:53 PM",
      "commitName": "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2707. Potential null dereference in FSDownload. Contributed by Gera Shegalov\n",
          "commitDate": "31/10/14 3:53 PM",
          "commitName": "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/07/14 9:58 PM",
          "commitNameOld": "70dededdc983646f65176d979f3a0616f49f86eb",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 101.75,
          "commitsBetweenForRepo": 1010,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,72 @@\n-  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n+  private long unpack(File localrsrc, File dst) throws IOException {\n     switch (resource.getType()) {\n     case ARCHIVE: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case PATTERN: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst, pattern);\n+        String p \u003d resource.getPattern();\n+        RunJar.unJar(localrsrc, dst,\n+            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n         File newDst \u003d new File(dst, dst.getName());\n         if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n           throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n         }\n         if (!localrsrc.renameTo(newDst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + newDst + \"]\");\n         }\n       } else if (lowerDst.endsWith(\".zip\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \t\t\"was specified as PATTERN\");\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \"was specified as PATTERN\");\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n     if(localrsrc.isFile()){\n       try {\n         files.delete(new Path(localrsrc.toString()), false);\n       } catch (IOException ignore) {\n       }\n     }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[localrsrc-File, dst-File, pattern-Pattern]",
            "newValue": "[localrsrc-File, dst-File]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2707. Potential null dereference in FSDownload. Contributed by Gera Shegalov\n",
          "commitDate": "31/10/14 3:53 PM",
          "commitName": "7bc179f9f5e1e270fd5e6f1ad29b0f32fe371d15",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/07/14 9:58 PM",
          "commitNameOld": "70dededdc983646f65176d979f3a0616f49f86eb",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 101.75,
          "commitsBetweenForRepo": 1010,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,72 @@\n-  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n+  private long unpack(File localrsrc, File dst) throws IOException {\n     switch (resource.getType()) {\n     case ARCHIVE: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case PATTERN: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n-        RunJar.unJar(localrsrc, dst, pattern);\n+        String p \u003d resource.getPattern();\n+        RunJar.unJar(localrsrc, dst,\n+            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n         File newDst \u003d new File(dst, dst.getName());\n         if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n           throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n         }\n         if (!localrsrc.renameTo(newDst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + newDst + \"]\");\n         }\n       } else if (lowerDst.endsWith(\".zip\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \t\t\"was specified as PATTERN\");\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \"was specified as PATTERN\");\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n     if(localrsrc.isFile()){\n       try {\n         files.delete(new Path(localrsrc.toString()), false);\n       } catch (IOException ignore) {\n       }\n     }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        String p \u003d resource.getPattern();\n        RunJar.unJar(localrsrc, dst,\n            p \u003d\u003d null ? RunJar.MATCH_ANY : Pattern.compile(p));\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {}
        }
      ]
    },
    "c02dd9aa4b7e6dce4549f124ee636a99ff96ea67": {
      "type": "Ybodychange",
      "commitMessage": "YARN-109. .tmp file is not deleted for localized archives (Mayank Bansal via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460723 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 8:46 AM",
      "commitName": "c02dd9aa4b7e6dce4549f124ee636a99ff96ea67",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/11/12 7:43 AM",
      "commitNameOld": "05b6dc647ec8bac1885dc6b89144719c653387d3",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 140.0,
      "commitsBetweenForRepo": 637,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,70 @@\n   private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n     switch (resource.getType()) {\n     case ARCHIVE: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case PATTERN: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst, pattern);\n         File newDst \u003d new File(dst, dst.getName());\n         if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n           throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n         }\n         if (!localrsrc.renameTo(newDst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + newDst + \"]\");\n         }\n       } else if (lowerDst.endsWith(\".zip\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \t\t\"was specified as PATTERN\");\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n         \"was specified as PATTERN\");\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n           throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n     }\n     break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n+    if(localrsrc.isFile()){\n+      try {\n+        files.delete(new Path(localrsrc.toString()), false);\n+      } catch (IOException ignore) {\n+      }\n+    }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst, pattern);\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    if(localrsrc.isFile()){\n      try {\n        files.delete(new Path(localrsrc.toString()), false);\n      } catch (IOException ignore) {\n      }\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4647. We should only unjar jobjar if there is a lib directory in it. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:22 AM",
      "commitName": "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
      "commitAuthor": "Thomas Graves",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4647. We should only unjar jobjar if there is a lib directory in it. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390557 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/12 8:22 AM",
          "commitName": "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "17/09/12 2:05 PM",
          "commitNameOld": "2526a96aaa349d5514a8e8119373af9aed50cc5a",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,64 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n+  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n     switch (resource.getType()) {\n-    case ARCHIVE:\n+    case ARCHIVE: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n-      break;\n+    }\n+    break;\n+    case PATTERN: {\n+      String lowerDst \u003d dst.getName().toLowerCase();\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst, pattern);\n+        File newDst \u003d new File(dst, dst.getName());\n+        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        }\n+        if (!localrsrc.renameTo(newDst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + newDst + \"]\");\n+        }\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \t\t\"was specified as PATTERN\");\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \"was specified as PATTERN\");\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+    }\n+    break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst, pattern);\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {
            "oldValue": "[localrsrc-File, dst-File]",
            "newValue": "[localrsrc-File, dst-File, pattern-Pattern]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4647. We should only unjar jobjar if there is a lib directory in it. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390557 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/12 8:22 AM",
          "commitName": "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "17/09/12 2:05 PM",
          "commitNameOld": "2526a96aaa349d5514a8e8119373af9aed50cc5a",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,64 @@\n-  private long unpack(File localrsrc, File dst) throws IOException {\n+  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n     switch (resource.getType()) {\n-    case ARCHIVE:\n+    case ARCHIVE: {\n       String lowerDst \u003d dst.getName().toLowerCase();\n       if (lowerDst.endsWith(\".jar\")) {\n         RunJar.unJar(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".zip\")) {\n         FileUtil.unZip(localrsrc, dst);\n       } else if (lowerDst.endsWith(\".tar.gz\") ||\n                  lowerDst.endsWith(\".tgz\") ||\n                  lowerDst.endsWith(\".tar\")) {\n         FileUtil.unTar(localrsrc, dst);\n       } else {\n         LOG.warn(\"Cannot unpack \" + localrsrc);\n         if (!localrsrc.renameTo(dst)) {\n             throw new IOException(\"Unable to rename file: [\" + localrsrc\n               + \"] to [\" + dst + \"]\");\n         }\n       }\n-      break;\n+    }\n+    break;\n+    case PATTERN: {\n+      String lowerDst \u003d dst.getName().toLowerCase();\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst, pattern);\n+        File newDst \u003d new File(dst, dst.getName());\n+        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n+          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n+        }\n+        if (!localrsrc.renameTo(newDst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + newDst + \"]\");\n+        }\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \t\t\"was specified as PATTERN\");\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n+        \"was specified as PATTERN\");\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+          throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+    }\n+    break;\n     case FILE:\n     default:\n       if (!localrsrc.renameTo(dst)) {\n         throw new IOException(\"Unable to rename file: [\" + localrsrc\n           + \"] to [\" + dst + \"]\");\n       }\n       break;\n     }\n     return 0;\n     // TODO Should calculate here before returning\n     //return FileUtil.getDU(destDir);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long unpack(File localrsrc, File dst, Pattern pattern) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case PATTERN: {\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst, pattern);\n        File newDst \u003d new File(dst, dst.getName());\n        if (!dst.exists() \u0026\u0026 !dst.mkdir()) {\n          throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\n        }\n        if (!localrsrc.renameTo(newDst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + newDst + \"]\");\n        }\n      } else if (lowerDst.endsWith(\".zip\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \t\t\"was specified as PATTERN\");\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        LOG.warn(\"Treating [\" + localrsrc + \"] as an archive even though it \" +\n        \"was specified as PATTERN\");\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n          throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n    }\n    break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE:\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n      break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
      }
    },
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3237. Move LocalJobRunner to hadoop-mapreduce-client-core. Contributed by Tom White.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 8:16 PM",
      "commitName": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/10/11 7:09 PM",
      "commitNameOld": "e5badc0c1a817ca8f7e4255ec4dcfdf858abb596",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE:\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n      break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE:\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n      break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,32 @@\n+  private long unpack(File localrsrc, File dst) throws IOException {\n+    switch (resource.getType()) {\n+    case ARCHIVE:\n+      String lowerDst \u003d dst.getName().toLowerCase();\n+      if (lowerDst.endsWith(\".jar\")) {\n+        RunJar.unJar(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".zip\")) {\n+        FileUtil.unZip(localrsrc, dst);\n+      } else if (lowerDst.endsWith(\".tar.gz\") ||\n+                 lowerDst.endsWith(\".tgz\") ||\n+                 lowerDst.endsWith(\".tar\")) {\n+        FileUtil.unTar(localrsrc, dst);\n+      } else {\n+        LOG.warn(\"Cannot unpack \" + localrsrc);\n+        if (!localrsrc.renameTo(dst)) {\n+            throw new IOException(\"Unable to rename file: [\" + localrsrc\n+              + \"] to [\" + dst + \"]\");\n+        }\n+      }\n+      break;\n+    case FILE:\n+    default:\n+      if (!localrsrc.renameTo(dst)) {\n+        throw new IOException(\"Unable to rename file: [\" + localrsrc\n+          + \"] to [\" + dst + \"]\");\n+      }\n+      break;\n+    }\n+    return 0;\n+    // TODO Should calculate here before returning\n+    //return FileUtil.getDU(destDir);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long unpack(File localrsrc, File dst) throws IOException {\n    switch (resource.getType()) {\n    case ARCHIVE:\n      String lowerDst \u003d dst.getName().toLowerCase();\n      if (lowerDst.endsWith(\".jar\")) {\n        RunJar.unJar(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".zip\")) {\n        FileUtil.unZip(localrsrc, dst);\n      } else if (lowerDst.endsWith(\".tar.gz\") ||\n                 lowerDst.endsWith(\".tgz\") ||\n                 lowerDst.endsWith(\".tar\")) {\n        FileUtil.unTar(localrsrc, dst);\n      } else {\n        LOG.warn(\"Cannot unpack \" + localrsrc);\n        if (!localrsrc.renameTo(dst)) {\n            throw new IOException(\"Unable to rename file: [\" + localrsrc\n              + \"] to [\" + dst + \"]\");\n        }\n      }\n      break;\n    case FILE:\n    default:\n      if (!localrsrc.renameTo(dst)) {\n        throw new IOException(\"Unable to rename file: [\" + localrsrc\n          + \"] to [\" + dst + \"]\");\n      }\n      break;\n    }\n    return 0;\n    // TODO Should calculate here before returning\n    //return FileUtil.getDU(destDir);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/FSDownload.java"
    }
  }
}