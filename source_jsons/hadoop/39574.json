{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "sortAndGetChildrenAllocationIterator",
  "functionId": "sortAndGetChildrenAllocationIterator___partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 781,
  "functionEndLine": 784,
  "numCommitsSeen": 130,
  "timeTaken": 4006,
  "changeHistory": [
    "ce832059db077fa95922198b066a737ed4f609fe",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "d573f09fb93dbb711d504620af5d73840ea063a6"
  ],
  "changeHistoryShort": {
    "ce832059db077fa95922198b066a737ed4f609fe": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ybodychange",
    "d573f09fb93dbb711d504620af5d73840ea063a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce832059db077fa95922198b066a737ed4f609fe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)\n",
      "commitDate": "23/01/17 10:52 AM",
      "commitName": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "72054a817dfb43e93916d7036eba19cf2f49cea2",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.89,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,4 @@\n   private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(\n       String partition) {\n-    // Previously we keep a sorted list for default partition, it is not good\n-    // when multi-threading scheduler is enabled, so to make a simpler code\n-    // now re-sort queue every time irrespective to node partition.\n-    partitionQueueComparator.setPartitionToLookAt(partition);\n-    List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n-    Collections.sort(childrenList, partitionQueueComparator);\n-    return childrenList.iterator();\n+    return queueOrderingPolicy.getAssignmentIterator(partition);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(\n      String partition) {\n    return queueOrderingPolicy.getAssignmentIterator(partition);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "28/10/16 10:30 AM",
          "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,10 @@\n-  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(FiCaSchedulerNode node) {\n-    if (node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n-      if (needToResortQueuesAtNextAllocation) {\n-        // If we skipped resort queues last time, we need to re-sort queue\n-        // before allocation\n-        List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n-        childQueues.clear();\n-        childQueues.addAll(childrenList);\n-        needToResortQueuesAtNextAllocation \u003d false;\n-      }\n-      return childQueues.iterator();\n-    }\n-\n-    partitionQueueComparator.setPartitionToLookAt(node.getPartition());\n+  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(\n+      String partition) {\n+    // Previously we keep a sorted list for default partition, it is not good\n+    // when multi-threading scheduler is enabled, so to make a simpler code\n+    // now re-sort queue every time irrespective to node partition.\n+    partitionQueueComparator.setPartitionToLookAt(partition);\n     List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n     Collections.sort(childrenList, partitionQueueComparator);\n     return childrenList.iterator();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(\n      String partition) {\n    // Previously we keep a sorted list for default partition, it is not good\n    // when multi-threading scheduler is enabled, so to make a simpler code\n    // now re-sort queue every time irrespective to node partition.\n    partitionQueueComparator.setPartitionToLookAt(partition);\n    List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n    Collections.sort(childrenList, partitionQueueComparator);\n    return childrenList.iterator();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[node-FiCaSchedulerNode]",
            "newValue": "[partition-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "28/10/16 10:30 AM",
          "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,10 @@\n-  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(FiCaSchedulerNode node) {\n-    if (node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n-      if (needToResortQueuesAtNextAllocation) {\n-        // If we skipped resort queues last time, we need to re-sort queue\n-        // before allocation\n-        List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n-        childQueues.clear();\n-        childQueues.addAll(childrenList);\n-        needToResortQueuesAtNextAllocation \u003d false;\n-      }\n-      return childQueues.iterator();\n-    }\n-\n-    partitionQueueComparator.setPartitionToLookAt(node.getPartition());\n+  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(\n+      String partition) {\n+    // Previously we keep a sorted list for default partition, it is not good\n+    // when multi-threading scheduler is enabled, so to make a simpler code\n+    // now re-sort queue every time irrespective to node partition.\n+    partitionQueueComparator.setPartitionToLookAt(partition);\n     List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n     Collections.sort(childrenList, partitionQueueComparator);\n     return childrenList.iterator();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(\n      String partition) {\n    // Previously we keep a sorted list for default partition, it is not good\n    // when multi-threading scheduler is enabled, so to make a simpler code\n    // now re-sort queue every time irrespective to node partition.\n    partitionQueueComparator.setPartitionToLookAt(partition);\n    List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n    Collections.sort(childrenList, partitionQueueComparator);\n    return childrenList.iterator();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/07/15 9:52 PM",
      "commitNameOld": "5ed1fead6b5ec24bb0ce1a3db033c2ee1ede4bb4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.67,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,18 @@\n   private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(FiCaSchedulerNode node) {\n     if (node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+      if (needToResortQueuesAtNextAllocation) {\n+        // If we skipped resort queues last time, we need to re-sort queue\n+        // before allocation\n+        List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n+        childQueues.clear();\n+        childQueues.addAll(childrenList);\n+        needToResortQueuesAtNextAllocation \u003d false;\n+      }\n       return childQueues.iterator();\n     }\n \n     partitionQueueComparator.setPartitionToLookAt(node.getPartition());\n     List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n     Collections.sort(childrenList, partitionQueueComparator);\n     return childrenList.iterator();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(FiCaSchedulerNode node) {\n    if (node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      if (needToResortQueuesAtNextAllocation) {\n        // If we skipped resort queues last time, we need to re-sort queue\n        // before allocation\n        List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n        childQueues.clear();\n        childQueues.addAll(childrenList);\n        needToResortQueuesAtNextAllocation \u003d false;\n      }\n      return childQueues.iterator();\n    }\n\n    partitionQueueComparator.setPartitionToLookAt(node.getPartition());\n    List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n    Collections.sort(childrenList, partitionQueueComparator);\n    return childrenList.iterator();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "d573f09fb93dbb711d504620af5d73840ea063a6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2696. Queue sorting in CapacityScheduler should consider node label. Contributed by Wangda Tan\n",
      "commitDate": "17/04/15 1:36 PM",
      "commitName": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,10 @@\n+  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(FiCaSchedulerNode node) {\n+    if (node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+      return childQueues.iterator();\n+    }\n+\n+    partitionQueueComparator.setPartitionToLookAt(node.getPartition());\n+    List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n+    Collections.sort(childrenList, partitionQueueComparator);\n+    return childrenList.iterator();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Iterator\u003cCSQueue\u003e sortAndGetChildrenAllocationIterator(FiCaSchedulerNode node) {\n    if (node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      return childQueues.iterator();\n    }\n\n    partitionQueueComparator.setPartitionToLookAt(node.getPartition());\n    List\u003cCSQueue\u003e childrenList \u003d new ArrayList\u003c\u003e(childQueues);\n    Collections.sort(childrenList, partitionQueueComparator);\n    return childrenList.iterator();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}