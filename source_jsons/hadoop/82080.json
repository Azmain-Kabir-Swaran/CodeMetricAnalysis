{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HostsFileReader.java",
  "functionName": "refresh",
  "functionId": "refresh___inFileInputStream-InputStream__exFileInputStream-InputStream",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
  "functionStartLine": 237,
  "functionEndLine": 259,
  "numCommitsSeen": 16,
  "timeTaken": 2177,
  "changeHistory": [
    "d87a63a9019d74a1c338c724e050952843a153e5",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421",
    "feb90ffcca536e7deac50976b8a8774450fe089f",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a"
  ],
  "changeHistoryShort": {
    "d87a63a9019d74a1c338c724e050952843a153e5": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Ybodychange",
    "feb90ffcca536e7deac50976b8a8774450fe089f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d87a63a9019d74a1c338c724e050952843a153e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14412. HostsFileReader#getHostDetails is very expensive on large clusters. Contributed by Jason Lowe.\n",
      "commitDate": "16/05/17 7:57 PM",
      "commitName": "d87a63a9019d74a1c338c724e050952843a153e5",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "18/08/16 7:27 AM",
      "commitNameOld": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 271.52,
      "commitsBetweenForRepo": 1655,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,23 @@\n   public void refresh(InputStream inFileInputStream,\n       InputStream exFileInputStream) throws IOException {\n     LOG.info(\"Refreshing hosts (include/exclude) list\");\n-    this.writeLock.lock();\n-    try {\n-      Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n-      Map\u003cString, Integer\u003e newExcludes \u003d new HashMap\u003cString, Integer\u003e();\n-      boolean switchIncludes \u003d false;\n-      boolean switchExcludes \u003d false;\n-      if (inFileInputStream !\u003d null) {\n-        readFileToSetWithFileInputStream(\"included\", includesFile,\n-            inFileInputStream, newIncludes);\n-        switchIncludes \u003d true;\n-      }\n-      if (exFileInputStream !\u003d null) {\n-        readFileToMapWithFileInputStream(\"excluded\", excludesFile,\n-            exFileInputStream, newExcludes);\n-        switchExcludes \u003d true;\n-      }\n-      if (switchIncludes) {\n-        // switch the new hosts that are to be included\n-        includes \u003d newIncludes;\n-      }\n-      if (switchExcludes) {\n-        // switch the excluded hosts\n-        excludes \u003d newExcludes;\n-      }\n-    } finally {\n-      this.writeLock.unlock();\n+    HostDetails oldDetails \u003d current.get();\n+    Set\u003cString\u003e newIncludes \u003d oldDetails.includes;\n+    Map\u003cString, Integer\u003e newExcludes \u003d oldDetails.excludes;\n+    if (inFileInputStream !\u003d null) {\n+      newIncludes \u003d new HashSet\u003c\u003e();\n+      readFileToSetWithFileInputStream(\"included\", oldDetails.includesFile,\n+          inFileInputStream, newIncludes);\n+      newIncludes \u003d Collections.unmodifiableSet(newIncludes);\n     }\n+    if (exFileInputStream !\u003d null) {\n+      newExcludes \u003d new HashMap\u003c\u003e();\n+      readFileToMapWithFileInputStream(\"excluded\", oldDetails.excludesFile,\n+          exFileInputStream, newExcludes);\n+      newExcludes \u003d Collections.unmodifiableMap(newExcludes);\n+    }\n+    HostDetails newDetails \u003d new HostDetails(\n+        oldDetails.includesFile, newIncludes,\n+        oldDetails.excludesFile, newExcludes);\n+    current.set(newDetails);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refresh(InputStream inFileInputStream,\n      InputStream exFileInputStream) throws IOException {\n    LOG.info(\"Refreshing hosts (include/exclude) list\");\n    HostDetails oldDetails \u003d current.get();\n    Set\u003cString\u003e newIncludes \u003d oldDetails.includes;\n    Map\u003cString, Integer\u003e newExcludes \u003d oldDetails.excludes;\n    if (inFileInputStream !\u003d null) {\n      newIncludes \u003d new HashSet\u003c\u003e();\n      readFileToSetWithFileInputStream(\"included\", oldDetails.includesFile,\n          inFileInputStream, newIncludes);\n      newIncludes \u003d Collections.unmodifiableSet(newIncludes);\n    }\n    if (exFileInputStream !\u003d null) {\n      newExcludes \u003d new HashMap\u003c\u003e();\n      readFileToMapWithFileInputStream(\"excluded\", oldDetails.excludesFile,\n          exFileInputStream, newExcludes);\n      newExcludes \u003d Collections.unmodifiableMap(newExcludes);\n    }\n    HostDetails newDetails \u003d new HostDetails(\n        oldDetails.includesFile, newIncludes,\n        oldDetails.excludesFile, newExcludes);\n    current.set(newDetails);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/08/16 1:35 AM",
      "commitNameOld": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 17.24,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void refresh(InputStream inFileInputStream,\n       InputStream exFileInputStream) throws IOException {\n     LOG.info(\"Refreshing hosts (include/exclude) list\");\n     this.writeLock.lock();\n     try {\n       Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n-      Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n+      Map\u003cString, Integer\u003e newExcludes \u003d new HashMap\u003cString, Integer\u003e();\n       boolean switchIncludes \u003d false;\n       boolean switchExcludes \u003d false;\n       if (inFileInputStream !\u003d null) {\n         readFileToSetWithFileInputStream(\"included\", includesFile,\n             inFileInputStream, newIncludes);\n         switchIncludes \u003d true;\n       }\n       if (exFileInputStream !\u003d null) {\n-        readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n+        readFileToMapWithFileInputStream(\"excluded\", excludesFile,\n             exFileInputStream, newExcludes);\n         switchExcludes \u003d true;\n       }\n       if (switchIncludes) {\n         // switch the new hosts that are to be included\n         includes \u003d newIncludes;\n       }\n       if (switchExcludes) {\n         // switch the excluded hosts\n         excludes \u003d newExcludes;\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refresh(InputStream inFileInputStream,\n      InputStream exFileInputStream) throws IOException {\n    LOG.info(\"Refreshing hosts (include/exclude) list\");\n    this.writeLock.lock();\n    try {\n      Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n      Map\u003cString, Integer\u003e newExcludes \u003d new HashMap\u003cString, Integer\u003e();\n      boolean switchIncludes \u003d false;\n      boolean switchExcludes \u003d false;\n      if (inFileInputStream !\u003d null) {\n        readFileToSetWithFileInputStream(\"included\", includesFile,\n            inFileInputStream, newIncludes);\n        switchIncludes \u003d true;\n      }\n      if (exFileInputStream !\u003d null) {\n        readFileToMapWithFileInputStream(\"excluded\", excludesFile,\n            exFileInputStream, newExcludes);\n        switchExcludes \u003d true;\n      }\n      if (switchIncludes) {\n        // switch the new hosts that are to be included\n        includes \u003d newIncludes;\n      }\n      if (switchExcludes) {\n        // switch the excluded hosts\n        excludes \u003d newExcludes;\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
      "extendedDetails": {}
    },
    "feb90ffcca536e7deac50976b8a8774450fe089f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4002. Make ResourceTrackerService#nodeHeartbeat more concurrent. Contributed by Rohith Sharma K S \u0026 Zhiguo Hong\n",
      "commitDate": "19/05/16 1:01 PM",
      "commitName": "feb90ffcca536e7deac50976b8a8774450fe089f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4002. Make ResourceTrackerService#nodeHeartbeat more concurrent. Contributed by Rohith Sharma K S \u0026 Zhiguo Hong\n",
          "commitDate": "19/05/16 1:01 PM",
          "commitName": "feb90ffcca536e7deac50976b8a8774450fe089f",
          "commitAuthor": "Jian He",
          "commitDateOld": "18/08/15 7:25 PM",
          "commitNameOld": "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 274.73,
          "commitsBetweenForRepo": 1832,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,31 @@\n-  public synchronized void refresh(InputStream inFileInputStream,\n+  public void refresh(InputStream inFileInputStream,\n       InputStream exFileInputStream) throws IOException {\n     LOG.info(\"Refreshing hosts (include/exclude) list\");\n-    Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n-    Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n-    boolean switchIncludes \u003d false;\n-    boolean switchExcludes \u003d false;\n-    if (inFileInputStream !\u003d null) {\n-      readFileToSetWithFileInputStream(\"included\", includesFile,\n-          inFileInputStream, newIncludes);\n-      switchIncludes \u003d true;\n-    }\n-    if (exFileInputStream !\u003d null) {\n-      readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n-          exFileInputStream, newExcludes);\n-      switchExcludes \u003d true;\n-    }\n-    if (switchIncludes) {\n-      // switch the new hosts that are to be included\n-      includes \u003d newIncludes;\n-    }\n-    if (switchExcludes) {\n-      // switch the excluded hosts\n-      excludes \u003d newExcludes;\n+    this.writeLock.lock();\n+    try {\n+      Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n+      Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n+      boolean switchIncludes \u003d false;\n+      boolean switchExcludes \u003d false;\n+      if (inFileInputStream !\u003d null) {\n+        readFileToSetWithFileInputStream(\"included\", includesFile,\n+            inFileInputStream, newIncludes);\n+        switchIncludes \u003d true;\n+      }\n+      if (exFileInputStream !\u003d null) {\n+        readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n+            exFileInputStream, newExcludes);\n+        switchExcludes \u003d true;\n+      }\n+      if (switchIncludes) {\n+        // switch the new hosts that are to be included\n+        includes \u003d newIncludes;\n+      }\n+      if (switchExcludes) {\n+        // switch the excluded hosts\n+        excludes \u003d newExcludes;\n+      }\n+    } finally {\n+      this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void refresh(InputStream inFileInputStream,\n      InputStream exFileInputStream) throws IOException {\n    LOG.info(\"Refreshing hosts (include/exclude) list\");\n    this.writeLock.lock();\n    try {\n      Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n      Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n      boolean switchIncludes \u003d false;\n      boolean switchExcludes \u003d false;\n      if (inFileInputStream !\u003d null) {\n        readFileToSetWithFileInputStream(\"included\", includesFile,\n            inFileInputStream, newIncludes);\n        switchIncludes \u003d true;\n      }\n      if (exFileInputStream !\u003d null) {\n        readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n            exFileInputStream, newExcludes);\n        switchExcludes \u003d true;\n      }\n      if (switchIncludes) {\n        // switch the new hosts that are to be included\n        includes \u003d newIncludes;\n      }\n      if (switchExcludes) {\n        // switch the excluded hosts\n        excludes \u003d newExcludes;\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4002. Make ResourceTrackerService#nodeHeartbeat more concurrent. Contributed by Rohith Sharma K S \u0026 Zhiguo Hong\n",
          "commitDate": "19/05/16 1:01 PM",
          "commitName": "feb90ffcca536e7deac50976b8a8774450fe089f",
          "commitAuthor": "Jian He",
          "commitDateOld": "18/08/15 7:25 PM",
          "commitNameOld": "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 274.73,
          "commitsBetweenForRepo": 1832,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,31 @@\n-  public synchronized void refresh(InputStream inFileInputStream,\n+  public void refresh(InputStream inFileInputStream,\n       InputStream exFileInputStream) throws IOException {\n     LOG.info(\"Refreshing hosts (include/exclude) list\");\n-    Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n-    Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n-    boolean switchIncludes \u003d false;\n-    boolean switchExcludes \u003d false;\n-    if (inFileInputStream !\u003d null) {\n-      readFileToSetWithFileInputStream(\"included\", includesFile,\n-          inFileInputStream, newIncludes);\n-      switchIncludes \u003d true;\n-    }\n-    if (exFileInputStream !\u003d null) {\n-      readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n-          exFileInputStream, newExcludes);\n-      switchExcludes \u003d true;\n-    }\n-    if (switchIncludes) {\n-      // switch the new hosts that are to be included\n-      includes \u003d newIncludes;\n-    }\n-    if (switchExcludes) {\n-      // switch the excluded hosts\n-      excludes \u003d newExcludes;\n+    this.writeLock.lock();\n+    try {\n+      Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n+      Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n+      boolean switchIncludes \u003d false;\n+      boolean switchExcludes \u003d false;\n+      if (inFileInputStream !\u003d null) {\n+        readFileToSetWithFileInputStream(\"included\", includesFile,\n+            inFileInputStream, newIncludes);\n+        switchIncludes \u003d true;\n+      }\n+      if (exFileInputStream !\u003d null) {\n+        readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n+            exFileInputStream, newExcludes);\n+        switchExcludes \u003d true;\n+      }\n+      if (switchIncludes) {\n+        // switch the new hosts that are to be included\n+        includes \u003d newIncludes;\n+      }\n+      if (switchExcludes) {\n+        // switch the excluded hosts\n+        excludes \u003d newExcludes;\n+      }\n+    } finally {\n+      this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void refresh(InputStream inFileInputStream,\n      InputStream exFileInputStream) throws IOException {\n    LOG.info(\"Refreshing hosts (include/exclude) list\");\n    this.writeLock.lock();\n    try {\n      Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n      Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n      boolean switchIncludes \u003d false;\n      boolean switchExcludes \u003d false;\n      if (inFileInputStream !\u003d null) {\n        readFileToSetWithFileInputStream(\"included\", includesFile,\n            inFileInputStream, newIncludes);\n        switchIncludes \u003d true;\n      }\n      if (exFileInputStream !\u003d null) {\n        readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n            exFileInputStream, newExcludes);\n        switchExcludes \u003d true;\n      }\n      if (switchIncludes) {\n        // switch the new hosts that are to be included\n        includes \u003d newIncludes;\n      }\n      if (switchExcludes) {\n        // switch the excluded hosts\n        excludes \u003d newExcludes;\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "9da9f7d4d8f1dce210995a06863a8836c23d7c3a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1666. Modified RM HA handling of include/exclude node-lists to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 9:52 AM",
      "commitName": "9da9f7d4d8f1dce210995a06863a8836c23d7c3a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,26 @@\n+  public synchronized void refresh(InputStream inFileInputStream,\n+      InputStream exFileInputStream) throws IOException {\n+    LOG.info(\"Refreshing hosts (include/exclude) list\");\n+    Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n+    Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n+    boolean switchIncludes \u003d false;\n+    boolean switchExcludes \u003d false;\n+    if (inFileInputStream !\u003d null) {\n+      readFileToSetWithFileInputStream(\"included\", includesFile,\n+          inFileInputStream, newIncludes);\n+      switchIncludes \u003d true;\n+    }\n+    if (exFileInputStream !\u003d null) {\n+      readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n+          exFileInputStream, newExcludes);\n+      switchExcludes \u003d true;\n+    }\n+    if (switchIncludes) {\n+      // switch the new hosts that are to be included\n+      includes \u003d newIncludes;\n+    }\n+    if (switchExcludes) {\n+      // switch the excluded hosts\n+      excludes \u003d newExcludes;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refresh(InputStream inFileInputStream,\n      InputStream exFileInputStream) throws IOException {\n    LOG.info(\"Refreshing hosts (include/exclude) list\");\n    Set\u003cString\u003e newIncludes \u003d new HashSet\u003cString\u003e();\n    Set\u003cString\u003e newExcludes \u003d new HashSet\u003cString\u003e();\n    boolean switchIncludes \u003d false;\n    boolean switchExcludes \u003d false;\n    if (inFileInputStream !\u003d null) {\n      readFileToSetWithFileInputStream(\"included\", includesFile,\n          inFileInputStream, newIncludes);\n      switchIncludes \u003d true;\n    }\n    if (exFileInputStream !\u003d null) {\n      readFileToSetWithFileInputStream(\"excluded\", excludesFile,\n          exFileInputStream, newExcludes);\n      switchExcludes \u003d true;\n    }\n    if (switchIncludes) {\n      // switch the new hosts that are to be included\n      includes \u003d newIncludes;\n    }\n    if (switchExcludes) {\n      // switch the excluded hosts\n      excludes \u003d newExcludes;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/HostsFileReader.java"
    }
  }
}