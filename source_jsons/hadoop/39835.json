{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MutableCSConfigurationProvider.java",
  "functionName": "removeQueue",
  "functionId": "removeQueue___queueToRemove-String__proposedConf-CapacitySchedulerConfiguration__confUpdate-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
  "functionStartLine": 258,
  "functionEndLine": 302,
  "numCommitsSeen": 93,
  "timeTaken": 3997,
  "changeHistory": [
    "51e7d1b37eb06165657befdae82c015055c58334",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e"
  ],
  "changeHistoryShort": {
    "51e7d1b37eb06165657befdae82c015055c58334": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ybodychange",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": "Ymultichange(Ymovefromfile,Ybodychange)",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "51e7d1b37eb06165657befdae82c015055c58334": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9950. Unset Ordering Policy of Leaf/Parent queue converted from Parent/Leaf queue respectively. Contributed by Prabhu Joseph.\n",
      "commitDate": "04/11/19 9:57 AM",
      "commitName": "51e7d1b37eb06165657befdae82c015055c58334",
      "commitAuthor": "Sunil G",
      "commitDateOld": "16/10/19 6:13 PM",
      "commitNameOld": "3990ffa0834e6b24314a565a92e92d6e8fa37a1e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 18.7,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,45 @@\n   private void removeQueue(\n       String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (queueToRemove \u003d\u003d null) {\n       return;\n     } else {\n       String queueName \u003d queueToRemove.substring(\n           queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n       if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n       } else {\n         List\u003cString\u003e siblingQueues \u003d getSiblingQueues(queueToRemove,\n             proposedConf);\n         if (!siblingQueues.contains(queueName)) {\n           throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n         }\n         siblingQueues.remove(queueName);\n         String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n             .lastIndexOf(\u0027.\u0027));\n         proposedConf.setQueues(parentQueuePath, siblingQueues.toArray(\n             new String[0]));\n         String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n             + parentQueuePath + CapacitySchedulerConfiguration.DOT\n             + CapacitySchedulerConfiguration.QUEUES;\n         if (siblingQueues.size() \u003d\u003d 0) {\n           confUpdate.put(queuesConfig, null);\n+          // Unset Ordering Policy of Leaf Queue converted from\n+          // Parent Queue after removeQueue\n+          String queueOrderingPolicy \u003d CapacitySchedulerConfiguration.PREFIX\n+              + parentQueuePath + CapacitySchedulerConfiguration.DOT\n+              + ORDERING_POLICY;\n+          proposedConf.unset(queueOrderingPolicy);\n+          confUpdate.put(queueOrderingPolicy, null);\n         } else {\n           confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(siblingQueues));\n         }\n         for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n             \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n             .entrySet()) {\n           proposedConf.unset(confRemove.getKey());\n           confUpdate.put(confRemove.getKey(), null);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeQueue(\n      String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (queueToRemove \u003d\u003d null) {\n      return;\n    } else {\n      String queueName \u003d queueToRemove.substring(\n          queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n      if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n      } else {\n        List\u003cString\u003e siblingQueues \u003d getSiblingQueues(queueToRemove,\n            proposedConf);\n        if (!siblingQueues.contains(queueName)) {\n          throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n        }\n        siblingQueues.remove(queueName);\n        String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n            .lastIndexOf(\u0027.\u0027));\n        proposedConf.setQueues(parentQueuePath, siblingQueues.toArray(\n            new String[0]));\n        String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n            + parentQueuePath + CapacitySchedulerConfiguration.DOT\n            + CapacitySchedulerConfiguration.QUEUES;\n        if (siblingQueues.size() \u003d\u003d 0) {\n          confUpdate.put(queuesConfig, null);\n          // Unset Ordering Policy of Leaf Queue converted from\n          // Parent Queue after removeQueue\n          String queueOrderingPolicy \u003d CapacitySchedulerConfiguration.PREFIX\n              + parentQueuePath + CapacitySchedulerConfiguration.DOT\n              + ORDERING_POLICY;\n          proposedConf.unset(queueOrderingPolicy);\n          confUpdate.put(queueOrderingPolicy, null);\n        } else {\n          confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(siblingQueues));\n        }\n        for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n            \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n            .entrySet()) {\n          proposedConf.unset(confRemove.getKey());\n          confUpdate.put(confRemove.getKey(), null);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "4c8b208adb8c7639628676387e275856cf0842c9",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,38 @@\n   private void removeQueue(\n       String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (queueToRemove \u003d\u003d null) {\n       return;\n     } else {\n-      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n       String queueName \u003d queueToRemove.substring(\n           queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n-      CSQueue queue \u003d cs.getQueue(queueName);\n-      if (queue \u003d\u003d null ||\n-          !queue.getQueuePath().equals(queueToRemove)) {\n-        throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n-      } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n+      if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n-      }\n-      String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n-          .lastIndexOf(\u0027.\u0027));\n-      String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n-      List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n-      for (String siblingQueue : siblingQueues) {\n-        if (!siblingQueue.equals(queueName)) {\n-          newSiblingQueues.add(siblingQueue);\n-        }\n-      }\n-      proposedConf.setQueues(parentQueuePath, newSiblingQueues\n-          .toArray(new String[0]));\n-      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n-          + parentQueuePath + CapacitySchedulerConfiguration.DOT\n-          + CapacitySchedulerConfiguration.QUEUES;\n-      if (newSiblingQueues.size() \u003d\u003d 0) {\n-        confUpdate.put(queuesConfig, null);\n       } else {\n-        confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n-      }\n-      for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n-          \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n-          .entrySet()) {\n-        proposedConf.unset(confRemove.getKey());\n-        confUpdate.put(confRemove.getKey(), null);\n+        List\u003cString\u003e siblingQueues \u003d getSiblingQueues(queueToRemove,\n+            proposedConf);\n+        if (!siblingQueues.contains(queueName)) {\n+          throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n+        }\n+        siblingQueues.remove(queueName);\n+        String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n+            .lastIndexOf(\u0027.\u0027));\n+        proposedConf.setQueues(parentQueuePath, siblingQueues.toArray(\n+            new String[0]));\n+        String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n+            + parentQueuePath + CapacitySchedulerConfiguration.DOT\n+            + CapacitySchedulerConfiguration.QUEUES;\n+        if (siblingQueues.size() \u003d\u003d 0) {\n+          confUpdate.put(queuesConfig, null);\n+        } else {\n+          confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(siblingQueues));\n+        }\n+        for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n+            \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n+            .entrySet()) {\n+          proposedConf.unset(confRemove.getKey());\n+          confUpdate.put(confRemove.getKey(), null);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeQueue(\n      String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (queueToRemove \u003d\u003d null) {\n      return;\n    } else {\n      String queueName \u003d queueToRemove.substring(\n          queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n      if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n      } else {\n        List\u003cString\u003e siblingQueues \u003d getSiblingQueues(queueToRemove,\n            proposedConf);\n        if (!siblingQueues.contains(queueName)) {\n          throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n        }\n        siblingQueues.remove(queueName);\n        String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n            .lastIndexOf(\u0027.\u0027));\n        proposedConf.setQueues(parentQueuePath, siblingQueues.toArray(\n            new String[0]));\n        String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n            + parentQueuePath + CapacitySchedulerConfiguration.DOT\n            + CapacitySchedulerConfiguration.QUEUES;\n        if (siblingQueues.size() \u003d\u003d 0) {\n          confUpdate.put(queuesConfig, null);\n        } else {\n          confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(siblingQueues));\n        }\n        for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n            \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n            .entrySet()) {\n          proposedConf.unset(confRemove.getKey());\n          confUpdate.put(confRemove.getKey(), null);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
      "extendedDetails": {}
    },
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void removeQueue(\n       String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (queueToRemove \u003d\u003d null) {\n       return;\n     } else {\n-      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n+      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n       String queueName \u003d queueToRemove.substring(\n           queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n       CSQueue queue \u003d cs.getQueue(queueName);\n       if (queue \u003d\u003d null ||\n           !queue.getQueuePath().equals(queueToRemove)) {\n         throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n       } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n       }\n       String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n           .lastIndexOf(\u0027.\u0027));\n       String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n       List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n       for (String siblingQueue : siblingQueues) {\n         if (!siblingQueue.equals(queueName)) {\n           newSiblingQueues.add(siblingQueue);\n         }\n       }\n       proposedConf.setQueues(parentQueuePath, newSiblingQueues\n           .toArray(new String[0]));\n-      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX +\n-          parentQueuePath + CapacitySchedulerConfiguration.DOT +\n-          CapacitySchedulerConfiguration.QUEUES;\n+      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n+          + parentQueuePath + CapacitySchedulerConfiguration.DOT\n+          + CapacitySchedulerConfiguration.QUEUES;\n       if (newSiblingQueues.size() \u003d\u003d 0) {\n         confUpdate.put(queuesConfig, null);\n       } else {\n         confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n       }\n       for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n           \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n           .entrySet()) {\n         proposedConf.unset(confRemove.getKey());\n         confUpdate.put(confRemove.getKey(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeQueue(\n      String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (queueToRemove \u003d\u003d null) {\n      return;\n    } else {\n      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n      String queueName \u003d queueToRemove.substring(\n          queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n      CSQueue queue \u003d cs.getQueue(queueName);\n      if (queue \u003d\u003d null ||\n          !queue.getQueuePath().equals(queueToRemove)) {\n        throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n      } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n      }\n      String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n          .lastIndexOf(\u0027.\u0027));\n      String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n      List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n      for (String siblingQueue : siblingQueues) {\n        if (!siblingQueue.equals(queueName)) {\n          newSiblingQueues.add(siblingQueue);\n        }\n      }\n      proposedConf.setQueues(parentQueuePath, newSiblingQueues\n          .toArray(new String[0]));\n      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n          + parentQueuePath + CapacitySchedulerConfiguration.DOT\n          + CapacitySchedulerConfiguration.QUEUES;\n      if (newSiblingQueues.size() \u003d\u003d 0) {\n        confUpdate.put(queuesConfig, null);\n      } else {\n        confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n      }\n      for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n          \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n          .entrySet()) {\n        proposedConf.unset(confRemove.getKey());\n        confUpdate.put(confRemove.getKey(), null);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
            "oldMethodName": "removeQueue",
            "newMethodName": "removeQueue"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n   private void removeQueue(\n       String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n       Map\u003cString, String\u003e confUpdate) throws IOException {\n     if (queueToRemove \u003d\u003d null) {\n       return;\n     } else {\n-      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n+      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n       String queueName \u003d queueToRemove.substring(\n           queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n       CSQueue queue \u003d cs.getQueue(queueName);\n       if (queue \u003d\u003d null ||\n           !queue.getQueuePath().equals(queueToRemove)) {\n         throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n       } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n         throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n       }\n       String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n           .lastIndexOf(\u0027.\u0027));\n       String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n       List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n       for (String siblingQueue : siblingQueues) {\n         if (!siblingQueue.equals(queueName)) {\n           newSiblingQueues.add(siblingQueue);\n         }\n       }\n       proposedConf.setQueues(parentQueuePath, newSiblingQueues\n           .toArray(new String[0]));\n-      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX +\n-          parentQueuePath + CapacitySchedulerConfiguration.DOT +\n-          CapacitySchedulerConfiguration.QUEUES;\n+      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n+          + parentQueuePath + CapacitySchedulerConfiguration.DOT\n+          + CapacitySchedulerConfiguration.QUEUES;\n       if (newSiblingQueues.size() \u003d\u003d 0) {\n         confUpdate.put(queuesConfig, null);\n       } else {\n         confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n       }\n       for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n           \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n           .entrySet()) {\n         proposedConf.unset(confRemove.getKey());\n         confUpdate.put(confRemove.getKey(), null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeQueue(\n      String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (queueToRemove \u003d\u003d null) {\n      return;\n    } else {\n      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n      String queueName \u003d queueToRemove.substring(\n          queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n      CSQueue queue \u003d cs.getQueue(queueName);\n      if (queue \u003d\u003d null ||\n          !queue.getQueuePath().equals(queueToRemove)) {\n        throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n      } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n      }\n      String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n          .lastIndexOf(\u0027.\u0027));\n      String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n      List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n      for (String siblingQueue : siblingQueues) {\n        if (!siblingQueue.equals(queueName)) {\n          newSiblingQueues.add(siblingQueue);\n        }\n      }\n      proposedConf.setQueues(parentQueuePath, newSiblingQueues\n          .toArray(new String[0]));\n      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX\n          + parentQueuePath + CapacitySchedulerConfiguration.DOT\n          + CapacitySchedulerConfiguration.QUEUES;\n      if (newSiblingQueues.size() \u003d\u003d 0) {\n        confUpdate.put(queuesConfig, null);\n      } else {\n        confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n      }\n      for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n          \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n          .entrySet()) {\n        proposedConf.unset(confRemove.getKey());\n        confUpdate.put(confRemove.getKey(), null);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/MutableCSConfigurationProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5952. Create REST API for changing YARN scheduler configurations. (Jonathan Hung via wangda)\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,43 @@\n+  private void removeQueue(\n+      String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n+      Map\u003cString, String\u003e confUpdate) throws IOException {\n+    if (queueToRemove \u003d\u003d null) {\n+      return;\n+    } else {\n+      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n+      String queueName \u003d queueToRemove.substring(\n+          queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n+      CSQueue queue \u003d cs.getQueue(queueName);\n+      if (queue \u003d\u003d null ||\n+          !queue.getQueuePath().equals(queueToRemove)) {\n+        throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n+      } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n+        throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n+      }\n+      String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n+          .lastIndexOf(\u0027.\u0027));\n+      String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n+      List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n+      for (String siblingQueue : siblingQueues) {\n+        if (!siblingQueue.equals(queueName)) {\n+          newSiblingQueues.add(siblingQueue);\n+        }\n+      }\n+      proposedConf.setQueues(parentQueuePath, newSiblingQueues\n+          .toArray(new String[0]));\n+      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX +\n+          parentQueuePath + CapacitySchedulerConfiguration.DOT +\n+          CapacitySchedulerConfiguration.QUEUES;\n+      if (newSiblingQueues.size() \u003d\u003d 0) {\n+        confUpdate.put(queuesConfig, null);\n+      } else {\n+        confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n+      }\n+      for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n+          \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n+          .entrySet()) {\n+        proposedConf.unset(confRemove.getKey());\n+        confUpdate.put(confRemove.getKey(), null);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeQueue(\n      String queueToRemove, CapacitySchedulerConfiguration proposedConf,\n      Map\u003cString, String\u003e confUpdate) throws IOException {\n    if (queueToRemove \u003d\u003d null) {\n      return;\n    } else {\n      CapacityScheduler cs \u003d (CapacityScheduler) rm.getResourceScheduler();\n      String queueName \u003d queueToRemove.substring(\n          queueToRemove.lastIndexOf(\u0027.\u0027) + 1);\n      CSQueue queue \u003d cs.getQueue(queueName);\n      if (queue \u003d\u003d null ||\n          !queue.getQueuePath().equals(queueToRemove)) {\n        throw new IOException(\"Queue \" + queueToRemove + \" not found\");\n      } else if (queueToRemove.lastIndexOf(\u0027.\u0027) \u003d\u003d -1) {\n        throw new IOException(\"Can\u0027t remove queue \" + queueToRemove);\n      }\n      String parentQueuePath \u003d queueToRemove.substring(0, queueToRemove\n          .lastIndexOf(\u0027.\u0027));\n      String[] siblingQueues \u003d proposedConf.getQueues(parentQueuePath);\n      List\u003cString\u003e newSiblingQueues \u003d new ArrayList\u003c\u003e();\n      for (String siblingQueue : siblingQueues) {\n        if (!siblingQueue.equals(queueName)) {\n          newSiblingQueues.add(siblingQueue);\n        }\n      }\n      proposedConf.setQueues(parentQueuePath, newSiblingQueues\n          .toArray(new String[0]));\n      String queuesConfig \u003d CapacitySchedulerConfiguration.PREFIX +\n          parentQueuePath + CapacitySchedulerConfiguration.DOT +\n          CapacitySchedulerConfiguration.QUEUES;\n      if (newSiblingQueues.size() \u003d\u003d 0) {\n        confUpdate.put(queuesConfig, null);\n      } else {\n        confUpdate.put(queuesConfig, Joiner.on(\u0027,\u0027).join(newSiblingQueues));\n      }\n      for (Map.Entry\u003cString, String\u003e confRemove : proposedConf.getValByRegex(\n          \".*\" + queueToRemove.replaceAll(\"\\\\.\", \"\\\\.\") + \"\\\\..*\")\n          .entrySet()) {\n        proposedConf.unset(confRemove.getKey());\n        confUpdate.put(confRemove.getKey(), null);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}