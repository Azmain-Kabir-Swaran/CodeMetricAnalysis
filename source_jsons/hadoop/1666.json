{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataTransferSaslUtil.java",
  "functionName": "readSaslMessageWithHandshakeSecret",
  "functionId": "readSaslMessageWithHandshakeSecret___in-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java",
  "functionStartLine": 277,
  "functionEndLine": 296,
  "numCommitsSeen": 8,
  "timeTaken": 1501,
  "changeHistory": [
    "626fec652b9f3dae10c9af78fd220b1240f19fc7"
  ],
  "changeHistoryShort": {
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "626fec652b9f3dae10c9af78fd220b1240f19fc7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13699. Add DFSClient sending handshake token to DataNode, and allow DataNode overwrite downstream QOP. Contributed by Chen Liang.\n",
      "commitDate": "12/04/19 5:37 PM",
      "commitName": "626fec652b9f3dae10c9af78fd220b1240f19fc7",
      "commitAuthor": "Chen Liang",
      "diff": "@@ -0,0 +1,20 @@\n+  public static SaslMessageWithHandshake readSaslMessageWithHandshakeSecret(\n+      InputStream in) throws IOException {\n+    DataTransferEncryptorMessageProto proto \u003d\n+        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n+    if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n+      throw new InvalidEncryptionKeyException(proto.getMessage());\n+    } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n+      throw new IOException(proto.getMessage());\n+    } else {\n+      byte[] payload \u003d proto.getPayload().toByteArray();\n+      byte[] secret \u003d null;\n+      String bpid \u003d null;\n+      if (proto.hasHandshakeSecret()) {\n+        HandshakeSecretProto handshakeSecret \u003d proto.getHandshakeSecret();\n+        secret \u003d handshakeSecret.getSecret().toByteArray();\n+        bpid \u003d handshakeSecret.getBpid();\n+      }\n+      return new SaslMessageWithHandshake(payload, secret, bpid);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SaslMessageWithHandshake readSaslMessageWithHandshakeSecret(\n      InputStream in) throws IOException {\n    DataTransferEncryptorMessageProto proto \u003d\n        DataTransferEncryptorMessageProto.parseFrom(vintPrefixed(in));\n    if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR_UNKNOWN_KEY) {\n      throw new InvalidEncryptionKeyException(proto.getMessage());\n    } else if (proto.getStatus() \u003d\u003d DataTransferEncryptorStatus.ERROR) {\n      throw new IOException(proto.getMessage());\n    } else {\n      byte[] payload \u003d proto.getPayload().toByteArray();\n      byte[] secret \u003d null;\n      String bpid \u003d null;\n      if (proto.hasHandshakeSecret()) {\n        HandshakeSecretProto handshakeSecret \u003d proto.getHandshakeSecret();\n        secret \u003d handshakeSecret.getSecret().toByteArray();\n        bpid \u003d handshakeSecret.getBpid();\n      }\n      return new SaslMessageWithHandshake(payload, secret, bpid);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/DataTransferSaslUtil.java"
    }
  }
}