{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationTagsManager.java",
  "functionName": "getCardinality",
  "functionId": "getCardinality___type-T__tags-Set__String____op-LongBinaryOperator",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
  "functionStartLine": 176,
  "functionEndLine": 214,
  "numCommitsSeen": 14,
  "timeTaken": 3084,
  "changeHistory": [
    "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
    "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
    "801c0988b5ad1eff1e896a2635c2937721c96b04"
  ],
  "changeHistoryShort": {
    "37f1a7b64fcc93191367330cd59d4d71d7b29ac7": "Ymultichange(Yparameterchange,Ybodychange)",
    "06eb63e64b05e2e8bb8a76c15360ab0495f11317": "Yfilerename",
    "801c0988b5ad1eff1e896a2635c2937721c96b04": "Yintroduced"
  },
  "changeHistoryDetails": {
    "37f1a7b64fcc93191367330cd59d4d71d7b29ac7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7653. Node group support for AllocationTagsManager. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7653. Node group support for AllocationTagsManager. (Panagiotis Garefalakis via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    private long getCardinality(NodeId nodeId, Set\u003cString\u003e tags,\n+    private long getCardinality(T type, Set\u003cString\u003e tags,\n         LongBinaryOperator op) {\n-      Map\u003cString, Long\u003e innerMap \u003d nodeToTagsWithCount.get(nodeId);\n+      Map\u003cString, Long\u003e innerMap \u003d typeToTagsWithCount.get(type);\n       if (innerMap \u003d\u003d null) {\n         return 0;\n       }\n \n       long returnValue \u003d 0;\n       boolean firstTag \u003d true;\n \n       if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n         for (String tag : tags) {\n           Long value \u003d innerMap.get(tag);\n           if (value \u003d\u003d null) {\n             value \u003d 0L;\n           }\n \n           if (firstTag) {\n             returnValue \u003d value;\n             firstTag \u003d false;\n             continue;\n           }\n \n           returnValue \u003d op.applyAsLong(returnValue, value);\n         }\n       } else {\n         // Similar to above if, but only iterate values for better performance\n         for (long value : innerMap.values()) {\n           // For the first value, we will not apply op\n           if (firstTag) {\n             returnValue \u003d value;\n             firstTag \u003d false;\n             continue;\n           }\n           returnValue \u003d op.applyAsLong(returnValue, value);\n         }\n       }\n       return returnValue;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private long getCardinality(T type, Set\u003cString\u003e tags,\n        LongBinaryOperator op) {\n      Map\u003cString, Long\u003e innerMap \u003d typeToTagsWithCount.get(type);\n      if (innerMap \u003d\u003d null) {\n        return 0;\n      }\n\n      long returnValue \u003d 0;\n      boolean firstTag \u003d true;\n\n      if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n        for (String tag : tags) {\n          Long value \u003d innerMap.get(tag);\n          if (value \u003d\u003d null) {\n            value \u003d 0L;\n          }\n\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      } else {\n        // Similar to above if, but only iterate values for better performance\n        for (long value : innerMap.values()) {\n          // For the first value, we will not apply op\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      }\n      return returnValue;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {
            "oldValue": "[nodeId-NodeId, tags-Set\u003cString\u003e, op-LongBinaryOperator]",
            "newValue": "[type-T, tags-Set\u003cString\u003e, op-LongBinaryOperator]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7653. Node group support for AllocationTagsManager. (Panagiotis Garefalakis via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    private long getCardinality(NodeId nodeId, Set\u003cString\u003e tags,\n+    private long getCardinality(T type, Set\u003cString\u003e tags,\n         LongBinaryOperator op) {\n-      Map\u003cString, Long\u003e innerMap \u003d nodeToTagsWithCount.get(nodeId);\n+      Map\u003cString, Long\u003e innerMap \u003d typeToTagsWithCount.get(type);\n       if (innerMap \u003d\u003d null) {\n         return 0;\n       }\n \n       long returnValue \u003d 0;\n       boolean firstTag \u003d true;\n \n       if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n         for (String tag : tags) {\n           Long value \u003d innerMap.get(tag);\n           if (value \u003d\u003d null) {\n             value \u003d 0L;\n           }\n \n           if (firstTag) {\n             returnValue \u003d value;\n             firstTag \u003d false;\n             continue;\n           }\n \n           returnValue \u003d op.applyAsLong(returnValue, value);\n         }\n       } else {\n         // Similar to above if, but only iterate values for better performance\n         for (long value : innerMap.values()) {\n           // For the first value, we will not apply op\n           if (firstTag) {\n             returnValue \u003d value;\n             firstTag \u003d false;\n             continue;\n           }\n           returnValue \u003d op.applyAsLong(returnValue, value);\n         }\n       }\n       return returnValue;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private long getCardinality(T type, Set\u003cString\u003e tags,\n        LongBinaryOperator op) {\n      Map\u003cString, Long\u003e innerMap \u003d typeToTagsWithCount.get(type);\n      if (innerMap \u003d\u003d null) {\n        return 0;\n      }\n\n      long returnValue \u003d 0;\n      boolean firstTag \u003d true;\n\n      if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n        for (String tag : tags) {\n          Long value \u003d innerMap.get(tag);\n          if (value \u003d\u003d null) {\n            value \u003d 0L;\n          }\n\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      } else {\n        // Similar to above if, but only iterate values for better performance\n        for (long value : innerMap.values()) {\n          // For the first value, we will not apply op\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      }\n      return returnValue;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "06eb63e64b05e2e8bb8a76c15360ab0495f11317": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7669. API and interface modifications for placement constraint processor. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private long getCardinality(NodeId nodeId, Set\u003cString\u003e tags,\n        LongBinaryOperator op) {\n      Map\u003cString, Long\u003e innerMap \u003d nodeToTagsWithCount.get(nodeId);\n      if (innerMap \u003d\u003d null) {\n        return 0;\n      }\n\n      long returnValue \u003d 0;\n      boolean firstTag \u003d true;\n\n      if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n        for (String tag : tags) {\n          Long value \u003d innerMap.get(tag);\n          if (value \u003d\u003d null) {\n            value \u003d 0L;\n          }\n\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      } else {\n        // Similar to above if, but only iterate values for better performance\n        for (long value : innerMap.values()) {\n          // For the first value, we will not apply op\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      }\n      return returnValue;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/constraint/AllocationTagsManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java"
      }
    },
    "801c0988b5ad1eff1e896a2635c2937721c96b04": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7522. Introduce AllocationTagsManager to associate allocation tags to nodes. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "801c0988b5ad1eff1e896a2635c2937721c96b04",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,39 @@\n+    private long getCardinality(NodeId nodeId, Set\u003cString\u003e tags,\n+        LongBinaryOperator op) {\n+      Map\u003cString, Long\u003e innerMap \u003d nodeToTagsWithCount.get(nodeId);\n+      if (innerMap \u003d\u003d null) {\n+        return 0;\n+      }\n+\n+      long returnValue \u003d 0;\n+      boolean firstTag \u003d true;\n+\n+      if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n+        for (String tag : tags) {\n+          Long value \u003d innerMap.get(tag);\n+          if (value \u003d\u003d null) {\n+            value \u003d 0L;\n+          }\n+\n+          if (firstTag) {\n+            returnValue \u003d value;\n+            firstTag \u003d false;\n+            continue;\n+          }\n+\n+          returnValue \u003d op.applyAsLong(returnValue, value);\n+        }\n+      } else {\n+        // Similar to above if, but only iterate values for better performance\n+        for (long value : innerMap.values()) {\n+          // For the first value, we will not apply op\n+          if (firstTag) {\n+            returnValue \u003d value;\n+            firstTag \u003d false;\n+            continue;\n+          }\n+          returnValue \u003d op.applyAsLong(returnValue, value);\n+        }\n+      }\n+      return returnValue;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private long getCardinality(NodeId nodeId, Set\u003cString\u003e tags,\n        LongBinaryOperator op) {\n      Map\u003cString, Long\u003e innerMap \u003d nodeToTagsWithCount.get(nodeId);\n      if (innerMap \u003d\u003d null) {\n        return 0;\n      }\n\n      long returnValue \u003d 0;\n      boolean firstTag \u003d true;\n\n      if (tags !\u003d null \u0026\u0026 !tags.isEmpty()) {\n        for (String tag : tags) {\n          Long value \u003d innerMap.get(tag);\n          if (value \u003d\u003d null) {\n            value \u003d 0L;\n          }\n\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      } else {\n        // Similar to above if, but only iterate values for better performance\n        for (long value : innerMap.values()) {\n          // For the first value, we will not apply op\n          if (firstTag) {\n            returnValue \u003d value;\n            firstTag \u003d false;\n            continue;\n          }\n          returnValue \u003d op.applyAsLong(returnValue, value);\n        }\n      }\n      return returnValue;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/constraint/AllocationTagsManager.java"
    }
  }
}