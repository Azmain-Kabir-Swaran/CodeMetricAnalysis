{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocatorAMService.java",
  "functionName": "handleNewContainers",
  "functionId": "handleNewContainers___allocContainers-List__Container____isRemotelyAllocated-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
  "functionStartLine": 359,
  "functionEndLine": 372,
  "numCommitsSeen": 27,
  "timeTaken": 2619,
  "changeHistory": [
    "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "10be45986cdf86a89055065b752959bd6369d54f"
  ],
  "changeHistoryShort": {
    "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9164. Shutdown NM may cause NPE when opportunistic container scheduling is enabled. Contributed by lujie.\n",
      "commitDate": "03/01/19 7:56 AM",
      "commitName": "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "31/07/18 11:47 PM",
      "commitNameOld": "a48a0cc7fd8e7ac1c07b260e6078077824f27c35",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 155.38,
      "commitsBetweenForRepo": 1268,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n       boolean isRemotelyAllocated) {\n     for (Container container : allocContainers) {\n       // Create RMContainer\n       RMContainer rmContainer \u003d\n           SchedulerUtils.createOpportunisticRmContainer(\n               rmContext, container, isRemotelyAllocated);\n-      rmContainer.handle(\n-          new RMContainerEvent(container.getId(),\n-              RMContainerEventType.ACQUIRED));\n+      if (rmContainer!\u003dnull) {\n+        rmContainer.handle(\n+            new RMContainerEvent(container.getId(),\n+                RMContainerEventType.ACQUIRED));\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n      boolean isRemotelyAllocated) {\n    for (Container container : allocContainers) {\n      // Create RMContainer\n      RMContainer rmContainer \u003d\n          SchedulerUtils.createOpportunisticRmContainer(\n              rmContext, container, isRemotelyAllocated);\n      if (rmContainer!\u003dnull) {\n        rmContainer.handle(\n            new RMContainerEvent(container.getId(),\n                RMContainerEventType.ACQUIRED));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,12 @@\n   private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n       boolean isRemotelyAllocated) {\n     for (Container container : allocContainers) {\n       // Create RMContainer\n-      SchedulerApplicationAttempt appAttempt \u003d\n-          ((AbstractYarnScheduler) rmContext.getScheduler())\n-              .getCurrentAttemptForContainer(container.getId());\n-      RMContainer rmContainer \u003d new RMContainerImpl(container,\n-          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n-          appAttempt.getUser(), rmContext, isRemotelyAllocated);\n-      appAttempt.addRMContainer(container.getId(), rmContainer);\n-      ((AbstractYarnScheduler) rmContext.getScheduler()).getNode(\n-          container.getNodeId()).allocateContainer(rmContainer);\n+      RMContainer rmContainer \u003d\n+          SchedulerUtils.createOpportunisticRmContainer(\n+              rmContext, container, isRemotelyAllocated);\n       rmContainer.handle(\n           new RMContainerEvent(container.getId(),\n               RMContainerEventType.ACQUIRED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n      boolean isRemotelyAllocated) {\n    for (Container container : allocContainers) {\n      // Create RMContainer\n      RMContainer rmContainer \u003d\n          SchedulerUtils.createOpportunisticRmContainer(\n              rmContext, container, isRemotelyAllocated);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.ACQUIRED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/11/16 12:11 AM",
      "commitNameOld": "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 6.32,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,18 @@\n   private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n                                    boolean isRemotelyAllocated) {\n     for (Container container : allocContainers) {\n       // Create RMContainer\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler) rmContext.getScheduler())\n               .getCurrentAttemptForContainer(container.getId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, isRemotelyAllocated);\n       appAttempt.addRMContainer(container.getId(), rmContainer);\n+      ((AbstractYarnScheduler) rmContext.getScheduler()).getNode(\n+          container.getNodeId()).allocateContainer(rmContainer);\n       rmContainer.handle(\n           new RMContainerEvent(container.getId(),\n-              RMContainerEventType.LAUNCHED));\n+              RMContainerEventType.ACQUIRED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n                                   boolean isRemotelyAllocated) {\n    for (Container container : allocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, isRemotelyAllocated);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      ((AbstractYarnScheduler) rmContext.getScheduler()).getNode(\n          container.getNodeId()).allocateContainer(rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.ACQUIRED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,16 @@\n+  private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n+                                   boolean isRemotelyAllocated) {\n+    for (Container container : allocContainers) {\n+      // Create RMContainer\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler) rmContext.getScheduler())\n+              .getCurrentAttemptForContainer(container.getId());\n+      RMContainer rmContainer \u003d new RMContainerImpl(container,\n+          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n+          appAttempt.getUser(), rmContext, isRemotelyAllocated);\n+      appAttempt.addRMContainer(container.getId(), rmContainer);\n+      rmContainer.handle(\n+          new RMContainerEvent(container.getId(),\n+              RMContainerEventType.LAUNCHED));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleNewContainers(List\u003cContainer\u003e allocContainers,\n                                   boolean isRemotelyAllocated) {\n    for (Container container : allocContainers) {\n      // Create RMContainer\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler) rmContext.getScheduler())\n              .getCurrentAttemptForContainer(container.getId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, isRemotelyAllocated);\n      appAttempt.addRMContainer(container.getId(), rmContainer);\n      rmContainer.handle(\n          new RMContainerEvent(container.getId(),\n              RMContainerEventType.LAUNCHED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java"
    }
  }
}