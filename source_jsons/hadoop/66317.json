{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerMetrics.java",
  "functionName": "registerClusterResourceMetrics",
  "functionId": "registerClusterResourceMetrics",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
  "functionStartLine": 310,
  "functionEndLine": 359,
  "numCommitsSeen": 40,
  "timeTaken": 2504,
  "changeHistory": [
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "819224dcf9c683aa52f58633ac8e13663f1916d8",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "819224dcf9c683aa52f58633ac8e13663f1916d8": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n   private void registerClusterResourceMetrics() {\n     metrics.register(\"variable.cluster.allocated.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0L;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAllocatedMB();\n+        new Gauge\u003cLong\u003e() {\n+          @Override\n+          public Long getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0L;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAllocatedMB();\n+            }\n           }\n         }\n-      }\n     );\n     metrics.register(\"variable.cluster.allocated.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n+        new Gauge\u003cInteger\u003e() {\n+          @Override\n+          public Integer getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n+            }\n           }\n         }\n-      }\n     );\n     metrics.register(\"variable.cluster.available.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0L;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAvailableMB();\n+        new Gauge\u003cLong\u003e() {\n+          @Override\n+          public Long getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0L;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAvailableMB();\n+            }\n           }\n         }\n-      }\n     );\n     metrics.register(\"variable.cluster.available.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+        new Gauge\u003cInteger\u003e() {\n+          @Override\n+          public Integer getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+            }\n           }\n         }\n-      }\n     );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerClusterResourceMetrics() {\n    metrics.register(\"variable.cluster.allocated.memory\",\n        new Gauge\u003cLong\u003e() {\n          @Override\n          public Long getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0L;\n            } else {\n              return scheduler.getRootQueueMetrics().getAllocatedMB();\n            }\n          }\n        }\n    );\n    metrics.register(\"variable.cluster.allocated.vcores\",\n        new Gauge\u003cInteger\u003e() {\n          @Override\n          public Integer getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0;\n            } else {\n              return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n            }\n          }\n        }\n    );\n    metrics.register(\"variable.cluster.available.memory\",\n        new Gauge\u003cLong\u003e() {\n          @Override\n          public Long getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0L;\n            } else {\n              return scheduler.getRootQueueMetrics().getAvailableMB();\n            }\n          }\n        }\n    );\n    metrics.register(\"variable.cluster.available.vcores\",\n        new Gauge\u003cInteger\u003e() {\n          @Override\n          public Integer getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0;\n            } else {\n              return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n            }\n          }\n        }\n    );\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
            "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
            "oldMethodName": "registerClusterResourceMetrics",
            "newMethodName": "registerClusterResourceMetrics"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n   private void registerClusterResourceMetrics() {\n     metrics.register(\"variable.cluster.allocated.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0L;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAllocatedMB();\n+        new Gauge\u003cLong\u003e() {\n+          @Override\n+          public Long getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0L;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAllocatedMB();\n+            }\n           }\n         }\n-      }\n     );\n     metrics.register(\"variable.cluster.allocated.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n+        new Gauge\u003cInteger\u003e() {\n+          @Override\n+          public Integer getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n+            }\n           }\n         }\n-      }\n     );\n     metrics.register(\"variable.cluster.available.memory\",\n-      new Gauge\u003cLong\u003e() {\n-        @Override\n-        public Long getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0L;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAvailableMB();\n+        new Gauge\u003cLong\u003e() {\n+          @Override\n+          public Long getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0L;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAvailableMB();\n+            }\n           }\n         }\n-      }\n     );\n     metrics.register(\"variable.cluster.available.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n-        @Override\n-        public Integer getValue() {\n-          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n-          } else {\n-            return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+        new Gauge\u003cInteger\u003e() {\n+          @Override\n+          public Integer getValue() {\n+            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+              return 0;\n+            } else {\n+              return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+            }\n           }\n         }\n-      }\n     );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerClusterResourceMetrics() {\n    metrics.register(\"variable.cluster.allocated.memory\",\n        new Gauge\u003cLong\u003e() {\n          @Override\n          public Long getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0L;\n            } else {\n              return scheduler.getRootQueueMetrics().getAllocatedMB();\n            }\n          }\n        }\n    );\n    metrics.register(\"variable.cluster.allocated.vcores\",\n        new Gauge\u003cInteger\u003e() {\n          @Override\n          public Integer getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0;\n            } else {\n              return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n            }\n          }\n        }\n    );\n    metrics.register(\"variable.cluster.available.memory\",\n        new Gauge\u003cLong\u003e() {\n          @Override\n          public Long getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0L;\n            } else {\n              return scheduler.getRootQueueMetrics().getAvailableMB();\n            }\n          }\n        }\n    );\n    metrics.register(\"variable.cluster.available.vcores\",\n        new Gauge\u003cInteger\u003e() {\n          @Override\n          public Integer getValue() {\n            if (scheduler.getRootQueueMetrics() \u003d\u003d null) {\n              return 0;\n            } else {\n              return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n            }\n          }\n        }\n    );\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {}
        }
      ]
    },
    "819224dcf9c683aa52f58633ac8e13663f1916d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5270. Solve miscellaneous issues caused by YARN-4844. Contributed by Wangda Tan\n",
      "commitDate": "11/07/16 10:36 PM",
      "commitName": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 43.57,
      "commitsBetweenForRepo": 400,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void registerClusterResourceMetrics() {\n     metrics.register(\"variable.cluster.allocated.memory\",\n       new Gauge\u003cLong\u003e() {\n         @Override\n         public Long getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n             return 0L;\n           } else {\n             return scheduler.getRootQueueMetrics().getAllocatedMB();\n           }\n         }\n       }\n     );\n     metrics.register(\"variable.cluster.allocated.vcores\",\n-      new Gauge\u003cLong\u003e() {\n+      new Gauge\u003cInteger\u003e() {\n         @Override\n-        public Long getValue() {\n+        public Integer getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0L;\n+            return 0;\n           } else {\n             return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n           }\n         }\n       }\n     );\n     metrics.register(\"variable.cluster.available.memory\",\n       new Gauge\u003cLong\u003e() {\n         @Override\n         public Long getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n             return 0L;\n           } else {\n             return scheduler.getRootQueueMetrics().getAvailableMB();\n           }\n         }\n       }\n     );\n     metrics.register(\"variable.cluster.available.vcores\",\n-      new Gauge\u003cLong\u003e() {\n+      new Gauge\u003cInteger\u003e() {\n         @Override\n-        public Long getValue() {\n+        public Integer getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0L;\n+            return 0;\n           } else {\n             return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n           }\n         }\n       }\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerClusterResourceMetrics() {\n    metrics.register(\"variable.cluster.allocated.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0L;\n          } else {\n            return scheduler.getRootQueueMetrics().getAllocatedMB();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.allocated.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0;\n          } else {\n            return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.available.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0L;\n          } else {\n            return scheduler.getRootQueueMetrics().getAvailableMB();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.available.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0;\n          } else {\n            return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n          }\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 131.6,
      "commitsBetweenForRepo": 863,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void registerClusterResourceMetrics() {\n     metrics.register(\"variable.cluster.allocated.memory\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n+        public Long getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n+            return 0L;\n           } else {\n             return scheduler.getRootQueueMetrics().getAllocatedMB();\n           }\n         }\n       }\n     );\n     metrics.register(\"variable.cluster.allocated.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n+        public Long getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n+            return 0L;\n           } else {\n             return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n           }\n         }\n       }\n     );\n     metrics.register(\"variable.cluster.available.memory\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n+        public Long getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n+            return 0L;\n           } else {\n             return scheduler.getRootQueueMetrics().getAvailableMB();\n           }\n         }\n       }\n     );\n     metrics.register(\"variable.cluster.available.vcores\",\n-      new Gauge\u003cInteger\u003e() {\n+      new Gauge\u003cLong\u003e() {\n         @Override\n-        public Integer getValue() {\n+        public Long getValue() {\n           if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n-            return 0;\n+            return 0L;\n           } else {\n             return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n           }\n         }\n       }\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerClusterResourceMetrics() {\n    metrics.register(\"variable.cluster.allocated.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0L;\n          } else {\n            return scheduler.getRootQueueMetrics().getAllocatedMB();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.allocated.vcores\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0L;\n          } else {\n            return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.available.memory\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0L;\n          } else {\n            return scheduler.getRootQueueMetrics().getAvailableMB();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.available.vcores\",\n      new Gauge\u003cLong\u003e() {\n        @Override\n        public Long getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0L;\n          } else {\n            return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n          }\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,50 @@\n+  private void registerClusterResourceMetrics() {\n+    metrics.register(\"variable.cluster.allocated.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+            return 0;\n+          } else {\n+            return scheduler.getRootQueueMetrics().getAllocatedMB();\n+          }\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.cluster.allocated.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+            return 0;\n+          } else {\n+            return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n+          }\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.cluster.available.memory\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+            return 0;\n+          } else {\n+            return scheduler.getRootQueueMetrics().getAvailableMB();\n+          }\n+        }\n+      }\n+    );\n+    metrics.register(\"variable.cluster.available.vcores\",\n+      new Gauge\u003cInteger\u003e() {\n+        @Override\n+        public Integer getValue() {\n+          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n+            return 0;\n+          } else {\n+            return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n+          }\n+        }\n+      }\n+    );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerClusterResourceMetrics() {\n    metrics.register(\"variable.cluster.allocated.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0;\n          } else {\n            return scheduler.getRootQueueMetrics().getAllocatedMB();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.allocated.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0;\n          } else {\n            return scheduler.getRootQueueMetrics().getAllocatedVirtualCores();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.available.memory\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0;\n          } else {\n            return scheduler.getRootQueueMetrics().getAvailableMB();\n          }\n        }\n      }\n    );\n    metrics.register(\"variable.cluster.available.vcores\",\n      new Gauge\u003cInteger\u003e() {\n        @Override\n        public Integer getValue() {\n          if(scheduler \u003d\u003d null || scheduler.getRootQueueMetrics() \u003d\u003d null) {\n            return 0;\n          } else {\n            return scheduler.getRootQueueMetrics().getAvailableVirtualCores();\n          }\n        }\n      }\n    );\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java"
    }
  }
}