{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectorySnapshottableFeature.java",
  "functionName": "computeDiffRecursively",
  "functionId": "computeDiffRecursively___snapshotDir-INodeDirectory(modifiers-final)__node-INode__parentPath-List__byte[]____diffReport-SnapshotDiffInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
  "functionStartLine": 386,
  "functionEndLine": 438,
  "numCommitsSeen": 177,
  "timeTaken": 7199,
  "changeHistory": [
    "d98b881e9ab826eb7b70485d0de2a41ab7345334",
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "075dd45a24398dcdcddd60da995f0dc152eee321",
    "76a621ffd2d66bf012a554f4400091a92a5b473e",
    "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
    "8df119da214babde03e73243c7ca4cfe6d0ca562",
    "cc2f96f655d0fd4121125fc801056571f4a20a2a",
    "9701555899315c94584b24d8717c1d7540a4a491",
    "b1333e5b561d01a010e2e1311e8501879f377bdc",
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
    "66ea187228c899cadf23d10c7032c8efe1aa0df4"
  ],
  "changeHistoryShort": {
    "d98b881e9ab826eb7b70485d0de2a41ab7345334": "Ybodychange",
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "075dd45a24398dcdcddd60da995f0dc152eee321": "Ymultichange(Yparameterchange,Ybodychange)",
    "76a621ffd2d66bf012a554f4400091a92a5b473e": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc": "Ybodychange",
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": "Ybodychange",
    "8df119da214babde03e73243c7ca4cfe6d0ca562": "Ybodychange",
    "cc2f96f655d0fd4121125fc801056571f4a20a2a": "Ymultichange(Yparameterchange,Ybodychange)",
    "9701555899315c94584b24d8717c1d7540a4a491": "Ybodychange",
    "b1333e5b561d01a010e2e1311e8501879f377bdc": "Ybodychange",
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5": "Yparameterchange",
    "66ea187228c899cadf23d10c7032c8efe1aa0df4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d98b881e9ab826eb7b70485d0de2a41ab7345334": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14008. NN should log snapshotdiff report. Contributed by Pranay Singh.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "01/11/18 5:26 PM",
      "commitName": "d98b881e9ab826eb7b70485d0de2a41ab7345334",
      "commitAuthor": "Pranay Singh",
      "commitDateOld": "19/09/18 3:12 AM",
      "commitNameOld": "28ceb34a725cd06d28fb51361c49bb45464f5368",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 43.59,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,53 @@\n   private void computeDiffRecursively(final INodeDirectory snapshotDir,\n       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n+      } else {\n+        diffReport.incrementDirsProcessed();\n       }\n+      long startTime \u003d Time.monotonicNow();\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n+      diffReport.addChildrenListingTime(Time.monotonicNow() - startTime);\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d !diff.containsDeleted(name);\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n           byte[][] renameTargetPath \u003d findRenameTargetPath(\n               snapshotDir, (WithName) child,\n               laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                 laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n           computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n+      diffReport.incrementFilesProcessed();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotDir,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      } else {\n        diffReport.incrementDirsProcessed();\n      }\n      long startTime \u003d Time.monotonicNow();\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      diffReport.addChildrenListingTime(Time.monotonicNow() - startTime);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d !diff.containsDeleted(name);\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotDir, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n      diffReport.incrementFilesProcessed();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
      "extendedDetails": {}
    },
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/02/18 2:46 PM",
      "commitNameOld": "4d1bf33d0fa7689a6f83a9c6e5adaac665c0d5d5",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 31.04,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private void computeDiffRecursively(final INodeDirectory snapshotDir,\n       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n-        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n+        boolean toProcess \u003d !diff.containsDeleted(name);\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n           byte[][] renameTargetPath \u003d findRenameTargetPath(\n               snapshotDir, (WithName) child,\n               laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                 laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n           computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotDir,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d !diff.containsDeleted(name);\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotDir, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
      "extendedDetails": {}
    },
    "075dd45a24398dcdcddd60da995f0dc152eee321": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12544. SnapshotDiff - support diff generation on any snapshot root descendant directory.\n",
      "commitDate": "25/10/17 10:54 AM",
      "commitName": "075dd45a24398dcdcddd60da995f0dc152eee321",
      "commitAuthor": "Manoj Govindassamy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12544. SnapshotDiff - support diff generation on any snapshot root descendant directory.\n",
          "commitDate": "25/10/17 10:54 AM",
          "commitName": "075dd45a24398dcdcddd60da995f0dc152eee321",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "01/08/17 4:28 PM",
          "commitNameOld": "52d7bafcf49916887197436ddb0f08f021d248d9",
          "commitAuthorOld": "Manoj Govindassamy",
          "daysBetweenCommits": 84.77,
          "commitsBetweenForRepo": 753,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n+  private void computeDiffRecursively(final INodeDirectory snapshotDir,\n       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n           byte[][] renameTargetPath \u003d findRenameTargetPath(\n-              snapshotRoot, (WithName) child,\n+              snapshotDir, (WithName) child,\n               laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                 laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n-          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n+          computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotDir,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotDir, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldValue": "[snapshotRoot-INodeDirectory(modifiers-final), node-INode, parentPath-List\u003cbyte[]\u003e, diffReport-SnapshotDiffInfo]",
            "newValue": "[snapshotDir-INodeDirectory(modifiers-final), node-INode, parentPath-List\u003cbyte[]\u003e, diffReport-SnapshotDiffInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12544. SnapshotDiff - support diff generation on any snapshot root descendant directory.\n",
          "commitDate": "25/10/17 10:54 AM",
          "commitName": "075dd45a24398dcdcddd60da995f0dc152eee321",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "01/08/17 4:28 PM",
          "commitNameOld": "52d7bafcf49916887197436ddb0f08f021d248d9",
          "commitAuthorOld": "Manoj Govindassamy",
          "daysBetweenCommits": 84.77,
          "commitsBetweenForRepo": 753,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n+  private void computeDiffRecursively(final INodeDirectory snapshotDir,\n       INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n           byte[][] renameTargetPath \u003d findRenameTargetPath(\n-              snapshotRoot, (WithName) child,\n+              snapshotDir, (WithName) child,\n               laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                 laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n-          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n+          computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotDir,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotDir, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotDir, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "76a621ffd2d66bf012a554f4400091a92a5b473e": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 5:08 PM",
      "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/07/14 5:08 PM",
          "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "07/07/14 1:14 PM",
          "commitNameOld": "4b2ded8202f9d07ba44066650dc4e5c987cbbacc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n-      SnapshotDiffInfo diffReport) {\n+  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n+      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n-          byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n-              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n-                                      laterSnapshot.getId());\n+          byte[][] renameTargetPath \u003d findRenameTargetPath(\n+              snapshotRoot, (WithName) child,\n+              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n+                laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n-          computeDiffRecursively(child, parentPath, diffReport);\n+          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotRoot, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/07/14 5:08 PM",
          "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "07/07/14 1:14 PM",
          "commitNameOld": "4b2ded8202f9d07ba44066650dc4e5c987cbbacc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n-      SnapshotDiffInfo diffReport) {\n+  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n+      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n-          byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n-              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n-                                      laterSnapshot.getId());\n+          byte[][] renameTargetPath \u003d findRenameTargetPath(\n+              snapshotRoot, (WithName) child,\n+              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n+                laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n-          computeDiffRecursively(child, parentPath, diffReport);\n+          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotRoot, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/07/14 5:08 PM",
          "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "07/07/14 1:14 PM",
          "commitNameOld": "4b2ded8202f9d07ba44066650dc4e5c987cbbacc",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,48 @@\n-  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n-      SnapshotDiffInfo diffReport) {\n+  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n+      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n         diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n-          byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n-              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n-                                      laterSnapshot.getId());\n+          byte[][] renameTargetPath \u003d findRenameTargetPath(\n+              snapshotRoot, (WithName) child,\n+              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n+                laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n-          computeDiffRecursively(child, parentPath, diffReport);\n+          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(final INodeDirectory snapshotRoot,\n      INode node, List\u003cbyte[]\u003e parentPath, SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath(\n              snapshotRoot, (WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID :\n                laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(snapshotRoot, child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectorySnapshottableFeature.java",
          "extendedDetails": {
            "oldValue": "[node-INode, parentPath-List\u003cbyte[]\u003e, diffReport-SnapshotDiffInfo]",
            "newValue": "[snapshotRoot-INodeDirectory(modifiers-final), node-INode, parentPath-List\u003cbyte[]\u003e, diffReport-SnapshotDiffInfo]"
          }
        }
      ]
    },
    "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6593. Move SnapshotDiffInfo out of INodeDirectorySnapshottable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 12:59 PM",
      "commitName": "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/06/14 3:59 PM",
      "commitNameOld": "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n-        diffReport.from : diffReport.to;\n+        diffReport.getFrom() : diffReport.getTo();\n     final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n-        diffReport.to : diffReport.from;\n+        diffReport.getTo() : diffReport.getFrom();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n             laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n           .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n         if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n           byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n               laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n                                       laterSnapshot.getId());\n           if (renameTargetPath !\u003d null) {\n             toProcess \u003d true;\n             diffReport.setRenameTarget(child.getId(), renameTargetPath);\n           }\n         }\n         if (toProcess) {\n           parentPath.add(name);\n           computeDiffRecursively(child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       boolean change \u003d file.getFileWithSnapshotFeature()\n           .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getFrom() : diffReport.getTo();\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.getTo() : diffReport.getFrom();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n                                      laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/14 3:59 PM",
      "commitName": "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/06/14 12:06 AM",
      "commitNameOld": "cc9bc8eef78e6bc0ab038102f45712456c62a5eb",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 13.66,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,47 @@\n   private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n-    ChildrenDiff diff \u003d new ChildrenDiff();\n+    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n+        diffReport.from : diffReport.to;\n+    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n+        diffReport.to : diffReport.from;\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n+      final ChildrenDiff diff \u003d new ChildrenDiff();\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n-        boolean change \u003d sf.computeDiffBetweenSnapshots(diffReport.from,\n-            diffReport.to, diff, dir);\n+        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n+            laterSnapshot, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n-      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(\n-          diffReport.isFromEarlier() ? Snapshot.getSnapshotId(diffReport.to) : \n-            Snapshot.getSnapshotId(diffReport.from));\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n+          .getId());\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n-        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n-            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n+        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n+        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n+          byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n+              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n+                                      laterSnapshot.getId());\n+          if (renameTargetPath !\u003d null) {\n+            toProcess \u003d true;\n+            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n+          }\n+        }\n+        if (toProcess) {\n           parentPath.add(name);\n           computeDiffRecursively(child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n-      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n-          : diffReport.to;\n-      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n-          : diffReport.from;\n-      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n-          laterSnapshot);\n+      boolean change \u003d file.getFileWithSnapshotFeature()\n+          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    final Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.from : diffReport.to;\n    final Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ?\n        diffReport.to : diffReport.from;\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      final ChildrenDiff diff \u003d new ChildrenDiff();\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(earlierSnapshot,\n            laterSnapshot, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(earlierSnapshot\n          .getId());\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        boolean toProcess \u003d diff.searchIndex(ListType.DELETED, name) \u003c 0;\n        if (!toProcess \u0026\u0026 child instanceof INodeReference.WithName) {\n          byte[][] renameTargetPath \u003d findRenameTargetPath((WithName) child,\n              laterSnapshot \u003d\u003d null ? Snapshot.CURRENT_STATE_ID : \n                                      laterSnapshot.getId());\n          if (renameTargetPath !\u003d null) {\n            toProcess \u003d true;\n            diffReport.setRenameTarget(child.getId(), renameTargetPath);\n          }\n        }\n        if (toProcess) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      boolean change \u003d file.getFileWithSnapshotFeature()\n          .changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/12/13 2:13 AM",
      "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 24.44,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         boolean change \u003d sf.computeDiffBetweenSnapshots(diffReport.from,\n             diffReport.to, diff, dir);\n         if (change) {\n           diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n-      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n-          .isFromEarlier() ? diffReport.to : diffReport.from);\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(\n+          diffReport.isFromEarlier() ? Snapshot.getSnapshotId(diffReport.to) : \n+            Snapshot.getSnapshotId(diffReport.from));\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n             \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n           parentPath.add(name);\n           computeDiffRecursively(child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(diffReport.from,\n            diffReport.to, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(\n          diffReport.isFromEarlier() ? Snapshot.getSnapshotId(diffReport.to) : \n            Snapshot.getSnapshotId(diffReport.from));\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/12/13 10:17 PM",
      "commitNameOld": "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n-      if (dir instanceof INodeDirectoryWithSnapshot) {\n-        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n-        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n-            diffReport.from, diffReport.to, diff);\n+      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n+      if (sf !\u003d null) {\n+        boolean change \u003d sf.computeDiffBetweenSnapshots(diffReport.from,\n+            diffReport.to, diff, dir);\n         if (change) {\n-          diffReport.addDirDiff(sdir, relativePath, diff);\n+          diffReport.addDirDiff(dir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n             \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n           parentPath.add(name);\n           computeDiffRecursively(child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n       INodeFile file \u003d node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      DirectoryWithSnapshotFeature sf \u003d dir.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        boolean change \u003d sf.computeDiffBetweenSnapshots(diffReport.from,\n            diffReport.to, diff, dir);\n        if (change) {\n          diffReport.addDirDiff(dir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5554. Flatten INodeFile hierarchy: Replace INodeFileWithSnapshot with FileWithSnapshotFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:17 PM",
      "commitName": "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/11/13 12:32 PM",
      "commitNameOld": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       if (dir instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n         boolean change \u003d sdir.computeDiffBetweenSnapshots(\n             diffReport.from, diffReport.to, diff);\n         if (change) {\n           diffReport.addDirDiff(sdir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n             \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n           parentPath.add(name);\n           computeDiffRecursively(child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n-    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof INodeFileWithSnapshot) {\n-      INodeFileWithSnapshot file \u003d (INodeFileWithSnapshot) node.asFile();\n+    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n+      INodeFile file \u003d node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile().isWithSnapshot()) {\n      INodeFile file \u003d node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "8df119da214babde03e73243c7ca4cfe6d0ca562": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5537. Remove FileWithSnapshot interface.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 12:32 PM",
      "commitName": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/11/13 8:49 AM",
      "commitNameOld": "fe67e30bc2794e7ff073cf938ee80eba805d1e69",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 13.15,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n     byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       if (dir instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n         boolean change \u003d sdir.computeDiffBetweenSnapshots(\n             diffReport.from, diffReport.to, diff);\n         if (change) {\n           diffReport.addDirDiff(sdir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n             \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n           parentPath.add(name);\n           computeDiffRecursively(child, parentPath, diffReport);\n           parentPath.remove(parentPath.size() - 1);\n         }\n       }\n-    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n-      FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n+    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof INodeFileWithSnapshot) {\n+      INodeFileWithSnapshot file \u003d (INodeFileWithSnapshot) node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n-        diffReport.addFileDiff(file.asINodeFile(), relativePath);\n+        diffReport.addFileDiff(file, relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof INodeFileWithSnapshot) {\n      INodeFileWithSnapshot file \u003d (INodeFileWithSnapshot) node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file, relativePath);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "cc2f96f655d0fd4121125fc801056571f4a20a2a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 3:21 AM",
      "commitName": "cc2f96f655d0fd4121125fc801056571f4a20a2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/13 3:21 AM",
          "commitName": "cc2f96f655d0fd4121125fc801056571f4a20a2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "18/03/13 11:27 PM",
          "commitNameOld": "9701555899315c94584b24d8717c1d7540a4a491",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.16,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n-  private void computeDiffRecursively(INode node, \n+  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n+    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       if (dir instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n         boolean change \u003d sdir.computeDiffBetweenSnapshots(\n             diffReport.from, diffReport.to, diff);\n         if (change) {\n-          diffReport.addDirDiff(sdir, diff);\n+          diffReport.addDirDiff(sdir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n             \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n-          computeDiffRecursively(child, diffReport);\n+          parentPath.add(name);\n+          computeDiffRecursively(child, parentPath, diffReport);\n+          parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n       FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n-        diffReport.addFileDiff(file.asINodeFile());\n+        diffReport.addFileDiff(file.asINodeFile(), relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile(), relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {
            "oldValue": "[node-INode, diffReport-SnapshotDiffInfo]",
            "newValue": "[node-INode, parentPath-List\u003cbyte[]\u003e, diffReport-SnapshotDiffInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/13 3:21 AM",
          "commitName": "cc2f96f655d0fd4121125fc801056571f4a20a2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "18/03/13 11:27 PM",
          "commitNameOld": "9701555899315c94584b24d8717c1d7540a4a491",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.16,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n-  private void computeDiffRecursively(INode node, \n+  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n+    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       if (dir instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n         boolean change \u003d sdir.computeDiffBetweenSnapshots(\n             diffReport.from, diffReport.to, diff);\n         if (change) {\n-          diffReport.addDirDiff(sdir, diff);\n+          diffReport.addDirDiff(sdir, relativePath, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n         final byte[] name \u003d child.getLocalNameBytes();\n         if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n             \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n-          computeDiffRecursively(child, diffReport);\n+          parentPath.add(name);\n+          computeDiffRecursively(child, parentPath, diffReport);\n+          parentPath.remove(parentPath.size() - 1);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n       FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n-        diffReport.addFileDiff(file.asINodeFile());\n+        diffReport.addFileDiff(file.asINodeFile(), relativePath);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(INode node, List\u003cbyte[]\u003e parentPath,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    byte[][] relativePath \u003d parentPath.toArray(new byte[parentPath.size()][]);\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, relativePath, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          parentPath.add(name);\n          computeDiffRecursively(child, parentPath, diffReport);\n          parentPath.remove(parentPath.size() - 1);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile(), relativePath);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {}
        }
      ]
    },
    "9701555899315c94584b24d8717c1d7540a4a491": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4534. Add INodeReference in order to support rename with snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 11:27 PM",
      "commitName": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/03/13 11:05 PM",
      "commitNameOld": "719c313be12be3afd83b97a5a13dd0585c7f5819",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   private void computeDiffRecursively(INode node, \n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n     if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       if (dir instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n         boolean change \u003d sdir.computeDiffBetweenSnapshots(\n             diffReport.from, diffReport.to, diff);\n         if (change) {\n           diffReport.addDirDiff(sdir, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n-        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n-            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n+        final byte[] name \u003d child.getLocalNameBytes();\n+        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n+            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n           computeDiffRecursively(child, diffReport);\n         }\n       }\n     } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n       FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file.asINodeFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, \n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        final byte[] name \u003d child.getLocalNameBytes();\n        if (diff.searchIndex(ListType.CREATED, name) \u003c 0\n            \u0026\u0026 diff.searchIndex(ListType.DELETED, name) \u003c 0) {\n          computeDiffRecursively(child, diffReport);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "b1333e5b561d01a010e2e1311e8501879f377bdc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4545. With snapshots, FSDirectory.unprotectedSetReplication(..) always changes file replication but it may or may not changes block replication.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1452636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/13 6:23 PM",
      "commitName": "b1333e5b561d01a010e2e1311e8501879f377bdc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/02/13 7:08 PM",
      "commitNameOld": "c7cf85ccb4ff2f58839e113f1baf903a468b606d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.97,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void computeDiffRecursively(INode node, \n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n-    if (node instanceof INodeDirectory) {\n-      INodeDirectory dir \u003d (INodeDirectory) node;\n+    if (node.isDirectory()) {\n+      INodeDirectory dir \u003d node.asDirectory();\n       if (dir instanceof INodeDirectoryWithSnapshot) {\n         INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n         boolean change \u003d sdir.computeDiffBetweenSnapshots(\n             diffReport.from, diffReport.to, diff);\n         if (change) {\n           diffReport.addDirDiff(sdir, diff);\n         }\n       }\n       ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n           .isFromEarlier() ? diffReport.to : diffReport.from);\n       for (INode child : children) {\n         if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n             \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n           computeDiffRecursively(child, diffReport);\n         }\n       }\n-    } else if (node instanceof FileWithSnapshot) {\n-      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n+    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n+      FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n       Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n           : diffReport.to;\n       Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n           : diffReport.from;\n       boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n           laterSnapshot);\n       if (change) {\n         diffReport.addFileDiff(file.asINodeFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffRecursively(INode node, \n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n          computeDiffRecursively(child, diffReport);\n        }\n      }\n    } else if (node.isFile() \u0026\u0026 node.asFile() instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node.asFile();\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {}
    },
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/13 3:07 PM",
      "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/13 3:07 PM",
          "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 2:00 PM",
          "commitNameOld": "d42d0860cb670c8284bb298029cd6f8f59db9510",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,34 @@\n-  private void computeDiffInDir(INodeDirectory dir,\n+  private void computeDiffRecursively(INode node, \n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n-    if (dir instanceof INodeDirectoryWithSnapshot) {\n-      boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n-          .computeDiffBetweenSnapshots(diffReport.from,\n-              diffReport.to, diff);\n-      if (change) {\n-        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n-            diff); \n+    if (node instanceof INodeDirectory) {\n+      INodeDirectory dir \u003d (INodeDirectory) node;\n+      if (dir instanceof INodeDirectoryWithSnapshot) {\n+        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n+        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n+            diffReport.from, diffReport.to, diff);\n+        if (change) {\n+          diffReport.addDirDiff(sdir, diff);\n+        }\n       }\n-    }\n-    ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n-    for (INode child : children) {\n-      if (child instanceof INodeDirectory\n-          \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n-        // Compute diff recursively for children that are directories. We do not\n-        // need to compute diff for those contained in the created list since \n-        // directory contained in the created list must be new created.\n-        computeDiffInDir((INodeDirectory) child, diffReport);\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n+          .isFromEarlier() ? diffReport.to : diffReport.from);\n+      for (INode child : children) {\n+        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n+            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n+          computeDiffRecursively(child, diffReport);\n+        }\n+      }\n+    } else if (node instanceof FileWithSnapshot) {\n+      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n+      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n+          : diffReport.to;\n+      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n+          : diffReport.from;\n+      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n+          laterSnapshot);\n+      if (change) {\n+        diffReport.addFileDiff(file.asINodeFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(INode node, \n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (node instanceof INodeDirectory) {\n      INodeDirectory dir \u003d (INodeDirectory) node;\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n          computeDiffRecursively(child, diffReport);\n        }\n      }\n    } else if (node instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {
            "oldValue": "computeDiffInDir",
            "newValue": "computeDiffRecursively"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/13 3:07 PM",
          "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 2:00 PM",
          "commitNameOld": "d42d0860cb670c8284bb298029cd6f8f59db9510",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,34 @@\n-  private void computeDiffInDir(INodeDirectory dir,\n+  private void computeDiffRecursively(INode node, \n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n-    if (dir instanceof INodeDirectoryWithSnapshot) {\n-      boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n-          .computeDiffBetweenSnapshots(diffReport.from,\n-              diffReport.to, diff);\n-      if (change) {\n-        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n-            diff); \n+    if (node instanceof INodeDirectory) {\n+      INodeDirectory dir \u003d (INodeDirectory) node;\n+      if (dir instanceof INodeDirectoryWithSnapshot) {\n+        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n+        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n+            diffReport.from, diffReport.to, diff);\n+        if (change) {\n+          diffReport.addDirDiff(sdir, diff);\n+        }\n       }\n-    }\n-    ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n-    for (INode child : children) {\n-      if (child instanceof INodeDirectory\n-          \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n-        // Compute diff recursively for children that are directories. We do not\n-        // need to compute diff for those contained in the created list since \n-        // directory contained in the created list must be new created.\n-        computeDiffInDir((INodeDirectory) child, diffReport);\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n+          .isFromEarlier() ? diffReport.to : diffReport.from);\n+      for (INode child : children) {\n+        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n+            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n+          computeDiffRecursively(child, diffReport);\n+        }\n+      }\n+    } else if (node instanceof FileWithSnapshot) {\n+      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n+      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n+          : diffReport.to;\n+      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n+          : diffReport.from;\n+      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n+          laterSnapshot);\n+      if (change) {\n+        diffReport.addFileDiff(file.asINodeFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(INode node, \n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (node instanceof INodeDirectory) {\n      INodeDirectory dir \u003d (INodeDirectory) node;\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n          computeDiffRecursively(child, diffReport);\n        }\n      }\n    } else if (node instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {
            "oldValue": "[dir-INodeDirectory, diffReport-SnapshotDiffInfo]",
            "newValue": "[node-INode, diffReport-SnapshotDiffInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/13 3:07 PM",
          "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 2:00 PM",
          "commitNameOld": "d42d0860cb670c8284bb298029cd6f8f59db9510",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,34 @@\n-  private void computeDiffInDir(INodeDirectory dir,\n+  private void computeDiffRecursively(INode node, \n       SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n-    if (dir instanceof INodeDirectoryWithSnapshot) {\n-      boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n-          .computeDiffBetweenSnapshots(diffReport.from,\n-              diffReport.to, diff);\n-      if (change) {\n-        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n-            diff); \n+    if (node instanceof INodeDirectory) {\n+      INodeDirectory dir \u003d (INodeDirectory) node;\n+      if (dir instanceof INodeDirectoryWithSnapshot) {\n+        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n+        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n+            diffReport.from, diffReport.to, diff);\n+        if (change) {\n+          diffReport.addDirDiff(sdir, diff);\n+        }\n       }\n-    }\n-    ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n-    for (INode child : children) {\n-      if (child instanceof INodeDirectory\n-          \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n-        // Compute diff recursively for children that are directories. We do not\n-        // need to compute diff for those contained in the created list since \n-        // directory contained in the created list must be new created.\n-        computeDiffInDir((INodeDirectory) child, diffReport);\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n+          .isFromEarlier() ? diffReport.to : diffReport.from);\n+      for (INode child : children) {\n+        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n+            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n+          computeDiffRecursively(child, diffReport);\n+        }\n+      }\n+    } else if (node instanceof FileWithSnapshot) {\n+      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n+      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n+          : diffReport.to;\n+      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n+          : diffReport.from;\n+      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n+          laterSnapshot);\n+      if (change) {\n+        diffReport.addFileDiff(file.asINodeFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void computeDiffRecursively(INode node, \n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (node instanceof INodeDirectory) {\n      INodeDirectory dir \u003d (INodeDirectory) node;\n      if (dir instanceof INodeDirectoryWithSnapshot) {\n        INodeDirectoryWithSnapshot sdir \u003d (INodeDirectoryWithSnapshot) dir;\n        boolean change \u003d sdir.computeDiffBetweenSnapshots(\n            diffReport.from, diffReport.to, diff);\n        if (change) {\n          diffReport.addDirDiff(sdir, diff);\n        }\n      }\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(diffReport\n          .isFromEarlier() ? diffReport.to : diffReport.from);\n      for (INode child : children) {\n        if (diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null\n            \u0026\u0026 diff.searchDeleted(child.getLocalNameBytes()) \u003d\u003d null) {\n          computeDiffRecursively(child, diffReport);\n        }\n      }\n    } else if (node instanceof FileWithSnapshot) {\n      FileWithSnapshot file \u003d (FileWithSnapshot) node;\n      Snapshot earlierSnapshot \u003d diffReport.isFromEarlier() ? diffReport.from\n          : diffReport.to;\n      Snapshot laterSnapshot \u003d diffReport.isFromEarlier() ? diffReport.to\n          : diffReport.from;\n      boolean change \u003d file.getDiffs().changedBetweenSnapshots(earlierSnapshot,\n          laterSnapshot);\n      if (change) {\n        diffReport.addFileDiff(file.asINodeFile());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
          "extendedDetails": {}
        }
      ]
    },
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-4414. Add support for getting snapshot diff from DistributedFileSystem. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/13 12:39 PM",
      "commitName": "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/02/13 5:53 PM",
      "commitNameOld": "e7db60fbfcc222b32d610ffd912683494674ad2f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void computeDiffInDir(INodeDirectory dir,\n-      SnapshotDiffReport diffReport) {\n+      SnapshotDiffInfo diffReport) {\n     ChildrenDiff diff \u003d new ChildrenDiff();\n     if (dir instanceof INodeDirectoryWithSnapshot) {\n       boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n           .computeDiffBetweenSnapshots(diffReport.from,\n               diffReport.to, diff);\n       if (change) {\n         diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n             diff); \n       }\n     }\n     ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n     for (INode child : children) {\n       if (child instanceof INodeDirectory\n           \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n         // Compute diff recursively for children that are directories. We do not\n         // need to compute diff for those contained in the created list since \n         // directory contained in the created list must be new created.\n         computeDiffInDir((INodeDirectory) child, diffReport);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffInDir(INodeDirectory dir,\n      SnapshotDiffInfo diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (dir instanceof INodeDirectoryWithSnapshot) {\n      boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n          .computeDiffBetweenSnapshots(diffReport.from,\n              diffReport.to, diff);\n      if (change) {\n        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n            diff); \n      }\n    }\n    ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n    for (INode child : children) {\n      if (child instanceof INodeDirectory\n          \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n        // Compute diff recursively for children that are directories. We do not\n        // need to compute diff for those contained in the created list since \n        // directory contained in the created list must be new created.\n        computeDiffInDir((INodeDirectory) child, diffReport);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java",
      "extendedDetails": {
        "oldValue": "[dir-INodeDirectory, diffReport-SnapshotDiffReport]",
        "newValue": "[dir-INodeDirectory, diffReport-SnapshotDiffInfo]"
      }
    },
    "66ea187228c899cadf23d10c7032c8efe1aa0df4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4131. Add capability to namenode to get snapshot diff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440152 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 1:31 PM",
      "commitName": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,23 @@\n+  private void computeDiffInDir(INodeDirectory dir,\n+      SnapshotDiffReport diffReport) {\n+    ChildrenDiff diff \u003d new ChildrenDiff();\n+    if (dir instanceof INodeDirectoryWithSnapshot) {\n+      boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n+          .computeDiffBetweenSnapshots(diffReport.from,\n+              diffReport.to, diff);\n+      if (change) {\n+        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n+            diff); \n+      }\n+    }\n+    ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n+    for (INode child : children) {\n+      if (child instanceof INodeDirectory\n+          \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n+        // Compute diff recursively for children that are directories. We do not\n+        // need to compute diff for those contained in the created list since \n+        // directory contained in the created list must be new created.\n+        computeDiffInDir((INodeDirectory) child, diffReport);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeDiffInDir(INodeDirectory dir,\n      SnapshotDiffReport diffReport) {\n    ChildrenDiff diff \u003d new ChildrenDiff();\n    if (dir instanceof INodeDirectoryWithSnapshot) {\n      boolean change \u003d ((INodeDirectoryWithSnapshot) dir)\n          .computeDiffBetweenSnapshots(diffReport.from,\n              diffReport.to, diff);\n      if (change) {\n        diffReport.addDiff((INodeDirectoryWithSnapshot) dir,\n            diff); \n      }\n    }\n    ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n    for (INode child : children) {\n      if (child instanceof INodeDirectory\n          \u0026\u0026 diff.searchCreated(child.getLocalNameBytes()) \u003d\u003d null) {\n        // Compute diff recursively for children that are directories. We do not\n        // need to compute diff for those contained in the created list since \n        // directory contained in the created list must be new created.\n        computeDiffInDir((INodeDirectory) child, diffReport);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectorySnapshottable.java"
    }
  }
}