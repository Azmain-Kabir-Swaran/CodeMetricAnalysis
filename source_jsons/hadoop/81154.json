{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SocketIOWithTimeout.java",
  "functionName": "doIO",
  "functionId": "doIO___buf-ByteBuffer__ops-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
  "functionStartLine": 125,
  "functionEndLine": 171,
  "numCommitsSeen": 11,
  "timeTaken": 819,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  int doIO(ByteBuffer buf, int ops) throws IOException {\n    \n    /* For now only one thread is allowed. If user want to read or write\n     * from multiple threads, multiple streams could be created. In that\n     * case multiple threads work as well as underlying channel supports it.\n     */\n    if (!buf.hasRemaining()) {\n      throw new IllegalArgumentException(\"Buffer has no data left.\");\n      //or should we just return 0?\n    }\n\n    while (buf.hasRemaining()) {\n      if (closed) {\n        return -1;\n      }\n\n      try {\n        int n \u003d performIO(buf);\n        if (n !\u003d 0) {\n          // successful io or an error.\n          return n;\n        }\n      } catch (IOException e) {\n        if (!channel.isOpen()) {\n          closed \u003d true;\n        }\n        throw e;\n      }\n\n      //now wait for socket to be ready.\n      int count \u003d 0;\n      try {\n        count \u003d selector.select(channel, ops, timeout);  \n      } catch (IOException e) { //unexpected IOException.\n        closed \u003d true;\n        throw e;\n      } \n\n      if (count \u003d\u003d 0) {\n        throw new SocketTimeoutException(timeoutExceptionString(channel,\n                                                                timeout, ops));\n      }\n      // otherwise the socket should be ready for io.\n    }\n    \n    return 0; // does not reach here.\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  int doIO(ByteBuffer buf, int ops) throws IOException {\n    \n    /* For now only one thread is allowed. If user want to read or write\n     * from multiple threads, multiple streams could be created. In that\n     * case multiple threads work as well as underlying channel supports it.\n     */\n    if (!buf.hasRemaining()) {\n      throw new IllegalArgumentException(\"Buffer has no data left.\");\n      //or should we just return 0?\n    }\n\n    while (buf.hasRemaining()) {\n      if (closed) {\n        return -1;\n      }\n\n      try {\n        int n \u003d performIO(buf);\n        if (n !\u003d 0) {\n          // successful io or an error.\n          return n;\n        }\n      } catch (IOException e) {\n        if (!channel.isOpen()) {\n          closed \u003d true;\n        }\n        throw e;\n      }\n\n      //now wait for socket to be ready.\n      int count \u003d 0;\n      try {\n        count \u003d selector.select(channel, ops, timeout);  \n      } catch (IOException e) { //unexpected IOException.\n        closed \u003d true;\n        throw e;\n      } \n\n      if (count \u003d\u003d 0) {\n        throw new SocketTimeoutException(timeoutExceptionString(channel,\n                                                                timeout, ops));\n      }\n      // otherwise the socket should be ready for io.\n    }\n    \n    return 0; // does not reach here.\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  int doIO(ByteBuffer buf, int ops) throws IOException {\n    \n    /* For now only one thread is allowed. If user want to read or write\n     * from multiple threads, multiple streams could be created. In that\n     * case multiple threads work as well as underlying channel supports it.\n     */\n    if (!buf.hasRemaining()) {\n      throw new IllegalArgumentException(\"Buffer has no data left.\");\n      //or should we just return 0?\n    }\n\n    while (buf.hasRemaining()) {\n      if (closed) {\n        return -1;\n      }\n\n      try {\n        int n \u003d performIO(buf);\n        if (n !\u003d 0) {\n          // successful io or an error.\n          return n;\n        }\n      } catch (IOException e) {\n        if (!channel.isOpen()) {\n          closed \u003d true;\n        }\n        throw e;\n      }\n\n      //now wait for socket to be ready.\n      int count \u003d 0;\n      try {\n        count \u003d selector.select(channel, ops, timeout);  \n      } catch (IOException e) { //unexpected IOException.\n        closed \u003d true;\n        throw e;\n      } \n\n      if (count \u003d\u003d 0) {\n        throw new SocketTimeoutException(timeoutExceptionString(channel,\n                                                                timeout, ops));\n      }\n      // otherwise the socket should be ready for io.\n    }\n    \n    return 0; // does not reach here.\n  }",
      "path": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,47 @@\n+  int doIO(ByteBuffer buf, int ops) throws IOException {\n+    \n+    /* For now only one thread is allowed. If user want to read or write\n+     * from multiple threads, multiple streams could be created. In that\n+     * case multiple threads work as well as underlying channel supports it.\n+     */\n+    if (!buf.hasRemaining()) {\n+      throw new IllegalArgumentException(\"Buffer has no data left.\");\n+      //or should we just return 0?\n+    }\n+\n+    while (buf.hasRemaining()) {\n+      if (closed) {\n+        return -1;\n+      }\n+\n+      try {\n+        int n \u003d performIO(buf);\n+        if (n !\u003d 0) {\n+          // successful io or an error.\n+          return n;\n+        }\n+      } catch (IOException e) {\n+        if (!channel.isOpen()) {\n+          closed \u003d true;\n+        }\n+        throw e;\n+      }\n+\n+      //now wait for socket to be ready.\n+      int count \u003d 0;\n+      try {\n+        count \u003d selector.select(channel, ops, timeout);  \n+      } catch (IOException e) { //unexpected IOException.\n+        closed \u003d true;\n+        throw e;\n+      } \n+\n+      if (count \u003d\u003d 0) {\n+        throw new SocketTimeoutException(timeoutExceptionString(channel,\n+                                                                timeout, ops));\n+      }\n+      // otherwise the socket should be ready for io.\n+    }\n+    \n+    return 0; // does not reach here.\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int doIO(ByteBuffer buf, int ops) throws IOException {\n    \n    /* For now only one thread is allowed. If user want to read or write\n     * from multiple threads, multiple streams could be created. In that\n     * case multiple threads work as well as underlying channel supports it.\n     */\n    if (!buf.hasRemaining()) {\n      throw new IllegalArgumentException(\"Buffer has no data left.\");\n      //or should we just return 0?\n    }\n\n    while (buf.hasRemaining()) {\n      if (closed) {\n        return -1;\n      }\n\n      try {\n        int n \u003d performIO(buf);\n        if (n !\u003d 0) {\n          // successful io or an error.\n          return n;\n        }\n      } catch (IOException e) {\n        if (!channel.isOpen()) {\n          closed \u003d true;\n        }\n        throw e;\n      }\n\n      //now wait for socket to be ready.\n      int count \u003d 0;\n      try {\n        count \u003d selector.select(channel, ops, timeout);  \n      } catch (IOException e) { //unexpected IOException.\n        closed \u003d true;\n        throw e;\n      } \n\n      if (count \u003d\u003d 0) {\n        throw new SocketTimeoutException(timeoutExceptionString(channel,\n                                                                timeout, ops));\n      }\n      // otherwise the socket should be ready for io.\n    }\n    \n    return 0; // does not reach here.\n  }",
      "path": "src/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
    }
  }
}