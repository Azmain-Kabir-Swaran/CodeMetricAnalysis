{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Dispatcher.java",
  "functionName": "executePendingMove",
  "functionId": "executePendingMove___p-PendingMove(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
  "functionStartLine": 1129,
  "functionEndLine": 1151,
  "numCommitsSeen": 50,
  "timeTaken": 2988,
  "changeHistory": [
    "8e3a992eccff26a7344c3f0e719898fa97706b8c",
    "9cbbd1eae893b21212c9bc9e6745c6859317a667",
    "b56daff6a186599764b046248565918b894ec116",
    "673280df24f0228bf01777035ceeab8807da8c40"
  ],
  "changeHistoryShort": {
    "8e3a992eccff26a7344c3f0e719898fa97706b8c": "Ybodychange",
    "9cbbd1eae893b21212c9bc9e6745c6859317a667": "Ybodychange",
    "b56daff6a186599764b046248565918b894ec116": "Ybodychange",
    "673280df24f0228bf01777035ceeab8807da8c40": "Ybodychange"
  },
  "changeHistoryDetails": {
    "8e3a992eccff26a7344c3f0e719898fa97706b8c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11742. Improve balancer usability after HDFS-8818. Contributed by Kihwal Lee\n",
      "commitDate": "21/07/17 7:14 AM",
      "commitName": "8e3a992eccff26a7344c3f0e719898fa97706b8c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "05/05/17 12:01 PM",
      "commitNameOld": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 76.8,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void executePendingMove(final PendingMove p) {\n     // move the reportedBlock\n     final DDatanode targetDn \u003d p.target.getDDatanode();\n     ExecutorService moveExecutor \u003d targetDn.getMoveExecutor();\n     if (moveExecutor \u003d\u003d null) {\n-      final int nThreads \u003d moverThreadAllocator.allocate(maxConcurrentMovesPerNode);\n+      final int nThreads \u003d moverThreadAllocator.allocate();\n       if (nThreads \u003e 0) {\n         moveExecutor \u003d targetDn.initMoveExecutor(nThreads);\n       }\n     }\n     if (moveExecutor \u003d\u003d null) {\n       LOG.warn(\"No mover threads available: skip moving \" + p);\n       targetDn.removePendingBlock(p);\n       p.proxySource.removePendingBlock(p);\n       return;\n     }\n     moveExecutor.execute(new Runnable() {\n       @Override\n       public void run() {\n         p.dispatch();\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void executePendingMove(final PendingMove p) {\n    // move the reportedBlock\n    final DDatanode targetDn \u003d p.target.getDDatanode();\n    ExecutorService moveExecutor \u003d targetDn.getMoveExecutor();\n    if (moveExecutor \u003d\u003d null) {\n      final int nThreads \u003d moverThreadAllocator.allocate();\n      if (nThreads \u003e 0) {\n        moveExecutor \u003d targetDn.initMoveExecutor(nThreads);\n      }\n    }\n    if (moveExecutor \u003d\u003d null) {\n      LOG.warn(\"No mover threads available: skip moving \" + p);\n      targetDn.removePendingBlock(p);\n      p.proxySource.removePendingBlock(p);\n      return;\n    }\n    moveExecutor.execute(new Runnable() {\n      @Override\n      public void run() {\n        p.dispatch();\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "9cbbd1eae893b21212c9bc9e6745c6859317a667": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11377. Balancer hung due to no available mover threads. Contributed by yunjiong zhao.\n",
      "commitDate": "05/02/17 9:15 PM",
      "commitName": "9cbbd1eae893b21212c9bc9e6745c6859317a667",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 18.32,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   public void executePendingMove(final PendingMove p) {\n     // move the reportedBlock\n     final DDatanode targetDn \u003d p.target.getDDatanode();\n     ExecutorService moveExecutor \u003d targetDn.getMoveExecutor();\n     if (moveExecutor \u003d\u003d null) {\n       final int nThreads \u003d moverThreadAllocator.allocate(maxConcurrentMovesPerNode);\n       if (nThreads \u003e 0) {\n         moveExecutor \u003d targetDn.initMoveExecutor(nThreads);\n       }\n     }\n     if (moveExecutor \u003d\u003d null) {\n       LOG.warn(\"No mover threads available: skip moving \" + p);\n+      targetDn.removePendingBlock(p);\n+      p.proxySource.removePendingBlock(p);\n       return;\n     }\n     moveExecutor.execute(new Runnable() {\n       @Override\n       public void run() {\n         p.dispatch();\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void executePendingMove(final PendingMove p) {\n    // move the reportedBlock\n    final DDatanode targetDn \u003d p.target.getDDatanode();\n    ExecutorService moveExecutor \u003d targetDn.getMoveExecutor();\n    if (moveExecutor \u003d\u003d null) {\n      final int nThreads \u003d moverThreadAllocator.allocate(maxConcurrentMovesPerNode);\n      if (nThreads \u003e 0) {\n        moveExecutor \u003d targetDn.initMoveExecutor(nThreads);\n      }\n    }\n    if (moveExecutor \u003d\u003d null) {\n      LOG.warn(\"No mover threads available: skip moving \" + p);\n      targetDn.removePendingBlock(p);\n      p.proxySource.removePendingBlock(p);\n      return;\n    }\n    moveExecutor.execute(new Runnable() {\n      @Override\n      public void run() {\n        p.dispatch();\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "b56daff6a186599764b046248565918b894ec116": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8818. Changes the global moveExecutor to per datanode executors and changes MAX_SIZE_TO_MOVE to be configurable.\n",
      "commitDate": "10/08/15 4:52 PM",
      "commitName": "b56daff6a186599764b046248565918b894ec116",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "13/07/15 3:12 PM",
      "commitNameOld": "9ef03a4c5bb5573eadc7d04e371c4af2dc6bae37",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 28.07,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,22 @@\n   public void executePendingMove(final PendingMove p) {\n     // move the block\n+    final DDatanode targetDn \u003d p.target.getDDatanode();\n+    ExecutorService moveExecutor \u003d targetDn.getMoveExecutor();\n+    if (moveExecutor \u003d\u003d null) {\n+      final int nThreads \u003d moverThreadAllocator.allocate(maxConcurrentMovesPerNode);\n+      if (nThreads \u003e 0) {\n+        moveExecutor \u003d targetDn.initMoveExecutor(nThreads);\n+      }\n+    }\n+    if (moveExecutor \u003d\u003d null) {\n+      LOG.warn(\"No mover threads available: skip moving \" + p);\n+      return;\n+    }\n+\n     moveExecutor.execute(new Runnable() {\n       @Override\n       public void run() {\n         p.dispatch();\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void executePendingMove(final PendingMove p) {\n    // move the block\n    final DDatanode targetDn \u003d p.target.getDDatanode();\n    ExecutorService moveExecutor \u003d targetDn.getMoveExecutor();\n    if (moveExecutor \u003d\u003d null) {\n      final int nThreads \u003d moverThreadAllocator.allocate(maxConcurrentMovesPerNode);\n      if (nThreads \u003e 0) {\n        moveExecutor \u003d targetDn.initMoveExecutor(nThreads);\n      }\n    }\n    if (moveExecutor \u003d\u003d null) {\n      LOG.warn(\"No mover threads available: skip moving \" + p);\n      return;\n    }\n\n    moveExecutor.execute(new Runnable() {\n      @Override\n      public void run() {\n        p.dispatch();\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    },
    "673280df24f0228bf01777035ceeab8807da8c40": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7621. Erasure Coding: update the Balancer/Mover data migration logic. Contributed by Walter Su.\n",
      "commitDate": "03/06/15 11:51 AM",
      "commitName": "673280df24f0228bf01777035ceeab8807da8c40",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "05/05/15 3:41 PM",
      "commitNameOld": "4da8490b512a33a255ed27309860859388d7c168",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 28.84,
      "commitsBetweenForRepo": 380,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n   public void executePendingMove(final PendingMove p) {\n-    // move the block\n+    // move the reportedBlock\n     moveExecutor.execute(new Runnable() {\n       @Override\n       public void run() {\n         p.dispatch();\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void executePendingMove(final PendingMove p) {\n    // move the reportedBlock\n    moveExecutor.execute(new Runnable() {\n      @Override\n      public void run() {\n        p.dispatch();\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Dispatcher.java",
      "extendedDetails": {}
    }
  }
}