{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OCIContainerRuntime.java",
  "functionName": "initiateCsiClients",
  "functionId": "initiateCsiClients___config-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/OCIContainerRuntime.java",
  "functionStartLine": 350,
  "functionEndLine": 370,
  "numCommitsSeen": 90,
  "timeTaken": 3528,
  "changeHistory": [
    "29465bf169a7e348a4f32265083450faf66d5631",
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d"
  ],
  "changeHistoryShort": {
    "29465bf169a7e348a4f32265083450faf66d5631": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29465bf169a7e348a4f32265083450faf66d5631": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
      "commitDate": "28/06/19 2:18 PM",
      "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
          "commitDate": "28/06/19 2:18 PM",
          "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "28/06/19 2:05 PM",
          "commitNameOld": "49c5e8ac249981b533763d1523e72872748e3f79",
          "commitAuthorOld": "Bharat Viswanadham",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  private void initiateCsiClients(Configuration config)\n+  protected void initiateCsiClients(Configuration config)\n       throws ContainerExecutionException {\n     String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n     if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n       for (String driverName : driverNames) {\n         try {\n           // find out the adaptors service address\n           InetSocketAddress adaptorServiceAddress \u003d\n               CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n           LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n               + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n           CsiAdaptorProtocolPBClientImpl client \u003d\n               new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                   config);\n           csiClients.put(driverName, client);\n-        } catch (IOException e1) {\n+        } catch (IOException | YarnException e1) {\n           throw new ContainerExecutionException(e1.getMessage());\n-        } catch (YarnException e2) {\n-          throw new ContainerExecutionException(e2.getMessage());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initiateCsiClients(Configuration config)\n      throws ContainerExecutionException {\n    String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n    if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n      for (String driverName : driverNames) {\n        try {\n          // find out the adaptors service address\n          InetSocketAddress adaptorServiceAddress \u003d\n              CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n          LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n              + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n          CsiAdaptorProtocolPBClientImpl client \u003d\n              new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                  config);\n          csiClients.put(driverName, client);\n        } catch (IOException | YarnException e1) {\n          throw new ContainerExecutionException(e1.getMessage());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/OCIContainerRuntime.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/OCIContainerRuntime.java",
            "oldMethodName": "initiateCsiClients",
            "newMethodName": "initiateCsiClients"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
          "commitDate": "28/06/19 2:18 PM",
          "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "28/06/19 2:05 PM",
          "commitNameOld": "49c5e8ac249981b533763d1523e72872748e3f79",
          "commitAuthorOld": "Bharat Viswanadham",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  private void initiateCsiClients(Configuration config)\n+  protected void initiateCsiClients(Configuration config)\n       throws ContainerExecutionException {\n     String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n     if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n       for (String driverName : driverNames) {\n         try {\n           // find out the adaptors service address\n           InetSocketAddress adaptorServiceAddress \u003d\n               CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n           LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n               + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n           CsiAdaptorProtocolPBClientImpl client \u003d\n               new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                   config);\n           csiClients.put(driverName, client);\n-        } catch (IOException e1) {\n+        } catch (IOException | YarnException e1) {\n           throw new ContainerExecutionException(e1.getMessage());\n-        } catch (YarnException e2) {\n-          throw new ContainerExecutionException(e2.getMessage());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initiateCsiClients(Configuration config)\n      throws ContainerExecutionException {\n    String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n    if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n      for (String driverName : driverNames) {\n        try {\n          // find out the adaptors service address\n          InetSocketAddress adaptorServiceAddress \u003d\n              CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n          LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n              + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n          CsiAdaptorProtocolPBClientImpl client \u003d\n              new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                  config);\n          csiClients.put(driverName, client);\n        } catch (IOException | YarnException e1) {\n          throw new ContainerExecutionException(e1.getMessage());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/OCIContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
          "commitDate": "28/06/19 2:18 PM",
          "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "28/06/19 2:05 PM",
          "commitNameOld": "49c5e8ac249981b533763d1523e72872748e3f79",
          "commitAuthorOld": "Bharat Viswanadham",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,21 @@\n-  private void initiateCsiClients(Configuration config)\n+  protected void initiateCsiClients(Configuration config)\n       throws ContainerExecutionException {\n     String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n     if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n       for (String driverName : driverNames) {\n         try {\n           // find out the adaptors service address\n           InetSocketAddress adaptorServiceAddress \u003d\n               CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n           LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n               + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n           CsiAdaptorProtocolPBClientImpl client \u003d\n               new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                   config);\n           csiClients.put(driverName, client);\n-        } catch (IOException e1) {\n+        } catch (IOException | YarnException e1) {\n           throw new ContainerExecutionException(e1.getMessage());\n-        } catch (YarnException e2) {\n-          throw new ContainerExecutionException(e2.getMessage());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initiateCsiClients(Configuration config)\n      throws ContainerExecutionException {\n    String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n    if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n      for (String driverName : driverNames) {\n        try {\n          // find out the adaptors service address\n          InetSocketAddress adaptorServiceAddress \u003d\n              CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n          LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n              + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n          CsiAdaptorProtocolPBClientImpl client \u003d\n              new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                  config);\n          csiClients.put(driverName, client);\n        } catch (IOException | YarnException e1) {\n          throw new ContainerExecutionException(e1.getMessage());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/OCIContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9038. [CSI] Add ability to publish/unpublish volumes on node managers. Contributed by Weiwei Yang.\n",
      "commitDate": "03/01/19 10:40 PM",
      "commitName": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,23 @@\n+  private void initiateCsiClients(Configuration config)\n+      throws ContainerExecutionException {\n+    String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n+    if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n+      for (String driverName : driverNames) {\n+        try {\n+          // find out the adaptors service address\n+          InetSocketAddress adaptorServiceAddress \u003d\n+              CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n+          LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n+              + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n+          CsiAdaptorProtocolPBClientImpl client \u003d\n+              new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n+                  config);\n+          csiClients.put(driverName, client);\n+        } catch (IOException e1) {\n+          throw new ContainerExecutionException(e1.getMessage());\n+        } catch (YarnException e2) {\n+          throw new ContainerExecutionException(e2.getMessage());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initiateCsiClients(Configuration config)\n      throws ContainerExecutionException {\n    String[] driverNames \u003d CsiConfigUtils.getCsiDriverNames(config);\n    if (driverNames !\u003d null \u0026\u0026 driverNames.length \u003e 0) {\n      for (String driverName : driverNames) {\n        try {\n          // find out the adaptors service address\n          InetSocketAddress adaptorServiceAddress \u003d\n              CsiConfigUtils.getCsiAdaptorAddressForDriver(driverName, config);\n          LOG.info(\"Initializing a csi-adaptor-client for csi-adaptor {},\"\n              + \" csi-driver {}\", adaptorServiceAddress.toString(), driverName);\n          CsiAdaptorProtocolPBClientImpl client \u003d\n              new CsiAdaptorProtocolPBClientImpl(1L, adaptorServiceAddress,\n                  config);\n          csiClients.put(driverName, client);\n        } catch (IOException e1) {\n          throw new ContainerExecutionException(e1.getMessage());\n        } catch (YarnException e2) {\n          throw new ContainerExecutionException(e2.getMessage());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}