{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogFormat.java",
  "functionName": "nextLog",
  "functionId": "nextLog",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
  "functionStartLine": 1032,
  "functionEndLine": 1062,
  "numCommitsSeen": 52,
  "timeTaken": 2290,
  "changeHistory": [
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
    "58e9f24e0f06efede21085b7ffe36af042fa7b38",
    "f81dc3f995579c1b94b11d60e9fc6da56c8a9496",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8e576570a99270f2db4bd722f451cde0a5c3e4a4"
  ],
  "changeHistoryShort": {
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": "Ybodychange",
    "58e9f24e0f06efede21085b7ffe36af042fa7b38": "Ybodychange",
    "f81dc3f995579c1b94b11d60e9fc6da56c8a9496": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8e576570a99270f2db4bd722f451cde0a5c3e4a4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a696fbb001b946ae75f3b8e962839c2fd3decfa1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2939. Fix new findbugs warnings in hadoop-yarn-common. (Li Lu via junping_du)\n",
      "commitDate": "22/12/14 3:06 AM",
      "commitName": "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/12/14 2:29 PM",
      "commitNameOld": "0f9528b99addbb0fd9a19d84db22a8c8e934b05f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 20.53,
      "commitsBetweenForRepo": 172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     public String nextLog() throws IOException {\n       if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n         // seek to the end of the current log, relying on BoundedInputStream\n         // to prevent seeking past the end of the current log\n         do {\n           if (currentLogData.skip(currentLogLength) \u003c 0) {\n             break;\n           }\n         } while (currentLogData.read() !\u003d -1);\n       }\n \n       currentLogType \u003d null;\n       currentLogLength \u003d 0;\n       currentLogData \u003d null;\n       currentLogISR \u003d null;\n \n       try {\n         String logType \u003d valueStream.readUTF();\n         String logLengthStr \u003d valueStream.readUTF();\n         currentLogLength \u003d Long.parseLong(logLengthStr);\n         currentLogData \u003d\n             new BoundedInputStream(valueStream, currentLogLength);\n         currentLogData.setPropagateClose(false);\n-        currentLogISR \u003d new InputStreamReader(currentLogData);\n+        currentLogISR \u003d new InputStreamReader(currentLogData,\n+            Charset.forName(\"UTF-8\"));\n         currentLogType \u003d logType;\n       } catch (EOFException e) {\n       }\n \n       return currentLogType;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String nextLog() throws IOException {\n      if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n        // seek to the end of the current log, relying on BoundedInputStream\n        // to prevent seeking past the end of the current log\n        do {\n          if (currentLogData.skip(currentLogLength) \u003c 0) {\n            break;\n          }\n        } while (currentLogData.read() !\u003d -1);\n      }\n\n      currentLogType \u003d null;\n      currentLogLength \u003d 0;\n      currentLogData \u003d null;\n      currentLogISR \u003d null;\n\n      try {\n        String logType \u003d valueStream.readUTF();\n        String logLengthStr \u003d valueStream.readUTF();\n        currentLogLength \u003d Long.parseLong(logLengthStr);\n        currentLogData \u003d\n            new BoundedInputStream(valueStream, currentLogLength);\n        currentLogData.setPropagateClose(false);\n        currentLogISR \u003d new InputStreamReader(currentLogData,\n            Charset.forName(\"UTF-8\"));\n        currentLogType \u003d logType;\n      } catch (EOFException e) {\n      }\n\n      return currentLogType;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "58e9f24e0f06efede21085b7ffe36af042fa7b38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2788. Fixed backwards compatiblity issues with log-aggregation feature that were caused when adding log-upload-time via YARN-2703. Contributed by Xuan Gong.\n",
      "commitDate": "03/11/14 1:16 PM",
      "commitName": "58e9f24e0f06efede21085b7ffe36af042fa7b38",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/10/14 12:57 PM",
      "commitNameOld": "caecd9fffe7c6216be31f3ab65349182045451fa",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,30 @@\n     public String nextLog() throws IOException {\n       if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n         // seek to the end of the current log, relying on BoundedInputStream\n         // to prevent seeking past the end of the current log\n         do {\n           if (currentLogData.skip(currentLogLength) \u003c 0) {\n             break;\n           }\n         } while (currentLogData.read() !\u003d -1);\n       }\n \n       currentLogType \u003d null;\n-      currentLogUpLoadTime \u003d 0;\n       currentLogLength \u003d 0;\n       currentLogData \u003d null;\n       currentLogISR \u003d null;\n \n       try {\n         String logType \u003d valueStream.readUTF();\n-        long logUpLoadTime \u003d valueStream.readLong();\n         String logLengthStr \u003d valueStream.readUTF();\n         currentLogLength \u003d Long.parseLong(logLengthStr);\n         currentLogData \u003d\n             new BoundedInputStream(valueStream, currentLogLength);\n         currentLogData.setPropagateClose(false);\n         currentLogISR \u003d new InputStreamReader(currentLogData);\n         currentLogType \u003d logType;\n-        currentLogUpLoadTime \u003d logUpLoadTime;\n       } catch (EOFException e) {\n       }\n \n       return currentLogType;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String nextLog() throws IOException {\n      if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n        // seek to the end of the current log, relying on BoundedInputStream\n        // to prevent seeking past the end of the current log\n        do {\n          if (currentLogData.skip(currentLogLength) \u003c 0) {\n            break;\n          }\n        } while (currentLogData.read() !\u003d -1);\n      }\n\n      currentLogType \u003d null;\n      currentLogLength \u003d 0;\n      currentLogData \u003d null;\n      currentLogISR \u003d null;\n\n      try {\n        String logType \u003d valueStream.readUTF();\n        String logLengthStr \u003d valueStream.readUTF();\n        currentLogLength \u003d Long.parseLong(logLengthStr);\n        currentLogData \u003d\n            new BoundedInputStream(valueStream, currentLogLength);\n        currentLogData.setPropagateClose(false);\n        currentLogISR \u003d new InputStreamReader(currentLogData);\n        currentLogType \u003d logType;\n      } catch (EOFException e) {\n      }\n\n      return currentLogType;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "f81dc3f995579c1b94b11d60e9fc6da56c8a9496": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2703. Added logUploadedTime into LogValue for better display. Contributed by Xuan Gong.\n",
      "commitDate": "24/10/14 2:10 PM",
      "commitName": "f81dc3f995579c1b94b11d60e9fc6da56c8a9496",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "24/10/14 11:13 AM",
      "commitNameOld": "e31f0a6558b106662c83e1f797216e412b6689a9",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n     public String nextLog() throws IOException {\n       if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n         // seek to the end of the current log, relying on BoundedInputStream\n         // to prevent seeking past the end of the current log\n         do {\n           if (currentLogData.skip(currentLogLength) \u003c 0) {\n             break;\n           }\n         } while (currentLogData.read() !\u003d -1);\n       }\n \n       currentLogType \u003d null;\n+      currentLogUpLoadTime \u003d 0;\n       currentLogLength \u003d 0;\n       currentLogData \u003d null;\n       currentLogISR \u003d null;\n \n       try {\n         String logType \u003d valueStream.readUTF();\n+        long logUpLoadTime \u003d valueStream.readLong();\n         String logLengthStr \u003d valueStream.readUTF();\n         currentLogLength \u003d Long.parseLong(logLengthStr);\n         currentLogData \u003d\n             new BoundedInputStream(valueStream, currentLogLength);\n         currentLogData.setPropagateClose(false);\n         currentLogISR \u003d new InputStreamReader(currentLogData);\n         currentLogType \u003d logType;\n+        currentLogUpLoadTime \u003d logUpLoadTime;\n       } catch (EOFException e) {\n       }\n \n       return currentLogType;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String nextLog() throws IOException {\n      if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n        // seek to the end of the current log, relying on BoundedInputStream\n        // to prevent seeking past the end of the current log\n        do {\n          if (currentLogData.skip(currentLogLength) \u003c 0) {\n            break;\n          }\n        } while (currentLogData.read() !\u003d -1);\n      }\n\n      currentLogType \u003d null;\n      currentLogUpLoadTime \u003d 0;\n      currentLogLength \u003d 0;\n      currentLogData \u003d null;\n      currentLogISR \u003d null;\n\n      try {\n        String logType \u003d valueStream.readUTF();\n        long logUpLoadTime \u003d valueStream.readLong();\n        String logLengthStr \u003d valueStream.readUTF();\n        currentLogLength \u003d Long.parseLong(logLengthStr);\n        currentLogData \u003d\n            new BoundedInputStream(valueStream, currentLogLength);\n        currentLogData.setPropagateClose(false);\n        currentLogISR \u003d new InputStreamReader(currentLogData);\n        currentLogType \u003d logType;\n        currentLogUpLoadTime \u003d logUpLoadTime;\n      } catch (EOFException e) {\n      }\n\n      return currentLogType;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public String nextLog() throws IOException {\n      if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n        // seek to the end of the current log, relying on BoundedInputStream\n        // to prevent seeking past the end of the current log\n        do {\n          if (currentLogData.skip(currentLogLength) \u003c 0) {\n            break;\n          }\n        } while (currentLogData.read() !\u003d -1);\n      }\n\n      currentLogType \u003d null;\n      currentLogLength \u003d 0;\n      currentLogData \u003d null;\n      currentLogISR \u003d null;\n\n      try {\n        String logType \u003d valueStream.readUTF();\n        String logLengthStr \u003d valueStream.readUTF();\n        currentLogLength \u003d Long.parseLong(logLengthStr);\n        currentLogData \u003d\n            new BoundedInputStream(valueStream, currentLogLength);\n        currentLogData.setPropagateClose(false);\n        currentLogISR \u003d new InputStreamReader(currentLogData);\n        currentLogType \u003d logType;\n      } catch (EOFException e) {\n      }\n\n      return currentLogType;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java"
      }
    },
    "8e576570a99270f2db4bd722f451cde0a5c3e4a4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4283. Display tail of aggregated logs by default (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362608 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/12 12:01 PM",
      "commitName": "8e576570a99270f2db4bd722f451cde0a5c3e4a4",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,30 @@\n+    public String nextLog() throws IOException {\n+      if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n+        // seek to the end of the current log, relying on BoundedInputStream\n+        // to prevent seeking past the end of the current log\n+        do {\n+          if (currentLogData.skip(currentLogLength) \u003c 0) {\n+            break;\n+          }\n+        } while (currentLogData.read() !\u003d -1);\n+      }\n+\n+      currentLogType \u003d null;\n+      currentLogLength \u003d 0;\n+      currentLogData \u003d null;\n+      currentLogISR \u003d null;\n+\n+      try {\n+        String logType \u003d valueStream.readUTF();\n+        String logLengthStr \u003d valueStream.readUTF();\n+        currentLogLength \u003d Long.parseLong(logLengthStr);\n+        currentLogData \u003d\n+            new BoundedInputStream(valueStream, currentLogLength);\n+        currentLogData.setPropagateClose(false);\n+        currentLogISR \u003d new InputStreamReader(currentLogData);\n+        currentLogType \u003d logType;\n+      } catch (EOFException e) {\n+      }\n+\n+      return currentLogType;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public String nextLog() throws IOException {\n      if (currentLogData !\u003d null \u0026\u0026 currentLogLength \u003e 0) {\n        // seek to the end of the current log, relying on BoundedInputStream\n        // to prevent seeking past the end of the current log\n        do {\n          if (currentLogData.skip(currentLogLength) \u003c 0) {\n            break;\n          }\n        } while (currentLogData.read() !\u003d -1);\n      }\n\n      currentLogType \u003d null;\n      currentLogLength \u003d 0;\n      currentLogData \u003d null;\n      currentLogISR \u003d null;\n\n      try {\n        String logType \u003d valueStream.readUTF();\n        String logLengthStr \u003d valueStream.readUTF();\n        currentLogLength \u003d Long.parseLong(logLengthStr);\n        currentLogData \u003d\n            new BoundedInputStream(valueStream, currentLogLength);\n        currentLogData.setPropagateClose(false);\n        currentLogISR \u003d new InputStreamReader(currentLogData);\n        currentLogType \u003d logType;\n      } catch (EOFException e) {\n      }\n\n      return currentLogType;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java"
    }
  }
}