{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RSErasureDecoder.java",
  "functionName": "prepareDecodingStep",
  "functionId": "prepareDecodingStep___blockGroup-ECBlockGroup(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/RSErasureDecoder.java",
  "functionStartLine": 42,
  "functionEndLine": 50,
  "numCommitsSeen": 11,
  "timeTaken": 856,
  "changeHistory": [
    "09c3a375bafa481e88d1317388a73c46950164c9",
    "df297245a74be1a1baa1a34740dcd856eef22ea4"
  ],
  "changeHistoryShort": {
    "09c3a375bafa481e88d1317388a73c46950164c9": "Ybodychange",
    "df297245a74be1a1baa1a34740dcd856eef22ea4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09c3a375bafa481e88d1317388a73c46950164c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11920. Refactor some codes for erasure coders. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "09c3a375bafa481e88d1317388a73c46950164c9",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 11:55 AM",
      "commitNameOld": "971bd5e885ee1528fd0e7e9486e3b54cde0d02e2",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,9 @@\n   protected ErasureCodingStep prepareDecodingStep(final ECBlockGroup blockGroup) {\n \n-    RawErasureDecoder rawDecoder;\n-\n     ECBlock[] inputBlocks \u003d getInputBlocks(blockGroup);\n     ECBlock[] outputBlocks \u003d getOutputBlocks(blockGroup);\n \n-    /**\n-     * Optimization: according to some benchmark, when only one block is erased\n-     * and to be recovering, the most simple XOR scheme can be much efficient.\n-     * We will have benchmark tests to verify this opt is effect or not.\n-     */\n-    if (outputBlocks.length \u003d\u003d 1 \u0026\u0026 useXorWhenPossible) {\n-      rawDecoder \u003d checkCreateXorRawDecoder();\n-    } else {\n-      rawDecoder \u003d checkCreateRSRawDecoder();\n-    }\n-\n+    RawErasureDecoder rawDecoder \u003d checkCreateRSRawDecoder();\n     return new ErasureDecodingStep(inputBlocks,\n         getErasedIndexes(inputBlocks), outputBlocks, rawDecoder);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ErasureCodingStep prepareDecodingStep(final ECBlockGroup blockGroup) {\n\n    ECBlock[] inputBlocks \u003d getInputBlocks(blockGroup);\n    ECBlock[] outputBlocks \u003d getOutputBlocks(blockGroup);\n\n    RawErasureDecoder rawDecoder \u003d checkCreateRSRawDecoder();\n    return new ErasureDecodingStep(inputBlocks,\n        getErasedIndexes(inputBlocks), outputBlocks, rawDecoder);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/RSErasureDecoder.java",
      "extendedDetails": {}
    },
    "df297245a74be1a1baa1a34740dcd856eef22ea4": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11647. Reed-Solomon ErasureCoder. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 11:43 AM",
      "commitName": "df297245a74be1a1baa1a34740dcd856eef22ea4",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,21 @@\n+  protected ErasureCodingStep prepareDecodingStep(final ECBlockGroup blockGroup) {\n+\n+    RawErasureDecoder rawDecoder;\n+\n+    ECBlock[] inputBlocks \u003d getInputBlocks(blockGroup);\n+    ECBlock[] outputBlocks \u003d getOutputBlocks(blockGroup);\n+\n+    /**\n+     * Optimization: according to some benchmark, when only one block is erased\n+     * and to be recovering, the most simple XOR scheme can be much efficient.\n+     * We will have benchmark tests to verify this opt is effect or not.\n+     */\n+    if (outputBlocks.length \u003d\u003d 1 \u0026\u0026 useXorWhenPossible) {\n+      rawDecoder \u003d checkCreateXorRawDecoder();\n+    } else {\n+      rawDecoder \u003d checkCreateRSRawDecoder();\n+    }\n+\n+    return new ErasureDecodingStep(inputBlocks,\n+        getErasedIndexes(inputBlocks), outputBlocks, rawDecoder);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ErasureCodingStep prepareDecodingStep(final ECBlockGroup blockGroup) {\n\n    RawErasureDecoder rawDecoder;\n\n    ECBlock[] inputBlocks \u003d getInputBlocks(blockGroup);\n    ECBlock[] outputBlocks \u003d getOutputBlocks(blockGroup);\n\n    /**\n     * Optimization: according to some benchmark, when only one block is erased\n     * and to be recovering, the most simple XOR scheme can be much efficient.\n     * We will have benchmark tests to verify this opt is effect or not.\n     */\n    if (outputBlocks.length \u003d\u003d 1 \u0026\u0026 useXorWhenPossible) {\n      rawDecoder \u003d checkCreateXorRawDecoder();\n    } else {\n      rawDecoder \u003d checkCreateRSRawDecoder();\n    }\n\n    return new ErasureDecodingStep(inputBlocks,\n        getErasedIndexes(inputBlocks), outputBlocks, rawDecoder);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/RSErasureDecoder.java"
    }
  }
}