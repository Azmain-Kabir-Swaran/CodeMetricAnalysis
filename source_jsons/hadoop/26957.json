{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNativeFileSystemStore.java",
  "functionName": "callCOSClientWithRetry",
  "functionId": "callCOSClientWithRetry___request-X",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java",
  "functionStartLine": 688,
  "functionEndLine": 764,
  "numCommitsSeen": 2,
  "timeTaken": 372,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,77 @@\n+  private \u003cX\u003e Object callCOSClientWithRetry(X request)\n+      throws CosServiceException, IOException {\n+    String sdkMethod \u003d \"\";\n+    int retryIndex \u003d 1;\n+    while (true) {\n+      try {\n+        if (request instanceof PutObjectRequest) {\n+          sdkMethod \u003d \"putObject\";\n+          return this.cosClient.putObject((PutObjectRequest) request);\n+        } else if (request instanceof UploadPartRequest) {\n+          sdkMethod \u003d \"uploadPart\";\n+          if (((UploadPartRequest) request).getInputStream()\n+              instanceof ByteBufferInputStream) {\n+            ((UploadPartRequest) request).getInputStream()\n+                .mark((int) ((UploadPartRequest) request).getPartSize());\n+          }\n+          return this.cosClient.uploadPart((UploadPartRequest) request);\n+        } else if (request instanceof GetObjectMetadataRequest) {\n+          sdkMethod \u003d \"queryObjectMeta\";\n+          return this.cosClient.getObjectMetadata(\n+              (GetObjectMetadataRequest) request);\n+        } else if (request instanceof DeleteObjectRequest) {\n+          sdkMethod \u003d \"deleteObject\";\n+          this.cosClient.deleteObject((DeleteObjectRequest) request);\n+          return new Object();\n+        } else if (request instanceof CopyObjectRequest) {\n+          sdkMethod \u003d \"copyFile\";\n+          return this.cosClient.copyObject((CopyObjectRequest) request);\n+        } else if (request instanceof GetObjectRequest) {\n+          sdkMethod \u003d \"getObject\";\n+          return this.cosClient.getObject((GetObjectRequest) request);\n+        } else if (request instanceof ListObjectsRequest) {\n+          sdkMethod \u003d \"listObjects\";\n+          return this.cosClient.listObjects((ListObjectsRequest) request);\n+        } else {\n+          throw new IOException(\"no such method\");\n+        }\n+      } catch (CosServiceException cse) {\n+        String errMsg \u003d String.format(\"Call cos sdk failed, \"\n+                + \"retryIndex: [%d / %d], \"\n+                + \"call method: %s, exception: %s\",\n+            retryIndex, this.maxRetryTimes, sdkMethod, cse.toString());\n+        int statusCode \u003d cse.getStatusCode();\n+        // Retry all server errors\n+        if (statusCode / 100 \u003d\u003d 5) {\n+          if (retryIndex \u003c\u003d this.maxRetryTimes) {\n+            LOG.info(errMsg);\n+            long sleepLeast \u003d retryIndex * 300L;\n+            long sleepBound \u003d retryIndex * 500L;\n+            try {\n+              if (request instanceof UploadPartRequest) {\n+                if (((UploadPartRequest) request).getInputStream()\n+                    instanceof ByteBufferInputStream) {\n+                  ((UploadPartRequest) request).getInputStream().reset();\n+                }\n+              }\n+              Thread.sleep(\n+                  ThreadLocalRandom.current().nextLong(sleepLeast, sleepBound));\n+              ++retryIndex;\n+            } catch (InterruptedException e) {\n+              throw new IOException(e.toString());\n+            }\n+          } else {\n+            LOG.error(errMsg);\n+            throw new IOException(errMsg);\n+          }\n+        } else {\n+          throw cse;\n+        }\n+      } catch (Exception e) {\n+        String errMsg \u003d String.format(\"Call cos sdk failed, \"\n+            + \"call method: %s, exception: %s\", sdkMethod, e.toString());\n+        LOG.error(errMsg);\n+        throw new IOException(errMsg);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cX\u003e Object callCOSClientWithRetry(X request)\n      throws CosServiceException, IOException {\n    String sdkMethod \u003d \"\";\n    int retryIndex \u003d 1;\n    while (true) {\n      try {\n        if (request instanceof PutObjectRequest) {\n          sdkMethod \u003d \"putObject\";\n          return this.cosClient.putObject((PutObjectRequest) request);\n        } else if (request instanceof UploadPartRequest) {\n          sdkMethod \u003d \"uploadPart\";\n          if (((UploadPartRequest) request).getInputStream()\n              instanceof ByteBufferInputStream) {\n            ((UploadPartRequest) request).getInputStream()\n                .mark((int) ((UploadPartRequest) request).getPartSize());\n          }\n          return this.cosClient.uploadPart((UploadPartRequest) request);\n        } else if (request instanceof GetObjectMetadataRequest) {\n          sdkMethod \u003d \"queryObjectMeta\";\n          return this.cosClient.getObjectMetadata(\n              (GetObjectMetadataRequest) request);\n        } else if (request instanceof DeleteObjectRequest) {\n          sdkMethod \u003d \"deleteObject\";\n          this.cosClient.deleteObject((DeleteObjectRequest) request);\n          return new Object();\n        } else if (request instanceof CopyObjectRequest) {\n          sdkMethod \u003d \"copyFile\";\n          return this.cosClient.copyObject((CopyObjectRequest) request);\n        } else if (request instanceof GetObjectRequest) {\n          sdkMethod \u003d \"getObject\";\n          return this.cosClient.getObject((GetObjectRequest) request);\n        } else if (request instanceof ListObjectsRequest) {\n          sdkMethod \u003d \"listObjects\";\n          return this.cosClient.listObjects((ListObjectsRequest) request);\n        } else {\n          throw new IOException(\"no such method\");\n        }\n      } catch (CosServiceException cse) {\n        String errMsg \u003d String.format(\"Call cos sdk failed, \"\n                + \"retryIndex: [%d / %d], \"\n                + \"call method: %s, exception: %s\",\n            retryIndex, this.maxRetryTimes, sdkMethod, cse.toString());\n        int statusCode \u003d cse.getStatusCode();\n        // Retry all server errors\n        if (statusCode / 100 \u003d\u003d 5) {\n          if (retryIndex \u003c\u003d this.maxRetryTimes) {\n            LOG.info(errMsg);\n            long sleepLeast \u003d retryIndex * 300L;\n            long sleepBound \u003d retryIndex * 500L;\n            try {\n              if (request instanceof UploadPartRequest) {\n                if (((UploadPartRequest) request).getInputStream()\n                    instanceof ByteBufferInputStream) {\n                  ((UploadPartRequest) request).getInputStream().reset();\n                }\n              }\n              Thread.sleep(\n                  ThreadLocalRandom.current().nextLong(sleepLeast, sleepBound));\n              ++retryIndex;\n            } catch (InterruptedException e) {\n              throw new IOException(e.toString());\n            }\n          } else {\n            LOG.error(errMsg);\n            throw new IOException(errMsg);\n          }\n        } else {\n          throw cse;\n        }\n      } catch (Exception e) {\n        String errMsg \u003d String.format(\"Call cos sdk failed, \"\n            + \"call method: %s, exception: %s\", sdkMethod, e.toString());\n        LOG.error(errMsg);\n        throw new IOException(errMsg);\n      }\n    }\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java"
    }
  }
}