{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionFlex",
  "functionId": "actionFlex___serviceName-String__componentCountStrings-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 569,
  "functionEndLine": 597,
  "numCommitsSeen": 61,
  "timeTaken": 5683,
  "changeHistory": [
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
    "37c9b7327d188ccad7fd36b7466a65f68ad0c899",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "37c9b7327d188ccad7fd36b7466a65f68ad0c899": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public int actionFlex(String serviceName, Map\u003cString, String\u003e\n       componentCountStrings) throws YarnException, IOException {\n     Map\u003cString, Long\u003e componentCounts \u003d\n         new HashMap\u003c\u003e(componentCountStrings.size());\n     Service persistedService \u003d\n         ServiceApiUtil.loadService(fs, serviceName);\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n-      cachedAppIds.put(persistedService.getName(),\n-          ApplicationId.fromString(persistedService.getId()));\n+      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n+          ApplicationId.fromString(persistedService.getId()),\n+          persistedService.getKerberosPrincipal().getPrincipalName()));\n     } else {\n       throw new YarnException(persistedService.getName()\n           + \" appId is null, may be not submitted to YARN yet\");\n     }\n \n     for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n       String compName \u003d entry.getKey();\n       ServiceApiUtil.validateNameFormat(compName, getConfig());\n       Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n     flexComponents(serviceName, componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n      componentCountStrings) throws YarnException, IOException {\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(componentCountStrings.size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, serviceName);\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    flexComponents(serviceName, componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,28 @@\n-  protected int actionFlexByCLI(ClientArgs args)\n-      throws YarnException, IOException {\n-    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n+  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n+      componentCountStrings) throws YarnException, IOException {\n     Map\u003cString, Long\u003e componentCounts \u003d\n-        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n+        new HashMap\u003c\u003e(componentCountStrings.size());\n     Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());\n+        ServiceApiUtil.loadService(fs, serviceName);\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppIds.put(persistedService.getName(),\n           ApplicationId.fromString(persistedService.getId()));\n     } else {\n       throw new YarnException(persistedService.getName()\n           + \" appId is null, may be not submitted to YARN yet\");\n     }\n \n-    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n-        .entrySet()) {\n+    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n       String compName \u003d entry.getKey();\n       ServiceApiUtil.validateNameFormat(compName, getConfig());\n       Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n-    // throw usage exception if no changes proposed\n-    if (componentCounts.size() \u003d\u003d 0) {\n-      actionHelp(ACTION_FLEX, args);\n-    }\n-    flexComponents(args.getClusterName(), componentCounts, persistedService);\n+    flexComponents(serviceName, componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n      componentCountStrings) throws YarnException, IOException {\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(componentCountStrings.size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, serviceName);\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    flexComponents(serviceName, componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "actionFlexByCLI",
            "newValue": "actionFlex"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,28 @@\n-  protected int actionFlexByCLI(ClientArgs args)\n-      throws YarnException, IOException {\n-    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n+  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n+      componentCountStrings) throws YarnException, IOException {\n     Map\u003cString, Long\u003e componentCounts \u003d\n-        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n+        new HashMap\u003c\u003e(componentCountStrings.size());\n     Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());\n+        ServiceApiUtil.loadService(fs, serviceName);\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppIds.put(persistedService.getName(),\n           ApplicationId.fromString(persistedService.getId()));\n     } else {\n       throw new YarnException(persistedService.getName()\n           + \" appId is null, may be not submitted to YARN yet\");\n     }\n \n-    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n-        .entrySet()) {\n+    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n       String compName \u003d entry.getKey();\n       ServiceApiUtil.validateNameFormat(compName, getConfig());\n       Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n-    // throw usage exception if no changes proposed\n-    if (componentCounts.size() \u003d\u003d 0) {\n-      actionHelp(ACTION_FLEX, args);\n-    }\n-    flexComponents(args.getClusterName(), componentCounts, persistedService);\n+    flexComponents(serviceName, componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n      componentCountStrings) throws YarnException, IOException {\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(componentCountStrings.size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, serviceName);\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    flexComponents(serviceName, componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[args-ClientArgs]",
            "newValue": "[serviceName-String, componentCountStrings-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,28 @@\n-  protected int actionFlexByCLI(ClientArgs args)\n-      throws YarnException, IOException {\n-    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n+  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n+      componentCountStrings) throws YarnException, IOException {\n     Map\u003cString, Long\u003e componentCounts \u003d\n-        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n+        new HashMap\u003c\u003e(componentCountStrings.size());\n     Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());\n+        ServiceApiUtil.loadService(fs, serviceName);\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppIds.put(persistedService.getName(),\n           ApplicationId.fromString(persistedService.getId()));\n     } else {\n       throw new YarnException(persistedService.getName()\n           + \" appId is null, may be not submitted to YARN yet\");\n     }\n \n-    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n-        .entrySet()) {\n+    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n       String compName \u003d entry.getKey();\n       ServiceApiUtil.validateNameFormat(compName, getConfig());\n       Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n-    // throw usage exception if no changes proposed\n-    if (componentCounts.size() \u003d\u003d 0) {\n-      actionHelp(ACTION_FLEX, args);\n-    }\n-    flexComponents(args.getClusterName(), componentCounts, persistedService);\n+    flexComponents(serviceName, componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n      componentCountStrings) throws YarnException, IOException {\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(componentCountStrings.size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, serviceName);\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    flexComponents(serviceName, componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,28 @@\n-  protected int actionFlexByCLI(ClientArgs args)\n-      throws YarnException, IOException {\n-    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n+  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n+      componentCountStrings) throws YarnException, IOException {\n     Map\u003cString, Long\u003e componentCounts \u003d\n-        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n+        new HashMap\u003c\u003e(componentCountStrings.size());\n     Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());\n+        ServiceApiUtil.loadService(fs, serviceName);\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppIds.put(persistedService.getName(),\n           ApplicationId.fromString(persistedService.getId()));\n     } else {\n       throw new YarnException(persistedService.getName()\n           + \" appId is null, may be not submitted to YARN yet\");\n     }\n \n-    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n-        .entrySet()) {\n+    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n       String compName \u003d entry.getKey();\n       ServiceApiUtil.validateNameFormat(compName, getConfig());\n       Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n-    // throw usage exception if no changes proposed\n-    if (componentCounts.size() \u003d\u003d 0) {\n-      actionHelp(ACTION_FLEX, args);\n-    }\n-    flexComponents(args.getClusterName(), componentCounts, persistedService);\n+    flexComponents(serviceName, componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionFlex(String serviceName, Map\u003cString, String\u003e\n      componentCountStrings) throws YarnException, IOException {\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(componentCountStrings.size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, serviceName);\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : componentCountStrings.entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    flexComponents(serviceName, componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "37c9b7327d188ccad7fd36b7466a65f68ad0c899": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7186. Add examples in yarn-service. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "37c9b7327d188ccad7fd36b7466a65f68ad0c899",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected int actionFlexByCLI(ClientArgs args)\n       throws YarnException, IOException {\n     ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n     Map\u003cString, Long\u003e componentCounts \u003d\n         new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n     Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, flexArgs.getClusterName());\n+        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppIds.put(persistedService.getName(),\n           ApplicationId.fromString(persistedService.getId()));\n     } else {\n       throw new YarnException(persistedService.getName()\n           + \" appId is null, may be not submitted to YARN yet\");\n     }\n \n     for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n         .entrySet()) {\n       String compName \u003d entry.getKey();\n       ServiceApiUtil.validateNameFormat(compName, getConfig());\n       Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n     // throw usage exception if no changes proposed\n     if (componentCounts.size() \u003d\u003d 0) {\n       actionHelp(ACTION_FLEX, args);\n     }\n     flexComponents(args.getClusterName(), componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int actionFlexByCLI(ClientArgs args)\n      throws YarnException, IOException {\n    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, flexArgs.getServiceName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n        .entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    // throw usage exception if no changes proposed\n    if (componentCounts.size() \u003d\u003d 0) {\n      actionHelp(ACTION_FLEX, args);\n    }\n    flexComponents(args.getClusterName(), componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n   protected int actionFlexByCLI(ClientArgs args)\n       throws YarnException, IOException {\n     ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n     Map\u003cString, Long\u003e componentCounts \u003d\n         new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n-    Application persistedApp \u003d\n-        ServiceApiUtil.loadApplication(fs, flexArgs.getClusterName());\n-    if (!StringUtils.isEmpty(persistedApp.getId())) {\n-      cachedAppIds.put(persistedApp.getName(),\n-          ApplicationId.fromString(persistedApp.getId()));\n+    Service persistedService \u003d\n+        ServiceApiUtil.loadService(fs, flexArgs.getClusterName());\n+    if (!StringUtils.isEmpty(persistedService.getId())) {\n+      cachedAppIds.put(persistedService.getName(),\n+          ApplicationId.fromString(persistedService.getId()));\n+    } else {\n+      throw new YarnException(persistedService.getName()\n+          + \" appId is null, may be not submitted to YARN yet\");\n     }\n+\n     for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n         .entrySet()) {\n       String compName \u003d entry.getKey();\n-      ServiceApiUtil.validateCompName(compName);\n-      Component component \u003d persistedApp.getComponent(compName);\n+      ServiceApiUtil.validateNameFormat(compName, getConfig());\n+      Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n     // throw usage exception if no changes proposed\n     if (componentCounts.size() \u003d\u003d 0) {\n       actionHelp(ACTION_FLEX, args);\n     }\n-    flexComponents(args.getClusterName(), componentCounts, persistedApp);\n+    flexComponents(args.getClusterName(), componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int actionFlexByCLI(ClientArgs args)\n      throws YarnException, IOException {\n    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, flexArgs.getClusterName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n        .entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    // throw usage exception if no changes proposed\n    if (componentCounts.size() \u003d\u003d 0) {\n      actionHelp(ACTION_FLEX, args);\n    }\n    flexComponents(args.getClusterName(), componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n   protected int actionFlexByCLI(ClientArgs args)\n       throws YarnException, IOException {\n     ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n     Map\u003cString, Long\u003e componentCounts \u003d\n         new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n-    Application persistedApp \u003d\n-        ServiceApiUtil.loadApplication(fs, flexArgs.getClusterName());\n-    if (!StringUtils.isEmpty(persistedApp.getId())) {\n-      cachedAppIds.put(persistedApp.getName(),\n-          ApplicationId.fromString(persistedApp.getId()));\n+    Service persistedService \u003d\n+        ServiceApiUtil.loadService(fs, flexArgs.getClusterName());\n+    if (!StringUtils.isEmpty(persistedService.getId())) {\n+      cachedAppIds.put(persistedService.getName(),\n+          ApplicationId.fromString(persistedService.getId()));\n+    } else {\n+      throw new YarnException(persistedService.getName()\n+          + \" appId is null, may be not submitted to YARN yet\");\n     }\n+\n     for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n         .entrySet()) {\n       String compName \u003d entry.getKey();\n-      ServiceApiUtil.validateCompName(compName);\n-      Component component \u003d persistedApp.getComponent(compName);\n+      ServiceApiUtil.validateNameFormat(compName, getConfig());\n+      Component component \u003d persistedService.getComponent(compName);\n       if (component \u003d\u003d null) {\n         throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n       }\n       long numberOfContainers \u003d\n           parseNumberOfContainers(component, entry.getValue());\n       componentCounts.put(compName, numberOfContainers);\n     }\n     // throw usage exception if no changes proposed\n     if (componentCounts.size() \u003d\u003d 0) {\n       actionHelp(ACTION_FLEX, args);\n     }\n-    flexComponents(args.getClusterName(), componentCounts, persistedApp);\n+    flexComponents(args.getClusterName(), componentCounts, persistedService);\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int actionFlexByCLI(ClientArgs args)\n      throws YarnException, IOException {\n    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, flexArgs.getClusterName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppIds.put(persistedService.getName(),\n          ApplicationId.fromString(persistedService.getId()));\n    } else {\n      throw new YarnException(persistedService.getName()\n          + \" appId is null, may be not submitted to YARN yet\");\n    }\n\n    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n        .entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateNameFormat(compName, getConfig());\n      Component component \u003d persistedService.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    // throw usage exception if no changes proposed\n    if (componentCounts.size() \u003d\u003d 0) {\n      actionHelp(ACTION_FLEX, args);\n    }\n    flexComponents(args.getClusterName(), componentCounts, persistedService);\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,30 @@\n+  protected int actionFlexByCLI(ClientArgs args)\n+      throws YarnException, IOException {\n+    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n+    Map\u003cString, Long\u003e componentCounts \u003d\n+        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n+    Application persistedApp \u003d\n+        ServiceApiUtil.loadApplication(fs, flexArgs.getClusterName());\n+    if (!StringUtils.isEmpty(persistedApp.getId())) {\n+      cachedAppIds.put(persistedApp.getName(),\n+          ApplicationId.fromString(persistedApp.getId()));\n+    }\n+    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n+        .entrySet()) {\n+      String compName \u003d entry.getKey();\n+      ServiceApiUtil.validateCompName(compName);\n+      Component component \u003d persistedApp.getComponent(compName);\n+      if (component \u003d\u003d null) {\n+        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n+      }\n+      long numberOfContainers \u003d\n+          parseNumberOfContainers(component, entry.getValue());\n+      componentCounts.put(compName, numberOfContainers);\n+    }\n+    // throw usage exception if no changes proposed\n+    if (componentCounts.size() \u003d\u003d 0) {\n+      actionHelp(ACTION_FLEX, args);\n+    }\n+    flexComponents(args.getClusterName(), componentCounts, persistedApp);\n+    return EXIT_SUCCESS;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int actionFlexByCLI(ClientArgs args)\n      throws YarnException, IOException {\n    ActionFlexArgs flexArgs \u003d args.getActionFlexArgs();\n    Map\u003cString, Long\u003e componentCounts \u003d\n        new HashMap\u003c\u003e(flexArgs.getComponentMap().size());\n    Application persistedApp \u003d\n        ServiceApiUtil.loadApplication(fs, flexArgs.getClusterName());\n    if (!StringUtils.isEmpty(persistedApp.getId())) {\n      cachedAppIds.put(persistedApp.getName(),\n          ApplicationId.fromString(persistedApp.getId()));\n    }\n    for (Map.Entry\u003cString, String\u003e entry : flexArgs.getComponentMap()\n        .entrySet()) {\n      String compName \u003d entry.getKey();\n      ServiceApiUtil.validateCompName(compName);\n      Component component \u003d persistedApp.getComponent(compName);\n      if (component \u003d\u003d null) {\n        throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\n      }\n      long numberOfContainers \u003d\n          parseNumberOfContainers(component, entry.getValue());\n      componentCounts.put(compName, numberOfContainers);\n    }\n    // throw usage exception if no changes proposed\n    if (componentCounts.size() \u003d\u003d 0) {\n      actionHelp(ACTION_FLEX, args);\n    }\n    flexComponents(args.getClusterName(), componentCounts, persistedApp);\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}