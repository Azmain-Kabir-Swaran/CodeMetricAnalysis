{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsClient.java",
  "functionName": "appendSASTokenToQuery",
  "functionId": "appendSASTokenToQuery___path-String__operation-String__queryBuilder-AbfsUriQueryBuilder__cachedSasToken-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java",
  "functionStartLine": 743,
  "functionEndLine": 772,
  "numCommitsSeen": 46,
  "timeTaken": 2916,
  "changeHistory": [
    "b214bbd2d92a0c02b71d352dba85f3b87317933c",
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc"
  ],
  "changeHistoryShort": {
    "b214bbd2d92a0c02b71d352dba85f3b87317933c": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b214bbd2d92a0c02b71d352dba85f3b87317933c": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16916: ABFS: Delegation SAS generator for integration with Ranger\n\nContributed by Thomas Marquardt.\n\nDETAILS:\n\nPreviously we had a SASGenerator class which generated Service SAS, but we need to add DelegationSASGenerator.\nI separated SASGenerator into a base class and two subclasses ServiceSASGenerator and DelegationSASGenreator.  The\ncode in ServiceSASGenerator is copied from SASGenerator but the DelegationSASGenrator code is new.  The\nDelegationSASGenerator code demonstrates how to use Delegation SAS with minimal permissions, as would be used\nby an authorization service such as Apache Ranger.  Adding this to the tests helps us lock in this behavior.\n\nAdded a MockDelegationSASTokenProvider for testing User Delegation SAS.\n\nFixed the ITestAzureBlobFileSystemCheckAccess tests to assume oauth client ID so that they are ignored when that\nis not configured.\n\nTo improve performance, AbfsInputStream/AbfsOutputStream re-use SAS tokens until the expiry is within 120 seconds.\nAfter this a new SAS will be requested.  The default period of 120 seconds can be changed using the configuration\nsetting \"fs.azure.sas.token.renew.period.for.streams\".\n\nThe SASTokenProvider operation names were updated to correspond better with the ADLS Gen2 REST API, since these\noperations must be provided tokens with appropriate SAS parameters to succeed.\n\nSupport for the version 2.0 AAD authentication endpoint was added to AzureADAuthenticator.\n\nThe getFileStatus method was mistakenly calling the ADLS Gen2 Get Properties API which requires read permission\nwhile the getFileStatus call only requires execute permission.  ADLS Gen2 Get Status API is supposed to be used\nfor this purpose, so the underlying AbfsClient.getPathStatus API was updated with a includeProperties\nparameter which is set to false for getFileStatus and true for getXAttr.\n\nAdded SASTokenProvider support for delete recursive.\n\nFixed bugs in AzureBlobFileSystem where public methods were not validating the Path by calling makeQualified.  This is\nnecessary to avoid passing null paths and to convert relative paths into absolute paths.\n\nCanonicalized the path used for root path internally so that root path can be used with SAS tokens, which requires\nthat the path in the URL and the path in the SAS token match.  Internally the code was using\n\"//\" instead of \"/\" for the root path, sometimes.  Also related to this, the AzureBlobFileSystemStore.getRelativePath\nAPI was updated so that we no longer remove and then add back a preceding forward / to paths.\n\nTo run ITestAzureBlobFileSystemDelegationSAS tests follow the instructions in testing_azure.md under the heading\n\"To run Delegation SAS test cases\".  You also need to set \"fs.azure.enable.check.access\" to true.\n\nTEST RESULTS:\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 41\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dfalse\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 244\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\nsas.token.provider.type\u003dMockDelegationSASTokenProvider\nenable.check.access\u003dtrue\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 33\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dOAuth\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 1, Skipped: 74\nTests run: 206, Failures: 0, Errors: 0, Skipped: 140\n",
      "commitDate": "12/05/20 11:35 AM",
      "commitName": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
      "commitAuthor": "Thomas Marquardt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16916: ABFS: Delegation SAS generator for integration with Ranger\n\nContributed by Thomas Marquardt.\n\nDETAILS:\n\nPreviously we had a SASGenerator class which generated Service SAS, but we need to add DelegationSASGenerator.\nI separated SASGenerator into a base class and two subclasses ServiceSASGenerator and DelegationSASGenreator.  The\ncode in ServiceSASGenerator is copied from SASGenerator but the DelegationSASGenrator code is new.  The\nDelegationSASGenerator code demonstrates how to use Delegation SAS with minimal permissions, as would be used\nby an authorization service such as Apache Ranger.  Adding this to the tests helps us lock in this behavior.\n\nAdded a MockDelegationSASTokenProvider for testing User Delegation SAS.\n\nFixed the ITestAzureBlobFileSystemCheckAccess tests to assume oauth client ID so that they are ignored when that\nis not configured.\n\nTo improve performance, AbfsInputStream/AbfsOutputStream re-use SAS tokens until the expiry is within 120 seconds.\nAfter this a new SAS will be requested.  The default period of 120 seconds can be changed using the configuration\nsetting \"fs.azure.sas.token.renew.period.for.streams\".\n\nThe SASTokenProvider operation names were updated to correspond better with the ADLS Gen2 REST API, since these\noperations must be provided tokens with appropriate SAS parameters to succeed.\n\nSupport for the version 2.0 AAD authentication endpoint was added to AzureADAuthenticator.\n\nThe getFileStatus method was mistakenly calling the ADLS Gen2 Get Properties API which requires read permission\nwhile the getFileStatus call only requires execute permission.  ADLS Gen2 Get Status API is supposed to be used\nfor this purpose, so the underlying AbfsClient.getPathStatus API was updated with a includeProperties\nparameter which is set to false for getFileStatus and true for getXAttr.\n\nAdded SASTokenProvider support for delete recursive.\n\nFixed bugs in AzureBlobFileSystem where public methods were not validating the Path by calling makeQualified.  This is\nnecessary to avoid passing null paths and to convert relative paths into absolute paths.\n\nCanonicalized the path used for root path internally so that root path can be used with SAS tokens, which requires\nthat the path in the URL and the path in the SAS token match.  Internally the code was using\n\"//\" instead of \"/\" for the root path, sometimes.  Also related to this, the AzureBlobFileSystemStore.getRelativePath\nAPI was updated so that we no longer remove and then add back a preceding forward / to paths.\n\nTo run ITestAzureBlobFileSystemDelegationSAS tests follow the instructions in testing_azure.md under the heading\n\"To run Delegation SAS test cases\".  You also need to set \"fs.azure.enable.check.access\" to true.\n\nTEST RESULTS:\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 41\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dfalse\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 244\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\nsas.token.provider.type\u003dMockDelegationSASTokenProvider\nenable.check.access\u003dtrue\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 33\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dOAuth\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 1, Skipped: 74\nTests run: 206, Failures: 0, Errors: 0, Skipped: 140\n",
          "commitDate": "12/05/20 11:35 AM",
          "commitName": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "21/04/20 9:37 AM",
          "commitNameOld": "264e49c8f2cfd15826655bbc1847f378f60ad8c7",
          "commitAuthorOld": "bilaharith",
          "daysBetweenCommits": 21.08,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,30 @@\n-  private void appendSASTokenToQuery(String path, String operation, AbfsUriQueryBuilder queryBuilder) throws SASTokenProviderException {\n+  private String appendSASTokenToQuery(String path,\n+                                       String operation,\n+                                       AbfsUriQueryBuilder queryBuilder,\n+                                       String cachedSasToken)\n+      throws SASTokenProviderException {\n+    String sasToken \u003d null;\n     if (this.authType \u003d\u003d AuthType.SAS) {\n       try {\n         LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n-        String sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n-            this.filesystem, path, operation);\n-        if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n-          throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+        if (cachedSasToken \u003d\u003d null) {\n+          sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n+              this.filesystem, path, operation);\n+          if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n+            throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+          }\n+        } else {\n+          sasToken \u003d cachedSasToken;\n+          LOG.trace(\"Using cached SAS token.\");\n         }\n-\n         queryBuilder.setSASToken(sasToken);\n         LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n       } catch (Exception ex) {\n         throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n             operation,\n             path,\n             ex.toString()));\n       }\n     }\n+    return sasToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String appendSASTokenToQuery(String path,\n                                       String operation,\n                                       AbfsUriQueryBuilder queryBuilder,\n                                       String cachedSasToken)\n      throws SASTokenProviderException {\n    String sasToken \u003d null;\n    if (this.authType \u003d\u003d AuthType.SAS) {\n      try {\n        LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n        if (cachedSasToken \u003d\u003d null) {\n          sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n              this.filesystem, path, operation);\n          if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n            throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n          }\n        } else {\n          sasToken \u003d cachedSasToken;\n          LOG.trace(\"Using cached SAS token.\");\n        }\n        queryBuilder.setSASToken(sasToken);\n        LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n      } catch (Exception ex) {\n        throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n            operation,\n            path,\n            ex.toString()));\n      }\n    }\n    return sasToken;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java",
          "extendedDetails": {
            "oldValue": "[path-String, operation-String, queryBuilder-AbfsUriQueryBuilder]",
            "newValue": "[path-String, operation-String, queryBuilder-AbfsUriQueryBuilder, cachedSasToken-String]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16916: ABFS: Delegation SAS generator for integration with Ranger\n\nContributed by Thomas Marquardt.\n\nDETAILS:\n\nPreviously we had a SASGenerator class which generated Service SAS, but we need to add DelegationSASGenerator.\nI separated SASGenerator into a base class and two subclasses ServiceSASGenerator and DelegationSASGenreator.  The\ncode in ServiceSASGenerator is copied from SASGenerator but the DelegationSASGenrator code is new.  The\nDelegationSASGenerator code demonstrates how to use Delegation SAS with minimal permissions, as would be used\nby an authorization service such as Apache Ranger.  Adding this to the tests helps us lock in this behavior.\n\nAdded a MockDelegationSASTokenProvider for testing User Delegation SAS.\n\nFixed the ITestAzureBlobFileSystemCheckAccess tests to assume oauth client ID so that they are ignored when that\nis not configured.\n\nTo improve performance, AbfsInputStream/AbfsOutputStream re-use SAS tokens until the expiry is within 120 seconds.\nAfter this a new SAS will be requested.  The default period of 120 seconds can be changed using the configuration\nsetting \"fs.azure.sas.token.renew.period.for.streams\".\n\nThe SASTokenProvider operation names were updated to correspond better with the ADLS Gen2 REST API, since these\noperations must be provided tokens with appropriate SAS parameters to succeed.\n\nSupport for the version 2.0 AAD authentication endpoint was added to AzureADAuthenticator.\n\nThe getFileStatus method was mistakenly calling the ADLS Gen2 Get Properties API which requires read permission\nwhile the getFileStatus call only requires execute permission.  ADLS Gen2 Get Status API is supposed to be used\nfor this purpose, so the underlying AbfsClient.getPathStatus API was updated with a includeProperties\nparameter which is set to false for getFileStatus and true for getXAttr.\n\nAdded SASTokenProvider support for delete recursive.\n\nFixed bugs in AzureBlobFileSystem where public methods were not validating the Path by calling makeQualified.  This is\nnecessary to avoid passing null paths and to convert relative paths into absolute paths.\n\nCanonicalized the path used for root path internally so that root path can be used with SAS tokens, which requires\nthat the path in the URL and the path in the SAS token match.  Internally the code was using\n\"//\" instead of \"/\" for the root path, sometimes.  Also related to this, the AzureBlobFileSystemStore.getRelativePath\nAPI was updated so that we no longer remove and then add back a preceding forward / to paths.\n\nTo run ITestAzureBlobFileSystemDelegationSAS tests follow the instructions in testing_azure.md under the heading\n\"To run Delegation SAS test cases\".  You also need to set \"fs.azure.enable.check.access\" to true.\n\nTEST RESULTS:\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 41\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dfalse\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 244\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\nsas.token.provider.type\u003dMockDelegationSASTokenProvider\nenable.check.access\u003dtrue\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 33\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dOAuth\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 1, Skipped: 74\nTests run: 206, Failures: 0, Errors: 0, Skipped: 140\n",
          "commitDate": "12/05/20 11:35 AM",
          "commitName": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "21/04/20 9:37 AM",
          "commitNameOld": "264e49c8f2cfd15826655bbc1847f378f60ad8c7",
          "commitAuthorOld": "bilaharith",
          "daysBetweenCommits": 21.08,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,30 @@\n-  private void appendSASTokenToQuery(String path, String operation, AbfsUriQueryBuilder queryBuilder) throws SASTokenProviderException {\n+  private String appendSASTokenToQuery(String path,\n+                                       String operation,\n+                                       AbfsUriQueryBuilder queryBuilder,\n+                                       String cachedSasToken)\n+      throws SASTokenProviderException {\n+    String sasToken \u003d null;\n     if (this.authType \u003d\u003d AuthType.SAS) {\n       try {\n         LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n-        String sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n-            this.filesystem, path, operation);\n-        if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n-          throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+        if (cachedSasToken \u003d\u003d null) {\n+          sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n+              this.filesystem, path, operation);\n+          if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n+            throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+          }\n+        } else {\n+          sasToken \u003d cachedSasToken;\n+          LOG.trace(\"Using cached SAS token.\");\n         }\n-\n         queryBuilder.setSASToken(sasToken);\n         LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n       } catch (Exception ex) {\n         throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n             operation,\n             path,\n             ex.toString()));\n       }\n     }\n+    return sasToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String appendSASTokenToQuery(String path,\n                                       String operation,\n                                       AbfsUriQueryBuilder queryBuilder,\n                                       String cachedSasToken)\n      throws SASTokenProviderException {\n    String sasToken \u003d null;\n    if (this.authType \u003d\u003d AuthType.SAS) {\n      try {\n        LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n        if (cachedSasToken \u003d\u003d null) {\n          sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n              this.filesystem, path, operation);\n          if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n            throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n          }\n        } else {\n          sasToken \u003d cachedSasToken;\n          LOG.trace(\"Using cached SAS token.\");\n        }\n        queryBuilder.setSASToken(sasToken);\n        LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n      } catch (Exception ex) {\n        throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n            operation,\n            path,\n            ex.toString()));\n      }\n    }\n    return sasToken;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16916: ABFS: Delegation SAS generator for integration with Ranger\n\nContributed by Thomas Marquardt.\n\nDETAILS:\n\nPreviously we had a SASGenerator class which generated Service SAS, but we need to add DelegationSASGenerator.\nI separated SASGenerator into a base class and two subclasses ServiceSASGenerator and DelegationSASGenreator.  The\ncode in ServiceSASGenerator is copied from SASGenerator but the DelegationSASGenrator code is new.  The\nDelegationSASGenerator code demonstrates how to use Delegation SAS with minimal permissions, as would be used\nby an authorization service such as Apache Ranger.  Adding this to the tests helps us lock in this behavior.\n\nAdded a MockDelegationSASTokenProvider for testing User Delegation SAS.\n\nFixed the ITestAzureBlobFileSystemCheckAccess tests to assume oauth client ID so that they are ignored when that\nis not configured.\n\nTo improve performance, AbfsInputStream/AbfsOutputStream re-use SAS tokens until the expiry is within 120 seconds.\nAfter this a new SAS will be requested.  The default period of 120 seconds can be changed using the configuration\nsetting \"fs.azure.sas.token.renew.period.for.streams\".\n\nThe SASTokenProvider operation names were updated to correspond better with the ADLS Gen2 REST API, since these\noperations must be provided tokens with appropriate SAS parameters to succeed.\n\nSupport for the version 2.0 AAD authentication endpoint was added to AzureADAuthenticator.\n\nThe getFileStatus method was mistakenly calling the ADLS Gen2 Get Properties API which requires read permission\nwhile the getFileStatus call only requires execute permission.  ADLS Gen2 Get Status API is supposed to be used\nfor this purpose, so the underlying AbfsClient.getPathStatus API was updated with a includeProperties\nparameter which is set to false for getFileStatus and true for getXAttr.\n\nAdded SASTokenProvider support for delete recursive.\n\nFixed bugs in AzureBlobFileSystem where public methods were not validating the Path by calling makeQualified.  This is\nnecessary to avoid passing null paths and to convert relative paths into absolute paths.\n\nCanonicalized the path used for root path internally so that root path can be used with SAS tokens, which requires\nthat the path in the URL and the path in the SAS token match.  Internally the code was using\n\"//\" instead of \"/\" for the root path, sometimes.  Also related to this, the AzureBlobFileSystemStore.getRelativePath\nAPI was updated so that we no longer remove and then add back a preceding forward / to paths.\n\nTo run ITestAzureBlobFileSystemDelegationSAS tests follow the instructions in testing_azure.md under the heading\n\"To run Delegation SAS test cases\".  You also need to set \"fs.azure.enable.check.access\" to true.\n\nTEST RESULTS:\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 41\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dfalse\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 244\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\nsas.token.provider.type\u003dMockDelegationSASTokenProvider\nenable.check.access\u003dtrue\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 33\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dOAuth\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 1, Skipped: 74\nTests run: 206, Failures: 0, Errors: 0, Skipped: 140\n",
          "commitDate": "12/05/20 11:35 AM",
          "commitName": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "21/04/20 9:37 AM",
          "commitNameOld": "264e49c8f2cfd15826655bbc1847f378f60ad8c7",
          "commitAuthorOld": "bilaharith",
          "daysBetweenCommits": 21.08,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,30 @@\n-  private void appendSASTokenToQuery(String path, String operation, AbfsUriQueryBuilder queryBuilder) throws SASTokenProviderException {\n+  private String appendSASTokenToQuery(String path,\n+                                       String operation,\n+                                       AbfsUriQueryBuilder queryBuilder,\n+                                       String cachedSasToken)\n+      throws SASTokenProviderException {\n+    String sasToken \u003d null;\n     if (this.authType \u003d\u003d AuthType.SAS) {\n       try {\n         LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n-        String sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n-            this.filesystem, path, operation);\n-        if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n-          throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+        if (cachedSasToken \u003d\u003d null) {\n+          sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n+              this.filesystem, path, operation);\n+          if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n+            throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+          }\n+        } else {\n+          sasToken \u003d cachedSasToken;\n+          LOG.trace(\"Using cached SAS token.\");\n         }\n-\n         queryBuilder.setSASToken(sasToken);\n         LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n       } catch (Exception ex) {\n         throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n             operation,\n             path,\n             ex.toString()));\n       }\n     }\n+    return sasToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String appendSASTokenToQuery(String path,\n                                       String operation,\n                                       AbfsUriQueryBuilder queryBuilder,\n                                       String cachedSasToken)\n      throws SASTokenProviderException {\n    String sasToken \u003d null;\n    if (this.authType \u003d\u003d AuthType.SAS) {\n      try {\n        LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n        if (cachedSasToken \u003d\u003d null) {\n          sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n              this.filesystem, path, operation);\n          if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n            throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n          }\n        } else {\n          sasToken \u003d cachedSasToken;\n          LOG.trace(\"Using cached SAS token.\");\n        }\n        queryBuilder.setSASToken(sasToken);\n        LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n      } catch (Exception ex) {\n        throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n            operation,\n            path,\n            ex.toString()));\n      }\n    }\n    return sasToken;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.\n",
      "commitDate": "27/02/20 10:27 AM",
      "commitName": "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
      "commitAuthor": "Sneha Vijayarajan",
      "diff": "@@ -0,0 +1,20 @@\n+  private void appendSASTokenToQuery(String path, String operation, AbfsUriQueryBuilder queryBuilder) throws SASTokenProviderException {\n+    if (this.authType \u003d\u003d AuthType.SAS) {\n+      try {\n+        LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n+        String sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n+            this.filesystem, path, operation);\n+        if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n+          throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n+        }\n+\n+        queryBuilder.setSASToken(sasToken);\n+        LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n+      } catch (Exception ex) {\n+        throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n+            operation,\n+            path,\n+            ex.toString()));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void appendSASTokenToQuery(String path, String operation, AbfsUriQueryBuilder queryBuilder) throws SASTokenProviderException {\n    if (this.authType \u003d\u003d AuthType.SAS) {\n      try {\n        LOG.trace(\"Fetch SAS token for {} on {}\", operation, path);\n        String sasToken \u003d sasTokenProvider.getSASToken(this.accountName,\n            this.filesystem, path, operation);\n        if ((sasToken \u003d\u003d null) || sasToken.isEmpty()) {\n          throw new UnsupportedOperationException(\"SASToken received is empty or null\");\n        }\n\n        queryBuilder.setSASToken(sasToken);\n        LOG.trace(\"SAS token fetch complete for {} on {}\", operation, path);\n      } catch (Exception ex) {\n        throw new SASTokenProviderException(String.format(\"Failed to acquire a SAS token for %s on %s due to %s\",\n            operation,\n            path,\n            ex.toString()));\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsClient.java"
    }
  }
}