{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalContainerAllocator.java",
  "functionName": "heartbeat",
  "functionId": "heartbeat",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
  "functionStartLine": 106,
  "functionEndLine": 157,
  "numCommitsSeen": 32,
  "timeTaken": 8710,
  "changeHistory": [
    "f634505d48d97e4d461980d68a0cbdf87223646d",
    "9fc32c5c4d1d5f50c605bdb0e3b13f44c86660c8",
    "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
    "875592220fb250ff9d0bba73c8ace9858fd369fd",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7",
    "9fcfbf5f51f2557566694377f94a556226585d68",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
    "978012b9b6b18985fd60ec5b26c38693a6e86f9a",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
    "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e",
    "1bd345d6e3855ab330963efd32e0fac102e61d1a",
    "316c23dd7e082c6dc7a332aa1a7cdca38f48e04f",
    "94242c93857a06fb9c56ee571a47d6ca18f00f48",
    "b304062f1ffee078ea9575dcee5583d43e33508c",
    "312a7e71001d55f88781e56b331ab1b40a72a980",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f634505d48d97e4d461980d68a0cbdf87223646d": "Ybodychange",
    "9fc32c5c4d1d5f50c605bdb0e3b13f44c86660c8": "Ybodychange",
    "0f3b6900be1a3b2e4624f31f84656f4a32dadce9": "Ybodychange",
    "875592220fb250ff9d0bba73c8ace9858fd369fd": "Ybodychange",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": "Ybodychange",
    "9fcfbf5f51f2557566694377f94a556226585d68": "Ybodychange",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": "Ybodychange",
    "978012b9b6b18985fd60ec5b26c38693a6e86f9a": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": "Ybodychange",
    "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e": "Ybodychange",
    "1bd345d6e3855ab330963efd32e0fac102e61d1a": "Ybodychange",
    "316c23dd7e082c6dc7a332aa1a7cdca38f48e04f": "Ybodychange",
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": "Ybodychange",
    "b304062f1ffee078ea9575dcee5583d43e33508c": "Ybodychange",
    "312a7e71001d55f88781e56b331ab1b40a72a980": "Ymultichange(Ymovefromfile,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f634505d48d97e4d461980d68a0cbdf87223646d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5870. Support for passing Job priority through Application Submission Context in Mapreduce Side. Contributed by Sunil G\n",
      "commitDate": "24/11/15 2:07 PM",
      "commitName": "f634505d48d97e4d461980d68a0cbdf87223646d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/04/15 2:58 PM",
      "commitNameOld": "9fc32c5c4d1d5f50c605bdb0e3b13f44c86660c8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 211.01,
      "commitsBetweenForRepo": 1763,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,52 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(this.lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e(), null);\n     AllocateResponse allocateResponse \u003d null;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (ApplicationAttemptNotFoundException e) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n         JobEventType.JOB_AM_REBOOT));\n       throw new YarnRuntimeException(\n         \"Resource Manager doesn\u0027t recognize AttemptId: \"\n             + this.getContext().getApplicationID(), e);\n     } catch (ApplicationMasterNotRegisteredException e) {\n       LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n           + \" hence resync and send outstanding requests.\");\n       this.lastResponseID \u003d 0;\n       register();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n \n     if (allocateResponse !\u003d null) {\n       this.lastResponseID \u003d allocateResponse.getResponseId();\n       Token token \u003d allocateResponse.getAMRMToken();\n       if (token !\u003d null) {\n         updateAMRMToken(token);\n       }\n+      Priority priorityFromResponse \u003d Priority.newInstance(allocateResponse\n+          .getApplicationPriority().getPriority());\n+\n+      // Update the job priority to Job directly.\n+      getJob().setJobPriority(priorityFromResponse);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(this.lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    AllocateResponse allocateResponse \u003d null;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (ApplicationAttemptNotFoundException e) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n        JobEventType.JOB_AM_REBOOT));\n      throw new YarnRuntimeException(\n        \"Resource Manager doesn\u0027t recognize AttemptId: \"\n            + this.getContext().getApplicationID(), e);\n    } catch (ApplicationMasterNotRegisteredException e) {\n      LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n          + \" hence resync and send outstanding requests.\");\n      this.lastResponseID \u003d 0;\n      register();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n\n    if (allocateResponse !\u003d null) {\n      this.lastResponseID \u003d allocateResponse.getResponseId();\n      Token token \u003d allocateResponse.getAMRMToken();\n      if (token !\u003d null) {\n        updateAMRMToken(token);\n      }\n      Priority priorityFromResponse \u003d Priority.newInstance(allocateResponse\n          .getApplicationPriority().getPriority());\n\n      // Update the job priority to Job directly.\n      getJob().setJobPriority(priorityFromResponse);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "9fc32c5c4d1d5f50c605bdb0e3b13f44c86660c8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6324. Fixed MapReduce uber jobs to not fail the udpate of AM-RM tokens when they roll-over. Contributed by Jason Lowe.\n",
      "commitDate": "27/04/15 2:58 PM",
      "commitName": "9fc32c5c4d1d5f50c605bdb0e3b13f44c86660c8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/11/14 2:57 PM",
      "commitNameOld": "43cd07b408c6613d2c9aa89203cfa3110d830538",
      "commitAuthorOld": "Arun C. Murthy",
      "daysBetweenCommits": 168.96,
      "commitsBetweenForRepo": 1334,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,47 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(this.lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e(), null);\n+    AllocateResponse allocateResponse \u003d null;\n     try {\n-      scheduler.allocate(allocateRequest);\n+      allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (ApplicationAttemptNotFoundException e) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n         JobEventType.JOB_AM_REBOOT));\n       throw new YarnRuntimeException(\n         \"Resource Manager doesn\u0027t recognize AttemptId: \"\n             + this.getContext().getApplicationID(), e);\n     } catch (ApplicationMasterNotRegisteredException e) {\n       LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n           + \" hence resync and send outstanding requests.\");\n       this.lastResponseID \u003d 0;\n       register();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n+\n+    if (allocateResponse !\u003d null) {\n+      this.lastResponseID \u003d allocateResponse.getResponseId();\n+      Token token \u003d allocateResponse.getAMRMToken();\n+      if (token !\u003d null) {\n+        updateAMRMToken(token);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(this.lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    AllocateResponse allocateResponse \u003d null;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (ApplicationAttemptNotFoundException e) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n        JobEventType.JOB_AM_REBOOT));\n      throw new YarnRuntimeException(\n        \"Resource Manager doesn\u0027t recognize AttemptId: \"\n            + this.getContext().getApplicationID(), e);\n    } catch (ApplicationMasterNotRegisteredException e) {\n      LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n          + \" hence resync and send outstanding requests.\");\n      this.lastResponseID \u003d 0;\n      register();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n\n    if (allocateResponse !\u003d null) {\n      this.lastResponseID \u003d allocateResponse.getResponseId();\n      Token token \u003d allocateResponse.getAMRMToken();\n      if (token !\u003d null) {\n        updateAMRMToken(token);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "0f3b6900be1a3b2e4624f31f84656f4a32dadce9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2209. Replaced AM resync/shutdown command with corresponding exceptions and made related MR changes. Contributed by Jian He.\n",
      "commitDate": "23/10/14 9:56 PM",
      "commitName": "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "15/10/14 3:22 PM",
      "commitNameOld": "0af1a2b5bc1469ba22edb63cd58f9b436b1dc4d3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.27,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,38 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(this.lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e(), null);\n-    AllocateResponse allocateResponse;\n     try {\n-      allocateResponse \u003d scheduler.allocate(allocateRequest);\n+      scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n+    } catch (ApplicationAttemptNotFoundException e) {\n+      LOG.info(\"Event from RM: shutting down Application Master\");\n+      // This can happen if the RM has been restarted. If it is in that state,\n+      // this application must clean itself up.\n+      eventHandler.handle(new JobEvent(this.getJob().getID(),\n+        JobEventType.JOB_AM_REBOOT));\n+      throw new YarnRuntimeException(\n+        \"Resource Manager doesn\u0027t recognize AttemptId: \"\n+            + this.getContext().getApplicationID(), e);\n+    } catch (ApplicationMasterNotRegisteredException e) {\n+      LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n+          + \" hence resync and send outstanding requests.\");\n+      this.lastResponseID \u003d 0;\n+      register();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n-    if (allocateResponse.getAMCommand() !\u003d null) {\n-      switch(allocateResponse.getAMCommand()) {\n-      case AM_RESYNC:\n-        LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n-            + \" hence resyncing.\");        \n-        this.lastResponseID \u003d 0;\n-        register();\n-        break;\n-      case AM_SHUTDOWN:\n-        LOG.info(\"Event from RM: shutting down Application Master\");\n-        // This can happen if the RM has been restarted. If it is in that state,\n-        // this application must clean itself up.\n-        eventHandler.handle(new JobEvent(this.getJob().getID(),\n-                                         JobEventType.JOB_AM_REBOOT));\n-        throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n-                                 this.getContext().getApplicationID());\n-      default:\n-        String msg \u003d\n-              \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n-        LOG.error(msg);\n-        throw new YarnRuntimeException(msg);\n-      }\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(this.lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    try {\n      scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (ApplicationAttemptNotFoundException e) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n        JobEventType.JOB_AM_REBOOT));\n      throw new YarnRuntimeException(\n        \"Resource Manager doesn\u0027t recognize AttemptId: \"\n            + this.getContext().getApplicationID(), e);\n    } catch (ApplicationMasterNotRegisteredException e) {\n      LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n          + \" hence resync and send outstanding requests.\");\n      this.lastResponseID \u003d 0;\n      register();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "875592220fb250ff9d0bba73c8ace9858fd369fd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5910. Make MR AM resync with RM in case of work-preserving RM-restart. Contributed by Rohith\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611434 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 11:46 AM",
      "commitName": "875592220fb250ff9d0bba73c8ace9858fd369fd",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/07/13 5:57 PM",
      "commitNameOld": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 363.74,
      "commitsBetweenForRepo": 2417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,48 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(this.lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e(), null);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (allocateResponse.getAMCommand() !\u003d null) {\n       switch(allocateResponse.getAMCommand()) {\n       case AM_RESYNC:\n+        LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n+            + \" hence resyncing.\");        \n+        this.lastResponseID \u003d 0;\n+        register();\n+        break;\n       case AM_SHUTDOWN:\n         LOG.info(\"Event from RM: shutting down Application Master\");\n         // This can happen if the RM has been restarted. If it is in that state,\n         // this application must clean itself up.\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.JOB_AM_REBOOT));\n         throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                  this.getContext().getApplicationID());\n       default:\n         String msg \u003d\n               \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n         LOG.error(msg);\n         throw new YarnRuntimeException(msg);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(this.lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getAMCommand() !\u003d null) {\n      switch(allocateResponse.getAMCommand()) {\n      case AM_RESYNC:\n        LOG.info(\"ApplicationMaster is out of sync with ResourceManager,\"\n            + \" hence resyncing.\");        \n        this.lastResponseID \u003d 0;\n        register();\n        break;\n      case AM_SHUTDOWN:\n        LOG.info(\"Event from RM: shutting down Application Master\");\n        // This can happen if the RM has been restarted. If it is in that state,\n        // this application must clean itself up.\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.JOB_AM_REBOOT));\n        throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                 this.getContext().getApplicationID());\n      default:\n        String msg \u003d\n              \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n        LOG.error(msg);\n        throw new YarnRuntimeException(msg);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-918. Remove ApplicationAttemptId from RegisterApplicationMasterRequestProto. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:57 PM",
      "commitName": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   protected synchronized void heartbeat() throws Exception {\n-    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n-        this.applicationAttemptId, this.lastResponseID, super\n-            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n+    AllocateRequest allocateRequest \u003d\n+        AllocateRequest.newInstance(this.lastResponseID,\n+          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e(), null);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (allocateResponse.getAMCommand() !\u003d null) {\n       switch(allocateResponse.getAMCommand()) {\n       case AM_RESYNC:\n       case AM_SHUTDOWN:\n         LOG.info(\"Event from RM: shutting down Application Master\");\n         // This can happen if the RM has been restarted. If it is in that state,\n         // this application must clean itself up.\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.JOB_AM_REBOOT));\n         throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                  this.getContext().getApplicationID());\n       default:\n         String msg \u003d\n               \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n         LOG.error(msg);\n         throw new YarnRuntimeException(msg);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(this.lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getAMCommand() !\u003d null) {\n      switch(allocateResponse.getAMCommand()) {\n      case AM_RESYNC:\n      case AM_SHUTDOWN:\n        LOG.info(\"Event from RM: shutting down Application Master\");\n        // This can happen if the RM has been restarted. If it is in that state,\n        // this application must clean itself up.\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.JOB_AM_REBOOT));\n        throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                 this.getContext().getApplicationID());\n      default:\n        String msg \u003d\n              \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n        LOG.error(msg);\n        throw new YarnRuntimeException(msg);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "9fcfbf5f51f2557566694377f94a556226585d68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-759. Create Command enum in AllocateResponse (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490470 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 4:33 PM",
      "commitName": "9fcfbf5f51f2557566694377f94a556226585d68",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "06/06/13 11:46 AM",
      "commitNameOld": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,43 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e(), null);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n-    if (allocateResponse.getResync()) {\n-      LOG.info(\"Event from RM: shutting down Application Master\");\n-      // This can happen if the RM has been restarted. If it is in that state,\n-      // this application must clean itself up.\n-      eventHandler.handle(new JobEvent(this.getJob().getID(),\n-                                       JobEventType.JOB_AM_REBOOT));\n-      throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n-                               this.getContext().getApplicationID());\n+    if (allocateResponse.getAMCommand() !\u003d null) {\n+      switch(allocateResponse.getAMCommand()) {\n+      case AM_RESYNC:\n+      case AM_SHUTDOWN:\n+        LOG.info(\"Event from RM: shutting down Application Master\");\n+        // This can happen if the RM has been restarted. If it is in that state,\n+        // this application must clean itself up.\n+        eventHandler.handle(new JobEvent(this.getJob().getID(),\n+                                         JobEventType.JOB_AM_REBOOT));\n+        throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n+                                 this.getContext().getApplicationID());\n+      default:\n+        String msg \u003d\n+              \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n+        LOG.error(msg);\n+        throw new YarnRuntimeException(msg);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getAMCommand() !\u003d null) {\n      switch(allocateResponse.getAMCommand()) {\n      case AM_RESYNC:\n      case AM_SHUTDOWN:\n        LOG.info(\"Event from RM: shutting down Application Master\");\n        // This can happen if the RM has been restarted. If it is in that state,\n        // this application must clean itself up.\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.JOB_AM_REBOOT));\n        throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                 this.getContext().getApplicationID());\n      default:\n        String msg \u003d\n              \"Unhandled value of AMCommand: \" + allocateResponse.getAMCommand();\n        LOG.error(msg);\n        throw new YarnRuntimeException(msg);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 11:46 AM",
      "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "03/06/13 10:53 PM",
      "commitNameOld": "978012b9b6b18985fd60ec5b26c38693a6e86f9a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.54,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n-        new ArrayList\u003cContainerId\u003e());\n+        new ArrayList\u003cContainerId\u003e(), null);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (allocateResponse.getResync()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.JOB_AM_REBOOT));\n       throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e(), null);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getResync()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.JOB_AM_REBOOT));\n      throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "978012b9b6b18985fd60ec5b26c38693a6e86f9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-755. Renamed AllocateResponse.reboot to AllocateResponse.resync. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 10:53 PM",
      "commitName": "978012b9b6b18985fd60ec5b26c38693a6e86f9a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n-    if (allocateResponse.getReboot()) {\n+    if (allocateResponse.getResync()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.JOB_AM_REBOOT));\n       throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getResync()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.JOB_AM_REBOOT));\n      throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n-        throw new YarnException(\"Could not contact RM after \" +\n+        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (allocateResponse.getReboot()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.JOB_AM_REBOOT));\n-      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n+      throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnRuntimeException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.JOB_AM_REBOOT));\n      throw new YarnRuntimeException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": {
      "type": "Ybodychange",
      "commitMessage": "YARN-748. Moved BuilderUtils from yarn-common to yarn-server-common for eventual retirement. Contributed by Jian He.\nMAPREDUCE-5297. Updated MR App since BuilderUtils is no longer public after YARN-748. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 5:34 PM",
      "commitName": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/13 5:14 PM",
      "commitNameOld": "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n-    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n+    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (allocateResponse.getReboot()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.JOB_AM_REBOOT));\n       throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.JOB_AM_REBOOT));\n      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5086. MR app master deletes staging dir when sent a reboot command from the RM. Contributed by Jian He\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1464255 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/13 6:56 PM",
      "commitName": "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "20/03/13 1:44 PM",
      "commitNameOld": "1bd345d6e3855ab330963efd32e0fac102e61d1a",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 14.22,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (allocateResponse.getReboot()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n-                                       JobEventType.INTERNAL_ERROR));\n+                                       JobEventType.JOB_AM_REBOOT));\n       throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.JOB_AM_REBOOT));\n      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "1bd345d6e3855ab330963efd32e0fac102e61d1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-396. Rationalize AllocateResponse in RM Scheduler API. Contributed by Zhijie Shen.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/13 1:44 PM",
      "commitName": "1bd345d6e3855ab330963efd32e0fac102e61d1a",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "14/11/12 3:02 PM",
      "commitNameOld": "316c23dd7e082c6dc7a332aa1a7cdca38f48e04f",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 125.9,
      "commitsBetweenForRepo": 537,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n-    AMResponse response;\n+    AllocateResponse allocateResponse;\n     try {\n-      AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n-      response \u003d allocateResponse.getAMResponse();\n+      allocateResponse \u003d scheduler.allocate(allocateRequest);\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n-    if (response.getReboot()) {\n+    if (allocateResponse.getReboot()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.INTERNAL_ERROR));\n       throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (allocateResponse.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.INTERNAL_ERROR));\n      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "316c23dd7e082c6dc7a332aa1a7cdca38f48e04f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4797. LocalContainerAllocator can loop forever trying to contact the RM (jlowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 3:02 PM",
      "commitName": "316c23dd7e082c6dc7a332aa1a7cdca38f48e04f",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "04/04/12 8:08 AM",
      "commitNameOld": "4e44259cbda1d5c5e923f979c6f6f8bdb3056198",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 224.33,
      "commitsBetweenForRepo": 1343,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n-    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response;\n     try {\n+      AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n       response \u003d allocateResponse.getAMResponse();\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n         LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (response.getReboot()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.INTERNAL_ERROR));\n       throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AMResponse response;\n    try {\n      AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n      response \u003d allocateResponse.getAMResponse();\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (response.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.INTERNAL_ERROR));\n      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3711. Fixed MR AM recovery so that only single selected task output is recovered and thus reduce the unnecessarily bloated recovery time. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 4:04 PM",
      "commitName": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/12/11 3:35 PM",
      "commitNameOld": "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 52.02,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response;\n     try {\n       response \u003d allocateResponse.getAMResponse();\n       // Reset retry count if no exception occurred.\n       retrystartTime \u003d System.currentTimeMillis();\n     } catch (Exception e) {\n       // This can happen when the connection to the RM has gone down. Keep\n       // re-trying until the retryInterval has expired.\n       if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n+        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n         eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                          JobEventType.INTERNAL_ERROR));\n         throw new YarnException(\"Could not contact RM after \" +\n                                 retryInterval + \" milliseconds.\");\n       }\n       // Throw this up to the caller, which may decide to ignore it and\n       // continue to attempt to contact the RM.\n       throw e;\n     }\n     if (response.getReboot()) {\n       LOG.info(\"Event from RM: shutting down Application Master\");\n       // This can happen if the RM has been restarted. If it is in that state,\n       // this application must clean itself up.\n       eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                        JobEventType.INTERNAL_ERROR));\n       throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                                this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response;\n    try {\n      response \u003d allocateResponse.getAMResponse();\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        LOG.error(\"Could not contact RM after \" + retryInterval + \" milliseconds.\");\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (response.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.INTERNAL_ERROR));\n      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "b304062f1ffee078ea9575dcee5583d43e33508c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3186. User jobs are getting hanged if the Resource manager process goes down and comes up while job is getting executed. (Eric Payne via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 6:40 PM",
      "commitName": "b304062f1ffee078ea9575dcee5583d43e33508c",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "20/10/11 4:45 AM",
      "commitNameOld": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.58,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,34 @@\n   protected synchronized void heartbeat() throws Exception {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         this.applicationAttemptId, this.lastResponseID, super\n             .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n         new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n-    AMResponse response \u003d allocateResponse.getAMResponse();\n+    AMResponse response;\n+    try {\n+      response \u003d allocateResponse.getAMResponse();\n+      // Reset retry count if no exception occurred.\n+      retrystartTime \u003d System.currentTimeMillis();\n+    } catch (Exception e) {\n+      // This can happen when the connection to the RM has gone down. Keep\n+      // re-trying until the retryInterval has expired.\n+      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n+        eventHandler.handle(new JobEvent(this.getJob().getID(),\n+                                         JobEventType.INTERNAL_ERROR));\n+        throw new YarnException(\"Could not contact RM after \" +\n+                                retryInterval + \" milliseconds.\");\n+      }\n+      // Throw this up to the caller, which may decide to ignore it and\n+      // continue to attempt to contact the RM.\n+      throw e;\n+    }\n     if (response.getReboot()) {\n-      // TODO\n       LOG.info(\"Event from RM: shutting down Application Master\");\n+      // This can happen if the RM has been restarted. If it is in that state,\n+      // this application must clean itself up.\n+      eventHandler.handle(new JobEvent(this.getJob().getID(),\n+                                       JobEventType.INTERNAL_ERROR));\n+      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n+                               this.getContext().getApplicationID());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response;\n    try {\n      response \u003d allocateResponse.getAMResponse();\n      // Reset retry count if no exception occurred.\n      retrystartTime \u003d System.currentTimeMillis();\n    } catch (Exception e) {\n      // This can happen when the connection to the RM has gone down. Keep\n      // re-trying until the retryInterval has expired.\n      if (System.currentTimeMillis() - retrystartTime \u003e\u003d retryInterval) {\n        eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                         JobEventType.INTERNAL_ERROR));\n        throw new YarnException(\"Could not contact RM after \" +\n                                retryInterval + \" milliseconds.\");\n      }\n      // Throw this up to the caller, which may decide to ignore it and\n      // continue to attempt to contact the RM.\n      throw e;\n    }\n    if (response.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n      // This can happen if the RM has been restarted. If it is in that state,\n      // this application must clean itself up.\n      eventHandler.handle(new JobEvent(this.getJob().getID(),\n                                       JobEventType.INTERNAL_ERROR));\n      throw new YarnException(\"Resource Manager doesn\u0027t recognize AttemptId: \" +\n                               this.getContext().getApplicationID());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "312a7e71001d55f88781e56b331ab1b40a72a980": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-3078. Ensure MapReduce AM reports progress correctly for displaying on the RM Web-UI. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/11 12:31 AM",
      "commitName": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-3078. Ensure MapReduce AM reports progress correctly for displaying on the RM Web-UI. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176762 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/09/11 12:31 AM",
          "commitName": "312a7e71001d55f88781e56b331ab1b40a72a980",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/09/11 11:03 PM",
          "commitNameOld": "f4a425e10d3d53ab4fdeba8f914b95d19a34f04f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,12 @@\n   protected synchronized void heartbeat() throws Exception {\n-    AllocateRequest allocateRequest \u003d\n-        recordFactory.newRecordInstance(AllocateRequest.class);\n-    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n-    allocateRequest.setResponseId(lastResponseID);\n-    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e());\n-    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e());\n+    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n+        this.applicationAttemptId, this.lastResponseID, super\n+            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n+        new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     if (response.getReboot()) {\n+      // TODO\n       LOG.info(\"Event from RM: shutting down Application Master\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    if (response.getReboot()) {\n      // TODO\n      LOG.info(\"Event from RM: shutting down Application Master\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
            "oldMethodName": "heartbeat",
            "newMethodName": "heartbeat"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3078. Ensure MapReduce AM reports progress correctly for displaying on the RM Web-UI. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176762 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/09/11 12:31 AM",
          "commitName": "312a7e71001d55f88781e56b331ab1b40a72a980",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/09/11 11:03 PM",
          "commitNameOld": "f4a425e10d3d53ab4fdeba8f914b95d19a34f04f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,12 @@\n   protected synchronized void heartbeat() throws Exception {\n-    AllocateRequest allocateRequest \u003d\n-        recordFactory.newRecordInstance(AllocateRequest.class);\n-    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n-    allocateRequest.setResponseId(lastResponseID);\n-    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e());\n-    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e());\n+    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n+        this.applicationAttemptId, this.lastResponseID, super\n+            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n+        new ArrayList\u003cContainerId\u003e());\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     if (response.getReboot()) {\n+      // TODO\n       LOG.info(\"Event from RM: shutting down Application Master\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        this.applicationAttemptId, this.lastResponseID, super\n            .getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(),\n        new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    if (response.getReboot()) {\n      // TODO\n      LOG.info(\"Event from RM: shutting down Application Master\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        recordFactory.newRecordInstance(AllocateRequest.class);\n    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n    allocateRequest.setResponseId(lastResponseID);\n    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e());\n    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    if (response.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,13 @@\n+  protected synchronized void heartbeat() throws Exception {\n+    AllocateRequest allocateRequest \u003d\n+        recordFactory.newRecordInstance(AllocateRequest.class);\n+    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n+    allocateRequest.setResponseId(lastResponseID);\n+    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e());\n+    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e());\n+    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n+    AMResponse response \u003d allocateResponse.getAMResponse();\n+    if (response.getReboot()) {\n+      LOG.info(\"Event from RM: shutting down Application Master\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void heartbeat() throws Exception {\n    AllocateRequest allocateRequest \u003d\n        recordFactory.newRecordInstance(AllocateRequest.class);\n    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n    allocateRequest.setResponseId(lastResponseID);\n    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e());\n    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e());\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    if (response.getReboot()) {\n      LOG.info(\"Event from RM: shutting down Application Master\");\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
    }
  }
}