{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMSimulator.java",
  "functionName": "middleStep",
  "functionId": "middleStep",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
  "functionStartLine": 129,
  "functionEndLine": 190,
  "numCommitsSeen": 9,
  "timeTaken": 1693,
  "changeHistory": [
    "7af4f34de54f6e667b47374e31fc9328eba869f0",
    "ff8378eb1b960c72d18a984c7e5d145b407ca11a",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "b0c2c856192e71145c012504511fad172436131b",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "7af4f34de54f6e667b47374e31fc9328eba869f0": "Ybodychange",
    "ff8378eb1b960c72d18a984c7e5d145b407ca11a": "Ybodychange",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "b0c2c856192e71145c012504511fad172436131b": "Ymultichange(Yexceptionschange,Ybodychange)",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7af4f34de54f6e667b47374e31fc9328eba869f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7929. Support to set container execution type in SLS. (Jiandan Yang via Weiwei Yang)\n",
      "commitDate": "28/02/18 1:58 AM",
      "commitName": "7af4f34de54f6e667b47374e31fc9328eba869f0",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "25/01/18 3:47 PM",
      "commitNameOld": "ff8378eb1b960c72d18a984c7e5d145b407ca11a",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 33.42,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,62 @@\n   public void middleStep() throws Exception {\n     // we check the lifetime for each running containers\n     ContainerSimulator cs \u003d null;\n     synchronized(completedContainerList) {\n       while ((cs \u003d containerQueue.poll()) !\u003d null) {\n         runningContainers.remove(cs.getId());\n         completedContainerList.add(cs.getId());\n         LOG.debug(\"Container {} has completed\", cs.getId());\n       }\n     }\n     \n     // send heart beat\n     NodeHeartbeatRequest beatRequest \u003d\n             Records.newRecord(NodeHeartbeatRequest.class);\n     beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n     NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n     \n     ns.setContainersStatuses(generateContainerStatusList());\n     ns.setNodeId(node.getNodeID());\n     ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n     ns.setResponseId(responseId++);\n     ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n+\n+    //set node \u0026 containers utilization\n+    if (resourceUtilizationRatio \u003e 0 \u0026\u0026 resourceUtilizationRatio \u003c\u003d1) {\n+      int pMemUsed \u003d Math.round(node.getTotalCapability().getMemorySize()\n+          * resourceUtilizationRatio);\n+      float cpuUsed \u003d node.getTotalCapability().getVirtualCores()\n+          * resourceUtilizationRatio;\n+      ResourceUtilization resourceUtilization \u003d ResourceUtilization.newInstance(\n+          pMemUsed, pMemUsed, cpuUsed);\n+      ns.setContainersUtilization(resourceUtilization);\n+      ns.setNodeUtilization(resourceUtilization);\n+    }\n     beatRequest.setNodeStatus(ns);\n     NodeHeartbeatResponse beatResponse \u003d\n         rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n     if (! beatResponse.getContainersToCleanup().isEmpty()) {\n       // remove from queue\n       synchronized(releasedContainerList) {\n         for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n           if (amContainerList.contains(containerId)) {\n             // AM container (not killed?, only release)\n             synchronized(amContainerList) {\n               amContainerList.remove(containerId);\n             }\n             LOG.debug(\"NodeManager {} releases an AM ({}).\",\n                 node.getNodeID(), containerId);\n           } else {\n             cs \u003d runningContainers.remove(containerId);\n             containerQueue.remove(cs);\n             releasedContainerList.add(containerId);\n             LOG.debug(\"NodeManager {} releases a container ({}).\",\n                 node.getNodeID(), containerId);\n           }\n         }\n       }\n     }\n     if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n       lastStep();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void middleStep() throws Exception {\n    // we check the lifetime for each running containers\n    ContainerSimulator cs \u003d null;\n    synchronized(completedContainerList) {\n      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n        runningContainers.remove(cs.getId());\n        completedContainerList.add(cs.getId());\n        LOG.debug(\"Container {} has completed\", cs.getId());\n      }\n    }\n    \n    // send heart beat\n    NodeHeartbeatRequest beatRequest \u003d\n            Records.newRecord(NodeHeartbeatRequest.class);\n    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n    \n    ns.setContainersStatuses(generateContainerStatusList());\n    ns.setNodeId(node.getNodeID());\n    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n    ns.setResponseId(responseId++);\n    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n\n    //set node \u0026 containers utilization\n    if (resourceUtilizationRatio \u003e 0 \u0026\u0026 resourceUtilizationRatio \u003c\u003d1) {\n      int pMemUsed \u003d Math.round(node.getTotalCapability().getMemorySize()\n          * resourceUtilizationRatio);\n      float cpuUsed \u003d node.getTotalCapability().getVirtualCores()\n          * resourceUtilizationRatio;\n      ResourceUtilization resourceUtilization \u003d ResourceUtilization.newInstance(\n          pMemUsed, pMemUsed, cpuUsed);\n      ns.setContainersUtilization(resourceUtilization);\n      ns.setNodeUtilization(resourceUtilization);\n    }\n    beatRequest.setNodeStatus(ns);\n    NodeHeartbeatResponse beatResponse \u003d\n        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n      // remove from queue\n      synchronized(releasedContainerList) {\n        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n          if (amContainerList.contains(containerId)) {\n            // AM container (not killed?, only release)\n            synchronized(amContainerList) {\n              amContainerList.remove(containerId);\n            }\n            LOG.debug(\"NodeManager {} releases an AM ({}).\",\n                node.getNodeID(), containerId);\n          } else {\n            cs \u003d runningContainers.remove(containerId);\n            containerQueue.remove(cs);\n            releasedContainerList.add(containerId);\n            LOG.debug(\"NodeManager {} releases a container ({}).\",\n                node.getNodeID(), containerId);\n          }\n        }\n      }\n    }\n    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n      lastStep();\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
      "extendedDetails": {}
    },
    "ff8378eb1b960c72d18a984c7e5d145b407ca11a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7102. NM heartbeat stuck when responseId overflows MAX_INT. Contributed by Botong Huang\n",
      "commitDate": "25/01/18 3:47 PM",
      "commitName": "ff8378eb1b960c72d18a984c7e5d145b407ca11a",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "09/11/17 12:09 PM",
      "commitNameOld": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 77.15,
      "commitsBetweenForRepo": 409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void middleStep() throws Exception {\n     // we check the lifetime for each running containers\n     ContainerSimulator cs \u003d null;\n     synchronized(completedContainerList) {\n       while ((cs \u003d containerQueue.poll()) !\u003d null) {\n         runningContainers.remove(cs.getId());\n         completedContainerList.add(cs.getId());\n         LOG.debug(\"Container {} has completed\", cs.getId());\n       }\n     }\n     \n     // send heart beat\n     NodeHeartbeatRequest beatRequest \u003d\n             Records.newRecord(NodeHeartbeatRequest.class);\n     beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n     NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n     \n     ns.setContainersStatuses(generateContainerStatusList());\n     ns.setNodeId(node.getNodeID());\n     ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n-    ns.setResponseId(RESPONSE_ID ++);\n+    ns.setResponseId(responseId++);\n     ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n     beatRequest.setNodeStatus(ns);\n     NodeHeartbeatResponse beatResponse \u003d\n         rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n     if (! beatResponse.getContainersToCleanup().isEmpty()) {\n       // remove from queue\n       synchronized(releasedContainerList) {\n         for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n           if (amContainerList.contains(containerId)) {\n             // AM container (not killed?, only release)\n             synchronized(amContainerList) {\n               amContainerList.remove(containerId);\n             }\n             LOG.debug(\"NodeManager {} releases an AM ({}).\",\n                 node.getNodeID(), containerId);\n           } else {\n             cs \u003d runningContainers.remove(containerId);\n             containerQueue.remove(cs);\n             releasedContainerList.add(containerId);\n             LOG.debug(\"NodeManager {} releases a container ({}).\",\n                 node.getNodeID(), containerId);\n           }\n         }\n       }\n     }\n     if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n       lastStep();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void middleStep() throws Exception {\n    // we check the lifetime for each running containers\n    ContainerSimulator cs \u003d null;\n    synchronized(completedContainerList) {\n      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n        runningContainers.remove(cs.getId());\n        completedContainerList.add(cs.getId());\n        LOG.debug(\"Container {} has completed\", cs.getId());\n      }\n    }\n    \n    // send heart beat\n    NodeHeartbeatRequest beatRequest \u003d\n            Records.newRecord(NodeHeartbeatRequest.class);\n    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n    \n    ns.setContainersStatuses(generateContainerStatusList());\n    ns.setNodeId(node.getNodeID());\n    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n    ns.setResponseId(responseId++);\n    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n    beatRequest.setNodeStatus(ns);\n    NodeHeartbeatResponse beatResponse \u003d\n        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n      // remove from queue\n      synchronized(releasedContainerList) {\n        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n          if (amContainerList.contains(containerId)) {\n            // AM container (not killed?, only release)\n            synchronized(amContainerList) {\n              amContainerList.remove(containerId);\n            }\n            LOG.debug(\"NodeManager {} releases an AM ({}).\",\n                node.getNodeID(), containerId);\n          } else {\n            cs \u003d runningContainers.remove(containerId);\n            containerQueue.remove(cs);\n            releasedContainerList.add(containerId);\n            LOG.debug(\"NodeManager {} releases a container ({}).\",\n                node.getNodeID(), containerId);\n          }\n        }\n      }\n    }\n    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n      lastStep();\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
      "extendedDetails": {}
    },
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/07/14 6:29 PM",
      "commitNameOld": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1060.12,
      "commitsBetweenForRepo": 7788,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   public void middleStep() throws Exception {\n     // we check the lifetime for each running containers\n     ContainerSimulator cs \u003d null;\n     synchronized(completedContainerList) {\n       while ((cs \u003d containerQueue.poll()) !\u003d null) {\n         runningContainers.remove(cs.getId());\n         completedContainerList.add(cs.getId());\n-        LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n-                cs.getId()));\n+        LOG.debug(\"Container {} has completed\", cs.getId());\n       }\n     }\n     \n     // send heart beat\n     NodeHeartbeatRequest beatRequest \u003d\n             Records.newRecord(NodeHeartbeatRequest.class);\n     beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n     NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n     \n     ns.setContainersStatuses(generateContainerStatusList());\n     ns.setNodeId(node.getNodeID());\n     ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n     ns.setResponseId(RESPONSE_ID ++);\n     ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n     beatRequest.setNodeStatus(ns);\n     NodeHeartbeatResponse beatResponse \u003d\n         rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n     if (! beatResponse.getContainersToCleanup().isEmpty()) {\n       // remove from queue\n       synchronized(releasedContainerList) {\n         for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n           if (amContainerList.contains(containerId)) {\n             // AM container (not killed?, only release)\n             synchronized(amContainerList) {\n               amContainerList.remove(containerId);\n             }\n-            LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n-                \"an AM ({1}).\", node.getNodeID(), containerId));\n+            LOG.debug(\"NodeManager {} releases an AM ({}).\",\n+                node.getNodeID(), containerId);\n           } else {\n             cs \u003d runningContainers.remove(containerId);\n             containerQueue.remove(cs);\n             releasedContainerList.add(containerId);\n-            LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n-                \"container ({1}).\", node.getNodeID(), containerId));\n+            LOG.debug(\"NodeManager {} releases a container ({}).\",\n+                node.getNodeID(), containerId);\n           }\n         }\n       }\n     }\n     if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n       lastStep();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void middleStep() throws Exception {\n    // we check the lifetime for each running containers\n    ContainerSimulator cs \u003d null;\n    synchronized(completedContainerList) {\n      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n        runningContainers.remove(cs.getId());\n        completedContainerList.add(cs.getId());\n        LOG.debug(\"Container {} has completed\", cs.getId());\n      }\n    }\n    \n    // send heart beat\n    NodeHeartbeatRequest beatRequest \u003d\n            Records.newRecord(NodeHeartbeatRequest.class);\n    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n    \n    ns.setContainersStatuses(generateContainerStatusList());\n    ns.setNodeId(node.getNodeID());\n    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n    ns.setResponseId(RESPONSE_ID ++);\n    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n    beatRequest.setNodeStatus(ns);\n    NodeHeartbeatResponse beatResponse \u003d\n        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n      // remove from queue\n      synchronized(releasedContainerList) {\n        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n          if (amContainerList.contains(containerId)) {\n            // AM container (not killed?, only release)\n            synchronized(amContainerList) {\n              amContainerList.remove(containerId);\n            }\n            LOG.debug(\"NodeManager {} releases an AM ({}).\",\n                node.getNodeID(), containerId);\n          } else {\n            cs \u003d runningContainers.remove(containerId);\n            containerQueue.remove(cs);\n            releasedContainerList.add(containerId);\n            LOG.debug(\"NodeManager {} releases a container ({}).\",\n                node.getNodeID(), containerId);\n          }\n        }\n      }\n    }\n    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n      lastStep();\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
      "extendedDetails": {}
    },
    "b0c2c856192e71145c012504511fad172436131b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 6:29 PM",
      "commitName": "b0c2c856192e71145c012504511fad172436131b",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/14 6:29 PM",
          "commitName": "b0c2c856192e71145c012504511fad172436131b",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/07/14 10:12 AM",
          "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,51 @@\n-  public void middleStep() {\n+  public void middleStep() throws Exception {\n     // we check the lifetime for each running containers\n     ContainerSimulator cs \u003d null;\n     synchronized(completedContainerList) {\n       while ((cs \u003d containerQueue.poll()) !\u003d null) {\n         runningContainers.remove(cs.getId());\n         completedContainerList.add(cs.getId());\n         LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n                 cs.getId()));\n       }\n     }\n     \n     // send heart beat\n     NodeHeartbeatRequest beatRequest \u003d\n             Records.newRecord(NodeHeartbeatRequest.class);\n     beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n     NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n     \n     ns.setContainersStatuses(generateContainerStatusList());\n     ns.setNodeId(node.getNodeID());\n     ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n     ns.setResponseId(RESPONSE_ID ++);\n     ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n     beatRequest.setNodeStatus(ns);\n-    try {\n-      NodeHeartbeatResponse beatResponse \u003d\n-              rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n-      if (! beatResponse.getContainersToCleanup().isEmpty()) {\n-        // remove from queue\n-        synchronized(releasedContainerList) {\n-          for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n-            if (amContainerList.contains(containerId)) {\n-              // AM container (not killed?, only release)\n-              synchronized(amContainerList) {\n-                amContainerList.remove(containerId);\n-              }\n-              LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n-                      \"an AM ({1}).\", node.getNodeID(), containerId));\n-            } else {\n-              cs \u003d runningContainers.remove(containerId);\n-              containerQueue.remove(cs);\n-              releasedContainerList.add(containerId);\n-              LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n-                      \"container ({1}).\", node.getNodeID(), containerId));\n+    NodeHeartbeatResponse beatResponse \u003d\n+        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n+    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n+      // remove from queue\n+      synchronized(releasedContainerList) {\n+        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n+          if (amContainerList.contains(containerId)) {\n+            // AM container (not killed?, only release)\n+            synchronized(amContainerList) {\n+              amContainerList.remove(containerId);\n             }\n+            LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n+                \"an AM ({1}).\", node.getNodeID(), containerId));\n+          } else {\n+            cs \u003d runningContainers.remove(containerId);\n+            containerQueue.remove(cs);\n+            releasedContainerList.add(containerId);\n+            LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n+                \"container ({1}).\", node.getNodeID(), containerId));\n           }\n         }\n       }\n-      if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n-        lastStep();\n-      }\n-    } catch (YarnException e) {\n-      e.printStackTrace();\n-    } catch (IOException e) {\n-      e.printStackTrace();\n+    }\n+    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n+      lastStep();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void middleStep() throws Exception {\n    // we check the lifetime for each running containers\n    ContainerSimulator cs \u003d null;\n    synchronized(completedContainerList) {\n      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n        runningContainers.remove(cs.getId());\n        completedContainerList.add(cs.getId());\n        LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n                cs.getId()));\n      }\n    }\n    \n    // send heart beat\n    NodeHeartbeatRequest beatRequest \u003d\n            Records.newRecord(NodeHeartbeatRequest.class);\n    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n    \n    ns.setContainersStatuses(generateContainerStatusList());\n    ns.setNodeId(node.getNodeID());\n    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n    ns.setResponseId(RESPONSE_ID ++);\n    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n    beatRequest.setNodeStatus(ns);\n    NodeHeartbeatResponse beatResponse \u003d\n        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n      // remove from queue\n      synchronized(releasedContainerList) {\n        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n          if (amContainerList.contains(containerId)) {\n            // AM container (not killed?, only release)\n            synchronized(amContainerList) {\n              amContainerList.remove(containerId);\n            }\n            LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n                \"an AM ({1}).\", node.getNodeID(), containerId));\n          } else {\n            cs \u003d runningContainers.remove(containerId);\n            containerQueue.remove(cs);\n            releasedContainerList.add(containerId);\n            LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n                \"container ({1}).\", node.getNodeID(), containerId));\n          }\n        }\n      }\n    }\n    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n      lastStep();\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1726. ResourceSchedulerWrapper broken due to AbstractYarnScheduler. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613547 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/14 6:29 PM",
          "commitName": "b0c2c856192e71145c012504511fad172436131b",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/07/14 10:12 AM",
          "commitNameOld": "77363b9d839e47bef2325b8682eabe00d4c83354",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,51 @@\n-  public void middleStep() {\n+  public void middleStep() throws Exception {\n     // we check the lifetime for each running containers\n     ContainerSimulator cs \u003d null;\n     synchronized(completedContainerList) {\n       while ((cs \u003d containerQueue.poll()) !\u003d null) {\n         runningContainers.remove(cs.getId());\n         completedContainerList.add(cs.getId());\n         LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n                 cs.getId()));\n       }\n     }\n     \n     // send heart beat\n     NodeHeartbeatRequest beatRequest \u003d\n             Records.newRecord(NodeHeartbeatRequest.class);\n     beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n     NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n     \n     ns.setContainersStatuses(generateContainerStatusList());\n     ns.setNodeId(node.getNodeID());\n     ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n     ns.setResponseId(RESPONSE_ID ++);\n     ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n     beatRequest.setNodeStatus(ns);\n-    try {\n-      NodeHeartbeatResponse beatResponse \u003d\n-              rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n-      if (! beatResponse.getContainersToCleanup().isEmpty()) {\n-        // remove from queue\n-        synchronized(releasedContainerList) {\n-          for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n-            if (amContainerList.contains(containerId)) {\n-              // AM container (not killed?, only release)\n-              synchronized(amContainerList) {\n-                amContainerList.remove(containerId);\n-              }\n-              LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n-                      \"an AM ({1}).\", node.getNodeID(), containerId));\n-            } else {\n-              cs \u003d runningContainers.remove(containerId);\n-              containerQueue.remove(cs);\n-              releasedContainerList.add(containerId);\n-              LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n-                      \"container ({1}).\", node.getNodeID(), containerId));\n+    NodeHeartbeatResponse beatResponse \u003d\n+        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n+    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n+      // remove from queue\n+      synchronized(releasedContainerList) {\n+        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n+          if (amContainerList.contains(containerId)) {\n+            // AM container (not killed?, only release)\n+            synchronized(amContainerList) {\n+              amContainerList.remove(containerId);\n             }\n+            LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n+                \"an AM ({1}).\", node.getNodeID(), containerId));\n+          } else {\n+            cs \u003d runningContainers.remove(containerId);\n+            containerQueue.remove(cs);\n+            releasedContainerList.add(containerId);\n+            LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n+                \"container ({1}).\", node.getNodeID(), containerId));\n           }\n         }\n       }\n-      if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n-        lastStep();\n-      }\n-    } catch (YarnException e) {\n-      e.printStackTrace();\n-    } catch (IOException e) {\n-      e.printStackTrace();\n+    }\n+    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n+      lastStep();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void middleStep() throws Exception {\n    // we check the lifetime for each running containers\n    ContainerSimulator cs \u003d null;\n    synchronized(completedContainerList) {\n      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n        runningContainers.remove(cs.getId());\n        completedContainerList.add(cs.getId());\n        LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n                cs.getId()));\n      }\n    }\n    \n    // send heart beat\n    NodeHeartbeatRequest beatRequest \u003d\n            Records.newRecord(NodeHeartbeatRequest.class);\n    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n    \n    ns.setContainersStatuses(generateContainerStatusList());\n    ns.setNodeId(node.getNodeID());\n    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n    ns.setResponseId(RESPONSE_ID ++);\n    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n    beatRequest.setNodeStatus(ns);\n    NodeHeartbeatResponse beatResponse \u003d\n        rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n    if (! beatResponse.getContainersToCleanup().isEmpty()) {\n      // remove from queue\n      synchronized(releasedContainerList) {\n        for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n          if (amContainerList.contains(containerId)) {\n            // AM container (not killed?, only release)\n            synchronized(amContainerList) {\n              amContainerList.remove(containerId);\n            }\n            LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n                \"an AM ({1}).\", node.getNodeID(), containerId));\n          } else {\n            cs \u003d runningContainers.remove(containerId);\n            containerQueue.remove(cs);\n            releasedContainerList.add(containerId);\n            LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n                \"container ({1}).\", node.getNodeID(), containerId));\n          }\n        }\n      }\n    }\n    if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n      lastStep();\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,57 @@\n+  public void middleStep() {\n+    // we check the lifetime for each running containers\n+    ContainerSimulator cs \u003d null;\n+    synchronized(completedContainerList) {\n+      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n+        runningContainers.remove(cs.getId());\n+        completedContainerList.add(cs.getId());\n+        LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n+                cs.getId()));\n+      }\n+    }\n+    \n+    // send heart beat\n+    NodeHeartbeatRequest beatRequest \u003d\n+            Records.newRecord(NodeHeartbeatRequest.class);\n+    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n+    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n+    \n+    ns.setContainersStatuses(generateContainerStatusList());\n+    ns.setNodeId(node.getNodeID());\n+    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n+    ns.setResponseId(RESPONSE_ID ++);\n+    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n+    beatRequest.setNodeStatus(ns);\n+    try {\n+      NodeHeartbeatResponse beatResponse \u003d\n+              rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n+      if (! beatResponse.getContainersToCleanup().isEmpty()) {\n+        // remove from queue\n+        synchronized(releasedContainerList) {\n+          for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n+            if (amContainerList.contains(containerId)) {\n+              // AM container (not killed?, only release)\n+              synchronized(amContainerList) {\n+                amContainerList.remove(containerId);\n+              }\n+              LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n+                      \"an AM ({1}).\", node.getNodeID(), containerId));\n+            } else {\n+              cs \u003d runningContainers.remove(containerId);\n+              containerQueue.remove(cs);\n+              releasedContainerList.add(containerId);\n+              LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n+                      \"container ({1}).\", node.getNodeID(), containerId));\n+            }\n+          }\n+        }\n+      }\n+      if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n+        lastStep();\n+      }\n+    } catch (YarnException e) {\n+      e.printStackTrace();\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void middleStep() {\n    // we check the lifetime for each running containers\n    ContainerSimulator cs \u003d null;\n    synchronized(completedContainerList) {\n      while ((cs \u003d containerQueue.poll()) !\u003d null) {\n        runningContainers.remove(cs.getId());\n        completedContainerList.add(cs.getId());\n        LOG.debug(MessageFormat.format(\"Container {0} has completed\",\n                cs.getId()));\n      }\n    }\n    \n    // send heart beat\n    NodeHeartbeatRequest beatRequest \u003d\n            Records.newRecord(NodeHeartbeatRequest.class);\n    beatRequest.setLastKnownNMTokenMasterKey(masterKey);\n    NodeStatus ns \u003d Records.newRecord(NodeStatus.class);\n    \n    ns.setContainersStatuses(generateContainerStatusList());\n    ns.setNodeId(node.getNodeID());\n    ns.setKeepAliveApplications(new ArrayList\u003cApplicationId\u003e());\n    ns.setResponseId(RESPONSE_ID ++);\n    ns.setNodeHealthStatus(NodeHealthStatus.newInstance(true, \"\", 0));\n    beatRequest.setNodeStatus(ns);\n    try {\n      NodeHeartbeatResponse beatResponse \u003d\n              rm.getResourceTrackerService().nodeHeartbeat(beatRequest);\n      if (! beatResponse.getContainersToCleanup().isEmpty()) {\n        // remove from queue\n        synchronized(releasedContainerList) {\n          for (ContainerId containerId : beatResponse.getContainersToCleanup()){\n            if (amContainerList.contains(containerId)) {\n              // AM container (not killed?, only release)\n              synchronized(amContainerList) {\n                amContainerList.remove(containerId);\n              }\n              LOG.debug(MessageFormat.format(\"NodeManager {0} releases \" +\n                      \"an AM ({1}).\", node.getNodeID(), containerId));\n            } else {\n              cs \u003d runningContainers.remove(containerId);\n              containerQueue.remove(cs);\n              releasedContainerList.add(containerId);\n              LOG.debug(MessageFormat.format(\"NodeManager {0} releases a \" +\n                      \"container ({1}).\", node.getNodeID(), containerId));\n            }\n          }\n        }\n      }\n      if (beatResponse.getNodeAction() \u003d\u003d NodeAction.SHUTDOWN) {\n        lastStep();\n      }\n    } catch (YarnException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java"
    }
  }
}