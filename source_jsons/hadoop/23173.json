{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileOutputCommitter.java",
  "functionName": "mergePaths",
  "functionId": "mergePaths___fs-FileSystem__from-FileStatus(modifiers-final)__to-Path(modifiers-final)__context-JobContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
  "functionStartLine": 455,
  "functionEndLine": 496,
  "numCommitsSeen": 42,
  "timeTaken": 3594,
  "changeHistory": [
    "4d8de7ab690ef919b392b12d856482a6a1f2bb3d",
    "91baca145a6c16fe13f455d150c05bd73179531b",
    "94242c93857a06fb9c56ee571a47d6ca18f00f48"
  ],
  "changeHistoryShort": {
    "4d8de7ab690ef919b392b12d856482a6a1f2bb3d": "Ymultichange(Yparameterchange,Ybodychange)",
    "91baca145a6c16fe13f455d150c05bd73179531b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d8de7ab690ef919b392b12d856482a6a1f2bb3d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7164. FileOutputCommitter does not report progress while merging paths. Contributed by Kuhu Shukla\n",
      "commitDate": "28/11/18 12:54 PM",
      "commitName": "4d8de7ab690ef919b392b12d856482a6a1f2bb3d",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-7164. FileOutputCommitter does not report progress while merging paths. Contributed by Kuhu Shukla\n",
          "commitDate": "28/11/18 12:54 PM",
          "commitName": "4d8de7ab690ef919b392b12d856482a6a1f2bb3d",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "17/01/18 6:14 AM",
          "commitNameOld": "6e42d058292d9656e9ebc9a47be13280e3c919ea",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 315.28,
          "commitsBetweenForRepo": 3035,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n   private void mergePaths(FileSystem fs, final FileStatus from,\n-      final Path to) throws IOException {\n+      final Path to, JobContext context) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Merging data from \" + from + \" to \" + to);\n     }\n+    reportProgress(context);\n     FileStatus toStat;\n     try {\n       toStat \u003d fs.getFileStatus(to);\n     } catch (FileNotFoundException fnfe) {\n       toStat \u003d null;\n     }\n \n     if (from.isFile()) {\n       if (toStat !\u003d null) {\n         if (!fs.delete(to, true)) {\n           throw new IOException(\"Failed to delete \" + to);\n         }\n       }\n \n       if (!fs.rename(from.getPath(), to)) {\n         throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n       }\n     } else if (from.isDirectory()) {\n       if (toStat !\u003d null) {\n         if (!toStat.isDirectory()) {\n           if (!fs.delete(to, true)) {\n             throw new IOException(\"Failed to delete \" + to);\n           }\n-          renameOrMerge(fs, from, to);\n+          renameOrMerge(fs, from, to, context);\n         } else {\n           //It is a directory so merge everything in the directories\n           for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n             Path subTo \u003d new Path(to, subFrom.getPath().getName());\n-            mergePaths(fs, subFrom, subTo);\n+            mergePaths(fs, subFrom, subTo, context);\n           }\n         }\n       } else {\n-        renameOrMerge(fs, from, to);\n+        renameOrMerge(fs, from, to, context);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergePaths(FileSystem fs, final FileStatus from,\n      final Path to, JobContext context) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Merging data from \" + from + \" to \" + to);\n    }\n    reportProgress(context);\n    FileStatus toStat;\n    try {\n      toStat \u003d fs.getFileStatus(to);\n    } catch (FileNotFoundException fnfe) {\n      toStat \u003d null;\n    }\n\n    if (from.isFile()) {\n      if (toStat !\u003d null) {\n        if (!fs.delete(to, true)) {\n          throw new IOException(\"Failed to delete \" + to);\n        }\n      }\n\n      if (!fs.rename(from.getPath(), to)) {\n        throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n      }\n    } else if (from.isDirectory()) {\n      if (toStat !\u003d null) {\n        if (!toStat.isDirectory()) {\n          if (!fs.delete(to, true)) {\n            throw new IOException(\"Failed to delete \" + to);\n          }\n          renameOrMerge(fs, from, to, context);\n        } else {\n          //It is a directory so merge everything in the directories\n          for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n            Path subTo \u003d new Path(to, subFrom.getPath().getName());\n            mergePaths(fs, subFrom, subTo, context);\n          }\n        }\n      } else {\n        renameOrMerge(fs, from, to, context);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
          "extendedDetails": {
            "oldValue": "[fs-FileSystem, from-FileStatus(modifiers-final), to-Path(modifiers-final)]",
            "newValue": "[fs-FileSystem, from-FileStatus(modifiers-final), to-Path(modifiers-final), context-JobContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7164. FileOutputCommitter does not report progress while merging paths. Contributed by Kuhu Shukla\n",
          "commitDate": "28/11/18 12:54 PM",
          "commitName": "4d8de7ab690ef919b392b12d856482a6a1f2bb3d",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "17/01/18 6:14 AM",
          "commitNameOld": "6e42d058292d9656e9ebc9a47be13280e3c919ea",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 315.28,
          "commitsBetweenForRepo": 3035,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n   private void mergePaths(FileSystem fs, final FileStatus from,\n-      final Path to) throws IOException {\n+      final Path to, JobContext context) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Merging data from \" + from + \" to \" + to);\n     }\n+    reportProgress(context);\n     FileStatus toStat;\n     try {\n       toStat \u003d fs.getFileStatus(to);\n     } catch (FileNotFoundException fnfe) {\n       toStat \u003d null;\n     }\n \n     if (from.isFile()) {\n       if (toStat !\u003d null) {\n         if (!fs.delete(to, true)) {\n           throw new IOException(\"Failed to delete \" + to);\n         }\n       }\n \n       if (!fs.rename(from.getPath(), to)) {\n         throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n       }\n     } else if (from.isDirectory()) {\n       if (toStat !\u003d null) {\n         if (!toStat.isDirectory()) {\n           if (!fs.delete(to, true)) {\n             throw new IOException(\"Failed to delete \" + to);\n           }\n-          renameOrMerge(fs, from, to);\n+          renameOrMerge(fs, from, to, context);\n         } else {\n           //It is a directory so merge everything in the directories\n           for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n             Path subTo \u003d new Path(to, subFrom.getPath().getName());\n-            mergePaths(fs, subFrom, subTo);\n+            mergePaths(fs, subFrom, subTo, context);\n           }\n         }\n       } else {\n-        renameOrMerge(fs, from, to);\n+        renameOrMerge(fs, from, to, context);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergePaths(FileSystem fs, final FileStatus from,\n      final Path to, JobContext context) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Merging data from \" + from + \" to \" + to);\n    }\n    reportProgress(context);\n    FileStatus toStat;\n    try {\n      toStat \u003d fs.getFileStatus(to);\n    } catch (FileNotFoundException fnfe) {\n      toStat \u003d null;\n    }\n\n    if (from.isFile()) {\n      if (toStat !\u003d null) {\n        if (!fs.delete(to, true)) {\n          throw new IOException(\"Failed to delete \" + to);\n        }\n      }\n\n      if (!fs.rename(from.getPath(), to)) {\n        throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n      }\n    } else if (from.isDirectory()) {\n      if (toStat !\u003d null) {\n        if (!toStat.isDirectory()) {\n          if (!fs.delete(to, true)) {\n            throw new IOException(\"Failed to delete \" + to);\n          }\n          renameOrMerge(fs, from, to, context);\n        } else {\n          //It is a directory so merge everything in the directories\n          for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n            Path subTo \u003d new Path(to, subFrom.getPath().getName());\n            mergePaths(fs, subFrom, subTo, context);\n          }\n        }\n      } else {\n        renameOrMerge(fs, from, to, context);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
          "extendedDetails": {}
        }
      ]
    },
    "91baca145a6c16fe13f455d150c05bd73179531b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6275. Race condition in FileOutputCommitter v2 for user-specified task output subdirs. Contributed by Gera Shegalov and Siqi Li\n",
      "commitDate": "19/03/15 2:39 PM",
      "commitName": "91baca145a6c16fe13f455d150c05bd73179531b",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6275. Race condition in FileOutputCommitter v2 for user-specified task output subdirs. Contributed by Gera Shegalov and Siqi Li\n",
          "commitDate": "19/03/15 2:39 PM",
          "commitName": "91baca145a6c16fe13f455d150c05bd73179531b",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "10/03/15 11:32 AM",
          "commitNameOld": "aa92b764a7ddb888d097121c4d610089a0053d11",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 9.13,
          "commitsBetweenForRepo": 87,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,41 @@\n-  private static void mergePaths(FileSystem fs, final FileStatus from,\n-      final Path to)\n-    throws IOException {\n-     LOG.debug(\"Merging data from \"+from+\" to \"+to);\n-     if(from.isFile()) {\n-       if(fs.exists(to)) {\n-         if(!fs.delete(to, true)) {\n-           throw new IOException(\"Failed to delete \"+to);\n-         }\n-       }\n+  private void mergePaths(FileSystem fs, final FileStatus from,\n+      final Path to) throws IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Merging data from \" + from + \" to \" + to);\n+    }\n+    FileStatus toStat;\n+    try {\n+      toStat \u003d fs.getFileStatus(to);\n+    } catch (FileNotFoundException fnfe) {\n+      toStat \u003d null;\n+    }\n \n-       if(!fs.rename(from.getPath(), to)) {\n-         throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n-       }\n-     } else if(from.isDirectory()) {\n-       if(fs.exists(to)) {\n-         FileStatus toStat \u003d fs.getFileStatus(to);\n-         if(!toStat.isDirectory()) {\n-           if(!fs.delete(to, true)) {\n-             throw new IOException(\"Failed to delete \"+to);\n-           }\n-           if(!fs.rename(from.getPath(), to)) {\n-             throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n-           }\n-         } else {\n-           //It is a directory so merge everything in the directories\n-           for(FileStatus subFrom: fs.listStatus(from.getPath())) {\n-             Path subTo \u003d new Path(to, subFrom.getPath().getName());\n-             mergePaths(fs, subFrom, subTo);\n-           }\n-         }\n-       } else {\n-         //it does not exist just rename\n-         if(!fs.rename(from.getPath(), to)) {\n-           throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n-         }\n-       }\n-     }\n+    if (from.isFile()) {\n+      if (toStat !\u003d null) {\n+        if (!fs.delete(to, true)) {\n+          throw new IOException(\"Failed to delete \" + to);\n+        }\n+      }\n+\n+      if (!fs.rename(from.getPath(), to)) {\n+        throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n+      }\n+    } else if (from.isDirectory()) {\n+      if (toStat !\u003d null) {\n+        if (!toStat.isDirectory()) {\n+          if (!fs.delete(to, true)) {\n+            throw new IOException(\"Failed to delete \" + to);\n+          }\n+          renameOrMerge(fs, from, to);\n+        } else {\n+          //It is a directory so merge everything in the directories\n+          for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n+            Path subTo \u003d new Path(to, subFrom.getPath().getName());\n+            mergePaths(fs, subFrom, subTo);\n+          }\n+        }\n+      } else {\n+        renameOrMerge(fs, from, to);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergePaths(FileSystem fs, final FileStatus from,\n      final Path to) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Merging data from \" + from + \" to \" + to);\n    }\n    FileStatus toStat;\n    try {\n      toStat \u003d fs.getFileStatus(to);\n    } catch (FileNotFoundException fnfe) {\n      toStat \u003d null;\n    }\n\n    if (from.isFile()) {\n      if (toStat !\u003d null) {\n        if (!fs.delete(to, true)) {\n          throw new IOException(\"Failed to delete \" + to);\n        }\n      }\n\n      if (!fs.rename(from.getPath(), to)) {\n        throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n      }\n    } else if (from.isDirectory()) {\n      if (toStat !\u003d null) {\n        if (!toStat.isDirectory()) {\n          if (!fs.delete(to, true)) {\n            throw new IOException(\"Failed to delete \" + to);\n          }\n          renameOrMerge(fs, from, to);\n        } else {\n          //It is a directory so merge everything in the directories\n          for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n            Path subTo \u003d new Path(to, subFrom.getPath().getName());\n            mergePaths(fs, subFrom, subTo);\n          }\n        }\n      } else {\n        renameOrMerge(fs, from, to);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6275. Race condition in FileOutputCommitter v2 for user-specified task output subdirs. Contributed by Gera Shegalov and Siqi Li\n",
          "commitDate": "19/03/15 2:39 PM",
          "commitName": "91baca145a6c16fe13f455d150c05bd73179531b",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "10/03/15 11:32 AM",
          "commitNameOld": "aa92b764a7ddb888d097121c4d610089a0053d11",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 9.13,
          "commitsBetweenForRepo": 87,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,41 @@\n-  private static void mergePaths(FileSystem fs, final FileStatus from,\n-      final Path to)\n-    throws IOException {\n-     LOG.debug(\"Merging data from \"+from+\" to \"+to);\n-     if(from.isFile()) {\n-       if(fs.exists(to)) {\n-         if(!fs.delete(to, true)) {\n-           throw new IOException(\"Failed to delete \"+to);\n-         }\n-       }\n+  private void mergePaths(FileSystem fs, final FileStatus from,\n+      final Path to) throws IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Merging data from \" + from + \" to \" + to);\n+    }\n+    FileStatus toStat;\n+    try {\n+      toStat \u003d fs.getFileStatus(to);\n+    } catch (FileNotFoundException fnfe) {\n+      toStat \u003d null;\n+    }\n \n-       if(!fs.rename(from.getPath(), to)) {\n-         throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n-       }\n-     } else if(from.isDirectory()) {\n-       if(fs.exists(to)) {\n-         FileStatus toStat \u003d fs.getFileStatus(to);\n-         if(!toStat.isDirectory()) {\n-           if(!fs.delete(to, true)) {\n-             throw new IOException(\"Failed to delete \"+to);\n-           }\n-           if(!fs.rename(from.getPath(), to)) {\n-             throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n-           }\n-         } else {\n-           //It is a directory so merge everything in the directories\n-           for(FileStatus subFrom: fs.listStatus(from.getPath())) {\n-             Path subTo \u003d new Path(to, subFrom.getPath().getName());\n-             mergePaths(fs, subFrom, subTo);\n-           }\n-         }\n-       } else {\n-         //it does not exist just rename\n-         if(!fs.rename(from.getPath(), to)) {\n-           throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n-         }\n-       }\n-     }\n+    if (from.isFile()) {\n+      if (toStat !\u003d null) {\n+        if (!fs.delete(to, true)) {\n+          throw new IOException(\"Failed to delete \" + to);\n+        }\n+      }\n+\n+      if (!fs.rename(from.getPath(), to)) {\n+        throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n+      }\n+    } else if (from.isDirectory()) {\n+      if (toStat !\u003d null) {\n+        if (!toStat.isDirectory()) {\n+          if (!fs.delete(to, true)) {\n+            throw new IOException(\"Failed to delete \" + to);\n+          }\n+          renameOrMerge(fs, from, to);\n+        } else {\n+          //It is a directory so merge everything in the directories\n+          for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n+            Path subTo \u003d new Path(to, subFrom.getPath().getName());\n+            mergePaths(fs, subFrom, subTo);\n+          }\n+        }\n+      } else {\n+        renameOrMerge(fs, from, to);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergePaths(FileSystem fs, final FileStatus from,\n      final Path to) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Merging data from \" + from + \" to \" + to);\n    }\n    FileStatus toStat;\n    try {\n      toStat \u003d fs.getFileStatus(to);\n    } catch (FileNotFoundException fnfe) {\n      toStat \u003d null;\n    }\n\n    if (from.isFile()) {\n      if (toStat !\u003d null) {\n        if (!fs.delete(to, true)) {\n          throw new IOException(\"Failed to delete \" + to);\n        }\n      }\n\n      if (!fs.rename(from.getPath(), to)) {\n        throw new IOException(\"Failed to rename \" + from + \" to \" + to);\n      }\n    } else if (from.isDirectory()) {\n      if (toStat !\u003d null) {\n        if (!toStat.isDirectory()) {\n          if (!fs.delete(to, true)) {\n            throw new IOException(\"Failed to delete \" + to);\n          }\n          renameOrMerge(fs, from, to);\n        } else {\n          //It is a directory so merge everything in the directories\n          for (FileStatus subFrom : fs.listStatus(from.getPath())) {\n            Path subTo \u003d new Path(to, subFrom.getPath().getName());\n            mergePaths(fs, subFrom, subTo);\n          }\n        }\n      } else {\n        renameOrMerge(fs, from, to);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
          "extendedDetails": {}
        }
      ]
    },
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3711. Fixed MR AM recovery so that only single selected task output is recovered and thus reduce the unnecessarily bloated recovery time. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 4:04 PM",
      "commitName": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,39 @@\n+  private static void mergePaths(FileSystem fs, final FileStatus from,\n+      final Path to)\n+    throws IOException {\n+     LOG.debug(\"Merging data from \"+from+\" to \"+to);\n+     if(from.isFile()) {\n+       if(fs.exists(to)) {\n+         if(!fs.delete(to, true)) {\n+           throw new IOException(\"Failed to delete \"+to);\n+         }\n+       }\n+\n+       if(!fs.rename(from.getPath(), to)) {\n+         throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n+       }\n+     } else if(from.isDirectory()) {\n+       if(fs.exists(to)) {\n+         FileStatus toStat \u003d fs.getFileStatus(to);\n+         if(!toStat.isDirectory()) {\n+           if(!fs.delete(to, true)) {\n+             throw new IOException(\"Failed to delete \"+to);\n+           }\n+           if(!fs.rename(from.getPath(), to)) {\n+             throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n+           }\n+         } else {\n+           //It is a directory so merge everything in the directories\n+           for(FileStatus subFrom: fs.listStatus(from.getPath())) {\n+             Path subTo \u003d new Path(to, subFrom.getPath().getName());\n+             mergePaths(fs, subFrom, subTo);\n+           }\n+         }\n+       } else {\n+         //it does not exist just rename\n+         if(!fs.rename(from.getPath(), to)) {\n+           throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n+         }\n+       }\n+     }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void mergePaths(FileSystem fs, final FileStatus from,\n      final Path to)\n    throws IOException {\n     LOG.debug(\"Merging data from \"+from+\" to \"+to);\n     if(from.isFile()) {\n       if(fs.exists(to)) {\n         if(!fs.delete(to, true)) {\n           throw new IOException(\"Failed to delete \"+to);\n         }\n       }\n\n       if(!fs.rename(from.getPath(), to)) {\n         throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n       }\n     } else if(from.isDirectory()) {\n       if(fs.exists(to)) {\n         FileStatus toStat \u003d fs.getFileStatus(to);\n         if(!toStat.isDirectory()) {\n           if(!fs.delete(to, true)) {\n             throw new IOException(\"Failed to delete \"+to);\n           }\n           if(!fs.rename(from.getPath(), to)) {\n             throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n           }\n         } else {\n           //It is a directory so merge everything in the directories\n           for(FileStatus subFrom: fs.listStatus(from.getPath())) {\n             Path subTo \u003d new Path(to, subFrom.getPath().getName());\n             mergePaths(fs, subFrom, subTo);\n           }\n         }\n       } else {\n         //it does not exist just rename\n         if(!fs.rename(from.getPath(), to)) {\n           throw new IOException(\"Failed to rename \"+from+\" to \"+to);\n         }\n       }\n     }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java"
    }
  }
}