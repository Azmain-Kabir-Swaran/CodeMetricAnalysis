{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Job.java",
  "functionName": "monitorAndPrintJob",
  "functionId": "monitorAndPrintJob",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
  "functionStartLine": 1618,
  "functionEndLine": 1674,
  "numCommitsSeen": 43,
  "timeTaken": 5078,
  "changeHistory": [
    "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58",
    "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
    "aad81a15ece244c7347aa13f527bf69c6f1e81f4",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "f57eaf39898b36f4d0f711485003298b857de5f7",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58": "Ybodychange",
    "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72": "Ybodychange",
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d": "Ybodychange",
    "aad81a15ece244c7347aa13f527bf69c6f1e81f4": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "f57eaf39898b36f4d0f711485003298b857de5f7": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3426. Fixed MR AM in uber mode to write map intermediate outputs in the correct directory to work properly in secure mode. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213987 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:35 PM",
      "commitName": "b7ae5a6cb7b2d3e3112ac53007e984caeb07de58",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/12/11 4:16 PM",
      "commitNameOld": "72e9ec7a451d9fd1379e9d5ec0e8bfb7b31db500",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 10.97,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,57 @@\n   public boolean monitorAndPrintJob() \n       throws IOException, InterruptedException {\n     String lastReport \u003d null;\n     Job.TaskStatusFilter filter;\n     Configuration clientConf \u003d getConfiguration();\n     filter \u003d Job.getTaskOutputFilter(clientConf);\n     JobID jobId \u003d getJobID();\n     LOG.info(\"Running job: \" + jobId);\n     int eventCounter \u003d 0;\n     boolean profiling \u003d getProfileEnabled();\n     IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n     IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n     int progMonitorPollIntervalMillis \u003d \n       Job.getProgressPollInterval(clientConf);\n     /* make sure to report full progress after the job is done */\n     boolean reportedAfterCompletion \u003d false;\n+    boolean reportedUberMode \u003d false;\n     while (!isComplete() || !reportedAfterCompletion) {\n       if (isComplete()) {\n         reportedAfterCompletion \u003d true;\n       } else {\n         Thread.sleep(progMonitorPollIntervalMillis);\n       }\n+      if (status.getState() \u003d\u003d JobStatus.State.PREP) {\n+        continue;\n+      }      \n+      if (!reportedUberMode) {\n+        reportedUberMode \u003d true;\n+        LOG.info(\"Job \" + jobId + \" running in uber mode : \" + isUber());\n+      }      \n       String report \u003d \n         (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n             \" reduce \" + \n             StringUtils.formatPercent(reduceProgress(), 0));\n       if (!report.equals(lastReport)) {\n         LOG.info(report);\n         lastReport \u003d report;\n       }\n \n       TaskCompletionEvent[] events \u003d \n         getTaskCompletionEvents(eventCounter, 10); \n       eventCounter +\u003d events.length;\n       printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n     }\n     boolean success \u003d isSuccessful();\n     if (success) {\n       LOG.info(\"Job \" + jobId + \" completed successfully\");\n     } else {\n       LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState() + \n           \" due to: \" + status.getFailureInfo());\n     }\n     Counters counters \u003d getCounters();\n     if (counters !\u003d null) {\n       LOG.info(counters.toString());\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d getConfiguration();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    /* make sure to report full progress after the job is done */\n    boolean reportedAfterCompletion \u003d false;\n    boolean reportedUberMode \u003d false;\n    while (!isComplete() || !reportedAfterCompletion) {\n      if (isComplete()) {\n        reportedAfterCompletion \u003d true;\n      } else {\n        Thread.sleep(progMonitorPollIntervalMillis);\n      }\n      if (status.getState() \u003d\u003d JobStatus.State.PREP) {\n        continue;\n      }      \n      if (!reportedUberMode) {\n        reportedUberMode \u003d true;\n        LOG.info(\"Job \" + jobId + \" running in uber mode : \" + isUber());\n      }      \n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState() + \n          \" due to: \" + status.getFailureInfo());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {}
    },
    "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2952. Fixed ResourceManager/MR-client to consume diagnostics for AM failures in a couple of corner cases. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/09/11 7:46 AM",
      "commitName": "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/09/11 7:50 PM",
      "commitNameOld": "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 7.5,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   public boolean monitorAndPrintJob() \n       throws IOException, InterruptedException {\n     String lastReport \u003d null;\n     Job.TaskStatusFilter filter;\n     Configuration clientConf \u003d getConfiguration();\n     filter \u003d Job.getTaskOutputFilter(clientConf);\n     JobID jobId \u003d getJobID();\n     LOG.info(\"Running job: \" + jobId);\n     int eventCounter \u003d 0;\n     boolean profiling \u003d getProfileEnabled();\n     IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n     IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n     int progMonitorPollIntervalMillis \u003d \n       Job.getProgressPollInterval(clientConf);\n     /* make sure to report full progress after the job is done */\n     boolean reportedAfterCompletion \u003d false;\n     while (!isComplete() || !reportedAfterCompletion) {\n       if (isComplete()) {\n         reportedAfterCompletion \u003d true;\n       } else {\n         Thread.sleep(progMonitorPollIntervalMillis);\n       }\n       String report \u003d \n         (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n             \" reduce \" + \n             StringUtils.formatPercent(reduceProgress(), 0));\n       if (!report.equals(lastReport)) {\n         LOG.info(report);\n         lastReport \u003d report;\n       }\n \n       TaskCompletionEvent[] events \u003d \n         getTaskCompletionEvents(eventCounter, 10); \n       eventCounter +\u003d events.length;\n       printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n     }\n     boolean success \u003d isSuccessful();\n     if (success) {\n       LOG.info(\"Job \" + jobId + \" completed successfully\");\n     } else {\n-      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n+      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState() + \n+          \" due to: \" + status.getFailureInfo());\n     }\n     Counters counters \u003d getCounters();\n     if (counters !\u003d null) {\n       LOG.info(counters.toString());\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d getConfiguration();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    /* make sure to report full progress after the job is done */\n    boolean reportedAfterCompletion \u003d false;\n    while (!isComplete() || !reportedAfterCompletion) {\n      if (isComplete()) {\n        reportedAfterCompletion \u003d true;\n      } else {\n        Thread.sleep(progMonitorPollIntervalMillis);\n      }\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState() + \n          \" due to: \" + status.getFailureInfo());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {}
    },
    "e1acb1222dd6fdb8fa688c815cbca6ae4193745d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-1788. o.a.h.mapreduce.Job shouldn\u0027t make a copy of the JobConf. (Arun Murthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1172171 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/11 7:50 PM",
      "commitName": "e1acb1222dd6fdb8fa688c815cbca6ae4193745d",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "29/08/11 1:23 PM",
      "commitNameOld": "aad81a15ece244c7347aa13f527bf69c6f1e81f4",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 19.27,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public boolean monitorAndPrintJob() \n       throws IOException, InterruptedException {\n     String lastReport \u003d null;\n     Job.TaskStatusFilter filter;\n-    Configuration clientConf \u003d cluster.getConf();\n+    Configuration clientConf \u003d getConfiguration();\n     filter \u003d Job.getTaskOutputFilter(clientConf);\n     JobID jobId \u003d getJobID();\n     LOG.info(\"Running job: \" + jobId);\n     int eventCounter \u003d 0;\n     boolean profiling \u003d getProfileEnabled();\n     IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n     IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n     int progMonitorPollIntervalMillis \u003d \n       Job.getProgressPollInterval(clientConf);\n     /* make sure to report full progress after the job is done */\n     boolean reportedAfterCompletion \u003d false;\n     while (!isComplete() || !reportedAfterCompletion) {\n       if (isComplete()) {\n         reportedAfterCompletion \u003d true;\n       } else {\n         Thread.sleep(progMonitorPollIntervalMillis);\n       }\n       String report \u003d \n         (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n             \" reduce \" + \n             StringUtils.formatPercent(reduceProgress(), 0));\n       if (!report.equals(lastReport)) {\n         LOG.info(report);\n         lastReport \u003d report;\n       }\n \n       TaskCompletionEvent[] events \u003d \n         getTaskCompletionEvents(eventCounter, 10); \n       eventCounter +\u003d events.length;\n       printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n     }\n     boolean success \u003d isSuccessful();\n     if (success) {\n       LOG.info(\"Job \" + jobId + \" completed successfully\");\n     } else {\n       LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n     }\n     Counters counters \u003d getCounters();\n     if (counters !\u003d null) {\n       LOG.info(counters.toString());\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d getConfiguration();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    /* make sure to report full progress after the job is done */\n    boolean reportedAfterCompletion \u003d false;\n    while (!isComplete() || !reportedAfterCompletion) {\n      if (isComplete()) {\n        reportedAfterCompletion \u003d true;\n      } else {\n        Thread.sleep(progMonitorPollIntervalMillis);\n      }\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {}
    },
    "aad81a15ece244c7347aa13f527bf69c6f1e81f4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2737. Update the progress of jobs on client side. (Siddharth Seth and Mahadev Konar via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1162979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/08/11 1:23 PM",
      "commitName": "aad81a15ece244c7347aa13f527bf69c6f1e81f4",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 4.84,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,48 @@\n   public boolean monitorAndPrintJob() \n       throws IOException, InterruptedException {\n     String lastReport \u003d null;\n     Job.TaskStatusFilter filter;\n     Configuration clientConf \u003d cluster.getConf();\n     filter \u003d Job.getTaskOutputFilter(clientConf);\n     JobID jobId \u003d getJobID();\n     LOG.info(\"Running job: \" + jobId);\n     int eventCounter \u003d 0;\n     boolean profiling \u003d getProfileEnabled();\n     IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n     IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n     int progMonitorPollIntervalMillis \u003d \n       Job.getProgressPollInterval(clientConf);\n-    while (!isComplete()) {\n-      Thread.sleep(progMonitorPollIntervalMillis);\n+    /* make sure to report full progress after the job is done */\n+    boolean reportedAfterCompletion \u003d false;\n+    while (!isComplete() || !reportedAfterCompletion) {\n+      if (isComplete()) {\n+        reportedAfterCompletion \u003d true;\n+      } else {\n+        Thread.sleep(progMonitorPollIntervalMillis);\n+      }\n       String report \u003d \n         (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n             \" reduce \" + \n             StringUtils.formatPercent(reduceProgress(), 0));\n       if (!report.equals(lastReport)) {\n         LOG.info(report);\n         lastReport \u003d report;\n       }\n \n       TaskCompletionEvent[] events \u003d \n         getTaskCompletionEvents(eventCounter, 10); \n       eventCounter +\u003d events.length;\n       printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n     }\n     boolean success \u003d isSuccessful();\n     if (success) {\n       LOG.info(\"Job \" + jobId + \" completed successfully\");\n     } else {\n       LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n     }\n     Counters counters \u003d getCounters();\n     if (counters !\u003d null) {\n       LOG.info(counters.toString());\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d cluster.getConf();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    /* make sure to report full progress after the job is done */\n    boolean reportedAfterCompletion \u003d false;\n    while (!isComplete() || !reportedAfterCompletion) {\n      if (isComplete()) {\n        reportedAfterCompletion \u003d true;\n      } else {\n        Thread.sleep(progMonitorPollIntervalMillis);\n      }\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d cluster.getConf();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    while (!isComplete()) {\n      Thread.sleep(progMonitorPollIntervalMillis);\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d cluster.getConf();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    while (!isComplete()) {\n      Thread.sleep(progMonitorPollIntervalMillis);\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/Job.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Job.java"
      }
    },
    "f57eaf39898b36f4d0f711485003298b857de5f7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2679. Minor changes to sync trunk with MR-279 branch.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145870 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/11 11:03 PM",
      "commitName": "f57eaf39898b36f4d0f711485003298b857de5f7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 30.33,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   public boolean monitorAndPrintJob() \n       throws IOException, InterruptedException {\n     String lastReport \u003d null;\n     Job.TaskStatusFilter filter;\n     Configuration clientConf \u003d cluster.getConf();\n     filter \u003d Job.getTaskOutputFilter(clientConf);\n     JobID jobId \u003d getJobID();\n     LOG.info(\"Running job: \" + jobId);\n     int eventCounter \u003d 0;\n     boolean profiling \u003d getProfileEnabled();\n     IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n     IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n     int progMonitorPollIntervalMillis \u003d \n       Job.getProgressPollInterval(clientConf);\n     while (!isComplete()) {\n       Thread.sleep(progMonitorPollIntervalMillis);\n       String report \u003d \n         (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n             \" reduce \" + \n             StringUtils.formatPercent(reduceProgress(), 0));\n       if (!report.equals(lastReport)) {\n         LOG.info(report);\n         lastReport \u003d report;\n       }\n \n       TaskCompletionEvent[] events \u003d \n         getTaskCompletionEvents(eventCounter, 10); \n       eventCounter +\u003d events.length;\n       printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n     }\n+    boolean success \u003d isSuccessful();\n+    if (success) {\n+      LOG.info(\"Job \" + jobId + \" completed successfully\");\n+    } else {\n+      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n+    }\n     Counters counters \u003d getCounters();\n     if (counters !\u003d null) {\n       LOG.info(counters.toString());\n     }\n-    LOG.info(\"Job \" + jobId + \" completed with status: \"\n-          + getStatus().getState());\n-    return isSuccessful();\n+    return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d cluster.getConf();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    while (!isComplete()) {\n      Thread.sleep(progMonitorPollIntervalMillis);\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    boolean success \u003d isSuccessful();\n    if (success) {\n      LOG.info(\"Job \" + jobId + \" completed successfully\");\n    } else {\n      LOG.info(\"Job \" + jobId + \" failed with state \" + status.getState());\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    return success;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/Job.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public boolean monitorAndPrintJob() \n+      throws IOException, InterruptedException {\n+    String lastReport \u003d null;\n+    Job.TaskStatusFilter filter;\n+    Configuration clientConf \u003d cluster.getConf();\n+    filter \u003d Job.getTaskOutputFilter(clientConf);\n+    JobID jobId \u003d getJobID();\n+    LOG.info(\"Running job: \" + jobId);\n+    int eventCounter \u003d 0;\n+    boolean profiling \u003d getProfileEnabled();\n+    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n+    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n+    int progMonitorPollIntervalMillis \u003d \n+      Job.getProgressPollInterval(clientConf);\n+    while (!isComplete()) {\n+      Thread.sleep(progMonitorPollIntervalMillis);\n+      String report \u003d \n+        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n+            \" reduce \" + \n+            StringUtils.formatPercent(reduceProgress(), 0));\n+      if (!report.equals(lastReport)) {\n+        LOG.info(report);\n+        lastReport \u003d report;\n+      }\n+\n+      TaskCompletionEvent[] events \u003d \n+        getTaskCompletionEvents(eventCounter, 10); \n+      eventCounter +\u003d events.length;\n+      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n+    }\n+    Counters counters \u003d getCounters();\n+    if (counters !\u003d null) {\n+      LOG.info(counters.toString());\n+    }\n+    LOG.info(\"Job \" + jobId + \" completed with status: \"\n+          + getStatus().getState());\n+    return isSuccessful();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean monitorAndPrintJob() \n      throws IOException, InterruptedException {\n    String lastReport \u003d null;\n    Job.TaskStatusFilter filter;\n    Configuration clientConf \u003d cluster.getConf();\n    filter \u003d Job.getTaskOutputFilter(clientConf);\n    JobID jobId \u003d getJobID();\n    LOG.info(\"Running job: \" + jobId);\n    int eventCounter \u003d 0;\n    boolean profiling \u003d getProfileEnabled();\n    IntegerRanges mapRanges \u003d getProfileTaskRange(true);\n    IntegerRanges reduceRanges \u003d getProfileTaskRange(false);\n    int progMonitorPollIntervalMillis \u003d \n      Job.getProgressPollInterval(clientConf);\n    while (!isComplete()) {\n      Thread.sleep(progMonitorPollIntervalMillis);\n      String report \u003d \n        (\" map \" + StringUtils.formatPercent(mapProgress(), 0)+\n            \" reduce \" + \n            StringUtils.formatPercent(reduceProgress(), 0));\n      if (!report.equals(lastReport)) {\n        LOG.info(report);\n        lastReport \u003d report;\n      }\n\n      TaskCompletionEvent[] events \u003d \n        getTaskCompletionEvents(eventCounter, 10); \n      eventCounter +\u003d events.length;\n      printTaskEvents(events, filter, profiling, mapRanges, reduceRanges);\n    }\n    Counters counters \u003d getCounters();\n    if (counters !\u003d null) {\n      LOG.info(counters.toString());\n    }\n    LOG.info(\"Job \" + jobId + \" completed with status: \"\n          + getStatus().getState());\n    return isSuccessful();\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/Job.java"
    }
  }
}