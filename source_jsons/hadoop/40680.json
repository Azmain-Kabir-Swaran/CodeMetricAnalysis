{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationTagsManager.java",
  "functionName": "getNodeCardinalityByOp",
  "functionId": "getNodeCardinalityByOp___nodeId-NodeId__tags-AllocationTags__op-LongBinaryOperator",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
  "functionStartLine": 573,
  "functionEndLine": 596,
  "numCommitsSeen": 21,
  "timeTaken": 4300,
  "changeHistory": [
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
    "a08921ca6cb1dad98935808c8f474b654f861263",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
    "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
    "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
    "801c0988b5ad1eff1e896a2635c2937721c96b04"
  ],
  "changeHistoryShort": {
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": "Ybodychange",
    "a08921ca6cb1dad98935808c8f474b654f861263": "Ymultichange(Yparameterchange,Ybodychange)",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": "Ybodychange",
    "37f1a7b64fcc93191367330cd59d4d71d7b29ac7": "Ybodychange",
    "06eb63e64b05e2e8bb8a76c15360ab0495f11317": "Yfilerename",
    "801c0988b5ad1eff1e896a2635c2937721c96b04": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8013. Support application tags when defining application namespaces for placement constraints. Contributed by Weiwei Yang.\n",
      "commitDate": "04/04/18 10:51 AM",
      "commitName": "7853ec8d2fb8731b7f7c28fd87491a0a2d47967e",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "19/03/18 11:04 AM",
      "commitNameOld": "a08921ca6cb1dad98935808c8f474b654f861263",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.99,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,\n       LongBinaryOperator op) throws InvalidAllocationTagsQueryException {\n     readLock.lock();\n     try {\n       if (nodeId \u003d\u003d null || op \u003d\u003d null || tags \u003d\u003d null) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Must specify nodeId/tags/op to query cardinality\");\n       }\n \n       TypeToCountedTags mapping;\n       if (AllocationTagNamespaceType.ALL.equals(\n           tags.getNamespace().getNamespaceType())) {\n         mapping \u003d globalNodeMapping;\n       } else {\n         // Aggregate app tags cardinality by applications.\n-        mapping \u003d aggregateAllocationTags(\n-            tags.getNamespace().getNamespaceScope(),\n-            perAppNodeMappings);\n+        mapping \u003d aggregateAllocationTags(tags, perAppNodeMappings);\n       }\n \n       return mapping \u003d\u003d null ? 0 :\n           mapping.getCardinality(nodeId, tags.getTags(), op);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,\n      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null || tags \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      TypeToCountedTags mapping;\n      if (AllocationTagNamespaceType.ALL.equals(\n          tags.getNamespace().getNamespaceType())) {\n        mapping \u003d globalNodeMapping;\n      } else {\n        // Aggregate app tags cardinality by applications.\n        mapping \u003d aggregateAllocationTags(tags, perAppNodeMappings);\n      }\n\n      return mapping \u003d\u003d null ? 0 :\n          mapping.getCardinality(nodeId, tags.getTags(), op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
      "extendedDetails": {}
    },
    "a08921ca6cb1dad98935808c8f474b654f861263": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
      "commitDate": "19/03/18 11:04 AM",
      "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
          "commitDate": "19/03/18 11:04 AM",
          "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "05/03/18 11:24 AM",
          "commitNameOld": "1054b48c27f3158110bd0512afecded36eecb8ad",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 13.94,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n-  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n-      Set\u003cString\u003e tags, LongBinaryOperator op)\n-      throws InvalidAllocationTagsQueryException {\n+  public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,\n+      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {\n     readLock.lock();\n-\n     try {\n-      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n+      if (nodeId \u003d\u003d null || op \u003d\u003d null || tags \u003d\u003d null) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Must specify nodeId/tags/op to query cardinality\");\n       }\n \n       TypeToCountedTags mapping;\n-      if (applicationId !\u003d null) {\n-        mapping \u003d perAppNodeMappings.get(applicationId);\n-      } else {\n+      if (AllocationTagNamespaceType.ALL.equals(\n+          tags.getNamespace().getNamespaceType())) {\n         mapping \u003d globalNodeMapping;\n+      } else {\n+        // Aggregate app tags cardinality by applications.\n+        mapping \u003d aggregateAllocationTags(\n+            tags.getNamespace().getNamespaceScope(),\n+            perAppNodeMappings);\n       }\n \n-      if (mapping \u003d\u003d null) {\n-        return 0;\n-      }\n-\n-      return mapping.getCardinality(nodeId, tags, op);\n+      return mapping \u003d\u003d null ? 0 :\n+          mapping.getCardinality(nodeId, tags.getTags(), op);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,\n      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null || tags \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      TypeToCountedTags mapping;\n      if (AllocationTagNamespaceType.ALL.equals(\n          tags.getNamespace().getNamespaceType())) {\n        mapping \u003d globalNodeMapping;\n      } else {\n        // Aggregate app tags cardinality by applications.\n        mapping \u003d aggregateAllocationTags(\n            tags.getNamespace().getNamespaceScope(),\n            perAppNodeMappings);\n      }\n\n      return mapping \u003d\u003d null ? 0 :\n          mapping.getCardinality(nodeId, tags.getTags(), op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {
            "oldValue": "[nodeId-NodeId, applicationId-ApplicationId, tags-Set\u003cString\u003e, op-LongBinaryOperator]",
            "newValue": "[nodeId-NodeId, tags-AllocationTags, op-LongBinaryOperator]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8002. Support NOT_SELF and ALL namespace types for allocation tag. (Weiwei Yang via wangda)\n\nChange-Id: I63b4e4192a95bf7ded98c54e46a2871c72869700\n",
          "commitDate": "19/03/18 11:04 AM",
          "commitName": "a08921ca6cb1dad98935808c8f474b654f861263",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "05/03/18 11:24 AM",
          "commitNameOld": "1054b48c27f3158110bd0512afecded36eecb8ad",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 13.94,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n-  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n-      Set\u003cString\u003e tags, LongBinaryOperator op)\n-      throws InvalidAllocationTagsQueryException {\n+  public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,\n+      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {\n     readLock.lock();\n-\n     try {\n-      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n+      if (nodeId \u003d\u003d null || op \u003d\u003d null || tags \u003d\u003d null) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Must specify nodeId/tags/op to query cardinality\");\n       }\n \n       TypeToCountedTags mapping;\n-      if (applicationId !\u003d null) {\n-        mapping \u003d perAppNodeMappings.get(applicationId);\n-      } else {\n+      if (AllocationTagNamespaceType.ALL.equals(\n+          tags.getNamespace().getNamespaceType())) {\n         mapping \u003d globalNodeMapping;\n+      } else {\n+        // Aggregate app tags cardinality by applications.\n+        mapping \u003d aggregateAllocationTags(\n+            tags.getNamespace().getNamespaceScope(),\n+            perAppNodeMappings);\n       }\n \n-      if (mapping \u003d\u003d null) {\n-        return 0;\n-      }\n-\n-      return mapping.getCardinality(nodeId, tags, op);\n+      return mapping \u003d\u003d null ? 0 :\n+          mapping.getCardinality(nodeId, tags.getTags(), op);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, AllocationTags tags,\n      LongBinaryOperator op) throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null || tags \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      TypeToCountedTags mapping;\n      if (AllocationTagNamespaceType.ALL.equals(\n          tags.getNamespace().getNamespaceType())) {\n        mapping \u003d globalNodeMapping;\n      } else {\n        // Aggregate app tags cardinality by applications.\n        mapping \u003d aggregateAllocationTags(\n            tags.getNamespace().getNamespaceScope(),\n            perAppNodeMappings);\n      }\n\n      return mapping \u003d\u003d null ? 0 :\n          mapping.getCardinality(nodeId, tags.getTags(), op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7613. Implement Basic algorithm for constraint based placement. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n       Set\u003cString\u003e tags, LongBinaryOperator op)\n       throws InvalidAllocationTagsQueryException {\n     readLock.lock();\n \n     try {\n       if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Must specify nodeId/tags/op to query cardinality\");\n       }\n \n-      NodeToCountedTags mapping;\n+      TypeToCountedTags mapping;\n       if (applicationId !\u003d null) {\n         mapping \u003d perAppNodeMappings.get(applicationId);\n       } else {\n         mapping \u003d globalNodeMapping;\n       }\n \n       if (mapping \u003d\u003d null) {\n         return 0;\n       }\n \n       return mapping.getCardinality(nodeId, tags, op);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n      Set\u003cString\u003e tags, LongBinaryOperator op)\n      throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      TypeToCountedTags mapping;\n      if (applicationId !\u003d null) {\n        mapping \u003d perAppNodeMappings.get(applicationId);\n      } else {\n        mapping \u003d globalNodeMapping;\n      }\n\n      if (mapping \u003d\u003d null) {\n        return 0;\n      }\n\n      return mapping.getCardinality(nodeId, tags, op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
      "extendedDetails": {}
    },
    "37f1a7b64fcc93191367330cd59d4d71d7b29ac7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7653. Node group support for AllocationTagsManager. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "37f1a7b64fcc93191367330cd59d4d71d7b29ac7",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n       Set\u003cString\u003e tags, LongBinaryOperator op)\n       throws InvalidAllocationTagsQueryException {\n     readLock.lock();\n \n     try {\n       if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n         throw new InvalidAllocationTagsQueryException(\n             \"Must specify nodeId/tags/op to query cardinality\");\n       }\n \n       NodeToCountedTags mapping;\n       if (applicationId !\u003d null) {\n-        mapping \u003d perAppMappings.get(applicationId);\n-      } else{\n-        mapping \u003d globalMapping;\n+        mapping \u003d perAppNodeMappings.get(applicationId);\n+      } else {\n+        mapping \u003d globalNodeMapping;\n       }\n \n       if (mapping \u003d\u003d null) {\n         return 0;\n       }\n \n       return mapping.getCardinality(nodeId, tags, op);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n      Set\u003cString\u003e tags, LongBinaryOperator op)\n      throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      NodeToCountedTags mapping;\n      if (applicationId !\u003d null) {\n        mapping \u003d perAppNodeMappings.get(applicationId);\n      } else {\n        mapping \u003d globalNodeMapping;\n      }\n\n      if (mapping \u003d\u003d null) {\n        return 0;\n      }\n\n      return mapping.getCardinality(nodeId, tags, op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
      "extendedDetails": {}
    },
    "06eb63e64b05e2e8bb8a76c15360ab0495f11317": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7669. API and interface modifications for placement constraint processor. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "06eb63e64b05e2e8bb8a76c15360ab0495f11317",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n      Set\u003cString\u003e tags, LongBinaryOperator op)\n      throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      NodeToCountedTags mapping;\n      if (applicationId !\u003d null) {\n        mapping \u003d perAppMappings.get(applicationId);\n      } else{\n        mapping \u003d globalMapping;\n      }\n\n      if (mapping \u003d\u003d null) {\n        return 0;\n      }\n\n      return mapping.getCardinality(nodeId, tags, op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/constraint/AllocationTagsManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/AllocationTagsManager.java"
      }
    },
    "801c0988b5ad1eff1e896a2635c2937721c96b04": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7522. Introduce AllocationTagsManager to associate allocation tags to nodes. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "801c0988b5ad1eff1e896a2635c2937721c96b04",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,27 @@\n+  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n+      Set\u003cString\u003e tags, LongBinaryOperator op)\n+      throws InvalidAllocationTagsQueryException {\n+    readLock.lock();\n+\n+    try {\n+      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n+        throw new InvalidAllocationTagsQueryException(\n+            \"Must specify nodeId/tags/op to query cardinality\");\n+      }\n+\n+      NodeToCountedTags mapping;\n+      if (applicationId !\u003d null) {\n+        mapping \u003d perAppMappings.get(applicationId);\n+      } else{\n+        mapping \u003d globalMapping;\n+      }\n+\n+      if (mapping \u003d\u003d null) {\n+        return 0;\n+      }\n+\n+      return mapping.getCardinality(nodeId, tags, op);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long getNodeCardinalityByOp(NodeId nodeId, ApplicationId applicationId,\n      Set\u003cString\u003e tags, LongBinaryOperator op)\n      throws InvalidAllocationTagsQueryException {\n    readLock.lock();\n\n    try {\n      if (nodeId \u003d\u003d null || op \u003d\u003d null) {\n        throw new InvalidAllocationTagsQueryException(\n            \"Must specify nodeId/tags/op to query cardinality\");\n      }\n\n      NodeToCountedTags mapping;\n      if (applicationId !\u003d null) {\n        mapping \u003d perAppMappings.get(applicationId);\n      } else{\n        mapping \u003d globalMapping;\n      }\n\n      if (mapping \u003d\u003d null) {\n        return 0;\n      }\n\n      return mapping.getCardinality(nodeId, tags, op);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/constraint/AllocationTagsManager.java"
    }
  }
}